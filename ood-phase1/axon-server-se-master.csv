Project Name,Package Name,Class Name,Class Type,Class Visibility,Is Abstract,Is Static,Is Final,Is Interface,Extends,Implements,Children,Fields,Methods,Overrides,Static Methods,final Methods , Abstract Methods, Association, Aggregation, Delegation, Composition, Instantiation, API
axon-server-se-master,io.axoniq.axonserver.access,ApplicationBinding,1,1,0,0,0,false,0 ,0 ,0 ,name: String ,name{ Params :  Returns : String} toString{ Params :  Returns : String} ,toString ,,,,,String ,,String ,,null
axon-server-se-master,io.axoniq.axonserver.access.jpa,FunctionRole,1,1,0,0,0,false,0 ,0 ,0 ,id: Long function: String role: Role ,getId{ Params :  Returns : Long} setId{ Params : Long Returns : void} getFunction{ Params :  Returns : String} setFunction{ Params : String Returns : void} getRole{ Params :  Returns : Role} setRole{ Params : Role Returns : void} ,,,,,,Role ,,Role ,,null
axon-server-se-master,io.axoniq.axonserver.access.jpa,PathToFunction,1,1,0,0,0,false,0 ,0 ,0 ,path: String function: String ,getPath{ Params :  Returns : String} setPath{ Params : String Returns : void} getFunction{ Params :  Returns : String} setFunction{ Params : String Returns : void} ,,,,,,String ,,String ,,null
axon-server-se-master,io.axoniq.axonserver.access.jpa,Role,1,1,0,0,0,false,0 ,0 ,0 ,role: String description: String functions: Set<FunctionRole> ,getRole{ Params :  Returns : String} setRole{ Params : String Returns : void} getDescription{ Params :  Returns : String} setDescription{ Params : String Returns : void} getFunctions{ Params :  Returns : Set<FunctionRole>} setFunctions{ Params : Set<FunctionRole> Returns : void} ,,,,,,Set<FunctionRole> ,,Set<FunctionRole> ,,null
axon-server-se-master,io.axoniq.axonserver.access.jpa,User,1,1,0,0,0,false,0 ,0 ,0 ,userName: String password: String enabled: boolean roles: Set<UserRole> ,getUserName{ Params :  Returns : String} setUserName{ Params : String Returns : void} getPassword{ Params :  Returns : String} setPassword{ Params : String Returns : void} isEnabled{ Params :  Returns : boolean} setEnabled{ Params : boolean Returns : void} getRoles{ Params :  Returns : Set<UserRole>} setRoles{ Params : Set<UserRole> Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} newContextPermissions{ Params : User Returns : User} removeContext{ Params : String Returns : void} toString{ Params :  Returns : String} ,equals hashCode toString ,newContextPermissions ,,,,Set<UserRole> ,,Set<UserRole> ,HashSet UserRole User ,r: 
axon-server-se-master,io.axoniq.axonserver.access.jpa,UserRole,1,1,0,0,0,false,0 ,0 ,0 ,id: Long role: String context: String ,getId{ Params :  Returns : Long} setId{ Params : Long Returns : void} getRole{ Params :  Returns : String} setRole{ Params : String Returns : void} getContext{ Params :  Returns : String} setContext{ Params : String Returns : void} toString{ Params :  Returns : String} parse{ Params : String Returns : UserRole} ,toString ,parse ,,,,String ,,String ,UserRole ,userRole: , "*"
axon-server-se-master,io.axoniq.axonserver.access.roles,FunctionRoleRepository,2,1,0,0,0,true,0 ,0 ,0 ,,findByFunction{ Params : String Returns : Collection<FunctionRole>} ,,,,,,,,,,userRole: , "*"
axon-server-se-master,io.axoniq.axonserver.access.roles,PathToFunctionRepository,2,1,0,0,0,true,0 ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.access.roles,RoleController,1,1,0,0,0,false,0 ,0 ,0 ,roleRepository: RoleRepository ,listRoles{ Params :  Returns : List<Role>} ,,,,,,RoleRepository ,,RoleRepository ,,roleRepository: 
axon-server-se-master,io.axoniq.axonserver.access.roles,RoleRepository,2,1,0,0,0,true,0 ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.access.user,UserRepository,2,1,0,0,0,true,0 ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver,ActiveRequestsCache,1,1,0,0,0,false,0 ,ConstraintCache<String,R> ,CancelStrategy Completable ,buffer: ConstraintCache<String, R> ,size{ Params :  Returns : int} remove{ Params : String Returns : R} get{ Params : String Returns : R} put{ Params : String,R Returns : R} entrySet{ Params :  Returns : Collection<Entry<String,R>>} cancel{ Params : CancelStrategy<R> Returns : void} cancel{ Params : String,R Returns : void} requestToBeCanceled{ Params : String,R Returns : boolean} onCompletion{ Params : Runnable Returns : void} ,size remove get put entrySet ,,,,ConstraintCache ,ConstraintCache<String,R> ,,ConstraintCache<String,R> ,,e: 
axon-server-se-master,io.axoniq.axonserver,CancelStrategy,3,1,0,0,0,true,0 ,ConstraintCache<String,R> ,CancelStrategy Completable ,,size{ Params :  Returns : int} remove{ Params : String Returns : R} get{ Params : String Returns : R} put{ Params : String,R Returns : R} entrySet{ Params :  Returns : Collection<Entry<String,R>>} cancel{ Params : CancelStrategy<R> Returns : void} cancel{ Params : String,R Returns : void} requestToBeCanceled{ Params : String,R Returns : boolean} onCompletion{ Params : Runnable Returns : void} ,size remove get put entrySet ,,,,,,,,,e: 
axon-server-se-master,io.axoniq.axonserver,Completable,3,1,0,0,0,true,0 ,ConstraintCache<String,R> ,CancelStrategy Completable ,,size{ Params :  Returns : int} remove{ Params : String Returns : R} get{ Params : String Returns : R} put{ Params : String,R Returns : R} entrySet{ Params :  Returns : Collection<Entry<String,R>>} cancel{ Params : CancelStrategy<R> Returns : void} cancel{ Params : String,R Returns : void} requestToBeCanceled{ Params : String,R Returns : boolean} onCompletion{ Params : Runnable Returns : void} ,size remove get put entrySet ,,,,,,,,,e: 
axon-server-se-master,io.axoniq.axonserver.admin,CancelOnHandlerDisconnected,1,1,0,0,0,false,0 ,CancelStrategy<Instruction> ,0 ,clientId: String ,cancel{ Params : String,Instruction Returns : void} requestToBeCanceled{ Params : String,Instruction Returns : boolean} ,cancel requestToBeCanceled ,,,,CancelStrategy ,String ,,String ,,request: , clientId
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.requestprocessor,DistributedEventProcessor,1,1,0,0,0,false,0 ,EventProcessor ,ClientInstance Segment ,TRACKING_EVENT_PROCESSOR_MODE: String id: EventProcessorId clientProcessors: List<ClientProcessor> ,id{ Params :  Returns : EventProcessorId} mode{ Params :  Returns : String} instances{ Params :  Returns : Iterable<EventProcessorInstance>} isStreaming{ Params :  Returns : boolean} isStreamingProcessor{ Params : EventProcessorInfo Returns : boolean} loadBalancingStrategyName{ Params :  Returns : String} clientId{ Params :  Returns : String} isRunning{ Params :  Returns : boolean} maxCapacity{ Params :  Returns : int} claimedSegments{ Params :  Returns : Iterable<EventProcessorSegment>} id{ Params :  Returns : int} onePartOf{ Params :  Returns : int} claimedBy{ Params :  Returns : String} isCaughtUp{ Params :  Returns : boolean} isReplaying{ Params :  Returns : boolean} tokenPosition{ Params :  Returns : long} isInError{ Params :  Returns : boolean} error{ Params :  Returns : Optional<String>} ,id mode instances isStreaming loadBalancingStrategyName clientId isRunning maxCapacity claimedSegments id onePartOf claimedBy isCaughtUp isReplaying tokenPosition isInError error ,,,,EventProcessor ,List<ClientProcessor> ,,List<ClientProcessor> ,LinkedList LinkedList Segment ,eventProcessorInfo: 
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.requestprocessor,ClientInstance,3,2,0,1,0,false,0 ,EventProcessor ,ClientInstance Segment ,clientProcessor: ClientProcessor ,id{ Params :  Returns : EventProcessorId} mode{ Params :  Returns : String} instances{ Params :  Returns : Iterable<EventProcessorInstance>} isStreaming{ Params :  Returns : boolean} isStreamingProcessor{ Params : EventProcessorInfo Returns : boolean} loadBalancingStrategyName{ Params :  Returns : String} clientId{ Params :  Returns : String} isRunning{ Params :  Returns : boolean} maxCapacity{ Params :  Returns : int} claimedSegments{ Params :  Returns : Iterable<EventProcessorSegment>} id{ Params :  Returns : int} onePartOf{ Params :  Returns : int} claimedBy{ Params :  Returns : String} isCaughtUp{ Params :  Returns : boolean} isReplaying{ Params :  Returns : boolean} tokenPosition{ Params :  Returns : long} isInError{ Params :  Returns : boolean} error{ Params :  Returns : Optional<String>} ,id mode instances isStreaming loadBalancingStrategyName clientId isRunning maxCapacity claimedSegments id onePartOf claimedBy isCaughtUp isReplaying tokenPosition isInError error ,,,,EventProcessorInstance ,ClientProcessor ,,ClientProcessor ,LinkedList Segment ,clientProcessor: 
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.requestprocessor,Segment,3,2,0,1,0,false,0 ,EventProcessor ,ClientInstance Segment ,clientId: String segmentStatus: SegmentStatus ,id{ Params :  Returns : EventProcessorId} mode{ Params :  Returns : String} instances{ Params :  Returns : Iterable<EventProcessorInstance>} isStreaming{ Params :  Returns : boolean} isStreamingProcessor{ Params : EventProcessorInfo Returns : boolean} loadBalancingStrategyName{ Params :  Returns : String} clientId{ Params :  Returns : String} isRunning{ Params :  Returns : boolean} maxCapacity{ Params :  Returns : int} claimedSegments{ Params :  Returns : Iterable<EventProcessorSegment>} id{ Params :  Returns : int} onePartOf{ Params :  Returns : int} claimedBy{ Params :  Returns : String} isCaughtUp{ Params :  Returns : boolean} isReplaying{ Params :  Returns : boolean} tokenPosition{ Params :  Returns : long} isInError{ Params :  Returns : boolean} error{ Params :  Returns : Optional<String>} ,id mode instances isStreaming loadBalancingStrategyName clientId isRunning maxCapacity claimedSegments id onePartOf claimedBy isCaughtUp isReplaying tokenPosition isInError error ,,,,EventProcessorSegment ,SegmentStatus ,,SegmentStatus ,,Optional: 
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.requestprocessor,InstructionInformation,1,1,0,0,0,false,0 ,Instruction ,0 ,timestamp: long completionHandler: MonoSink<Result> instructionId: String requestType: String targetClients: Set<String> waitingForClients: Set<String> completionListener: AtomicReference<Runnable> resultRef: AtomicReference<io.axoniq.axonserver.admin.Result> ,timestamp{ Params :  Returns : long} description{ Params :  Returns : String} on{ Params : InstructionResult Returns : void} map{ Params : io.axoniq.axonserver.admin.Result Returns : Result} isSuccess{ Params :  Returns : boolean} isAccepted{ Params :  Returns : boolean} completeExceptionally{ Params : ErrorCode,String Returns : void} isWaitingFor{ Params : String Returns : boolean} onCompletion{ Params : Runnable Returns : void} ,timestamp description on isSuccess isAccepted completeExceptionally isWaitingFor onCompletion ,,,,Instruction ,AtomicReference<io.axoniq.axonserver.admin.Result> ,,AtomicReference<io.axoniq.axonserver.admin.Result> ,AtomicReference AtomicReference CopyOnWriteArraySet MessagingPlatformException Result MessagingPlatformException ,this.completionListener: , listener
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.requestprocessor,LocalEventProcessorsAdminService,1,1,0,0,0,false,0 ,EventProcessorAdminService ,Segment ,auditLog: Logger logger: Logger processorEventsSource: ProcessorEventPublisher eventProcessors: Flux<ClientProcessor> instructionCache: ConstraintCache<String, Instruction> strategyController: LoadBalanceStrategyRepository ,clientsBy{ Params : EventProcessorId,Authentication Returns : Flux<String>} eventProcessors{ Params : Authentication Returns : Flux<EventProcessor>} eventProcessorsByComponent{ Params : String,Authentication Returns : Flux<EventProcessor>} group{ Params : Flux<ClientProcessor> Returns : Flux<EventProcessor>} pause{ Params : EventProcessorId,Authentication Returns : Mono<Result>} logError{ Params : String,Throwable Returns : void} start{ Params : EventProcessorId,Authentication Returns : Mono<Result>} split{ Params : EventProcessorId,Authentication Returns : Mono<Result>} merge{ Params : EventProcessorId,Authentication Returns : Mono<Result>} move{ Params : EventProcessorId,int,String,Authentication Returns : Mono<Result>} deduceSegmentToMerge{ Params : Segment Returns : int} loadBalance{ Params : EventProcessorId,String,Authentication Returns : Mono<Void>} match{ Params : ClientProcessor,EventProcessorId Returns : boolean} setAutoLoadBalanceStrategy{ Params : EventProcessorId,String,Authentication Returns : Mono<Void>} getBalancingStrategies{ Params : Authentication Returns : Iterable<LoadBalancingStrategy>} ,clientsBy eventProcessors eventProcessorsByComponent pause start split merge move loadBalance setAutoLoadBalanceStrategy getBalancingStrategies ,,,,EventProcessorAdminService ,,,,EventProcessorIdentifier EventProcessorIdentifier DistributedEventProcessor MessagingPlatformException InstructionInformation MessagingPlatformException InstructionInformation Segment MessagingPlatformException InstructionInformation Segment IllegalArgumentException ClientContext InstructionInformation EventProcessorIdentifier MessagingPlatformException MessagingPlatformException MessagingPlatformException InstructionInformation TrackingEventProcessor UnsupportedOperationException ,strategyController: 
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.requestprocessor,Segment,3,2,0,1,0,false,0 ,EventProcessorAdminService ,Segment ,clientId: String context: String segmentId: int onePartOf: int ,clientsBy{ Params : EventProcessorId,Authentication Returns : Flux<String>} eventProcessors{ Params : Authentication Returns : Flux<EventProcessor>} eventProcessorsByComponent{ Params : String,Authentication Returns : Flux<EventProcessor>} group{ Params : Flux<ClientProcessor> Returns : Flux<EventProcessor>} pause{ Params : EventProcessorId,Authentication Returns : Mono<Result>} logError{ Params : String,Throwable Returns : void} start{ Params : EventProcessorId,Authentication Returns : Mono<Result>} split{ Params : EventProcessorId,Authentication Returns : Mono<Result>} merge{ Params : EventProcessorId,Authentication Returns : Mono<Result>} move{ Params : EventProcessorId,int,String,Authentication Returns : Mono<Result>} deduceSegmentToMerge{ Params : Segment Returns : int} loadBalance{ Params : EventProcessorId,String,Authentication Returns : Mono<Void>} match{ Params : ClientProcessor,EventProcessorId Returns : boolean} setAutoLoadBalanceStrategy{ Params : EventProcessorId,String,Authentication Returns : Mono<Void>} getBalancingStrategies{ Params : Authentication Returns : Iterable<LoadBalancingStrategy>} ,clientsBy eventProcessors eventProcessorsByComponent pause start split merge move loadBalance setAutoLoadBalanceStrategy getBalancingStrategies ,,,,,int ,,int ,,null
axon-server-se-master,io.axoniq.axonserver.admin,Instruction,2,1,0,0,0,true,0 ,EventProcessorAdminService ,0 ,,timestamp{ Params :  Returns : long} description{ Params :  Returns : String} on{ Params : InstructionResult Returns : void} completeExceptionally{ Params : ErrorCode,String Returns : void} isWaitingFor{ Params : String Returns : boolean} ,,,,,,,,,,strategyController: 
axon-server-se-master,io.axoniq.axonserver.admin,InstructionCache,1,1,0,0,0,false,ActiveRequestsCache<Instruction> ,0 ,0 ,REQUEST_TYPE: String FULL_BUFFER_MESSAGE: String onTimeout: CancelStrategy<Instruction> ,completeOnTimeout{ Params : Instruction Returns : void} checkTimeout{ Params :  Returns : void} on{ Params : ApplicationDisconnected Returns : void} ,,,,,,CancelStrategy<Instruction> ,,CancelStrategy<Instruction> ,LimitedBuffer CancelOnTimeout CancelOnHandlerDisconnected ,this: , onApplicationDisconnected
axon-server-se-master,io.axoniq.axonserver.admin,InstructionResult,2,1,0,0,0,true,ActiveRequestsCache<Instruction> ,0 ,0 ,,clientId{ Params :  Returns : String} result{ Params :  Returns : Result} errorCode{ Params :  Returns : String} errorMessage{ Params :  Returns : String} ,,,,,,,,,,this: , onApplicationDisconnected
axon-server-se-master,io.axoniq.axonserver.admin,InstructionResultHandler,1,1,0,0,0,false,0 ,0 ,0 ,instructionCache: InstructionCache ,on{ Params : InstructionResultEvent Returns : void} clientId{ Params :  Returns : String} result{ Params :  Returns : Result} errorCode{ Params :  Returns : String} errorMessage{ Params :  Returns : String} ,clientId result errorCode errorMessage ,,,,,InstructionCache ,,InstructionCache ,InstructionResult ,event: 
axon-server-se-master,io.axoniq.axonserver.admin,InstructionResultPublisher,1,1,0,0,0,false,0 ,0 ,0 ,ERROR_MESSAGE_ACK_ONLY: String applicationEventPublisher: AxonServerEventPublisher registerHandler: BiConsumer<RequestCase, InstructionConsumer> versionSupplier: Function<ClientStreamIdentification, Version> supportedApiVersions: List<Version> ,initialize{ Params :  Returns : void} publishResultOnAck{ Params : PlatformService.ClientComponent,PlatformInboundInstruction Returns : void} publishResult{ Params : PlatformService.ClientComponent,PlatformInboundInstruction Returns : void} supportInstructionResult{ Params : Version Returns : boolean} ,,,,,,List<Version> ,,List<Version> ,BackwardsCompatibleVersion BackwardsCompatibleVersion UnknownVersion BackwardsCompatibleVersion ClientStreamIdentification InstructionResultEvent InstructionResultEvent ,clientVersion: , supportedApiVersions
axon-server-se-master,io.axoniq.axonserver.admin.user.requestprocessor,LocalUserAdminService,1,1,0,0,0,false,0 ,UserAdminService ,0 ,auditLog: Logger userController: UserController eventPublisher: ApplicationEventPublisher roleController: RoleController ,createOrUpdateUser{ Params : String,String,Set<? extends io.axoniq.axonserver.admin.user.api.UserRole>,Authentication Returns : void} validateContexts{ Params : Set<UserRole> Returns : void} validContext{ Params : String Returns : boolean} deleteUser{ Params : String,Authentication Returns : void} users{ Params : Authentication Returns : List<User>} checkRoles{ Params : Set<? extends io.axoniq.axonserver.admin.user.api.UserRole> Returns : void} ,createOrUpdateUser deleteUser users ,,,,UserAdminService ,RoleController ,,RoleController ,UserRole UserUpdated MessagingPlatformException UserDeleted MessagingPlatformException ,validRoles: , role
axon-server-se-master,io.axoniq.axonserver.admin.user.requestprocessor,UserController,1,1,0,0,0,false,0 ,0 ,0 ,PWD_NOLOGON: String passwordEncoder: PasswordEncoder userRepository: UserRepository ,deleteUser{ Params : String Returns : void} getUsers{ Params :  Returns : List<User>} updateUser{ Params : String,String,Set<UserRole> Returns : User} syncUser{ Params : User Returns : void} getPassword{ Params : String Returns : String} findUser{ Params : String Returns : User} removeRolesForContext{ Params : String Returns : void} deleteAll{ Params :  Returns : void} ,,,,,,UserRepository ,,UserRepository ,User ,userRepository: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,AxonServerEvent,2,1,0,0,0,true,0 ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.applicationevents,AxonServerEventPublisher,2,1,0,0,0,true,0 ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.applicationevents,EventProcessorEvents,1,1,0,0,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.applicationevents,BaseEventProcessorsEvent,3,1,1,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,proxied: boolean ,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,boolean ,,boolean ,,userRepository: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,EventProcessorStatusUpdate,3,1,0,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,eventProcessorStatus: ClientEventProcessorInfo ,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,AxonServerEvent ,ClientEventProcessorInfo ,,ClientEventProcessorInfo ,,userRepository: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,EventProcessorStatusUpdated,3,1,0,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,eventProcessorStatus: ClientEventProcessorInfo ,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,ClientEventProcessorInfo ,,ClientEventProcessorInfo ,,userRepository: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,PauseEventProcessorRequest,3,1,0,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,context: String clientId: String processorName: String instructionId: String ,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,String ,,String ,,userRepository: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,StartEventProcessorRequest,3,1,0,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,context: String clientId: String processorName: String instructionId: String ,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,String ,,String ,,userRepository: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,BaseSegmentRequest,3,1,1,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,context: String clientId: String processorName: String instructionId: String segmentId: int ,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,int ,,int ,,userRepository: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,ReleaseSegmentRequest,3,1,0,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.applicationevents,ProcessorStatusRequest,3,1,0,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,context: String clientId: String processorName: String ,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,String ,,String ,,userRepository: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,SplitSegmentRequest,3,1,0,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.applicationevents,MergeSegmentRequest,3,1,0,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.applicationevents,SplitSegmentsSucceeded,3,1,0,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,context: String clientId: String processorName: String ,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,AxonServerEvent ,String ,,String ,,userRepository: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,MergeSegmentsSucceeded,3,1,0,1,0,false,0 ,0 ,BaseEventProcessorsEvent EventProcessorStatusUpdate EventProcessorStatusUpdated PauseEventProcessorRequest StartEventProcessorRequest BaseSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest SplitSegmentRequest MergeSegmentRequest SplitSegmentsSucceeded MergeSegmentsSucceeded ,context: String clientId: String processorName: String ,isProxied{ Params :  Returns : boolean} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} eventProcessorStatus{ Params :  Returns : ClientEventProcessorInfo} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getProcessorName{ Params :  Returns : String} getSegmentId{ Params :  Returns : int} context{ Params :  Returns : String} instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} clientId{ Params :  Returns : String} processorName{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,AxonServerEvent ,String ,,String ,,userRepository: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,InstructionResultEvent,1,1,0,0,0,false,0 ,AxonServerEvent ,0 ,instructionId: String clientId: String result: Result errorCode: String errorMessage: String ,instructionId{ Params :  Returns : String} clientId{ Params :  Returns : String} isSuccess{ Params :  Returns : boolean} result{ Params :  Returns : Result} errorCode{ Params :  Returns : String} errorMessage{ Params :  Returns : String} ,,,,,AxonServerEvent ,String ,,String ,,Result.SUCCESS: , result
axon-server-se-master,io.axoniq.axonserver.applicationevents,LocalEventPublisher,1,1,0,0,0,false,0 ,AxonServerEventPublisher ,0 ,eventPublisher: ApplicationEventPublisher ,publishEvent{ Params : Object Returns : void} ,publishEvent ,,,,AxonServerEventPublisher ,ApplicationEventPublisher ,,ApplicationEventPublisher ,,this.eventPublisher: , event
axon-server-se-master,io.axoniq.axonserver.applicationevents,SubscriptionEvents,1,1,0,0,0,false,0 ,0 ,SubscriptionBaseEvent UnsubscribeCommand UnsubscribeQuery SubscribeQuery SubscribeCommand ,,getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} getRequest{ Params :  Returns : CommandSubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getUnsubscribe{ Params :  Returns : QuerySubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getSubscription{ Params :  Returns : QuerySubscription} getQueryHandler{ Params :  Returns : QueryHandler} clientIdentification{ Params :  Returns : ClientStreamIdentification} getRequest{ Params :  Returns : CommandSubscription} getHandler{ Params :  Returns : CommandHandler} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} ,,,,,,,,,ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ,null
axon-server-se-master,io.axoniq.axonserver.applicationevents,SubscriptionBaseEvent,3,1,1,1,0,false,0 ,0 ,SubscriptionBaseEvent UnsubscribeCommand UnsubscribeQuery SubscribeQuery SubscribeCommand ,context: String isProxied: boolean ,getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} getRequest{ Params :  Returns : CommandSubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getUnsubscribe{ Params :  Returns : QuerySubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getSubscription{ Params :  Returns : QuerySubscription} getQueryHandler{ Params :  Returns : QueryHandler} clientIdentification{ Params :  Returns : ClientStreamIdentification} getRequest{ Params :  Returns : CommandSubscription} getHandler{ Params :  Returns : CommandHandler} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} ,,,,,,boolean ,,boolean ,,this.eventPublisher: , event
axon-server-se-master,io.axoniq.axonserver.applicationevents,UnsubscribeCommand,3,1,0,1,0,false,0 ,0 ,SubscriptionBaseEvent UnsubscribeCommand UnsubscribeQuery SubscribeQuery SubscribeCommand ,clientStreamId: String request: CommandSubscription ,getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} getRequest{ Params :  Returns : CommandSubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getUnsubscribe{ Params :  Returns : QuerySubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getSubscription{ Params :  Returns : QuerySubscription} getQueryHandler{ Params :  Returns : QueryHandler} clientIdentification{ Params :  Returns : ClientStreamIdentification} getRequest{ Params :  Returns : CommandSubscription} getHandler{ Params :  Returns : CommandHandler} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} ,,,,,,CommandSubscription ,,CommandSubscription ,ClientStreamIdentification ,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,UnsubscribeQuery,3,1,0,1,0,false,0 ,0 ,SubscriptionBaseEvent UnsubscribeCommand UnsubscribeQuery SubscribeQuery SubscribeCommand ,clientStreamId: String unsubscribe: QuerySubscription ,getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} getRequest{ Params :  Returns : CommandSubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getUnsubscribe{ Params :  Returns : QuerySubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getSubscription{ Params :  Returns : QuerySubscription} getQueryHandler{ Params :  Returns : QueryHandler} clientIdentification{ Params :  Returns : ClientStreamIdentification} getRequest{ Params :  Returns : CommandSubscription} getHandler{ Params :  Returns : CommandHandler} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} ,,,,,,QuerySubscription ,,QuerySubscription ,ClientStreamIdentification ,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,SubscribeQuery,3,1,0,1,0,false,0 ,0 ,SubscriptionBaseEvent UnsubscribeCommand UnsubscribeQuery SubscribeQuery SubscribeCommand ,clientStreamId: String subscription: QuerySubscription queryHandler: QueryHandler ,getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} getRequest{ Params :  Returns : CommandSubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getUnsubscribe{ Params :  Returns : QuerySubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getSubscription{ Params :  Returns : QuerySubscription} getQueryHandler{ Params :  Returns : QueryHandler} clientIdentification{ Params :  Returns : ClientStreamIdentification} getRequest{ Params :  Returns : CommandSubscription} getHandler{ Params :  Returns : CommandHandler} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} ,,,,,,QueryHandler ,,QueryHandler ,ClientStreamIdentification ,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,SubscribeCommand,3,1,0,1,0,false,0 ,0 ,SubscriptionBaseEvent UnsubscribeCommand UnsubscribeQuery SubscribeQuery SubscribeCommand ,clientStreamId: String request: CommandSubscription handler: CommandHandler ,getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} getRequest{ Params :  Returns : CommandSubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getUnsubscribe{ Params :  Returns : QuerySubscription} clientIdentification{ Params :  Returns : ClientStreamIdentification} getSubscription{ Params :  Returns : QuerySubscription} getQueryHandler{ Params :  Returns : QueryHandler} clientIdentification{ Params :  Returns : ClientStreamIdentification} getRequest{ Params :  Returns : CommandSubscription} getHandler{ Params :  Returns : CommandHandler} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} ,,,,,,CommandHandler ,,CommandHandler ,ClientStreamIdentification ,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,SubscriptionQueryEvents,1,1,0,0,0,false,0 ,0 ,ProxiedSubscriptionQueryRequest SubscriptionQueryRequestEvent SubscriptionQueryStarted SubscriptionQueryRequested SubscriptionQueryInitialResultRequested SubscriptionQueryCanceled SubscriptionQueryResponseReceived ,,subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} handler{ Params :  Returns : UpdateHandler} targetClient{ Params :  Returns : String} context{ Params :  Returns : String} subscriptionQuery{ Params :  Returns : SubscriptionQuery} isSubscription{ Params :  Returns : boolean} context{ Params :  Returns : String} handler{ Params :  Returns : UpdateHandler} subscription{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} errorHandler{ Params :  Returns : Consumer<Throwable>} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} context{ Params :  Returns : String} unsubscribe{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} response{ Params :  Returns : SubscriptionQueryResponse} unknownSubscriptionHandler{ Params :  Returns : Runnable} subscriptionId{ Params :  Returns : String} ,subscriptionQueryRequest subscriptionQueryRequest subscriptionQueryRequest ,,,subscriptionQueryRequest ,,,,,,null
axon-server-se-master,io.axoniq.axonserver.applicationevents,ProxiedSubscriptionQueryRequest,3,1,0,1,0,false,0 ,0 ,ProxiedSubscriptionQueryRequest SubscriptionQueryRequestEvent SubscriptionQueryStarted SubscriptionQueryRequested SubscriptionQueryInitialResultRequested SubscriptionQueryCanceled SubscriptionQueryResponseReceived ,request: SubscriptionQueryRequest context: String handler: UpdateHandler targetClientStreamId: String ,subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} handler{ Params :  Returns : UpdateHandler} targetClient{ Params :  Returns : String} context{ Params :  Returns : String} subscriptionQuery{ Params :  Returns : SubscriptionQuery} isSubscription{ Params :  Returns : boolean} context{ Params :  Returns : String} handler{ Params :  Returns : UpdateHandler} subscription{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} errorHandler{ Params :  Returns : Consumer<Throwable>} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} context{ Params :  Returns : String} unsubscribe{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} response{ Params :  Returns : SubscriptionQueryResponse} unknownSubscriptionHandler{ Params :  Returns : Runnable} subscriptionId{ Params :  Returns : String} ,subscriptionQueryRequest subscriptionQueryRequest subscriptionQueryRequest ,,,subscriptionQueryRequest ,,String ,,String ,,request: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,SubscriptionQueryRequestEvent,3,1,1,1,0,false,0 ,0 ,ProxiedSubscriptionQueryRequest SubscriptionQueryRequestEvent SubscriptionQueryStarted SubscriptionQueryRequested SubscriptionQueryInitialResultRequested SubscriptionQueryCanceled SubscriptionQueryResponseReceived ,context: String subscription: SubscriptionQuery updateHandler: UpdateHandler errorHandler: Consumer<Throwable> ,subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} handler{ Params :  Returns : UpdateHandler} targetClient{ Params :  Returns : String} context{ Params :  Returns : String} subscriptionQuery{ Params :  Returns : SubscriptionQuery} isSubscription{ Params :  Returns : boolean} context{ Params :  Returns : String} handler{ Params :  Returns : UpdateHandler} subscription{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} errorHandler{ Params :  Returns : Consumer<Throwable>} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} context{ Params :  Returns : String} unsubscribe{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} response{ Params :  Returns : SubscriptionQueryResponse} unknownSubscriptionHandler{ Params :  Returns : Runnable} subscriptionId{ Params :  Returns : String} ,subscriptionQueryRequest subscriptionQueryRequest subscriptionQueryRequest ,,,subscriptionQueryRequest ,,Consumer<Throwable> ,,Consumer<Throwable> ,,subscription: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,SubscriptionQueryStarted,3,1,0,1,0,false,0 ,0 ,ProxiedSubscriptionQueryRequest SubscriptionQueryRequestEvent SubscriptionQueryStarted SubscriptionQueryRequested SubscriptionQueryInitialResultRequested SubscriptionQueryCanceled SubscriptionQueryResponseReceived ,,subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} handler{ Params :  Returns : UpdateHandler} targetClient{ Params :  Returns : String} context{ Params :  Returns : String} subscriptionQuery{ Params :  Returns : SubscriptionQuery} isSubscription{ Params :  Returns : boolean} context{ Params :  Returns : String} handler{ Params :  Returns : UpdateHandler} subscription{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} errorHandler{ Params :  Returns : Consumer<Throwable>} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} context{ Params :  Returns : String} unsubscribe{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} response{ Params :  Returns : SubscriptionQueryResponse} unknownSubscriptionHandler{ Params :  Returns : Runnable} subscriptionId{ Params :  Returns : String} ,subscriptionQueryRequest subscriptionQueryRequest subscriptionQueryRequest ,,,subscriptionQueryRequest ,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,SubscriptionQueryRequested,3,1,0,1,0,false,0 ,0 ,ProxiedSubscriptionQueryRequest SubscriptionQueryRequestEvent SubscriptionQueryStarted SubscriptionQueryRequested SubscriptionQueryInitialResultRequested SubscriptionQueryCanceled SubscriptionQueryResponseReceived ,,subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} handler{ Params :  Returns : UpdateHandler} targetClient{ Params :  Returns : String} context{ Params :  Returns : String} subscriptionQuery{ Params :  Returns : SubscriptionQuery} isSubscription{ Params :  Returns : boolean} context{ Params :  Returns : String} handler{ Params :  Returns : UpdateHandler} subscription{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} errorHandler{ Params :  Returns : Consumer<Throwable>} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} context{ Params :  Returns : String} unsubscribe{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} response{ Params :  Returns : SubscriptionQueryResponse} unknownSubscriptionHandler{ Params :  Returns : Runnable} subscriptionId{ Params :  Returns : String} ,subscriptionQueryRequest subscriptionQueryRequest subscriptionQueryRequest ,,,subscriptionQueryRequest ,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,SubscriptionQueryInitialResultRequested,3,1,0,1,0,false,0 ,0 ,ProxiedSubscriptionQueryRequest SubscriptionQueryRequestEvent SubscriptionQueryStarted SubscriptionQueryRequested SubscriptionQueryInitialResultRequested SubscriptionQueryCanceled SubscriptionQueryResponseReceived ,,subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} handler{ Params :  Returns : UpdateHandler} targetClient{ Params :  Returns : String} context{ Params :  Returns : String} subscriptionQuery{ Params :  Returns : SubscriptionQuery} isSubscription{ Params :  Returns : boolean} context{ Params :  Returns : String} handler{ Params :  Returns : UpdateHandler} subscription{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} errorHandler{ Params :  Returns : Consumer<Throwable>} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} context{ Params :  Returns : String} unsubscribe{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} response{ Params :  Returns : SubscriptionQueryResponse} unknownSubscriptionHandler{ Params :  Returns : Runnable} subscriptionId{ Params :  Returns : String} ,subscriptionQueryRequest subscriptionQueryRequest subscriptionQueryRequest ,,,subscriptionQueryRequest ,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,SubscriptionQueryCanceled,3,1,0,1,0,false,0 ,0 ,ProxiedSubscriptionQueryRequest SubscriptionQueryRequestEvent SubscriptionQueryStarted SubscriptionQueryRequested SubscriptionQueryInitialResultRequested SubscriptionQueryCanceled SubscriptionQueryResponseReceived ,context: String unsubscription: SubscriptionQuery ,subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} handler{ Params :  Returns : UpdateHandler} targetClient{ Params :  Returns : String} context{ Params :  Returns : String} subscriptionQuery{ Params :  Returns : SubscriptionQuery} isSubscription{ Params :  Returns : boolean} context{ Params :  Returns : String} handler{ Params :  Returns : UpdateHandler} subscription{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} errorHandler{ Params :  Returns : Consumer<Throwable>} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} context{ Params :  Returns : String} unsubscribe{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} response{ Params :  Returns : SubscriptionQueryResponse} unknownSubscriptionHandler{ Params :  Returns : Runnable} subscriptionId{ Params :  Returns : String} ,subscriptionQueryRequest subscriptionQueryRequest subscriptionQueryRequest ,,,subscriptionQueryRequest ,,SubscriptionQuery ,,SubscriptionQuery ,,unsubscription: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,SubscriptionQueryResponseReceived,3,1,0,1,0,false,0 ,0 ,ProxiedSubscriptionQueryRequest SubscriptionQueryRequestEvent SubscriptionQueryStarted SubscriptionQueryRequested SubscriptionQueryInitialResultRequested SubscriptionQueryCanceled SubscriptionQueryResponseReceived ,response: SubscriptionQueryResponse unknownSubscriptionHandler: Runnable ,subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} handler{ Params :  Returns : UpdateHandler} targetClient{ Params :  Returns : String} context{ Params :  Returns : String} subscriptionQuery{ Params :  Returns : SubscriptionQuery} isSubscription{ Params :  Returns : boolean} context{ Params :  Returns : String} handler{ Params :  Returns : UpdateHandler} subscription{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} errorHandler{ Params :  Returns : Consumer<Throwable>} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} subscriptionQueryRequest{ Params :  Returns : SubscriptionQueryRequest} context{ Params :  Returns : String} unsubscribe{ Params :  Returns : SubscriptionQuery} subscriptionId{ Params :  Returns : String} response{ Params :  Returns : SubscriptionQueryResponse} unknownSubscriptionHandler{ Params :  Returns : Runnable} subscriptionId{ Params :  Returns : String} ,subscriptionQueryRequest subscriptionQueryRequest subscriptionQueryRequest ,,,subscriptionQueryRequest ,,Runnable ,,Runnable ,,response: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,TopologyEvents,1,1,0,0,0,false,0 ,0 ,TopologyBaseEvent ApplicationConnected ApplicationDisconnected CommandHandlerDisconnected QueryHandlerDisconnected ApplicationInactivityTimeout ApplicationReconnectRequested ,,isForwarded{ Params :  Returns : boolean} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} getReason{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} componentName{ Params :  Returns : String} client{ Params :  Returns : ClientContext} context{ Params :  Returns : String} componentName{ Params :  Returns : String} clientId{ Params :  Returns : String} reason{ Params :  Returns : String} ,,,,,,,,,ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ,null
axon-server-se-master,io.axoniq.axonserver.applicationevents,TopologyBaseEvent,3,1,1,1,0,false,0 ,0 ,TopologyBaseEvent ApplicationConnected ApplicationDisconnected CommandHandlerDisconnected QueryHandlerDisconnected ApplicationInactivityTimeout ApplicationReconnectRequested ,forwarded: boolean ,isForwarded{ Params :  Returns : boolean} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} getReason{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} componentName{ Params :  Returns : String} client{ Params :  Returns : ClientContext} context{ Params :  Returns : String} componentName{ Params :  Returns : String} clientId{ Params :  Returns : String} reason{ Params :  Returns : String} ,,,,,,boolean ,,boolean ,,response: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,ApplicationConnected,3,1,0,1,0,false,0 ,0 ,TopologyBaseEvent ApplicationConnected ApplicationDisconnected CommandHandlerDisconnected QueryHandlerDisconnected ApplicationInactivityTimeout ApplicationReconnectRequested ,context: String componentName: String clientStreamId: String clientId: String proxy: String ,isForwarded{ Params :  Returns : boolean} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} getReason{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} componentName{ Params :  Returns : String} client{ Params :  Returns : ClientContext} context{ Params :  Returns : String} componentName{ Params :  Returns : String} clientId{ Params :  Returns : String} reason{ Params :  Returns : String} ,,,,,,String ,,String ,ClientStreamIdentification ,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,ApplicationDisconnected,3,1,0,1,0,false,0 ,0 ,TopologyBaseEvent ApplicationConnected ApplicationDisconnected CommandHandlerDisconnected QueryHandlerDisconnected ApplicationInactivityTimeout ApplicationReconnectRequested ,context: String componentName: String clientStreamId: String clientId: String proxy: String reason: String ,isForwarded{ Params :  Returns : boolean} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} getReason{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} componentName{ Params :  Returns : String} client{ Params :  Returns : ClientContext} context{ Params :  Returns : String} componentName{ Params :  Returns : String} clientId{ Params :  Returns : String} reason{ Params :  Returns : String} ,,,,,,String ,,String ,ClientStreamIdentification ,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,CommandHandlerDisconnected,3,1,0,1,0,false,0 ,0 ,TopologyBaseEvent ApplicationConnected ApplicationDisconnected CommandHandlerDisconnected QueryHandlerDisconnected ApplicationInactivityTimeout ApplicationReconnectRequested ,context: String clientId: String clientStreamId: String ,isForwarded{ Params :  Returns : boolean} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} getReason{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} componentName{ Params :  Returns : String} client{ Params :  Returns : ClientContext} context{ Params :  Returns : String} componentName{ Params :  Returns : String} clientId{ Params :  Returns : String} reason{ Params :  Returns : String} ,,,,,,String ,,String ,ClientStreamIdentification ,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,QueryHandlerDisconnected,3,1,0,1,0,false,0 ,0 ,TopologyBaseEvent ApplicationConnected ApplicationDisconnected CommandHandlerDisconnected QueryHandlerDisconnected ApplicationInactivityTimeout ApplicationReconnectRequested ,context: String clientId: String clientStreamId: String ,isForwarded{ Params :  Returns : boolean} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} getReason{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} componentName{ Params :  Returns : String} client{ Params :  Returns : ClientContext} context{ Params :  Returns : String} componentName{ Params :  Returns : String} clientId{ Params :  Returns : String} reason{ Params :  Returns : String} ,,,,,,String ,,String ,ClientStreamIdentification ,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,ApplicationInactivityTimeout,3,1,0,1,0,false,0 ,0 ,TopologyBaseEvent ApplicationConnected ApplicationDisconnected CommandHandlerDisconnected QueryHandlerDisconnected ApplicationInactivityTimeout ApplicationReconnectRequested ,clientStreamIdentification: ClientStreamIdentification componentName: String client: ClientContext ,isForwarded{ Params :  Returns : boolean} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} getReason{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} componentName{ Params :  Returns : String} client{ Params :  Returns : ClientContext} context{ Params :  Returns : String} componentName{ Params :  Returns : String} clientId{ Params :  Returns : String} reason{ Params :  Returns : String} ,,,,,,ClientContext ,,ClientContext ,,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,ApplicationReconnectRequested,3,1,0,1,0,false,0 ,0 ,TopologyBaseEvent ApplicationConnected ApplicationDisconnected CommandHandlerDisconnected QueryHandlerDisconnected ApplicationInactivityTimeout ApplicationReconnectRequested ,context: String componentName: String clientId: String reason: String ,isForwarded{ Params :  Returns : boolean} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} getComponentName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getProxy{ Params :  Returns : String} getReason{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} clientIdentification{ Params :  Returns : ClientStreamIdentification} clientStreamIdentification{ Params :  Returns : ClientStreamIdentification} componentName{ Params :  Returns : String} client{ Params :  Returns : ClientContext} context{ Params :  Returns : String} componentName{ Params :  Returns : String} clientId{ Params :  Returns : String} reason{ Params :  Returns : String} ,,,,,,String ,,String ,,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,UserEvents,1,1,1,0,0,false,0 ,0 ,UserUpdated UserDeleted ,,getUser{ Params :  Returns : User} isProxied{ Params :  Returns : boolean} toString{ Params :  Returns : String} getName{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} toString{ Params :  Returns : String} ,toString toString ,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.applicationevents,UserUpdated,3,1,0,1,0,false,0 ,0 ,UserUpdated UserDeleted ,user: User proxied: boolean implementer: Authentication ,getUser{ Params :  Returns : User} isProxied{ Params :  Returns : boolean} toString{ Params :  Returns : String} getName{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} toString{ Params :  Returns : String} ,toString toString ,,,,,Authentication ,,Authentication ,,: 
axon-server-se-master,io.axoniq.axonserver.applicationevents,UserDeleted,3,1,0,1,0,false,0 ,0 ,UserUpdated UserDeleted ,name: String proxied: boolean implementer: Authentication ,getUser{ Params :  Returns : User} isProxied{ Params :  Returns : boolean} toString{ Params :  Returns : String} getName{ Params :  Returns : String} isProxied{ Params :  Returns : boolean} toString{ Params :  Returns : String} ,toString toString ,,,,,Authentication ,,Authentication ,,: 
axon-server-se-master,io.axoniq.axonserver,AxonServer,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger versionInfoProvider: VersionInfoProvider ,versionSet{ Params :  Returns : void} main{ Params : String[] Returns : void} clean{ Params :  Returns : void} ,,main ,,,,VersionInfoProvider ,,VersionInfoProvider ,,GrpcFlowControlledDispatcherListener: 
axon-server-se-master,io.axoniq.axonserver,AxonServerAccessController,2,1,0,0,0,true,0 ,0 ,0 ,TOKEN_PARAM: String AXONDB_TOKEN_PARAM: String CONTEXT_PARAM: String PRINCIPAL_PARAM: String ,allowed{ Params : String,String,Authentication Returns : boolean} defaultContextForRest{ Params :  Returns : String} usersByUsernameQuery{ Params :  Returns : String} authoritiesByUsernameQuery{ Params :  Returns : String} authenticate{ Params : String Returns : Authentication} ,,,,,,,,,,GrpcFlowControlledDispatcherListener: 
axon-server-se-master,io.axoniq.axonserver,AxonServerStandardAccessController,1,1,0,0,0,false,0 ,AxonServerAccessController ,0 ,messagingPlatformConfiguration: MessagingPlatformConfiguration userController: UserController ,validate{ Params :  Returns : void} allowed{ Params : String,String,Authentication Returns : boolean} rolesForOperation{ Params : String Returns : Set<String>} authenticate{ Params : String Returns : Authentication} isAdminToken{ Params : String Returns : boolean} isTokenFromConfigFile{ Params : String Returns : boolean} ,allowed authenticate ,,,,AxonServerAccessController ,UserController ,,UserController ,MessagingPlatformException MessagingPlatformException InvalidTokenException ,config: 
axon-server-se-master,io.axoniq.axonserver,AxonServerStandardLicenseAccessController,1,1,0,0,0,false,0 ,LicenseAccessController ,0 ,,allowed{ Params :  Returns : boolean} ,allowed ,,,,LicenseAccessController ,,,,,config: 
axon-server-se-master,io.axoniq.axonserver,CancelOnTimeout,1,1,0,0,0,false,0 ,CancelStrategy<T> ,0 ,logger: Logger requestType: String clock: Clock timeout: long requestDescription: Function<T, String> requestTimestamp: Function<T, Long> cancelRequest: Consumer<T> ,cancel{ Params : String,T Returns : void} requestToBeCanceled{ Params : String,T Returns : boolean} ,cancel requestToBeCanceled ,,,,CancelStrategy ,Consumer<T> ,,Consumer<T> ,,requestTimestamp: , request
axon-server-se-master,io.axoniq.axonserver.component.command,ComponentCommand,2,1,0,0,0,true,0 ,CancelStrategy<T> ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.component.command,DefaultCommand,1,0,0,0,0,false,0 ,ComponentCommand ,0 ,command: CommandRegistrationCache.RegistrationEntry commandHandlers: Set<CommandHandler> ,belongsToComponent{ Params : String Returns : Boolean} belongsToContext{ Params : String Returns : boolean} printOn{ Params : Media Returns : void} ,belongsToComponent belongsToContext printOn ,,,,ComponentCommand ,Set<CommandHandler> ,,Set<CommandHandler> ,,command: 
axon-server-se-master,io.axoniq.axonserver.component.command,DefaultCommands,1,1,0,0,0,false,0 ,Iterable<ComponentCommand> ,0 ,registrationCache: CommandRegistrationCache ,iterator{ Params :  Returns : Iterator<ComponentCommand>} ,iterator ,,,,Iterable ,CommandRegistrationCache ,,CommandRegistrationCache ,HashMap HashSet DefaultCommand ,e: 
axon-server-se-master,io.axoniq.axonserver.component,ComponentItem,2,1,0,0,0,true,0 ,Iterable<ComponentCommand> ,0 ,,belongsToComponent{ Params : String Returns : Boolean} belongsToContext{ Params : String Returns : boolean} ,,,,,,,,,,e: 
axon-server-se-master,io.axoniq.axonserver.component,ComponentItems,1,1,0,0,0,false,0 ,Iterable<I> ,0 ,component: String context: String delegate: Iterable<I> ,iterator{ Params :  Returns : Iterator<I>} ,iterator ,,,,Iterable ,Iterable<I> ,,Iterable<I> ,,item: , context
axon-server-se-master,io.axoniq.axonserver.component.instance,Client,2,1,0,0,0,true,0 ,Iterable<I> ,0 ,,id{ Params :  Returns : String} streamId{ Params :  Returns : String} context{ Params :  Returns : String} belongsToContext{ Params : String Returns : boolean} printOn{ Params : Media Returns : void} ,belongsToContext printOn ,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.component.instance,ClientIdentifications,2,1,0,0,0,true,0 ,Iterable<I> ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.component.instance,Clients,2,1,0,0,0,true,0 ,Iterable<I> ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.component.instance,GenericClient,1,1,0,0,0,false,0 ,Client ,0 ,clientId: String clientStreamId: String componentName: String context: String axonServerNode: String tags: Map<String, String> ,id{ Params :  Returns : String} streamId{ Params :  Returns : String} context{ Params :  Returns : String} belongsToComponent{ Params : String Returns : Boolean} printOn{ Params : Media Returns : void} ,id streamId context belongsToComponent printOn ,,,,Client ,Map<String,String> ,,Map<String,String> ,,: 
axon-server-se-master,io.axoniq.axonserver.component.instance,GenericClients,1,1,0,0,0,false,0 ,Clients ,0 ,messagingPlatformConfiguration: MessagingPlatformConfiguration clientTagsCache: ClientTagsCache clientRegistrations: Map<ClientStreamIdentification, Client> ,iterator{ Params :  Returns : Iterator<Client>} on{ Params : TopologyEvents.ApplicationDisconnected Returns : void} on{ Params : TopologyEvents.ApplicationConnected Returns : void} ,iterator ,,,,Clients ,Map<ClientStreamIdentification,Client> ,,Map<ClientStreamIdentification,Client> ,ConcurrentHashMap GenericClient ,event: 
axon-server-se-master,io.axoniq.axonserver.component.instance,PlatformConnectedClients,1,1,0,0,0,false,0 ,ClientIdentifications ,0 ,clientIdentifications: Set<ClientStreamIdentification> ,iterator{ Params :  Returns : Iterator<ClientStreamIdentification>} on{ Params : TopologyEvents.ApplicationConnected Returns : void} on{ Params : TopologyEvents.ApplicationDisconnected Returns : void} ,iterator ,,,,ClientIdentifications ,Set<ClientStreamIdentification> ,,Set<ClientStreamIdentification> ,CopyOnWriteArraySet ,event: 
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing,DefaultOperationFactory,1,1,0,0,0,false,0 ,OperationFactory ,Move ,processorEventsSource: ProcessorEventPublisher processors: ClientProcessors ,move{ Params : Integer,TrackingEventProcessor,String,String Returns : LoadBalancingOperation} perform{ Params :  Returns : void} toString{ Params :  Returns : String} ,move perform toString ,,,,OperationFactory ,ClientProcessors ,,ClientProcessors ,Move SameProcessor ,event: 
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing,Move,3,2,0,0,0,false,0 ,OperationFactory ,Move ,processor: TrackingEventProcessor target: String segment: Integer ,move{ Params : Integer,TrackingEventProcessor,String,String Returns : LoadBalancingOperation} perform{ Params :  Returns : void} toString{ Params :  Returns : String} ,move perform toString ,,,,LoadBalancingOperation ,Integer ,,Integer ,SameProcessor ,UUID: 
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing,LoadBalancingOperation,2,1,0,0,0,true,0 ,OperationFactory ,0 ,,perform{ Params :  Returns : void} ,,,,,,,,,,UUID: 
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing,LoadBalancingStrategy,2,1,0,0,0,true,0 ,OperationFactory ,0 ,,getLabel{ Params :  Returns : String} getName{ Params :  Returns : String} balance{ Params : TrackingEventProcessor Returns : LoadBalancingOperation} printOn{ Params : Media Returns : void} ,printOn ,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.operation,OperationSequence,1,1,0,0,0,false,0 ,LoadBalancingOperation ,0 ,sequence: List<LoadBalancingOperation> ,perform{ Params :  Returns : void} ,perform ,,,,LoadBalancingOperation ,List<LoadBalancingOperation> ,,List<LoadBalancingOperation> ,,sequence: , LoadBalancingOperation::perform
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing,OperationFactory,2,1,0,0,0,true,0 ,LoadBalancingOperation ,0 ,,move{ Params : Integer,TrackingEventProcessor,String,String Returns : LoadBalancingOperation} ,,,,,,,,,,sequence: , LoadBalancingOperation::perform
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing,SameProcessor,1,1,0,0,0,false,0 ,Predicate<ClientProcessor> ,0 ,eventProcessorIdentifier: EventProcessorIdentifier ,test{ Params : ClientProcessor Returns : boolean} ,test ,,,,Predicate ,EventProcessorIdentifier ,,EventProcessorIdentifier ,EventProcessorIdentifier EventProcessorIdentifier EventProcessorIdentifier ,id: , eventProcessorIdentifier
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,ApplicationContextLoadBalanceStrategyRepository,1,1,0,0,0,false,0 ,LoadBalanceStrategyRepository ,0 ,strategies: Map<String, LoadBalancingStrategy> ,findByName{ Params : String Returns : LoadBalancingStrategy} findAll{ Params :  Returns : Iterable<LoadBalancingStrategy>} ,findByName findAll ,,,,LoadBalanceStrategyRepository ,Map<String,LoadBalancingStrategy> ,,Map<String,LoadBalancingStrategy> ,ConcurrentHashMap ,strategies: 
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,DefaultInstancesRepository,1,1,0,0,0,false,0 ,ThreadNumberBalancing.InstancesRepo ,0 ,processors: ClientProcessors ,findFor{ Params : TrackingEventProcessor Returns : Iterable<ThreadNumberBalancing.Application>} ,findFor ,,,,InstancesRepo ,ClientProcessors ,,ClientProcessors ,SameProcessor Application ,p: 
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,LoadBalanceStrategyRepository,2,1,0,0,0,true,0 ,ThreadNumberBalancing.InstancesRepo ,0 ,,findByName{ Params : String Returns : LoadBalancingStrategy} findAll{ Params :  Returns : Iterable<LoadBalancingStrategy>} ,,,,,,,,,,p: 
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,MoveSegmentAlgorithm,1,0,0,0,0,false,0 ,0 ,Instance MoveOperationFactory ,move: MoveOperationFactory<T> ,canAcceptThreadFrom{ Params : T Returns : boolean} acceptThreadFrom{ Params : T Returns : Integer} apply{ Params : Integer,T,T Returns : LoadBalancingOperation} balance{ Params : Iterable<T> Returns : LoadBalancingOperation} findOperation{ Params : LinkedList<T> Returns : LoadBalancingOperation} ,,,,,,MoveOperationFactory<T> ,,MoveOperationFactory<T> ,LinkedList LinkedList OperationSequence ,move: , segmentId, source, target
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,Instance,3,1,0,0,0,true,0 ,0 ,Instance MoveOperationFactory ,,canAcceptThreadFrom{ Params : T Returns : boolean} acceptThreadFrom{ Params : T Returns : Integer} apply{ Params : Integer,T,T Returns : LoadBalancingOperation} balance{ Params : Iterable<T> Returns : LoadBalancingOperation} findOperation{ Params : LinkedList<T> Returns : LoadBalancingOperation} ,,,,,,,,,,move: , segmentId, source, target
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,MoveOperationFactory,3,1,0,0,0,true,0 ,0 ,Instance MoveOperationFactory ,,canAcceptThreadFrom{ Params : T Returns : boolean} acceptThreadFrom{ Params : T Returns : Integer} apply{ Params : Integer,T,T Returns : LoadBalancingOperation} balance{ Params : Iterable<T> Returns : LoadBalancingOperation} findOperation{ Params : LinkedList<T> Returns : LoadBalancingOperation} ,,,,,,,,,,move: , segmentId, source, target
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,NoLoadBalanceStrategy,1,1,0,0,0,false,0 ,LoadBalancingStrategy ,0 ,INSTANCE: NoLoadBalanceStrategy ,balance{ Params : TrackingEventProcessor Returns : LoadBalancingOperation} getLabel{ Params :  Returns : String} getName{ Params :  Returns : String} ,balance getLabel getName ,,,,LoadBalancingStrategy ,,,,NoLoadBalanceStrategy ,move: , segmentId, source, target
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,ThreadNumberBalancing,1,1,0,0,0,false,0 ,LoadBalancingStrategy ,InstancesRepo Application Move ,instances: InstancesRepo operationFactory: OperationFactory ,balance{ Params : TrackingEventProcessor Returns : LoadBalancingOperation} getLabel{ Params :  Returns : String} getName{ Params :  Returns : String} instanceClones{ Params : TrackingEventProcessor Returns : Iterable<Application>} findFor{ Params : TrackingEventProcessor Returns : Iterable<Application>} canAcceptThreadFrom{ Params : Application Returns : boolean} acceptThreadFrom{ Params : Application Returns : Integer} compareTo{ Params : Application Returns : int} toString{ Params :  Returns : String} apply{ Params : Integer,Application,Application Returns : LoadBalancingOperation} ,balance getLabel getName canAcceptThreadFrom acceptThreadFrom compareTo toString apply ,,,,LoadBalancingStrategy ,OperationFactory ,,OperationFactory ,MoveSegmentAlgorithm Move ArrayList ,instances: , processor
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,InstancesRepo,3,1,0,0,0,true,0 ,LoadBalancingStrategy ,InstancesRepo Application Move ,,balance{ Params : TrackingEventProcessor Returns : LoadBalancingOperation} getLabel{ Params :  Returns : String} getName{ Params :  Returns : String} instanceClones{ Params : TrackingEventProcessor Returns : Iterable<Application>} findFor{ Params : TrackingEventProcessor Returns : Iterable<Application>} canAcceptThreadFrom{ Params : Application Returns : boolean} acceptThreadFrom{ Params : Application Returns : Integer} compareTo{ Params : Application Returns : int} toString{ Params :  Returns : String} apply{ Params : Integer,Application,Application Returns : LoadBalancingOperation} ,balance getLabel getName canAcceptThreadFrom acceptThreadFrom compareTo toString apply ,,,,,,,,,instances: , processor
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,Application,3,1,0,1,1,false,0 ,LoadBalancingStrategy ,InstancesRepo Application Move ,identifier: String threadPoolSize: int segments: Collection<Integer> ,balance{ Params : TrackingEventProcessor Returns : LoadBalancingOperation} getLabel{ Params :  Returns : String} getName{ Params :  Returns : String} instanceClones{ Params : TrackingEventProcessor Returns : Iterable<Application>} findFor{ Params : TrackingEventProcessor Returns : Iterable<Application>} canAcceptThreadFrom{ Params : Application Returns : boolean} acceptThreadFrom{ Params : Application Returns : Integer} compareTo{ Params : Application Returns : int} toString{ Params :  Returns : String} apply{ Params : Integer,Application,Application Returns : LoadBalancingOperation} ,balance getLabel getName canAcceptThreadFrom acceptThreadFrom compareTo toString apply ,,,,Instance ,Collection<Integer> ,,Collection<Integer> ,ArrayList ,o.segments: 
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,Move,3,2,0,0,0,false,0 ,LoadBalancingStrategy ,InstancesRepo Application Move ,trackingProcessor: TrackingEventProcessor ,balance{ Params : TrackingEventProcessor Returns : LoadBalancingOperation} getLabel{ Params :  Returns : String} getName{ Params :  Returns : String} instanceClones{ Params : TrackingEventProcessor Returns : Iterable<Application>} findFor{ Params : TrackingEventProcessor Returns : Iterable<Application>} canAcceptThreadFrom{ Params : Application Returns : boolean} acceptThreadFrom{ Params : Application Returns : Integer} compareTo{ Params : Application Returns : int} toString{ Params :  Returns : String} apply{ Params : Integer,Application,Application Returns : LoadBalancingOperation} ,balance getLabel getName canAcceptThreadFrom acceptThreadFrom compareTo toString apply ,,,,MoveOperationFactory ,TrackingEventProcessor ,,TrackingEventProcessor ,,operationFactory: , segment, trackingProcessor, source.identifier, target.identifier
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing,TrackingEventProcessor,1,1,0,0,1,false,0 ,Serializable ,0 ,name: String context: String tokenStoreIdentifier: String ,name{ Params :  Returns : String} context{ Params :  Returns : String} tokenStoreIdentifier{ Params :  Returns : String} fullName{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,equals hashCode toString ,,,,Serializable ,String ,,String ,,Objects: , name, context, tokenStoreIdentifier
axon-server-se-master,io.axoniq.axonserver.component.processor,ClientEventProcessorInfo,1,1,0,0,0,false,0 ,0 ,0 ,clientId: String clientStreamId: String context: String eventProcessorInfo: EventProcessorInfo ,getClientId{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getContext{ Params :  Returns : String} getEventProcessorInfo{ Params :  Returns : EventProcessorInfo} ,,,,,,EventProcessorInfo ,,EventProcessorInfo ,,Objects: , name, context, tokenStoreIdentifier
axon-server-se-master,io.axoniq.axonserver.component.processor,ClientProcessorsByIdentifier,1,1,0,0,0,false,0 ,ClientProcessors ,0 ,allClientProcessors: ClientProcessors sameEventProcessor: Predicate<ClientProcessor> ,iterator{ Params :  Returns : Iterator<ClientProcessor>} ,iterator ,,,,ClientProcessors ,Predicate<ClientProcessor> ,,Predicate<ClientProcessor> ,SameProcessor ,allClientProcessors: 
axon-server-se-master,io.axoniq.axonserver.component.processor,ClientsByEventProcessor,1,1,0,0,0,false,0 ,Iterable<String> ,0 ,eventProcessors: ClientProcessors ,iterator{ Params :  Returns : Iterator<String>} ,iterator ,,,,Iterable ,ClientProcessors ,,ClientProcessors ,ClientProcessorsByIdentifier ,eventProcessors: 
axon-server-se-master,io.axoniq.axonserver.component.processor,EventProcessorIdentifier,1,1,0,0,1,false,0 ,EventProcessorId ,0 ,name: String context: String tokenStoreIdentifier: String ,name{ Params :  Returns : String} tokenStoreIdentifier{ Params :  Returns : String} context{ Params :  Returns : String} equals{ Params : EventProcessorId Returns : boolean} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,equals hashCode toString ,,,,EventProcessorId ,String ,,String ,,Objects: , name, tokenStoreIdentifier
axon-server-se-master,io.axoniq.axonserver.component.processor,EventProcessorIdentifierProvider,1,1,0,0,0,false,0 ,0 ,0 ,clientProcessors: ClientProcessors ,get{ Params : String,String,String Returns : EventProcessorIdentifier} ,,,,,,ClientProcessors ,,ClientProcessors ,EventProcessorIdentifier IllegalArgumentException ,clientProcessor: 
axon-server-se-master,io.axoniq.axonserver.component.processor,EventProcessorResultListener,1,1,0,0,0,false,0 ,0 ,ProcessorProvider ,refreshOperation: BiConsumer<String, EventProcessorIdentifier> eventProcessorIdentifierProvider: ProcessorProvider ,get{ Params : String,String,String Returns : EventProcessorIdentifier} on{ Params : EventProcessorEvents.MergeSegmentsSucceeded Returns : void} on{ Params : EventProcessorEvents.SplitSegmentsSucceeded Returns : void} refresh{ Params : String,String,String Returns : void} ,,,,,,ProcessorProvider ,,ProcessorProvider ,,refreshOperation: , context, processor
axon-server-se-master,io.axoniq.axonserver.component.processor,ProcessorProvider,3,1,0,0,0,true,0 ,0 ,ProcessorProvider ,,get{ Params : String,String,String Returns : EventProcessorIdentifier} on{ Params : EventProcessorEvents.MergeSegmentsSucceeded Returns : void} on{ Params : EventProcessorEvents.SplitSegmentsSucceeded Returns : void} refresh{ Params : String,String,String Returns : void} ,,,,,,,,,,refreshOperation: , context, processor
axon-server-se-master,io.axoniq.axonserver.component.processor,EventProcessorService,1,1,0,0,0,false,0 ,0 ,0 ,LOGGER: Logger instructionPublisher: InstructionPublisher instructionResultSource: InstructionResultSource.Factory eventPublisher: AxonServerEventPublisher ,on{ Params : EventProcessorEvents.SplitSegmentRequest Returns : void} on{ Params : EventProcessorEvents.MergeSegmentRequest Returns : void} on{ Params : EventProcessorEvents.ReleaseSegmentRequest Returns : void} on{ Params : EventProcessorEvents.PauseEventProcessorRequest Returns : void} on{ Params : EventProcessorEvents.StartEventProcessorRequest Returns : void} on{ Params : EventProcessorEvents.ProcessorStatusRequest Returns : void} ,,,,,,AxonServerEventPublisher ,,AxonServerEventPublisher ,SplitSegmentsSucceeded MergeSegmentsSucceeded ,event: 
axon-server-se-master,io.axoniq.axonserver.component.processor,EventProcessorStatusRefresh,1,1,0,0,0,false,0 ,0 ,0 ,LOGGER: Logger DEFAULT_TIMEOUT: Duration timeout: Duration all: ClientProcessors eventPublisher: ApplicationEventPublisher updateListeners: List<Consumer<EventProcessorStatusUpdated>> ,run{ Params : String,EventProcessorIdentifier Returns : CompletableFuture<Void>} on{ Params : EventProcessorStatusUpdated Returns : void} ,,,,,,List<Consumer<EventProcessorStatusUpdated>> ,,List<Consumer<EventProcessorStatusUpdated>> ,CopyOnWriteArrayList ClientProcessorsByIdentifier CountDownLatch ProcessorStatusRequest RuntimeException ,listener: , event
axon-server-se-master,io.axoniq.axonserver.component.processor.listener,ClientProcessor,2,1,0,0,0,true,0 ,0 ,0 ,,clientId{ Params :  Returns : String} context{ Params :  Returns : String} eventProcessorInfo{ Params :  Returns : EventProcessorInfo} running{ Params :  Returns : boolean} iterator{ Params :  Returns : Iterator<SegmentStatus>} ,iterator ,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.component.processor.listener,ClientProcessorMapping,2,1,0,0,0,true,0 ,0 ,0 ,,map{ Params : String,String,String,EventProcessorInfo Returns : ClientProcessor} clientId{ Params :  Returns : String} context{ Params :  Returns : String} eventProcessorInfo{ Params :  Returns : EventProcessorInfo} belongsToComponent{ Params : String Returns : Boolean} belongsToContext{ Params : String Returns : boolean} ,clientId context eventProcessorInfo belongsToComponent belongsToContext ,,,,,,,,ClientProcessor ,c: , context
axon-server-se-master,io.axoniq.axonserver.component.processor.listener,ClientProcessors,2,1,0,0,0,true,0 ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.component.processor.listener,ProcessorsInfoTarget,1,1,0,0,0,false,0 ,ClientProcessors ,0 ,clients: Map<String, String> cache: Map<String, TimeLimitedCache<String, ClientProcessor>> mapping: ClientProcessorMapping expireTime: long clock: Clock ,onEventProcessorStatusChange{ Params : EventProcessorStatusUpdate Returns : EventProcessorStatusUpdated} onClientConnected{ Params : TopologyEvents.ApplicationConnected Returns : void} onClientDisconnected{ Params : TopologyEvents.ApplicationDisconnected Returns : void} iterator{ Params :  Returns : Iterator<ClientProcessor>} cleanupCache{ Params :  Returns : void} ,iterator ,,,,ClientProcessors ,Clock ,,Clock ,ConcurrentHashMap ConcurrentHashMap ClientProcessorMapping TimeLimitedCache EventProcessorStatusUpdated ,e: 
axon-server-se-master,io.axoniq.axonserver.component.processor,ProcessorEventPublisher,1,1,0,0,0,false,0 ,0 ,0 ,NOT_PROXIED: boolean registerEventProcessorInfoListener: Consumer<InstructionConsumer> applicationEventPublisher: ApplicationEventPublisher ,init{ Params :  Returns : void} publishEventProcessorStatus{ Params : PlatformService.ClientComponent,PlatformInboundInstruction Returns : void} pauseProcessorRequest{ Params : String,String,String,String Returns : void} startProcessorRequest{ Params : String,String,String,String Returns : void} releaseSegment{ Params : String,String,String,int,String Returns : void} splitSegment{ Params : String,String,String,int,String Returns : void} mergeSegment{ Params : String,String,String,int,String Returns : void} ,,,,,,ApplicationEventPublisher ,,ApplicationEventPublisher ,ClientEventProcessorInfo EventProcessorStatusUpdate PauseEventProcessorRequest StartEventProcessorRequest ReleaseSegmentRequest SplitSegmentRequest MergeSegmentRequest ,applicationEventPublisher: , new MergeSegmentRequest(NOT_PROXIED, context, clientId, processorName, segmentId, instructionId)
axon-server-se-master,io.axoniq.axonserver.component.processor,ProcessorNames,1,1,0,0,0,false,0 ,Iterable<String> ,0 ,clientProcessors: Iterable<ClientProcessor> ,iterator{ Params :  Returns : Iterator<String>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : String} ,iterator hasNext next ,,,,Iterable ,Iterable<ClientProcessor> ,,Iterable<ClientProcessor> ,Iterator ,iterator: 
axon-server-se-master,io.axoniq.axonserver.component.query,DefaultQueries,1,1,0,0,0,false,0 ,Iterable<Query> ,0 ,registrationCache: QueryRegistrationCache ,iterator{ Params :  Returns : Iterator<Query>} ,iterator ,,,,Iterable ,QueryRegistrationCache ,,QueryRegistrationCache ,DefaultQuery ,entry: 
axon-server-se-master,io.axoniq.axonserver.component.query,DefaultQuery,1,1,0,0,0,false,0 ,Query ,0 ,definition: QueryDefinition handlers: Map<String, Set<QueryHandler<?>>> responseTypes: Set<String> ,belongsToComponent{ Params : String Returns : Boolean} belongsToContext{ Params : String Returns : boolean} printOn{ Params : Media Returns : void} ,belongsToComponent belongsToContext printOn ,,,,Query ,Set<String> ,,Set<String> ,,definition: 
axon-server-se-master,io.axoniq.axonserver.component.query,Query,2,1,0,0,0,true,0 ,Query ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.component.tags,ClientTagsCache,1,1,0,0,0,false,0 ,Function<ClientStreamIdentification,Map<String,String>> ,0 ,tags: Map<ClientStreamIdentification, Map<String, String>> clientIdRegistry: ClientIdRegistry ,apply{ Params : ClientStreamIdentification Returns : Map<String,String>} on{ Params : ClientTagsUpdate Returns : void} on{ Params : ApplicationDisconnected Returns : void} ,apply ,,,,Function ,ClientIdRegistry ,,ClientIdRegistry ,HashMap ClientStreamIdentification ClientStreamIdentification ,tags: , client
axon-server-se-master,io.axoniq.axonserver.component.tags,ClientTagsUpdate,1,1,0,0,0,false,0 ,0 ,0 ,client: ClientStreamIdentification tags: Map<String, String> ,client{ Params :  Returns : ClientStreamIdentification} tags{ Params :  Returns : Map<String,String>} ,,,,,,Map<String,String> ,,Map<String,String> ,ClientStreamIdentification ,Collections: , tags
axon-server-se-master,io.axoniq.axonserver.component.version,BackwardsCompatibleVersion,1,1,0,0,0,false,0 ,Version ,0 ,name: String ,name{ Params :  Returns : String} greaterOrEqualThan{ Params : Version Returns : boolean} ,name greaterOrEqualThan ,,,,Version ,String ,,String ,IllegalArgumentException ,this: 
axon-server-se-master,io.axoniq.axonserver.component.version,ClientVersionsCache,1,1,0,0,0,false,0 ,Function<ClientStreamIdentification,String> ,0 ,logger: Logger versions: Map<ClientStreamIdentification, String> ,apply{ Params : ClientStreamIdentification Returns : String} on{ Params : ClientVersionUpdate Returns : void} on{ Params : ApplicationDisconnected Returns : void} ,apply ,,,,Function ,Map<ClientStreamIdentification,String> ,,Map<ClientStreamIdentification,String> ,HashMap ClientStreamIdentification ,logger: , "Version cleaned for client {} because disconnected.", client
axon-server-se-master,io.axoniq.axonserver.component.version,ClientVersionUpdate,1,1,0,0,0,false,0 ,0 ,0 ,client: ClientStreamIdentification version: String ,client{ Params :  Returns : ClientStreamIdentification} version{ Params :  Returns : String} ,,,,,,String ,,String ,ClientStreamIdentification ,logger: , "Version cleaned for client {} because disconnected.", client
axon-server-se-master,io.axoniq.axonserver.component.version,UnknownVersion,1,1,0,0,0,false,0 ,Version ,0 ,,name{ Params :  Returns : String} major{ Params :  Returns : int} minor{ Params :  Returns : int} patch{ Params :  Returns : int} match{ Params : Version Returns : boolean} greaterOrEqualThan{ Params : Version Returns : boolean} ,name major minor patch match greaterOrEqualThan ,,,,Version ,,,,UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,logger: , "Version cleaned for client {} because disconnected.", client
axon-server-se-master,io.axoniq.axonserver.component.version,Version,2,1,0,0,0,true,0 ,Version ,0 ,DOT_REGEX: String DASH_REGEX: String ,name{ Params :  Returns : String} major{ Params :  Returns : int} minor{ Params :  Returns : int} patch{ Params :  Returns : int} match{ Params : Version Returns : boolean} greaterOrEqualThan{ Params : Version Returns : boolean} greaterOrEqualThan{ Params : Iterable<Version> Returns : boolean} ,,,,,,,,,IllegalStateException ,this: , supportedVersion
axon-server-se-master,io.axoniq.axonserver.config,AccessControlConfiguration,1,1,0,0,0,false,0 ,0 ,0 ,enabled: boolean cacheTtl: Duration internalToken: String token: String adminToken: String ,isEnabled{ Params :  Returns : boolean} setEnabled{ Params : boolean Returns : void} getCacheTtl{ Params :  Returns : long} setCacheTtl{ Params : Duration Returns : void} getInternalToken{ Params :  Returns : String} setInternalToken{ Params : String Returns : void} getToken{ Params :  Returns : String} setToken{ Params : String Returns : void} getAdminToken{ Params :  Returns : String} setAdminToken{ Params : String Returns : void} ,,,,,,String ,,String ,,cacheTtl: 
axon-server-se-master,io.axoniq.axonserver.config,AuthenticationProvider,2,1,0,0,0,true,0 ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.config,AxonServerHealthAggregator,1,1,0,0,0,false,SimpleStatusAggregator ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.config,AxonServerStandardConfiguration,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger ,storageTransactionManagerFactory{ Params :  Returns : StorageTransactionManagerFactory} cleanMigrateStrategy{ Params :  Returns : FlywayMigrationStrategy} eventTransformerFactory{ Params :  Returns : EventTransformerFactory} eventStoreFactory{ Params : EmbeddedDBProperties,EventTransformerFactory,StorageTransactionManagerFactory,MeterFactory,FileSystemMonitor Returns : EventStoreFactory} queryHandlerSelector{ Params :  Returns : QueryHandlerSelector} topology{ Params : MessagingPlatformConfiguration Returns : Topology} metricCollector{ Params :  Returns : MetricCollector} eventStoreLocator{ Params : LocalEventStore Returns : EventStoreLocator} axonServerAccessController{ Params : MessagingPlatformConfiguration,UserController Returns : AxonServerAccessController} featureChecker{ Params :  Returns : FeatureChecker} eventSchedulerService{ Params : StandaloneTaskManager,TaskPayloadSerializer Returns : AxonServerClientService} eventDecorator{ Params :  Returns : EventDecorator} externalLoginProvider{ Params :  Returns : ExternalLoginsProvider} passwordEncoder{ Params :  Returns : PasswordEncoder} scheduler{ Params :  Returns : ScheduledExecutorService} userAdminService{ Params : UserController,ApplicationEventPublisher,RoleController Returns : UserAdminService} getUserAdminService{ Params : UserController,ApplicationEventPublisher,RoleController Returns : UserAdminService} clock{ Params :  Returns : Clock} platformInstructionAckSource{ Params :  Returns : InstructionAckSource<PlatformOutboundInstruction>} commandInstructionAckSource{ Params :  Returns : InstructionAckSource<SerializedCommandProviderInbound>} queryInstructionAckSource{ Params :  Returns : InstructionAckSource<QueryProviderInbound>} versionInfoProvider{ Params :  Returns : VersionInfoProvider} localTaskManager{ Params : ScheduledTaskExecutor,TaskRepository,TaskPayloadSerializer,PlatformTransactionManager,ScheduledExecutorService,Clock Returns : StandaloneTaskManager} applicationEventMulticaster{ Params :  Returns : ApplicationEventMulticaster} invokeListener{ Params : ApplicationListener<?>,ApplicationEvent Returns : void} axonServerInformationProvider{ Params : VersionInfoProvider,FeatureChecker Returns : AxonServerInformationProvider} diskSpaceHealthIndicator{ Params :  Returns : DiskSpaceHealthIndicator} transformationsInProgressForContext{ Params :  Returns : TransformationsInProgressForContext} ,invokeListener ,,,,,Logger ,,Logger ,DefaultStorageTransactionManagerFactory DefaultEventTransformerFactory StandardEventStoreFactory RoundRobinQueryHandlerSelector DefaultTopology DefaultMetricCollector DefaultEventStoreLocator AxonServerStandardAccessController FeatureChecker EventSchedulerService DefaultEventDecorator BCryptPasswordEncoder DaemonThreadFactory LocalUserAdminService DefaultInstructionAckSource DefaultInstructionAckSource SerializedCommandProviderInbound DefaultInstructionAckSource DefaultVersionInfoProvider StandaloneTaskManager SimpleApplicationEventMulticaster HashMap ,Mono: , false
axon-server-se-master,io.axoniq.axonserver.config,DefaultSystemInfoProvider,1,1,0,0,0,false,0 ,SystemInfoProvider ,0 ,environment: Environment ,getPort{ Params :  Returns : int} getHostName{ Params :  Returns : String} ,getPort getHostName ,,,,SystemInfoProvider ,Environment ,,Environment ,,InetAddress: 
axon-server-se-master,io.axoniq.axonserver.config,ExternalLogin,1,1,0,0,0,false,0 ,0 ,0 ,image: String url: String name: String ,getImage{ Params :  Returns : String} getUrl{ Params :  Returns : String} getName{ Params :  Returns : String} ,,,,,,String ,,String ,,InetAddress: 
axon-server-se-master,io.axoniq.axonserver.config,ExternalLoginsProvider,2,1,0,0,0,true,0 ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.config,FeatureChecker,2,1,0,0,0,true,0 ,0 ,0 ,,isBasic{ Params :  Returns : boolean} isEnterprise{ Params :  Returns : boolean} getFeatureList{ Params :  Returns : List<String>} getExpiryDate{ Params :  Returns : LocalDate} getEdition{ Params :  Returns : String} getLicensee{ Params :  Returns : String} getMaxClusterSize{ Params :  Returns : int} getMaxContexts{ Params :  Returns : int} getMaxReplicationGroups{ Params :  Returns : int} getMaxApplications{ Params :  Returns : int} ,,,,,,,,,,Collections: 
axon-server-se-master,io.axoniq.axonserver.config,FileSystemMonitor,1,1,0,0,0,false,DiskSpaceHealthIndicator ,0 ,Details ,logger: Logger diskSpaceHealthProperties: DiskSpaceHealthIndicatorProperties meterRegistry: MeterRegistry fileSystems: Map<String, Path> ,registerPath{ Params : String,Path Returns : void} unregisterPath{ Params : String Returns : void} bindToMetrics{ Params : Path Returns : void} mountOf{ Params : Path Returns : Path} doHealthCheck{ Params : Health.Builder Returns : void} getPath{ Params :  Returns : String} getFree{ Params :  Returns : long} getTotal{ Params :  Returns : long} ,doHealthCheck ,,,,,Map<String,Path> ,,Map<String,Path> ,ConcurrentHashMap File DiskSpaceMetrics Details ,path: 
axon-server-se-master,io.axoniq.axonserver.config,Details,3,1,0,1,0,false,DiskSpaceHealthIndicator ,0 ,Details ,path: String free: long total: long ,registerPath{ Params : String,Path Returns : void} unregisterPath{ Params : String Returns : void} bindToMetrics{ Params : Path Returns : void} mountOf{ Params : Path Returns : Path} doHealthCheck{ Params : Health.Builder Returns : void} getPath{ Params :  Returns : String} getFree{ Params :  Returns : long} getTotal{ Params :  Returns : long} ,doHealthCheck ,,,,,long ,,long ,,path: 
axon-server-se-master,io.axoniq.axonserver.config,GrpcContextAuthenticationProvider,1,1,0,0,0,false,0 ,AuthenticationProvider ,0 ,DEFAULT_PRINCIPAL: Authentication ADMIN_PRINCIPAL: Authentication USER_PRINCIPAL: Authentication ,get{ Params :  Returns : Authentication} ,get ,,,,AuthenticationProvider ,,,,TokenAuthentication TokenAuthentication TokenAuthentication ,GrpcMetadataKeys.PRINCIPAL_CONTEXT_KEY: 
axon-server-se-master,io.axoniq.axonserver.config,HealthStatus,1,1,1,0,0,false,0 ,0 ,0 ,WARN_STATUS: Status ,,,,,,,,,,Status ,null
axon-server-se-master,io.axoniq.axonserver.config,LoginController,1,1,0,0,0,false,0 ,0 ,0 ,versionInfoProvider: VersionInfoProvider externalLoginProvider: ExternalLoginsProvider ,login{ Params : String,String,String Returns : ModelAndView} ,,,,,,ExternalLoginsProvider ,,ExternalLoginsProvider ,ModelAndView ,model: , "login"
axon-server-se-master,io.axoniq.axonserver.config,MessagingPlatformConfiguration,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger auditLog: Logger RESERVED: int DEFAULT_MAX_TRANSACTION_SIZE: int DEFAULT_INTERNAL_GRPC_PORT: int port: int internalPort: int name: String hostname: String domain: String internalHostname: String internalDomain: String httpPort: int keepAliveTimeout: Duration keepAliveTime: Duration minKeepAliveTime: Duration setWebSocketAllowedOrigins: boolean webSocketAllowedOrigins: String ssl: SslConfiguration accesscontrol: AccessControlConfiguration metricsSynchronizationRate: int forceConnectionToPrimaryOrMessagingNode: boolean metricsInterval: Duration systemInfoProvider: SystemInfoProvider controldbBackupLocation: String maxMessageSize: int pidFileLocation: String grpcBufferedMessages: int executorThreadCount: int clusterExecutorThreadCount: int pluginsEnabled: boolean pluginCacheDirectory: String pluginPackageDirectory: String pluginCleanPolicy: String preview: Map<String, Boolean> ,init{ Params :  Returns : void} validateHostname{ Params : String,String,boolean,BiConsumer<String,String> Returns : void} postConstruct{ Params :  Returns : void} getPort{ Params :  Returns : int} setPort{ Params : int Returns : void} getInternalPort{ Params :  Returns : int} setInternalPort{ Params : int Returns : void} getName{ Params :  Returns : String} setName{ Params : String Returns : void} getHostname{ Params :  Returns : String} setHostname{ Params : String Returns : void} getDomain{ Params :  Returns : String} setDomain{ Params : String Returns : void} getInternalHostname{ Params :  Returns : String} setInternalHostname{ Params : String Returns : void} getInternalDomain{ Params :  Returns : String} getHttpPort{ Params :  Returns : int} setInternalDomain{ Params : String Returns : void} getFullyQualifiedHostname{ Params :  Returns : String} getFullyQualifiedInternalHostname{ Params :  Returns : String} getSsl{ Params :  Returns : SslConfiguration} setSsl{ Params : SslConfiguration Returns : void} getAccesscontrol{ Params :  Returns : AccessControlConfiguration} setAccesscontrol{ Params : AccessControlConfiguration Returns : void} getMetricsInterval{ Params :  Returns : Duration} setMetricsInterval{ Params : Duration Returns : void} isForceConnectionToPrimaryOrMessagingNode{ Params :  Returns : boolean} setForceConnectionToPrimaryOrMessagingNode{ Params : boolean Returns : void} getKeepAliveTimeout{ Params :  Returns : long} setKeepAliveTimeout{ Params : Duration Returns : void} getKeepAliveTime{ Params :  Returns : long} setKeepAliveTime{ Params : Duration Returns : void} getMinKeepAliveTime{ Params :  Returns : long} setMinKeepAliveTime{ Params : Duration Returns : void} getControldbBackupLocation{ Params :  Returns : String} setControldbBackupLocation{ Params : String Returns : void} getMaxMessageSize{ Params :  Returns : int} setMaxMessageSize{ Params : DataSize Returns : void} getMaxTransactionSize{ Params :  Returns : int} getPidFileLocation{ Params :  Returns : String} setMetricsSynchronizationRate{ Params : int Returns : void} setPidFileLocation{ Params : String Returns : void} getGrpcBufferedMessages{ Params :  Returns : int} setGrpcBufferedMessages{ Params : int Returns : void} getExecutorThreadCount{ Params :  Returns : int} setExecutorThreadCount{ Params : int Returns : void} getClusterExecutorThreadCount{ Params :  Returns : int} setClusterExecutorThreadCount{ Params : int Returns : void} isSetWebSocketAllowedOrigins{ Params :  Returns : boolean} setSetWebSocketAllowedOrigins{ Params : boolean Returns : void} getWebSocketAllowedOrigins{ Params :  Returns : String} setWebSocketAllowedOrigins{ Params : String Returns : void} isPluginsEnabled{ Params :  Returns : boolean} setPluginsEnabled{ Params : boolean Returns : void} getPluginCacheDirectory{ Params :  Returns : String} setPluginCacheDirectory{ Params : String Returns : void} getPluginCleanPolicy{ Params :  Returns : String} setPluginCleanPolicy{ Params : String Returns : void} getPluginPackageDirectory{ Params :  Returns : String} setPluginPackageDirectory{ Params : String Returns : void} getPreview{ Params :  Returns : Map<String,Boolean>} isExperimentalFeatureEnabled{ Params : String Returns : boolean} ,,,,,,Map<String,Boolean> ,,Map<String,Boolean> ,SslConfiguration AccessControlConfiguration HashMap MessagingPlatformException ,preview: , name, false
axon-server-se-master,io.axoniq.axonserver.config,MetricsConfiguration,1,1,0,0,0,false,0 ,0 ,0 ,PERCENTILE_MEDIAN: double PERCENTILE_NINETYFIVE: double PERCENTILE_NINETYNINE: double ,metricsCommonTags{ Params : MessagingPlatformConfiguration Returns : MeterRegistryCustomizer<MeterRegistry>} configure{ Params : Meter.Id,DistributionStatisticConfig Returns : DistributionStatisticConfig} ,configure ,,,,,,,,MeterFilter ,messagingPlatformConfiguration: 
axon-server-se-master,io.axoniq.axonserver.config,SslConfiguration,1,1,0,0,0,false,0 ,0 ,0 ,enabled: boolean certChainFile: String privateKeyFile: String internalCertChainFile: String internalTrustManagerFile: String internalPrivateKeyFile: String ,isEnabled{ Params :  Returns : boolean} setEnabled{ Params : boolean Returns : void} getCertChainFile{ Params :  Returns : String} setCertChainFile{ Params : String Returns : void} getPrivateKeyFile{ Params :  Returns : String} setPrivateKeyFile{ Params : String Returns : void} getInternalCertChainFile{ Params :  Returns : String} setInternalCertChainFile{ Params : String Returns : void} getInternalPrivateKeyFile{ Params :  Returns : String} setInternalPrivateKeyFile{ Params : String Returns : void} getInternalTrustManagerFile{ Params :  Returns : String} setInternalTrustManagerFile{ Params : String Returns : void} ,,,,,,String ,,String ,,messagingPlatformConfiguration: 
axon-server-se-master,io.axoniq.axonserver.config,SwaggerConfiguration,1,1,0,0,0,false,0 ,0 ,0 ,,publicApi{ Params :  Returns : GroupedOpenApi} axonServerOpenAPI{ Params : VersionInfoProvider Returns : OpenAPI} ,,,,,,,,,OpenAPI Info ,versionInfoProvider: 
axon-server-se-master,io.axoniq.axonserver.config,SystemInfoProvider,2,1,0,0,0,true,0 ,0 ,0 ,,getPort{ Params :  Returns : int} getHostName{ Params :  Returns : String} javaOnWindows{ Params :  Returns : boolean} ,,,,,,,,,,os: , "win"
axon-server-se-master,io.axoniq.axonserver.config,TokenAuthentication,1,1,0,0,0,false,0 ,Authentication ,ApplicationPrincipal ,authenticated: boolean name: String roles: Set<GrantedAuthority> ,getAuthorities{ Params :  Returns : Collection<? extends GrantedAuthority>} getCredentials{ Params :  Returns : Object} getDetails{ Params :  Returns : Object} getPrincipal{ Params :  Returns : Object} isAuthenticated{ Params :  Returns : boolean} setAuthenticated{ Params : boolean Returns : void} getName{ Params :  Returns : String} getName{ Params :  Returns : String} toString{ Params :  Returns : String} ,getAuthorities getCredentials getDetails getPrincipal isAuthenticated setAuthenticated getName ,,,,Authentication ,Set<GrantedAuthority> ,,Set<GrantedAuthority> ,ApplicationPrincipal ,os: , "win"
axon-server-se-master,io.axoniq.axonserver.config,ApplicationPrincipal,3,1,0,1,0,false,0 ,Authentication ,ApplicationPrincipal ,name: String ,getAuthorities{ Params :  Returns : Collection<? extends GrantedAuthority>} getCredentials{ Params :  Returns : Object} getDetails{ Params :  Returns : Object} getPrincipal{ Params :  Returns : Object} isAuthenticated{ Params :  Returns : boolean} setAuthenticated{ Params : boolean Returns : void} getName{ Params :  Returns : String} getName{ Params :  Returns : String} toString{ Params :  Returns : String} ,getAuthorities getCredentials getDetails getPrincipal isAuthenticated setAuthenticated getName ,,,,,String ,,String ,,os: , "win"
axon-server-se-master,io.axoniq.axonserver.config,TransformationConfiguration,1,1,0,0,0,false,0 ,0 ,CachedContextEventProviderSupplier ,,eventProviderFor{ Params : String Returns : EventProvider} localEventProviderSupplier{ Params : LocalEventStore Returns : ContextEventProviderSupplier} transformationEntryStoreSupplier{ Params : TransformationBaseStorageProvider Returns : TransformationEntryStoreProvider} eventStoreStateStore{ Params : EventStoreStateRepository Returns : EventStoreStateStore} transformers{ Params : EventStoreTransformationRepository,ContextEventProviderSupplier,TransformationEntryStoreProvider,EventStoreStateStore,PlatformTransactionManager Returns : Transformers} transformations{ Params : EventStoreTransformationRepository Returns : Transformations} localTransformationProgressStore{ Params : LocalEventStoreTransformationRepository Returns : TransformationProgressStore} localTransformationApplier{ Params : TransformationEntryStoreProvider,TransformationProgressStore,EventStoreTransformer Returns : TransformationApplyExecutor} localMarkTransformationApplied{ Params : Transformers Returns : MarkTransformationApplied} localMarkEventStoreCompacted{ Params : Transformers Returns : MarkEventStoreCompacted} cleanTransformationProgressStore{ Params : TransformationProgressStore Returns : CleanTransformationApplied} cleanTransformationApplied{ Params : Collection<CleanTransformationApplied> Returns : CleanTransformationApplied} transformationApplyTask{ Params : TransformationApplyExecutor,MarkTransformationApplied,CleanTransformationApplied,Transformations Returns : TransformationTask} transformationCompactionExecutor{ Params : EventStoreTransformer Returns : EventStoreCompactionExecutor} compactingContexts{ Params : EventStoreStateRepository Returns : CompactingContexts} transformationCompactionTask{ Params : EventStoreCompactionExecutor,CompactingContexts,MarkEventStoreCompacted Returns : TransformationTask} transformationBaseStorageProvider{ Params : String Returns : TransformationBaseStorageProvider} appliedTransformationsToBeCleaned{ Params : TransformationBaseStorageProvider,EventStoreTransformationRepository Returns : TransformationsToBeCleaned} cancelledTransformationsToBeCleaned{ Params : TransformationBaseStorageProvider,EventStoreTransformationRepository Returns : TransformationsToBeCleaned} missingTransformationsToBeCleaned{ Params : TransformationBaseStorageProvider,EventStoreTransformationRepository Returns : TransformationsToBeCleaned} transformationsToBeCleaned{ Params : Collection<TransformationsToBeCleaned> Returns : TransformationsToBeCleaned} transformationCleanTask{ Params : TransformationsToBeCleaned,TransformationEntryStoreProvider Returns : TransformationTask} multiScheduledTask{ Params : Collection<TransformationTask> Returns : TransformationTask} localEventStoreTransformationService{ Params : Transformers,Transformations,TransformationTask Returns : LocalEventStoreTransformationService} fastValidationEventStoreTransformationService{ Params : EventStoreTransformationService,ContextEventProviderSupplier,TransformationAllowed Returns : FastValidationEventStoreTransformationService} loggingEventStoreTransformationService{ Params : EventStoreTransformationService Returns : EventStoreTransformationService} transformationsInProgressForContext{ Params : EventStoreStateRepository Returns : TransformationsInProgressForContext} transformationAllowed{ Params : List<TransformationAllowed> Returns : TransformationAllowed} ,eventProviderFor ,,,,,,,,ConcurrentHashMap AutoCloseableEventProvider CachedContextEventProviderSupplier StorageProperties DefaultTransformationEntryStoreSupplier JpaEventStoreStateStore LocalTransformers JpaTransformations JpaLocalTransformationProgressStore DefaultTransformationApplyExecutor LocalMarkTransformationApplied LocalMarkEventStoreCompacted CleanTransformationProgressStore ActionScheduledTask TransformationApplyAction DefaultEventStoreCompactionExecutor JpaCompactingContexts ActionScheduledTask EventStoreCompactAction AppliedTransformations FileSystemTransformations CancelledTransformations FileSystemTransformations MissingTransformations FileSystemTransformations MultipleTransformations ActionScheduledTask TransformationCleanAction DefaultTransformationCleanExecutor MultiScheduledTask LocalEventStoreTransformationService FastValidationEventStoreTransformationService LoggingEventTransformationService JpaTransformationsInProgressForContext ,transformationAllowed: , context
axon-server-se-master,io.axoniq.axonserver.config,CachedContextEventProviderSupplier,3,2,0,1,0,false,0 ,0 ,CachedContextEventProviderSupplier ,supplier: ContextEventProviderSupplier cache: Map<String, EventProvider> ,eventProviderFor{ Params : String Returns : EventProvider} localEventProviderSupplier{ Params : LocalEventStore Returns : ContextEventProviderSupplier} transformationEntryStoreSupplier{ Params : TransformationBaseStorageProvider Returns : TransformationEntryStoreProvider} eventStoreStateStore{ Params : EventStoreStateRepository Returns : EventStoreStateStore} transformers{ Params : EventStoreTransformationRepository,ContextEventProviderSupplier,TransformationEntryStoreProvider,EventStoreStateStore,PlatformTransactionManager Returns : Transformers} transformations{ Params : EventStoreTransformationRepository Returns : Transformations} localTransformationProgressStore{ Params : LocalEventStoreTransformationRepository Returns : TransformationProgressStore} localTransformationApplier{ Params : TransformationEntryStoreProvider,TransformationProgressStore,EventStoreTransformer Returns : TransformationApplyExecutor} localMarkTransformationApplied{ Params : Transformers Returns : MarkTransformationApplied} localMarkEventStoreCompacted{ Params : Transformers Returns : MarkEventStoreCompacted} cleanTransformationProgressStore{ Params : TransformationProgressStore Returns : CleanTransformationApplied} cleanTransformationApplied{ Params : Collection<CleanTransformationApplied> Returns : CleanTransformationApplied} transformationApplyTask{ Params : TransformationApplyExecutor,MarkTransformationApplied,CleanTransformationApplied,Transformations Returns : TransformationTask} transformationCompactionExecutor{ Params : EventStoreTransformer Returns : EventStoreCompactionExecutor} compactingContexts{ Params : EventStoreStateRepository Returns : CompactingContexts} transformationCompactionTask{ Params : EventStoreCompactionExecutor,CompactingContexts,MarkEventStoreCompacted Returns : TransformationTask} transformationBaseStorageProvider{ Params : String Returns : TransformationBaseStorageProvider} appliedTransformationsToBeCleaned{ Params : TransformationBaseStorageProvider,EventStoreTransformationRepository Returns : TransformationsToBeCleaned} cancelledTransformationsToBeCleaned{ Params : TransformationBaseStorageProvider,EventStoreTransformationRepository Returns : TransformationsToBeCleaned} missingTransformationsToBeCleaned{ Params : TransformationBaseStorageProvider,EventStoreTransformationRepository Returns : TransformationsToBeCleaned} transformationsToBeCleaned{ Params : Collection<TransformationsToBeCleaned> Returns : TransformationsToBeCleaned} transformationCleanTask{ Params : TransformationsToBeCleaned,TransformationEntryStoreProvider Returns : TransformationTask} multiScheduledTask{ Params : Collection<TransformationTask> Returns : TransformationTask} localEventStoreTransformationService{ Params : Transformers,Transformations,TransformationTask Returns : LocalEventStoreTransformationService} fastValidationEventStoreTransformationService{ Params : EventStoreTransformationService,ContextEventProviderSupplier,TransformationAllowed Returns : FastValidationEventStoreTransformationService} loggingEventStoreTransformationService{ Params : EventStoreTransformationService Returns : EventStoreTransformationService} transformationsInProgressForContext{ Params : EventStoreStateRepository Returns : TransformationsInProgressForContext} transformationAllowed{ Params : List<TransformationAllowed> Returns : TransformationAllowed} ,eventProviderFor ,,,,ContextEventProviderSupplier ,Map<String,EventProvider> ,,Map<String,EventProvider> ,ConcurrentHashMap ,cache: , context, supplier::eventProviderFor
axon-server-se-master,io.axoniq.axonserver.config,WebConfiguration,1,1,0,0,0,false,0 ,WebMvcConfigurer ,GlobalExceptionHandler ,,configurePathMatch{ Params : PathMatchConfigurer Returns : void} addViewControllers{ Params : ViewControllerRegistry Returns : void} errorAttributes{ Params : VersionInfoProvider Returns : ErrorAttributes} getErrorAttributes{ Params : WebRequest,ErrorAttributeOptions Returns : Map<String,Object>} addMessageField{ Params : Map<String,Object> Returns : void} onIllegalArgumentException{ Params : Throwable Returns : String} onIllegalAccessException{ Params : Throwable Returns : String} handleAxonServerException{ Params : RuntimeException,WebRequest Returns : ResponseEntity<Object>} objectMapperBuilder{ Params :  Returns : Jackson2ObjectMapperBuilder} ,configurePathMatch addViewControllers getErrorAttributes ,,,,WebMvcConfigurer ,,,,DefaultErrorAttributes Jackson2ObjectMapperBuilder PrintableSerializer ,builder: , Printable.class, new PrintableSerializer()
axon-server-se-master,io.axoniq.axonserver.config,GlobalExceptionHandler,3,1,0,1,0,false,0 ,WebMvcConfigurer ,GlobalExceptionHandler ,,configurePathMatch{ Params : PathMatchConfigurer Returns : void} addViewControllers{ Params : ViewControllerRegistry Returns : void} errorAttributes{ Params : VersionInfoProvider Returns : ErrorAttributes} getErrorAttributes{ Params : WebRequest,ErrorAttributeOptions Returns : Map<String,Object>} addMessageField{ Params : Map<String,Object> Returns : void} onIllegalArgumentException{ Params : Throwable Returns : String} onIllegalAccessException{ Params : Throwable Returns : String} handleAxonServerException{ Params : RuntimeException,WebRequest Returns : ResponseEntity<Object>} objectMapperBuilder{ Params :  Returns : Jackson2ObjectMapperBuilder} ,configurePathMatch addViewControllers getErrorAttributes ,,,,,,,,,eventStoreException: 
axon-server-se-master,io.axoniq.axonserver.exception,ConcurrencyExceptions,1,1,0,0,0,false,0 ,0 ,0 ,,unwrap{ Params : Throwable Returns : Throwable} ,,unwrap ,,,,,,,,t: 
axon-server-se-master,io.axoniq.axonserver.exception,CriticalEventException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.exception,ErrorMessageFactory,1,1,0,0,0,false,0 ,0 ,0 ,,build{ Params : String Returns : ErrorMessage} build{ Params : String,String Returns : ErrorMessage} ,,build build ,,,,,,,,StringUtils: , message, "null"
axon-server-se-master,io.axoniq.axonserver.exception,EventStoreValidationException,1,1,0,0,0,false,MessagingPlatformException ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.exception,ExceptionUtils,1,1,0,0,0,false,0 ,0 ,0 ,,isCancelled{ Params : Throwable Returns : boolean} ,,isCancelled ,,,,,,,,((StatusRuntimeException) cause): 
axon-server-se-master,io.axoniq.axonserver.exception,InvalidTokenException,1,1,0,0,0,false,MessagingPlatformException ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.exception,MessagingPlatformException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,errorCode: ErrorCode ,create{ Params : Throwable Returns : MessagingPlatformException} isClientException{ Params : Throwable Returns : boolean} getErrorPayload{ Params :  Returns : Object} getErrorCode{ Params :  Returns : ErrorCode} getMessage{ Params :  Returns : String} ,getMessage ,create isClientException ,,,,ErrorCode ,,ErrorCode ,MessagingPlatformException ,super: 
axon-server-se-master,io.axoniq.axonserver.grpc,AuthenticationInterceptor,1,1,0,0,0,false,0 ,ServerInterceptor ,0 ,axonServerAccessController: AxonServerAccessController ,interceptCall{ Params : ServerCall<T,R>,Metadata,ServerCallHandler<T,R> Returns : ServerCall.Listener<T>} context{ Params : Metadata Returns : String} token{ Params : Metadata Returns : String} authentication{ Params : String Returns : Authentication} ,interceptCall ,,,,ServerInterceptor ,AxonServerAccessController ,,AxonServerAccessController ,Listener ,axonServerAccessController: , token
axon-server-se-master,io.axoniq.axonserver.grpc.axonhub,AxonHubCommandService,1,1,0,0,0,false,0 ,AxonServerClientService ,0 ,SERVICE_NAME: String METHOD_OPEN_STREAM: MethodDescriptor<CommandProviderOutbound, SerializedCommandProviderInbound> METHOD_DISPATCH: MethodDescriptor<byte[], SerializedCommandResponse> commandService: CommandService ,bindService{ Params :  Returns : ServerServiceDefinition} ,bindService ,,,,AxonServerClientService ,CommandService ,,CommandService ,,: , commandService::dispatch
axon-server-se-master,io.axoniq.axonserver.grpc.axonhub,AxonHubEventService,1,1,0,0,0,false,0 ,AxonServerClientService ,0 ,SERVICE_NAME: String METHOD_APPEND_EVENT: MethodDescriptor<SerializedEvent, Confirmation> METHOD_APPEND_SNAPSHOT: MethodDescriptor<Event, Confirmation> METHOD_LIST_AGGREGATE_EVENTS: MethodDescriptor<GetAggregateEventsRequest, SerializedEvent> METHOD_LIST_EVENTS: MethodDescriptor<GetEventsRequest, SerializedEventWithToken> METHOD_READ_HIGHEST_SEQUENCE_NR: MethodDescriptor<ReadHighestSequenceNrRequest, ReadHighestSequenceNrResponse> METHOD_QUERY_EVENTS: MethodDescriptor<QueryEventsRequest, QueryEventsResponse> METHOD_GET_FIRST_TOKEN: MethodDescriptor<GetFirstTokenRequest, TrackingToken> METHOD_GET_LAST_TOKEN: MethodDescriptor<GetLastTokenRequest, TrackingToken> METHOD_GET_TOKEN_AT: MethodDescriptor<GetTokenAtRequest, TrackingToken> eventDispatcher: EventStoreService ,bindService{ Params :  Returns : ServerServiceDefinition} ,bindService ,,,,AxonServerClientService ,EventStoreService ,,EventStoreService ,SerializedEventMarshaller SerializedEventWithTokenMarshaller ,: , eventDispatcher::queryEvents
axon-server-se-master,io.axoniq.axonserver.grpc.axonhub,AxonHubPlatformService,1,1,0,0,0,false,0 ,AxonServerClientService ,0 ,SERVICE_NAME: String METHOD_GET_PLATFORM_SERVER: io.grpc.MethodDescriptor<ClientIdentification, PlatformInfo> METHOD_OPEN_STREAM: io.grpc.MethodDescriptor<PlatformInboundInstruction, PlatformOutboundInstruction> platformService: PlatformService ,bindService{ Params :  Returns : io.grpc.ServerServiceDefinition} ,bindService ,,bindService ,,AxonServerClientService ,PlatformService ,,PlatformService ,,: , platformService::openStream
axon-server-se-master,io.axoniq.axonserver.grpc.axonhub,AxonHubQueryService,1,1,0,0,0,false,0 ,AxonServerClientService ,0 ,SERVICE_NAME: String METHOD_OPEN_STREAM: MethodDescriptor<QueryProviderOutbound, QueryProviderInbound> METHOD_QUERY: MethodDescriptor<QueryRequest, QueryResponse> METHOD_SUBSCRIPTION: MethodDescriptor<SubscriptionQueryRequest, SubscriptionQueryResponse> queryService: QueryService ,bindService{ Params :  Returns : ServerServiceDefinition} ,bindService ,,,,AxonServerClientService ,QueryService ,,QueryService ,,: , queryService::subscription
axon-server-se-master,io.axoniq.axonserver.grpc,AxonServerClientService,2,1,0,0,0,true,0 ,AxonServerClientService ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.grpc,CachedGrpcFlowControlExecutorProvider,1,1,0,0,0,false,0 ,GrpcFlowControlExecutorProvider ,0 ,executor: ExecutorService ,provide{ Params :  Returns : Executor} shutdown{ Params :  Returns : void} ,,,,,GrpcFlowControlExecutorProvider ,ExecutorService ,,ExecutorService ,,executor: 
axon-server-se-master,io.axoniq.axonserver.grpc,ClientContext,1,1,0,0,0,false,0 ,0 ,0 ,clientId: String context: String ,clientId{ Params :  Returns : String} context{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,equals hashCode toString ,,,,,String ,,String ,,Objects: , clientId, context
axon-server-se-master,io.axoniq.axonserver.grpc,ClientIdRegistry,2,1,0,0,0,true,0 ,0 ,0 ,,register{ Params : String,ClientContext,ConnectionType Returns : boolean} unregister{ Params : String,ConnectionType Returns : boolean} clientId{ Params : String Returns : ClientContext} streamIdsFor{ Params : ClientContext,ConnectionType Returns : Set<String>} streamIdFor{ Params : ClientContext,ConnectionType Returns : String} ,,,,,,,,,IllegalStateException ,streamIds: 
axon-server-se-master,io.axoniq.axonserver.grpc,CommandService,1,1,0,0,0,false,0 ,AxonServerClientService ,0 ,METHOD_DISPATCH: MethodDescriptor<byte[], SerializedCommandResponse> METHOD_OPEN_STREAM: MethodDescriptor<CommandProviderOutbound, SerializedCommandProviderInbound> topology: Topology commandDispatcher: CommandDispatcher contextProvider: ContextProvider authenticationProvider: AuthenticationProvider clientIdRegistry: ClientIdRegistry eventPublisher: ApplicationEventPublisher logger: Logger dispatcherListeners: Map<ClientStreamIdentification, GrpcFlowControlledDispatcherListener> instructionAckSource: InstructionAckSource<SerializedCommandProviderInbound> processingThreads: int ,cleanup{ Params :  Returns : void} listeners{ Params :  Returns : Set<GrpcFlowControlledDispatcherListener>} bindService{ Params :  Returns : ServerServiceDefinition} openStream{ Params : StreamObserver<SerializedCommandProviderInbound> Returns : StreamObserver<CommandProviderOutbound>} consume{ Params : CommandProviderOutbound Returns : void} initClientReference{ Params : String Returns : void} flowControl{ Params : FlowControl Returns : void} checkInitClient{ Params : String,String Returns : void} sender{ Params :  Returns : String} onError{ Params : Throwable Returns : void} cleanup{ Params :  Returns : void} onCompleted{ Params :  Returns : void} isUnsupportedInstructionErrorResult{ Params : InstructionAck Returns : boolean} dispatch{ Params : byte[],StreamObserver<SerializedCommandResponse> Returns : void} safeReply{ Params : String,SerializedCommandResponse,StreamObserver<SerializedCommandResponse> Returns : void} completeStreamForInactivity{ Params : String,ClientStreamIdentification Returns : void} ,bindService consume sender onError onCompleted ,,bindService ,,AxonServerClientService ,int ,,int ,ConcurrentHashMap HashSet SendingStreamObserver ReceivingStreamObserver AtomicReference AtomicReference AtomicReference AtomicReference SubscribeCommand UnsubscribeCommand SerializedCommandResponse ClientStreamIdentification ClientContext GrpcCommandDispatcherListener DirectCommandHandler CommandHandlerDisconnected SerializedCommand ApplicationInactivityException CommandHandlerDisconnected ,clientStreamIdentification: 
axon-server-se-master,io.axoniq.axonserver.grpc,ContextInterceptor,1,1,0,0,0,false,0 ,ServerInterceptor ,0 ,,interceptCall{ Params : ServerCall<T,R>,Metadata,ServerCallHandler<T,R> Returns : ServerCall.Listener<T>} ,interceptCall ,,,,ServerInterceptor ,,,,,Contexts: , updatedGrpcContext, serverCall, metadata, serverCallHandler
axon-server-se-master,io.axoniq.axonserver.grpc,ContextProvider,2,1,0,0,0,true,0 ,ServerInterceptor ,0 ,,getContext{ Params :  Returns : String} ,,,,,,,,,,Contexts: , updatedGrpcContext, serverCall, metadata, serverCallHandler
axon-server-se-master,io.axoniq.axonserver.grpc,DefaultClientIdRegistry,1,1,0,0,0,false,0 ,ClientIdRegistry ,0 ,logger: Logger clientIdMapPerType: Map<ConnectionType, Map<String, ClientContext>> ,register{ Params : String,ClientContext,ConnectionType Returns : boolean} unregister{ Params : String,ConnectionType Returns : boolean} clientId{ Params : String Returns : ClientContext} streamIdsFor{ Params : ClientContext,ConnectionType Returns : Set<String>} printOn{ Params : Media Returns : void} on{ Params : ApplicationConnected Returns : void} on{ Params : ApplicationDisconnected Returns : void} on{ Params : SubscribeCommand Returns : void} on{ Params : CommandHandlerDisconnected Returns : void} on{ Params : SubscribeQuery Returns : void} on{ Params : QueryHandlerDisconnected Returns : void} ,register unregister clientId streamIdsFor printOn ,,,,ClientIdRegistry ,Map<ConnectionType,Map<String,ClientContext>> ,,Map<ConnectionType,Map<String,ClientContext>> ,ConcurrentHashMap ConcurrentHashMap IllegalStateException ClientContext ClientContext ClientContext ,event: 
axon-server-se-master,io.axoniq.axonserver.grpc,DefaultContextProvider,1,1,0,0,0,false,0 ,ContextProvider ,0 ,,getContext{ Params :  Returns : String} ,getContext ,,,,ContextProvider ,,,,,event: 
axon-server-se-master,io.axoniq.axonserver.grpc,DefaultInstructionAckSource,1,1,0,0,0,false,0 ,InstructionAckSource<T> ,0 ,messageCreator: Function<InstructionAck, T> ,sendAck{ Params : String,boolean,ErrorMessage,StreamObserver<T> Returns : void} ,sendAck ,,,,InstructionAckSource ,Function<InstructionAck,T> ,,Function<InstructionAck,T> ,,builder: 
axon-server-se-master,io.axoniq.axonserver.grpc,EventStoreService,1,1,0,0,0,false,0 ,AxonServerClientService ,0 ,METHOD_LIST_EVENTS: MethodDescriptor<GetEventsRequest, SerializedEventWithToken> METHOD_LIST_AGGREGATE_EVENTS: MethodDescriptor<GetAggregateEventsRequest, SerializedEvent> METHOD_LIST_AGGREGATE_SNAPSHOTS: MethodDescriptor<GetAggregateSnapshotsRequest, SerializedEvent> METHOD_APPEND_EVENT: MethodDescriptor<SerializedEvent, Confirmation> logger: Logger sequenceValidationStrategy: SequenceValidationStrategy authenticationProvider: AuthenticationProvider contextProvider: ContextProvider eventDispatcher: EventDispatcher grpcFlowControlExecutorProvider: GrpcFlowControlExecutorProvider axonServerAccessController: AxonServerAccessController ,appendEvent{ Params : StreamObserver<Confirmation> Returns : StreamObserver<SerializedEvent>} onNext{ Params : SerializedEvent Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} hookOnComplete{ Params :  Returns : void} hookOnError{ Params : Throwable Returns : void} appendSnapshot{ Params : Event,StreamObserver<Confirmation> Returns : void} listAggregateEvents{ Params : GetAggregateEventsRequest,StreamObserver<SerializedEvent> Returns : void} listEvents{ Params : StreamObserver<SerializedEventWithToken> Returns : StreamObserver<GetEventsRequest>} onNext{ Params : GetEventsRequest Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} bindService{ Params :  Returns : io.grpc.ServerServiceDefinition} getFirstToken{ Params : GetFirstTokenRequest,StreamObserver<TrackingToken> Returns : void} getLastToken{ Params : GetLastTokenRequest,StreamObserver<TrackingToken> Returns : void} getTokenAt{ Params : GetTokenAtRequest,StreamObserver<TrackingToken> Returns : void} readHighestSequenceNr{ Params : ReadHighestSequenceNrRequest,StreamObserver<ReadHighestSequenceNrResponse> Returns : void} queryEvents{ Params : StreamObserver<QueryEventsResponse> Returns : StreamObserver<QueryEventsRequest>} onNext{ Params : QueryEventsRequest Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} listAggregateSnapshots{ Params : GetAggregateSnapshotsRequest,StreamObserver<SerializedEvent> Returns : void} ,onNext onError onCompleted hookOnComplete hookOnError onNext onError onCompleted bindService onNext onError onCompleted ,,bindService ,,AxonServerClientService ,AxonServerAccessController ,,AxonServerAccessController ,SerializedEventWithTokenMarshaller StreamObserver BaseSubscriber ForwardingStreamObserver RuntimeException SequenceValidationStreamObserver FlowControlledOutgoingStream FlowControlledOutgoingStream StreamObserver AtomicReference RuntimeException ForwardingStreamObserver ForwardingStreamObserver ForwardingStreamObserver ForwardingStreamObserver StreamObserver AtomicReference ForwardingStreamObserver MessagingPlatformException RuntimeException FlowControlledOutgoingStream ,authenticationProvider: 
axon-server-se-master,io.axoniq.axonserver.grpc,FlowControlledStreamObserver,1,1,0,0,0,false,0 ,StreamObserver<T> ,0 ,logger: Logger delegate: StreamObserver<T> permitsLeft: AtomicLong errorHandler: Consumer<Throwable> ,onNext{ Params : T Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} addPermits{ Params : long Returns : void} ,onNext onError onCompleted ,,,,StreamObserver ,Consumer<Throwable> ,,Consumer<Throwable> ,AtomicLong IllegalStateException ,logger: , "Adding {} permits, #permits was: {}", count, old
axon-server-se-master,io.axoniq.axonserver.grpc,Gateway,1,1,0,0,0,false,0 ,SmartLifecycle ,0 ,logger: Logger axonServerClientServices: List<AxonServerClientService> axonServerAccessController: AxonServerAccessController started: boolean server: Server routingConfiguration: MessagingPlatformConfiguration licenseAccessController: LicenseAccessController executorService: ExecutorService ,isAutoStartup{ Params :  Returns : boolean} stop{ Params :  Returns : void} start{ Params :  Returns : void} isRunning{ Params :  Returns : boolean} getPhase{ Params :  Returns : int} ,isAutoStartup stop start isRunning getPhase ,,,,SmartLifecycle ,ExecutorService ,,ExecutorService ,CustomizableThreadFactory RuntimeException RuntimeException File File GrpcBufferingInterceptor AuthenticationInterceptor LicenseInterceptor ContextInterceptor ,e: 
axon-server-se-master,io.axoniq.axonserver.grpc,GrpcBufferingInterceptor,1,1,0,0,0,false,0 ,ClientInterceptor ServerInterceptor ,AdditionalMessageRequestingCall ,additionalBuffer: int ,interceptCall{ Params : MethodDescriptor<ReqT,RespT>,CallOptions,Channel Returns : ClientCall<ReqT,RespT>} interceptCall{ Params : ServerCall<ReqT,RespT>,Metadata,ServerCallHandler<ReqT,RespT> Returns : ServerCall.Listener<ReqT>} start{ Params : Listener<RespT>,Metadata Returns : void} ,interceptCall interceptCall start ,,,,ClientInterceptor ServerInterceptor ,int ,,int ,AdditionalMessageRequestingCall ,call: , additionalBuffer
axon-server-se-master,io.axoniq.axonserver.grpc,AdditionalMessageRequestingCall,3,2,0,1,0,false,0 ,ClientInterceptor ServerInterceptor ,AdditionalMessageRequestingCall ,additionalBuffer: int ,interceptCall{ Params : MethodDescriptor<ReqT,RespT>,CallOptions,Channel Returns : ClientCall<ReqT,RespT>} interceptCall{ Params : ServerCall<ReqT,RespT>,Metadata,ServerCallHandler<ReqT,RespT> Returns : ServerCall.Listener<ReqT>} start{ Params : Listener<RespT>,Metadata Returns : void} ,interceptCall interceptCall start ,,,,,int ,,int ,,: , additionalBuffer
axon-server-se-master,io.axoniq.axonserver.grpc,GrpcCommandDispatcherListener,1,1,0,0,0,false,GrpcFlowControlledDispatcherListener<SerializedCommandProviderInbound,WrappedCommand> ,0 ,0 ,logger: Logger ,send{ Params : WrappedCommand Returns : boolean} getLogger{ Params :  Returns : Logger} ,send getLogger ,,,,,,,,,logger: , "Could not send command to {}", queueName, ex
axon-server-se-master,io.axoniq.axonserver.grpc,GrpcExceptionBuilder,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger ,build{ Params : ErrorCode,String Returns : StatusRuntimeException} build{ Params : Throwable Returns : StatusRuntimeException} parse{ Params : Throwable Returns : MessagingPlatformException} createMessage{ Params : Throwable Returns : String} cleanupDescription{ Params : ErrorCode,String,Throwable Returns : String} ,,build build parse createMessage cleanupDescription ,,,,,,,Metadata MessagingPlatformException MessagingPlatformException ArrayList ,: , throwable
axon-server-se-master,io.axoniq.axonserver.grpc,GrpcFlowControlExecutorProvider,2,1,0,0,0,true,0 ,0 ,0 ,,provide{ Params :  Returns : Executor} ,,,,,,,,,,: , throwable
axon-server-se-master,io.axoniq.axonserver.grpc,GrpcFlowControlledDispatcherListener,1,1,1,0,0,false,0 ,0 ,0 ,executorService: ExecutorService EMPTY_QUEUE: BlockingQueue<FlowControlQueues<T>.DestinationNode> inboundStream: StreamObserver<I> permitsLeft: AtomicLong queues: FlowControlQueues<T> queueName: String futures: Future<?> running: boolean ,process{ Params :  Returns : void} processNext{ Params :  Returns : void} send{ Params : T Returns : boolean} addPermits{ Params : long Returns : void} cancel{ Params :  Returns : void} cancelAndCompleteStreamExceptionally{ Params : Throwable Returns : void} shutdown{ Params :  Returns : void} getLogger{ Params :  Returns : Logger} queue{ Params :  Returns : String} waiting{ Params :  Returns : int} permits{ Params :  Returns : long} ,,shutdown ,,send getLogger ,,boolean ,,boolean ,CustomizableThreadFactory ArrayBlockingQueue AtomicLong ,permitsLeft: 
axon-server-se-master,io.axoniq.axonserver.grpc,GrpcMetadataKeys,2,1,0,0,0,true,0 ,0 ,0 ,TOKEN_KEY: Metadata.Key<String> AXONDB_TOKEN_KEY: Metadata.Key<String> INTERNAL_TOKEN_KEY: Metadata.Key<String> ERROR_CODE_KEY: Metadata.Key<String> CONTEXT_MD_KEY: Metadata.Key<String> AXONDB_CONTEXT_MD_KEY: Metadata.Key<String> CONTEXT_KEY: Context.Key<String> PRINCIPAL_CONTEXT_KEY: Context.Key<Authentication> ,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.grpc,GrpcQueryDispatcherListener,1,1,0,0,0,false,GrpcFlowControlledDispatcherListener<QueryProviderInbound,QueryInstruction> ,QueryRequestValidator ,0 ,logger: Logger queryDispatcher: QueryDispatcher ,send{ Params : QueryInstruction Returns : boolean} getLogger{ Params :  Returns : Logger} send{ Params : QueryInstruction.Query Returns : boolean} send{ Params : QueryInstruction.Cancel Returns : boolean} send{ Params : QueryInstruction.FlowControl Returns : boolean} streamingProcessingInstruction{ Params : boolean Returns : ProcessingInstruction} debug{ Params : Supplier<String> Returns : void} ,send getLogger ,,,,QueryRequestValidator ,QueryDispatcher ,,QueryDispatcher ,IllegalStateException ,messageSupplier: 
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,ApplicationInactivityException,1,1,0,0,0,false,Exception ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,ApplicationInactivityListener,1,1,0,0,0,false,0 ,0 ,StreamCloser ,streamClosers: Map<ConnectionType, StreamCloser> clientIdRegistry: ClientIdRegistry ,on{ Params : TopologyEvents.ApplicationInactivityTimeout Returns : void} forceDisconnection{ Params : String,ClientStreamIdentification Returns : void} ,,,,,,ClientIdRegistry ,,ClientIdRegistry ,ConcurrentHashMap ClientStreamIdentification ,client: 
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,StreamCloser,3,1,0,0,0,true,0 ,0 ,StreamCloser ,,on{ Params : TopologyEvents.ApplicationInactivityTimeout Returns : void} forceDisconnection{ Params : String,ClientStreamIdentification Returns : void} ,,,,,,,,,,client: 
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,HeartbeatMonitor,1,1,0,0,0,false,0 ,0 ,ClientInformation ,logger: Logger clientInfos: Map<ClientStreamIdentification, ClientInformation> clock: Clock heartbeatTimeout: long eventPublisher: ApplicationEventPublisher heartbeatPublisher: Publisher<PlatformOutboundInstruction> lastReceivedHeartBeats: Map<ClientStreamIdentification, Instant> ,on{ Params : ApplicationConnected Returns : void} onHeartBeat{ Params : ClientStreamIdentification,PlatformInboundInstruction Returns : void} checkClientsStillAlive{ Params :  Returns : void} on{ Params : ApplicationDisconnected Returns : void} sendHeartbeat{ Params :  Returns : void} ,,,,,,Map<ClientStreamIdentification,Instant> ,,Map<ClientStreamIdentification,Instant> ,ConcurrentHashMap ConcurrentHashMap ClientStreamIdentification ClientInformation ClientStreamIdentification ApplicationInactivityTimeout ClientContext ClientStreamIdentification ,Heartbeat: 
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,ClientInformation,3,2,0,1,1,false,0 ,0 ,ClientInformation ,component: String clientId: String context: String ,on{ Params : ApplicationConnected Returns : void} onHeartBeat{ Params : ClientStreamIdentification,PlatformInboundInstruction Returns : void} checkClientsStillAlive{ Params :  Returns : void} on{ Params : ApplicationDisconnected Returns : void} sendHeartbeat{ Params :  Returns : void} ,,,,,,String ,,String ,,null
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,HeartbeatProvidedClients,1,1,0,0,0,false,0 ,ClientIdentifications ,0 ,log: Logger supportedAxonFrameworkVersions: List<Version> clients: ClientIdentifications versionSupplier: Function<ClientStreamIdentification, Version> ,iterator{ Params :  Returns : Iterator<ClientStreamIdentification>} supportHeartbeat{ Params : ClientStreamIdentification Returns : boolean} ,iterator ,,,,ClientIdentifications ,Function<ClientStreamIdentification,Version> ,,Function<ClientStreamIdentification,Version> ,BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion UnknownVersion BackwardsCompatibleVersion ,log: , "Can not compare the client version with supported versions.", e2
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,HeartbeatPublisher,1,1,0,0,0,false,0 ,Publisher<PlatformOutboundInstruction> ,ClientPublisher ,logger: Logger clientsSupportingHeartbeat: ClientIdentifications clientPublisher: ClientPublisher ,publish{ Params : PlatformOutboundInstruction Returns : void} publish{ Params : String,PlatformOutboundInstruction Returns : void} ,,,,,Publisher ,ClientPublisher ,,ClientPublisher ,,logger: , "HeartBeat sent to client {}", client
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,ClientPublisher,3,1,0,0,0,true,0 ,Publisher<PlatformOutboundInstruction> ,ClientPublisher ,,publish{ Params : PlatformOutboundInstruction Returns : void} publish{ Params : String,PlatformOutboundInstruction Returns : void} ,,,,,,,,,,logger: , "HeartBeat sent to client {}", client
axon-server-se-master,io.axoniq.axonserver.grpc,InstructionAckSource,2,1,0,0,0,true,0 ,Publisher<PlatformOutboundInstruction> ,0 ,,sendSuccessfulAck{ Params : String,StreamObserver<T> Returns : void} sendUnsupportedInstruction{ Params : String,String,StreamObserver<T> Returns : void} sendUnsuccessfulAck{ Params : String,ErrorMessage,StreamObserver<T> Returns : void} sendAck{ Params : String,boolean,ErrorMessage,StreamObserver<T> Returns : void} ,,,,,,,,,,: , instructionId, false, error, stream
axon-server-se-master,io.axoniq.axonserver.grpc,InstructionPublisher,2,1,0,0,0,true,0 ,Publisher<PlatformOutboundInstruction> ,0 ,,publish{ Params : String,String,PlatformOutboundInstruction Returns : void} ,,,,,,,,,,: , instructionId, false, error, stream
axon-server-se-master,io.axoniq.axonserver.grpc.istruction.result,InstructionResultSource,2,1,0,0,0,true,0 ,Publisher<PlatformOutboundInstruction> ,ResultSubscriber Factory ,,defaultTimeout{ Params :  Returns : Duration} subscribe{ Params : Runnable,Consumer<ErrorMessage> Returns : void} subscribe{ Params : Runnable,Consumer<ErrorMessage>,Duration Returns : void} subscribe{ Params : Runnable,Consumer<ErrorMessage>,Consumer<ErrorMessage> Returns : void} subscribe{ Params : Runnable,Consumer<ErrorMessage>,Consumer<ErrorMessage>,Duration Returns : void} onResult{ Params : InstructionResult Returns : void} onTimeout{ Params :  Returns : void} subscribe{ Params : Consumer<InstructionResult>,Runnable Returns : void} subscribe{ Params : Consumer<InstructionResult>,Runnable,Duration Returns : void} onResult{ Params : InstructionResult Returns : void} onTimeout{ Params :  Returns : void} subscribe{ Params : ResultSubscriber Returns : void} subscribe{ Params : ResultSubscriber,Duration Returns : void} onResult{ Params : InstructionResult Returns : void} onTimeout{ Params :  Returns : void} onInstructionResultFor{ Params : String Returns : InstructionResultSource} ,onResult onTimeout onResult onTimeout ,,,,,,,,ResultSubscriber ResultSubscriber ,: 
axon-server-se-master,io.axoniq.axonserver.grpc.istruction.result,ResultSubscriber,3,0,0,0,0,true,0 ,Publisher<PlatformOutboundInstruction> ,ResultSubscriber Factory ,,defaultTimeout{ Params :  Returns : Duration} subscribe{ Params : Runnable,Consumer<ErrorMessage> Returns : void} subscribe{ Params : Runnable,Consumer<ErrorMessage>,Duration Returns : void} subscribe{ Params : Runnable,Consumer<ErrorMessage>,Consumer<ErrorMessage> Returns : void} subscribe{ Params : Runnable,Consumer<ErrorMessage>,Consumer<ErrorMessage>,Duration Returns : void} onResult{ Params : InstructionResult Returns : void} onTimeout{ Params :  Returns : void} subscribe{ Params : Consumer<InstructionResult>,Runnable Returns : void} subscribe{ Params : Consumer<InstructionResult>,Runnable,Duration Returns : void} onResult{ Params : InstructionResult Returns : void} onTimeout{ Params :  Returns : void} subscribe{ Params : ResultSubscriber Returns : void} subscribe{ Params : ResultSubscriber,Duration Returns : void} onResult{ Params : InstructionResult Returns : void} onTimeout{ Params :  Returns : void} onInstructionResultFor{ Params : String Returns : InstructionResultSource} ,onResult onTimeout onResult onTimeout ,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.grpc.istruction.result,Factory,3,0,0,0,0,true,0 ,Publisher<PlatformOutboundInstruction> ,ResultSubscriber Factory ,,defaultTimeout{ Params :  Returns : Duration} subscribe{ Params : Runnable,Consumer<ErrorMessage> Returns : void} subscribe{ Params : Runnable,Consumer<ErrorMessage>,Duration Returns : void} subscribe{ Params : Runnable,Consumer<ErrorMessage>,Consumer<ErrorMessage> Returns : void} subscribe{ Params : Runnable,Consumer<ErrorMessage>,Consumer<ErrorMessage>,Duration Returns : void} onResult{ Params : InstructionResult Returns : void} onTimeout{ Params :  Returns : void} subscribe{ Params : Consumer<InstructionResult>,Runnable Returns : void} subscribe{ Params : Consumer<InstructionResult>,Runnable,Duration Returns : void} onResult{ Params : InstructionResult Returns : void} onTimeout{ Params :  Returns : void} subscribe{ Params : ResultSubscriber Returns : void} subscribe{ Params : ResultSubscriber,Duration Returns : void} onResult{ Params : InstructionResult Returns : void} onTimeout{ Params :  Returns : void} onInstructionResultFor{ Params : String Returns : InstructionResultSource} ,onResult onTimeout onResult onTimeout ,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.grpc.istruction.result,InstructionResultSourceFactory,1,1,0,0,0,false,0 ,InstructionResultSource.Factory ,TimeoutResultSubscriber ,scheduledExecutorService: ScheduledExecutorService resultTimeout: int subscribersMap: ConcurrentMap<String, List<ResultSubscriber>> ,on{ Params : InstructionResult Returns : void} onInstructionResultFor{ Params : String Returns : InstructionResultSource} subscribe{ Params : ResultSubscriber,Duration Returns : void} defaultTimeout{ Params :  Returns : Duration} onResult{ Params : InstructionResult Returns : void} onTimeout{ Params :  Returns : void} ,onInstructionResultFor subscribe defaultTimeout onResult onTimeout ,,,,Factory ,ConcurrentMap<String,List<ResultSubscriber>> ,,ConcurrentMap<String,List<ResultSubscriber>> ,DaemonThreadFactory ConcurrentHashMap InstructionResultSource CopyOnWriteArrayList TimeoutResultSubscriber ,Duration: , resultTimeout
axon-server-se-master,io.axoniq.axonserver.grpc.istruction.result,TimeoutResultSubscriber,3,2,0,1,0,false,0 ,InstructionResultSource.Factory ,TimeoutResultSubscriber ,delegate: ResultSubscriber onTimeout: ScheduledFuture<?> cancelSubscription: Consumer<TimeoutResultSubscriber> ,on{ Params : InstructionResult Returns : void} onInstructionResultFor{ Params : String Returns : InstructionResultSource} subscribe{ Params : ResultSubscriber,Duration Returns : void} defaultTimeout{ Params :  Returns : Duration} onResult{ Params : InstructionResult Returns : void} onTimeout{ Params :  Returns : void} ,onInstructionResultFor subscribe defaultTimeout onResult onTimeout ,,,,ResultSubscriber ,Consumer<TimeoutResultSubscriber> ,,Consumer<TimeoutResultSubscriber> ,,delegate: 
axon-server-se-master,io.axoniq.axonserver.grpc,LicenseInterceptor,1,1,0,0,0,false,0 ,ServerInterceptor ,0 ,APPEND_EVENT: String DISPATCH_COMMAND: String licenseAccessController: LicenseAccessController logger: Logger ,interceptCall{ Params : ServerCall<T,R>,Metadata,ServerCallHandler<T,R> Returns : ServerCall.Listener<T>} ,interceptCall ,,,,ServerInterceptor ,Logger ,,Logger ,Listener ,serverCallHandler: , serverCall, metadata
axon-server-se-master,io.axoniq.axonserver.grpc,PlatformService,1,1,0,0,0,false,PlatformServiceGrpc.PlatformServiceImplBase ,AxonServerClientService ,InstructionConsumer ClientComponent ,logger: Logger connectionMap: Map<ClientComponent, SendingStreamObserver<PlatformOutboundInstruction>> topology: Topology contextProvider: ContextProvider eventPublisher: ApplicationEventPublisher handlers: Map<RequestCase, Deque<InstructionConsumer>> instructionAckSource: InstructionAckSource<PlatformOutboundInstruction> clientIdRegistry: ClientIdRegistry ,isUnsupportedInstructionErrorResult{ Params : InstructionAck Returns : boolean} getPlatformServer{ Params : ClientIdentification,StreamObserver<PlatformInfo> Returns : void} openStream{ Params : StreamObserver<PlatformOutboundInstruction> Returns : StreamObserver<PlatformInboundInstruction>} consume{ Params : PlatformInboundInstruction Returns : void} sender{ Params :  Returns : String} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} requestReconnect{ Params : ClientComponent,String Returns : boolean} requestReconnect{ Params : String,String Returns : boolean} sendToClientStreamId{ Params : String,PlatformOutboundInstruction Returns : void} sendToClient{ Params : String,String,PlatformOutboundInstruction Returns : void} on{ Params : ApplicationDisconnected Returns : void} onInboundInstruction{ Params : RequestCase,InstructionConsumer Returns : void} registerClient{ Params : ClientComponent,SendingStreamObserver<PlatformOutboundInstruction> Returns : void} deregisterClient{ Params : ClientComponent,String Returns : void} deregisterClient{ Params : ClientComponent,Throwable Returns : void} on{ Params : ApplicationInactivityTimeout Returns : void} getConnectedClients{ Params :  Returns : Set<ClientComponent>} requestReconnectForContext{ Params : String,String Returns : void} accept{ Params : ClientComponent,PlatformInboundInstruction Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getComponent{ Params :  Returns : String} getContext{ Params :  Returns : String} toString{ Params :  Returns : String} compareTo{ Params : ClientComponent Returns : int} ,getPlatformServer openStream consume sender onError onCompleted equals hashCode toString compareTo ,,,,AxonServerClientService ,ClientIdRegistry ,,ClientIdRegistry ,ConcurrentHashMap EnumMap SendingStreamObserver ReceivingStreamObserver AtomicReference ClientContext ClientTagsUpdate ClientComponent ClientVersionUpdate ArrayDeque ApplicationReconnectRequested ClientComponent ArrayDeque ApplicationConnected ApplicationDisconnected ClientComponent ApplicationInactivityException ,: , clientName, reason
axon-server-se-master,io.axoniq.axonserver.grpc,InstructionConsumer,3,1,0,0,0,true,PlatformServiceGrpc.PlatformServiceImplBase ,AxonServerClientService ,InstructionConsumer ClientComponent ,,isUnsupportedInstructionErrorResult{ Params : InstructionAck Returns : boolean} getPlatformServer{ Params : ClientIdentification,StreamObserver<PlatformInfo> Returns : void} openStream{ Params : StreamObserver<PlatformOutboundInstruction> Returns : StreamObserver<PlatformInboundInstruction>} consume{ Params : PlatformInboundInstruction Returns : void} sender{ Params :  Returns : String} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} requestReconnect{ Params : ClientComponent,String Returns : boolean} requestReconnect{ Params : String,String Returns : boolean} sendToClientStreamId{ Params : String,PlatformOutboundInstruction Returns : void} sendToClient{ Params : String,String,PlatformOutboundInstruction Returns : void} on{ Params : ApplicationDisconnected Returns : void} onInboundInstruction{ Params : RequestCase,InstructionConsumer Returns : void} registerClient{ Params : ClientComponent,SendingStreamObserver<PlatformOutboundInstruction> Returns : void} deregisterClient{ Params : ClientComponent,String Returns : void} deregisterClient{ Params : ClientComponent,Throwable Returns : void} on{ Params : ApplicationInactivityTimeout Returns : void} getConnectedClients{ Params :  Returns : Set<ClientComponent>} requestReconnectForContext{ Params : String,String Returns : void} accept{ Params : ClientComponent,PlatformInboundInstruction Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getComponent{ Params :  Returns : String} getContext{ Params :  Returns : String} toString{ Params :  Returns : String} compareTo{ Params : ClientComponent Returns : int} ,getPlatformServer openStream consume sender onError onCompleted equals hashCode toString compareTo ,,,,,,,,,: , clientName, reason
axon-server-se-master,io.axoniq.axonserver.grpc,ClientComponent,3,1,0,1,0,false,PlatformServiceGrpc.PlatformServiceImplBase ,AxonServerClientService ,InstructionConsumer ClientComponent ,clientStreamId: String clientId: String component: String context: String ,isUnsupportedInstructionErrorResult{ Params : InstructionAck Returns : boolean} getPlatformServer{ Params : ClientIdentification,StreamObserver<PlatformInfo> Returns : void} openStream{ Params : StreamObserver<PlatformOutboundInstruction> Returns : StreamObserver<PlatformInboundInstruction>} consume{ Params : PlatformInboundInstruction Returns : void} sender{ Params :  Returns : String} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} requestReconnect{ Params : ClientComponent,String Returns : boolean} requestReconnect{ Params : String,String Returns : boolean} sendToClientStreamId{ Params : String,PlatformOutboundInstruction Returns : void} sendToClient{ Params : String,String,PlatformOutboundInstruction Returns : void} on{ Params : ApplicationDisconnected Returns : void} onInboundInstruction{ Params : RequestCase,InstructionConsumer Returns : void} registerClient{ Params : ClientComponent,SendingStreamObserver<PlatformOutboundInstruction> Returns : void} deregisterClient{ Params : ClientComponent,String Returns : void} deregisterClient{ Params : ClientComponent,Throwable Returns : void} on{ Params : ApplicationInactivityTimeout Returns : void} getConnectedClients{ Params :  Returns : Set<ClientComponent>} requestReconnectForContext{ Params : String,String Returns : void} accept{ Params : ClientComponent,PlatformInboundInstruction Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} getComponent{ Params :  Returns : String} getContext{ Params :  Returns : String} toString{ Params :  Returns : String} compareTo{ Params : ClientComponent Returns : int} ,getPlatformServer openStream consume sender onError onCompleted equals hashCode toString compareTo ,,,,Comparable ,String ,,String ,,clientStreamId: , o.clientStreamId
axon-server-se-master,io.axoniq.axonserver.grpc,Publisher,2,1,0,0,0,true,PlatformServiceGrpc.PlatformServiceImplBase ,AxonServerClientService ,0 ,,publish{ Params : T Returns : void} ,,,,,,,,,,clientStreamId: , o.clientStreamId
axon-server-se-master,io.axoniq.axonserver.grpc,QueryRequestValidator,2,1,0,0,0,true,PlatformServiceGrpc.PlatformServiceImplBase ,AxonServerClientService ,0 ,,validate{ Params : QueryInstruction.Query,QueryDispatcher,Logger Returns : SerializedQuery} ,,,,,,,,,,serializedQuery: , remainingTime
axon-server-se-master,io.axoniq.axonserver.grpc,QueryService,1,1,0,0,0,false,QueryServiceGrpc.QueryServiceImplBase ,AxonServerClientService ,GrpcQueryResponseConsumer ,topology: Topology queryDispatcher: QueryDispatcher contextProvider: ContextProvider authenticationProvider: AuthenticationProvider clientIdRegistry: ClientIdRegistry subscriptionQueryInterceptors: SubscriptionQueryInterceptors eventPublisher: ApplicationEventPublisher logger: Logger dispatcherListeners: Map<ClientStreamIdentification, GrpcQueryDispatcherListener> instructionAckSource: InstructionAckSource<QueryProviderInbound> grpcFlowControlExecutorProvider: GrpcFlowControlExecutorProvider processingThreads: int ,cleanup{ Params :  Returns : void} openStream{ Params : StreamObserver<QueryProviderInbound> Returns : StreamObserver<QueryProviderOutbound>} consume{ Params : QueryProviderOutbound Returns : void} flowControl{ Params : FlowControl Returns : void} initClientReference{ Params : String Returns : void} checkInitClient{ Params : String,String Returns : void} sender{ Params :  Returns : String} onError{ Params : Throwable Returns : void} cleanup{ Params :  Returns : void} onCompleted{ Params :  Returns : void} isUnsupportedInstructionErrorResult{ Params : InstructionAck Returns : boolean} unsubscribeMessage{ Params : String Returns : QueryProviderInbound} query{ Params : QueryRequest,StreamObserver<QueryResponse> Returns : void} subscription{ Params : StreamObserver<SubscriptionQueryResponse> Returns : StreamObserver<SubscriptionQueryRequest>} listeners{ Params :  Returns : Set<GrpcQueryDispatcherListener>} onNext{ Params : QueryResponse Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} isReady{ Params :  Returns : boolean} setOnReadyHandler{ Params : Runnable Returns : void} disableAutoInboundFlowControl{ Params :  Returns : void} request{ Params : int Returns : void} setMessageCompression{ Params : boolean Returns : void} completeStreamForInactivity{ Params : String,ClientStreamIdentification Returns : void} ,openStream consume sender onError onCompleted query subscription onNext onError onCompleted isReady setOnReadyHandler disableAutoInboundFlowControl request setMessageCompression ,,,,AxonServerClientService ,int ,,int ,ConcurrentHashMap SendingStreamObserver ReceivingStreamObserver AtomicReference AtomicReference AtomicReference AtomicReference SubscribeQuery UnsubscribeQuery SubscriptionQueryResponseReceived GrpcQueryDispatcherListener ClientStreamIdentification ClientContext DirectQueryHandler QueryHandlerDisconnected FlowControlledOutgoingStream GrpcQueryResponseConsumer SerializedQuery SubscriptionQueryRequestTarget HashSet SendingStreamObserver ApplicationInactivityException QueryHandlerDisconnected ,clientStreamIdentification: 
axon-server-se-master,io.axoniq.axonserver.grpc,GrpcQueryResponseConsumer,3,2,0,0,0,false,QueryServiceGrpc.QueryServiceImplBase ,AxonServerClientService ,GrpcQueryResponseConsumer ,responseObserver: SendingStreamObserver<QueryResponse> original: CallStreamObserver<QueryResponse> ,cleanup{ Params :  Returns : void} openStream{ Params : StreamObserver<QueryProviderInbound> Returns : StreamObserver<QueryProviderOutbound>} consume{ Params : QueryProviderOutbound Returns : void} flowControl{ Params : FlowControl Returns : void} initClientReference{ Params : String Returns : void} checkInitClient{ Params : String,String Returns : void} sender{ Params :  Returns : String} onError{ Params : Throwable Returns : void} cleanup{ Params :  Returns : void} onCompleted{ Params :  Returns : void} isUnsupportedInstructionErrorResult{ Params : InstructionAck Returns : boolean} unsubscribeMessage{ Params : String Returns : QueryProviderInbound} query{ Params : QueryRequest,StreamObserver<QueryResponse> Returns : void} subscription{ Params : StreamObserver<SubscriptionQueryResponse> Returns : StreamObserver<SubscriptionQueryRequest>} listeners{ Params :  Returns : Set<GrpcQueryDispatcherListener>} onNext{ Params : QueryResponse Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} isReady{ Params :  Returns : boolean} setOnReadyHandler{ Params : Runnable Returns : void} disableAutoInboundFlowControl{ Params :  Returns : void} request{ Params : int Returns : void} setMessageCompression{ Params : boolean Returns : void} completeStreamForInactivity{ Params : String,ClientStreamIdentification Returns : void} ,openStream consume sender onError onCompleted query subscription onNext onError onCompleted isReady setOnReadyHandler disableAutoInboundFlowControl request setMessageCompression ,,,,,CallStreamObserver<QueryResponse> ,,CallStreamObserver<QueryResponse> ,SendingStreamObserver ,original: , enable
axon-server-se-master,io.axoniq.axonserver.grpc,ReceivingStreamObserver,1,1,1,0,0,false,0 ,StreamObserver<T> ,0 ,logger: Logger ,onNext{ Params : T Returns : void} consume{ Params : T Returns : void} sender{ Params :  Returns : String} ,onNext ,,,consume sender ,StreamObserver ,Logger ,,Logger ,,: 
axon-server-se-master,io.axoniq.axonserver.grpc,SendingStreamObserver,1,1,0,0,0,false,0 ,StreamObserver<T> ,0 ,delegate: StreamObserver<T> logger: Logger ,onNext{ Params : T Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} ,onNext onError onCompleted ,,,,StreamObserver ,,,,MessagingPlatformException ,logger: , "Failed to complete connection", t
axon-server-se-master,io.axoniq.axonserver.grpc,SerializedCommand,1,1,0,0,0,false,0 ,0 ,0 ,clientStreamId: String messageId: String serializedData: byte command: Command ,getDefaultInstance{ Params :  Returns : SerializedCommand} getSerializedSize{ Params :  Returns : int} toByteArray{ Params :  Returns : byte[]} wrapped{ Params :  Returns : Command} toByteString{ Params :  Returns : ByteString} getMessageIdentifier{ Params :  Returns : String} getName{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} getCommand{ Params :  Returns : String} getRoutingKey{ Params :  Returns : String} getPriority{ Params :  Returns : long} ,,getDefaultInstance ,,,,Command ,,Command ,SerializedCommand RuntimeException ,: 
axon-server-se-master,io.axoniq.axonserver.grpc,SerializedCommandProviderInbound,1,1,0,0,0,false,SerializedMessage<CommandProviderInbound> ,0 ,Builder ,DEFAULT_INSTANCE: SerializedCommandProviderInbound wrapped: CommandProviderInbound serializedCommand: SerializedCommand acknowledgement: InstructionAck ,getDefaultInstance{ Params :  Returns : SerializedCommandProviderInbound} newBuilder{ Params :  Returns : Builder} getParserForType{ Params :  Returns : Parser<? extends Message>} parsePartialFrom{ Params : CodedInputStream,ExtensionRegistryLite Returns : Message} writeTo{ Params : CodedOutputStream Returns : void} newBuilderForType{ Params :  Returns : Message.Builder} toBuilder{ Params :  Returns : Message.Builder} getDefaultInstanceForType{ Params :  Returns : Message} wrapped{ Params :  Returns : CommandProviderInbound} getInstructionResult{ Params :  Returns : InstructionAckOrBuilder} getSerializedCommand{ Params :  Returns : SerializedCommand} internalGetFieldAccessorTable{ Params :  Returns : GeneratedMessageV3.FieldAccessorTable} build{ Params :  Returns : SerializedCommandProviderInbound} buildPartial{ Params :  Returns : SerializedCommandProviderInbound} getDefaultInstanceForType{ Params :  Returns : Message} setCommand{ Params : SerializedCommand Returns : Builder} setAcknowledgement{ Params : InstructionAck Returns : Builder} ,getParserForType parsePartialFrom writeTo newBuilderForType toBuilder getDefaultInstanceForType internalGetFieldAccessorTable build buildPartial getDefaultInstanceForType ,getDefaultInstance newBuilder ,,,,InstructionAck ,,InstructionAck ,SerializedCommandProviderInbound SerializedCommand Builder AbstractParser SerializedCommandProviderInbound InvalidProtocolBufferException Builder SerializedCommandProviderInbound ,builder: 
axon-server-se-master,io.axoniq.axonserver.grpc,Builder,3,1,0,1,0,false,SerializedMessage<CommandProviderInbound> ,0 ,Builder ,serializedCommand: SerializedCommand acknowledgement: InstructionAck ,getDefaultInstance{ Params :  Returns : SerializedCommandProviderInbound} newBuilder{ Params :  Returns : Builder} getParserForType{ Params :  Returns : Parser<? extends Message>} parsePartialFrom{ Params : CodedInputStream,ExtensionRegistryLite Returns : Message} writeTo{ Params : CodedOutputStream Returns : void} newBuilderForType{ Params :  Returns : Message.Builder} toBuilder{ Params :  Returns : Message.Builder} getDefaultInstanceForType{ Params :  Returns : Message} wrapped{ Params :  Returns : CommandProviderInbound} getInstructionResult{ Params :  Returns : InstructionAckOrBuilder} getSerializedCommand{ Params :  Returns : SerializedCommand} internalGetFieldAccessorTable{ Params :  Returns : GeneratedMessageV3.FieldAccessorTable} build{ Params :  Returns : SerializedCommandProviderInbound} buildPartial{ Params :  Returns : SerializedCommandProviderInbound} getDefaultInstanceForType{ Params :  Returns : Message} setCommand{ Params : SerializedCommand Returns : Builder} setAcknowledgement{ Params : InstructionAck Returns : Builder} ,getParserForType parsePartialFrom writeTo newBuilderForType toBuilder getDefaultInstanceForType internalGetFieldAccessorTable build buildPartial getDefaultInstanceForType ,getDefaultInstance newBuilder ,,,,InstructionAck ,,InstructionAck ,SerializedCommandProviderInbound ,builder: 
axon-server-se-master,io.axoniq.axonserver.grpc,SerializedCommandResponse,1,1,0,0,0,false,SerializedMessage<CommandResponse> ,0 ,Builder ,requestIdentifier: String wrapped: CommandResponse serializedData: byte ,getDefaultInstance{ Params :  Returns : SerializedCommandResponse} wrapped{ Params :  Returns : CommandResponse} writeTo{ Params : CodedOutputStream Returns : void} getSerializedSize{ Params :  Returns : int} toByteArray{ Params :  Returns : byte[]} getParserForType{ Params :  Returns : Parser<? extends Message>} parsePartialFrom{ Params : CodedInputStream,ExtensionRegistryLite Returns : Message} newBuilderForType{ Params :  Returns : Message.Builder} toBuilder{ Params :  Returns : Message.Builder} getDefaultInstanceForType{ Params :  Returns : Message} getRequestIdentifier{ Params :  Returns : String} toByteString{ Params :  Returns : ByteString} getErrorCode{ Params :  Returns : String} internalGetFieldAccessorTable{ Params :  Returns : GeneratedMessageV3.FieldAccessorTable} build{ Params :  Returns : Message} buildPartial{ Params :  Returns : Message} getDefaultInstanceForType{ Params :  Returns : Message} setCommandResponse{ Params : CommandResponse Returns : Builder} ,wrapped writeTo getSerializedSize toByteArray getParserForType parsePartialFrom newBuilderForType toBuilder getDefaultInstanceForType toByteString internalGetFieldAccessorTable build buildPartial getDefaultInstanceForType ,getDefaultInstance ,,,,byte[] ,,byte[] ,SerializedCommandResponse RuntimeException AbstractParser SerializedCommandResponse InvalidProtocolBufferException Builder Builder SerializedCommandResponse SerializedCommandResponse ,: 
axon-server-se-master,io.axoniq.axonserver.grpc,Builder,3,1,0,1,0,false,SerializedMessage<CommandResponse> ,0 ,Builder ,commandResponse: CommandResponse ,getDefaultInstance{ Params :  Returns : SerializedCommandResponse} wrapped{ Params :  Returns : CommandResponse} writeTo{ Params : CodedOutputStream Returns : void} getSerializedSize{ Params :  Returns : int} toByteArray{ Params :  Returns : byte[]} getParserForType{ Params :  Returns : Parser<? extends Message>} parsePartialFrom{ Params : CodedInputStream,ExtensionRegistryLite Returns : Message} newBuilderForType{ Params :  Returns : Message.Builder} toBuilder{ Params :  Returns : Message.Builder} getDefaultInstanceForType{ Params :  Returns : Message} getRequestIdentifier{ Params :  Returns : String} toByteString{ Params :  Returns : ByteString} getErrorCode{ Params :  Returns : String} internalGetFieldAccessorTable{ Params :  Returns : GeneratedMessageV3.FieldAccessorTable} build{ Params :  Returns : Message} buildPartial{ Params :  Returns : Message} getDefaultInstanceForType{ Params :  Returns : Message} setCommandResponse{ Params : CommandResponse Returns : Builder} ,wrapped writeTo getSerializedSize toByteArray getParserForType parsePartialFrom newBuilderForType toBuilder getDefaultInstanceForType toByteString internalGetFieldAccessorTable build buildPartial getDefaultInstanceForType ,getDefaultInstance ,,,,CommandResponse ,,CommandResponse ,SerializedCommandResponse SerializedCommandResponse ,: 
axon-server-se-master,io.axoniq.axonserver.grpc,SerializedMessage,1,1,1,0,0,false,AbstractMessage ,0 ,0 ,,wrapped{ Params :  Returns : T} getDescriptorForType{ Params :  Returns : Descriptors.Descriptor} getAllFields{ Params :  Returns : Map<Descriptors.FieldDescriptor,Object>} hasField{ Params : Descriptors.FieldDescriptor Returns : boolean} getField{ Params : Descriptors.FieldDescriptor Returns : Object} getRepeatedFieldCount{ Params : Descriptors.FieldDescriptor Returns : int} getRepeatedField{ Params : Descriptors.FieldDescriptor,int Returns : Object} getUnknownFields{ Params :  Returns : UnknownFieldSet} ,getDescriptorForType getAllFields hasField getField getRepeatedFieldCount getRepeatedField getUnknownFields ,,,wrapped ,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.grpc,SerializedQuery,1,1,0,0,0,false,0 ,0 ,0 ,clientStreamId: String context: String query: QueryRequest serializedData: byte ,withClient{ Params : String Returns : SerializedQuery} query{ Params :  Returns : QueryRequest} context{ Params :  Returns : String} clientStreamId{ Params :  Returns : String} toByteString{ Params :  Returns : ByteString} withTimeout{ Params : long Returns : SerializedQuery} getMessageIdentifier{ Params :  Returns : String} ,,,,,,byte[] ,,byte[] ,SerializedQuery RuntimeException SerializedQuery ,: 
axon-server-se-master,io.axoniq.axonserver.grpc.stream,CallStreamObserverDelegator,1,1,1,0,0,false,CallStreamObserver<T> ,0 ,0 ,delegate: CallStreamObserver<T> ,delegate{ Params :  Returns : CallStreamObserver<T>} isReady{ Params :  Returns : boolean} setOnReadyHandler{ Params : Runnable Returns : void} disableAutoInboundFlowControl{ Params :  Returns : void} request{ Params : int Returns : void} setMessageCompression{ Params : boolean Returns : void} onNext{ Params : T Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} ,,,,,,CallStreamObserver<T> ,,CallStreamObserver<T> ,,this: 
axon-server-se-master,io.axoniq.axonserver.grpc,SubscriptionQueryRequestTarget,1,1,0,0,0,false,ReceivingStreamObserver<SubscriptionQueryRequest> ,0 ,QueryResponseStreamObserver ,logger: Logger context: String subscriptionQueryInterceptors: SubscriptionQueryInterceptors responseObserver: QueryResponseStreamObserver eventPublisher: ApplicationEventPublisher subscriptionQuery: AtomicReference<SubscriptionQuery> updateHandler: UpdateHandler errorHandler: Consumer<Throwable> executionContext: DefaultExecutionContext clientId: String ,consume{ Params : SubscriptionQueryRequest Returns : void} sender{ Params :  Returns : String} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} unsubscribe{ Params :  Returns : void} onNext{ Params : SubscriptionQueryResponse Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} addPermits{ Params : long Returns : void} ,consume sender onError onCompleted onNext onError onCompleted ,,,,,String ,,String ,AtomicReference DefaultExecutionContext QueryResponseStreamObserver FlowControlledStreamObserver DirectUpdateHandler SubscriptionQueryRequested IllegalStateException SubscriptionQueryInitialResultRequested SubscriptionQueryCanceled ,eventPublisher: , new SubscriptionQueryCanceled(context, query)
axon-server-se-master,io.axoniq.axonserver.grpc,QueryResponseStreamObserver,3,2,0,0,0,false,ReceivingStreamObserver<SubscriptionQueryRequest> ,0 ,QueryResponseStreamObserver ,delegate: FlowControlledStreamObserver<SubscriptionQueryResponse> ,consume{ Params : SubscriptionQueryRequest Returns : void} sender{ Params :  Returns : String} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} unsubscribe{ Params :  Returns : void} onNext{ Params : SubscriptionQueryResponse Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} addPermits{ Params : long Returns : void} ,consume sender onError onCompleted onNext onError onCompleted ,,,,StreamObserver ,FlowControlledStreamObserver<SubscriptionQueryResponse> ,,FlowControlledStreamObserver<SubscriptionQueryResponse> ,,delegate: , numberOfPermits
axon-server-se-master,io.axoniq.axonserver.interceptor,CommandInterceptors,2,1,0,0,0,true,ReceivingStreamObserver<SubscriptionQueryRequest> ,0 ,0 ,,commandRequest{ Params : SerializedCommand,ExecutionContext Returns : SerializedCommand} commandResponse{ Params : SerializedCommandResponse,ExecutionContext Returns : SerializedCommandResponse} ,,,,,,,,,,delegate: , numberOfPermits
axon-server-se-master,io.axoniq.axonserver.interceptor,DefaultCommandInterceptors,1,1,0,0,0,false,0 ,CommandInterceptors ,0 ,pluginContextFilter: PluginContextFilter interceptorTimer: InterceptorTimer ,commandRequest{ Params : SerializedCommand,ExecutionContext Returns : SerializedCommand} commandResponse{ Params : SerializedCommandResponse,ExecutionContext Returns : SerializedCommandResponse} ,commandRequest commandResponse ,,,,CommandInterceptors ,InterceptorTimer ,,InterceptorTimer ,InterceptorTimer MessagingPlatformException MessagingPlatformException SerializedCommand MessagingPlatformException SerializedCommandResponse ,commandResponseInterceptor: 
axon-server-se-master,io.axoniq.axonserver.interceptor,DefaultEventInterceptors,1,1,0,0,0,false,0 ,EventInterceptors ,0 ,logger: Logger pluginContextFilter: PluginContextFilter interceptorTimer: InterceptorTimer ,interceptEvent{ Params : Event,ExecutionContext Returns : Event} interceptEventsPreCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptEventsPostCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptSnapshotPostCommit{ Params : Event,ExecutionContext Returns : void} interceptSnapshot{ Params : Event,ExecutionContext Returns : Event} noReadInterceptors{ Params : String Returns : boolean} readSnapshot{ Params : Event,ExecutionContext Returns : Event} readEvent{ Params : Event,ExecutionContext Returns : Event} mergeEvent{ Params : Event,Event Returns : Event} noEventReadInterceptors{ Params : String Returns : boolean} noSnapshotReadInterceptors{ Params : String Returns : boolean} ,interceptEvent interceptEventsPreCommit interceptEventsPostCommit interceptSnapshotPostCommit interceptSnapshot noReadInterceptors readSnapshot readEvent noEventReadInterceptors noSnapshotReadInterceptors ,,,,EventInterceptors ,InterceptorTimer ,,InterceptorTimer ,InterceptorTimer MessagingPlatformException MessagingPlatformException MessagingPlatformException PostCommitHookException PostCommitHookException MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException ,pluginContextFilter: , ReadSnapshotInterceptor.class, context
axon-server-se-master,io.axoniq.axonserver.interceptor,DefaultExecutionContext,1,1,0,0,0,false,0 ,ExecutionContext ,0 ,logger: Logger context: String principal: Authentication compensatingActions: List<BiConsumer<Throwable, ExecutionContext>> details: Map<String, Object> ,contextName{ Params :  Returns : String} principal{ Params :  Returns : String} principalRoles{ Params :  Returns : Set<String>} principalTags{ Params :  Returns : Map<String,String>} onFailure{ Params : BiConsumer<Throwable,ExecutionContext> Returns : void} compensate{ Params : Throwable Returns : void} putAttribute{ Params : String,Object Returns : void} getAttribute{ Params : String Returns : Object} ,contextName principal principalRoles principalTags onFailure putAttribute getAttribute ,,,,ExecutionContext ,Map<String,Object> ,,Map<String,Object> ,LinkedList HashMap ,details: , key
axon-server-se-master,io.axoniq.axonserver.interceptor,DefaultQueryInterceptors,1,1,0,0,0,false,0 ,QueryInterceptors ,0 ,logger: Logger pluginContextFilter: PluginContextFilter interceptorTimer: InterceptorTimer ,queryRequest{ Params : SerializedQuery,ExecutionContext Returns : SerializedQuery} queryResponse{ Params : QueryResponse,ExecutionContext Returns : QueryResponse} ,queryRequest queryResponse ,,,,QueryInterceptors ,InterceptorTimer ,,InterceptorTimer ,InterceptorTimer MessagingPlatformException MessagingPlatformException SerializedQuery MessagingPlatformException ,queryResponseInterceptor: 
axon-server-se-master,io.axoniq.axonserver.interceptor,DefaultSubscriptionQueryInterceptors,1,1,0,0,0,false,0 ,SubscriptionQueryInterceptors ,0 ,pluginContextFilter: PluginContextFilter interceptorTimer: InterceptorTimer ,subscriptionQueryRequest{ Params : SubscriptionQueryRequest,ExecutionContext Returns : SubscriptionQueryRequest} subscriptionQueryResponse{ Params : SubscriptionQueryResponse,ExecutionContext Returns : SubscriptionQueryResponse} ,subscriptionQueryRequest subscriptionQueryResponse ,,,,SubscriptionQueryInterceptors ,InterceptorTimer ,,InterceptorTimer ,InterceptorTimer MessagingPlatformException MessagingPlatformException MessagingPlatformException ,queryRequestInterceptor: 
axon-server-se-master,io.axoniq.axonserver.interceptor,EventInterceptors,2,1,0,0,0,true,0 ,SubscriptionQueryInterceptors ,0 ,,interceptEvent{ Params : Event,ExecutionContext Returns : Event} interceptSnapshot{ Params : Event,ExecutionContext Returns : Event} interceptEventsPreCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptEventsPostCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptSnapshotPostCommit{ Params : Event,ExecutionContext Returns : void} readSnapshot{ Params : Event,ExecutionContext Returns : Event} readEvent{ Params : Event,ExecutionContext Returns : Event} noReadInterceptors{ Params : String Returns : boolean} noEventReadInterceptors{ Params : String Returns : boolean} noSnapshotReadInterceptors{ Params : String Returns : boolean} ,,,,,,,,,,queryRequestInterceptor: 
axon-server-se-master,io.axoniq.axonserver.interceptor,InterceptorTimer,1,1,0,0,0,false,0 ,0 ,0 ,meterFactory: MeterFactory ,time{ Params : String,String,Supplier<R> Returns : R} time{ Params : String,String,Runnable Returns : void} record{ Params : String,String,long Returns : void} ,,,,,,MeterFactory ,,MeterFactory ,,timer: , millis, TimeUnit.MILLISECONDS
axon-server-se-master,io.axoniq.axonserver.interceptor,PluginContextFilter,1,1,0,0,0,false,0 ,0 ,0 ,interceptorClasses: Class<? extends Ordered> logger: Logger enabledPluginsPerContext: Map<String, Map<String, String>> pluginServiceProvider: PluginServiceProvider serviceMap: Map<Class<? extends Ordered>, List<ServiceWithInfo<Ordered>>> enabled: boolean initialized: boolean ,ensureInitialized{ Params :  Returns : void} initHooks{ Params : Class<T> Returns : List<ServiceWithInfo<T>>} getServicesWithInfoForContext{ Params : Class<T>,String Returns : List<ServiceWithInfo<T>>} getServicesForContext{ Params : Class<T>,String Returns : List<T>} on{ Params : PluginEnabledEvent Returns : void} ,,,,,,boolean ,,boolean ,ConcurrentHashMap HashMap ArrayList ArrayList ArrayList ConcurrentHashMap ,pluginEnabledEvent: 
axon-server-se-master,io.axoniq.axonserver.interceptor,PluginEnabledEvent,1,1,0,0,0,false,0 ,0 ,0 ,context: String plugin: PluginKey configuration: Map<String, Map<String, Object>> enabled: boolean ,context{ Params :  Returns : String} plugin{ Params :  Returns : PluginKey} enabled{ Params :  Returns : boolean} configuration{ Params :  Returns : Map<String,Map<String,Object>>} ,,,,,,boolean ,,boolean ,,pluginEnabledEvent: 
axon-server-se-master,io.axoniq.axonserver.interceptor,PluginRemovedEvent,1,1,0,0,0,false,0 ,0 ,0 ,context: String plugin: PluginKey ,context{ Params :  Returns : String} plugin{ Params :  Returns : PluginKey} ,,,,,,PluginKey ,,PluginKey ,,pluginEnabledEvent: 
axon-server-se-master,io.axoniq.axonserver.interceptor,QueryInterceptors,2,1,0,0,0,true,0 ,0 ,0 ,,queryRequest{ Params : SerializedQuery,ExecutionContext Returns : SerializedQuery} queryResponse{ Params : QueryResponse,ExecutionContext Returns : QueryResponse} ,,,,,,,,,,pluginEnabledEvent: 
axon-server-se-master,io.axoniq.axonserver.interceptor,SubscriptionQueryInterceptors,2,1,0,0,0,true,0 ,0 ,0 ,,subscriptionQueryRequest{ Params : SubscriptionQueryRequest,ExecutionContext Returns : SubscriptionQueryRequest} subscriptionQueryResponse{ Params : SubscriptionQueryResponse,ExecutionContext Returns : SubscriptionQueryResponse} ,,,,,,,,,,pluginEnabledEvent: 
axon-server-se-master,io.axoniq.axonserver,LicenseAccessController,2,1,0,0,0,true,0 ,0 ,0 ,,allowed{ Params :  Returns : boolean} ,,,,,,,,,,pluginEnabledEvent: 
axon-server-se-master,io.axoniq.axonserver,LifecycleController,1,1,0,0,0,false,0 ,0 ,0 ,EVENT_STORE_SERVER_PID: String logger: Logger cleanShutdown: boolean path: Path applicationContext: ApplicationContext ,checkAndCreatePidFile{ Params :  Returns : void} removePidFile{ Params :  Returns : void} isCleanShutdown{ Params :  Returns : boolean} setCleanShutdown{ Params :  Returns : void} getPath{ Params :  Returns : Path} abort{ Params :  Returns : void} licenseError{ Params : String Returns : void} ,,,,,,ApplicationContext ,,ApplicationContext ,,System: , 1
axon-server-se-master,io.axoniq.axonserver,LimitedBuffer,1,1,0,0,0,false,0 ,ConstraintCache<String,T> ,0 ,capacity: long bufferName: String fullBufferMessage: String buffer: ConcurrentMap<String, T> ,size{ Params :  Returns : int} remove{ Params : String Returns : T} get{ Params : String Returns : T} put{ Params : String,T Returns : T} entrySet{ Params :  Returns : Collection<Map.Entry<String,T>>} checkCapacity{ Params :  Returns : void} ,size remove get put entrySet ,,,,ConstraintCache ,ConcurrentMap<String,T> ,,ConcurrentMap<String,T> ,ConcurrentHashMap InsufficientBufferCapacityException ,buffer: 
axon-server-se-master,io.axoniq.axonserver.localstorage,AggregateReader,1,1,0,0,0,false,0 ,0 ,0 ,eventStorageEngine: EventStorageEngine snapshotReader: SnapshotReader ,readEvents{ Params : String,boolean,long,Consumer<SerializedEvent> Returns : void} readEvents{ Params : String,boolean,long,long,long,Consumer<SerializedEvent> Returns : void} readSnapshots{ Params : String,long,long,int,Consumer<SerializedEvent> Returns : void} readHighestSequenceNr{ Params : String Returns : long} readHighestSequenceNr{ Params : String,int,long Returns : long} events{ Params : String,boolean,long,long,long Returns : Flux<SerializedEvent>} snapshot{ Params : String,boolean,long,long Returns : Mono<SerializedEvent>} ,,,,,,SnapshotReader ,,SnapshotReader ,,Mono: 
axon-server-se-master,io.axoniq.axonserver.localstorage,AutoCloseableEventProvider,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger autocloseableDeadline: Duration scheduledDeadline: AtomicReference<ScheduledFuture<?>> executorService: ScheduledExecutorService iteratorRef: AtomicReference<CloseableIterator<SerializedEventWithToken>> iteratorFactory: Function<Long, CloseableIterator<SerializedEventWithToken>> ,event{ Params : long Returns : Mono<Event>} close{ Params :  Returns : Mono<Void>} readEvent{ Params : MonoSink<Event>,long Returns : void} cancelClosing{ Params :  Returns : void} scheduleClosing{ Params :  Returns : void} scheduleClosing{ Params : long Returns : void} iterator{ Params : long Returns : CloseableIterator<SerializedEventWithToken>} newIterator{ Params : long Returns : CloseableIterator<SerializedEventWithToken>} ,,,,,,Function<Long,CloseableIterator<SerializedEventWithToken>> ,,Function<Long,CloseableIterator<SerializedEventWithToken>> ,AtomicReference AtomicReference ,iteratorRef: 
axon-server-se-master,io.axoniq.axonserver.localstorage,ContextEventProviderSupplier,2,1,0,0,0,true,0 ,0 ,0 ,,eventProviderFor{ Params : String Returns : EventProvider} ,,,,,,,,,,iteratorRef: 
axon-server-se-master,io.axoniq.axonserver.localstorage,DataFetcherSchedulerProvider,1,1,0,0,0,false,0 ,Supplier<ExecutorService> ,0 ,dataFetcher: ExecutorService ,setDataFetcher{ Params : ExecutorService Returns : void} get{ Params :  Returns : ExecutorService} ,get ,setDataFetcher ,,,Supplier ,,setDataFetcher ,,CustomizableThreadFactory ,Executors: , 24, new CustomizableThreadFactory("data-fetcher-")
axon-server-se-master,io.axoniq.axonserver.localstorage,DefaultEventDecorator,1,1,0,0,0,false,0 ,EventDecorator ,0 ,,,,,,,EventDecorator ,,,,,null
axon-server-se-master,io.axoniq.axonserver.localstorage,EventDecorator,2,1,0,0,0,true,0 ,EventDecorator ,0 ,,decorateEvent{ Params : SerializedEvent Returns : SerializedEvent} decorateEventWithToken{ Params : SerializedEventWithToken Returns : SerializedEventWithToken} decorateEventWithToken{ Params : EventWithToken Returns : EventWithToken} ,,,,,,,,,,Executors: , 24, new CustomizableThreadFactory("data-fetcher-")
axon-server-se-master,io.axoniq.axonserver.localstorage,EventStorageEngine,2,1,0,0,0,true,0 ,EventDecorator ,0 ,,init{ Params : boolean,long Returns : void} init{ Params : boolean Returns : void} getFirstCompletedSegment{ Params :  Returns : long} store{ Params : List<Event> Returns : CompletableFuture<Long>} store{ Params : List<Event>,int Returns : CompletableFuture<Long>} getLastToken{ Params :  Returns : long} getLastSequenceNumber{ Params : String,SearchHint Returns : Optional<Long>} getLastSequenceNumber{ Params : String,int,long Returns : Optional<Long>} close{ Params : boolean Returns : void} registerCloseListener{ Params : Runnable Returns : Registration} getLastEvent{ Params : String,long,long Returns : Optional<SerializedEvent>} eventsPerAggregate{ Params : String,long,long,long Returns : Flux<SerializedEvent>} processEventsPerAggregate{ Params : String,long,long,long,Consumer<SerializedEvent> Returns : void} processEventsPerAggregateHighestFirst{ Params : String,long,long,int,Consumer<SerializedEvent> Returns : void} getType{ Params :  Returns : EventTypeContext} transactionIterator{ Params : long,long Returns : CloseableIterator<SerializedTransactionWithToken>} query{ Params : QueryOptions,Predicate<EventWithToken> Returns : void} getBackupFilenames{ Params : long,int,boolean Returns : Stream<String>} getFirstToken{ Params :  Returns : long} getTokenAt{ Params : long Returns : long} getGlobalIterator{ Params : long Returns : CloseableIterator<SerializedEventWithToken>} transactionVersion{ Params :  Returns : byte} nextToken{ Params :  Returns : long} validateTransaction{ Params : long,List<Event> Returns : void} transformContents{ Params : int,Flux<EventWithToken> Returns : Flux<Long>} deleteOldVersions{ Params :  Returns : Mono<Void>} ,,,,,,,,,CompletableFuture UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,Mono: , new UnsupportedOperationException("deleteSegments: Operation not supported by this EventStorageEngine")
axon-server-se-master,io.axoniq.axonserver.localstorage,EventStoreFactory,2,1,0,0,0,true,0 ,EventDecorator ,0 ,,createEventStorageEngine{ Params : String Returns : EventStorageEngine} createSnapshotStorageEngine{ Params : String Returns : EventStorageEngine} ,,,,,,,,,,Mono: , new UnsupportedOperationException("deleteSegments: Operation not supported by this EventStorageEngine")
axon-server-se-master,io.axoniq.axonserver.localstorage,EventStreamReader,1,1,0,0,0,false,0 ,0 ,0 ,eventStorageEngine: EventStorageEngine ,query{ Params : QueryOptions,Predicate<EventWithToken> Returns : void} getFirstToken{ Params :  Returns : long} getTokenAt{ Params : long Returns : long} getLastToken{ Params :  Returns : long} ,,,,,,EventStorageEngine ,,EventStorageEngine ,,eventStorageEngine: 
axon-server-se-master,io.axoniq.axonserver.localstorage,EventTypeContext,1,1,0,0,0,false,0 ,0 ,0 ,context: String eventType: EventType ,getContext{ Params :  Returns : String} getEventType{ Params :  Returns : EventType} isEvent{ Params :  Returns : boolean} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,equals hashCode toString ,,,,,EventType ,,EventType ,,Objects: , context, eventType
axon-server-se-master,io.axoniq.axonserver.localstorage,EventWriteStorage,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger listeners: Map<String, BiConsumer<Long, List<Event>>> storageTransactionManager: StorageTransactionManager ,storeBatch{ Params : List<Event> Returns : Mono<Void>} eventsStored{ Params : BiConsumer<Long,List<Event>>,Long,List<Event> Returns : void} reserveSequences{ Params : List<Event> Returns : Runnable} registerEventListener{ Params : BiConsumer<Long,List<Event>> Returns : Registration} waitingTransactions{ Params :  Returns : long} cancelPendingTransactions{ Params :  Returns : void} clearSequenceNumberCache{ Params :  Returns : void} ,,,,,,StorageTransactionManager ,,StorageTransactionManager ,ConcurrentHashMap ,storageTransactionManager: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,AbstractFileStorageTier,1,1,1,0,0,false,0 ,StorageTier ,0 ,TRANSACTION_VERSION: byte logger: Logger VERSION_BYTES: int FILE_OPTIONS_BYTES: int TX_CHECKSUM_BYTES: int EVENT_FORMAT_VERSION: byte TRANSACTION_LENGTH_BYTES: int NUMBER_OF_EVENTS_BYTES: int HEADER_BYTES: int FILE_HEADER_SIZE: int FILE_FOOTER_SIZE: int MAX_TRANSACTION_SIZE: int context: String indexManager: IndexManager storagePropertiesSupplier: Supplier<StorageProperties> eventTypeContext: EventTypeContext segments: NavigableMap<Long, Integer> nextSegmentsHandler: Supplier<StorageTier> fileOpenMeter: Counter storagePath: String initialized: AtomicBoolean ,latestSequenceNumbers{ Params : FileVersion Returns : Stream<AggregateSequence>} last{ Params : FileVersion,AggregateIndexEntries Returns : AggregateSequence} readSerializedEvent{ Params : long,long,SegmentIndexEntries Returns : Optional<SerializedEvent>} currentSegmentVersion{ Params : Long Returns : Integer} activateSegmentVersion{ Params : long,int Returns : void} versions{ Params : long,int Returns : Set<Integer>} allSegments{ Params :  Returns : Stream<Long>} initSegments{ Params : long Returns : void} prepareSegmentStore{ Params : long Returns : Map<Long,Integer>} segmentsWithoutIndex{ Params :  Returns : SortedSet<FileVersion>} getBackupFilenames{ Params : long,int Returns : Stream<String>} renameFileIfNecessary{ Params : long Returns : void} dataFile{ Params : FileVersion Returns : File} renameMessage{ Params : File,File Returns : String} localEventSource{ Params : FileVersion Returns : Optional<EventSource>} localEventSource{ Params : long Returns : Optional<EventSource>} eventSource{ Params : FileVersion Returns : Optional<EventSource>} eventSource{ Params : long Returns : Optional<EventSource>} getSegments{ Params :  Returns : SortedSet<Long>} getType{ Params :  Returns : EventTypeContext} applyOnNext{ Params : Consumer<StorageTier> Returns : void} invokeOnNext{ Params : Function<StorageTier,R>,R Returns : R} ,,,,localEventSource localEventSource ,StorageTier ,AtomicBoolean ,,AtomicBoolean ,ConcurrentSkipListMap AtomicBoolean AggregateSequence SegmentIndexEntries AggregateSequence RuntimeException HashSet FileVersion File FileVersion FileVersion TreeSet FileVersion FileVersion MessagingPlatformException MessagingPlatformException MessagingPlatformException ,action: , nextTier
axon-server-se-master,io.axoniq.axonserver.localstorage.file,AggregateIndexEntries,1,1,0,0,0,false,0 ,0 ,0 ,aggregateId: String entries: IndexEntries ,aggregateId{ Params :  Returns : String} entries{ Params :  Returns : IndexEntries} ,,,,,,IndexEntries ,,IndexEntries ,,action: , nextTier
axon-server-se-master,io.axoniq.axonserver.localstorage.file,AggregateSequence,1,1,0,0,0,false,0 ,0 ,0 ,aggregateId: String lastSequenceNumber: long ,aggregateId{ Params :  Returns : String} lastSequenceNumber{ Params :  Returns : long} ,,,,,,long ,,long ,,action: , nextTier
axon-server-se-master,io.axoniq.axonserver.localstorage.file,AppendOnlyList,1,1,0,0,0,false,AbstractList<T> ,0 ,Node ,LIST_IS_APPEND_ONLY: String head: Node<T> size: AtomicInteger last: AtomicReference<Node<T>> ,add{ Params : int,T Returns : void} addAll{ Params : int,Collection<? extends T> Returns : boolean} retainAll{ Params : Collection<?> Returns : boolean} remove{ Params : int Returns : T} sort{ Params : Comparator<? super T> Returns : void} set{ Params : int,T Returns : T} removeRange{ Params : int,int Returns : void} removeAll{ Params : Collection<?> Returns : boolean} replaceAll{ Params : UnaryOperator<T> Returns : void} removeIf{ Params : Predicate<? super T> Returns : boolean} last{ Params :  Returns : T} isEmpty{ Params :  Returns : boolean} iterator{ Params :  Returns : Iterator<T>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : T} remove{ Params :  Returns : void} size{ Params :  Returns : int} addAll{ Params : Collection<? extends T> Returns : boolean} add{ Params : T Returns : boolean} get{ Params : int Returns : T} add{ Params : Object[] Returns : Node} size{ Params :  Returns : int} get{ Params : int Returns : T} last{ Params :  Returns : T} ,add addAll retainAll remove sort set removeRange removeAll replaceAll removeIf iterator hasNext next remove size addAll add get ,,,,,AtomicReference<Node<T>> ,,AtomicReference<Node<T>> ,AtomicInteger AtomicReference Node UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException Iterator UnsupportedOperationException IndexOutOfBoundsException Node ,node: , index - pos
axon-server-se-master,io.axoniq.axonserver.localstorage.file,Node,3,2,0,1,0,false,AbstractList<T> ,0 ,Node ,values: Object next: Node<T> ,add{ Params : int,T Returns : void} addAll{ Params : int,Collection<? extends T> Returns : boolean} retainAll{ Params : Collection<?> Returns : boolean} remove{ Params : int Returns : T} sort{ Params : Comparator<? super T> Returns : void} set{ Params : int,T Returns : T} removeRange{ Params : int,int Returns : void} removeAll{ Params : Collection<?> Returns : boolean} replaceAll{ Params : UnaryOperator<T> Returns : void} removeIf{ Params : Predicate<? super T> Returns : boolean} last{ Params :  Returns : T} isEmpty{ Params :  Returns : boolean} iterator{ Params :  Returns : Iterator<T>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : T} remove{ Params :  Returns : void} size{ Params :  Returns : int} addAll{ Params : Collection<? extends T> Returns : boolean} add{ Params : T Returns : boolean} get{ Params : int Returns : T} add{ Params : Object[] Returns : Node} size{ Params :  Returns : int} get{ Params : int Returns : T} last{ Params :  Returns : T} ,add addAll retainAll remove sort set removeRange removeAll replaceAll removeIf iterator hasNext next remove size addAll add get ,,,,,Node<T> ,,Node<T> ,Node ,node: , index - pos
axon-server-se-master,io.axoniq.axonserver.localstorage.file,ByteBufferEventSource,1,1,0,0,0,false,0 ,EventSource ,0 ,eventTransformer: EventTransformer onClose: Runnable buffer: ByteBuffer main: boolean duplicatesCount: AtomicInteger path: String cleanerHack: boolean closed: AtomicBoolean version: int segment: long ,readEvent{ Params :  Returns : SerializedEvent} duplicate{ Params :  Returns : ByteBufferEventSource} version{ Params :  Returns : int} finalize{ Params :  Returns : void} readEvent{ Params : int Returns : SerializedEvent} createTransactionIterator{ Params : long,boolean Returns : TransactionIterator} createEventIterator{ Params : long Returns : EventIterator} segment{ Params :  Returns : long} getBuffer{ Params :  Returns : ByteBuffer} position{ Params :  Returns : int} clean{ Params : long Returns : void} close{ Params :  Returns : void} ,finalize createTransactionIterator createEventIterator segment close ,,,,EventSource ,long ,,long ,AtomicInteger AtomicBoolean SerializedEvent ByteBufferEventSource RuntimeException TransactionByteBufferIterator EventByteBufferIterator ,onClose: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,Checksum,1,1,0,0,0,false,0 ,0 ,0 ,crc32: CRC32 ,get{ Params :  Returns : int} update{ Params : byte[] Returns : Checksum} update{ Params : ByteBuffer,int,int Returns : Checksum} ,,,,,,CRC32 ,,CRC32 ,CRC32 IllegalArgumentException IllegalArgumentException ,buffer: , position + i
axon-server-se-master,io.axoniq.axonserver.localstorage.file,CleanUtils,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger cleanupExecutor: ScheduledExecutorService RETRIES: int java8: boolean ,newThread{ Params : Runnable Returns : Thread} cleanOldsJDK{ Params : ByteBuffer Returns : void} cleanJavaWithModules{ Params : java.nio.ByteBuffer Returns : void} cleanDirectBuffer{ Params : ByteBuffer,BooleanSupplier,long,String Returns : void} doCleanup{ Params : BooleanSupplier,ByteBuffer,long,String,int Returns : void} ,newThread ,cleanOldsJDK cleanJavaWithModules cleanDirectBuffer doCleanup ,,,,,,,DaemonThreadFactory ,logger: , "Clean failed", exception
axon-server-se-master,io.axoniq.axonserver.localstorage.file,DefaultSegmentTransformer,1,0,0,0,0,false,0 ,SegmentTransformer ,0 ,storageProperties: StorageProperties segment: long newVersion: int transactionIteratorRef: AtomicReference<TransactionIterator> segmentWriterRef: AtomicReference<SegmentWriter> tempFileRef: AtomicReference<File> originalTransactionRef: AtomicReference<SerializedTransactionWithToken> indexManager: IndexManager transactionIteratorSupplier: Supplier<TransactionIterator> storagePath: String transformedTransaction: List<Event> EMPTY_PAYLOAD: SerializedObject ,initialize{ Params :  Returns : Mono<Void>} transformEvent{ Params : EventWithToken Returns : Mono<Void>} completeSegment{ Params :  Returns : Mono<Void>} rollback{ Params : Throwable Returns : Mono<Void>} cancel{ Params :  Returns : Mono<Void>} segment{ Params :  Returns : long} closeTransactionIterator{ Params :  Returns : void} process{ Params : Supplier<Optional<EventWithToken>> Returns : Mono<Void>} transform{ Params : Event,Event Returns : Event} currentOrNextOriginalTransaction{ Params :  Returns : SerializedTransactionWithToken} write{ Params : List<Event> Returns : void} writeRemainingEvents{ Params :  Returns : void} ,initialize transformEvent completeSegment rollback cancel segment ,,,,SegmentTransformer ,,,,AtomicReference AtomicReference AtomicReference AtomicReference CopyOnWriteArrayList FileVersion StreamSegmentWriter ,Collectors: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,EmbeddedDBProperties,1,1,0,0,0,false,0 ,0 ,0 ,event: StorageProperties snapshot: StorageProperties ,getEvent{ Params :  Returns : StorageProperties} setEvent{ Params : StorageProperties Returns : void} getSnapshot{ Params :  Returns : StorageProperties} setSnapshot{ Params : StorageProperties Returns : void} ,,,,,,StorageProperties ,,StorageProperties ,StorageProperties StorageProperties ,Collectors: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,EventByteBufferIterator,1,1,0,0,0,false,EventIterator ,0 ,0 ,reader: ByteBuffer eventSource: ByteBufferEventSource ,forwardTo{ Params : long Returns : void} readPartialTransaction{ Params : short,short Returns : void} addEvent{ Params :  Returns : void} readTransaction{ Params :  Returns : boolean} doClose{ Params :  Returns : void} ,doClose ,,,,,ByteBufferEventSource ,,ByteBufferEventSource ,EventInformation SerializedEventWithToken MessagingPlatformException ,eventSource: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,EventInformation,1,1,0,0,0,false,0 ,0 ,0 ,position: int event: SerializedEventWithToken ,getToken{ Params :  Returns : long} getPosition{ Params :  Returns : int} isDomainEvent{ Params :  Returns : boolean} getEvent{ Params :  Returns : Event} asEventWithToken{ Params : boolean Returns : EventWithToken} getSerializedEventWithToken{ Params :  Returns : SerializedEventWithToken} ,,,,,,SerializedEventWithToken ,,SerializedEventWithToken ,,eventWithToken: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,EventIterator,1,1,1,0,0,false,0 ,Iterator<EventInformation> AutoCloseable ,0 ,currentSequenceNumber: long eventsInTransaction: List<EventInformation> closed: AtomicBoolean ,close{ Params :  Returns : void} doClose{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} tryReadTransaction{ Params :  Returns : boolean} readTransaction{ Params :  Returns : boolean} next{ Params :  Returns : EventInformation} pendingEvents{ Params :  Returns : List<EventInformation>} getTokenAt{ Params : long Returns : Long} ,hasNext next ,,,doClose readTransaction ,Iterator AutoCloseable ,AtomicBoolean ,,AtomicBoolean ,LinkedList AtomicBoolean IllegalStateException IllegalStateException NoSuchElementException ,event: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,EventSource,2,1,0,0,0,true,0 ,Iterator<EventInformation> AutoCloseable ,0 ,,readEvent{ Params : int Returns : SerializedEvent} close{ Params :  Returns : void} createTransactionIterator{ Params : long,boolean Returns : TransactionIterator} createEventIterator{ Params : long Returns : EventIterator} createEventIterator{ Params :  Returns : EventIterator} segment{ Params :  Returns : long} readLastInRange{ Params : long,long,List<Integer> Returns : SerializedEvent} ,,,,,,,,,,event: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,EventSourceFactory,2,1,0,0,0,true,0 ,Iterator<EventInformation> AutoCloseable ,0 ,,create{ Params :  Returns : Optional<EventSource>} ,,,,,,,,,,event: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,EventSourceFlux,1,1,0,0,0,false,0 ,Supplier<Flux<SerializedEvent>> ,0 ,logger: Logger indexEntries: IndexEntries eventSourceFactory: EventSourceFactory segment: long dataFetcherSchedulerProvider: Supplier<ExecutorService> prefetch: int ,get{ Params :  Returns : Flux<SerializedEvent>} openEventSource{ Params :  Returns : EventSource} ,get ,,,,Supplier ,int ,,int ,DataFetcherSchedulerProvider EventSourceNotFoundException ,optional: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,EventSourceNotFoundException,1,1,0,0,0,false,Exception ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.localstorage.file,FileEventStorageEngine,1,1,0,0,0,false,0 ,EventStorageEngine ,TransactionWithTokenIterator ,logger: Logger MAX_EVENTS_PER_BLOCK: int PREFETCH_SEGMENT_FILES: int head: WritableFileStorageTier closeListeners: Set<Runnable> storagePath: String context: EventTypeContext indexManager: IndexManager storagePropertiesSupplier: Supplier<StorageProperties> lastSequenceReadTimer: Timer aggregateSegmentsCount: DistributionSummary ,init{ Params : boolean,long Returns : void} validate{ Params : int Returns : void} validateSegment{ Params : long Returns : ValidationResult} getFirstCompletedSegment{ Params :  Returns : long} store{ Params : List<Event>,int Returns : CompletableFuture<Long>} getLastToken{ Params :  Returns : long} eventsPerAggregate{ Params : String,long,long,long Returns : Flux<SerializedEvent>} eventsForPositions{ Params : FileVersion,IndexEntries,int Returns : Flux<SerializedEvent>} processEventsPerAggregate{ Params : String,long,long,long,Consumer<SerializedEvent> Returns : void} getType{ Params :  Returns : EventTypeContext} getBackupFilenames{ Params : long,int,boolean Returns : Stream<String>} transactionVersion{ Params :  Returns : byte} nextToken{ Params :  Returns : long} close{ Params : boolean Returns : void} registerCloseListener{ Params : Runnable Returns : Registration} transformContents{ Params : int,Flux<EventWithToken> Returns : Flux<Long>} processEventsPerAggregateHighestFirst{ Params : String,long,long,int,Consumer<SerializedEvent> Returns : void} retrieveEventsForAnAggregate{ Params : FileVersion,List<Integer>,long,long,Consumer<SerializedEvent>,long Returns : int} query{ Params : QueryOptions,Predicate<EventWithToken> Returns : void} getLastSequenceNumber{ Params : String,SearchHint[] Returns : Optional<Long>} doTransformContents{ Params : int,Flux<EventWithToken> Returns : Flux<Long>} activateTransformation{ Params :  Returns : Mono<Void>} transformedSegmentVersions{ Params :  Returns : Flux<FileVersion>} fileVersions{ Params : String Returns : Flux<FileVersion>} activateSegment{ Params : FileVersion Returns : Mono<Void>} renameTransformedSegmentIfNeeded{ Params : FileVersion Returns : Mono<Void>} transformedDataFile{ Params : FileVersion Returns : File} deleteOldVersions{ Params :  Returns : Mono<Void>} delete{ Params : FileVersion Returns : Mono<Void>} validateTransaction{ Params : long,List<Event> Returns : void} equals{ Params : List<SerializedEvent>,List<Event> Returns : boolean} recentOnly{ Params : SearchHint[] Returns : boolean} getLastSequenceNumber{ Params : String,int,long Returns : Optional<Long>} getLastEvent{ Params : String,long,long Returns : Optional<SerializedEvent>} transactionIterator{ Params : long,long Returns : CloseableIterator<SerializedTransactionWithToken>} createTransactionIterator{ Params : EventSource,long,boolean Returns : TransactionIterator} transactionsForTransformation{ Params : long Returns : TransactionIterator} getTransactions{ Params : long,long,boolean Returns : TransactionIterator} getEvents{ Params : long,long Returns : EventIterator} readSerializedEvent{ Params : long,long,SegmentIndexEntries Returns : Optional<SerializedEvent>} getGlobalIterator{ Params : long Returns : CloseableIterator<SerializedEventWithToken>} close{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedEventWithToken} activeSegmentCount{ Params :  Returns : int} handover{ Params : Segment,Runnable Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedTransactionWithToken} checkPointers{ Params :  Returns : void} close{ Params :  Returns : void} getTransactions{ Params : long,long Returns : TransactionIterator} getFirstToken{ Params :  Returns : long} getTokenAt{ Params : long Returns : long} getSegmentFor{ Params : long Returns : long} ,init getFirstCompletedSegment store getLastToken eventsPerAggregate processEventsPerAggregate getType getBackupFilenames transactionVersion nextToken close registerCloseListener transformContents processEventsPerAggregateHighestFirst query getLastSequenceNumber deleteOldVersions validateTransaction getLastSequenceNumber getLastEvent transactionIterator getGlobalIterator close hasNext next hasNext next close getFirstToken getTokenAt ,,,,EventStorageEngine ,DistributionSummary ,,DistributionSummary ,CopyOnWriteArraySet WritableFileStorageTier MessagingPlatformException MessagingPlatformException ValidationResult ValidationResult EventSourceFlux ArrayList ArrayList TransformationResources File RuntimeException MessagingPlatformException EventStoreValidationException EventStoreValidationException TransactionWithTokenIterator MessagingPlatformException MessagingPlatformException CloseableIterator AtomicBoolean IllegalStateException IllegalStateException NoSuchElementException ,head: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,TransactionWithTokenIterator,3,2,0,0,0,false,0 ,EventStorageEngine ,TransactionWithTokenIterator ,limitToken: Long currentToken: long currentSegment: long currentTransactionIterator: TransactionIterator ,init{ Params : boolean,long Returns : void} validate{ Params : int Returns : void} validateSegment{ Params : long Returns : ValidationResult} getFirstCompletedSegment{ Params :  Returns : long} store{ Params : List<Event>,int Returns : CompletableFuture<Long>} getLastToken{ Params :  Returns : long} eventsPerAggregate{ Params : String,long,long,long Returns : Flux<SerializedEvent>} eventsForPositions{ Params : FileVersion,IndexEntries,int Returns : Flux<SerializedEvent>} processEventsPerAggregate{ Params : String,long,long,long,Consumer<SerializedEvent> Returns : void} getType{ Params :  Returns : EventTypeContext} getBackupFilenames{ Params : long,int,boolean Returns : Stream<String>} transactionVersion{ Params :  Returns : byte} nextToken{ Params :  Returns : long} close{ Params : boolean Returns : void} registerCloseListener{ Params : Runnable Returns : Registration} transformContents{ Params : int,Flux<EventWithToken> Returns : Flux<Long>} processEventsPerAggregateHighestFirst{ Params : String,long,long,int,Consumer<SerializedEvent> Returns : void} retrieveEventsForAnAggregate{ Params : FileVersion,List<Integer>,long,long,Consumer<SerializedEvent>,long Returns : int} query{ Params : QueryOptions,Predicate<EventWithToken> Returns : void} getLastSequenceNumber{ Params : String,SearchHint[] Returns : Optional<Long>} doTransformContents{ Params : int,Flux<EventWithToken> Returns : Flux<Long>} activateTransformation{ Params :  Returns : Mono<Void>} transformedSegmentVersions{ Params :  Returns : Flux<FileVersion>} fileVersions{ Params : String Returns : Flux<FileVersion>} activateSegment{ Params : FileVersion Returns : Mono<Void>} renameTransformedSegmentIfNeeded{ Params : FileVersion Returns : Mono<Void>} transformedDataFile{ Params : FileVersion Returns : File} deleteOldVersions{ Params :  Returns : Mono<Void>} delete{ Params : FileVersion Returns : Mono<Void>} validateTransaction{ Params : long,List<Event> Returns : void} equals{ Params : List<SerializedEvent>,List<Event> Returns : boolean} recentOnly{ Params : SearchHint[] Returns : boolean} getLastSequenceNumber{ Params : String,int,long Returns : Optional<Long>} getLastEvent{ Params : String,long,long Returns : Optional<SerializedEvent>} transactionIterator{ Params : long,long Returns : CloseableIterator<SerializedTransactionWithToken>} createTransactionIterator{ Params : EventSource,long,boolean Returns : TransactionIterator} transactionsForTransformation{ Params : long Returns : TransactionIterator} getTransactions{ Params : long,long,boolean Returns : TransactionIterator} getEvents{ Params : long,long Returns : EventIterator} readSerializedEvent{ Params : long,long,SegmentIndexEntries Returns : Optional<SerializedEvent>} getGlobalIterator{ Params : long Returns : CloseableIterator<SerializedEventWithToken>} close{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedEventWithToken} activeSegmentCount{ Params :  Returns : int} handover{ Params : Segment,Runnable Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedTransactionWithToken} checkPointers{ Params :  Returns : void} close{ Params :  Returns : void} getTransactions{ Params : long,long Returns : TransactionIterator} getFirstToken{ Params :  Returns : long} getTokenAt{ Params : long Returns : long} getSegmentFor{ Params : long Returns : long} ,init getFirstCompletedSegment store getLastToken eventsPerAggregate processEventsPerAggregate getType getBackupFilenames transactionVersion nextToken close registerCloseListener transformContents processEventsPerAggregateHighestFirst query getLastSequenceNumber deleteOldVersions validateTransaction getLastSequenceNumber getLastEvent transactionIterator getGlobalIterator close hasNext next hasNext next close getFirstToken getTokenAt ,,,,CloseableIterator ,TransactionIterator ,,TransactionIterator ,,FileEventStorageEngine.this: , segment, token, false
axon-server-se-master,io.axoniq.axonserver.localstorage.file,FilePreparedTransaction,1,1,0,0,0,false,PreparedTransaction ,0 ,0 ,writePosition: WritePosition eventSize: int ,getWritePosition{ Params :  Returns : WritePosition} getEventSize{ Params :  Returns : int} ,,,,,,int ,,int ,,FileEventStorageEngine.this: , segment, token, false
axon-server-se-master,io.axoniq.axonserver.localstorage.file,FileUtils,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger ,checkCreateDirectory{ Params : File Returns : void} getFilesWithSuffix{ Params : File,String Returns : String[]} process{ Params : String Returns : FileVersion} delete{ Params : File Returns : boolean} rename{ Params : File,File Returns : Mono<Void>} name{ Params : File Returns : String} ,,checkCreateDirectory getFilesWithSuffix process delete rename name ,,,,,,,MessagingPlatformException MessagingPlatformException MessagingPlatformException FileVersion FileVersion ,file: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,FileVersion,1,1,0,0,0,false,0 ,Comparable<FileVersion> ,0 ,segment: long version: int ,segment{ Params :  Returns : long} segmentVersion{ Params :  Returns : int} compareTo{ Params : FileVersion Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,compareTo equals hashCode toString ,,,,Comparable ,int ,,int ,,Objects: , segment, version
axon-server-se-master,io.axoniq.axonserver.localstorage.file,IndexEntries,2,1,0,0,0,true,0 ,Comparable<FileVersion> ,0 ,,isEmpty{ Params :  Returns : boolean} size{ Params :  Returns : int} range{ Params : long,long,boolean Returns : IndexEntries} positions{ Params :  Returns : List<Integer>} last{ Params :  Returns : int} lastSequenceNumber{ Params :  Returns : long} add{ Params : IndexEntry Returns : void} firstSequenceNumber{ Params :  Returns : long} addAll{ Params : List<IndexEntry> Returns : void} ,,,,,,,,,,Objects: , segment, version
axon-server-se-master,io.axoniq.axonserver.localstorage.file,IndexEntry,1,1,0,0,0,false,0 ,0 ,0 ,sequenceNumber: long position: int token: long ,getSequenceNumber{ Params :  Returns : long} getPosition{ Params :  Returns : int} getToken{ Params :  Returns : long} ,,,,,,long ,,long ,,Objects: , segment, version
axon-server-se-master,io.axoniq.axonserver.localstorage.file,IndexManager,2,1,0,0,0,true,0 ,0 ,0 ,,init{ Params :  Returns : void} addToActiveSegment{ Params : long,String,IndexEntry Returns : void} complete{ Params : long Returns : void} complete{ Params : FileVersion Returns : void} getLastSequenceNumber{ Params : String,int,long Returns : Optional<Long>} validIndex{ Params : FileVersion Returns : boolean} remove{ Params : long Returns : boolean} indexFiles{ Params : FileVersion Returns : List<File>} addExistingIndex{ Params : FileVersion Returns : void} lookupAggregate{ Params : String,long,long,long,long Returns : SortedMap<FileVersion,IndexEntries>} lookupAggregateInClosedSegments{ Params : String,long,long,long,long,long Returns : SortedMap<FileVersion,IndexEntries>} cleanup{ Params : boolean Returns : void} lastIndexEntries{ Params : String,long Returns : SegmentIndexEntries} getBackupFilenames{ Params : long,int Returns : Stream<File>} lastIndexEntriesFromClosedSegments{ Params : String,long,long Returns : SegmentIndexEntries} addToActiveSegment{ Params : Long,Map<String,List<IndexEntry>> Returns : void} createNewVersion{ Params : long,int,Map<String,List<IndexEntry>> Returns : void} remove{ Params : FileVersion Returns : boolean} activateVersion{ Params : FileVersion Returns : Mono<Void>} activateVersion{ Params : long,int Returns : Mono<Void>} latestSequenceNumbers{ Params : FileVersion Returns : Stream<AggregateIndexEntries>} createIndex{ Params : FileVersion,Map<String,List<IndexEntry>> Returns : void} ,,,,,,,,,FileVersion ,fileVersion: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,IndexNotFoundException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.localstorage.file,InputStreamEventIterator,1,1,0,0,0,false,EventIterator ,0 ,0 ,eventSource: InputStreamEventSource reader: PositionKeepingDataInputStream ,forwardTo{ Params : long Returns : void} readPartialTransaction{ Params : short,short Returns : void} addEvent{ Params :  Returns : void} readTransaction{ Params :  Returns : boolean} doClose{ Params :  Returns : void} processVersion{ Params : PositionKeepingDataInputStream Returns : void} ,doClose ,,,,,PositionKeepingDataInputStream ,,PositionKeepingDataInputStream ,MessagingPlatformException EventInformation SerializedEventWithToken MessagingPlatformException ,reader: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,InputStreamEventSource,1,1,0,0,0,false,0 ,EventSource ,0 ,logger: Logger dataInputStream: PositionKeepingDataInputStream eventTransformer: EventTransformer dataFile: File segment: long segmentVersion: int closed: boolean ,readEvent{ Params : int Returns : SerializedEvent} readEvent{ Params :  Returns : SerializedEvent} createTransactionIterator{ Params : long,boolean Returns : TransactionIterator} createEventIterator{ Params : long Returns : EventIterator} segment{ Params :  Returns : long} getStream{ Params :  Returns : PositionKeepingDataInputStream} close{ Params :  Returns : void} ,readEvent createTransactionIterator createEventIterator segment close ,,,,EventSource ,boolean ,,boolean ,PositionKeepingDataInputStream MessagingPlatformException MessagingPlatformException SerializedEvent InputStreamTransactionIterator InputStreamEventIterator ,logger: , "Error while closing file", e
axon-server-se-master,io.axoniq.axonserver.localstorage.file,InputStreamStrorageTierEventStore,1,1,0,0,0,false,AbstractFileStorageTier ,0 ,0 ,eventTransformerFactory: EventTransformerFactory ,handover{ Params : Segment,Runnable Returns : void} localEventSource{ Params : long Returns : Optional<EventSource>} initSegments{ Params : long Returns : void} close{ Params : boolean Returns : void} removeSegment{ Params : long,int Returns : boolean} localEventSource{ Params : FileVersion Returns : Optional<EventSource>} get{ Params : FileVersion,boolean Returns : InputStreamEventSource} ,handover localEventSource initSegments close removeSegment localEventSource ,,,,,EventTransformerFactory ,,EventTransformerFactory ,FileVersion FileVersion FileVersion InputStreamEventSource ,segment: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,InputStreamTransactionIterator,1,1,0,0,0,false,0 ,TransactionIterator ,0 ,eventSource: InputStreamEventSource reader: PositionKeepingDataInputStream currentSequenceNumber: long next: SerializedTransactionWithToken ,forwardTo{ Params : long Returns : void} processVersion{ Params : PositionKeepingDataInputStream Returns : byte} readTransaction{ Params :  Returns : boolean} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedTransactionWithToken} close{ Params :  Returns : void} ,hasNext next close ,,,,TransactionIterator ,SerializedTransactionWithToken ,,SerializedTransactionWithToken ,MessagingPlatformException EventStoreValidationException ArrayList SerializedTransactionWithToken MessagingPlatformException NoSuchElementException ,eventSource: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,NoopSegmentTransformer,1,0,0,0,0,false,0 ,SegmentTransformer ,0 ,,initialize{ Params :  Returns : Mono<Void>} transformEvent{ Params : EventWithToken Returns : Mono<Void>} completeSegment{ Params :  Returns : Mono<Void>} rollback{ Params : Throwable Returns : Mono<Void>} cancel{ Params :  Returns : Mono<Void>} segment{ Params :  Returns : long} ,initialize transformEvent completeSegment rollback cancel segment ,,,,SegmentTransformer ,,,,,Mono: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,PersistedBloomFilter,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger UTF8: Charset filter: BloomFilter<CharSequence> path: Path expectedInsertions: int fpp: float ,load{ Params :  Returns : void} create{ Params :  Returns : void} store{ Params :  Returns : void} insert{ Params : String Returns : void} mightContain{ Params : String Returns : boolean} fileExists{ Params :  Returns : boolean} insertAll{ Params : Set<String> Returns : void} ,,,,,,float ,,float ,IllegalArgumentException MessagingPlatformException ,filter: , key
axon-server-se-master,io.axoniq.axonserver.localstorage.file,PositionKeepingDataInputStream,1,1,0,0,0,false,0 ,0 ,0 ,position: int reader: RandomAccessFile ,readByte{ Params :  Returns : byte} readInt{ Params :  Returns : int} position{ Params : int Returns : void} readEvent{ Params :  Returns : byte[]} readBytes{ Params : int Returns : byte[]} close{ Params :  Returns : void} readShort{ Params :  Returns : short} position{ Params :  Returns : int} skipBytes{ Params : int Returns : void} readLong{ Params :  Returns : long} ,,,,,,RandomAccessFile ,,RandomAccessFile ,RandomAccessFile RuntimeException ,reader: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,ReadOnlySegmentsHandler,2,1,0,0,0,true,0 ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.localstorage.file,RemoteAggregateSequenceNumberResolver,2,1,0,0,0,true,0 ,0 ,0 ,,getLastSequenceNumber{ Params : String,String,int,long Returns : Optional<Long>} ,,,,,,,,,,reader: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,Segment,2,1,0,0,0,true,0 ,0 ,0 ,,contentProvider{ Params :  Returns : Supplier<InputStream>} id{ Params :  Returns : FileVersion} previousVersions{ Params :  Returns : Supplier<List<File>>} indexProvider{ Params :  Returns : Supplier<List<File>>} latestSequenceNumbers{ Params :  Returns : Stream<AggregateSequence>} ,,,,,,,,,,reader: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,SegmentAndPosition,1,1,0,0,0,false,0 ,0 ,0 ,segment: long position: int ,getSegment{ Params :  Returns : long} getPosition{ Params :  Returns : int} ,,,,,,int ,,int ,,reader: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,SegmentIndexEntries,1,1,0,0,0,false,0 ,0 ,0 ,segment: FileVersion indexEntries: IndexEntries ,fileVersion{ Params :  Returns : FileVersion} indexEntries{ Params :  Returns : IndexEntries} ,,,,,,IndexEntries ,,IndexEntries ,,reader: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,SegmentTransformer,2,0,0,0,0,true,0 ,0 ,0 ,,initialize{ Params :  Returns : Mono<Void>} transformEvent{ Params : EventWithToken Returns : Mono<Void>} completeSegment{ Params :  Returns : Mono<Void>} rollback{ Params : Throwable Returns : Mono<Void>} cancel{ Params :  Returns : Mono<Void>} segment{ Params :  Returns : long} ,,,,,,,,,,reader: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,SegmentWriter,2,1,0,0,0,true,0 ,0 ,0 ,,lastToken{ Params :  Returns : long} writeEndOfFile{ Params :  Returns : void} write{ Params : List<Event> Returns : void} indexEntries{ Params :  Returns : Map<String,List<IndexEntry>>} ,,,,,,,,,,reader: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,StandardEventStoreFactory,1,1,0,0,0,false,0 ,EventStoreFactory ,0 ,embeddedDBProperties: EmbeddedDBProperties eventTransformerFactory: EventTransformerFactory storageTransactionManagerFactory: StorageTransactionManagerFactory meterFactory: MeterFactory fileSystemMonitor: FileSystemMonitor ,createEventStorageEngine{ Params : String Returns : EventStorageEngine} createSnapshotStorageEngine{ Params : String Returns : EventStorageEngine} ,createEventStorageEngine createSnapshotStorageEngine ,,,,EventStoreFactory ,FileSystemMonitor ,,FileSystemMonitor ,StandardIndexManager InputStreamStrorageTierEventStore EventTypeContext FileEventStorageEngine EventTypeContext StandardIndexManager InputStreamStrorageTierEventStore EventTypeContext FileEventStorageEngine EventTypeContext ,storageProperties: , context
axon-server-se-master,io.axoniq.axonserver.localstorage.file,StandardIndexEntries,1,1,0,0,0,false,0 ,IndexEntries ,0 ,entries: AppendOnlyList<Integer> firstSequenceNumber: long ,isEmpty{ Params :  Returns : boolean} size{ Params :  Returns : int} range{ Params : long,long,boolean Returns : IndexEntries} positions{ Params :  Returns : List<Integer>} last{ Params :  Returns : int} lastSequenceNumber{ Params :  Returns : long} add{ Params : IndexEntry Returns : void} add{ Params : Integer Returns : void} addAll{ Params : List<IndexEntry> Returns : void} firstSequenceNumber{ Params :  Returns : long} toString{ Params :  Returns : String} ,isEmpty size range positions last lastSequenceNumber add addAll firstSequenceNumber toString ,,,,IndexEntries ,long ,,long ,AppendOnlyList ArrayList StandardIndexEntries ArrayList ,: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,StandardIndexEntriesSerializer,1,1,0,0,0,false,0 ,Serializer<IndexEntries> ,0 ,INSTANCE: StandardIndexEntriesSerializer ,get{ Params :  Returns : StandardIndexEntriesSerializer} serialize{ Params : DataOutput2,IndexEntries Returns : void} deserialize{ Params : DataInput2,int Returns : IndexEntries} ,serialize deserialize ,get ,,,Serializer ,,,,StandardIndexEntriesSerializer StandardIndexEntries ,input: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,StandardIndexManager,1,1,0,0,0,false,0 ,IndexManager ,StandardIndex ,logger: Logger AGGREGATE_MAP: String scheduledExecutorService: ScheduledExecutorService storageProperties: Supplier<StorageProperties> context: String eventType: EventType activeIndexes: ConcurrentNavigableMap<Long, Map<String, IndexEntries>> bloomFilterPerSegment: ConcurrentNavigableMap<FileVersion, PersistedBloomFilter> indexMap: ConcurrentSkipListMap<FileVersion, StandardIndex> indexesDescending: ConcurrentNavigableMap<Long, Integer> indexOpenMeter: MeterFactory.RateMeter indexCloseMeter: MeterFactory.RateMeter remoteIndexManager: RemoteAggregateSequenceNumberResolver useMmapAfterIndex: AtomicLong bloomFilterOpenMeter: Counter bloomFilterCloseMeter: Counter cleanupTask: ScheduledFuture<?> storagePath: String next: Supplier<IndexManager> ,init{ Params :  Returns : void} updateUseMmapAfterIndex{ Params :  Returns : void} createIndex{ Params : FileVersion,Map<String,List<IndexEntry>> Returns : void} createStandardIndex{ Params : FileVersion,Map<String,IndexEntries> Returns : void} mySegment{ Params : FileVersion Returns : boolean} doCreateIndex{ Params : FileVersion,Map<String,IndexEntries> Returns : void} getPositions{ Params : FileVersion,String Returns : IndexEntries} getIndex{ Params : FileVersion Returns : StandardIndex} indexCleanup{ Params :  Returns : void} notInBloomIndex{ Params : FileVersion,String Returns : boolean} loadBloomFilter{ Params : FileVersion Returns : PersistedBloomFilter} addToActiveSegment{ Params : long,String,IndexEntry Returns : void} addToActiveSegment{ Params : Long,Map<String,List<IndexEntry>> Returns : void} activateVersion{ Params : long,int Returns : Mono<Void>} createNewVersion{ Params : long,int,Map<String,List<IndexEntry>> Returns : void} latestSequenceNumbers{ Params : FileVersion Returns : Stream<AggregateIndexEntries>} lookupAggregateInClosedSegments{ Params : String,long,long,long,long,long Returns : SortedMap<FileVersion,IndexEntries>} complete{ Params : FileVersion Returns : void} getLastSequenceNumber{ Params : String,int,long Returns : Optional<Long>} lastIndexEntries{ Params : String,long Returns : SegmentIndexEntries} lastIndexEntriesFromClosedSegments{ Params : String,long,long Returns : SegmentIndexEntries} validIndex{ Params : FileVersion Returns : boolean} remove{ Params : long Returns : boolean} remove{ Params : FileVersion Returns : boolean} indexFiles{ Params : FileVersion Returns : List<File>} addExistingIndex{ Params : FileVersion Returns : void} lookupAggregate{ Params : String,long,long,long,long Returns : SortedMap<FileVersion,IndexEntries>} addToResult{ Params : long,long,SortedMap<FileVersion,IndexEntries>,FileVersion,IndexEntries Returns : int} allEntriesFound{ Params : long,long,IndexEntries Returns : boolean} cleanup{ Params : boolean Returns : void} getBackupFilenames{ Params : long,int Returns : Stream<File>} getPositions{ Params : String Returns : IndexEntries} close{ Params :  Returns : void} ensureReady{ Params :  Returns : StandardIndex} latestSequenceNumbers{ Params :  Returns : Stream<AggregateIndexEntries>} ,createIndex addToActiveSegment addToActiveSegment activateVersion createNewVersion latestSequenceNumbers lookupAggregateInClosedSegments complete getLastSequenceNumber lastIndexEntries lastIndexEntriesFromClosedSegments validIndex remove indexFiles addExistingIndex lookupAggregate getBackupFilenames close ,,,,IndexManager ,Supplier<IndexManager> ,,Supplier<IndexManager> ,DaemonThreadFactory ConcurrentSkipListMap ConcurrentSkipListMap ConcurrentSkipListMap ConcurrentSkipListMap AtomicLong File HashMap StandardIndexEntries MessagingPlatformException MessagingPlatformException PersistedBloomFilter RuntimeException RuntimeException PersistedBloomFilter IndexNotFoundException ConcurrentHashMap StandardIndexEntries IndexNotFoundException ConcurrentHashMap StandardIndexEntries FileVersion RuntimeException FileVersion MessagingPlatformException StandardIndexEntries PersistedBloomFilter TreeMap FileVersion FileVersion SegmentIndexEntries FileVersion FileVersion SegmentIndexEntries FileVersion TreeMap FileVersion Object IndexNotFoundException AggregateIndexEntries ,s: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,StandardIndex,3,2,0,0,0,false,0 ,IndexManager ,StandardIndex ,segment: FileVersion initLock: Object initialized: boolean positions: HTreeMap<String, IndexEntries> db: DB ,init{ Params :  Returns : void} updateUseMmapAfterIndex{ Params :  Returns : void} createIndex{ Params : FileVersion,Map<String,List<IndexEntry>> Returns : void} createStandardIndex{ Params : FileVersion,Map<String,IndexEntries> Returns : void} mySegment{ Params : FileVersion Returns : boolean} doCreateIndex{ Params : FileVersion,Map<String,IndexEntries> Returns : void} getPositions{ Params : FileVersion,String Returns : IndexEntries} getIndex{ Params : FileVersion Returns : StandardIndex} indexCleanup{ Params :  Returns : void} notInBloomIndex{ Params : FileVersion,String Returns : boolean} loadBloomFilter{ Params : FileVersion Returns : PersistedBloomFilter} addToActiveSegment{ Params : long,String,IndexEntry Returns : void} addToActiveSegment{ Params : Long,Map<String,List<IndexEntry>> Returns : void} activateVersion{ Params : long,int Returns : Mono<Void>} createNewVersion{ Params : long,int,Map<String,List<IndexEntry>> Returns : void} latestSequenceNumbers{ Params : FileVersion Returns : Stream<AggregateIndexEntries>} lookupAggregateInClosedSegments{ Params : String,long,long,long,long,long Returns : SortedMap<FileVersion,IndexEntries>} complete{ Params : FileVersion Returns : void} getLastSequenceNumber{ Params : String,int,long Returns : Optional<Long>} lastIndexEntries{ Params : String,long Returns : SegmentIndexEntries} lastIndexEntriesFromClosedSegments{ Params : String,long,long Returns : SegmentIndexEntries} validIndex{ Params : FileVersion Returns : boolean} remove{ Params : long Returns : boolean} remove{ Params : FileVersion Returns : boolean} indexFiles{ Params : FileVersion Returns : List<File>} addExistingIndex{ Params : FileVersion Returns : void} lookupAggregate{ Params : String,long,long,long,long Returns : SortedMap<FileVersion,IndexEntries>} addToResult{ Params : long,long,SortedMap<FileVersion,IndexEntries>,FileVersion,IndexEntries Returns : int} allEntriesFound{ Params : long,long,IndexEntries Returns : boolean} cleanup{ Params : boolean Returns : void} getBackupFilenames{ Params : long,int Returns : Stream<File>} getPositions{ Params : String Returns : IndexEntries} close{ Params :  Returns : void} ensureReady{ Params :  Returns : StandardIndex} latestSequenceNumbers{ Params :  Returns : Stream<AggregateIndexEntries>} ,createIndex addToActiveSegment addToActiveSegment activateVersion createNewVersion latestSequenceNumbers lookupAggregateInClosedSegments complete getLastSequenceNumber lastIndexEntries lastIndexEntriesFromClosedSegments validIndex remove indexFiles addExistingIndex lookupAggregate getBackupFilenames close ,,,,Closeable ,DB ,,DB ,Object IndexNotFoundException AggregateIndexEntries ,e: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,StorageProperties,1,1,0,0,0,false,0 ,Cloneable ,0 ,TRANSFORMED_SUFFIX: String PATH_FORMAT: String TEMP_PATH_FORMAT: String PATH_WITH_VERSION_FORMAT: String FILE_WITH_VERSION_FORMAT: String FILE_FORMAT: String TEMP_PATH_WITH_VERSION_FORMAT: String TRANSFORMED_PATH_WITH_VERSION_FORMAT: String OLD_PATH_FORMAT: String DEFAULT_READ_BUFFER_SIZE: int PRIMARY_STORAGE_KEY: String eventsSuffix: String indexSuffix: String newIndexSuffix: String globalIndexSuffix: String bloomIndexSuffix: String segmentSize: int storage: String storages: Map<String, String> bloomIndexFpp: float forceInterval: long validationSegments: int memoryMappedSegments: int primaryCleanupDelay: int secondaryCleanupDelay: int maxIndexesInMemory: int maxBloomFiltersInMemory: int syncInterval: long useMmapIndex: boolean forceCleanMmapIndex: Boolean forceClean: Boolean eventsPerSegmentPrefetch: int readBufferSize: int keepOldVersions: boolean systemInfoProvider: SystemInfoProvider flags: int retentionTime: Duration indexFormat: String segmentsForSequenceNumberCheck: int ,getEventsSuffix{ Params :  Returns : String} setEventsSuffix{ Params : String Returns : void} getIndexSuffix{ Params :  Returns : String} setIndexSuffix{ Params : String Returns : void} getNewIndexSuffix{ Params :  Returns : String} setNewIndexSuffix{ Params : String Returns : void} getBloomIndexSuffix{ Params :  Returns : String} setBloomIndexSuffix{ Params : String Returns : void} getSegmentSize{ Params :  Returns : int} setSegmentSize{ Params : DataSize Returns : void} setStorage{ Params : String Returns : void} setStorages{ Params : Map<String,String> Returns : void} getEventsPerSegmentPrefetch{ Params :  Returns : int} setEventsPerSegmentPrefetch{ Params : int Returns : void} getBloomIndexFpp{ Params :  Returns : float} setBloomIndexFpp{ Params : float Returns : void} bloomFilter{ Params : String,long Returns : File} bloomFilter{ Params : String,FileVersion Returns : File} index{ Params : String,long Returns : File} index{ Params : String,FileVersion Returns : File} indexTemp{ Params : String,long Returns : File} indexTemp{ Params : String,FileVersion Returns : File} transformedIndex{ Params : String,FileVersion Returns : File} newTransformedIndex{ Params : String,FileVersion Returns : File} transformedIndex{ Params : String,long Returns : File} newIndex{ Params : String,long Returns : File} newIndex{ Params : String,FileVersion Returns : File} newIndexTemp{ Params : String,FileVersion Returns : File} newIndexTemp{ Params : String,long Returns : File} getGlobalIndexSuffix{ Params :  Returns : String} setGlobalIndexSuffix{ Params : String Returns : void} dataFile{ Params : long Returns : String} dataFile{ Params : FileVersion Returns : String} dataFile{ Params : String,FileVersion Returns : File} transformedDataFile{ Params : String,FileVersion Returns : File} getForceInterval{ Params :  Returns : long} setForceInterval{ Params : long Returns : void} getFlags{ Params :  Returns : int} getPrimaryStorage{ Params : String Returns : String} getStorage{ Params : String Returns : String} getForceClean{ Params :  Returns : Boolean} setForceClean{ Params : Boolean Returns : void} getStorage{ Params : String,String Returns : String} getAvailableStorages{ Params :  Returns : Map<String,String>} getValidationSegments{ Params :  Returns : int} setValidationSegments{ Params : int Returns : void} getMemoryMappedSegments{ Params :  Returns : int} setMemoryMappedSegments{ Params : int Returns : void} getPrimaryCleanupDelay{ Params :  Returns : int} setPrimaryCleanupDelay{ Params : int Returns : void} getSecondaryCleanupDelay{ Params :  Returns : int} setSecondaryCleanupDelay{ Params : int Returns : void} getMaxIndexesInMemory{ Params :  Returns : int} setMaxIndexesInMemory{ Params : int Returns : void} getMaxBloomFiltersInMemory{ Params :  Returns : int} setMaxBloomFiltersInMemory{ Params : int Returns : void} getSyncInterval{ Params :  Returns : long} setSyncInterval{ Params : long Returns : void} getReadBufferSize{ Params :  Returns : int} setReadBufferSize{ Params : int Returns : void} oldDataFile{ Params : String,long Returns : File} oldIndex{ Params : String,long Returns : File} oldBloomFilter{ Params : String,long Returns : File} setUseMmapIndex{ Params : Boolean Returns : void} setForceCleanMmapIndex{ Params : Boolean Returns : void} isForceCleanMmapIndex{ Params :  Returns : boolean} isUseMmapIndex{ Params :  Returns : boolean} isCleanRequired{ Params :  Returns : boolean} setSegmentsForSequenceNumberCheck{ Params : int Returns : void} setFlags{ Params : int Returns : void} cloneProperties{ Params :  Returns : StorageProperties} withSegmentSize{ Params : int Returns : StorageProperties} withMaxBloomFiltersInMemory{ Params : int Returns : StorageProperties} setRetentionTime{ Params : Duration[] Returns : void} getRetentionTime{ Params : int Returns : long} getIndexFormat{ Params :  Returns : String} setIndexFormat{ Params : String Returns : void} withIndexFormat{ Params : String Returns : StorageProperties} withMaxIndexesInMemory{ Params : int Returns : StorageProperties} withRetentionTime{ Params : Duration[] Returns : StorageProperties} isKeepOldVersions{ Params :  Returns : boolean} setKeepOldVersions{ Params : boolean Returns : void} withKeepOldVersions{ Params : boolean Returns : StorageProperties} segmentsForSequenceNumberCheck{ Params :  Returns : int} withForceClean{ Params : boolean Returns : StorageProperties} ,,,,,Cloneable ,int ,,int ,HashMap HashMap File File File File File File File File File File File File File File RuntimeException File IllegalStateException File File File RuntimeException ,: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,StorageTier,2,1,0,0,0,true,0 ,Cloneable ,RetentionStrategy TimeBasedRetentionStrategy SizeBasedRetentionStrategy ,,getSegments{ Params :  Returns : SortedSet<Long>} getBackupFilenames{ Params : long,int Returns : Stream<String>} eventSource{ Params : FileVersion Returns : Optional<EventSource>} eventSource{ Params : long Returns : Optional<EventSource>} close{ Params : boolean Returns : void} initSegments{ Params : long Returns : void} handover{ Params : Segment,Runnable Returns : void} removeSegment{ Params : long,int Returns : boolean} currentSegmentVersion{ Params : Long Returns : Integer} activateSegmentVersion{ Params : long,int Returns : void} segmentsWithoutIndex{ Params :  Returns : SortedSet<FileVersion>} allSegments{ Params :  Returns : Stream<Long>} findNextSegment{ Params :  Returns : Long} findNextSegment{ Params :  Returns : Long} retentionWeight{ Params :  Returns : Long} getTotalSize{ Params : NavigableMap<Long,Integer> Returns : AtomicLong} findNextSegment{ Params :  Returns : Long} retentionWeight{ Params :  Returns : Long} ,findNextSegment findNextSegment ,,,findNextSegment ,,,,,FileVersion AtomicLong FileVersion FileVersion ,: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,RetentionStrategy,3,0,1,0,0,false,0 ,Cloneable ,RetentionStrategy TimeBasedRetentionStrategy SizeBasedRetentionStrategy ,segmentIterator: Iterator<Long> contextMetaData: Map<String, String> retentionProperty: String segments: NavigableMap<Long, Integer> dataFileResolver: Function<FileVersion, File> ,getSegments{ Params :  Returns : SortedSet<Long>} getBackupFilenames{ Params : long,int Returns : Stream<String>} eventSource{ Params : FileVersion Returns : Optional<EventSource>} eventSource{ Params : long Returns : Optional<EventSource>} close{ Params : boolean Returns : void} initSegments{ Params : long Returns : void} handover{ Params : Segment,Runnable Returns : void} removeSegment{ Params : long,int Returns : boolean} currentSegmentVersion{ Params : Long Returns : Integer} activateSegmentVersion{ Params : long,int Returns : void} segmentsWithoutIndex{ Params :  Returns : SortedSet<FileVersion>} allSegments{ Params :  Returns : Stream<Long>} findNextSegment{ Params :  Returns : Long} findNextSegment{ Params :  Returns : Long} retentionWeight{ Params :  Returns : Long} getTotalSize{ Params : NavigableMap<Long,Integer> Returns : AtomicLong} findNextSegment{ Params :  Returns : Long} retentionWeight{ Params :  Returns : Long} ,findNextSegment findNextSegment ,,,findNextSegment ,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,TimeBasedRetentionStrategy,3,0,0,0,0,false,0 ,Cloneable ,RetentionStrategy TimeBasedRetentionStrategy SizeBasedRetentionStrategy ,retentionTimeInMillis: Long ,getSegments{ Params :  Returns : SortedSet<Long>} getBackupFilenames{ Params : long,int Returns : Stream<String>} eventSource{ Params : FileVersion Returns : Optional<EventSource>} eventSource{ Params : long Returns : Optional<EventSource>} close{ Params : boolean Returns : void} initSegments{ Params : long Returns : void} handover{ Params : Segment,Runnable Returns : void} removeSegment{ Params : long,int Returns : boolean} currentSegmentVersion{ Params : Long Returns : Integer} activateSegmentVersion{ Params : long,int Returns : void} segmentsWithoutIndex{ Params :  Returns : SortedSet<FileVersion>} allSegments{ Params :  Returns : Stream<Long>} findNextSegment{ Params :  Returns : Long} findNextSegment{ Params :  Returns : Long} retentionWeight{ Params :  Returns : Long} getTotalSize{ Params : NavigableMap<Long,Integer> Returns : AtomicLong} findNextSegment{ Params :  Returns : Long} retentionWeight{ Params :  Returns : Long} ,findNextSegment findNextSegment ,,,findNextSegment ,,Long ,,Long ,FileVersion ,duration: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,SizeBasedRetentionStrategy,3,0,0,0,0,false,0 ,Cloneable ,RetentionStrategy TimeBasedRetentionStrategy SizeBasedRetentionStrategy ,retentionSizeInBytes: Long currentTotalSize: AtomicLong ,getSegments{ Params :  Returns : SortedSet<Long>} getBackupFilenames{ Params : long,int Returns : Stream<String>} eventSource{ Params : FileVersion Returns : Optional<EventSource>} eventSource{ Params : long Returns : Optional<EventSource>} close{ Params : boolean Returns : void} initSegments{ Params : long Returns : void} handover{ Params : Segment,Runnable Returns : void} removeSegment{ Params : long,int Returns : boolean} currentSegmentVersion{ Params : Long Returns : Integer} activateSegmentVersion{ Params : long,int Returns : void} segmentsWithoutIndex{ Params :  Returns : SortedSet<FileVersion>} allSegments{ Params :  Returns : Stream<Long>} findNextSegment{ Params :  Returns : Long} findNextSegment{ Params :  Returns : Long} retentionWeight{ Params :  Returns : Long} getTotalSize{ Params : NavigableMap<Long,Integer> Returns : AtomicLong} findNextSegment{ Params :  Returns : Long} retentionWeight{ Params :  Returns : Long} ,findNextSegment findNextSegment ,,,findNextSegment ,,AtomicLong ,,AtomicLong ,AtomicLong FileVersion FileVersion ,Long: , retentionSizeString
axon-server-se-master,io.axoniq.axonserver.localstorage.file,StreamSegmentWriter,1,1,0,0,0,false,0 ,SegmentWriter ,0 ,dataOutputStream: DataOutputStream indexEntriesMap: Map<String, List<IndexEntry>> pos: int token: long ,close{ Params :  Returns : void} lastToken{ Params :  Returns : long} writeEndOfFile{ Params :  Returns : void} write{ Params : List<Event> Returns : void} indexEntries{ Params :  Returns : Map<String,List<IndexEntry>>} ,close lastToken writeEndOfFile write indexEntries ,,,,SegmentWriter ,long ,,long ,HashMap DataOutputStream FileOutputStream ByteArrayOutputStream DataOutputStream ArrayList IndexEntry Checksum ,checksum: , eventBytes
axon-server-se-master,io.axoniq.axonserver.localstorage.file,Synchronizer,1,1,0,0,0,false,0 ,0 ,0 ,log: Logger writePositions: SortedMap<WritePosition, StorageCallback> fsync: ScheduledExecutorService context: EventTypeContext storageProperties: StorageProperties completeSegmentCallback: Consumer<WritePosition> currentRef: AtomicReference<WritePosition> syncAndCloseFile: ConcurrentSkipListSet<WritePosition> updated: AtomicBoolean forceJob: ScheduledFuture<?> syncJob: ScheduledFuture<?> ,notifyWritePositions{ Params :  Returns : void} syncAndCloseFile{ Params :  Returns : boolean} register{ Params : WritePosition,StorageCallback Returns : void} canSyncAt{ Params : WritePosition,WritePosition Returns : boolean} init{ Params : WritePosition Returns : void} forceCurrent{ Params :  Returns : void} shutdown{ Params : boolean Returns : void} waitForPendingWrites{ Params :  Returns : void} ,,,,,,ScheduledFuture<?> ,,ScheduledFuture<?> ,ConcurrentSkipListMap AtomicReference ConcurrentSkipListSet AtomicBoolean CustomizableThreadFactory MessagingPlatformException ,Thread: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,TransactionByteBufferIterator,1,1,0,0,0,false,0 ,TransactionIterator ,0 ,reader: ByteBuffer eventSource: ByteBufferEventSource currentSequenceNumber: long validating: boolean next: SerializedTransactionWithToken ,forwardTo{ Params : long Returns : void} readTransaction{ Params :  Returns : boolean} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedTransactionWithToken} close{ Params :  Returns : void} ,hasNext next close ,,,,TransactionIterator ,SerializedTransactionWithToken ,,SerializedTransactionWithToken ,EventStoreValidationException ArrayList SerializedTransactionWithToken Checksum MessagingPlatformException NoSuchElementException ,eventSource: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,TransactionIterator,2,1,0,0,0,true,0 ,TransactionIterator ,0 ,,close{ Params :  Returns : void} ,close ,,,,,,,,,eventSource: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,TransformationResources,1,0,0,0,0,false,0 ,0 ,0 ,segmentTransformerRef: AtomicReference<SegmentTransformer> segmentForToken: Function<Long, Long> storagePropertiesSupplier: Supplier<StorageProperties> transformationVersion: int indexManager: IndexManager transactionIteratorSupplier: Function<Long, TransactionIterator> storagePath: String ,transform{ Params : EventWithToken Returns : Mono<Void>} completeCurrentSegment{ Params :  Returns : Mono<Void>} rollback{ Params : Throwable Returns : Mono<Void>} cancel{ Params :  Returns : Mono<Void>} ,,,,,,String ,,String ,AtomicReference NoopSegmentTransformer DefaultSegmentTransformer ,segmentTransformerRef: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,ValidationResult,1,1,0,0,0,false,0 ,0 ,0 ,segment: long lastToken: long valid: boolean message: String ,getSegment{ Params :  Returns : long} getLastToken{ Params :  Returns : long} isValid{ Params :  Returns : boolean} getMessage{ Params :  Returns : String} ,,,,,,String ,,String ,,segmentTransformerRef: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,WritableEventSource,1,1,0,0,0,false,ByteBufferEventSource ,0 ,0 ,logger: Logger ,mappedByteBuffer{ Params :  Returns : MappedByteBuffer} limit{ Params :  Returns : int} capacity{ Params :  Returns : int} force{ Params :  Returns : void} getInt{ Params : int Returns : int} putInt{ Params : int,int Returns : void} clearTo{ Params : int Returns : void} ,,,,,,,,,,Math: , emptyBytes.length, endPosition - pos
axon-server-se-master,io.axoniq.axonserver.localstorage.file,WritableFileStorageTier,1,1,0,0,0,false,AbstractFileStorageTier ,0 ,0 ,logger: Logger synchronizer: Synchronizer fileSystemMonitor: FileSystemMonitor eventTransformer: EventTransformer writePositionRef: AtomicReference<WritePosition> lastToken: AtomicLong readBuffers: ConcurrentNavigableMap<Long, ByteBufferEventSource> ,initSegments{ Params : long,long Returns : void} initLatestSegment{ Params : long,File,long,StorageProperties Returns : void} createMissingIndexes{ Params :  Returns : void} segmentsWithoutIndex{ Params :  Returns : SortedSet<FileVersion>} createIndex{ Params : FileVersion Returns : void} activeSegmentCount{ Params :  Returns : int} firstSegmentIfLatestCompleted{ Params : FileVersion,StorageProperties Returns : FileVersion} getFirstFile{ Params : long,File,FileVersion,StorageProperties Returns : FileVersion} prepareTransaction{ Params : List<Event>,int Returns : FilePreparedTransaction} store{ Params : List<Event>,int Returns : CompletableFuture<Long>} complete{ Params : long Returns : boolean} error{ Params : Throwable Returns : void} getOrOpenDatafile{ Params : FileVersion,int,boolean Returns : WritableEventSource} eventBlockSize{ Params : List<ProcessedEvent> Returns : int} forceNextSegmentIfNeeded{ Params : long Returns : void} complete{ Params : long Returns : boolean} error{ Params : Throwable Returns : void} waitForPendingFileCompletions{ Params :  Returns : void} completeSegment{ Params : WritePosition Returns : void} contentProvider{ Params :  Returns : Supplier<InputStream>} id{ Params :  Returns : FileVersion} indexProvider{ Params :  Returns : Supplier<List<File>>} previousVersions{ Params :  Returns : Supplier<List<File>>} latestSequenceNumbers{ Params :  Returns : Stream<AggregateSequence>} write{ Params : WritePosition,List<ProcessedEvent>,Map<String,List<IndexEntry>> Returns : void} writeBlock{ Params : ByteBuffer,List<ProcessedEvent>,int,int,Map<String,List<IndexEntry>>,long Returns : int} claim{ Params : int,int,int Returns : WritePosition} nextToken{ Params :  Returns : long} storeName{ Params :  Returns : String} getLastToken{ Params :  Returns : long} getBackupFilenames{ Params : long,int,boolean Returns : Stream<String>} getSegments{ Params :  Returns : SortedSet<Long>} getFirstCompletedSegment{ Params :  Returns : long} eventSource{ Params : FileVersion Returns : Optional<EventSource>} eventSource{ Params : long Returns : Optional<EventSource>} close{ Params : boolean Returns : void} localEventSource{ Params : FileVersion Returns : Optional<EventSource>} localEventSource{ Params : long Returns : Optional<EventSource>} initSegments{ Params : long Returns : void} handover{ Params : Segment,Runnable Returns : void} removeSegment{ Params : long,int Returns : boolean} removeSegmentVersions{ Params : long Returns : void} removeLocalSegment{ Params : long,int Returns : boolean} currentSegmentVersion{ Params : Long Returns : Integer} activateSegmentVersion{ Params : long,int Returns : void} ,segmentsWithoutIndex complete error complete error contentProvider id indexProvider previousVersions latestSequenceNumbers getSegments eventSource eventSource close initSegments handover removeSegment currentSegmentVersion activateSegmentVersion ,,,,,,,,AtomicReference AtomicLong ConcurrentSkipListMap Synchronizer File FileVersion HashMap EventByteBufferIterator IndexEntry LinkedList WritePosition HashMap IndexEntry LinkedList FileVersion WrappedEvent FilePreparedTransaction CompletableFuture HashMap StorageCallback AtomicBoolean FileVersion RandomAccessFile WritableEventSource MessagingPlatformException MessagingPlatformException FileVersion WritePosition StorageCallback RuntimeException FileVersion Segment FileVersion Checksum ArrayList IndexEntry MessagingPlatformException FileVersion FileVersion File FileVersion ,n: , segment, segmentVersion
axon-server-se-master,io.axoniq.axonserver.localstorage.file,WritePosition,1,1,0,0,0,false,0 ,Comparable<WritePosition> ,0 ,INVALID: WritePosition writePositionComparator: Comparator<WritePosition> sequence: long position: int version: int buffer: WritableEventSource segment: Long prevEntries: int ,reset{ Params : WritableEventSource,int Returns : WritePosition} isOverflow{ Params : int Returns : boolean} getSegment{ Params :  Returns : Long} getPosition{ Params :  Returns : int} isWritable{ Params : int Returns : boolean} incrementedWith{ Params : int,int,int Returns : WritePosition} isComplete{ Params :  Returns : boolean} toString{ Params :  Returns : String} compareTo{ Params : WritePosition Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} force{ Params :  Returns : void} isVersionUpdate{ Params : int Returns : boolean} ,toString compareTo equals hashCode ,,,,Comparable ,,,,WritePosition WritePosition WritePosition ,buffer: 
axon-server-se-master,io.axoniq.axonserver.localstorage,LocalEventStore,1,1,0,0,0,false,0 ,io.axoniq.axonserver.message.event.EventStore EventStoreTransformer SmartLifecycle ,Workers InterceptorAwareEventDecorator ,CONFIRMATION: Confirmation logger: Logger workersMap: Map<String, Workers> eventStoreFactory: EventStoreFactory dataFetcher: ExecutorService dataWriter: ExecutorService meterFactory: MeterFactory storageTransactionManagerFactory: StorageTransactionManagerFactory eventInterceptors: EventInterceptors blacklistedSendAfter: int eventDecorator: EventDecorator running: boolean defaultLimit: long timeout: long newPermitsTimeout: long checkSequenceNrForSnapshots: boolean ,initContext{ Params : String,boolean Returns : void} initContext{ Params : String,boolean,long,long Returns : void} deleteContext{ Params : String Returns : void} deleteContext{ Params : String,boolean Returns : void} deleteAllEventData{ Params : String Returns : Mono<Void>} cancel{ Params : String Returns : void} workers{ Params : String Returns : Workers} transformEvents{ Params : String,int,Flux<EventWithToken> Returns : Flux<Long>} appendSnapshot{ Params : String,Event,Authentication Returns : Mono<Void>} validateSnapshotSequence{ Params : String,Event Returns : void} storeSnapshot{ Params : String,Event Returns : Mono<Event>} handleStoreSnapshotErrors{ Params : String,DefaultExecutionContext,Mono<Event> Returns : Mono<Event>} attachStoreSnapshotMetrics{ Params : String,Mono<Event> Returns : Mono<Event>} appendEvents{ Params : String,Flux<SerializedEvent>,Authentication Returns : Mono<Void>} prepareAndStoreBatch{ Params : String,DefaultExecutionContext,Flux<Event> Returns : Flux<Void>} storeBatch{ Params : String,DefaultExecutionContext,Flux<List<Event>> Returns : Flux<Void>} handleStoreEventErrors{ Params : DefaultExecutionContext,Flux<Void> Returns : Flux<Void>} attachStoreEventMetrics{ Params : String,Flux<Void> Returns : Flux<Void>} aggregateEvents{ Params : String,Authentication,GetAggregateEventsRequest Returns : Flux<SerializedEvent>} count{ Params : Flux<T>,IntConsumer Returns : Publisher<T>} runInDataFetcherPool{ Params : Runnable,Consumer<Exception> Returns : void} runInPool{ Params : ExecutorService,Runnable,Consumer<Exception> Returns : void} getMaxSequence{ Params : GetAggregateEventsRequest Returns : long} aggregateSnapshots{ Params : String,Authentication,GetAggregateSnapshotsRequest Returns : Flux<SerializedEvent>} onNext{ Params : SerializedEvent Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} listAggregateSnapshots{ Params : String,Authentication,GetAggregateSnapshotsRequest,StreamObserver<SerializedEvent> Returns : void} events{ Params : String,Authentication,Flux<GetEventsRequest> Returns : Flux<SerializedEventWithToken>} onNext{ Params : SerializedEventWithToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} listEvents{ Params : String,Authentication,StreamObserver<SerializedEventWithToken> Returns : StreamObserver<GetEventsRequest>} onNext{ Params : GetEventsRequest Returns : void} onNext{ Params : SerializedEventWithToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} firstEventToken{ Params : String Returns : Mono<Long>} lastEventToken{ Params : String Returns : Mono<Long>} eventTokenAt{ Params : String,Instant Returns : Mono<Long>} onNext{ Params : TrackingToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} getTokenAt{ Params : String,GetTokenAtRequest,StreamObserver<TrackingToken> Returns : void} highestSequenceNumber{ Params : String,String Returns : Mono<Long>} onNext{ Params : ReadHighestSequenceNrResponse Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} readHighestSequenceNr{ Params : String,ReadHighestSequenceNrRequest,StreamObserver<ReadHighestSequenceNrResponse> Returns : void} getHighestSequenceNr{ Params : String,String,int,long Returns : CompletableFuture<Long>} queryEvents{ Params : String,Flux<QueryEventsRequest>,Authentication Returns : Flux<QueryEventsResponse>} onNext{ Params : QueryEventsResponse Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} queryEvents{ Params : String,Authentication,StreamObserver<QueryEventsResponse> Returns : StreamObserver<QueryEventsRequest>} stop{ Params :  Returns : void} start{ Params :  Returns : void} isRunning{ Params :  Returns : boolean} getPhase{ Params :  Returns : int} checkPermits{ Params :  Returns : void} getLastEvent{ Params : String Returns : long} getLastSnapshot{ Params : String Returns : long} eventTransactionsIterator{ Params : String,long,long Returns : CloseableIterator<SerializedTransactionWithToken>} eventIterator{ Params : String,long Returns : CloseableIterator<SerializedEventWithToken>} snapshotTransactionsIterator{ Params : String,long,long Returns : CloseableIterator<SerializedTransactionWithToken>} syncEvents{ Params : String,long,int,List<Event> Returns : long} syncSnapshots{ Params : String,long,int,List<Event> Returns : long} getWaitingEventTransactions{ Params : String Returns : long} getWaitingSnapshotTransactions{ Params : String Returns : long} getBackupFilenames{ Params : String,EventType,long,int,boolean Returns : Stream<String>} isClientException{ Params : Throwable Returns : boolean} firstToken{ Params : String Returns : long} firstSnapshotToken{ Params : String Returns : long} activeContext{ Params : String Returns : boolean} getFirstCompletedSegment{ Params : String,EventType Returns : long} compact{ Params : String Returns : Mono<Void>} getSnapshotStorage{ Params : String Returns : EventStorageEngine} ensureInitialized{ Params : boolean,long,long Returns : void} close{ Params : boolean Returns : void} createEventTracker{ Params : long,String,boolean,StreamObserver<SerializedEventWithToken> Returns : TrackingEventProcessorManager.EventTracker} triggerTrackerEventProcessors{ Params :  Returns : void} cancelTrackingEventProcessors{ Params :  Returns : void} validateActiveConnections{ Params :  Returns : void} compact{ Params :  Returns : Mono<Void>} decorateEvent{ Params : SerializedEvent Returns : SerializedEvent} decorateEventWithToken{ Params : SerializedEventWithToken Returns : SerializedEventWithToken} decorateEventWithToken{ Params : EventWithToken Returns : EventWithToken} ,deleteAllEventData transformEvents appendSnapshot appendEvents aggregateEvents aggregateSnapshots onNext onError onCompleted events onNext onError onCompleted onNext onNext onError onCompleted onError onCompleted firstEventToken lastEventToken eventTokenAt onNext onError onCompleted highestSequenceNumber onNext onError onCompleted queryEvents onNext onError onCompleted stop start isRunning getPhase compact decorateEvent decorateEventWithToken decorateEventWithToken ,,,,EventStore EventStoreTransformer SmartLifecycle ,boolean ,,boolean ,ConcurrentHashMap MeterFactory DefaultMetricCollector DefaultEventDecorator CustomizableThreadFactory CustomizableThreadFactory MessagingPlatformException DefaultExecutionContext MessagingPlatformException MessagingPlatformException DefaultExecutionContext MessagingPlatformException InterceptorAwareEventDecorator AtomicInteger RejectedExecutionException StreamObserver InterceptorAwareEventDecorator StreamObserver StreamObserver AtomicReference InterceptorAwareEventDecorator StreamObserver StreamObserver StreamObserver CompletableFuture StreamObserver InterceptorAwareEventDecorator QueryEventsRequestStreamObserver Object EventWriteStorage SnapshotWriteStorage AggregateReader SnapshotReader TrackingEventProcessorManager EventStreamReader EventStreamReader SyncStorage SyncStorage DefaultExecutionContext SerializedEvent SerializedEventWithToken ,: , context
axon-server-se-master,io.axoniq.axonserver.localstorage,Workers,3,2,0,0,0,false,0 ,io.axoniq.axonserver.message.event.EventStore EventStoreTransformer SmartLifecycle ,Workers InterceptorAwareEventDecorator ,eventWriteStorage: EventWriteStorage snapshotWriteStorage: SnapshotWriteStorage aggregateReader: AggregateReader eventStreamReader: EventStreamReader snapshotStreamReader: EventStreamReader eventStorageEngine: EventStorageEngine snapshotStorageEngine: EventStorageEngine context: String eventSyncStorage: SyncStorage snapshotSyncStorage: SyncStorage trackingEventManager: TrackingEventProcessorManager gauge: Gauge snapshotGauge: Gauge initLock: Object initialized: boolean ,initContext{ Params : String,boolean Returns : void} initContext{ Params : String,boolean,long,long Returns : void} deleteContext{ Params : String Returns : void} deleteContext{ Params : String,boolean Returns : void} deleteAllEventData{ Params : String Returns : Mono<Void>} cancel{ Params : String Returns : void} workers{ Params : String Returns : Workers} transformEvents{ Params : String,int,Flux<EventWithToken> Returns : Flux<Long>} appendSnapshot{ Params : String,Event,Authentication Returns : Mono<Void>} validateSnapshotSequence{ Params : String,Event Returns : void} storeSnapshot{ Params : String,Event Returns : Mono<Event>} handleStoreSnapshotErrors{ Params : String,DefaultExecutionContext,Mono<Event> Returns : Mono<Event>} attachStoreSnapshotMetrics{ Params : String,Mono<Event> Returns : Mono<Event>} appendEvents{ Params : String,Flux<SerializedEvent>,Authentication Returns : Mono<Void>} prepareAndStoreBatch{ Params : String,DefaultExecutionContext,Flux<Event> Returns : Flux<Void>} storeBatch{ Params : String,DefaultExecutionContext,Flux<List<Event>> Returns : Flux<Void>} handleStoreEventErrors{ Params : DefaultExecutionContext,Flux<Void> Returns : Flux<Void>} attachStoreEventMetrics{ Params : String,Flux<Void> Returns : Flux<Void>} aggregateEvents{ Params : String,Authentication,GetAggregateEventsRequest Returns : Flux<SerializedEvent>} count{ Params : Flux<T>,IntConsumer Returns : Publisher<T>} runInDataFetcherPool{ Params : Runnable,Consumer<Exception> Returns : void} runInPool{ Params : ExecutorService,Runnable,Consumer<Exception> Returns : void} getMaxSequence{ Params : GetAggregateEventsRequest Returns : long} aggregateSnapshots{ Params : String,Authentication,GetAggregateSnapshotsRequest Returns : Flux<SerializedEvent>} onNext{ Params : SerializedEvent Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} listAggregateSnapshots{ Params : String,Authentication,GetAggregateSnapshotsRequest,StreamObserver<SerializedEvent> Returns : void} events{ Params : String,Authentication,Flux<GetEventsRequest> Returns : Flux<SerializedEventWithToken>} onNext{ Params : SerializedEventWithToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} listEvents{ Params : String,Authentication,StreamObserver<SerializedEventWithToken> Returns : StreamObserver<GetEventsRequest>} onNext{ Params : GetEventsRequest Returns : void} onNext{ Params : SerializedEventWithToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} firstEventToken{ Params : String Returns : Mono<Long>} lastEventToken{ Params : String Returns : Mono<Long>} eventTokenAt{ Params : String,Instant Returns : Mono<Long>} onNext{ Params : TrackingToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} getTokenAt{ Params : String,GetTokenAtRequest,StreamObserver<TrackingToken> Returns : void} highestSequenceNumber{ Params : String,String Returns : Mono<Long>} onNext{ Params : ReadHighestSequenceNrResponse Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} readHighestSequenceNr{ Params : String,ReadHighestSequenceNrRequest,StreamObserver<ReadHighestSequenceNrResponse> Returns : void} getHighestSequenceNr{ Params : String,String,int,long Returns : CompletableFuture<Long>} queryEvents{ Params : String,Flux<QueryEventsRequest>,Authentication Returns : Flux<QueryEventsResponse>} onNext{ Params : QueryEventsResponse Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} queryEvents{ Params : String,Authentication,StreamObserver<QueryEventsResponse> Returns : StreamObserver<QueryEventsRequest>} stop{ Params :  Returns : void} start{ Params :  Returns : void} isRunning{ Params :  Returns : boolean} getPhase{ Params :  Returns : int} checkPermits{ Params :  Returns : void} getLastEvent{ Params : String Returns : long} getLastSnapshot{ Params : String Returns : long} eventTransactionsIterator{ Params : String,long,long Returns : CloseableIterator<SerializedTransactionWithToken>} eventIterator{ Params : String,long Returns : CloseableIterator<SerializedEventWithToken>} snapshotTransactionsIterator{ Params : String,long,long Returns : CloseableIterator<SerializedTransactionWithToken>} syncEvents{ Params : String,long,int,List<Event> Returns : long} syncSnapshots{ Params : String,long,int,List<Event> Returns : long} getWaitingEventTransactions{ Params : String Returns : long} getWaitingSnapshotTransactions{ Params : String Returns : long} getBackupFilenames{ Params : String,EventType,long,int,boolean Returns : Stream<String>} isClientException{ Params : Throwable Returns : boolean} firstToken{ Params : String Returns : long} firstSnapshotToken{ Params : String Returns : long} activeContext{ Params : String Returns : boolean} getFirstCompletedSegment{ Params : String,EventType Returns : long} compact{ Params : String Returns : Mono<Void>} getSnapshotStorage{ Params : String Returns : EventStorageEngine} ensureInitialized{ Params : boolean,long,long Returns : void} close{ Params : boolean Returns : void} createEventTracker{ Params : long,String,boolean,StreamObserver<SerializedEventWithToken> Returns : TrackingEventProcessorManager.EventTracker} triggerTrackerEventProcessors{ Params :  Returns : void} cancelTrackingEventProcessors{ Params :  Returns : void} validateActiveConnections{ Params :  Returns : void} compact{ Params :  Returns : Mono<Void>} decorateEvent{ Params : SerializedEvent Returns : SerializedEvent} decorateEventWithToken{ Params : SerializedEventWithToken Returns : SerializedEventWithToken} decorateEventWithToken{ Params : EventWithToken Returns : EventWithToken} ,deleteAllEventData transformEvents appendSnapshot appendEvents aggregateEvents aggregateSnapshots onNext onError onCompleted events onNext onError onCompleted onNext onNext onError onCompleted onError onCompleted firstEventToken lastEventToken eventTokenAt onNext onError onCompleted highestSequenceNumber onNext onError onCompleted queryEvents onNext onError onCompleted stop start isRunning getPhase compact decorateEvent decorateEventWithToken decorateEventWithToken ,,,,,boolean ,,boolean ,Object EventWriteStorage SnapshotWriteStorage AggregateReader SnapshotReader TrackingEventProcessorManager EventStreamReader EventStreamReader SyncStorage SyncStorage ,eventStorageEngine: 
axon-server-se-master,io.axoniq.axonserver.localstorage,InterceptorAwareEventDecorator,3,2,0,0,0,false,0 ,io.axoniq.axonserver.message.event.EventStore EventStoreTransformer SmartLifecycle ,Workers InterceptorAwareEventDecorator ,unitOfWork: DefaultExecutionContext ,initContext{ Params : String,boolean Returns : void} initContext{ Params : String,boolean,long,long Returns : void} deleteContext{ Params : String Returns : void} deleteContext{ Params : String,boolean Returns : void} deleteAllEventData{ Params : String Returns : Mono<Void>} cancel{ Params : String Returns : void} workers{ Params : String Returns : Workers} transformEvents{ Params : String,int,Flux<EventWithToken> Returns : Flux<Long>} appendSnapshot{ Params : String,Event,Authentication Returns : Mono<Void>} validateSnapshotSequence{ Params : String,Event Returns : void} storeSnapshot{ Params : String,Event Returns : Mono<Event>} handleStoreSnapshotErrors{ Params : String,DefaultExecutionContext,Mono<Event> Returns : Mono<Event>} attachStoreSnapshotMetrics{ Params : String,Mono<Event> Returns : Mono<Event>} appendEvents{ Params : String,Flux<SerializedEvent>,Authentication Returns : Mono<Void>} prepareAndStoreBatch{ Params : String,DefaultExecutionContext,Flux<Event> Returns : Flux<Void>} storeBatch{ Params : String,DefaultExecutionContext,Flux<List<Event>> Returns : Flux<Void>} handleStoreEventErrors{ Params : DefaultExecutionContext,Flux<Void> Returns : Flux<Void>} attachStoreEventMetrics{ Params : String,Flux<Void> Returns : Flux<Void>} aggregateEvents{ Params : String,Authentication,GetAggregateEventsRequest Returns : Flux<SerializedEvent>} count{ Params : Flux<T>,IntConsumer Returns : Publisher<T>} runInDataFetcherPool{ Params : Runnable,Consumer<Exception> Returns : void} runInPool{ Params : ExecutorService,Runnable,Consumer<Exception> Returns : void} getMaxSequence{ Params : GetAggregateEventsRequest Returns : long} aggregateSnapshots{ Params : String,Authentication,GetAggregateSnapshotsRequest Returns : Flux<SerializedEvent>} onNext{ Params : SerializedEvent Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} listAggregateSnapshots{ Params : String,Authentication,GetAggregateSnapshotsRequest,StreamObserver<SerializedEvent> Returns : void} events{ Params : String,Authentication,Flux<GetEventsRequest> Returns : Flux<SerializedEventWithToken>} onNext{ Params : SerializedEventWithToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} listEvents{ Params : String,Authentication,StreamObserver<SerializedEventWithToken> Returns : StreamObserver<GetEventsRequest>} onNext{ Params : GetEventsRequest Returns : void} onNext{ Params : SerializedEventWithToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} firstEventToken{ Params : String Returns : Mono<Long>} lastEventToken{ Params : String Returns : Mono<Long>} eventTokenAt{ Params : String,Instant Returns : Mono<Long>} onNext{ Params : TrackingToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} getTokenAt{ Params : String,GetTokenAtRequest,StreamObserver<TrackingToken> Returns : void} highestSequenceNumber{ Params : String,String Returns : Mono<Long>} onNext{ Params : ReadHighestSequenceNrResponse Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} readHighestSequenceNr{ Params : String,ReadHighestSequenceNrRequest,StreamObserver<ReadHighestSequenceNrResponse> Returns : void} getHighestSequenceNr{ Params : String,String,int,long Returns : CompletableFuture<Long>} queryEvents{ Params : String,Flux<QueryEventsRequest>,Authentication Returns : Flux<QueryEventsResponse>} onNext{ Params : QueryEventsResponse Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} queryEvents{ Params : String,Authentication,StreamObserver<QueryEventsResponse> Returns : StreamObserver<QueryEventsRequest>} stop{ Params :  Returns : void} start{ Params :  Returns : void} isRunning{ Params :  Returns : boolean} getPhase{ Params :  Returns : int} checkPermits{ Params :  Returns : void} getLastEvent{ Params : String Returns : long} getLastSnapshot{ Params : String Returns : long} eventTransactionsIterator{ Params : String,long,long Returns : CloseableIterator<SerializedTransactionWithToken>} eventIterator{ Params : String,long Returns : CloseableIterator<SerializedEventWithToken>} snapshotTransactionsIterator{ Params : String,long,long Returns : CloseableIterator<SerializedTransactionWithToken>} syncEvents{ Params : String,long,int,List<Event> Returns : long} syncSnapshots{ Params : String,long,int,List<Event> Returns : long} getWaitingEventTransactions{ Params : String Returns : long} getWaitingSnapshotTransactions{ Params : String Returns : long} getBackupFilenames{ Params : String,EventType,long,int,boolean Returns : Stream<String>} isClientException{ Params : Throwable Returns : boolean} firstToken{ Params : String Returns : long} firstSnapshotToken{ Params : String Returns : long} activeContext{ Params : String Returns : boolean} getFirstCompletedSegment{ Params : String,EventType Returns : long} compact{ Params : String Returns : Mono<Void>} getSnapshotStorage{ Params : String Returns : EventStorageEngine} ensureInitialized{ Params : boolean,long,long Returns : void} close{ Params : boolean Returns : void} createEventTracker{ Params : long,String,boolean,StreamObserver<SerializedEventWithToken> Returns : TrackingEventProcessorManager.EventTracker} triggerTrackerEventProcessors{ Params :  Returns : void} cancelTrackingEventProcessors{ Params :  Returns : void} validateActiveConnections{ Params :  Returns : void} compact{ Params :  Returns : Mono<Void>} decorateEvent{ Params : SerializedEvent Returns : SerializedEvent} decorateEventWithToken{ Params : SerializedEventWithToken Returns : SerializedEventWithToken} decorateEventWithToken{ Params : EventWithToken Returns : EventWithToken} ,deleteAllEventData transformEvents appendSnapshot appendEvents aggregateEvents aggregateSnapshots onNext onError onCompleted events onNext onError onCompleted onNext onNext onError onCompleted onError onCompleted firstEventToken lastEventToken eventTokenAt onNext onError onCompleted highestSequenceNumber onNext onError onCompleted queryEvents onNext onError onCompleted stop start isRunning getPhase compact decorateEvent decorateEventWithToken decorateEventWithToken ,,,,EventDecorator ,,,,DefaultExecutionContext SerializedEvent SerializedEventWithToken ,unitOfWork: , exception
axon-server-se-master,io.axoniq.axonserver.localstorage.query,Expression,2,1,0,0,0,true,0 ,io.axoniq.axonserver.message.event.EventStore EventStoreTransformer SmartLifecycle ,0 ,,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,,,,,,,,,,unitOfWork: , exception
axon-server-se-master,io.axoniq.axonserver.localstorage.query,ExpressionContext,1,1,0,0,0,false,0 ,0 ,0 ,contextData: Map<String, Object> subContexts: Map<Object, ExpressionContext> ,get{ Params : String Returns : T} put{ Params : String,T Returns : T} computeIfAbsent{ Params : String,Supplier<T> Returns : T} scoped{ Params : Object Returns : ExpressionContext} ,,,,,,Map<Object,ExpressionContext> ,,Map<Object,ExpressionContext> ,ConcurrentHashMap ConcurrentHashMap ExpressionContext ,subContexts: , scope, e -> new ExpressionContext()
axon-server-se-master,io.axoniq.axonserver.localstorage.query,ExpressionFactory,2,1,0,0,0,true,0 ,0 ,0 ,,buildExpression{ Params : QueryElement,ExpressionRegistry Returns : Optional<Expression>} buildPipeExpression{ Params : QueryElement,ExpressionRegistry Returns : Optional<PipeExpression>} ,,,,,,,,,,subContexts: , scope, e -> new ExpressionContext()
axon-server-se-master,io.axoniq.axonserver.localstorage.query,ExpressionRegistry,1,1,0,0,0,false,0 ,0 ,0 ,expressionFactories: List<ExpressionFactory> ,resolveExpression{ Params : QueryElement Returns : Expression} resolvePipeExpression{ Params : QueryElement Returns : PipeExpression} ,,,,,,List<ExpressionFactory> ,,List<ExpressionFactory> ,CopyOnWriteArrayList IllegalArgumentException IllegalArgumentException ,pipelineEntry: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query,ExpressionResult,2,1,0,0,0,true,0 ,0 ,0 ,,isTrue{ Params :  Returns : boolean} getValue{ Params :  Returns : Object} min{ Params : ExpressionResult Returns : ExpressionResult} max{ Params : ExpressionResult Returns : ExpressionResult} getByIdentifier{ Params : String Returns : ExpressionResult} isNull{ Params :  Returns : boolean} isNonNull{ Params :  Returns : boolean} divide{ Params : ExpressionResult Returns : ExpressionResult} add{ Params : ExpressionResult Returns : ExpressionResult} subtract{ Params : ExpressionResult Returns : ExpressionResult} multiply{ Params : ExpressionResult Returns : ExpressionResult} asJson{ Params :  Returns : Object} isNumeric{ Params :  Returns : boolean} getNumericValue{ Params :  Returns : BigDecimal} count{ Params :  Returns : long} asXml{ Params :  Returns : Object} modulo{ Params : ExpressionResult Returns : ExpressionResult} ,,,,,,,,,UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException InputSource StringReader UnsupportedOperationException ,: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions,AbstractExpressionFactory,1,1,1,0,0,false,0 ,ExpressionFactory ,0 ,,buildParameters{ Params : List<? extends QueryElement>,ExpressionRegistry Returns : Expression[]} optionalParameter{ Params : int,List<? extends QueryElement>,ExpressionRegistry Returns : Optional<Expression>} parameter{ Params : String,int,List<? extends QueryElement>,ExpressionRegistry Returns : Expression} ,,,,,ExpressionFactory ,,,,QueryExecutionException ,: , index, parameters, registry
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions,AndExpression,1,1,0,0,0,false,0 ,Expression PipeExpression ,0 ,alias: String parameters: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} ,apply alias process ,,,,Expression PipeExpression ,Expression[] ,,Expression[] ,,next: , value
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,AbstractArithmeticExpression,1,1,1,0,0,false,0 ,Expression ,0 ,alias: String first: Expression second: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} doCompute{ Params : ExpressionResult,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,doCompute ,Expression ,Expression ,,Expression ,IllegalArgumentException ,: , firstResult, secondResult
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,AbstractBooleanExpression,1,1,1,0,0,false,0 ,PipeExpression Expression ,0 ,alias: String first: Expression second: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} doEvaluate{ Params : ExpressionResult,ExpressionResult Returns : boolean} alias{ Params :  Returns : String} process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} sentIdentifiers{ Params : ExpressionContext Returns : Set<ExpressionResult>} ,apply alias process ,,,doEvaluate ,PipeExpression Expression ,,,,ConcurrentHashMap Object ,new ConcurrentHashMap<ExpressionResult, Object>(): , new Object()
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,AddExpression,1,1,0,0,0,false,AbstractArithmeticExpression ,0 ,0 ,,doCompute{ Params : ExpressionResult,ExpressionResult Returns : ExpressionResult} ,doCompute ,,,,,,,,,first: , second
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,ArithmeticExpressionFactory,1,1,0,0,0,false,AbstractExpressionFactory ,0 ,0 ,,doBuild{ Params : QueryElement,ExpressionRegistry Returns : Optional<AbstractArithmeticExpression>} buildExpression{ Params : QueryElement,ExpressionRegistry Returns : Optional<Expression>} buildPipeExpression{ Params : QueryElement,ExpressionRegistry Returns : Optional<PipeExpression>} ,buildExpression buildPipeExpression ,,,,,,,,AddExpression SubtractExpression MultiplyExpression DivideExpression ModuloExpression ,Optional: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,BinaryExpressionFactory,1,1,0,0,0,false,AbstractExpressionFactory ,0 ,0 ,,doBuild{ Params : QueryElement,ExpressionRegistry Returns : Optional<AbstractBooleanExpression>} buildExpression{ Params : QueryElement,ExpressionRegistry Returns : Optional<Expression>} buildPipeExpression{ Params : QueryElement,ExpressionRegistry Returns : Optional<PipeExpression>} ,buildExpression buildPipeExpression ,,,,,,,,EqExpression NotEqExpression GtExpression GtEqExpression LtExpression LtEqExpression InExpression ,: , element, registry
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,DivideExpression,1,1,0,0,0,false,AbstractArithmeticExpression ,0 ,0 ,,doCompute{ Params : ExpressionResult,ExpressionResult Returns : ExpressionResult} ,doCompute ,,,,,,,,,first: , second
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,EqExpression,1,1,0,0,0,false,AbstractBooleanExpression ,0 ,0 ,,doEvaluate{ Params : ExpressionResult,ExpressionResult Returns : boolean} ,doEvaluate ,,,,,,,,,Objects: , first, second
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,GtEqExpression,1,1,0,0,0,false,AbstractBooleanExpression ,0 ,0 ,,doEvaluate{ Params : ExpressionResult,ExpressionResult Returns : boolean} ,doEvaluate ,,,,,,,,,Objects: , first, second, ExpressionResult::compareTo
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,GtExpression,1,1,0,0,0,false,AbstractBooleanExpression ,0 ,0 ,,doEvaluate{ Params : ExpressionResult,ExpressionResult Returns : boolean} ,doEvaluate ,,,,,,,,,Objects: , first, second, ExpressionResult::compareTo
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,InExpression,1,1,0,0,0,false,AbstractBooleanExpression ,0 ,0 ,,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} doEvaluate{ Params : ExpressionResult,ExpressionResult Returns : boolean} ,apply doEvaluate ,,,,,,,,,Objects: , first, second
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,LtEqExpression,1,1,0,0,0,false,AbstractBooleanExpression ,0 ,0 ,,doEvaluate{ Params : ExpressionResult,ExpressionResult Returns : boolean} ,,,,,,,,,,Objects: , first, second, ExpressionResult::compareTo
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,LtExpression,1,1,0,0,0,false,AbstractBooleanExpression ,0 ,0 ,,doEvaluate{ Params : ExpressionResult,ExpressionResult Returns : boolean} ,,,,,,,,,,Objects: , first, second, ExpressionResult::compareTo
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,ModuloExpression,1,1,0,0,0,false,AbstractArithmeticExpression ,0 ,0 ,,doCompute{ Params : ExpressionResult,ExpressionResult Returns : ExpressionResult} ,doCompute ,,,,,,,,,first: , second
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,MultiplyExpression,1,1,0,0,0,false,AbstractArithmeticExpression ,0 ,0 ,,doCompute{ Params : ExpressionResult,ExpressionResult Returns : ExpressionResult} ,doCompute ,,,,,,,,,first: , second
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,NotEqExpression,1,1,0,0,0,false,AbstractBooleanExpression ,0 ,0 ,,doEvaluate{ Params : ExpressionResult,ExpressionResult Returns : boolean} ,doEvaluate ,,,,,,,,,Objects: , first, second
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,SubtractExpression,1,1,0,0,0,false,AbstractArithmeticExpression ,0 ,0 ,,doCompute{ Params : ExpressionResult,ExpressionResult Returns : ExpressionResult} ,doCompute ,,,,,,,,,first: , second
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,AbstractAggregationFunction,1,1,1,0,0,false,0 ,Expression PipeExpression ,0 ,alias: String ,alias{ Params :  Returns : String} process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} getColumnNames{ Params : List<String> Returns : List<String>} ,alias process getColumnNames ,,,,Expression PipeExpression ,,,,MapExpressionResult StringExpressionResult ,Collections: , alias
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,AvgExpression,1,1,0,0,0,false,AbstractAggregationFunction ,0 ,AvgValue ,expression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} getAverage{ Params :  Returns : BigDecimal} add{ Params : AvgValue Returns : AvgValue} ,apply ,,,,,Expression ,,Expression ,AtomicReference AvgValue NumericExpressionResult AvgValue NumericExpressionResult AvgValue ,newAvg: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,AvgValue,3,2,0,1,0,false,AbstractAggregationFunction ,0 ,AvgValue ,count: long sum: BigDecimal ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} getAverage{ Params :  Returns : BigDecimal} add{ Params : AvgValue Returns : AvgValue} ,apply ,,,,,BigDecimal ,,BigDecimal ,AvgValue ,sum: , other.sum
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,ConcatExpression,1,1,0,0,0,false,0 ,Expression ,0 ,alias: String valueExpression: Expression charsExpression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,Expression ,,Expression ,StringExpressionResult ,Collectors: , chars
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,ContainsExpression,1,1,0,0,0,false,AbstractBooleanExpression ,0 ,0 ,,doEvaluate{ Params : ExpressionResult,ExpressionResult Returns : boolean} ,doEvaluate ,,,,,,,,,first: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,CountExpression,1,1,0,0,0,false,AbstractAggregationFunction ,0 ,0 ,expression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} ,apply ,,,,,Expression ,,Expression ,NumericExpressionResult NumericExpressionResult ,expressionResult: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,FormatDateExpression,1,1,0,0,0,false,0 ,Expression PipeExpression ,0 ,alias: String valueExpression: Expression formatExpression: Expression timezoneExpression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} format{ Params : ExpressionContext,ExpressionResult,BigDecimal Returns : String} alias{ Params :  Returns : String} process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} getColumnNames{ Params : List<String> Returns : List<String>} ,apply alias process getColumnNames ,,,,Expression PipeExpression ,Expression ,,Expression ,StringLiteral StringExpressionResult SimpleDateFormat MapExpressionResult ,Collections: , alias
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,FunctionExpressionFactory,1,1,0,0,0,false,AbstractExpressionFactory ,0 ,0 ,COUNT: String MAX: String AVG: String MIN: String LIST: String CONTAINS: String JSONPATH: String SUBSTRING: String MATCH: String FORMATDATE: String MONTH: String DAY: String WEEK: String YEAR: String HOUR: String METADATA: String VALUE: String ,buildExpression{ Params : QueryElement,ExpressionRegistry Returns : Optional<Expression>} buildPipeExpression{ Params : QueryElement,ExpressionRegistry Returns : Optional<PipeExpression>} ,buildExpression buildPipeExpression ,,,,,,,,CountExpression MaxExpression AvgExpression MinExpression ListExpression StringLiteral NumericLiteral Identifier ContainsExpression JsonPathExpression XPathExpression UpperExpression LowerExpression LengthExpression OrExpression AndExpression NotExpression SubstringExpression ConcatExpression LeftExpression RightExpression MatchExpression FormatDateExpression FormatDateExpression StringLiteral FormatDateExpression StringLiteral FormatDateExpression StringLiteral FormatDateExpression StringLiteral FormatDateExpression StringLiteral MetaDataExpression SelectExpression GroupByExpression LimitExpression NumericLiteral SortExpression OrExpression AndExpression CountExpression ContainsExpression MatchExpression NotExpression AvgExpression MaxExpression MinExpression SubstringExpression FormatDateExpression FormatDateExpression StringLiteral FormatDateExpression StringLiteral FormatDateExpression StringLiteral FormatDateExpression StringLiteral FormatDateExpression StringLiteral ,Optional: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,GroupByExpression,1,1,0,0,0,false,0 ,PipeExpression ,0 ,grouper: ListExpression valueExpressions: Expression ,process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} getColumnNames{ Params : List<String> Returns : List<String>} ,process getColumnNames ,,,,PipeExpression ,Expression[] ,,Expression[] ,HashMap MapExpressionResult ArrayList ,value: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,JsonPathExpression,1,1,0,0,0,false,0 ,Expression ,0 ,alias: String document: Expression jsonPath: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} toExpressionResult{ Params : Object Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,Expression ,,Expression ,ArrayList ListExpressionResult StringExpressionResult NumericExpressionResult JSONExpressionResult ,((Number) value): 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,LeftExpression,1,1,0,0,0,false,0 ,Expression ,0 ,alias: String valueExpression: Expression charsExpression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,Expression ,,Expression ,StringExpressionResult StringExpressionResult ,string: , 0, chars
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,LengthExpression,1,1,0,0,0,false,0 ,Expression ,0 ,alias: String expression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,Expression ,,Expression ,NumericExpressionResult ,String: , value
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,LimitExpression,1,1,0,0,0,false,0 ,PipeExpression ,0 ,resultComparator: Comparator<QueryResult> limit: long ,getColumnNames{ Params : List<String> Returns : List<String>} process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} ,getColumnNames process ,,,,PipeExpression ,long ,,long ,ConcurrentSkipListSet ,results: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,LowerExpression,1,1,0,0,0,false,0 ,Expression ,0 ,alias: String expression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,Expression ,,Expression ,StringExpressionResult ,value: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,MatchExpression,1,1,0,0,0,false,0 ,Expression PipeExpression ,0 ,alias: String valueExpression: Expression patternExpression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} getColumnNames{ Params : List<String> Returns : List<String>} ,apply alias process getColumnNames ,,,,Expression PipeExpression ,Expression ,,Expression ,,next: , result
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,MaxExpression,1,1,0,0,0,false,AbstractAggregationFunction ,0 ,0 ,expression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} ,apply ,,,,,Expression ,,Expression ,,l: , r
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,MetaDataExpression,1,1,0,0,0,false,0 ,Expression ,0 ,alias: String expressions: Expression ,buildAlias{ Params : Expression[] Returns : String} apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,Expression[] ,,Expression[] ,StringBuilder ,result: , identifier
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,MinExpression,1,1,0,0,0,false,AbstractAggregationFunction ,0 ,0 ,expression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} ,apply ,,,,,Expression ,,Expression ,,l: , r
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,RightExpression,1,1,0,0,0,false,0 ,Expression ,0 ,alias: String valueExpression: Expression charsExpression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,Expression ,,Expression ,StringExpressionResult StringExpressionResult ,string: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,SelectExpression,1,1,0,0,0,false,0 ,PipeExpression ,0 ,expressions: Expression ,process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} getColumnNames{ Params : List<String> Returns : List<String>} ,process getColumnNames ,,,,PipeExpression ,Expression[] ,,Expression[] ,HashMap MapExpressionResult ArrayList ,value: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,SubstringExpression,1,1,0,0,0,false,0 ,Expression PipeExpression ,0 ,alias: String expressions: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} doSubstring{ Params : ExpressionContext,ExpressionResult,String Returns : String} alias{ Params :  Returns : String} process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} getColumnNames{ Params : List<String> Returns : List<String>} ,apply alias process getColumnNames ,,,,Expression PipeExpression ,Expression[] ,,Expression[] ,StringExpressionResult MapExpressionResult ,Collections: , alias
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,UpperExpression,1,1,0,0,0,false,0 ,Expression ,0 ,alias: String expression: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,Expression ,,Expression ,StringExpressionResult ,value: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,XPathExpression,1,1,0,0,0,false,0 ,Expression ,0 ,alias: String document: Expression xpath: Expression xpathFactory: XPathFactory outputType: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} outputType{ Params : ExpressionResult Returns : QName} toExpressionResult{ Params : Object,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,Expression ,,Expression ,RuntimeException ArrayList ListExpressionResult NumericExpressionResult StringExpressionResult NumericExpressionResult StringExpressionResult XmlExpressionResult ,((Text) value): 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions,Identifier,1,1,0,0,0,false,0 ,Expression ,0 ,identifiers: String alias: String ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,String ,,String ,,result: , identifier
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions,ListExpression,1,1,0,0,0,false,0 ,Expression ,0 ,alias: String expressions: Expression ,asListExpression{ Params : Expression Returns : ListExpression} apply{ Params : ExpressionContext,ExpressionResult Returns : ListExpressionResult} items{ Params :  Returns : List<Expression>} alias{ Params :  Returns : String} columnNames{ Params :  Returns : List<String>} ,apply alias ,asListExpression ,,,Expression ,Expression[] ,,Expression[] ,ListExpression ArrayList ListExpressionResult ,Collectors: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions,NotExpression,1,1,0,0,0,false,0 ,Expression PipeExpression ,0 ,alias: String parameters: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} ,apply alias process ,,,,Expression PipeExpression ,Expression[] ,,Expression[] ,,next: , value
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions,NumericLiteral,1,1,0,0,0,false,0 ,Expression ,0 ,alias: String literal: String ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,String ,,String ,NumericExpressionResult ,next: , value
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions,OrExpression,1,1,0,0,0,false,0 ,Expression PipeExpression ,0 ,alias: String parameters: Expression ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} ,apply alias process ,,,,Expression PipeExpression ,Expression[] ,,Expression[] ,,next: , value
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions,SortExpression,1,1,0,0,0,false,0 ,PipeExpression ,0 ,sortKeys: Expression ,process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} ,process ,,,,PipeExpression ,Expression[] ,,Expression[] ,ArrayList ListExpressionResult ,result: , new ListExpressionResult(sortValues)
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions,StringLiteral,1,1,0,0,0,false,0 ,Expression ,0 ,literal: String ,apply{ Params : ExpressionContext,ExpressionResult Returns : ExpressionResult} alias{ Params :  Returns : String} ,apply alias ,,,,Expression ,String ,,String ,StringExpressionResult ,result: , new ListExpressionResult(sortValues)
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.timeconstraints,NoOpExpression,1,1,0,0,0,false,0 ,PipeExpression ,0 ,INSTANCE: NoOpExpression ,instance{ Params :  Returns : NoOpExpression} process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} ,process ,instance ,,,PipeExpression ,,,,NoOpExpression ,next: , result
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.timeconstraints,TimeConstraintExpressionFactory,1,1,0,0,0,false,AbstractExpressionFactory ,0 ,0 ,,buildExpression{ Params : QueryElement,ExpressionRegistry Returns : Optional<Expression>} buildPipeExpression{ Params : QueryElement,ExpressionRegistry Returns : Optional<PipeExpression>} ,buildExpression buildPipeExpression ,,,,,,,,,Optional: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query,PipeExpression,2,1,0,0,0,true,AbstractExpressionFactory ,0 ,0 ,,process{ Params : ExpressionContext,QueryResult,Pipeline Returns : boolean} getColumnNames{ Params : List<String> Returns : List<String>} ,,,,,,,,,,Optional: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query,Pipeline,2,1,0,0,0,true,AbstractExpressionFactory ,0 ,0 ,,process{ Params : QueryResult Returns : boolean} columnNames{ Params : List<String> Returns : List<String>} ,,,,,,,,,,Optional: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query,QueryEventsRequestStreamObserver,1,1,0,0,0,false,0 ,StreamObserver<QueryEventsRequest> ,Sender ,TIME_WINDOW_FIELD: int TIME_WINDOW_CUSTOM: String logger: Logger senderService: ScheduledExecutorService COLUMN_NAME_TOKEN: String snapshotWriteStorage: SnapshotWriteStorage snapshotStreamReader: EventStreamReader eventWriteStorage: EventWriteStorage eventStreamReader: EventStreamReader aggregateReader: AggregateReader defaultLimit: long deadline: long eventDecorator: EventDecorator responseObserver: StreamObserver<QueryEventsResponse> senderRef: AtomicReference<Sender> registration: Registration pipeLine: Pipeline ,onNext{ Params : QueryEventsRequest Returns : void} getValueAsLong{ Params : long,QueryElement Returns : long} operatorIn{ Params : String,String Returns : boolean} isProjectOperation{ Params : String Returns : boolean} getTimeWindow{ Params : QueryEventsRequest Returns : String} pushEventFromStream{ Params : long,List<Event>,Pipeline Returns : void} cancelRegistration{ Params :  Returns : void} pushEvent{ Params : EventWithToken,Pipeline Returns : boolean} deadlineExpired{ Params :  Returns : boolean} sendColumns{ Params : Pipeline,boolean Returns : void} send{ Params : QueryResult Returns : boolean} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} close{ Params :  Returns : void} addPermits{ Params : long Returns : void} start{ Params :  Returns : boolean} stop{ Params :  Returns : void} send{ Params : Object,QueryResult Returns : boolean} deadlineExpired{ Params :  Returns : boolean} permitsLeft{ Params :  Returns : boolean} sendAll{ Params :  Returns : void} sendToClient{ Params : StreamObserver<QueryEventsResponse>,QueryResult Returns : void} addDeleted{ Params : QueryResult,RowResponse.Builder Returns : void} addSortValues{ Params : QueryResult,RowResponse.Builder Returns : void} addIdValues{ Params : QueryResult,RowResponse.Builder Returns : void} wrap{ Params : ExpressionResult Returns : QueryValue} sendColumnNames{ Params : List<String> Returns : void} completed{ Params :  Returns : void} ,onNext onError onCompleted ,,,,StreamObserver ,Pipeline ,,Pipeline ,DaemonThreadFactory AtomicReference Sender EventStoreQueryParser QueryProcessor QueryOptions DefaultQueryResult EventExpressionResult ArrayList HashMap AtomicLong AtomicBoolean AtomicLong MessagingPlatformException ,StreamObserverUtils: , responseObserver
axon-server-se-master,io.axoniq.axonserver.localstorage.query,Sender,3,2,0,0,0,false,0 ,StreamObserver<QueryEventsRequest> ,Sender ,liveUpdates: boolean deadline: long messages: Map<Object, QueryResult> generatedId: AtomicLong permits: AtomicLong started: AtomicBoolean sendTask: ScheduledFuture<?> columns: List<String> completeMessage: QueryEventsResponse ,onNext{ Params : QueryEventsRequest Returns : void} getValueAsLong{ Params : long,QueryElement Returns : long} operatorIn{ Params : String,String Returns : boolean} isProjectOperation{ Params : String Returns : boolean} getTimeWindow{ Params : QueryEventsRequest Returns : String} pushEventFromStream{ Params : long,List<Event>,Pipeline Returns : void} cancelRegistration{ Params :  Returns : void} pushEvent{ Params : EventWithToken,Pipeline Returns : boolean} deadlineExpired{ Params :  Returns : boolean} sendColumns{ Params : Pipeline,boolean Returns : void} send{ Params : QueryResult Returns : boolean} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} close{ Params :  Returns : void} addPermits{ Params : long Returns : void} start{ Params :  Returns : boolean} stop{ Params :  Returns : void} send{ Params : Object,QueryResult Returns : boolean} deadlineExpired{ Params :  Returns : boolean} permitsLeft{ Params :  Returns : boolean} sendAll{ Params :  Returns : void} sendToClient{ Params : StreamObserver<QueryEventsResponse>,QueryResult Returns : void} addDeleted{ Params : QueryResult,RowResponse.Builder Returns : void} addSortValues{ Params : QueryResult,RowResponse.Builder Returns : void} addIdValues{ Params : QueryResult,RowResponse.Builder Returns : void} wrap{ Params : ExpressionResult Returns : QueryValue} sendColumnNames{ Params : List<String> Returns : void} completed{ Params :  Returns : void} ,onNext onError onCompleted ,,,,,QueryEventsResponse ,,QueryEventsResponse ,HashMap AtomicLong AtomicBoolean AtomicLong MessagingPlatformException ,Confirmation: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query,QueryExecutionException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.localstorage.query,QueryMetadata,1,1,0,0,0,false,0 ,0 ,0 ,identifyingColumns: List<String> sortColumns: List<String> ,getIdentifyingColumns{ Params :  Returns : List<String>} setIdentifyingColumns{ Params : List<String> Returns : void} getSortColumns{ Params :  Returns : List<String>} setSortColumns{ Params : List<String> Returns : void} ,,,,,,List<String> ,,List<String> ,,Confirmation: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query,QueryProcessor,1,1,0,0,0,false,0 ,0 ,ChainedPipeExpression ,expressionRegistry: ExpressionRegistry ,buildPipeline{ Params : Query,Function<QueryResult,Boolean> Returns : Pipeline} process{ Params : QueryResult Returns : boolean} columnNames{ Params : List<String> Returns : List<String>} ,process columnNames ,,,,,,,,ExpressionRegistry LinkedList ChainedPipeExpression ChainedPipeExpression ExpressionContext ,expressionRegistry: , pipelineEntry
axon-server-se-master,io.axoniq.axonserver.localstorage.query,ChainedPipeExpression,3,2,0,0,0,false,0 ,0 ,ChainedPipeExpression ,expression: PipeExpression next: Pipeline context: ExpressionContext ,buildPipeline{ Params : Query,Function<QueryResult,Boolean> Returns : Pipeline} process{ Params : QueryResult Returns : boolean} columnNames{ Params : List<String> Returns : List<String>} ,process columnNames ,,,,Pipeline ,ExpressionContext ,,ExpressionContext ,ChainedPipeExpression ExpressionContext ,expression: , inputColumns
axon-server-se-master,io.axoniq.axonserver.localstorage.query,QueryResult,2,1,0,0,0,true,0 ,0 ,0 ,,asJson{ Params : ObjectMapper Returns : String} getValue{ Params :  Returns : ExpressionResult} isDeleted{ Params :  Returns : boolean} getSortValues{ Params :  Returns : ListExpressionResult} getId{ Params :  Returns : ListExpressionResult} withValue{ Params : ExpressionResult Returns : QueryResult} deleted{ Params :  Returns : QueryResult} withSortValues{ Params : ListExpressionResult Returns : QueryResult} withId{ Params : ListExpressionResult Returns : QueryResult} withId{ Params : ExpressionResult Returns : QueryResult} ,,,,,,,,,ListExpressionResult ,: , new ListExpressionResult(identifyingValues)
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,AbstractMapExpressionResult,2,1,0,0,0,true,0 ,0 ,0 ,,getColumnNames{ Params :  Returns : Iterable<String>} ,,,,,,,,,,: , new ListExpressionResult(identifyingValues)
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,BooleanExpressionResult,1,1,0,0,0,false,0 ,ExpressionResult ,0 ,TRUE: BooleanExpressionResult FALSE: BooleanExpressionResult booleanValue: boolean ,forValue{ Params : boolean Returns : BooleanExpressionResult} isTrue{ Params :  Returns : boolean} getValue{ Params :  Returns : Object} isNull{ Params :  Returns : boolean} isNonNull{ Params :  Returns : boolean} count{ Params :  Returns : long} compareTo{ Params : ExpressionResult Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,isTrue getValue isNull isNonNull count compareTo equals hashCode ,forValue ,,,ExpressionResult ,boolean ,,boolean ,BooleanExpressionResult BooleanExpressionResult ,Objects: , booleanValue
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,DefaultQueryResult,1,1,0,0,0,false,0 ,QueryResult ,0 ,value: ExpressionResult deleted: boolean identifyingValues: ListExpressionResult sortValues: ListExpressionResult ,deleted{ Params :  Returns : QueryResult} asJson{ Params : ObjectMapper Returns : String} getValue{ Params :  Returns : ExpressionResult} isDeleted{ Params :  Returns : boolean} getSortValues{ Params :  Returns : ListExpressionResult} getId{ Params :  Returns : ListExpressionResult} withValue{ Params : ExpressionResult Returns : QueryResult} withSortValues{ Params : ListExpressionResult Returns : QueryResult} withId{ Params : ListExpressionResult Returns : QueryResult} ,deleted asJson getValue isDeleted getSortValues getId withValue withSortValues withId ,,,,QueryResult ,ListExpressionResult ,,ListExpressionResult ,DefaultQueryResult HashMap DefaultQueryResult DefaultQueryResult DefaultQueryResult ,mapper: , structure
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,EventExpressionResult,1,1,0,0,0,false,0 ,AbstractMapExpressionResult ,0 ,event: EventWithToken COLUMN_NAMES: List<String> ,getColumnNames{ Params :  Returns : Iterable<String>} getValue{ Params :  Returns : Object} compareTo{ Params : ExpressionResult Returns : int} getByIdentifier{ Params : String Returns : ExpressionResult} toExpression{ Params : MetaDataValue Returns : ExpressionResult} isNull{ Params :  Returns : boolean} isNonNull{ Params :  Returns : boolean} ,getColumnNames getValue compareTo getByIdentifier isNull isNonNull ,,,,AbstractMapExpressionResult ,,,,StringExpressionResult StringExpressionResult NumericExpressionResult StringExpressionResult StringExpressionResult StringExpressionResult StringExpressionResult HashMap MapExpressionResult TimestampExpressionResult NumericExpressionResult RuntimeException StringExpressionResult NumericExpressionResult NumericExpressionResult StringExpressionResult ,s: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,JSONExpressionResult,1,1,0,0,0,false,0 ,AbstractMapExpressionResult ,0 ,value: JSONObject ,getValue{ Params :  Returns : Object} compareTo{ Params : ExpressionResult Returns : int} toString{ Params :  Returns : String} getColumnNames{ Params :  Returns : Iterable<String>} ,getValue compareTo toString getColumnNames ,,,,AbstractMapExpressionResult ,JSONObject ,,JSONObject ,,value: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,ListExpressionResult,1,1,0,0,0,false,0 ,ExpressionResult ,0 ,results: List<ExpressionResult> ,asListOrNull{ Params : ExpressionResult Returns : ListExpressionResult} getValue{ Params :  Returns : List<ExpressionResult>} isNull{ Params :  Returns : boolean} isNonNull{ Params :  Returns : boolean} compareTo{ Params : ExpressionResult Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} count{ Params :  Returns : long} ,getValue isNull isNonNull compareTo equals hashCode count ,asListOrNull ,,,ExpressionResult ,List<ExpressionResult> ,,List<ExpressionResult> ,ListExpressionResult ,r: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,MapExpressionResult,1,1,0,0,0,false,0 ,AbstractMapExpressionResult ,0 ,result: Map<String, ExpressionResult> ,getValue{ Params :  Returns : Object} compareTo{ Params : ExpressionResult Returns : int} getByIdentifier{ Params : String Returns : ExpressionResult} isNull{ Params :  Returns : boolean} isNonNull{ Params :  Returns : boolean} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getColumnNames{ Params :  Returns : Iterable<String>} ,getValue compareTo getByIdentifier isNull isNonNull equals hashCode getColumnNames ,,,,AbstractMapExpressionResult ,Map<String,ExpressionResult> ,,Map<String,ExpressionResult> ,HashMap ,result: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,NullExpressionResult,1,1,0,0,0,false,0 ,ExpressionResult ,0 ,INSTANCE: NullExpressionResult ,getValue{ Params :  Returns : Object} isNull{ Params :  Returns : boolean} isNonNull{ Params :  Returns : boolean} isNumeric{ Params :  Returns : boolean} compareTo{ Params : ExpressionResult Returns : int} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,getValue isNull isNonNull isNumeric compareTo toString equals hashCode ,,,,ExpressionResult ,,,,NullExpressionResult ,Objects: , (Object) null
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,NumericExpressionResult,1,1,0,0,0,false,0 ,ExpressionResult ,0 ,value: BigDecimal ,getValue{ Params :  Returns : Object} isNull{ Params :  Returns : boolean} isNonNull{ Params :  Returns : boolean} isNumeric{ Params :  Returns : boolean} compareTo{ Params : ExpressionResult Returns : int} divide{ Params : ExpressionResult Returns : ExpressionResult} add{ Params : ExpressionResult Returns : ExpressionResult} subtract{ Params : ExpressionResult Returns : ExpressionResult} multiply{ Params : ExpressionResult Returns : ExpressionResult} modulo{ Params : ExpressionResult Returns : ExpressionResult} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,getValue isNull isNonNull isNumeric compareTo divide add subtract multiply modulo toString equals hashCode ,,,,ExpressionResult ,BigDecimal ,,BigDecimal ,BigDecimal BigDecimal NumericExpressionResult IllegalArgumentException NumericExpressionResult IllegalArgumentException NumericExpressionResult IllegalArgumentException NumericExpressionResult IllegalArgumentException NumericExpressionResult IllegalArgumentException ,Objects: , value
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,StringExpressionResult,1,1,0,0,0,false,0 ,ExpressionResult ,0 ,value: String ,isTrue{ Params :  Returns : boolean} getValue{ Params :  Returns : Object} isNull{ Params :  Returns : boolean} isNonNull{ Params :  Returns : boolean} compareTo{ Params : ExpressionResult Returns : int} toString{ Params :  Returns : String} asJson{ Params :  Returns : JSONObject} add{ Params : ExpressionResult Returns : ExpressionResult} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,isTrue getValue isNull isNonNull compareTo toString asJson add equals hashCode ,,,,ExpressionResult ,String ,,String ,JSONParser IllegalArgumentException StringExpressionResult ,Objects: , value
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,TimestampExpressionResult,1,1,0,0,0,false,NumericExpressionResult ,0 ,0 ,,toString{ Params :  Returns : String} ,toString ,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.result,XmlExpressionResult,1,1,0,0,0,false,0 ,AbstractMapExpressionResult ,0 ,logger: Logger transformerFactory: TransformerFactory value: Element ,getValue{ Params :  Returns : Element} compareTo{ Params : ExpressionResult Returns : int} toString{ Params :  Returns : String} asXml{ Params :  Returns : Element} getColumnNames{ Params :  Returns : Iterable<String>} ,getValue compareTo toString asXml getColumnNames ,,,,AbstractMapExpressionResult ,Element ,,Element ,StringWriter DOMSource StreamResult ,Collections: , "xml"
axon-server-se-master,io.axoniq.axonserver.localstorage,QueryOptions,1,1,0,0,0,false,0 ,0 ,0 ,minToken: long maxToken: long minTimestamp: long ,getMinToken{ Params :  Returns : long} getMaxToken{ Params :  Returns : long} getMinTimestamp{ Params :  Returns : long} ,,,,,,long ,,long ,,Collections: , "xml"
axon-server-se-master,io.axoniq.axonserver.localstorage,Registration,2,1,0,0,0,true,0 ,0 ,0 ,,cancel{ Params :  Returns : void} ,,,,,,,,,,Collections: , "xml"
axon-server-se-master,io.axoniq.axonserver.localstorage,SerializedEvent,1,1,0,0,0,false,0 ,0 ,0 ,serializedData: byte event: Event ,asInputStream{ Params :  Returns : InputStream} asEvent{ Params :  Returns : Event} size{ Params :  Returns : int} serializedData{ Params :  Returns : byte[]} getAggregateSequenceNumber{ Params :  Returns : long} getPayload{ Params :  Returns : byte[]} getIdentifier{ Params :  Returns : String} getAggregateType{ Params :  Returns : String} getPayloadType{ Params :  Returns : String} getPayloadRevision{ Params :  Returns : String} getTimestamp{ Params :  Returns : long} isDomainEvent{ Params :  Returns : boolean} getAggregateIdentifier{ Params :  Returns : String} getSequenceNumber{ Params :  Returns : long} getType{ Params :  Returns : String} getMetaData{ Params :  Returns : Map<String,Object>} asObject{ Params : MetaDataValue Returns : Object} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} asByteString{ Params :  Returns : ByteString} asSnapshot{ Params :  Returns : SerializedEvent} isSnapshot{ Params :  Returns : boolean} ,equals hashCode ,,,,,Event ,,Event ,MessagingPlatformException ByteArrayInputStream MessagingPlatformException HashMap SerializedEvent ,: 
axon-server-se-master,io.axoniq.axonserver.localstorage,SerializedEventWithToken,1,1,0,0,0,false,0 ,0 ,0 ,token: long serializedEvent: SerializedEvent ,asInputStream{ Params :  Returns : InputStream} getToken{ Params :  Returns : long} asEventWithToken{ Params :  Returns : EventWithToken} asEvent{ Params :  Returns : Event} getSerializedEvent{ Params :  Returns : SerializedEvent} ,,,,,,SerializedEvent ,,SerializedEvent ,SerializedEvent SerializedEvent MessagingPlatformException ByteArrayInputStream MessagingPlatformException ,serializedEvent: 
axon-server-se-master,io.axoniq.axonserver.localstorage,SerializedTransactionWithToken,1,1,0,0,0,false,0 ,0 ,0 ,token: long eventFormatVersion: byte events: List<SerializedEvent> ,getToken{ Params :  Returns : long} getEvents{ Params :  Returns : List<SerializedEvent>} getEventFormatVersion{ Params :  Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getEventsCount{ Params :  Returns : int} getEvent{ Params : int Returns : Event} ,equals hashCode ,,,,,List<SerializedEvent> ,,List<SerializedEvent> ,,events: , i
axon-server-se-master,io.axoniq.axonserver.localstorage,SnapshotReader,1,1,0,0,0,false,0 ,0 ,0 ,datafileManagerChain: EventStorageEngine dataFetcherSchedulerProvider: Supplier<ExecutorService> ,readSnapshot{ Params : String,long,long Returns : Optional<SerializedEvent>} snapshot{ Params : String,long,long Returns : Mono<SerializedEvent>} streamByAggregateId{ Params : String,long,long,int,Consumer<SerializedEvent> Returns : void} ,,,,,,Supplier<ExecutorService> ,,Supplier<ExecutorService> ,DataFetcherSchedulerProvider ,e: 
axon-server-se-master,io.axoniq.axonserver.localstorage,SnapshotWriteStorage,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger storageTransactionManager: StorageTransactionManager listeners: Map<String, BiConsumer<Long, Event>> ,store{ Params : Event Returns : Mono<Void>} notifyListeners{ Params : Event,Long Returns : void} snapshotStored{ Params : BiConsumer<Long,Event>,Long,Event Returns : void} registerEventListener{ Params : BiConsumer<Long,Event> Returns : Registration} waitingTransactions{ Params :  Returns : long} ,,,,,,Map<String,BiConsumer<Long,Event>> ,,Map<String,BiConsumer<Long,Event>> ,ConcurrentHashMap ,storageTransactionManager: 
axon-server-se-master,io.axoniq.axonserver.localstorage,StorageCallback,2,1,0,0,0,true,0 ,0 ,0 ,,complete{ Params : long Returns : boolean} error{ Params : Throwable Returns : void} ,,,,,,,,,,storageTransactionManager: 
axon-server-se-master,io.axoniq.axonserver.localstorage,SyncStorage,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger eventStore: EventStorageEngine ,sync{ Params : long,int,List<Event> Returns : void} ,,,,,,EventStorageEngine ,,EventStorageEngine ,EventStoreValidationException MessagingPlatformException MessagingPlatformException ,e: 
axon-server-se-master,io.axoniq.axonserver.localstorage,TrackingEventProcessorManager,1,1,0,0,0,false,0 ,0 ,EventTracker ,MAX_EVENTS_PER_RUN: int logger: Logger scheduledExecutorService: ScheduledExecutorService eventTrackerSet: Set<EventTracker> replicationRunning: AtomicBoolean context: String iteratorBuilder: Function<Long, CloseableIterator<SerializedEventWithToken>> blacklistedSendAfter: int ,sendEvents{ Params :  Returns : void} createEventTracker{ Params : long,String,boolean,StreamObserver<SerializedEventWithToken> Returns : EventTracker} reschedule{ Params :  Returns : void} stopAll{ Params :  Returns : void} stopAllWhereNotAllowedReadingFromFollower{ Params :  Returns : void} validateActiveConnections{ Params : long Returns : void} close{ Params :  Returns : void} sendNext{ Params :  Returns : int} blacklisted{ Params : SerializedEventWithToken Returns : boolean} payloadType{ Params : SerializedEventWithToken Returns : PayloadDescription} sendError{ Params : Exception Returns : void} addPermits{ Params : int Returns : void} close{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} stopAllWhereNotAllowedReadingFromFollower{ Params :  Returns : void} validateActiveConnection{ Params : long Returns : void} addBlacklist{ Params : List<PayloadDescription> Returns : void} ,,,,,,int ,,int ,AtomicBoolean CustomizableThreadFactory ArrayList EventTracker AtomicInteger CopyOnWriteArraySet AtomicLong AtomicLong MessagingPlatformException MessagingPlatformException ,scheduledExecutorService: 
axon-server-se-master,io.axoniq.axonserver.localstorage,EventTracker,3,1,0,0,0,false,0 ,0 ,EventTracker ,permits: AtomicInteger nextToken: AtomicLong lastPermitTimestamp: AtomicLong eventStream: StreamObserver<SerializedEventWithToken> client: String eventIterator: CloseableIterator<SerializedEventWithToken> running: boolean blacklistedTypes: Set<PayloadDescription> force: int forceReadingFromLeader: boolean ,sendEvents{ Params :  Returns : void} createEventTracker{ Params : long,String,boolean,StreamObserver<SerializedEventWithToken> Returns : EventTracker} reschedule{ Params :  Returns : void} stopAll{ Params :  Returns : void} stopAllWhereNotAllowedReadingFromFollower{ Params :  Returns : void} validateActiveConnections{ Params : long Returns : void} close{ Params :  Returns : void} sendNext{ Params :  Returns : int} blacklisted{ Params : SerializedEventWithToken Returns : boolean} payloadType{ Params : SerializedEventWithToken Returns : PayloadDescription} sendError{ Params : Exception Returns : void} addPermits{ Params : int Returns : void} close{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} stopAllWhereNotAllowedReadingFromFollower{ Params :  Returns : void} validateActiveConnection{ Params : long Returns : void} addBlacklist{ Params : List<PayloadDescription> Returns : void} ,,,,,,boolean ,,boolean ,AtomicInteger CopyOnWriteArraySet AtomicLong AtomicLong MessagingPlatformException MessagingPlatformException ,blacklistedTypes: , blacklistList
axon-server-se-master,io.axoniq.axonserver.localstorage.transaction,DefaultStorageTransactionManagerFactory,1,1,0,0,0,false,0 ,StorageTransactionManagerFactory ,0 ,,createTransactionManager{ Params : EventStorageEngine Returns : StorageTransactionManager} ,createTransactionManager ,,,,StorageTransactionManagerFactory ,,,,SingleInstanceTransactionManager ,blacklistedTypes: , blacklistList
axon-server-se-master,io.axoniq.axonserver.localstorage.transaction,PreparedTransaction,1,1,0,0,0,false,0 ,0 ,0 ,token: long eventList: List<ProcessedEvent> ,getToken{ Params :  Returns : long} getEventList{ Params :  Returns : List<ProcessedEvent>} ,,,,,,List<ProcessedEvent> ,,List<ProcessedEvent> ,,blacklistedTypes: , blacklistList
axon-server-se-master,io.axoniq.axonserver.localstorage.transaction,SequenceNumberCache,1,1,0,0,0,false,0 ,0 ,MinMaxPair SequenceNumber ,SCHEDULED_EXECUTOR_SERVICE: ScheduledExecutorService NO_HINTS: EventStorageEngine.SearchHint SEARCH_RECENT: EventStorageEngine.SearchHint maxSize: int aggregateSequenceNumberProvider: BiFunction<String, EventStorageEngine.SearchHint[], Optional<Long>> clock: Clock sequenceNumbersPerAggregate: Map<String, SequenceNumber> cleanupTask: ScheduledFuture<?> ,reserveSequenceNumbers{ Params : List<Event> Returns : void} reserveSequenceNumbers{ Params : List<Event>,boolean Returns : Runnable} isDomainEvent{ Params : Event Returns : boolean} checkAndUpdateSequenceNumber{ Params : String,SequenceNumber,MinMaxPair Returns : SequenceNumber} searchHints{ Params : long Returns : EventStorageEngine.SearchHint[]} clear{ Params :  Returns : void} clearOld{ Params : long Returns : void} close{ Params :  Returns : void} getMin{ Params :  Returns : long} getMax{ Params :  Returns : long} setMax{ Params : long Returns : void} isValid{ Params :  Returns : boolean} get{ Params :  Returns : long} timestamp{ Params :  Returns : long} minus{ Params : int Returns : SequenceNumber} invalid{ Params :  Returns : SequenceNumber} ,,,,,,ScheduledFuture<?> ,,ScheduledFuture<?> ,DaemonThreadFactory ConcurrentHashMap HashMap MinMaxPair HashMap SequenceNumber MessagingPlatformException SequenceNumber SequenceNumber SequenceNumber MessagingPlatformException SequenceNumber SequenceNumber ,cleanupTask: , true
axon-server-se-master,io.axoniq.axonserver.localstorage.transaction,MinMaxPair,3,2,0,0,0,false,0 ,0 ,MinMaxPair SequenceNumber ,key: String min: long max: long ,reserveSequenceNumbers{ Params : List<Event> Returns : void} reserveSequenceNumbers{ Params : List<Event>,boolean Returns : Runnable} isDomainEvent{ Params : Event Returns : boolean} checkAndUpdateSequenceNumber{ Params : String,SequenceNumber,MinMaxPair Returns : SequenceNumber} searchHints{ Params : long Returns : EventStorageEngine.SearchHint[]} clear{ Params :  Returns : void} clearOld{ Params : long Returns : void} close{ Params :  Returns : void} getMin{ Params :  Returns : long} getMax{ Params :  Returns : long} setMax{ Params : long Returns : void} isValid{ Params :  Returns : boolean} get{ Params :  Returns : long} timestamp{ Params :  Returns : long} minus{ Params : int Returns : SequenceNumber} invalid{ Params :  Returns : SequenceNumber} ,,,,,,long ,,long ,MessagingPlatformException ,String: , "Invalid sequence number %d for aggregate %s, expected %d", max, key, this.max + 1
axon-server-se-master,io.axoniq.axonserver.localstorage.transaction,SequenceNumber,3,2,0,0,0,false,0 ,0 ,MinMaxPair SequenceNumber ,sequence: long valid: boolean timestamp: long ,reserveSequenceNumbers{ Params : List<Event> Returns : void} reserveSequenceNumbers{ Params : List<Event>,boolean Returns : Runnable} isDomainEvent{ Params : Event Returns : boolean} checkAndUpdateSequenceNumber{ Params : String,SequenceNumber,MinMaxPair Returns : SequenceNumber} searchHints{ Params : long Returns : EventStorageEngine.SearchHint[]} clear{ Params :  Returns : void} clearOld{ Params : long Returns : void} close{ Params :  Returns : void} getMin{ Params :  Returns : long} getMax{ Params :  Returns : long} setMax{ Params : long Returns : void} isValid{ Params :  Returns : boolean} get{ Params :  Returns : long} timestamp{ Params :  Returns : long} minus{ Params : int Returns : SequenceNumber} invalid{ Params :  Returns : SequenceNumber} ,,,,,,long ,,long ,SequenceNumber SequenceNumber ,String: , "Invalid sequence number %d for aggregate %s, expected %d", max, key, this.max + 1
axon-server-se-master,io.axoniq.axonserver.localstorage.transaction,SingleInstanceTransactionManager,1,1,0,0,0,false,0 ,StorageTransactionManager ,0 ,eventStorageEngine: EventStorageEngine sequenceNumberCache: SequenceNumberCache ,storeBatch{ Params : List<Event> Returns : Mono<Long>} reserveSequenceNumbers{ Params : List<Event> Returns : Runnable} clearSequenceNumberCache{ Params :  Returns : void} ,storeBatch reserveSequenceNumbers clearSequenceNumberCache ,,,,StorageTransactionManager ,SequenceNumberCache ,,SequenceNumberCache ,SequenceNumberCache ,sequenceNumberCache: 
axon-server-se-master,io.axoniq.axonserver.localstorage.transaction,StorageTransactionManager,2,1,0,0,0,true,0 ,StorageTransactionManager ,0 ,,storeBatch{ Params : List<Event> Returns : Mono<Long>} reserveSequenceNumbers{ Params : List<Event> Returns : Runnable} waitingTransactions{ Params :  Returns : long} cancelPendingTransactions{ Params :  Returns : void} clearSequenceNumberCache{ Params :  Returns : void} ,,,,,,,,,,sequenceNumberCache: 
axon-server-se-master,io.axoniq.axonserver.localstorage.transaction,StorageTransactionManagerFactory,2,1,0,0,0,true,0 ,StorageTransactionManager ,0 ,,createTransactionManager{ Params : EventStorageEngine Returns : StorageTransactionManager} ,,,,,,,,,,sequenceNumberCache: 
axon-server-se-master,io.axoniq.axonserver.localstorage.transformation,DefaultEventTransformerFactory,1,1,0,0,0,false,0 ,EventTransformerFactory ,0 ,,get{ Params : int Returns : EventTransformer} ,get ,,,,EventTransformerFactory ,,,,,sequenceNumberCache: 
axon-server-se-master,io.axoniq.axonserver.localstorage.transformation,EventStoreTransformer,2,1,0,0,0,true,0 ,EventTransformerFactory ,0 ,,transformEvents{ Params : String,int,Flux<EventWithToken> Returns : Flux<Long>} compact{ Params : String Returns : Mono<Void>} ,,,,,,,,,,sequenceNumberCache: 
axon-server-se-master,io.axoniq.axonserver.localstorage.transformation,EventTransformer,2,1,0,0,0,true,0 ,EventTransformerFactory ,0 ,,fromStorage{ Params : byte[] Returns : byte[]} toStorage{ Params : byte[] Returns : byte[]} ,,,,,,,,,,sequenceNumberCache: 
axon-server-se-master,io.axoniq.axonserver.localstorage.transformation,EventTransformerFactory,2,1,0,0,0,true,0 ,EventTransformerFactory ,0 ,,get{ Params : int Returns : EventTransformer} ,,,,,,,,,,sequenceNumberCache: 
axon-server-se-master,io.axoniq.axonserver.localstorage.transformation,NoOpEventTransformer,1,1,0,0,0,false,0 ,EventTransformer ,0 ,INSTANCE: NoOpEventTransformer ,fromStorage{ Params : byte[] Returns : byte[]} toStorage{ Params : byte[] Returns : byte[]} ,fromStorage toStorage ,,,,EventTransformer ,,,,NoOpEventTransformer ,sequenceNumberCache: 
axon-server-se-master,io.axoniq.axonserver.localstorage.transformation,ProcessedEvent,2,1,0,0,0,true,0 ,EventTransformer ,0 ,,getSerializedSize{ Params :  Returns : int} toByteArray{ Params :  Returns : byte[]} getAggregateIdentifier{ Params :  Returns : String} getAggregateSequenceNumber{ Params :  Returns : long} getMessageIdentifier{ Params :  Returns : String} getPayloadBytes{ Params :  Returns : byte[]} getPayloadRevision{ Params :  Returns : String} getPayloadType{ Params :  Returns : String} getTimestamp{ Params :  Returns : long} getAggregateType{ Params :  Returns : String} isDomainEvent{ Params :  Returns : boolean} getMetaData{ Params :  Returns : Map<String,MetaDataValue>} ,,,,,,,,,,sequenceNumberCache: 
axon-server-se-master,io.axoniq.axonserver.localstorage.transformation,WrappedEvent,1,1,0,0,0,false,0 ,ProcessedEvent ,0 ,event: Event dataForWrite: byte ,getSerializedSize{ Params :  Returns : int} toByteArray{ Params :  Returns : byte[]} getAggregateIdentifier{ Params :  Returns : String} getAggregateSequenceNumber{ Params :  Returns : long} getMessageIdentifier{ Params :  Returns : String} getPayloadBytes{ Params :  Returns : byte[]} getPayloadRevision{ Params :  Returns : String} getPayloadType{ Params :  Returns : String} getTimestamp{ Params :  Returns : long} getAggregateType{ Params :  Returns : String} getMetaData{ Params :  Returns : Map<String,MetaDataValue>} isDomainEvent{ Params :  Returns : boolean} ,getSerializedSize toByteArray getAggregateIdentifier getAggregateSequenceNumber getMessageIdentifier getPayloadBytes getPayloadRevision getPayloadType getTimestamp getAggregateType getMetaData isDomainEvent ,,,,ProcessedEvent ,byte[] ,,byte[] ,,event: 
axon-server-se-master,io.axoniq.axonserver.logging,AuditLog,1,1,0,0,0,false,0 ,0 ,CallingClass ,auditLog: Logger ,getLogger{ Params :  Returns : Logger} enablement{ Params : boolean Returns : String} username{ Params : String Returns : String} username{ Params : Principal Returns : String} on{ Params : AbstractAuthenticationEvent Returns : void} on{ Params : UserUpdated Returns : void} on{ Params : UserDeleted Returns : void} getCallingClasses{ Params :  Returns : Class[]} ,,getLogger enablement username username ,,,,,,,CallingClass ,event: 
axon-server-se-master,io.axoniq.axonserver.logging,CallingClass,3,2,0,1,0,false,0 ,0 ,CallingClass ,INSTANCE: CallingClass ,getLogger{ Params :  Returns : Logger} enablement{ Params : boolean Returns : String} username{ Params : String Returns : String} username{ Params : Principal Returns : String} on{ Params : AbstractAuthenticationEvent Returns : void} on{ Params : UserUpdated Returns : void} on{ Params : UserDeleted Returns : void} getCallingClasses{ Params :  Returns : Class[]} ,,getLogger enablement username username ,,,,,,,CallingClass ,: 
axon-server-se-master,io.axoniq.axonserver.logging,PluginEventsLogger,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger ,on{ Params : PluginEnabledEvent Returns : void} on{ Params : PluginRemovedEvent Returns : void} on{ Params : PluginEvent Returns : void} ,,,,,,Logger ,,Logger ,,statusChanged: 
axon-server-se-master,io.axoniq.axonserver.logging,TopologyEventsLogger,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger ,on{ Params : TopologyEvents.ApplicationConnected Returns : void} on{ Params : TopologyEvents.ApplicationDisconnected Returns : void} on{ Params : TopologyEvents.ApplicationInactivityTimeout Returns : void} on{ Params : TopologyEvents.ApplicationReconnectRequested Returns : void} ,,,,,,Logger ,,Logger ,,event: 
axon-server-se-master,io.axoniq.axonserver.message,ByteArrayMarshaller,1,1,0,0,0,false,0 ,MethodDescriptor.Marshaller<byte[]> ,0 ,,instance{ Params :  Returns : ByteArrayMarshaller} stream{ Params : byte[] Returns : InputStream} parse{ Params : InputStream Returns : byte[]} ,stream parse ,instance ,,,Marshaller ,,,,ByteArrayMarshaller ByteArrayInputStream RuntimeException RuntimeException ,IOUtils: , stream
axon-server-se-master,io.axoniq.axonserver.message,Cancellable,2,1,0,0,0,true,0 ,MethodDescriptor.Marshaller<byte[]> ,0 ,,cancel{ Params :  Returns : boolean} ,,,,,,,,,,IOUtils: , stream
axon-server-se-master,io.axoniq.axonserver.message,ClientStreamIdentification,1,1,0,0,0,false,0 ,Comparable<ClientStreamIdentification> ,0 ,COMPARATOR: Comparator<ClientStreamIdentification> context: String clientStreamId: String ,getContext{ Params :  Returns : String} getClientStreamId{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : ClientStreamIdentification Returns : int} toString{ Params :  Returns : String} metricName{ Params :  Returns : String} ,equals hashCode toString ,,,,Comparable ,String ,,String ,,COMPARATOR: , this, client
axon-server-se-master,io.axoniq.axonserver.message.command,CommandCache,1,1,0,0,0,false,0 ,NonReplacingConstraintCache<String,CommandInformation> ,0 ,logger: Logger defaultCommandTimeout: long clock: Clock cacheCapacity: long COMMANDS_PER_GB: int map: Map<String, CommandInformation> ,clearOnTimeout{ Params :  Returns : void} size{ Params :  Returns : int} remove{ Params : String Returns : CommandInformation} get{ Params : String Returns : CommandInformation} putIfAbsent{ Params : String,CommandInformation Returns : CommandInformation} entrySet{ Params :  Returns : Collection<Map.Entry<String,CommandInformation>>} checkCapacity{ Params :  Returns : void} ,size remove get putIfAbsent entrySet ,,,,NonReplacingConstraintCache ,Map<String,CommandInformation> ,,Map<String,CommandInformation> ,ConcurrentHashMap InsufficientBufferCapacityException ,map: 
axon-server-se-master,io.axoniq.axonserver.message.command,CommandDispatcher,1,1,0,0,0,false,0 ,0 ,0 ,registrations: CommandRegistrationCache commandCache: NonReplacingConstraintCache<String, CommandInformation> metricRegistry: CommandMetricsRegistry logger: Logger commandQueues: FlowControlQueues<WrappedCommand> commandRatePerContext: Map<String, MeterFactory.RateMeter> commandInterceptors: CommandInterceptors ,dispatchProxied{ Params : String,SerializedCommand,Consumer<SerializedCommandResponse> Returns : void} dispatch{ Params : String,Authentication,SerializedCommand,Consumer<SerializedCommandResponse> Returns : void} intercept{ Params : DefaultExecutionContext,SerializedCommandResponse,Consumer<SerializedCommandResponse> Returns : void} commandRate{ Params : String Returns : MeterFactory.RateMeter} on{ Params : TopologyEvents.CommandHandlerDisconnected Returns : void} handleDisconnection{ Params : ClientStreamIdentification,boolean Returns : void} dispatchToCommandHandler{ Params : SerializedCommand,CommandHandler<?>,Consumer<SerializedCommandResponse>,ErrorCode,String Returns : void} handleResponse{ Params : SerializedCommandResponse,boolean Returns : void} cleanupRegistrations{ Params : ClientStreamIdentification Returns : void} getCommandQueues{ Params :  Returns : FlowControlQueues<WrappedCommand>} redispatch{ Params : WrappedCommand Returns : String} handlePendingCommands{ Params : ClientStreamIdentification Returns : void} activeCommandCount{ Params :  Returns : int} errorCommandResponse{ Params : String,ErrorCode,String Returns : SerializedCommandResponse} ,,,,,,CommandInterceptors ,,CommandInterceptors ,ConcurrentHashMap FlowControlQueues ClientStreamIdentification DefaultExecutionContext CommandInformation WrappedCommand CommandInformation SerializedCommandResponse ,ErrorMessageFactory: , errorMessage
axon-server-se-master,io.axoniq.axonserver.message.command,CommandExecutionException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.message.command,CommandHandler,1,1,1,0,0,false,0 ,Comparable<CommandHandler<T>> ,0 ,observer: StreamObserver<T> clientStreamIdentification: ClientStreamIdentification clientId: String componentName: String ,getClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} getComponentName{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : CommandHandler Returns : int} dispatch{ Params : SerializedCommand Returns : void} confirm{ Params : String Returns : void} queueName{ Params :  Returns : String} getMessagingServerName{ Params :  Returns : String} getClientId{ Params :  Returns : String} ,equals hashCode compareTo ,,,dispatch confirm ,Comparable ,,,,,clientStreamIdentification: 
axon-server-se-master,io.axoniq.axonserver.message.command,CommandHealthIndicator,1,1,0,0,0,false,AbstractHealthIndicator ,0 ,0 ,commandService: CommandService ,doHealthCheck{ Params : Health.Builder Returns : void} ,doHealthCheck ,,,,,CommandService ,,CommandService ,,listener: 
axon-server-se-master,io.axoniq.axonserver.message.command,CommandInformation,1,1,0,0,0,false,0 ,0 ,0 ,requestIdentifier: String responseConsumer: Consumer<SerializedCommandResponse> timestamp: long clientStreamIdentification: ClientStreamIdentification componentName: String sourceClientId: String targetClientId: String ,getRequestIdentifier{ Params :  Returns : String} getResponseConsumer{ Params :  Returns : Consumer<SerializedCommandResponse>} getTimestamp{ Params :  Returns : long} getClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} getComponentName{ Params :  Returns : String} checkClient{ Params : ClientStreamIdentification Returns : boolean} cancel{ Params :  Returns : void} getSourceClientId{ Params :  Returns : String} getTargetClientId{ Params :  Returns : String} ,,,,,,String ,,String ,SerializedCommandResponse ,responseConsumer: , new SerializedCommandResponse(commandResponse)
axon-server-se-master,io.axoniq.axonserver.message.command,CommandMetricsRegistry,1,1,0,0,0,false,0 ,0 ,CommandMetric ,logger: Logger timerMap: Map<String, Timer> meterFactory: MeterFactory ,on{ Params : TopologyEvents.ApplicationDisconnected Returns : void} metricName{ Params : String,String,String,String Returns : String} add{ Params : String,String,String,String,long Returns : void} timer{ Params : String,String,String,String Returns : Timer} clusterMetric{ Params : String,String,String Returns : ClusterMetric} commandMetric{ Params : String,String,String,String Returns : CommandMetric} gauge{ Params : BaseMetricName,T,ToDoubleFunction<T> Returns : Gauge} rateMeter{ Params : String,BaseMetricName Returns : MeterFactory.RateMeter} getCommand{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getComponentName{ Params :  Returns : String} getCount{ Params :  Returns : long} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,equals hashCode ,metricName ,,,,MeterFactory ,,MeterFactory ,ConcurrentHashMap CompositeMetric Metrics CommandMetric ,Tags: , MeterFactory.CONTEXT, context
axon-server-se-master,io.axoniq.axonserver.message.command,CommandMetric,3,1,0,1,0,false,0 ,0 ,CommandMetric ,command: String clientId: String context: String componentName: String count: long ,on{ Params : TopologyEvents.ApplicationDisconnected Returns : void} metricName{ Params : String,String,String,String Returns : String} add{ Params : String,String,String,String,long Returns : void} timer{ Params : String,String,String,String Returns : Timer} clusterMetric{ Params : String,String,String Returns : ClusterMetric} commandMetric{ Params : String,String,String,String Returns : CommandMetric} gauge{ Params : BaseMetricName,T,ToDoubleFunction<T> Returns : Gauge} rateMeter{ Params : String,BaseMetricName Returns : MeterFactory.RateMeter} getCommand{ Params :  Returns : String} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getComponentName{ Params :  Returns : String} getCount{ Params :  Returns : long} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,equals hashCode ,metricName ,,,,long ,,long ,,Objects: , command, clientId, context
axon-server-se-master,io.axoniq.axonserver.message.command,CommandMetricsWebSocket,1,1,0,0,0,false,0 ,0 ,0 ,DESTINATION: String subscriptions: Map<String, Set<String>> commandMetricsRegistry: CommandMetricsRegistry commandRegistrationCache: CommandRegistrationCache topology: Topology webSocket: SimpMessagingTemplate ,publish{ Params :  Returns : void} on{ Params : SessionSubscribeEvent Returns : void} on{ Params : SessionUnsubscribeEvent Returns : void} getMetrics{ Params : CommandHandler,Set<CommandRegistrationCache.RegistrationEntry> Returns : Stream<CommandMetricsRegistry.CommandMetric>} ,,,,,,SimpMessagingTemplate ,,SimpMessagingTemplate ,ConcurrentHashMap PrincipalAuthentication ,commandHandler: 
axon-server-se-master,io.axoniq.axonserver.message.command,CommandRegistrationCache,1,1,0,0,0,false,0 ,0 ,RegistrationEntry ,logger: Logger commandHandlersPerClientContext: ConcurrentMap<ClientStreamIdentification, CommandHandler> registrationsPerClient: ConcurrentMap<ClientStreamIdentification, Map<String, Integer>> routingSelectors: ConcurrentMap<CommandTypeIdentifier, RoutingSelector<String>> selectorFactory: Function<CommandTypeIdentifier, RoutingSelector<String>> metaDataBasedNodeSelector: BiFunction<Map<String, MetaDataValue>, Set<ClientStreamIdentification>, Set<ClientStreamIdentification>> ,remove{ Params : ClientStreamIdentification Returns : void} remove{ Params : ClientStreamIdentification,String Returns : void} add{ Params : String,CommandHandler Returns : void} add{ Params : String,CommandHandler,int Returns : void} getAll{ Params :  Returns : Map<CommandHandler,Set<RegistrationEntry>>} getCommandsFor{ Params : ClientStreamIdentification Returns : Set<String>} getHandlerForCommand{ Params : String,Command,String Returns : CommandHandler} getCandidates{ Params : String,Command Returns : Set<ClientStreamIdentification>} routingSelector{ Params : String,String Returns : RoutingSelector<String>} loadFactorSolver{ Params : CommandTypeIdentifier Returns : Function<String,Integer>} findByClientAndCommand{ Params : ClientStreamIdentification,String Returns : CommandHandler} on{ Params : SubscribeCommand Returns : void} on{ Params : UnsubscribeCommand Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getCommand{ Params :  Returns : String} getContext{ Params :  Returns : String} getLoadFactor{ Params :  Returns : int} ,equals hashCode ,,,,,BiFunction<Map<String,MetaDataValue>,Set<ClientStreamIdentification>,Set<ClientStreamIdentification>> ,,BiFunction<Map<String,MetaDataValue>,Set<ClientStreamIdentification>,Set<ClientStreamIdentification>> ,ConcurrentHashMap ConcurrentHashMap ConcurrentHashMap ConsistentHashRoutingSelector ConsistentHashRoutingSelector ConcurrentHashMap HashMap RegistrationEntry ClientStreamIdentification CommandTypeIdentifier ClientStreamIdentification ,request: 
axon-server-se-master,io.axoniq.axonserver.message.command,RegistrationEntry,3,1,0,1,0,false,0 ,0 ,RegistrationEntry ,command: String context: String loadFactor: int ,remove{ Params : ClientStreamIdentification Returns : void} remove{ Params : ClientStreamIdentification,String Returns : void} add{ Params : String,CommandHandler Returns : void} add{ Params : String,CommandHandler,int Returns : void} getAll{ Params :  Returns : Map<CommandHandler,Set<RegistrationEntry>>} getCommandsFor{ Params : ClientStreamIdentification Returns : Set<String>} getHandlerForCommand{ Params : String,Command,String Returns : CommandHandler} getCandidates{ Params : String,Command Returns : Set<ClientStreamIdentification>} routingSelector{ Params : String,String Returns : RoutingSelector<String>} loadFactorSolver{ Params : CommandTypeIdentifier Returns : Function<String,Integer>} findByClientAndCommand{ Params : ClientStreamIdentification,String Returns : CommandHandler} on{ Params : SubscribeCommand Returns : void} on{ Params : UnsubscribeCommand Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getCommand{ Params :  Returns : String} getContext{ Params :  Returns : String} getLoadFactor{ Params :  Returns : int} ,equals hashCode ,,,,,int ,,int ,,Objects: , command, context
axon-server-se-master,io.axoniq.axonserver.message.command,CommandSubscriptionListener,2,1,0,0,0,true,0 ,0 ,0 ,,unsubscribeCommand{ Params : String,String,String,String Returns : void} subscribeCommand{ Params : String,String,String,String Returns : void} ,,,,,,,,,,Objects: , command, context
axon-server-se-master,io.axoniq.axonserver.message.command,CommandTypeIdentifier,1,1,0,0,1,false,0 ,0 ,0 ,context: String name: String ,context{ Params :  Returns : String} name{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,equals hashCode ,,,,,String ,,String ,,Objects: , context, name
axon-server-se-master,io.axoniq.axonserver.message.command,DirectCommandHandler,1,1,0,0,0,false,CommandHandler<SerializedCommandProviderInbound> ,0 ,0 ,,dispatch{ Params : SerializedCommand Returns : void} confirm{ Params : String Returns : void} ,dispatch confirm ,,,,,,,,,InstructionAck: 
axon-server-se-master,io.axoniq.axonserver.message.command.hashing,ConsistentHash,1,1,0,0,0,false,0 ,0 ,ConsistentHashMember ,hashToMember: SortedMap<String, ConsistentHashMember> ,hash{ Params : String Returns : String} getMember{ Params : String,Set<String> Returns : Optional<ConsistentHashMember>} findSuitableMember{ Params : Iterator<Map.Entry<String,ConsistentHashMember>>,Set<String> Returns : Optional<ConsistentHashMember>} getMembers{ Params :  Returns : Set<ConsistentHashMember>} with{ Params : String,int Returns : ConsistentHash} without{ Params : String Returns : ConsistentHash} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} contains{ Params : String Returns : boolean} toString{ Params :  Returns : String} getClient{ Params :  Returns : String} segmentCount{ Params :  Returns : int} hashes{ Params :  Returns : Set<String>} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,equals hashCode toString equals hashCode toString ,hash ,,,,SortedMap<String,ConsistentHashMember> ,,SortedMap<String,ConsistentHashMember> ,HashSet ConsistentHashMember TreeMap ConsistentHash TreeMap ConsistentHash TreeSet ,Collectors: , ","
axon-server-se-master,io.axoniq.axonserver.message.command.hashing,ConsistentHashMember,3,1,0,1,0,false,0 ,0 ,ConsistentHashMember ,member: String segmentCount: int ,hash{ Params : String Returns : String} getMember{ Params : String,Set<String> Returns : Optional<ConsistentHashMember>} findSuitableMember{ Params : Iterator<Map.Entry<String,ConsistentHashMember>>,Set<String> Returns : Optional<ConsistentHashMember>} getMembers{ Params :  Returns : Set<ConsistentHashMember>} with{ Params : String,int Returns : ConsistentHash} without{ Params : String Returns : ConsistentHash} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} contains{ Params : String Returns : boolean} toString{ Params :  Returns : String} getClient{ Params :  Returns : String} segmentCount{ Params :  Returns : int} hashes{ Params :  Returns : Set<String>} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,equals hashCode toString equals hashCode toString ,hash ,,,,int ,,int ,TreeSet ,Objects: , member, segmentCount
axon-server-se-master,io.axoniq.axonserver.message.command.hashing,ConsistentHashRoutingSelector,1,1,0,0,0,false,0 ,RoutingSelector<String> ,0 ,consistentHash: AtomicReference<ConsistentHash> loadFactorSolver: Function<String, Integer> ,selectHandler{ Params : String,Set<String> Returns : Optional<String>} register{ Params : String Returns : void} unregister{ Params : String Returns : void} ,selectHandler register unregister ,,,,RoutingSelector ,Function<String,Integer> ,,Function<String,Integer> ,AtomicReference ConsistentHash ,old: , handler
axon-server-se-master,io.axoniq.axonserver.message.command.hashing,Digester,1,1,0,0,0,false,0 ,0 ,0 ,MD_5: String UTF_8: String messageDigest: MessageDigest ,newInstance{ Params : String Returns : Digester} newMD5Instance{ Params :  Returns : Digester} md5Hex{ Params : String Returns : String} hex{ Params : byte[] Returns : String} pad{ Params : String Returns : String} update{ Params : byte[] Returns : Digester} digestHex{ Params :  Returns : String} ,,newInstance newMD5Instance md5Hex hex pad ,,,,MessageDigest ,,MessageDigest ,Digester MessagingPlatformException MessagingPlatformException BigInteger StringBuilder ,messageDigest: 
axon-server-se-master,io.axoniq.axonserver.message.command,InsufficientBufferCapacityException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.message.command,RoutingSelector,2,1,0,0,0,true,RuntimeException ,0 ,0 ,,selectHandler{ Params : String,Set<Handler> Returns : Optional<Handler>} selectHandler{ Params : String Returns : Optional<Handler>} register{ Params : Handler Returns : void} unregister{ Params : Handler Returns : void} ,,,,,,,,,,: , routingKey, null
axon-server-se-master,io.axoniq.axonserver.message.command,WrappedCommand,1,1,0,0,0,false,0 ,0 ,0 ,clientStreamIdentification: ClientStreamIdentification clientId: String command: SerializedCommand priority: long ,command{ Params :  Returns : SerializedCommand} client{ Params :  Returns : ClientStreamIdentification} priority{ Params :  Returns : long} targetClientId{ Params :  Returns : String} targetClientStreamId{ Params :  Returns : String} targetContext{ Params :  Returns : String} ,,,,,,long ,,long ,,clientStreamIdentification: 
axon-server-se-master,io.axoniq.axonserver.message.event,EventDispatcher,1,1,0,0,0,false,0 ,0 ,EventTrackerInfo ,auditLog: Logger ERROR_ON_CONNECTION_FROM_EVENT_STORE: String NO_EVENT_STORE_CONFIGURED: String logger: Logger eventStoreLocator: EventStoreLocator meterFactory: MeterFactory trackingEventProcessors: Map<ClientStreamIdentification, List<EventTrackerInfo>> eventsCounter: Map<String, MeterFactory.RateMeter> snapshotCounter: Map<String, MeterFactory.RateMeter> sequenceValidationStrategy: SequenceValidationStrategy retrySpec: RetryBackoffSpec aggregateEventsPrefetch: int listEventsTimeoutMillis: long ,appendEvent{ Params : String,Authentication,Flux<SerializedEvent> Returns : Mono<Void>} eventsCounter{ Params : String,Map<String,MeterFactory.RateMeter>,BaseMetricName Returns : MeterFactory.RateMeter} appendSnapshot{ Params : String,Event,Authentication Returns : Mono<Void>} aggregateEvents{ Params : String,Authentication,GetAggregateEventsRequest Returns : Flux<SerializedEvent>} events{ Params : String,Authentication,Flux<GetEventsRequest> Returns : Flux<SerializedEventWithToken>} removeTrackerInfo{ Params : EventTrackerInfo Returns : void} getNrOfEvents{ Params : String Returns : long} eventTrackerStatus{ Params : String Returns : Map<String,Iterable<Long>>} firstEventToken{ Params : String Returns : Mono<Long>} lastEventToken{ Params : String Returns : Mono<Long>} eventTokenAt{ Params : String,Instant Returns : Mono<Long>} highestSequenceNumber{ Params : String,String Returns : Mono<Long>} queryEvents{ Params : String,Authentication,Flux<QueryEventsRequest> Returns : Flux<QueryEventsResponse>} aggregateSnapshots{ Params : String,Authentication,GetAggregateSnapshotsRequest Returns : Flux<SerializedEvent>} eventRate{ Params : String Returns : MeterFactory.RateMeter} snapshotRate{ Params : String Returns : MeterFactory.RateMeter} getClient{ Params :  Returns : String} getLastToken{ Params :  Returns : long} getContext{ Params :  Returns : String} incrementLastToken{ Params :  Returns : void} toString{ Params :  Returns : String} ,toString ,,,,,long ,,long ,ConcurrentHashMap ConcurrentHashMap ConcurrentHashMap MessagingPlatformException AtomicLong EventTrackerInfo ClientStreamIdentification CopyOnWriteArrayList ClientStreamIdentification HashMap AtomicLong ,: , context, snapshotCounter, BaseMetricName.AXON_SNAPSHOTS
axon-server-se-master,io.axoniq.axonserver.message.event,EventTrackerInfo,3,2,0,1,0,false,0 ,0 ,EventTrackerInfo ,client: String context: String lastToken: AtomicLong ,appendEvent{ Params : String,Authentication,Flux<SerializedEvent> Returns : Mono<Void>} eventsCounter{ Params : String,Map<String,MeterFactory.RateMeter>,BaseMetricName Returns : MeterFactory.RateMeter} appendSnapshot{ Params : String,Event,Authentication Returns : Mono<Void>} aggregateEvents{ Params : String,Authentication,GetAggregateEventsRequest Returns : Flux<SerializedEvent>} events{ Params : String,Authentication,Flux<GetEventsRequest> Returns : Flux<SerializedEventWithToken>} removeTrackerInfo{ Params : EventTrackerInfo Returns : void} getNrOfEvents{ Params : String Returns : long} eventTrackerStatus{ Params : String Returns : Map<String,Iterable<Long>>} firstEventToken{ Params : String Returns : Mono<Long>} lastEventToken{ Params : String Returns : Mono<Long>} eventTokenAt{ Params : String,Instant Returns : Mono<Long>} highestSequenceNumber{ Params : String,String Returns : Mono<Long>} queryEvents{ Params : String,Authentication,Flux<QueryEventsRequest> Returns : Flux<QueryEventsResponse>} aggregateSnapshots{ Params : String,Authentication,GetAggregateSnapshotsRequest Returns : Flux<SerializedEvent>} eventRate{ Params : String Returns : MeterFactory.RateMeter} snapshotRate{ Params : String Returns : MeterFactory.RateMeter} getClient{ Params :  Returns : String} getLastToken{ Params :  Returns : long} getContext{ Params :  Returns : String} incrementLastToken{ Params :  Returns : void} toString{ Params :  Returns : String} ,toString ,,,,,AtomicLong ,,AtomicLong ,AtomicLong ,lastToken: 
axon-server-se-master,io.axoniq.axonserver.message.event,EventSchedulerService,1,1,0,0,0,false,EventSchedulerGrpc.EventSchedulerImplBase ,AxonServerClientService ,0 ,standaloneTaskManager: StandaloneTaskManager taskPayloadSerializer: TaskPayloadSerializer ,scheduleEvent{ Params : ScheduleEventRequest,StreamObserver<ScheduleToken> Returns : void} rescheduleEvent{ Params : RescheduleEventRequest,StreamObserver<ScheduleToken> Returns : void} cancelScheduledEvent{ Params : CancelScheduledEventRequest,StreamObserver<InstructionAck> Returns : void} doScheduleEvent{ Params : Event,long,StreamObserver<ScheduleToken> Returns : void} ,scheduleEvent rescheduleEvent cancelScheduledEvent ,,,,AxonServerClientService ,TaskPayloadSerializer ,,TaskPayloadSerializer ,ScheduledEventWrapper ,GrpcExceptionBuilder: , ex
axon-server-se-master,io.axoniq.axonserver.message.event,EventStore,2,1,0,0,0,true,EventSchedulerGrpc.EventSchedulerImplBase ,AxonServerClientService ,0 ,,appendSnapshot{ Params : String,Event,Authentication Returns : Mono<Void>} appendEvents{ Params : String,Flux<SerializedEvent>,Authentication Returns : Mono<Void>} aggregateEvents{ Params : String,Authentication,GetAggregateEventsRequest Returns : Flux<SerializedEvent>} aggregateSnapshots{ Params : String,Authentication,GetAggregateSnapshotsRequest Returns : Flux<SerializedEvent>} events{ Params : String,Authentication,Flux<GetEventsRequest> Returns : Flux<SerializedEventWithToken>} firstEventToken{ Params : String Returns : Mono<Long>} lastEventToken{ Params : String Returns : Mono<Long>} eventTokenAt{ Params : String,Instant Returns : Mono<Long>} highestSequenceNumber{ Params : String,String Returns : Mono<Long>} queryEvents{ Params : String,Flux<QueryEventsRequest>,Authentication Returns : Flux<QueryEventsResponse>} deleteAllEventData{ Params : String Returns : Mono<Void>} ,,,,,,,,,,GrpcExceptionBuilder: , ex
axon-server-se-master,io.axoniq.axonserver.message.event,ForwardingStreamObserver,1,1,0,0,0,false,CallStreamObserverDelegator<T> ,0 ,0 ,logger: Logger request: String ,onError{ Params : Throwable Returns : void} ,onError ,,,,,String ,,String ,,GrpcExceptionBuilder: , cause
axon-server-se-master,io.axoniq.axonserver.message.event,InputStreamMarshaller,1,1,0,0,0,false,0 ,MethodDescriptor.Marshaller<InputStream> ,0 ,,inputStreamMarshaller{ Params :  Returns : InputStreamMarshaller} stream{ Params : InputStream Returns : InputStream} parse{ Params : InputStream Returns : InputStream} ,stream parse ,inputStreamMarshaller ,,,Marshaller ,,,,InputStreamMarshaller BufferedInputStream ,stream: 
axon-server-se-master,io.axoniq.axonserver.message.event,LocalEventStoreHealthIndicator,1,1,0,0,0,false,AbstractHealthIndicator ,0 ,0 ,localEventStore: LocalEventStore clusterController: Topology ,doHealthCheck{ Params : Health.Builder Returns : void} ,doHealthCheck ,,,,,Topology ,,Topology ,TreeSet ,localEventStore: , context
axon-server-se-master,io.axoniq.axonserver.message.event,NoOpStreamObserver,1,1,0,0,0,false,0 ,StreamObserver<T> ,0 ,,onNext{ Params : T Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} ,onNext onError onCompleted ,,,,StreamObserver ,,,,,localEventStore: , context
axon-server-se-master,io.axoniq.axonserver.message.event,ScheduledEventExecutor,1,1,0,0,0,false,0 ,ScheduledTask ,0 ,localEventStore: LocalEventStore ,executeAsync{ Params : String,Object Returns : CompletableFuture<Void>} ,executeAsync ,,,,ScheduledTask ,LocalEventStore ,,LocalEventStore ,CompletableFuture ,result: , e
axon-server-se-master,io.axoniq.axonserver.message.event,ScheduledEventWrapper,1,1,0,0,0,false,0 ,0 ,0 ,bytes: byte context: String ,getBytes{ Params :  Returns : byte[]} setBytes{ Params : byte[] Returns : void} getContext{ Params :  Returns : String} setContext{ Params : String Returns : void} ,,,,,,String ,,String ,,result: , e
axon-server-se-master,io.axoniq.axonserver.message.event,SequenceValidationStreamObserver,1,1,0,0,0,false,CallStreamObserverDelegator<SerializedEvent> ,0 ,0 ,sequenceValidationStrategy: SequenceValidationStrategy lastSentEvent: AtomicReference<SerializedEvent> context: String logger: Logger ,onNext{ Params : SerializedEvent Returns : void} ,onNext ,,,,,Logger ,,Logger ,AtomicReference RuntimeException ,lastSentEvent: , event
axon-server-se-master,io.axoniq.axonserver.message.event,SerializedEventMarshaller,1,1,0,0,0,false,0 ,MethodDescriptor.Marshaller<SerializedEvent> ,0 ,,serializedEventMarshaller{ Params :  Returns : SerializedEventMarshaller} stream{ Params : SerializedEvent Returns : InputStream} parse{ Params : InputStream Returns : SerializedEvent} ,stream parse ,serializedEventMarshaller ,,,Marshaller ,,,,SerializedEventMarshaller SerializedEvent ,value: 
axon-server-se-master,io.axoniq.axonserver.message.event,SerializedEventWithTokenMarshaller,1,1,0,0,0,false,0 ,MethodDescriptor.Marshaller<SerializedEventWithToken> ,0 ,,stream{ Params : SerializedEventWithToken Returns : InputStream} parse{ Params : InputStream Returns : SerializedEventWithToken} ,stream parse ,,,,Marshaller ,,,,SerializedEventWithToken ,serializedEventWithToken: 
axon-server-se-master,io.axoniq.axonserver.message,FlowControlQueues,1,1,0,0,0,false,0 ,0 ,DestinationNode ,logger: Logger requestId: AtomicLong comparator: Comparator<T> softLimit: int hardLimit: int meterFactory: MeterFactory metricName: MetricName errorCode: ErrorCode segments: Map<String, BlockingQueue<DestinationNode>> gauges: Map<String, Gauge> ,take{ Params : String Returns : T} put{ Params : String,T Returns : void} put{ Params : String,T,long Returns : Cancellable} move{ Params : String,Function<T,String> Returns : void} newQueueWithMetrics{ Params : String Returns : PriorityBlockingQueue<DestinationNode>} getSegments{ Params :  Returns : Map<String,BlockingQueue<DestinationNode>>} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : DestinationNode Returns : int} ,equals hashCode compareTo ,,,,,Map<String,Gauge> ,,Map<String,Gauge> ,AtomicLong ConcurrentHashMap ConcurrentHashMap NullPointerException MessagingPlatformException MessagingPlatformException DestinationNode MessagingPlatformException MessagingPlatformException PriorityBlockingQueue ,gauges: , destination, gauge
axon-server-se-master,io.axoniq.axonserver.message,DestinationNode,3,1,0,0,0,false,0 ,0 ,DestinationNode ,value: T id: long ,take{ Params : String Returns : T} put{ Params : String,T Returns : void} put{ Params : String,T,long Returns : Cancellable} move{ Params : String,Function<T,String> Returns : void} newQueueWithMetrics{ Params : String Returns : PriorityBlockingQueue<DestinationNode>} getSegments{ Params :  Returns : Map<String,BlockingQueue<DestinationNode>>} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : DestinationNode Returns : int} ,equals hashCode compareTo ,,,,Comparable ,long ,,long ,,Long: , id, o.id
axon-server-se-master,io.axoniq.axonserver.message,MetaDataBasedTargetSelector,1,1,0,0,0,false,0 ,BiFunction<Map<String,MetaDataValue>,Set<ClientStreamIdentification>,Set<ClientStreamIdentification>> ,0 ,clientTagsCache: ClientTagsCache ,apply{ Params : Map<String,MetaDataValue>,Set<ClientStreamIdentification> Returns : Set<ClientStreamIdentification>} score{ Params : Map<String,MetaDataValue>,ClientStreamIdentification Returns : int} match{ Params : Map.Entry<String,String>,Map<String,MetaDataValue> Returns : int} matchValues{ Params : String,MetaDataValue Returns : int} getHighestScore{ Params : Map<ClientStreamIdentification,Integer> Returns : Set<ClientStreamIdentification>} ,apply ,,,,BiFunction ,ClientTagsCache ,,ClientTagsCache ,HashMap HashSet ,score: 
axon-server-se-master,io.axoniq.axonserver.message.query,ActiveQuery,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger key: String query: QueryDefinition responseConsumer: Consumer<QueryResponse> timestamp: long onCompleted: Consumer<String> handlers: Set<QueryHandler<?>> cancelOperations: Map<QueryHandler<?>, Cancellable> sourceClientId: String failedResponse: AtomicReference<QueryResponse> streaming: boolean targetClientStreamId: AtomicReference<String> serializedQuery: SerializedQuery timeout: long ,getQuery{ Params :  Returns : QueryDefinition} getTimestamp{ Params :  Returns : long} dispatchQuery{ Params : FlowControlQueues<QueryInstruction> Returns : void} forward{ Params : QueryResponse,String Returns : boolean} forward{ Params : QueryResponse Returns : void} singleTargetForStreamingQueries{ Params : String Returns : boolean} hasError{ Params : QueryResponse Returns : boolean} complete{ Params : String Returns : boolean} getKey{ Params :  Returns : String} cancelWithError{ Params : ErrorCode,String Returns : void} cancel{ Params :  Returns : void} getContext{ Params :  Returns : String} waitingFor{ Params : String Returns : boolean} completeWithError{ Params : String,ErrorCode,String Returns : boolean} buildErrorResponse{ Params : ErrorCode,String Returns : QueryResponse} getSourceClientId{ Params :  Returns : String} waitingFor{ Params :  Returns : Set<String>} isStreaming{ Params :  Returns : boolean} handlers{ Params :  Returns : Set<QueryHandler<?>>} cancelOtherHandlersBut{ Params : String Returns : void} queryName{ Params :  Returns : String} ,,,,,,long ,,long ,ConcurrentHashMap AtomicReference AtomicReference QueryDefinition CopyOnWriteArraySet ,query: 
axon-server-se-master,io.axoniq.axonserver.message.query,DirectQueryHandler,1,1,0,0,0,false,QueryHandler<QueryProviderInbound> ,0 ,0 ,,dispatch{ Params : SubscriptionQueryRequest Returns : void} ,dispatch ,,,,,,,,,QueryProviderInbound: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryCache,1,1,0,0,0,false,0 ,NonReplacingConstraintCache<String,ActiveQuery> ,0 ,logger: Logger defaultQueryTimeout: long cacheCapacity: long QUERIES_PER_GB: int map: Map<String, ActiveQuery> ,size{ Params :  Returns : int} remove{ Params : String Returns : ActiveQuery} get{ Params : String Returns : ActiveQuery} clearOnTimeout{ Params :  Returns : void} on{ Params : TopologyEvents.QueryHandlerDisconnected Returns : void} completeForApplication{ Params : ActiveQuery,String Returns : void} putIfAbsent{ Params : String,ActiveQuery Returns : ActiveQuery} entrySet{ Params :  Returns : Collection<Map.Entry<String,ActiveQuery>>} checkCapacity{ Params :  Returns : void} isEmpty{ Params :  Returns : boolean} ,size get putIfAbsent entrySet ,,,,NonReplacingConstraintCache ,Map<String,ActiveQuery> ,,Map<String,ActiveQuery> ,ConcurrentHashMap InsufficientBufferCapacityException ,map: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryDefinition,1,1,0,0,0,false,0 ,0 ,0 ,context: String queryName: String ,getQueryName{ Params :  Returns : String} getContext{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,equals hashCode toString ,,,,,String ,,String ,,Objects: , context, queryName
axon-server-se-master,io.axoniq.axonserver.message.query,QueryDispatcher,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger registrationCache: QueryRegistrationCache queryCache: NonReplacingConstraintCache<String, ActiveQuery> queryInterceptors: QueryInterceptors queryMetricsRegistry: QueryMetricsRegistry queryQueue: FlowControlQueues<QueryInstruction> queryRatePerContext: Map<String, MeterFactory.RateMeter> ,handleResponse{ Params : QueryResponse,String,String Returns : void} activeQuery{ Params : String,String Returns : ActiveQuery} handleComplete{ Params : String,String,String,boolean Returns : void} getQueryQueue{ Params :  Returns : FlowControlQueues<QueryInstruction>} cancel{ Params : String Returns : void} completeWithError{ Params : String,String,ErrorCode,String Returns : void} flowControl{ Params : String,long Returns : void} query{ Params : SerializedQuery,Authentication,Consumer<QueryResponse>,Consumer<String> Returns : void} dispatch{ Params : String,ActiveQuery Returns : void} intercept{ Params : DefaultExecutionContext,QueryResponse,Consumer<QueryResponse> Returns : void} queryRate{ Params : String Returns : MeterFactory.RateMeter} cancelProxied{ Params : String,String Returns : void} proxiedQueryKey{ Params : String,String Returns : String} flowControlProxied{ Params : String,String,long,String,String Returns : void} dispatchProxied{ Params : String,String,String,Consumer<QueryHandler<?>> Returns : void} dispatchProxied{ Params : SerializedQuery,Consumer<QueryResponse>,Consumer<String> Returns : void} dispatchProxied{ Params : SerializedQuery,Consumer<QueryResponse>,Consumer<String>,boolean Returns : void} isStreamingQuery{ Params : QueryRequest Returns : boolean} dispatchFlowControl{ Params : QueryHandler<?>,String,String,long Returns : void} dispatch{ Params : String,String,Runnable Returns : void} ,,,,,,Map<String,MeterFactory.RateMeter> ,,Map<String,MeterFactory.RateMeter> ,ConcurrentHashMap FlowControlQueues ClientStreamIdentification DefaultExecutionContext ActiveQuery QueryDefinition ActiveQuery ,mpe: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryHandler,1,1,1,0,0,false,0 ,0 ,0 ,logger: Logger clientStreamIdentification: ClientStreamIdentification componentName: String clientId: String streamObserver: StreamObserver<T> ,dispatch{ Params : SubscriptionQueryRequest Returns : void} getClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} getComponentName{ Params :  Returns : String} queueName{ Params :  Returns : String} toString{ Params :  Returns : String} enqueueQuery{ Params : SerializedQuery,FlowControlQueues<QueryInstruction>,long,boolean Returns : Cancellable} enqueueCancellation{ Params : String,String,FlowControlQueues<QueryInstruction> Returns : void} enqueueFlowControl{ Params : String,String,long,FlowControlQueues<QueryInstruction> Returns : void} enqueueInstruction{ Params : FlowControlQueues<QueryInstruction>,QueryInstruction Returns : Cancellable} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getClientStreamId{ Params :  Returns : String} getClientId{ Params :  Returns : String} ,equals hashCode ,,,dispatch ,,,,,Query Cancel FlowControl ,clientStreamIdentification: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryHandlerSelector,2,1,0,0,0,true,0 ,0 ,0 ,,select{ Params : QueryDefinition,String,NavigableSet<ClientStreamIdentification> Returns : ClientStreamIdentification} ,,,,,,,,,,clientStreamIdentification: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryHealthIndicator,1,1,0,0,0,false,AbstractHealthIndicator ,0 ,0 ,queryService: QueryService ,doHealthCheck{ Params : Health.Builder Returns : void} ,doHealthCheck ,,,,,QueryService ,,QueryService ,,listener: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryInstruction,1,1,0,0,0,false,0 ,0 ,Query Cancel FlowControl ,query: Query cancel: Cancel flowControl: FlowControl ,query{ Params : Query Returns : QueryInstruction} cancel{ Params : Cancel Returns : QueryInstruction} flowControl{ Params : FlowControl Returns : QueryInstruction} query{ Params :  Returns : Optional<Query>} cancel{ Params :  Returns : Optional<Cancel>} flowControl{ Params :  Returns : Optional<FlowControl>} requestId{ Params :  Returns : String} context{ Params :  Returns : String} priority{ Params :  Returns : long} toString{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} targetClientId{ Params :  Returns : String} queryRequest{ Params :  Returns : SerializedQuery} timeout{ Params :  Returns : long} priority{ Params :  Returns : long} streaming{ Params :  Returns : boolean} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} requestId{ Params :  Returns : String} queryName{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} requestId{ Params :  Returns : String} queryName{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} flowControl{ Params :  Returns : long} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} ,toString toString toString toString ,query cancel flowControl ,,,,FlowControl ,,FlowControl ,QueryInstruction QueryInstruction QueryInstruction ,: 
axon-server-se-master,io.axoniq.axonserver.message.query,Query,3,1,0,1,0,false,0 ,0 ,Query Cancel FlowControl ,targetClientStreamIdentification: ClientStreamIdentification targetClientId: String queryRequest: SerializedQuery timeout: long priority: long streaming: boolean ,query{ Params : Query Returns : QueryInstruction} cancel{ Params : Cancel Returns : QueryInstruction} flowControl{ Params : FlowControl Returns : QueryInstruction} query{ Params :  Returns : Optional<Query>} cancel{ Params :  Returns : Optional<Cancel>} flowControl{ Params :  Returns : Optional<FlowControl>} requestId{ Params :  Returns : String} context{ Params :  Returns : String} priority{ Params :  Returns : long} toString{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} targetClientId{ Params :  Returns : String} queryRequest{ Params :  Returns : SerializedQuery} timeout{ Params :  Returns : long} priority{ Params :  Returns : long} streaming{ Params :  Returns : boolean} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} requestId{ Params :  Returns : String} queryName{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} requestId{ Params :  Returns : String} queryName{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} flowControl{ Params :  Returns : long} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} ,toString toString toString toString ,query cancel flowControl ,,,,boolean ,,boolean ,,: 
axon-server-se-master,io.axoniq.axonserver.message.query,Cancel,3,1,0,1,0,false,0 ,0 ,Query Cancel FlowControl ,requestId: String queryName: String targetClientStreamIdentification: ClientStreamIdentification ,query{ Params : Query Returns : QueryInstruction} cancel{ Params : Cancel Returns : QueryInstruction} flowControl{ Params : FlowControl Returns : QueryInstruction} query{ Params :  Returns : Optional<Query>} cancel{ Params :  Returns : Optional<Cancel>} flowControl{ Params :  Returns : Optional<FlowControl>} requestId{ Params :  Returns : String} context{ Params :  Returns : String} priority{ Params :  Returns : long} toString{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} targetClientId{ Params :  Returns : String} queryRequest{ Params :  Returns : SerializedQuery} timeout{ Params :  Returns : long} priority{ Params :  Returns : long} streaming{ Params :  Returns : boolean} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} requestId{ Params :  Returns : String} queryName{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} requestId{ Params :  Returns : String} queryName{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} flowControl{ Params :  Returns : long} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} ,toString toString toString toString ,query cancel flowControl ,,,,ClientStreamIdentification ,,ClientStreamIdentification ,,: 
axon-server-se-master,io.axoniq.axonserver.message.query,FlowControl,3,1,0,1,0,false,0 ,0 ,Query Cancel FlowControl ,requestId: String queryName: String targetClientStreamIdentification: ClientStreamIdentification flowControl: long ,query{ Params : Query Returns : QueryInstruction} cancel{ Params : Cancel Returns : QueryInstruction} flowControl{ Params : FlowControl Returns : QueryInstruction} query{ Params :  Returns : Optional<Query>} cancel{ Params :  Returns : Optional<Cancel>} flowControl{ Params :  Returns : Optional<FlowControl>} requestId{ Params :  Returns : String} context{ Params :  Returns : String} priority{ Params :  Returns : long} toString{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} targetClientId{ Params :  Returns : String} queryRequest{ Params :  Returns : SerializedQuery} timeout{ Params :  Returns : long} priority{ Params :  Returns : long} streaming{ Params :  Returns : boolean} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} requestId{ Params :  Returns : String} queryName{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} requestId{ Params :  Returns : String} queryName{ Params :  Returns : String} targetClientStreamIdentification{ Params :  Returns : ClientStreamIdentification} flowControl{ Params :  Returns : long} targetClientStreamId{ Params :  Returns : String} context{ Params :  Returns : String} toString{ Params :  Returns : String} ,toString toString toString toString ,query cancel flowControl ,,,,long ,,long ,,: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryMetricsRegistry,1,1,0,0,0,false,0 ,0 ,QueryMetric ,logger: Logger timerMap: Map<String, Timer> meterFactory: MeterFactory ,on{ Params : TopologyEvents.ApplicationDisconnected Returns : void} addHandlerResponseTime{ Params : QueryDefinition,String,String,String,long Returns : void} clusterMetric{ Params : QueryDefinition,String,String Returns : ClusterMetric} timer{ Params : QueryDefinition,String,String,String Returns : Timer} metricName{ Params : QueryDefinition,String,String,String Returns : String} queryMetric{ Params : QueryDefinition,String,String,String Returns : QueryMetric} gauge{ Params : BaseMetricName,T,ToDoubleFunction<T> Returns : Gauge} rateMeter{ Params : String,BaseMetricName Returns : MeterFactory.RateMeter} addEndToEndResponseTime{ Params : QueryDefinition,String,String,long Returns : void} endToEndResponseTime{ Params : QueryDefinition,String,String Returns : HistogramSnapshot} getQueryDefinition{ Params :  Returns : QueryDefinition} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getComponentName{ Params :  Returns : String} getCount{ Params :  Returns : long} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,equals hashCode ,,,,,MeterFactory ,,MeterFactory ,ConcurrentHashMap CompositeMetric Metrics QueryMetric ,query: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryMetric,3,1,0,1,0,false,0 ,0 ,QueryMetric ,queryDefinition: QueryDefinition clientId: String context: String componentName: String count: long ,on{ Params : TopologyEvents.ApplicationDisconnected Returns : void} addHandlerResponseTime{ Params : QueryDefinition,String,String,String,long Returns : void} clusterMetric{ Params : QueryDefinition,String,String Returns : ClusterMetric} timer{ Params : QueryDefinition,String,String,String Returns : Timer} metricName{ Params : QueryDefinition,String,String,String Returns : String} queryMetric{ Params : QueryDefinition,String,String,String Returns : QueryMetric} gauge{ Params : BaseMetricName,T,ToDoubleFunction<T> Returns : Gauge} rateMeter{ Params : String,BaseMetricName Returns : MeterFactory.RateMeter} addEndToEndResponseTime{ Params : QueryDefinition,String,String,long Returns : void} endToEndResponseTime{ Params : QueryDefinition,String,String Returns : HistogramSnapshot} getQueryDefinition{ Params :  Returns : QueryDefinition} getClientId{ Params :  Returns : String} getContext{ Params :  Returns : String} getComponentName{ Params :  Returns : String} getCount{ Params :  Returns : long} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,equals hashCode ,,,,,long ,,long ,,Objects: , queryDefinition, clientId, context
axon-server-se-master,io.axoniq.axonserver.message.query,QueryMetricsWebSocket,1,1,0,0,0,false,0 ,0 ,0 ,DESTINATION: String subscriptions: Map<String, Set<String>> queryMetricsRegistry: QueryMetricsRegistry queryRegistrationCache: QueryRegistrationCache topology: Topology webSocket: SimpMessagingTemplate ,publish{ Params :  Returns : void} on{ Params : SessionSubscribeEvent Returns : void} on{ Params : SessionUnsubscribeEvent Returns : void} getMetrics{ Params : QueryDefinition,Map<String,Set<QueryHandler<?>>> Returns : Stream<QueryMetricsRegistry.QueryMetric>} ,,,,,,SimpMessagingTemplate ,,SimpMessagingTemplate ,ConcurrentHashMap PrincipalAuthentication ,queryHandlers: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryRegistrationCache,1,1,0,0,0,false,0 ,0 ,QueryRegistration QueryInformation ,queryHandlerSelector: QueryHandlerSelector metaDataBasedNodeSelector: BiFunction<Map<String, MetaDataValue>, Set<ClientStreamIdentification>, Set<ClientStreamIdentification>> registrationsPerQuery: Map<QueryDefinition, QueryInformation> ,on{ Params : SubscriptionEvents.UnsubscribeQuery Returns : void} on{ Params : SubscriptionEvents.SubscribeQuery Returns : void} on{ Params : TopologyEvents.QueryHandlerDisconnected Returns : void} remove{ Params : ClientStreamIdentification Returns : void} remove{ Params : QueryDefinition,ClientStreamIdentification Returns : void} add{ Params : QueryDefinition,String,QueryHandler Returns : void} find{ Params : String,QueryRequest Returns : Set<QueryHandler<?>>} findAll{ Params : String,QueryRequest Returns : Collection<QueryHandler>} pickOne{ Params : QueryDefinition,String,NavigableSet<ClientStreamIdentification>,Set<ClientStreamIdentification> Returns : QueryHandler<?>} intersect{ Params : Set<ClientStreamIdentification>,Set<ClientStreamIdentification> Returns : Set<ClientStreamIdentification>} getAll{ Params :  Returns : Map<QueryDefinition,Map<String,Set<QueryHandler<?>>>>} getForClient{ Params : ClientStreamIdentification Returns : List<QueryRegistration>} find{ Params : String,QueryRequest,String Returns : QueryHandler} find{ Params : QueryDefinition,String Returns : QueryHandler<?>} getClients{ Params :  Returns : Set<ClientStreamIdentification>} getResponseTypes{ Params : QueryDefinition Returns : Set<String>} getQueryDefinition{ Params :  Returns : QueryDefinition} getQueryHandler{ Params :  Returns : QueryHandler} removeClient{ Params : ClientStreamIdentification Returns : void} isEmpty{ Params :  Returns : boolean} addResultName{ Params : String Returns : QueryInformation} addHandler{ Params : QueryHandler Returns : QueryInformation} getHandler{ Params : ClientStreamIdentification Returns : QueryHandler} getHandlersPerComponent{ Params :  Returns : Map<String,NavigableSet<ClientStreamIdentification>>} ,,,,,,Map<QueryDefinition,QueryInformation> ,,Map<QueryDefinition,QueryInformation> ,ConcurrentHashMap QueryDefinition QueryDefinition QueryInformation QueryDefinition QueryDefinition TreeSet HashSet HashMap HashMap HashSet QueryRegistration QueryDefinition ClientStreamIdentification ConcurrentHashMap CopyOnWriteArraySet HashMap TreeSet ,registrationsPerQuery: , key
axon-server-se-master,io.axoniq.axonserver.message.query,QueryRegistration,3,1,0,1,0,false,0 ,0 ,QueryRegistration QueryInformation ,queryDefinition: QueryDefinition queryHandler: QueryHandler ,on{ Params : SubscriptionEvents.UnsubscribeQuery Returns : void} on{ Params : SubscriptionEvents.SubscribeQuery Returns : void} on{ Params : TopologyEvents.QueryHandlerDisconnected Returns : void} remove{ Params : ClientStreamIdentification Returns : void} remove{ Params : QueryDefinition,ClientStreamIdentification Returns : void} add{ Params : QueryDefinition,String,QueryHandler Returns : void} find{ Params : String,QueryRequest Returns : Set<QueryHandler<?>>} findAll{ Params : String,QueryRequest Returns : Collection<QueryHandler>} pickOne{ Params : QueryDefinition,String,NavigableSet<ClientStreamIdentification>,Set<ClientStreamIdentification> Returns : QueryHandler<?>} intersect{ Params : Set<ClientStreamIdentification>,Set<ClientStreamIdentification> Returns : Set<ClientStreamIdentification>} getAll{ Params :  Returns : Map<QueryDefinition,Map<String,Set<QueryHandler<?>>>>} getForClient{ Params : ClientStreamIdentification Returns : List<QueryRegistration>} find{ Params : String,QueryRequest,String Returns : QueryHandler} find{ Params : QueryDefinition,String Returns : QueryHandler<?>} getClients{ Params :  Returns : Set<ClientStreamIdentification>} getResponseTypes{ Params : QueryDefinition Returns : Set<String>} getQueryDefinition{ Params :  Returns : QueryDefinition} getQueryHandler{ Params :  Returns : QueryHandler} removeClient{ Params : ClientStreamIdentification Returns : void} isEmpty{ Params :  Returns : boolean} addResultName{ Params : String Returns : QueryInformation} addHandler{ Params : QueryHandler Returns : QueryInformation} getHandler{ Params : ClientStreamIdentification Returns : QueryHandler} getHandlersPerComponent{ Params :  Returns : Map<String,NavigableSet<ClientStreamIdentification>>} ,,,,,,,,,,registrationsPerQuery: , key
axon-server-se-master,io.axoniq.axonserver.message.query,QueryInformation,3,2,0,0,0,false,0 ,0 ,QueryRegistration QueryInformation ,handlers: Map<ClientStreamIdentification, QueryHandler> resultNames: Set<String> ,on{ Params : SubscriptionEvents.UnsubscribeQuery Returns : void} on{ Params : SubscriptionEvents.SubscribeQuery Returns : void} on{ Params : TopologyEvents.QueryHandlerDisconnected Returns : void} remove{ Params : ClientStreamIdentification Returns : void} remove{ Params : QueryDefinition,ClientStreamIdentification Returns : void} add{ Params : QueryDefinition,String,QueryHandler Returns : void} find{ Params : String,QueryRequest Returns : Set<QueryHandler<?>>} findAll{ Params : String,QueryRequest Returns : Collection<QueryHandler>} pickOne{ Params : QueryDefinition,String,NavigableSet<ClientStreamIdentification>,Set<ClientStreamIdentification> Returns : QueryHandler<?>} intersect{ Params : Set<ClientStreamIdentification>,Set<ClientStreamIdentification> Returns : Set<ClientStreamIdentification>} getAll{ Params :  Returns : Map<QueryDefinition,Map<String,Set<QueryHandler<?>>>>} getForClient{ Params : ClientStreamIdentification Returns : List<QueryRegistration>} find{ Params : String,QueryRequest,String Returns : QueryHandler} find{ Params : QueryDefinition,String Returns : QueryHandler<?>} getClients{ Params :  Returns : Set<ClientStreamIdentification>} getResponseTypes{ Params : QueryDefinition Returns : Set<String>} getQueryDefinition{ Params :  Returns : QueryDefinition} getQueryHandler{ Params :  Returns : QueryHandler} removeClient{ Params : ClientStreamIdentification Returns : void} isEmpty{ Params :  Returns : boolean} addResultName{ Params : String Returns : QueryInformation} addHandler{ Params : QueryHandler Returns : QueryInformation} getHandler{ Params : ClientStreamIdentification Returns : QueryHandler} getHandlersPerComponent{ Params :  Returns : Map<String,NavigableSet<ClientStreamIdentification>>} ,,,,,,Set<String> ,,Set<String> ,ConcurrentHashMap CopyOnWriteArraySet HashMap TreeSet ,queryHandler: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryResponseConsumer,2,1,0,0,0,true,0 ,0 ,0 ,,onNext{ Params : QueryResponse Returns : void} onCompleted{ Params :  Returns : void} ,,,,,,,,,,queryHandler: 
axon-server-se-master,io.axoniq.axonserver.message.query,RoundRobinQueryHandlerSelector,1,1,0,0,0,false,0 ,QueryHandlerSelector ,QueryDefinitionComponent ,lastClientMap: ConcurrentMap<QueryDefinitionComponent, ClientStreamIdentification> ,select{ Params : QueryDefinition,String,NavigableSet<ClientStreamIdentification> Returns : ClientStreamIdentification} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,select equals hashCode ,,,,QueryHandlerSelector ,ConcurrentMap<QueryDefinitionComponent,ClientStreamIdentification> ,,ConcurrentMap<QueryDefinitionComponent,ClientStreamIdentification> ,ConcurrentHashMap QueryDefinitionComponent ,lastClientMap: , key, last
axon-server-se-master,io.axoniq.axonserver.message.query,QueryDefinitionComponent,3,2,0,1,0,false,0 ,QueryHandlerSelector ,QueryDefinitionComponent ,queryDefinition: QueryDefinition componentName: String ,select{ Params : QueryDefinition,String,NavigableSet<ClientStreamIdentification> Returns : ClientStreamIdentification} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,select equals hashCode ,,,,,String ,,String ,,Objects: , queryDefinition, componentName
axon-server-se-master,io.axoniq.axonserver.message.query.subscription,DirectSubscriptionQueries,1,1,0,0,0,false,0 ,Iterable<DirectSubscriptionQueries.ContextSubscriptionQuery> ,ContextSubscriptionQuery ,map: Map<String, Map<String, ContextSubscriptionQuery>> ,on{ Params : SubscriptionQueryStarted Returns : void} on{ Params : SubscriptionQueryCanceled Returns : void} iterator{ Params :  Returns : Iterator<ContextSubscriptionQuery>} clientRequests{ Params : String Returns : Map<String,ContextSubscriptionQuery>} context{ Params :  Returns : String} subscriptionQuery{ Params :  Returns : SubscriptionQuery} queryName{ Params :  Returns : String} ,iterator ,,,,Iterable ,Map<String,Map<String,ContextSubscriptionQuery>> ,,Map<String,Map<String,ContextSubscriptionQuery>> ,ConcurrentHashMap ContextSubscriptionQuery ConcurrentHashMap ,map: , clientId, id -> new ConcurrentHashMap<>()
axon-server-se-master,io.axoniq.axonserver.message.query.subscription,ContextSubscriptionQuery,3,1,0,1,0,false,0 ,Iterable<DirectSubscriptionQueries.ContextSubscriptionQuery> ,ContextSubscriptionQuery ,context: String subscriptionQuery: SubscriptionQuery ,on{ Params : SubscriptionQueryStarted Returns : void} on{ Params : SubscriptionQueryCanceled Returns : void} iterator{ Params :  Returns : Iterator<ContextSubscriptionQuery>} clientRequests{ Params : String Returns : Map<String,ContextSubscriptionQuery>} context{ Params :  Returns : String} subscriptionQuery{ Params :  Returns : SubscriptionQuery} queryName{ Params :  Returns : String} ,iterator ,,,,,SubscriptionQuery ,,SubscriptionQuery ,,subscriptionQuery: 
axon-server-se-master,io.axoniq.axonserver.message.query.subscription.handler,DirectUpdateHandler,1,1,0,0,0,false,0 ,UpdateHandler ,0 ,logger: Logger destination: Publisher<SubscriptionQueryResponse> ,onSubscriptionQueryResponse{ Params : SubscriptionQueryResponse Returns : void} ,onSubscriptionQueryResponse ,,,,UpdateHandler ,Publisher<SubscriptionQueryResponse> ,,Publisher<SubscriptionQueryResponse> ,,destination: , response
axon-server-se-master,io.axoniq.axonserver.message.query.subscription.metric,ApplicationSubscriptionMetricRegistry,1,1,0,0,0,false,0 ,0 ,0 ,TAG_COMPONENT: String localMetricRegistry: MeterFactory clusterMetricProvider: BiFunction<String, Tags, ClusterMetric> componentNames: Map<String, String> contexts: Map<String, String> totalSubscriptionsMap: Map<String, Counter> activeSubscriptionsMap: Map<String, AtomicInteger> updatesMap: Map<String, Counter> ,get{ Params : String,String Returns : HubSubscriptionMetrics} on{ Params : SubscriptionQueryEvents.SubscriptionQueryStarted Returns : void} on{ Params : SubscriptionQueryEvents.SubscriptionQueryCanceled Returns : void} on{ Params : SubscriptionQueryEvents.SubscriptionQueryResponseReceived Returns : void} activeSubscriptionsMetric{ Params : String,String Returns : AtomicInteger} activeSubscriptionsMetricName{ Params : String,String Returns : String} name{ Params : String,String,String,String Returns : String} totalSubscriptionsMetric{ Params : String,String Returns : Counter} updatesMetric{ Params : String,String Returns : Counter} ,,,,,,Map<String,Counter> ,,Map<String,Counter> ,ConcurrentHashMap ConcurrentHashMap ConcurrentHashMap ConcurrentHashMap ConcurrentHashMap HubSubscriptionMetrics GaugeMetric CounterMetric CounterMetric AtomicInteger ,Tags: , MeterFactory.CONTEXT, context, TAG_COMPONENT, component
axon-server-se-master,io.axoniq.axonserver.message.query.subscription.metric,GlobalSubscriptionMetricRegistry,1,1,0,0,0,false,0 ,Supplier<SubscriptionMetrics> ,0 ,subscriptions: Set<String> total: Counter clusterMetricCollector: BiFunction<String, Tags, ClusterMetric> active: AtomicInteger updates: Counter ,get{ Params :  Returns : HubSubscriptionMetrics} on{ Params : SubscriptionQueryEvents.SubscriptionQueryStarted Returns : void} on{ Params : SubscriptionQueryEvents.SubscriptionQueryCanceled Returns : void} on{ Params : SubscriptionQueryEvents.SubscriptionQueryResponseReceived Returns : void} ,get ,,,,Supplier ,Counter ,,Counter ,CopyOnWriteArraySet AtomicInteger HubSubscriptionMetrics GaugeMetric CounterMetric CounterMetric ,updates: 
axon-server-se-master,io.axoniq.axonserver.message.query.subscription.metric,HubSubscriptionMetrics,1,1,0,0,0,false,0 ,SubscriptionMetrics ,0 ,totalSubscriptions: ClusterMetric activeSubscriptions: ClusterMetric updates: ClusterMetric ,totalCount{ Params :  Returns : Long} activesCount{ Params :  Returns : Long} updatesCount{ Params :  Returns : Long} printOn{ Params : Media Returns : void} ,totalCount activesCount updatesCount printOn ,,,,SubscriptionMetrics ,ClusterMetric ,,ClusterMetric ,CompositeMetric CompositeMetric CompositeMetric ,: 
axon-server-se-master,io.axoniq.axonserver.message.query.subscription.metric,QuerySubscriptionMetricRegistry,1,1,0,0,0,false,0 ,0 ,0 ,TAG_QUERY: String localRegistry: MeterFactory clusterMetricProvider: BiFunction<String, Tags, ClusterMetric> queries: Map<String, String> contexts: Map<String, String> totalSubscriptionsMap: Map<String, Counter> activeSubscriptionsMap: Map<String, AtomicInteger> updatesMap: Map<String, Counter> ,get{ Params : String,String,String Returns : HubSubscriptionMetrics} on{ Params : SubscriptionQueryEvents.SubscriptionQueryStarted Returns : void} on{ Params : SubscriptionQueryEvents.SubscriptionQueryCanceled Returns : void} on{ Params : SubscriptionQueryEvents.SubscriptionQueryResponseReceived Returns : void} activeSubscriptionsMetric{ Params : String,String Returns : AtomicInteger} activeSubscriptionsMetricName{ Params : String,String Returns : String} name{ Params : String,String,String,String Returns : String} name{ Params : String,String,String,String,String Returns : String} totalSubscriptionsMetric{ Params : String,String Returns : Counter} updatesMetric{ Params : String,String,String Returns : Counter} ,,,,,,Map<String,Counter> ,,Map<String,Counter> ,ConcurrentHashMap ConcurrentHashMap ConcurrentHashMap ConcurrentHashMap ConcurrentHashMap HubSubscriptionMetrics GaugeMetric CounterMetric CounterMetric AtomicInteger ,Tags: , MeterFactory.CONTEXT, context, TAG_QUERY, query
axon-server-se-master,io.axoniq.axonserver.message.query.subscription,QueryUpdateDispatcher,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger handlers: Map<String, UpdateHandler> ,on{ Params : ProxiedSubscriptionQueryRequest Returns : void} on{ Params : SubscriptionQueryRequestEvent Returns : void} on{ Params : SubscriptionQueryCanceled Returns : void} on{ Params : SubscriptionQueryResponseReceived Returns : void} ,,,,,,Map<String,UpdateHandler> ,,Map<String,UpdateHandler> ,ConcurrentHashMap ,event: 
axon-server-se-master,io.axoniq.axonserver.message.query.subscription,SubscriptionMetrics,2,1,0,0,0,true,0 ,0 ,0 ,,totalCount{ Params :  Returns : Long} activesCount{ Params :  Returns : Long} updatesCount{ Params :  Returns : Long} ,,,,,,,,,,event: 
axon-server-se-master,io.axoniq.axonserver.message.query.subscription,SubscriptionQueryDispatcher,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger directSubscriptions: Iterable<ContextSubscriptionQuery> registrationCache: QueryRegistrationCache subscriptionsSent: Map<ClientStreamIdentification, Set<String>> ,on{ Params : ProxiedSubscriptionQueryRequest Returns : void} on{ Params : SubscriptionQueryRequested Returns : SubscriptionQueryStarted} on{ Params : SubscriptionQueryInitialResultRequested Returns : void} on{ Params : SubscriptionQueryCanceled Returns : void} safeDispatch{ Params : QueryHandler,SubscriptionQueryRequest Returns : void} on{ Params : SubscriptionEvents.SubscribeQuery Returns : void} on{ Params : QueryHandlerDisconnected Returns : void} ,,,,,,Map<ClientStreamIdentification,Set<String>> ,,Map<ClientStreamIdentification,Set<String>> ,ConcurrentHashMap IllegalArgumentException CopyOnWriteArraySet SubscriptionQueryStarted IllegalArgumentException CopyOnWriteArraySet QueryDefinition QueryDefinition CopyOnWriteArraySet ClientStreamIdentification ,event: 
axon-server-se-master,io.axoniq.axonserver.message.query.subscription,UpdateHandler,2,1,0,0,0,true,0 ,0 ,0 ,,onSubscriptionQueryResponse{ Params : SubscriptionQueryResponse Returns : void} ,,,,,,,,,,event: 
axon-server-se-master,io.axoniq.axonserver.message,SubscriptionKey,1,1,0,0,0,false,0 ,0 ,0 ,sessionId: String subscriptionId: String ,equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,equals hashCode ,,,,,String ,,String ,,Objects: , sessionId, subscriptionId
axon-server-se-master,io.axoniq.axonserver.metric,AxonServerMetric,2,1,0,0,0,true,0 ,0 ,0 ,,getValue{ Params :  Returns : double} getMin{ Params :  Returns : double} getMax{ Params :  Returns : double} getMean{ Params :  Returns : double} getName{ Params :  Returns : String} getCount{ Params :  Returns : long} ,,,,,,,,,,Objects: , sessionId, subscriptionId
axon-server-se-master,io.axoniq.axonserver.metric,ClusterMetric,2,1,0,0,0,true,0 ,0 ,0 ,,count{ Params :  Returns : long} value{ Params :  Returns : double} min{ Params :  Returns : double} max{ Params :  Returns : double} mean{ Params :  Returns : double} ,,,,,,,,,,Objects: , sessionId, subscriptionId
axon-server-se-master,io.axoniq.axonserver.metric,CompositeMetric,1,1,0,0,0,false,0 ,ClusterMetric ,0 ,clusterMetrics: Collection<ClusterMetric> ,value{ Params :  Returns : double} count{ Params :  Returns : long} min{ Params :  Returns : double} max{ Params :  Returns : double} mean{ Params :  Returns : double} toString{ Params :  Returns : String} ,value count min max mean toString ,,,,ClusterMetric ,Collection<ClusterMetric> ,,Collection<ClusterMetric> ,LinkedList ,: 
axon-server-se-master,io.axoniq.axonserver.metric,CounterMetric,1,1,0,0,0,false,0 ,ClusterMetric ,0 ,name: String valueProvider: Supplier<Long> ,getName{ Params :  Returns : String} count{ Params :  Returns : long} min{ Params :  Returns : double} max{ Params :  Returns : double} mean{ Params :  Returns : double} value{ Params :  Returns : double} ,count min max mean value ,,,,ClusterMetric ,Supplier<Long> ,,Supplier<Long> ,,valueProvider: 
axon-server-se-master,io.axoniq.axonserver.metric,DefaultMetricCollector,1,1,0,0,0,false,0 ,MetricCollector ,0 ,,getAll{ Params : String,Tags Returns : Iterable<AxonServerMetric>} apply{ Params : String,Tags Returns : ClusterMetric} ,getAll apply ,,,,MetricCollector ,,,,CounterMetric ,Collections: 
axon-server-se-master,io.axoniq.axonserver.metric,GaugeMetric,1,1,0,0,0,false,0 ,ClusterMetric ,0 ,name: String valueProvider: Supplier<Double> ,getName{ Params :  Returns : String} count{ Params :  Returns : long} min{ Params :  Returns : double} max{ Params :  Returns : double} mean{ Params :  Returns : double} value{ Params :  Returns : double} ,count min max mean value ,,,,ClusterMetric ,Supplier<Double> ,,Supplier<Double> ,,valueProvider: 
axon-server-se-master,io.axoniq.axonserver.metric,IntervalCounter,1,1,0,0,0,false,SlidingWindow<AtomicInteger> ,0 ,0 ,total: AtomicLong started: long ,getOneMinuteRate{ Params :  Returns : int} getFiveMinuteRate{ Params :  Returns : int} getFifteenMinuteRate{ Params :  Returns : int} seconds{ Params : int Returns : int} mark{ Params :  Returns : void} count{ Params :  Returns : long} ,,,,,,long ,,long ,AtomicLong AtomicInteger ,total: 
axon-server-se-master,io.axoniq.axonserver.metric,MeterFactory,1,1,0,0,0,false,0 ,0 ,RateMeter ,CONTEXT: String REQUEST: String SOURCE: String TARGET: String meterRegistry: MeterRegistry clusterMetrics: MetricCollector clock: Clock ,rateMeter{ Params : MetricName,Tags Returns : RateMeter} counter{ Params : MetricName,Tags Returns : Counter} counter{ Params : MetricName Returns : Counter} timer{ Params : MetricName,Tags Returns : Timer} distributionSummary{ Params : MetricName,Tags Returns : DistributionSummary} gauge{ Params : MetricName,Tags,T,ToDoubleFunction<T> Returns : Gauge} gauge{ Params : MetricName,T,ToDoubleFunction<T> Returns : Gauge} clusterMetrics{ Params :  Returns : MetricCollector} snapshot{ Params : MetricName,Tags Returns : SnapshotMetric} remove{ Params : Meter Returns : void} remove{ Params : BaseMetricName,String,String Returns : void} mark{ Params :  Returns : void} getCount{ Params :  Returns : long} getOneMinuteRate{ Params :  Returns : double} getFiveMinuteRate{ Params :  Returns : double} getFifteenMinuteRate{ Params :  Returns : double} getName{ Params :  Returns : String} printOn{ Params : Media Returns : void} ,printOn ,,,,,Clock ,,Clock ,RateMeter SnapshotMetric LinkedList IntervalCounter AtomicLong Metrics AtomicDouble Metrics AtomicDouble Metrics AtomicDouble Metrics ,toDelete: , meterRegistry::remove
axon-server-se-master,io.axoniq.axonserver.metric,RateMeter,3,1,0,0,0,false,0 ,0 ,RateMeter ,ONE_MINUTE_RATE: String FIVE_MINUTE_RATE: String FIFTEEN_MINUTE_RATE: String COUNT: String meter: IntervalCounter deprecatedCounter: Counter counter: Counter name: String tags: Tags ,rateMeter{ Params : MetricName,Tags Returns : RateMeter} counter{ Params : MetricName,Tags Returns : Counter} counter{ Params : MetricName Returns : Counter} timer{ Params : MetricName,Tags Returns : Timer} distributionSummary{ Params : MetricName,Tags Returns : DistributionSummary} gauge{ Params : MetricName,Tags,T,ToDoubleFunction<T> Returns : Gauge} gauge{ Params : MetricName,T,ToDoubleFunction<T> Returns : Gauge} clusterMetrics{ Params :  Returns : MetricCollector} snapshot{ Params : MetricName,Tags Returns : SnapshotMetric} remove{ Params : Meter Returns : void} remove{ Params : BaseMetricName,String,String Returns : void} mark{ Params :  Returns : void} getCount{ Params :  Returns : long} getOneMinuteRate{ Params :  Returns : double} getFiveMinuteRate{ Params :  Returns : double} getFifteenMinuteRate{ Params :  Returns : double} getName{ Params :  Returns : String} printOn{ Params : Media Returns : void} ,printOn ,,,,Printable ,Tags ,,Tags ,IntervalCounter AtomicLong Metrics AtomicDouble Metrics AtomicDouble Metrics AtomicDouble Metrics ,: 
axon-server-se-master,io.axoniq.axonserver.metric,MetricCollector,2,1,0,0,0,true,0 ,0 ,0 ,,getAll{ Params : String,Tags Returns : Iterable<AxonServerMetric>} ,,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.metric,MetricName,2,1,0,0,0,true,0 ,0 ,0 ,,metric{ Params :  Returns : String} description{ Params :  Returns : String} ,,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.metric,Metrics,1,1,0,0,0,false,0 ,Iterable<ClusterMetric> ,0 ,metricName: String tags: Tags target: MetricCollector ,iterator{ Params :  Returns : Iterator<ClusterMetric>} ,iterator ,,,,Iterable ,MetricCollector ,,MetricCollector ,NodeMetric ,target: , metricName, tags
axon-server-se-master,io.axoniq.axonserver.metric,NodeMetric,1,1,0,0,0,false,0 ,ClusterMetric ,0 ,metric: AxonServerMetric ,value{ Params :  Returns : double} min{ Params :  Returns : double} max{ Params :  Returns : double} mean{ Params :  Returns : double} count{ Params :  Returns : long} ,value min max mean count ,,,,ClusterMetric ,AxonServerMetric ,,AxonServerMetric ,,metric: 
axon-server-se-master,io.axoniq.axonserver.metric,SlidingWindow,1,1,0,0,0,false,0 ,0 ,0 ,buckets: NavigableMap<Long, T> bucketMs: long aggregateOperation: BinaryOperator<T> createOperation: Supplier<T> clock: Clock maxBuckets: long ,current{ Params :  Returns : T} bucket{ Params : long Returns : long} truncate{ Params : long Returns : void} aggregate{ Params : long,TimeUnit Returns : T} ,,,,,,long ,,long ,ConcurrentSkipListMap AtomicBoolean ,createOperation: 
axon-server-se-master,io.axoniq.axonserver.metric,SnapshotMetric,1,1,0,0,0,false,0 ,ClusterMetric ,0 ,value: double max: double mean: double count: long ,value{ Params :  Returns : double} min{ Params :  Returns : double} max{ Params :  Returns : double} mean{ Params :  Returns : double} count{ Params :  Returns : long} ,value min max mean count ,,,,ClusterMetric ,long ,,long ,,createOperation: 
axon-server-se-master,io.axoniq.axonserver.plugin,ConfigurationValidationException,1,1,0,0,0,false,MessagingPlatformException ,0 ,0 ,errors: Map<String, Iterable<ConfigurationError>> ,getErrorPayload{ Params :  Returns : Object} toString{ Params :  Returns : String} ,getErrorPayload toString ,,,,,Map<String,Iterable<ConfigurationError>> ,,Map<String,Iterable<ConfigurationError>> ,StringJoiner ,ConfigurationValidationException.class: 
axon-server-se-master,io.axoniq.axonserver.plugin,ContextPluginStatus,1,1,0,0,0,false,0 ,0 ,0 ,id: long context: String plugin: PluginPackage configuration: String active: boolean ,getId{ Params :  Returns : long} setId{ Params : long Returns : void} getContext{ Params :  Returns : String} setContext{ Params : String Returns : void} getPlugin{ Params :  Returns : PluginPackage} setPlugin{ Params : PluginPackage Returns : void} isActive{ Params :  Returns : boolean} setActive{ Params : boolean Returns : void} getConfiguration{ Params :  Returns : String} setConfiguration{ Params : String Returns : void} getPluginKey{ Params :  Returns : PluginKey} ,,,,,,boolean ,,boolean ,,plugin: 
axon-server-se-master,io.axoniq.axonserver.plugin,DefaultPluginController,1,1,0,0,0,false,0 ,PluginController ,0 ,pluginPackageManager: PluginPackageManager configurationManager: PluginConfigurationManager pluginContextManager: PluginContextManager pluginConfigurationSerializer: PluginConfigurationSerializer ,listPlugins{ Params :  Returns : Iterable<PluginInfo>} uninstallPlugin{ Params : PluginKey Returns : void} addPlugin{ Params : String,InputStream Returns : PluginKey} listProperties{ Params : PluginKey,String Returns : List<PluginPropertyGroup>} updateConfiguration{ Params : PluginKey,String,Map<String,Map<String,Object>> Returns : void} updatePluginStatus{ Params : PluginKey,String,boolean Returns : void} unregisterPluginForContext{ Params : PluginKey,String Returns : void} ,listPlugins uninstallPlugin addPlugin listProperties updateConfiguration updatePluginStatus unregisterPluginForContext ,,,,PluginController ,PluginConfigurationSerializer ,,PluginConfigurationSerializer ,ConfigurationValidationException ,pluginContextManager: , pluginKey, Topology.DEFAULT_CONTEXT
axon-server-se-master,io.axoniq.axonserver.plugin,OsgiController,1,1,0,0,0,false,0 ,PluginServiceProvider ,0 ,logger: Logger pluginListeners: Set<BiConsumer<PluginKey, String>> cacheDirectory: String cacheCleanPolicy: String pluginsEnabled: boolean axonServerInformationProvider: AxonServerInformationProvider systemPackagesProvider: SystemPackagesProvider bundleContext: BundleContext framework: Framework ,start{ Params :  Returns : void} eventType{ Params : BundleEvent Returns : String} activeStateChanged{ Params : int Returns : boolean} registerPluginListener{ Params : BiConsumer<PluginKey,String> Returns : Registration} getServicesWithInfo{ Params : Class<T> Returns : Set<ServiceWithInfo<T>>} getConfigurationListeners{ Params : PluginKey Returns : Set<ConfigurationListener>} pluginKey{ Params : Bundle Returns : PluginKey} listPlugins{ Params :  Returns : Set<PluginKey>} stop{ Params :  Returns : void} addPlugin{ Params : File Returns : PluginKey} tryStart{ Params : Bundle Returns : void} getBundleInfo{ Params : File Returns : PluginKey} findBundle{ Params : String,String Returns : Optional<Bundle>} uninstallBundle{ Params : Bundle Returns : void} get{ Params : Class<T> Returns : Optional<T>} uninstallPlugin{ Params : PluginKey Returns : void} getBundle{ Params : PluginKey Returns : Bundle} isActive{ Params : Bundle Returns : boolean} startPlugin{ Params : String Returns : void} getStatus{ Params : PluginKey Returns : String} bundleStatus{ Params : Bundle Returns : String} ,registerPluginListener getServicesWithInfo ,,,,PluginServiceProvider ,Framework ,,Framework ,CopyOnWriteArraySet SystemPackagesProvider HashMap MessagingPlatformException ServiceWithInfo MessagingPlatformException PluginKey MessagingPlatformException PluginKey PluginKey FileInputStream FileInputStream MessagingPlatformException MessagingPlatformException JarInputStream FileInputStream MessagingPlatformException PluginKey MessagingPlatformException File ,bundle: 
axon-server-se-master,io.axoniq.axonserver.plugin,PluginConfigurationManager,1,1,0,0,0,false,0 ,0 ,0 ,osgiController: OsgiController ,on{ Params : PluginEnabledEvent Returns : void} on{ Params : PluginRemovedEvent Returns : void} updateConfiguration{ Params : PluginKey,String,Map<String,Map<String,Object>> Returns : void} errors{ Params : PluginKey,String,Map<String,Map<String,Object>> Returns : Map<String,Iterable<ConfigurationError>>} reduceValidated{ Params : Map<String,Validated<Map<String,Object>>> Returns : Map<String,Iterable<ConfigurationError>>} defaultProperties{ Params : PluginKey Returns : Map<String,Map<String,Object>>} configuration{ Params : PluginKey Returns : List<PluginPropertyGroup>} ,,reduceValidated ,,,,OsgiController ,,OsgiController ,HashMap HashMap HashMap MessagingPlatformException ArrayList PluginPropertyGroup ,Collectors: 
axon-server-se-master,io.axoniq.axonserver.plugin,PluginConfigurationSerializer,1,1,0,0,0,false,0 ,0 ,0 ,objectMapper: ObjectMapper ,deserialize{ Params : String Returns : Map<String,Map<String,Object>>} serialize{ Params : Map<String,Map<String,Object>> Returns : String} ,,,,,,ObjectMapper ,,ObjectMapper ,ObjectMapper MessagingPlatformException MessagingPlatformException ,objectMapper: , configuration
axon-server-se-master,io.axoniq.axonserver.plugin,PluginContextInfo,1,1,0,0,0,false,0 ,0 ,0 ,context: String active: boolean ,getContext{ Params :  Returns : String} isActive{ Params :  Returns : boolean} ,,,,,,boolean ,,boolean ,,objectMapper: , configuration
axon-server-se-master,io.axoniq.axonserver.plugin,PluginContextManager,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger pluginStatusRepository: PluginStatusRepository packageRepository: PluginPackageRepository pluginConfigurationSerializer: PluginConfigurationSerializer osgiController: OsgiController applicationEventPublisher: ApplicationEventPublisher ,updateStatus{ Params : String,String,String,boolean Returns : ContextPluginStatus} start{ Params :  Returns : void} getStatus{ Params : String,String,String Returns : Optional<ContextPluginStatus>} update{ Params : ContextPluginStatus Returns : void} remove{ Params : ContextPluginStatus Returns : void} findAllByContextIn{ Params : List<String> Returns : List<ContextPluginStatus>} updateConfiguration{ Params : String,String,String,Map<String,Map<String,Object>> Returns : void} publishConfiguration{ Params : PluginPackage Returns : void} uninstall{ Params : PluginKey Returns : void} removeForContext{ Params : PluginKey,String Returns : void} uninstallForContexts{ Params : List<String> Returns : void} listPlugins{ Params :  Returns : Iterable<PluginInfo>} findAll{ Params : PluginKey Returns : List<ContextPluginStatus>} ,,,,,,ApplicationEventPublisher ,,ApplicationEventPublisher ,PluginNotFoundException ContextPluginStatus PluginEnabledEvent PluginEnabledEvent PluginKey PluginEnabledEvent PluginNotFoundException PluginEnabledEvent PluginRemovedEvent PluginNotFoundException ContextPluginStatus PluginEnabledEvent PluginKey PluginEnabledEvent PluginEnabledEvent PluginEnabledEvent PluginEnabledEvent HashMap PluginInfo ,Collections: 
axon-server-se-master,io.axoniq.axonserver.plugin,PluginController,2,1,0,0,0,true,0 ,0 ,0 ,,listPlugins{ Params :  Returns : Iterable<PluginInfo>} uninstallPlugin{ Params : PluginKey Returns : void} addPlugin{ Params : String,InputStream Returns : PluginKey} listProperties{ Params : PluginKey,String Returns : List<PluginPropertyGroup>} updateConfiguration{ Params : PluginKey,String,Map<String,Map<String,Object>> Returns : void} updatePluginStatus{ Params : PluginKey,String,boolean Returns : void} unregisterPluginForContext{ Params : PluginKey,String Returns : void} ,,,,,,,,,,Collections: 
axon-server-se-master,io.axoniq.axonserver.plugin,PluginEvent,1,1,0,0,0,false,0 ,0 ,0 ,plugin: PluginKey status: String ,getPlugin{ Params :  Returns : PluginKey} getStatus{ Params :  Returns : String} ,,,,,,String ,,String ,,Collections: 
axon-server-se-master,io.axoniq.axonserver.plugin,PluginInfo,1,1,0,0,0,false,0 ,0 ,0 ,version: String name: String filename: String pluginStatus: String contextInfoList: List<PluginContextInfo> ,getVersion{ Params :  Returns : String} getName{ Params :  Returns : String} getContextInfoList{ Params :  Returns : List<PluginContextInfo>} getFilename{ Params :  Returns : String} getPluginStatus{ Params :  Returns : String} addContextInfo{ Params : String,boolean Returns : void} ,,,,,,List<PluginContextInfo> ,,List<PluginContextInfo> ,LinkedList PluginContextInfo ,contextInfoList: , new PluginContextInfo(context, active)
axon-server-se-master,io.axoniq.axonserver.plugin,PluginKey,1,1,0,0,0,false,0 ,0 ,0 ,symbolicName: String version: String ,getSymbolicName{ Params :  Returns : String} getVersion{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,equals hashCode toString ,,,,,String ,,String ,,Objects: , symbolicName, version
axon-server-se-master,io.axoniq.axonserver.plugin,PluginNotFoundException,1,1,0,0,0,false,MessagingPlatformException ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.plugin,PluginPackage,1,1,0,0,0,false,0 ,0 ,0 ,id: long name: String version: String filename: String deleted: Boolean ,getId{ Params :  Returns : long} setId{ Params : long Returns : void} getName{ Params :  Returns : String} setName{ Params : String Returns : void} getVersion{ Params :  Returns : String} setVersion{ Params : String Returns : void} getFilename{ Params :  Returns : String} setFilename{ Params : String Returns : void} getKey{ Params :  Returns : PluginKey} isDeleted{ Params :  Returns : boolean} setDeleted{ Params : Boolean Returns : void} ,,,,,,Boolean ,,Boolean ,PluginKey ,Objects: , symbolicName, version
axon-server-se-master,io.axoniq.axonserver.plugin,PluginPackageManager,1,1,0,0,0,false,0 ,SmartLifecycle ,0 ,logger: Logger eventPublisher: ApplicationEventPublisher bundleDirectory: String pluginPackageRepository: PluginPackageRepository osgiController: OsgiController pluginContextManager: PluginContextManager running: boolean ,pluginStatusChanged{ Params : PluginKey,String Returns : void} start{ Params :  Returns : void} startPlugin{ Params : PluginPackage Returns : void} stop{ Params :  Returns : void} isRunning{ Params :  Returns : boolean} getPhase{ Params :  Returns : int} uninstallPlugin{ Params : PluginKey Returns : void} removePlugin{ Params : PluginPackage Returns : void} addPlugin{ Params : String,InputStream Returns : PluginPackage} writeToFile{ Params : InputStream,File Returns : void} listPlugins{ Params :  Returns : Iterable<PluginInfo>} getLocation{ Params : PluginKey Returns : File} getPluginPackage{ Params : String,String,String Returns : Optional<PluginPackage>} getFullPath{ Params : String,String Returns : File} ,start stop isRunning getPhase ,,,,SmartLifecycle ,boolean ,,boolean ,PluginEvent File File File File PluginPackage FileOutputStream MessagingPlatformException File File MessagingPlatformException ,pack: 
axon-server-se-master,io.axoniq.axonserver.plugin,PluginPackageRepository,2,1,0,0,0,true,0 ,SmartLifecycle ,0 ,,findByNameAndVersion{ Params : String,String Returns : Optional<PluginPackage>} ,,,,,,,,,,pack: 
axon-server-se-master,io.axoniq.axonserver.plugin,PluginProperty,1,1,0,0,0,false,0 ,0 ,0 ,DUMMY_PASSWORD: String id: String name: String cardinality: Cardinality defaultValue: Object value: Object type: AttributeType optionLabels: String optionValues: String description: String ,getId{ Params :  Returns : String} getName{ Params :  Returns : String} getCardinality{ Params :  Returns : Cardinality} getDefaultValue{ Params :  Returns : Object} getValue{ Params :  Returns : Object} getType{ Params :  Returns : AttributeType} getOptionLabels{ Params :  Returns : String[]} getOptionValues{ Params :  Returns : String[]} getDescription{ Params :  Returns : String} setValue{ Params : Object Returns : void} internalValue{ Params :  Returns : Object} ,,,,,,String ,,String ,,Cardinality.MULTI: , cardinality
axon-server-se-master,io.axoniq.axonserver.plugin,PluginPropertyUtils,1,1,0,0,0,false,0 ,0 ,0 ,,validateProperties{ Params : Map<String,Map<String,Object>>,List<PluginPropertyGroup> Returns : Map<String,Map<String,Object>>} convertType{ Params : Object,PluginProperty Returns : Object} setValues{ Params : List<PluginPropertyGroup>,String,PluginConfigurationSerializer Returns : void} ,,validateProperties convertType setValues ,,,,,,,HashMap HashMap ArrayList ArrayList ArrayList MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException ,prop: 
axon-server-se-master,io.axoniq.axonserver.plugin,PluginServiceProvider,2,1,0,0,0,true,0 ,0 ,0 ,,registerPluginListener{ Params : BiConsumer<PluginKey,String> Returns : Registration} getServicesWithInfo{ Params : Class<T> Returns : Set<ServiceWithInfo<T>>} ,,,,,,,,,,prop: 
axon-server-se-master,io.axoniq.axonserver.plugin,PluginStatusRepository,2,1,0,0,0,true,0 ,0 ,0 ,,findByContextAndPlugin{ Params : String,PluginPackage Returns : Optional<ContextPluginStatus>} findByContextAndPlugin_NameAndActive{ Params : String,String,boolean Returns : Optional<ContextPluginStatus>} findAllByContextIn{ Params : List<String> Returns : List<ContextPluginStatus>} findAllByPlugin{ Params : PluginPackage Returns : List<ContextPluginStatus>} ,,,,,,,,,,prop: 
axon-server-se-master,io.axoniq.axonserver.plugin,PluginWebsocket,1,1,0,0,0,false,0 ,0 ,0 ,websocket: SimpMessagingTemplate ,on{ Params : PluginEnabledEvent Returns : void} on{ Params : PluginEvent Returns : void} ,,,,,,SimpMessagingTemplate ,,SimpMessagingTemplate ,PluginEvent ,websocket: , "/topic/extensions", event
axon-server-se-master,io.axoniq.axonserver.plugin,ServiceWithInfo,1,1,0,0,0,false,0 ,Comparable<ServiceWithInfo<T>> ,0 ,service: T pluginKey: PluginKey ,service{ Params :  Returns : T} pluginKey{ Params :  Returns : PluginKey} order{ Params :  Returns : int} compareTo{ Params : ServiceWithInfo<T> Returns : int} ,compareTo ,,,,Comparable ,PluginKey ,,PluginKey ,,o: 
axon-server-se-master,io.axoniq.axonserver.plugin,SystemPackagesProvider,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger ,getSystemPackages{ Params :  Returns : String} extractExportedPackages{ Params : List<String>,URL Returns : void} export{ Params : String Returns : boolean} ,,,,,,,,,LinkedList MessagingPlatformException Manifest MessagingPlatformException ,manifestUrl: , "axonserver-plugin-api"
axon-server-se-master,io.axoniq.axonserver,ProcessingInstructionHelper,1,1,1,0,0,false,0 ,0 ,0 ,,getProcessingInstructionString{ Params : List<ProcessingInstruction>,ProcessingKey,String Returns : String} getProcessingInstructionNumber{ Params : List<ProcessingInstruction>,ProcessingKey Returns : long} getProcessingInstructionNumber{ Params : List<ProcessingInstruction>,ProcessingKey,long Returns : long} clientSupportsQueryStreaming{ Params : List<ProcessingInstruction> Returns : boolean} getProcessingInstructionBoolean{ Params : List<ProcessingInstruction>,ProcessingKey Returns : Optional<Boolean>} priority{ Params : List<ProcessingInstruction> Returns : long} timeout{ Params : List<ProcessingInstruction> Returns : long} numberOfResults{ Params : List<ProcessingInstruction> Returns : int} routingKey{ Params : List<ProcessingInstruction>,String Returns : String} timeout{ Params : long Returns : ProcessingInstruction} numberOfResults{ Params : long Returns : ProcessingInstruction} routingKey{ Params : String Returns : ProcessingInstruction} priority{ Params : long Returns : ProcessingInstruction} ,,getProcessingInstructionString getProcessingInstructionNumber getProcessingInstructionNumber clientSupportsQueryStreaming getProcessingInstructionBoolean priority timeout numberOfResults routingKey timeout numberOfResults routingKey priority ,,,,,,,,MetaDataValue: 
axon-server-se-master,io.axoniq.axonserver.rest,AxonServersOverviewProvider,1,1,0,0,0,false,0 ,0 ,ApplicationsAndNodes ConnectedApplication ServerNode ,applicationProvider: Function<Predicate<String>, Stream<Application>> axonServerProvider: Function<Predicate<String>, Stream<AxonServer>> ,applicationsAndNodes{ Params :  Returns : ApplicationsAndNodes} applicationsAndNodes{ Params : String Returns : ApplicationsAndNodes} listApplications{ Params : String Returns : List<ConnectedApplication>} listNodes{ Params : String Returns : List<ServerNode>} getApplications{ Params :  Returns : List<ConnectedApplication>} getNodes{ Params :  Returns : List<ServerNode>} getName{ Params :  Returns : String} getComponent{ Params :  Returns : String} getContexts{ Params :  Returns : Iterable<String>} getInstances{ Params :  Returns : int} getConnectedHubNodes{ Params :  Returns : Iterable<String>} getHostName{ Params :  Returns : String} getGrpcPort{ Params :  Returns : Integer} getInternalHostName{ Params :  Returns : String} getGrpcInternalPort{ Params :  Returns : Integer} getHttpPort{ Params :  Returns : Integer} getName{ Params :  Returns : String} getTags{ Params :  Returns : Map<String,String>} getContexts{ Params :  Returns : Iterable<String>} isConnected{ Params :  Returns : boolean} isAdmin{ Params :  Returns : boolean} hasContext{ Params : String Returns : boolean} ,,,,,,Function<Predicate<String>,Stream<AxonServer>> ,,Function<Predicate<String>,Stream<AxonServer>> ,ApplicationsAndNodes ,Collectors: 
axon-server-se-master,io.axoniq.axonserver.rest,ApplicationsAndNodes,3,1,0,1,0,false,0 ,0 ,ApplicationsAndNodes ConnectedApplication ServerNode ,applications: List<ConnectedApplication> nodes: List<ServerNode> ,applicationsAndNodes{ Params :  Returns : ApplicationsAndNodes} applicationsAndNodes{ Params : String Returns : ApplicationsAndNodes} listApplications{ Params : String Returns : List<ConnectedApplication>} listNodes{ Params : String Returns : List<ServerNode>} getApplications{ Params :  Returns : List<ConnectedApplication>} getNodes{ Params :  Returns : List<ServerNode>} getName{ Params :  Returns : String} getComponent{ Params :  Returns : String} getContexts{ Params :  Returns : Iterable<String>} getInstances{ Params :  Returns : int} getConnectedHubNodes{ Params :  Returns : Iterable<String>} getHostName{ Params :  Returns : String} getGrpcPort{ Params :  Returns : Integer} getInternalHostName{ Params :  Returns : String} getGrpcInternalPort{ Params :  Returns : Integer} getHttpPort{ Params :  Returns : Integer} getName{ Params :  Returns : String} getTags{ Params :  Returns : Map<String,String>} getContexts{ Params :  Returns : Iterable<String>} isConnected{ Params :  Returns : boolean} isAdmin{ Params :  Returns : boolean} hasContext{ Params : String Returns : boolean} ,,,,,,,,,,Collectors: 
axon-server-se-master,io.axoniq.axonserver.rest,ConnectedApplication,3,1,0,1,0,false,0 ,0 ,ApplicationsAndNodes ConnectedApplication ServerNode ,wrapped: Application ,applicationsAndNodes{ Params :  Returns : ApplicationsAndNodes} applicationsAndNodes{ Params : String Returns : ApplicationsAndNodes} listApplications{ Params : String Returns : List<ConnectedApplication>} listNodes{ Params : String Returns : List<ServerNode>} getApplications{ Params :  Returns : List<ConnectedApplication>} getNodes{ Params :  Returns : List<ServerNode>} getName{ Params :  Returns : String} getComponent{ Params :  Returns : String} getContexts{ Params :  Returns : Iterable<String>} getInstances{ Params :  Returns : int} getConnectedHubNodes{ Params :  Returns : Iterable<String>} getHostName{ Params :  Returns : String} getGrpcPort{ Params :  Returns : Integer} getInternalHostName{ Params :  Returns : String} getGrpcInternalPort{ Params :  Returns : Integer} getHttpPort{ Params :  Returns : Integer} getName{ Params :  Returns : String} getTags{ Params :  Returns : Map<String,String>} getContexts{ Params :  Returns : Iterable<String>} isConnected{ Params :  Returns : boolean} isAdmin{ Params :  Returns : boolean} hasContext{ Params : String Returns : boolean} ,,,,,,Application ,,Application ,,wrapped: 
axon-server-se-master,io.axoniq.axonserver.rest,ServerNode,3,1,0,1,0,false,0 ,0 ,ApplicationsAndNodes ConnectedApplication ServerNode ,wrapped: AxonServer ,applicationsAndNodes{ Params :  Returns : ApplicationsAndNodes} applicationsAndNodes{ Params : String Returns : ApplicationsAndNodes} listApplications{ Params : String Returns : List<ConnectedApplication>} listNodes{ Params : String Returns : List<ServerNode>} getApplications{ Params :  Returns : List<ConnectedApplication>} getNodes{ Params :  Returns : List<ServerNode>} getName{ Params :  Returns : String} getComponent{ Params :  Returns : String} getContexts{ Params :  Returns : Iterable<String>} getInstances{ Params :  Returns : int} getConnectedHubNodes{ Params :  Returns : Iterable<String>} getHostName{ Params :  Returns : String} getGrpcPort{ Params :  Returns : Integer} getInternalHostName{ Params :  Returns : String} getGrpcInternalPort{ Params :  Returns : Integer} getHttpPort{ Params :  Returns : Integer} getName{ Params :  Returns : String} getTags{ Params :  Returns : Map<String,String>} getContexts{ Params :  Returns : Iterable<String>} isConnected{ Params :  Returns : boolean} isAdmin{ Params :  Returns : boolean} hasContext{ Params : String Returns : boolean} ,,,,,,AxonServer ,,AxonServer ,,s: , context
axon-server-se-master,io.axoniq.axonserver.rest,BackupControlDBRestController,1,1,0,0,0,false,0 ,0 ,0 ,auditLog: Logger backupInfoRestController: BackupInfoRestController ,createControlDbBackup{ Params : Principal Returns : String} ,,,,,,BackupInfoRestController ,,BackupInfoRestController ,,backupInfoRestController: 
axon-server-se-master,io.axoniq.axonserver.rest,BackupInfoRestController,1,1,0,0,0,false,0 ,0 ,EventStoreBackupInfo ,auditLog: Logger dataSource: DataSource localEventStore: LocalEventStore controlDbBackupLocation: String ,getFilenames{ Params : String,String,long,int,Principal Returns : ResponseEntity<List<String>>} eventStoreFilenames{ Params : String,String,long,int,Principal Returns : ResponseEntity<EventStoreBackupInfo>} createControlDbBackup{ Params :  Returns : String} getLastClosedSegment{ Params :  Returns : long} getFilenames{ Params :  Returns : List<String>} ,,,,,,String ,,String ,EventStoreBackupInfo File MessagingPlatformException File ,file: 
axon-server-se-master,io.axoniq.axonserver.rest,EventStoreBackupInfo,3,2,0,0,0,false,0 ,0 ,EventStoreBackupInfo ,lastClosedSegment: long filenames: List<String> ,getFilenames{ Params : String,String,long,int,Principal Returns : ResponseEntity<List<String>>} eventStoreFilenames{ Params : String,String,long,int,Principal Returns : ResponseEntity<EventStoreBackupInfo>} createControlDbBackup{ Params :  Returns : String} getLastClosedSegment{ Params :  Returns : long} getFilenames{ Params :  Returns : List<String>} ,,,,,,List<String> ,,List<String> ,,file: 
axon-server-se-master,io.axoniq.axonserver.rest,ClientApplicationRestController,1,1,0,0,0,false,0 ,0 ,0 ,auditLog: Logger clients: Clients clientIdRegistry: ClientIdRegistry ,getComponentInstances{ Params : String,String,Principal Returns : Iterable} listClients{ Params : Principal Returns : Stream<Client>} listClientIds{ Params : Principal Returns : Printable} ,,,,,,ClientIdRegistry ,,ClientIdRegistry ,ComponentItems ,AuditLog: , principal
axon-server-se-master,io.axoniq.axonserver.rest,CommandRestController,1,1,0,0,0,false,0 ,0 ,JsonClientMapping JsonQueueInfo ,auditLog: Logger commandDispatcher: CommandDispatcher registrationCache: CommandRegistrationCache ,getByComponent{ Params : String,String,Principal Returns : Iterable<ComponentCommand>} get{ Params : Principal Returns : List<JsonClientMapping>} execute{ Params : String,CommandRequestJson,Authentication Returns : Future<CommandResponseJson>} queues{ Params : Principal Returns : List<JsonQueueInfo>} count{ Params : Principal Returns : int} getClient{ Params :  Returns : String} getProxy{ Params :  Returns : String} getCommands{ Params :  Returns : Set<String>} getComponent{ Params :  Returns : String} from{ Params : String,String,String Returns : JsonClientMapping} from{ Params : Map.Entry<CommandHandler,Set<CommandRegistrationCache.RegistrationEntry>> Returns : JsonClientMapping} getClient{ Params :  Returns : String} getCount{ Params :  Returns : int} from{ Params : Map.Entry<String,? extends Queue> Returns : JsonQueueInfo} ,,from from from ,,,,CommandRegistrationCache ,,CommandRegistrationCache ,ComponentItems DefaultCommands CompletableFuture SerializedCommand CommandResponseJson JsonClientMapping JsonClientMapping JsonQueueInfo ,commandDispatcher: 
axon-server-se-master,io.axoniq.axonserver.rest,JsonClientMapping,3,1,0,1,0,false,0 ,0 ,JsonClientMapping JsonQueueInfo ,client: String component: String proxy: String commands: Set<String> ,getByComponent{ Params : String,String,Principal Returns : Iterable<ComponentCommand>} get{ Params : Principal Returns : List<JsonClientMapping>} execute{ Params : String,CommandRequestJson,Authentication Returns : Future<CommandResponseJson>} queues{ Params : Principal Returns : List<JsonQueueInfo>} count{ Params : Principal Returns : int} getClient{ Params :  Returns : String} getProxy{ Params :  Returns : String} getCommands{ Params :  Returns : Set<String>} getComponent{ Params :  Returns : String} from{ Params : String,String,String Returns : JsonClientMapping} from{ Params : Map.Entry<CommandHandler,Set<CommandRegistrationCache.RegistrationEntry>> Returns : JsonClientMapping} getClient{ Params :  Returns : String} getCount{ Params :  Returns : int} from{ Params : Map.Entry<String,? extends Queue> Returns : JsonQueueInfo} ,,from from from ,,,,Set<String> ,,Set<String> ,JsonClientMapping JsonClientMapping ,Collectors: 
axon-server-se-master,io.axoniq.axonserver.rest,JsonQueueInfo,3,2,0,1,0,false,0 ,0 ,JsonClientMapping JsonQueueInfo ,client: String count: int ,getByComponent{ Params : String,String,Principal Returns : Iterable<ComponentCommand>} get{ Params : Principal Returns : List<JsonClientMapping>} execute{ Params : String,CommandRequestJson,Authentication Returns : Future<CommandResponseJson>} queues{ Params : Principal Returns : List<JsonQueueInfo>} count{ Params : Principal Returns : int} getClient{ Params :  Returns : String} getProxy{ Params :  Returns : String} getCommands{ Params :  Returns : Set<String>} getComponent{ Params :  Returns : String} from{ Params : String,String,String Returns : JsonClientMapping} from{ Params : Map.Entry<CommandHandler,Set<CommandRegistrationCache.RegistrationEntry>> Returns : JsonClientMapping} getClient{ Params :  Returns : String} getCount{ Params :  Returns : int} from{ Params : Map.Entry<String,? extends Queue> Returns : JsonQueueInfo} ,,from from from ,,,,int ,,int ,JsonQueueInfo ,segment: 
axon-server-se-master,io.axoniq.axonserver.rest,DevelopmentRestController,1,1,0,0,0,false,0 ,0 ,0 ,auditLog: Logger eventStoreLocator: EventStoreLocator ,init{ Params :  Returns : void} resetEventStore{ Params : Principal Returns : Mono<Void>} ,,,,,,EventStoreLocator ,,EventStoreLocator ,,eventStoreLocator: , "default"
axon-server-se-master,io.axoniq.axonserver.rest,EventsRestController,1,1,0,0,0,false,0 ,0 ,JsonEvent JsonEventList ,auditLog: Logger eventStoreClient: EventDispatcher logger: Logger ,findSnapshots{ Params : String,String,long,long,Authentication Returns : SseEmitter} listAggregateEvents{ Params : String,String,long,boolean,long,long,long,Authentication Returns : SseEmitter} handleSseEvent{ Params : SseEmitter,Runnable Returns : void} send{ Params : SseEmitter,ObjectMapper,SerializedEvent Returns : void} send{ Params : SseEmitter,SerializedEventWithToken Returns : void} completeEmitter{ Params : SseEmitter Returns : void} submitEvents{ Params : String,JsonEventList,Authentication Returns : Mono<Void>} appendSnapshotOld{ Params : String,JsonEvent,Authentication Returns : Mono<Void>} appendSnapshot{ Params : String,JsonEvent,Authentication Returns : Mono<Void>} getMessageIdentifier{ Params :  Returns : String} setMessageIdentifier{ Params : String Returns : void} getAggregateIdentifier{ Params :  Returns : String} setAggregateIdentifier{ Params : String Returns : void} getAggregateSequenceNumber{ Params :  Returns : long} setAggregateSequenceNumber{ Params : long Returns : void} getAggregateType{ Params :  Returns : String} setAggregateType{ Params : String Returns : void} setMetaData{ Params : MetaDataJson Returns : void} getMetaData{ Params :  Returns : MetaDataJson} getPayload{ Params :  Returns : SerializedObjectJson} setPayload{ Params : SerializedObjectJson Returns : void} getTimestamp{ Params :  Returns : long} setTimestamp{ Params : long Returns : void} asEvent{ Params :  Returns : Event} getMessages{ Params :  Returns : List<JsonEvent>} setMessages{ Params : List<JsonEvent> Returns : void} ,,,,,,Logger ,,Logger ,SseEmitter JsonEvent SseEmitter ObjectMapper JsonEvent JsonEvent IllegalArgumentException SerializedEvent MetaDataJson SerializedObjectJson MetaDataJson ArrayList ,ObjectUtils: , principal, GrpcContextAuthenticationProvider.DEFAULT_PRINCIPAL
axon-server-se-master,io.axoniq.axonserver.rest,JsonEvent,3,1,0,1,0,false,0 ,0 ,JsonEvent JsonEventList ,metaData: MetaDataJson messageIdentifier: String aggregateIdentifier: String aggregateSequenceNumber: long aggregateType: String payload: SerializedObjectJson timestamp: long ,findSnapshots{ Params : String,String,long,long,Authentication Returns : SseEmitter} listAggregateEvents{ Params : String,String,long,boolean,long,long,long,Authentication Returns : SseEmitter} handleSseEvent{ Params : SseEmitter,Runnable Returns : void} send{ Params : SseEmitter,ObjectMapper,SerializedEvent Returns : void} send{ Params : SseEmitter,SerializedEventWithToken Returns : void} completeEmitter{ Params : SseEmitter Returns : void} submitEvents{ Params : String,JsonEventList,Authentication Returns : Mono<Void>} appendSnapshotOld{ Params : String,JsonEvent,Authentication Returns : Mono<Void>} appendSnapshot{ Params : String,JsonEvent,Authentication Returns : Mono<Void>} getMessageIdentifier{ Params :  Returns : String} setMessageIdentifier{ Params : String Returns : void} getAggregateIdentifier{ Params :  Returns : String} setAggregateIdentifier{ Params : String Returns : void} getAggregateSequenceNumber{ Params :  Returns : long} setAggregateSequenceNumber{ Params : long Returns : void} getAggregateType{ Params :  Returns : String} setAggregateType{ Params : String Returns : void} setMetaData{ Params : MetaDataJson Returns : void} getMetaData{ Params :  Returns : MetaDataJson} getPayload{ Params :  Returns : SerializedObjectJson} setPayload{ Params : SerializedObjectJson Returns : void} getTimestamp{ Params :  Returns : long} setTimestamp{ Params : long Returns : void} asEvent{ Params :  Returns : Event} getMessages{ Params :  Returns : List<JsonEvent>} setMessages{ Params : List<JsonEvent> Returns : void} ,,,,,,long ,,long ,MetaDataJson SerializedObjectJson MetaDataJson ,metaData: 
axon-server-se-master,io.axoniq.axonserver.rest,JsonEventList,3,1,0,1,0,false,0 ,0 ,JsonEvent JsonEventList ,messages: List<JsonEvent> ,findSnapshots{ Params : String,String,long,long,Authentication Returns : SseEmitter} listAggregateEvents{ Params : String,String,long,boolean,long,long,long,Authentication Returns : SseEmitter} handleSseEvent{ Params : SseEmitter,Runnable Returns : void} send{ Params : SseEmitter,ObjectMapper,SerializedEvent Returns : void} send{ Params : SseEmitter,SerializedEventWithToken Returns : void} completeEmitter{ Params : SseEmitter Returns : void} submitEvents{ Params : String,JsonEventList,Authentication Returns : Mono<Void>} appendSnapshotOld{ Params : String,JsonEvent,Authentication Returns : Mono<Void>} appendSnapshot{ Params : String,JsonEvent,Authentication Returns : Mono<Void>} getMessageIdentifier{ Params :  Returns : String} setMessageIdentifier{ Params : String Returns : void} getAggregateIdentifier{ Params :  Returns : String} setAggregateIdentifier{ Params : String Returns : void} getAggregateSequenceNumber{ Params :  Returns : long} setAggregateSequenceNumber{ Params : long Returns : void} getAggregateType{ Params :  Returns : String} setAggregateType{ Params : String Returns : void} setMetaData{ Params : MetaDataJson Returns : void} getMetaData{ Params :  Returns : MetaDataJson} getPayload{ Params :  Returns : SerializedObjectJson} setPayload{ Params : SerializedObjectJson Returns : void} getTimestamp{ Params :  Returns : long} setTimestamp{ Params : long Returns : void} asEvent{ Params :  Returns : Event} getMessages{ Params :  Returns : List<JsonEvent>} setMessages{ Params : List<JsonEvent> Returns : void} ,,,,,,List<JsonEvent> ,,List<JsonEvent> ,ArrayList ,metaData: 
axon-server-se-master,io.axoniq.axonserver.rest,HttpStreamingQuery,1,1,0,0,0,false,0 ,0 ,Sender ,logger: Logger senderPerClient: ConcurrentMap<String, Sender> eventStoreManager: EventStoreLocator ,query{ Params : String,Authentication,String,String,boolean,boolean,String,SseEmitter,boolean Returns : void} emitCompleted{ Params :  Returns : void} emitError{ Params : String,Throwable Returns : boolean} emitRows{ Params : RowResponse Returns : void} addToObject{ Params : JSONObject,String,QueryValue Returns : void} addToArray{ Params : QueryValue,JSONArray Returns : void} emitColumns{ Params : ColumnsResponse Returns : void} stop{ Params :  Returns : void} ,,,,,,EventStoreLocator ,,EventStoreLocator ,ConcurrentHashMap Sender RuntimeException JSONObject JSONArray JSONArray JSONObject JSONArray ,sseEmitter: 
axon-server-se-master,io.axoniq.axonserver.rest,Sender,3,2,0,0,0,false,0 ,0 ,Sender ,sseEmitter: SseEmitter querySender: Sinks.Many<QueryEventsRequest> closed: boolean ,query{ Params : String,Authentication,String,String,boolean,boolean,String,SseEmitter,boolean Returns : void} emitCompleted{ Params :  Returns : void} emitError{ Params : String,Throwable Returns : boolean} emitRows{ Params : RowResponse Returns : void} addToObject{ Params : JSONObject,String,QueryValue Returns : void} addToArray{ Params : QueryValue,JSONArray Returns : void} emitColumns{ Params : ColumnsResponse Returns : void} stop{ Params :  Returns : void} ,,,,,,boolean ,,boolean ,RuntimeException JSONObject JSONArray JSONArray JSONObject JSONArray ,querySender: 
axon-server-se-master,io.axoniq.axonserver.rest,InfoRestController,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger ,thirdParty{ Params :  Returns : String} ,,,,,,,,,,logger: , "Third-party licences could not be retrieved... Error: ", e
axon-server-se-master,io.axoniq.axonserver.rest,InstructionRestController,1,1,0,0,0,false,0 ,0 ,0 ,auditLog: Logger platformService: PlatformService ,requestReconnect{ Params : String,Principal Returns : String} ,,,,,,PlatformService ,,PlatformService ,,platformService: , clientId, "reconnect requested through REST interface"
axon-server-se-master,io.axoniq.axonserver.rest.json,CommandRequestJson,1,1,0,0,0,false,0 ,0 ,0 ,messageIdentifier: String name: String routingKey: String timestamp: long payload: SerializedObjectJson metaData: MetaDataJson ,asCommand{ Params :  Returns : Command} processingInstructions{ Params :  Returns : Iterable<? extends ProcessingInstruction>} getMessageIdentifier{ Params :  Returns : String} setMessageIdentifier{ Params : String Returns : void} getName{ Params :  Returns : String} setName{ Params : String Returns : void} getTimestamp{ Params :  Returns : long} setTimestamp{ Params : long Returns : void} getPayload{ Params :  Returns : SerializedObjectJson} setPayload{ Params : SerializedObjectJson Returns : void} getMetaData{ Params :  Returns : MetaDataJson} setMetaData{ Params : MetaDataJson Returns : void} getRoutingKey{ Params :  Returns : String} setRoutingKey{ Params : String Returns : void} ,,,,,,MetaDataJson ,,MetaDataJson ,MetaDataJson ArrayList ,ProcessingInstructionHelper: , routingKey
axon-server-se-master,io.axoniq.axonserver.rest.json,CommandResponseJson,1,1,0,0,0,false,0 ,0 ,0 ,requestIdentifier: String errorCode: String errorMessage: MessageJson payload: SerializedObjectJson messageIdentifier: String metaData: MetaDataJson ,getRequestIdentifier{ Params :  Returns : String} getErrorCode{ Params :  Returns : String} getErrorMessage{ Params :  Returns : MessageJson} getPayload{ Params :  Returns : SerializedObjectJson} getMessageIdentifier{ Params :  Returns : String} getMetaData{ Params :  Returns : MetaDataJson} ,,,,,,MetaDataJson ,,MetaDataJson ,MessageJson SerializedObjectJson MetaDataJson ,ProcessingInstructionHelper: , routingKey
axon-server-se-master,io.axoniq.axonserver.rest.json,MessageJson,1,1,0,0,0,false,0 ,0 ,0 ,location: String message: String details: List<String> ,getLocation{ Params :  Returns : String} getMessage{ Params :  Returns : String} getDetails{ Params :  Returns : List<String>} ,,,,,,List<String> ,,List<String> ,,ProcessingInstructionHelper: , routingKey
axon-server-se-master,io.axoniq.axonserver.rest.json,MetaDataJson,1,1,0,0,0,false,HashMap<String,Object> ,0 ,0 ,,asMetaDataValueMap{ Params :  Returns : Map<String,MetaDataValue>} ,,,,,,,,,HashMap ,MetaDataValue: 
axon-server-se-master,io.axoniq.axonserver.rest.json,NodeConfiguration,1,1,0,0,0,false,0 ,0 ,0 ,delegate: AxonServerNode authentication: boolean clustered: boolean ssl: boolean adminNode: boolean developmentMode: boolean storageContextNames: Iterable<String> contextNames: Iterable<String> pluginsEnabled: boolean initialized: boolean ,isAuthentication{ Params :  Returns : boolean} setAuthentication{ Params : boolean Returns : void} isClustered{ Params :  Returns : boolean} setClustered{ Params : boolean Returns : void} isSsl{ Params :  Returns : boolean} setSsl{ Params : boolean Returns : void} isDevelopmentMode{ Params :  Returns : boolean} setDevelopmentMode{ Params : boolean Returns : void} getHostName{ Params :  Returns : String} getGrpcPort{ Params :  Returns : Integer} getInternalHostName{ Params :  Returns : String} getGrpcInternalPort{ Params :  Returns : Integer} getHttpPort{ Params :  Returns : Integer} getName{ Params :  Returns : String} setAdminNode{ Params : boolean Returns : void} isAdminNode{ Params :  Returns : boolean} getContextNames{ Params :  Returns : Iterable<String>} setStorageContextNames{ Params : Iterable<String> Returns : void} setContextNames{ Params : Iterable<String> Returns : void} getStorageContextNames{ Params :  Returns : Iterable<String>} setPluginsEnabled{ Params : boolean Returns : void} getPluginsEnabled{ Params :  Returns : boolean} isInitialized{ Params :  Returns : boolean} setInitialized{ Params : boolean Returns : void} ,,,,,,boolean ,,boolean ,,delegate: 
axon-server-se-master,io.axoniq.axonserver.rest.json,QueryRequestJson,1,1,0,0,0,false,0 ,0 ,0 ,messageIdentifier: String query: String timestamp: long payload: SerializedObjectJson responseType: SerializedObjectJson nrOfResults: long timeout: long priority: long metaData: MetaDataJson ,asQueryRequest{ Params :  Returns : QueryRequest} processingInstructions{ Params :  Returns : Iterable<? extends ProcessingInstruction>} getMessageIdentifier{ Params :  Returns : String} setMessageIdentifier{ Params : String Returns : void} getQuery{ Params :  Returns : String} setQuery{ Params : String Returns : void} getTimestamp{ Params :  Returns : long} setTimestamp{ Params : long Returns : void} getPayload{ Params :  Returns : SerializedObjectJson} setPayload{ Params : SerializedObjectJson Returns : void} getResponseType{ Params :  Returns : SerializedObjectJson} setResponseType{ Params : SerializedObjectJson Returns : void} getNrOfResults{ Params :  Returns : long} setNrOfResults{ Params : long Returns : void} getTimeout{ Params :  Returns : long} getMetaData{ Params :  Returns : MetaDataJson} setMetaData{ Params : MetaDataJson Returns : void} setTimeout{ Params : long Returns : void} getPriority{ Params :  Returns : long} setPriority{ Params : long Returns : void} ,,,,,,MetaDataJson ,,MetaDataJson ,MetaDataJson ArrayList ,ProcessingInstructionHelper: , nrOfResults
axon-server-se-master,io.axoniq.axonserver.rest.json,QueryResponseJson,1,1,0,0,0,false,0 ,0 ,0 ,messageIdentifier: String requestIdentifier: String errorCode: String errorMessage: MessageJson payload: SerializedObjectJson metaData: MetaDataJson ,getMessageIdentifier{ Params :  Returns : String} getRequestIdentifier{ Params :  Returns : String} getErrorCode{ Params :  Returns : String} getErrorMessage{ Params :  Returns : MessageJson} getPayload{ Params :  Returns : SerializedObjectJson} getMetaData{ Params :  Returns : MetaDataJson} ,,,,,,MetaDataJson ,,MetaDataJson ,SerializedObjectJson MessageJson MetaDataJson ,ProcessingInstructionHelper: , nrOfResults
axon-server-se-master,io.axoniq.axonserver.rest.json,RestResponse,1,1,0,0,0,false,0 ,0 ,0 ,success: boolean message: String ,isSuccess{ Params :  Returns : boolean} getMessage{ Params :  Returns : String} asResponseEntity{ Params : ErrorCode Returns : ResponseEntity<RestResponse>} ,,,,,,String ,,String ,,erroCode: 
axon-server-se-master,io.axoniq.axonserver.rest.json,SerializedObjectJson,1,1,0,0,0,false,0 ,0 ,0 ,type: String data: String revision: String ,asSerializedObject{ Params :  Returns : SerializedObject} getType{ Params :  Returns : String} setType{ Params : String Returns : void} getData{ Params :  Returns : String} setData{ Params : String Returns : void} getRevision{ Params :  Returns : String} setRevision{ Params : String Returns : void} ,,,,,,String ,,String ,,StringUtils: , revision, ""
axon-server-se-master,io.axoniq.axonserver.rest.json,StatusInfo,1,1,0,0,0,false,0 ,0 ,0 ,commandRate: MeterFactory.RateMeter queryRate: MeterFactory.RateMeter eventRate: MeterFactory.RateMeter snapshotRate: MeterFactory.RateMeter nrOfEvents: long nrOfSnapshots: long nrOfSubscriptionQueries: long nrOfActiveSubscriptionQueries: long nrOfSubscriptionQueriesUpdates: long eventTrackers: Map<String, Iterable<Long>> ,getCommandRate{ Params :  Returns : MeterFactory.RateMeter} setCommandRate{ Params : MeterFactory.RateMeter Returns : void} getQueryRate{ Params :  Returns : MeterFactory.RateMeter} setQueryRate{ Params : MeterFactory.RateMeter Returns : void} getNrOfEvents{ Params :  Returns : long} setNrOfEvents{ Params : long Returns : void} getNrOfSnapshots{ Params :  Returns : long} setNrOfSnapshots{ Params : long Returns : void} setEventTrackers{ Params : Map<String,Iterable<Long>> Returns : void} getEventTrackers{ Params :  Returns : Map<String,Iterable<Long>>} setNrOfSubscriptionQueries{ Params : long Returns : void} setNrOfActiveSubscriptionQueries{ Params : long Returns : void} getNrOfSubscriptionQueries{ Params :  Returns : long} getNrOfActiveSubscriptionQueries{ Params :  Returns : long} getNrOfSubscriptionQueriesUpdates{ Params :  Returns : long} setNrOfSubscriptionQueriesUpdates{ Params : long Returns : void} getSnapshotRate{ Params :  Returns : MeterFactory.RateMeter} setSnapshotRate{ Params : MeterFactory.RateMeter Returns : void} getEventRate{ Params :  Returns : MeterFactory.RateMeter} setEventRate{ Params : MeterFactory.RateMeter Returns : void} ,,,,,,Map<String,Iterable<Long>> ,,Map<String,Iterable<Long>> ,,StringUtils: , revision, ""
axon-server-se-master,io.axoniq.axonserver.rest.json,UserInfo,1,1,0,0,0,false,0 ,0 ,0 ,ROLE_ADMIN: String ROLE_ADMIN_IN_ADMIN: String ROLE_READONLY_ADMIN_IN_ADMIN: String user: String roles: Set<String> adminUser: boolean readOnlyAdminUser: boolean ,getUser{ Params :  Returns : String} getRoles{ Params :  Returns : Set<String>} isAdminUser{ Params :  Returns : boolean} isReadOnlyAdminUser{ Params :  Returns : boolean} ,,,,,,boolean ,,boolean ,,StringUtils: , revision, ""
axon-server-se-master,io.axoniq.axonserver.rest,LicenseInfo,1,1,0,0,0,false,0 ,0 ,0 ,expiryDate: LocalDate edition: String licensee: String featureList: List<String> ,getExpiryDate{ Params :  Returns : LocalDate} setExpiryDate{ Params : LocalDate Returns : void} getEdition{ Params :  Returns : String} setEdition{ Params : String Returns : void} getLicensee{ Params :  Returns : String} setLicensee{ Params : String Returns : void} getFeatureList{ Params :  Returns : List<String>} setFeatureList{ Params : List<String> Returns : void} ,,,,,,List<String> ,,List<String> ,,StringUtils: , revision, ""
axon-server-se-master,io.axoniq.axonserver.rest,MetricsRestController,1,1,0,0,0,false,0 ,0 ,0 ,auditLog: Logger commandRegistrationCache: CommandRegistrationCache commandMetricsRegistry: CommandMetricsRegistry queryRegistrationCache: QueryRegistrationCache queryMetricsRegistry: QueryMetricsRegistry topology: Topology ,getCommandMetrics{ Params : Principal Returns : List<CommandMetricsRegistry.CommandMetric>} getMetrics{ Params : CommandHandler,Set<String>,Set<CommandRegistrationCache.RegistrationEntry> Returns : List<CommandMetricsRegistry.CommandMetric>} getQueryMetrics{ Params : Principal Returns : List<QueryMetricsRegistry.QueryMetric>} getQueryMetrics{ Params : QueryDefinition,Set<String>,Map<String,Set<QueryHandler<?>>> Returns : List<QueryMetricsRegistry.QueryMetric>} ,,,,,,Topology ,,Topology ,ArrayList PrincipalAuthentication PrincipalAuthentication ArrayList ,Collectors: 
axon-server-se-master,io.axoniq.axonserver.rest,OverviewModel,1,1,0,0,0,false,0 ,0 ,SvgOverview ApplicationJsonInfo ,auditLog: Logger clusterController: Topology applicationProvider: Function<Predicate<String>, Stream<Application>> axonServerProvider: Function<Predicate<String>, Stream<AxonServer>> fonts: Fonts ,overview{ Params : Principal,String Returns : SvgOverview} overviewList{ Params : Principal,String Returns : Iterator<ApplicationJsonInfo>} validContexts{ Params : Principal Returns : Set<String>} getSvgObjects{ Params :  Returns : String} getWidth{ Params :  Returns : int} getHeight{ Params :  Returns : int} printOn{ Params : Media Returns : void} ,printOn ,,,,,Fonts ,,Fonts ,Fonts AxonServerBoxMapping Grouped Elements Elements ApplicationBoxMapping Elements AxonServerPopupMapping Elements Clickable Rectangle Position StyleClass SvgOverview Elements PrincipalAuthentication StringWriter PrintWriter ,clusterController: , true, new PrincipalAuthentication(principal)
axon-server-se-master,io.axoniq.axonserver.rest,SvgOverview,3,1,0,1,0,false,0 ,0 ,SvgOverview ApplicationJsonInfo ,element: Element ,overview{ Params : Principal,String Returns : SvgOverview} overviewList{ Params : Principal,String Returns : Iterator<ApplicationJsonInfo>} validContexts{ Params : Principal Returns : Set<String>} getSvgObjects{ Params :  Returns : String} getWidth{ Params :  Returns : int} getHeight{ Params :  Returns : int} printOn{ Params : Media Returns : void} ,printOn ,,,,,Element ,,Element ,StringWriter PrintWriter ,element: 
axon-server-se-master,io.axoniq.axonserver.rest,ApplicationJsonInfo,3,2,0,1,0,false,0 ,0 ,SvgOverview ApplicationJsonInfo ,application: Application ,overview{ Params : Principal,String Returns : SvgOverview} overviewList{ Params : Principal,String Returns : Iterator<ApplicationJsonInfo>} validContexts{ Params : Principal Returns : Set<String>} getSvgObjects{ Params :  Returns : String} getWidth{ Params :  Returns : int} getHeight{ Params :  Returns : int} printOn{ Params : Media Returns : void} ,printOn ,,,,Printable ,Application ,,Application ,,application: 
axon-server-se-master,io.axoniq.axonserver.rest,PluginConfigurationJSON,1,1,0,0,0,false,0 ,0 ,0 ,context: String name: String version: String properties: Map<String, Map<String, Object>> ,getName{ Params :  Returns : String} setName{ Params : String Returns : void} getVersion{ Params :  Returns : String} setVersion{ Params : String Returns : void} getProperties{ Params :  Returns : Map<String,Map<String,Object>>} setProperties{ Params : Map<String,Map<String,Object>> Returns : void} getContext{ Params :  Returns : String} setContext{ Params : String Returns : void} ,,,,,,Map<String,Map<String,Object>> ,,Map<String,Map<String,Object>> ,,application: 
axon-server-se-master,io.axoniq.axonserver.rest,PluginPropertyGroup,1,1,0,0,0,false,0 ,0 ,0 ,id: String name: String properties: Collection<PluginProperty> ,getId{ Params :  Returns : String} getName{ Params :  Returns : String} getProperties{ Params :  Returns : Collection<PluginProperty>} ,,,,,,Collection<PluginProperty> ,,Collection<PluginProperty> ,,application: 
axon-server-se-master,io.axoniq.axonserver.rest,PluginsRestController,1,1,0,0,0,false,0 ,0 ,0 ,auditLog: Logger logger: Logger PLUGINS_DISABLED: String pluginController: PluginController pluginsEnabled: boolean ,currentPlugins{ Params : Principal Returns : Iterable<PluginInfo>} uninstallPlugin{ Params : String,String,Principal Returns : void} updateStatus{ Params : String,String,String,boolean,Principal Returns : void} unregisterPluginForContext{ Params : String,String,String,Principal Returns : void} configuration{ Params : String,String,String,Principal Returns : Iterable<PluginPropertyGroup>} installPlugin{ Params : MultipartFile,Principal Returns : PluginKey} uniqueName{ Params : String Returns : String} updateConfiguration{ Params : PluginConfigurationJSON,Principal Returns : void} ,,,,,,boolean ,,boolean ,MessagingPlatformException MessagingPlatformException PluginKey MessagingPlatformException PluginKey MessagingPlatformException PluginKey MessagingPlatformException PluginKey MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException PluginKey ,configurationJSON: 
axon-server-se-master,io.axoniq.axonserver.rest,PublicRestController,1,1,0,0,0,false,0 ,0 ,JsonServerNode ,axonServerProvider: Function<Predicate<String>, Stream<AxonServer>> topology: Topology commandDispatcher: CommandDispatcher queryDispatcher: QueryDispatcher eventDispatcher: EventDispatcher features: FeatureChecker sslConfiguration: SslConfiguration accessControlConfiguration: AccessControlConfiguration versionInfoSupplier: VersionInfoProvider subscriptionMetricsRegistry: Supplier<SubscriptionMetrics> pluginsEnabled: boolean isDevelopmentMode: boolean ,getClusterNodes{ Params :  Returns : List<JsonServerNode>} getNodeConfiguration{ Params :  Returns : NodeConfiguration} getMyContextList{ Params :  Returns : Iterable<String>} licenseInfo{ Params :  Returns : LicenseInfo} status{ Params : String Returns : StatusInfo} userInfo{ Params : HttpServletRequest Returns : UserInfo} versionInfo{ Params :  Returns : VersionInfo} getHostName{ Params :  Returns : String} getGrpcPort{ Params :  Returns : Integer} getInternalHostName{ Params :  Returns : String} getGrpcInternalPort{ Params :  Returns : Integer} getHttpPort{ Params :  Returns : Integer} getName{ Params :  Returns : String} isConnected{ Params :  Returns : boolean} ,,,,,,boolean ,,boolean ,NodeConfiguration LicenseInfo StatusInfo UserInfo ,versionInfoSupplier: 
axon-server-se-master,io.axoniq.axonserver.rest,JsonServerNode,3,1,0,1,0,false,0 ,0 ,JsonServerNode ,wrapped: AxonServer ,getClusterNodes{ Params :  Returns : List<JsonServerNode>} getNodeConfiguration{ Params :  Returns : NodeConfiguration} getMyContextList{ Params :  Returns : Iterable<String>} licenseInfo{ Params :  Returns : LicenseInfo} status{ Params : String Returns : StatusInfo} userInfo{ Params : HttpServletRequest Returns : UserInfo} versionInfo{ Params :  Returns : VersionInfo} getHostName{ Params :  Returns : String} getGrpcPort{ Params :  Returns : Integer} getInternalHostName{ Params :  Returns : String} getGrpcInternalPort{ Params :  Returns : Integer} getHttpPort{ Params :  Returns : Integer} getName{ Params :  Returns : String} isConnected{ Params :  Returns : boolean} ,,,,,,AxonServer ,,AxonServer ,,wrapped: 
axon-server-se-master,io.axoniq.axonserver.rest,QueryRestController,1,1,0,0,0,false,0 ,0 ,JsonQueryMapping JsonComponentMapping ,logger: Logger registrationCache: QueryRegistrationCache queryDispatcher: QueryDispatcher ,getByComponent{ Params : String,String Returns : Iterable<Query>} get{ Params :  Returns : List<JsonQueryMapping>} execute{ Params : String,QueryRequestJson,Authentication Returns : SseEmitter} getQuery{ Params :  Returns : String} getResultNames{ Params :  Returns : Set<String>} getComponents{ Params :  Returns : List<JsonComponentMapping>} from{ Params : Map.Entry<QueryDefinition,Map<String,Set<QueryHandler<?>>>>,Set<String> Returns : JsonQueryMapping} getComponent{ Params :  Returns : String} getClients{ Params :  Returns : List<String>} from{ Params : Map.Entry<String,Set<QueryHandler<?>>> Returns : JsonComponentMapping} ,,from from ,,,,QueryDispatcher ,,QueryDispatcher ,ComponentItems DefaultQueries SseEmitter SerializedQuery QueryResponseJson JsonQueryMapping JsonComponentMapping ,sseEmitter: 
axon-server-se-master,io.axoniq.axonserver.rest,JsonQueryMapping,3,1,0,1,0,false,0 ,0 ,JsonQueryMapping JsonComponentMapping ,query: String resultNames: Set<String> components: List<JsonComponentMapping> ,getByComponent{ Params : String,String Returns : Iterable<Query>} get{ Params :  Returns : List<JsonQueryMapping>} execute{ Params : String,QueryRequestJson,Authentication Returns : SseEmitter} getQuery{ Params :  Returns : String} getResultNames{ Params :  Returns : Set<String>} getComponents{ Params :  Returns : List<JsonComponentMapping>} from{ Params : Map.Entry<QueryDefinition,Map<String,Set<QueryHandler<?>>>>,Set<String> Returns : JsonQueryMapping} getComponent{ Params :  Returns : String} getClients{ Params :  Returns : List<String>} from{ Params : Map.Entry<String,Set<QueryHandler<?>>> Returns : JsonComponentMapping} ,,from from ,,,,List<JsonComponentMapping> ,,List<JsonComponentMapping> ,JsonQueryMapping ,Collectors: 
axon-server-se-master,io.axoniq.axonserver.rest,JsonComponentMapping,3,1,0,1,0,false,0 ,0 ,JsonQueryMapping JsonComponentMapping ,component: String clients: List<String> ,getByComponent{ Params : String,String Returns : Iterable<Query>} get{ Params :  Returns : List<JsonQueryMapping>} execute{ Params : String,QueryRequestJson,Authentication Returns : SseEmitter} getQuery{ Params :  Returns : String} getResultNames{ Params :  Returns : Set<String>} getComponents{ Params :  Returns : List<JsonComponentMapping>} from{ Params : Map.Entry<QueryDefinition,Map<String,Set<QueryHandler<?>>>>,Set<String> Returns : JsonQueryMapping} getComponent{ Params :  Returns : String} getClients{ Params :  Returns : List<String>} from{ Params : Map.Entry<String,Set<QueryHandler<?>>> Returns : JsonComponentMapping} ,,from from ,,,,List<String> ,,List<String> ,JsonComponentMapping ,Collectors: 
axon-server-se-master,io.axoniq.axonserver.rest,RestRequestAccessDecisionVoter,1,1,0,0,0,false,0 ,AccessDecisionVoter<FilterInvocation> ,0 ,LOGGER: Logger axonServerAccessController: AxonServerAccessController ,supports{ Params : ConfigAttribute Returns : boolean} supports{ Params : Class Returns : boolean} vote{ Params : Authentication,FilterInvocation,Collection<ConfigAttribute> Returns : int} permitAll{ Params : Collection<ConfigAttribute> Returns : boolean} context{ Params : HttpServletRequest Returns : String} ,supports supports vote ,,,,AccessDecisionVoter ,AxonServerAccessController ,,AxonServerAccessController ,,axonServerAccessController: 
axon-server-se-master,io.axoniq.axonserver.rest,RoleRestController,1,1,0,0,0,false,0 ,0 ,0 ,roleController: RoleController ,listUserRoles{ Params :  Returns : Collection<String>} listApplicationRoles{ Params :  Returns : Collection<String>} ,,,,,,RoleController ,,RoleController ,,: 
axon-server-se-master,io.axoniq.axonserver.rest,SearchController,1,1,0,0,0,false,0 ,0 ,0 ,httpStreamingQuery: HttpStreamingQuery timeout: long ,query{ Params : String,String,String,Boolean,Boolean,Boolean,String,Authentication Returns : SseEmitter} ,,,,,,long ,,long ,SseEmitter ,httpStreamingQuery: , context, authentication, query, timewindow, liveupdates, forceReadFromLeader, clientToken, sseEmitter, querySnapshots
axon-server-se-master,io.axoniq.axonserver.rest,SubscriptionQueryMetricRestController,1,1,0,0,0,false,0 ,0 ,0 ,applicationRegistry: ApplicationSubscriptionMetricRegistry queryRegistry: QuerySubscriptionMetricRegistry ,getForComponent{ Params : String,String Returns : SubscriptionMetrics} getForComponentAndQuery{ Params : String,String,String Returns : SubscriptionMetrics} ,,,,,,QuerySubscriptionMetricRegistry ,,QuerySubscriptionMetricRegistry ,,queryRegistry: , componentName, queryName, context
axon-server-se-master,io.axoniq.axonserver.rest.svg.attribute,Dimension,1,1,0,0,0,false,0 ,Printable ,0 ,width: int height: int ,increase{ Params : int,int Returns : Dimension} printOn{ Params : PrintWriter Returns : void} width{ Params :  Returns : int} height{ Params :  Returns : int} ,printOn ,,,,Printable ,int ,,int ,Dimension ,writer: , "width=\"" + width + "\" height=\"" + height + "\" "
axon-server-se-master,io.axoniq.axonserver.rest.svg.attribute,Position,1,1,0,0,0,false,0 ,Printable ,0 ,x: int y: int ,printOn{ Params : PrintWriter Returns : void} x{ Params :  Returns : int} y{ Params :  Returns : int} shift{ Params : int,int Returns : Position} ,printOn ,,,,Printable ,int ,,int ,Position ,writer: , "x=\"" + x + "\" y=\"" + y + "\" "
axon-server-se-master,io.axoniq.axonserver.rest.svg.attribute,StyleClass,1,1,0,0,0,false,0 ,Printable ,0 ,POPUP: String SERVER_TO_SERVER: String AXONSERVER: String TYPE: String DOWN: String CURRENT: String STORAGE: String MASTER: String CLIENT: String ADMIN_LEADER: String styleClass: String ,printOn{ Params : PrintWriter Returns : void} toString{ Params :  Returns : String} ,printOn toString ,,,,Printable ,String ,,String ,,writer: , "class=\"%s\"", styleClass
axon-server-se-master,io.axoniq.axonserver.rest.svg,BoxRegistry,2,1,0,0,0,true,0 ,Printable ,0 ,,get{ Params : K Returns : Box} ,,,,,,,,,,writer: , "class=\"%s\"", styleClass
axon-server-se-master,io.axoniq.axonserver.rest.svg,Composite,2,1,0,0,0,true,0 ,Printable ,0 ,,items{ Params :  Returns : Iterable<? extends Element>} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} ,position dimension ,,,,,,,,Position Dimension ,p: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.decorator,Clickable,1,1,0,0,0,false,0 ,Element ,0 ,content: Element onClickJavascript: Supplier<String> ,printOn{ Params : PrintWriter Returns : void} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} ,printOn position dimension ,,,,Element ,Supplier<String> ,,Supplier<String> ,,content: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.decorator,DoubleLine,1,1,0,0,0,false,0 ,Element ,0 ,delegate: Box enabled: boolean ,printOn{ Params : PrintWriter Returns : void} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} ,printOn position dimension ,,,,Element ,boolean ,,boolean ,,delegate: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.decorator,Grouped,1,1,0,0,0,false,0 ,Element ,0 ,rectangle: Rectangle content: Elements ,printOn{ Params : PrintWriter Returns : void} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} ,printOn position dimension ,,,,Element ,Elements ,,Elements ,Rectangle StyleClass ,rectangle: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.decorator,Hidden,1,1,0,0,0,false,0 ,Element ,0 ,id: String content: Element styleClass: StyleClass ,printOn{ Params : PrintWriter Returns : void} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} ,printOn position dimension ,,,,Element ,StyleClass ,,StyleClass ,StyleClass ,content: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.decorator,WithBadge,1,1,0,0,0,false,0 ,Element ,0 ,delegate: Element number: int text: String ,printOn{ Params : PrintWriter Returns : void} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} ,printOn position dimension ,,,,Element ,String ,,String ,,delegate: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.element,AxonServerGroup,1,1,0,0,0,false,0 ,Box ,0 ,rectangle: Rectangle axonhub: Element stores: List<Store> links: Collection<Line> ,rectangle{ Params :  Returns : Rectangle} connectTo{ Params : Box,String Returns : void} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} printOn{ Params : PrintWriter Returns : void} ,rectangle connectTo position dimension printOn ,,,,Box ,Collection<Line> ,,Collection<Line> ,LinkedList Line Position Position StyleClass Rectangle Position Dimension Line Position Position StyleClass Position Dimension ,line: , writer
axon-server-se-master,io.axoniq.axonserver.rest.svg.element,Box,2,1,0,0,0,true,0 ,Box ,0 ,,rectangle{ Params :  Returns : Rectangle} connectTo{ Params : Box,String Returns : void} ,,,,,,,,,,line: , writer
axon-server-se-master,io.axoniq.axonserver.rest.svg.element,Line,1,1,0,0,0,false,0 ,Printable ,0 ,from: Position to: Position styleClass: StyleClass ,printOn{ Params : PrintWriter Returns : void} ,printOn ,,,,Printable ,StyleClass ,,StyleClass ,,writer: , "stroke-width=\"2\"/>%n"
axon-server-se-master,io.axoniq.axonserver.rest.svg.element,Rectangle,1,1,0,0,0,false,0 ,Element ,0 ,coordinates: Position size: Dimension styleClass: StyleClass ,printOn{ Params : PrintWriter Returns : void} x{ Params :  Returns : int} y{ Params :  Returns : int} width{ Params :  Returns : int} height{ Params :  Returns : int} shift{ Params : int,int Returns : Rectangle} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} ,printOn position dimension ,,,,Element ,StyleClass ,,StyleClass ,Rectangle ,this.coordinates: , xOffset, yOffset
axon-server-se-master,io.axoniq.axonserver.rest.svg.element,Store,1,1,0,0,0,false,0 ,Box ,0 ,STORE_SIZE: Dimension name: TextLine coordinates: Position actualSize: Dimension styleClass: StyleClass links: Collection<Line> align: TextBox.HorizontalAlign ,position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} printOn{ Params : PrintWriter Returns : void} rectangle{ Params :  Returns : Rectangle} connectTo{ Params : Box,String Returns : void} move{ Params : int,int Returns : Store} ,position dimension printOn rectangle connectTo ,,,,Box ,TextBox.HorizontalAlign ,,TextBox.HorizontalAlign ,Dimension LinkedList Center Dimension Text Position Rectangle Line Position Position StyleClass Store ,: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.element,Text,1,1,0,0,0,false,0 ,Printable ,0 ,text: String position: Position styleClass: StyleClass ,printOn{ Params : PrintWriter Returns : void} ,printOn ,,,,Printable ,StyleClass ,,StyleClass ,StyleClass ,writer: , ">%s</text>\n", text
axon-server-se-master,io.axoniq.axonserver.rest.svg.element,TextBox,1,1,0,0,0,false,0 ,Box ,HorizontalAlign Center Left ,texts: Iterable<TextLine> position: Position styleClass: StyleClass align: HorizontalAlign widthMargin: int verticalSpace: int links: Collection<Line> ,printOn{ Params : PrintWriter Returns : void} rectangle{ Params :  Returns : Rectangle} connectTo{ Params : Box,String Returns : void} height{ Params :  Returns : int} width{ Params :  Returns : int} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} getOffset{ Params : TextLine,Element Returns : int} getOffset{ Params : TextLine,Element Returns : int} getOffset{ Params : TextLine,Element Returns : int} ,printOn rectangle connectTo position dimension getOffset getOffset ,,,,Box ,Collection<Line> ,,Collection<Line> ,LinkedList Center StyleClass Text Position Rectangle Dimension Line Position Position StyleClass ,: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.element,HorizontalAlign,3,1,0,0,0,true,0 ,Box ,HorizontalAlign Center Left ,,printOn{ Params : PrintWriter Returns : void} rectangle{ Params :  Returns : Rectangle} connectTo{ Params : Box,String Returns : void} height{ Params :  Returns : int} width{ Params :  Returns : int} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} getOffset{ Params : TextLine,Element Returns : int} getOffset{ Params : TextLine,Element Returns : int} getOffset{ Params : TextLine,Element Returns : int} ,printOn rectangle connectTo position dimension getOffset getOffset ,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.element,Center,3,1,0,1,0,false,0 ,Box ,HorizontalAlign Center Left ,,printOn{ Params : PrintWriter Returns : void} rectangle{ Params :  Returns : Rectangle} connectTo{ Params : Box,String Returns : void} height{ Params :  Returns : int} width{ Params :  Returns : int} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} getOffset{ Params : TextLine,Element Returns : int} getOffset{ Params : TextLine,Element Returns : int} getOffset{ Params : TextLine,Element Returns : int} ,printOn rectangle connectTo position dimension getOffset getOffset ,,,,HorizontalAlign ,,,,,line: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.element,Left,3,1,0,1,0,false,0 ,Box ,HorizontalAlign Center Left ,leftMargin: int ,printOn{ Params : PrintWriter Returns : void} rectangle{ Params :  Returns : Rectangle} connectTo{ Params : Box,String Returns : void} height{ Params :  Returns : int} width{ Params :  Returns : int} position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} getOffset{ Params : TextLine,Element Returns : int} getOffset{ Params : TextLine,Element Returns : int} getOffset{ Params : TextLine,Element Returns : int} ,printOn rectangle connectTo position dimension getOffset getOffset ,,,,HorizontalAlign ,int ,,int ,,line: 
axon-server-se-master,io.axoniq.axonserver.rest.svg,Element,2,1,0,0,0,true,0 ,Box ,0 ,,position{ Params :  Returns : Position} dimension{ Params :  Returns : Dimension} ,,,,,,,,,,line: 
axon-server-se-master,io.axoniq.axonserver.rest.svg,Elements,1,1,0,0,0,false,0 ,Element Composite ,0 ,boxes: Iterable<? extends Element> ,printOn{ Params : PrintWriter Returns : void} boxesNumber{ Params :  Returns : int} items{ Params :  Returns : Iterable<? extends Element>} ,printOn items ,,,,Element Composite ,Iterable<? extends Element> ,,Iterable<? extends Element> ,LinkedList Position LinkedList ,Iterables: , boxes
axon-server-se-master,io.axoniq.axonserver.rest.svg,FontMetricsWrapper,1,1,0,0,0,false,0 ,0 ,0 ,INSTANCE: FontMetricsWrapper wrapped: FontMetrics ,stringWidth{ Params : String Returns : int} getHeight{ Params :  Returns : int} getAscent{ Params :  Returns : int} ,,,,,,FontMetrics ,,FontMetrics ,FontMetricsWrapper ,wrapped: 
axon-server-se-master,io.axoniq.axonserver.rest.svg,Fonts,1,1,0,0,0,false,0 ,0 ,FontResource ,type: FontResource eventStore: FontResource client: FontResource component: FontResource messaging: FontResource popup: FontResource ,type{ Params :  Returns : FontMetricsWrapper} eventStore{ Params :  Returns : FontMetricsWrapper} client{ Params :  Returns : FontMetricsWrapper} component{ Params :  Returns : FontMetricsWrapper} messaging{ Params :  Returns : FontMetricsWrapper} popup{ Params :  Returns : FontMetricsWrapper} getFont{ Params : Graphics2D,String,float Returns : FontMetricsWrapper} get{ Params :  Returns : FontMetricsWrapper} ,get ,,,,,FontResource ,,FontResource ,BufferedImage FontResource FontResource FontResource FontResource FontResource FontResource FontMetricsWrapper ,popup: 
axon-server-se-master,io.axoniq.axonserver.rest.svg,FontResource,3,2,0,0,0,false,0 ,0 ,FontResource ,font: FontMetricsWrapper ,type{ Params :  Returns : FontMetricsWrapper} eventStore{ Params :  Returns : FontMetricsWrapper} client{ Params :  Returns : FontMetricsWrapper} component{ Params :  Returns : FontMetricsWrapper} messaging{ Params :  Returns : FontMetricsWrapper} popup{ Params :  Returns : FontMetricsWrapper} getFont{ Params : Graphics2D,String,float Returns : FontMetricsWrapper} get{ Params :  Returns : FontMetricsWrapper} ,get ,,,,Supplier ,FontMetricsWrapper ,,FontMetricsWrapper ,FontMetricsWrapper ,wrappedFont: , size
axon-server-se-master,io.axoniq.axonserver.rest.svg.jsfunction,ShowDetail,1,1,0,0,0,false,0 ,Supplier<String> ,0 ,popupName: String nodeType: String contexts: Iterable<String> title: String ,get{ Params :  Returns : String} ,get ,,,,Supplier ,String ,,String ,,contexts: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,Application,2,1,0,0,0,true,0 ,Supplier<String> ,0 ,,name{ Params :  Returns : String} component{ Params :  Returns : String} contexts{ Params :  Returns : Iterable<String>} instances{ Params :  Returns : int} connectedHubNodes{ Params :  Returns : Iterable<String>} instancesString{ Params :  Returns : String} ,,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,ApplicationBoxMapping,1,1,0,0,0,false,0 ,PositionMapping<Application> ,0 ,CLIENT: String hubNodes: BoxRegistry<String> fonts: Fonts ,map{ Params : Application,Position Returns : Element} ,map ,,,,PositionMapping ,Fonts ,,Fonts ,ArrayList TextLine TextLine TextLine TextLine ShowDetail TextBox Clickable DoubleLine ,item: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,Applications,1,1,0,0,0,false,0 ,Function<Predicate<String>,Stream<Application>> ,ComponentContext ConnectedClient ,clusterController: Topology clientsPerComponent: Map<ComponentContext, Set<ConnectedClient>> ,on{ Params : TopologyEvents.ApplicationDisconnected Returns : void} on{ Params : TopologyEvents.ApplicationConnected Returns : void} getCurrentNode{ Params :  Returns : String} apply{ Params : Predicate<String> Returns : Stream<Application>} name{ Params :  Returns : String} component{ Params :  Returns : String} contexts{ Params :  Returns : Iterable<String>} instances{ Params :  Returns : int} connectedHubNodes{ Params :  Returns : Iterable<String>} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : ComponentContext Returns : int} toString{ Params : boolean Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,apply name component contexts instances connectedHubNodes equals hashCode compareTo equals hashCode ,,,,Function ,Map<ComponentContext,Set<ConnectedClient>> ,,Map<ComponentContext,Set<ConnectedClient>> ,ConcurrentHashMap ConnectedClient ComponentContext CopyOnWriteArraySet ConnectedClient ConnectedClient ConnectedClient Application ,: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,ComponentContext,3,2,0,1,0,false,0 ,Function<Predicate<String>,Stream<Application>> ,ComponentContext ConnectedClient ,component: String context: String ,on{ Params : TopologyEvents.ApplicationDisconnected Returns : void} on{ Params : TopologyEvents.ApplicationConnected Returns : void} getCurrentNode{ Params :  Returns : String} apply{ Params : Predicate<String> Returns : Stream<Application>} name{ Params :  Returns : String} component{ Params :  Returns : String} contexts{ Params :  Returns : Iterable<String>} instances{ Params :  Returns : int} connectedHubNodes{ Params :  Returns : Iterable<String>} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : ComponentContext Returns : int} toString{ Params : boolean Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,apply name component contexts instances connectedHubNodes equals hashCode compareTo equals hashCode ,,,,Comparable ,String ,,String ,,component: , other.component
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,ConnectedClient,3,2,0,1,0,false,0 ,Function<Predicate<String>,Stream<Application>> ,ComponentContext ConnectedClient ,client: String axonHubServer: String ,on{ Params : TopologyEvents.ApplicationDisconnected Returns : void} on{ Params : TopologyEvents.ApplicationConnected Returns : void} getCurrentNode{ Params :  Returns : String} apply{ Params : Predicate<String> Returns : Stream<Application>} name{ Params :  Returns : String} component{ Params :  Returns : String} contexts{ Params :  Returns : Iterable<String>} instances{ Params :  Returns : int} connectedHubNodes{ Params :  Returns : Iterable<String>} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : ComponentContext Returns : int} toString{ Params : boolean Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,apply name component contexts instances connectedHubNodes equals hashCode compareTo equals hashCode ,,,,,,,,,Objects: , client
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,AxonServer,2,1,0,0,0,true,0 ,Function<Predicate<String>,Stream<Application>> ,0 ,,isActive{ Params :  Returns : boolean} node{ Params :  Returns : AxonServerNode} contexts{ Params :  Returns : Iterable<String>} storage{ Params :  Returns : Iterable<Storage>} tags{ Params :  Returns : Map<String,String>} isAdminLeader{ Params :  Returns : boolean} ,,,,,,,,,,Collections: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,AxonServerBoxMapping,1,1,0,0,0,false,0 ,PositionMapping<AxonServer> BoxRegistry<String> ,0 ,boxMap: Map<String, Box> showContexts: boolean currentNode: String fonts: Fonts ,map{ Params : AxonServer,Position Returns : Element} get{ Params : String Returns : Box} ,map get ,,,,PositionMapping BoxRegistry ,Fonts ,,Fonts ,HashMap ArrayList TextLine TextLine TextLine ShowDetail TextBox Position ArrayList Store TextLine StyleClass Position TextBox Position Clickable AxonServerGroup ,boxMap: , key
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,AxonServerPopupMapping,1,1,0,0,0,false,0 ,Mapping<AxonServer> ,0 ,hubRegistry: BoxRegistry<String> fonts: Fonts ,map{ Params : AxonServer Returns : Hidden} ,,,,,Mapping ,Fonts ,,Fonts ,ArrayList TextLine TextBox Left Hidden ,node: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,AxonServers,1,1,0,0,0,false,0 ,Function<Predicate<String>,Stream<AxonServer>> ,0 ,ADMIN: String topology: Topology ,apply{ Params : Predicate<String> Returns : Stream<AxonServer>} isActive{ Params :  Returns : boolean} node{ Params :  Returns : AxonServerNode} contexts{ Params :  Returns : List<String>} storage{ Params :  Returns : List<Storage>} context{ Params :  Returns : String} master{ Params :  Returns : boolean} tags{ Params :  Returns : Map<String,String>} isAdminLeader{ Params :  Returns : boolean} ,apply isActive node contexts storage context master tags isAdminLeader ,,,,Function ,Topology ,,Topology ,AxonServer Storage ,node: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,Storage,2,1,0,0,0,true,0 ,Function<Predicate<String>,Stream<AxonServer>> ,0 ,,context{ Params :  Returns : String} master{ Params :  Returns : boolean} ,,,,,,,,,,node: 
axon-server-se-master,io.axoniq.axonserver.rest.svg,Mapping,2,1,0,0,0,true,0 ,Function<Predicate<String>,Stream<AxonServer>> ,0 ,,map{ Params : T Returns : Element} ,,,,,,,,,,node: 
axon-server-se-master,io.axoniq.axonserver.rest.svg,PositionMapping,2,1,0,0,0,true,0 ,Function<Predicate<String>,Stream<AxonServer>> ,0 ,,map{ Params : T,Position Returns : Element} ,,,,,,,,,,node: 
axon-server-se-master,io.axoniq.axonserver.rest.svg,Printable,2,1,0,0,0,true,0 ,Function<Predicate<String>,Stream<AxonServer>> ,0 ,,printOn{ Params : PrintWriter Returns : void} ,,,,,,,,,,node: 
axon-server-se-master,io.axoniq.axonserver.rest.svg,TextLine,1,1,0,0,0,false,0 ,0 ,0 ,text: String font: FontMetricsWrapper styleClass: String ,width{ Params :  Returns : int} height{ Params :  Returns : int} ascent{ Params :  Returns : int} styleClass{ Params :  Returns : String} text{ Params :  Returns : String} ,,,,,,String ,,String ,,font: 
axon-server-se-master,io.axoniq.axonserver.rest,WebSecurityConfiguration,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger accessControlConfiguration: AccessControlConfiguration accessController: AxonServerAccessController dataSource: DataSource altConfigurer: WebSecurityConfigurerAdapter ,configureGlobal{ Params : AuthenticationManagerBuilder,PasswordEncoder Returns : void} setAltConfigurer{ Params : WebSecurityConfigurerAdapter Returns : void} webSecurityConfigurer{ Params :  Returns : WebSecurityConfigurerAdapter} ,,,,,,WebSecurityConfigurerAdapter ,,WebSecurityConfigurerAdapter ,WebSecurityConfigurer ,logger: , "Using alternate security configurer."
axon-server-se-master,io.axoniq.axonserver.rest,WebSecurityConfigurer,1,1,0,0,0,false,WebSecurityConfigurerAdapter ,0 ,AuthenticationToken TokenAuthenticationFilter ,logger: Logger accessControlConfiguration: AccessControlConfiguration accessController: AxonServerAccessController ,configure{ Params : HttpSecurity Returns : void} handleAccessDenied{ Params : HttpServletRequest,HttpServletResponse,AccessDeniedException Returns : void} getAuthorities{ Params :  Returns : Collection<? extends GrantedAuthority>} getCredentials{ Params :  Returns : Object} getDetails{ Params :  Returns : Object} getPrincipal{ Params :  Returns : Object} isAuthenticated{ Params :  Returns : boolean} setAuthenticated{ Params : boolean Returns : void} getName{ Params :  Returns : String} doFilter{ Params : ServletRequest,ServletResponse,FilterChain Returns : void} ,configure getAuthorities getCredentials getDetails getPrincipal isAuthenticated setAuthenticated getName doFilter ,,,,,AxonServerAccessController ,,AxonServerAccessController ,TokenAuthenticationFilter LoginUrlAuthenticationEntryPoint AntPathRequestMatcher AffirmativeBased RestRequestAccessDecisionVoter ApplicationBinding ,HttpStatus.FORBIDDEN: 
axon-server-se-master,io.axoniq.axonserver.rest,AuthenticationToken,3,1,0,1,0,false,WebSecurityConfigurerAdapter ,0 ,AuthenticationToken TokenAuthenticationFilter ,authenticated: boolean name: String roles: Set<GrantedAuthority> ,configure{ Params : HttpSecurity Returns : void} handleAccessDenied{ Params : HttpServletRequest,HttpServletResponse,AccessDeniedException Returns : void} getAuthorities{ Params :  Returns : Collection<? extends GrantedAuthority>} getCredentials{ Params :  Returns : Object} getDetails{ Params :  Returns : Object} getPrincipal{ Params :  Returns : Object} isAuthenticated{ Params :  Returns : boolean} setAuthenticated{ Params : boolean Returns : void} getName{ Params :  Returns : String} doFilter{ Params : ServletRequest,ServletResponse,FilterChain Returns : void} ,configure getAuthorities getCredentials getDetails getPrincipal isAuthenticated setAuthenticated getName doFilter ,,,,Authentication ,Set<GrantedAuthority> ,,Set<GrantedAuthority> ,ApplicationBinding ,HttpStatus.FORBIDDEN: 
axon-server-se-master,io.axoniq.axonserver.rest,TokenAuthenticationFilter,3,1,0,1,0,false,WebSecurityConfigurerAdapter ,0 ,AuthenticationToken TokenAuthenticationFilter ,auditLog: Logger accessController: AxonServerAccessController ,configure{ Params : HttpSecurity Returns : void} handleAccessDenied{ Params : HttpServletRequest,HttpServletResponse,AccessDeniedException Returns : void} getAuthorities{ Params :  Returns : Collection<? extends GrantedAuthority>} getCredentials{ Params :  Returns : Object} getDetails{ Params :  Returns : Object} getPrincipal{ Params :  Returns : Object} isAuthenticated{ Params :  Returns : boolean} setAuthenticated{ Params : boolean Returns : void} getName{ Params :  Returns : String} doFilter{ Params : ServletRequest,ServletResponse,FilterChain Returns : void} ,configure getAuthorities getCredentials getDetails getPrincipal isAuthenticated setAuthenticated getName doFilter ,,,,,AxonServerAccessController ,,AxonServerAccessController ,,SecurityContextHolder: 
axon-server-se-master,io.axoniq.axonserver.rest,WebSocketConfig,1,1,0,0,0,false,0 ,WebSocketMessageBrokerConfigurer ,0 ,setWebSocketAllowedOrigins: boolean webSocketAllowedOrigins: String ,configureMessageBroker{ Params : MessageBrokerRegistry Returns : void} registerStompEndpoints{ Params : StompEndpointRegistry Returns : void} ,configureMessageBroker registerStompEndpoints ,,,,WebSocketMessageBrokerConfigurer ,String ,,String ,,registry: , "/axonserver-platform-websocket"
axon-server-se-master,io.axoniq.axonserver.serializer,GsonMedia,1,1,0,0,0,false,0 ,Media ,0 ,jsonObject: JsonObject ,with{ Params : String,String Returns : Media} with{ Params : String,Number Returns : Media} with{ Params : String,Boolean Returns : Media} with{ Params : String,Printable Returns : Media} with{ Params : String,Iterable<? extends Printable> Returns : Media} withStrings{ Params : String,Iterable<String> Returns : Media} with{ Params : String,Map<String,String> Returns : void} print{ Params : Printable Returns : JsonObject} toString{ Params :  Returns : String} ,with with with with with withStrings with toString ,,,,Media ,JsonObject ,,JsonObject ,JsonObject JsonArray JsonArray JsonObject GsonMedia Gson ,new Gson(): , jsonObject
axon-server-se-master,io.axoniq.axonserver.serializer,Media,2,1,0,0,0,true,0 ,Media ,0 ,,with{ Params : String,String Returns : Media} with{ Params : String,Number Returns : Media} with{ Params : String,Boolean Returns : Media} with{ Params : String,Printable Returns : Media} with{ Params : String,Iterable<? extends Printable> Returns : Media} withStrings{ Params : String,Iterable<String> Returns : Media} toString{ Params :  Returns : String} with{ Params : String,Map<String,String> Returns : void} ,,,,,,,,,,new Gson(): , jsonObject
axon-server-se-master,io.axoniq.axonserver.serializer,Printable,2,1,0,0,0,true,0 ,Media ,0 ,,printOn{ Params : Media Returns : void} ,,,,,,,,,,new Gson(): , jsonObject
axon-server-se-master,io.axoniq.axonserver.serializer,PrintableSerializer,1,1,0,0,0,false,StdSerializer<Printable> ,0 ,0 ,,serialize{ Params : Printable,JsonGenerator,SerializerProvider Returns : void} ,serialize ,,,,,,,,GsonMedia ,media: 
axon-server-se-master,io.axoniq.axonserver.taskscheduler,BaseTaskManager,1,1,1,0,0,false,0 ,SmartLifecycle ,0 ,MAX_RETRY_INTERVAL: long logger: Logger taskExecutor: ScheduledTaskExecutor taskRepository: TaskRepository leaderForGroupProvider: Supplier<Set<String>> raftLeaderTest: Predicate<String> platformTransactionManager: PlatformTransactionManager scheduler: ScheduledExecutorService clock: Clock scheduledProcessors: Map<String, Map<String, ScheduledFuture<?>>> nextTimestamp: AtomicLong window: long running: boolean ,saveAndSchedule{ Params : Task Returns : void} doScheduleTask{ Params : Task Returns : void} schedule{ Params : Task Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} isRunning{ Params :  Returns : boolean} processResult{ Params : String,String,TaskStatus,long,long,String Returns : CompletableFuture<Void>} initFetchTasksRunner{ Params :  Returns : void} fetchTasks{ Params :  Returns : void} executeTask{ Params : Task Returns : void} asString{ Params : Throwable Returns : String} isTransient{ Params : Throwable Returns : boolean} delay{ Params : Task Returns : long} newSchedule{ Params : Task Returns : long} error{ Params : Task,Throwable Returns : void} completed{ Params : Task Returns : void} unschedule{ Params : String,String Returns : void} ,start stop isRunning ,,,processResult ,SmartLifecycle ,boolean ,,boolean ,ConcurrentHashMap AtomicLong TransactionTemplate ConcurrentHashMap ,future: , false
axon-server-se-master,io.axoniq.axonserver.taskscheduler,JacksonTaskPayloadSerializer,1,1,0,0,0,false,0 ,TaskPayloadSerializer ,0 ,objectMapper: ObjectMapper ,deserialize{ Params : TaskPayload Returns : Object} serialize{ Params : Object Returns : TaskPayload} ,deserialize serialize ,,,,TaskPayloadSerializer ,ObjectMapper ,,ObjectMapper ,ObjectMapper String RuntimeException TaskPayload RuntimeException ,objectMapper: , object
axon-server-se-master,io.axoniq.axonserver.taskscheduler,ScheduledTask,2,1,0,0,0,true,0 ,TaskPayloadSerializer ,0 ,,executeAsync{ Params : String,Object Returns : CompletableFuture<Void>} execute{ Params : String,Object Returns : void} isSerialized{ Params :  Returns : boolean} ,,,,,,,,,CompletableFuture ,completableFuture: , ex
axon-server-se-master,io.axoniq.axonserver.taskscheduler,ScheduledTaskExecutor,2,1,0,0,0,true,0 ,TaskPayloadSerializer ,0 ,,executeTask{ Params : Task Returns : CompletableFuture<Void>} ,,,,,,,,,,completableFuture: , ex
axon-server-se-master,io.axoniq.axonserver.taskscheduler,ScheduledTaskExecutorImpl,1,1,0,0,0,false,0 ,ScheduledTaskExecutor ,0 ,applicationContext: ApplicationContext taskPayloadSerializer: TaskPayloadSerializer ,executeTask{ Params : Task Returns : CompletableFuture<Void>} ,executeTask ,,,,ScheduledTaskExecutor ,TaskPayloadSerializer ,,TaskPayloadSerializer ,RuntimeException RuntimeException ,task: 
axon-server-se-master,io.axoniq.axonserver.taskscheduler,StandaloneTaskManager,1,1,0,0,0,false,BaseTaskManager ,0 ,0 ,replicationGroup: String taskPayloadSerializer: TaskPayloadSerializer ,createTask{ Params : String,TaskPayload,long Returns : String} createTask{ Params : String,Object,Duration Returns : void} processResult{ Params : String,String,TaskStatus,long,long,String Returns : CompletableFuture<Void>} cancel{ Params : String Returns : void} ,processResult ,,,,,TaskPayloadSerializer ,,TaskPayloadSerializer ,Task TransactionTemplate TransactionTemplate ,: , replicationGroup, taskId
axon-server-se-master,io.axoniq.axonserver.taskscheduler,Task,1,1,0,0,0,false,0 ,0 ,0 ,taskId: String taskExecutor: String payload: TaskPayload timestamp: Long status: TaskStatus retryInterval: Long context: String message: String ,getTaskId{ Params :  Returns : String} setTaskId{ Params : String Returns : void} getTaskExecutor{ Params :  Returns : String} setTaskExecutor{ Params : String Returns : void} getPayload{ Params :  Returns : TaskPayload} setPayload{ Params : TaskPayload Returns : void} getTimestamp{ Params :  Returns : Long} setTimestamp{ Params : Long Returns : void} getStatus{ Params :  Returns : TaskStatus} setStatus{ Params : TaskStatus Returns : void} getRetryInterval{ Params :  Returns : Long} setRetryInterval{ Params : Long Returns : void} getContext{ Params :  Returns : String} setContext{ Params : String Returns : void} setMessage{ Params : String Returns : void} trim{ Params : String,int Returns : String} getMessage{ Params :  Returns : String} ,,,,,,String ,,String ,,message: , 0, maxLength
axon-server-se-master,io.axoniq.axonserver.taskscheduler,TaskPayload,1,1,0,0,0,false,0 ,0 ,0 ,type: String data: byte ,getType{ Params :  Returns : String} setType{ Params : String Returns : void} getData{ Params :  Returns : byte[]} setData{ Params : byte[] Returns : void} asSerializedObject{ Params :  Returns : SerializedObject} ,,,,,,byte[] ,,byte[] ,,ByteString: , data
axon-server-se-master,io.axoniq.axonserver.taskscheduler,TaskPayloadSerializer,2,1,0,0,0,true,0 ,0 ,0 ,,deserialize{ Params : TaskPayload Returns : Object} serialize{ Params : Object Returns : TaskPayload} ,,,,,,,,,,ByteString: , data
axon-server-se-master,io.axoniq.axonserver.taskscheduler,TaskRepository,2,1,0,0,0,true,0 ,0 ,0 ,,findAllByContext{ Params : String Returns : List<Task>} findAllByContextAndStatusAndTimestampGreaterThanEqualAndTimestampLessThan{ Params : String,TaskStatus,long,long Returns : List<Task>} deleteAllByContext{ Params : String Returns : void} findScheduled{ Params : String,long,long Returns : List<Task>} findAllByContextIn{ Params : List<String> Returns : List<Task>} ,,,,,,,,,,: , context, TaskStatus.SCHEDULED, minTimestamp, maxTimestamp
axon-server-se-master,io.axoniq.axonserver.taskscheduler,TransientException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.topology,AxonServerNode,2,1,0,0,0,true,RuntimeException ,0 ,0 ,,getHostName{ Params :  Returns : String} getGrpcPort{ Params :  Returns : Integer} getInternalHostName{ Params :  Returns : String} getGrpcInternalPort{ Params :  Returns : Integer} getHttpPort{ Params :  Returns : Integer} getName{ Params :  Returns : String} getContextNames{ Params :  Returns : Collection<String>} getStorageContextNames{ Params :  Returns : Collection<String>} getTags{ Params :  Returns : Map<String,String>} ,,,,,,,,,,Collections: 
axon-server-se-master,io.axoniq.axonserver.topology,DefaultEventStoreLocator,1,1,0,0,0,false,0 ,EventStoreLocator ,0 ,localEventStore: LocalEventStore ,init{ Params :  Returns : void} getEventStore{ Params : String Returns : EventStore} eventStore{ Params : String Returns : Mono<EventStore>} ,getEventStore eventStore ,,,,EventStoreLocator ,LocalEventStore ,,LocalEventStore ,MessagingPlatformException MessagingPlatformException ,Mono: , new MessagingPlatformException(ErrorCode.NO_EVENTSTORE, "No eventstore found")
axon-server-se-master,io.axoniq.axonserver.topology,DefaultTopology,1,1,0,0,0,false,0 ,Topology ,0 ,me: AxonServerNode ,getName{ Params :  Returns : String} getMe{ Params :  Returns : AxonServerNode} ,getName getMe ,,,,Topology ,AxonServerNode ,,AxonServerNode ,SimpleAxonServerNode ,me: 
axon-server-se-master,io.axoniq.axonserver.topology,EventStoreLocator,2,1,0,0,0,true,0 ,Topology ,0 ,,getEventStore{ Params : String Returns : EventStore} eventStore{ Params : String Returns : Mono<EventStore>} getEventStore{ Params : String,boolean Returns : EventStore} eventStore{ Params : String,boolean Returns : Mono<EventStore>} ,,,,,,,,,,: , context
axon-server-se-master,io.axoniq.axonserver.topology,SimpleAxonServerNode,1,1,0,0,0,false,0 ,AxonServerNode ,0 ,name: String hostName: String port: int httpPort: int ,getHostName{ Params :  Returns : String} getGrpcPort{ Params :  Returns : Integer} getInternalHostName{ Params :  Returns : String} getGrpcInternalPort{ Params :  Returns : Integer} getHttpPort{ Params :  Returns : Integer} getName{ Params :  Returns : String} getContextNames{ Params :  Returns : Collection<String>} ,getHostName getGrpcPort getInternalHostName getGrpcInternalPort getHttpPort getName getContextNames ,,,,AxonServerNode ,int ,,int ,,Collections: , Topology.DEFAULT_CONTEXT
axon-server-se-master,io.axoniq.axonserver.topology,Topology,2,1,0,0,0,true,0 ,AxonServerNode ,0 ,DEFAULT_CONTEXT: String ,getName{ Params :  Returns : String} isMultiContext{ Params :  Returns : boolean} isActive{ Params : AxonServerNode Returns : boolean} isLeader{ Params : String,String Returns : boolean} nodes{ Params :  Returns : Stream<? extends AxonServerNode>} getMe{ Params :  Returns : AxonServerNode} findNodeForClient{ Params : String,String,String,Map<String,String> Returns : AxonServerNode} getMyContextNames{ Params :  Returns : Iterable<String>} knownContexts{ Params :  Returns : Iterable<String>} isAdminNode{ Params :  Returns : boolean} getMyStorageContextNames{ Params :  Returns : Iterable<String>} validContext{ Params : String Returns : boolean} initialized{ Params :  Returns : boolean} visibleContexts{ Params : boolean,Authentication Returns : Set<String>} ,,,,,,,,,,Collections: , DEFAULT_CONTEXT
axon-server-se-master,io.axoniq.axonserver.transport.grpc,AuthenticationGrpcController,1,1,0,0,0,false,AuthenticationServiceGrpc.AuthenticationServiceImplBase ,AxonServerClientService ,0 ,userController: UserController accessController: AxonServerAccessController passwordEncoder: PasswordEncoder ,authenticateUser{ Params : AuthenticateUserRequest,StreamObserver<UserRoles> Returns : void} contextRole{ Params : String,String Returns : ContextRole} authenticateToken{ Params : Token,StreamObserver<ApplicationRoles> Returns : void} contextRole{ Params : GrantedAuthority Returns : ContextRole} ,authenticateUser authenticateToken ,,,,AxonServerClientService ,PasswordEncoder ,,PasswordEncoder ,MessagingPlatformException MessagingPlatformException ,accessController: 
axon-server-se-master,io.axoniq.axonserver.transport.grpc.eventprocessor,EventProcessorIdMessage,1,1,0,0,0,false,0 ,EventProcessorId ,0 ,context: String grpcMessage: EventProcessorIdentifier ,name{ Params :  Returns : String} tokenStoreIdentifier{ Params :  Returns : String} context{ Params :  Returns : String} ,name tokenStoreIdentifier context ,,,,EventProcessorId ,EventProcessorIdentifier ,,EventProcessorIdentifier ,,grpcMessage: 
axon-server-se-master,io.axoniq.axonserver.transport.grpc.eventprocessor,EventProcessorMapping,1,1,0,0,0,false,0 ,Function<EventProcessor,io.axoniq.axonserver.grpc.admin.EventProcessor> ,0 ,,apply{ Params : EventProcessor Returns : io.axoniq.axonserver.grpc.admin.EventProcessor} grpcProcessorInstance{ Params : io.axoniq.axonserver.admin.eventprocessor.api.EventProcessorInstance Returns : EventProcessorInstance} grpcSegment{ Params : io.axoniq.axonserver.admin.eventprocessor.api.EventProcessorSegment Returns : EventProcessorSegment} ,apply ,,,,Function ,,,,,segment: 
axon-server-se-master,io.axoniq.axonserver.transport.grpc,EventProcessorGrpcController,1,1,0,0,0,false,EventProcessorAdminServiceImplBase ,AxonServerClientService ,0 ,service: EventProcessorAdminService authenticationProvider: AuthenticationProvider eventProcessorMapping: EventProcessorMapping contextProvider: ContextProvider axonServerAccessController: AxonServerAccessController ,pauseEventProcessor{ Params : EventProcessorIdentifier,StreamObserver<AdminActionResult> Returns : void} startEventProcessor{ Params : EventProcessorIdentifier,StreamObserver<AdminActionResult> Returns : void} splitEventProcessor{ Params : EventProcessorIdentifier,StreamObserver<AdminActionResult> Returns : void} mergeEventProcessor{ Params : EventProcessorIdentifier,StreamObserver<AdminActionResult> Returns : void} moveEventProcessorSegment{ Params : MoveSegment,StreamObserver<AdminActionResult> Returns : void} returnAuthorizationError{ Params : StreamObserver<?>,String Returns : void} getAllEventProcessors{ Params : Empty,StreamObserver<EventProcessor> Returns : void} getEventProcessorsByComponent{ Params : Component,StreamObserver<EventProcessor> Returns : void} loadBalanceProcessor{ Params : LoadBalanceRequest,StreamObserver<Empty> Returns : void} setAutoLoadBalanceStrategy{ Params : LoadBalanceRequest,StreamObserver<Empty> Returns : void} getBalancingStrategies{ Params : Empty,StreamObserver<LoadBalancingStrategy> Returns : void} onError{ Params : StreamObserver<?> Returns : Consumer<Throwable>} success{ Params : io.axoniq.axonserver.admin.eventprocessor.api.Result,StreamObserver<AdminActionResult> Returns : void} map{ Params : io.axoniq.axonserver.admin.eventprocessor.api.Result Returns : Result} determineContextName{ Params : String Returns : String} ,pauseEventProcessor startEventProcessor splitEventProcessor mergeEventProcessor moveEventProcessorSegment getAllEventProcessors getEventProcessorsByComponent loadBalanceProcessor setAutoLoadBalanceStrategy getBalancingStrategies ,,,,AxonServerClientService ,AxonServerAccessController ,,AxonServerAccessController ,EventProcessorMapping EventProcessorIdMessage GrpcAuthentication EventProcessorIdMessage GrpcAuthentication EventProcessorIdMessage GrpcAuthentication EventProcessorIdMessage GrpcAuthentication EventProcessorIdMessage GrpcAuthentication MessagingPlatformException GrpcAuthentication GrpcAuthentication EventProcessorIdMessage GrpcAuthentication EventProcessorIdMessage GrpcAuthentication GrpcAuthentication ,contextProvider: 
axon-server-se-master,io.axoniq.axonserver.transport.grpc,EventStoreTransformationGrpcController,1,1,0,0,0,false,EventTransformationServiceGrpc.EventTransformationServiceImplBase ,AxonServerClientService ,0 ,logger: Logger contextProvider: ContextProvider authenticationProvider: AuthenticationProvider eventStoreTransformationService: EventStoreTransformationService statusMapping: Map<EventStoreTransformationService.Transformation.Status, TransformationState> ,startTransformation{ Params : StartTransformationRequest,StreamObserver<TransformationId> Returns : void} transformationId{ Params : String Returns : TransformationId} transformEvents{ Params : StreamObserver<TransformRequestAck> Returns : StreamObserver<TransformRequest>} onNext{ Params : TransformRequest Returns : void} handleRequestProcessed{ Params : long Returns : void} forwardError{ Params : Throwable Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} checkRequestsDone{ Params :  Returns : void} ack{ Params : long Returns : TransformRequestAck} transformationId{ Params : TransformRequest Returns : String} cancelTransformation{ Params : TransformationId,StreamObserver<Empty> Returns : void} applyTransformation{ Params : ApplyTransformationRequest,StreamObserver<Empty> Returns : void} compact{ Params : CompactionRequest,StreamObserver<Empty> Returns : void} transformations{ Params : Empty,StreamObserver<Transformation> Returns : void} ,startTransformation transformEvents onNext onError onCompleted cancelTransformation applyTransformation compact transformations ,,,,AxonServerClientService ,Map<EventStoreTransformationService.Transformation.Status,TransformationState> ,,Map<EventStoreTransformationService.Transformation.Status,TransformationState> ,GrpcAuthentication StreamObserver AtomicInteger AtomicBoolean GrpcAuthentication GrpcAuthentication IllegalArgumentException GrpcAuthentication VoidStreamObserverSubscriber GrpcAuthentication VoidStreamObserverSubscriber GrpcAuthentication VoidStreamObserverSubscriber GrpcAuthentication EnumMap ,transformation: 
axon-server-se-master,io.axoniq.axonserver.transport.grpc,GrpcAuthentication,1,1,0,0,0,false,0 ,Authentication ,0 ,authentication: org.springframework.security.core.Authentication ,username{ Params :  Returns : String} hasRole{ Params : String,String Returns : boolean} application{ Params :  Returns : boolean} isLocallyManaged{ Params :  Returns : boolean} hasAnyRole{ Params : String Returns : boolean} ,username hasRole application isLocallyManaged hasAnyRole ,,,,Authentication ,org.springframework.security.core.Authentication ,,org.springframework.security.core.Authentication ,,grantedAuthority: 
axon-server-se-master,io.axoniq.axonserver.transport.grpc,UserGrpcController,1,1,0,0,0,false,UserAdminServiceGrpc.UserAdminServiceImplBase ,AxonServerClientService ,0 ,userAdminService: UserAdminService authenticationProvider: AuthenticationProvider ,toUserRole{ Params : UserRoleRequest Returns : UserRole} context{ Params :  Returns : String} role{ Params :  Returns : String} createOrUpdateUser{ Params : CreateOrUpdateUserRequest,StreamObserver<Empty> Returns : void} deleteUser{ Params : DeleteUserRequest,StreamObserver<Empty> Returns : void} getUsers{ Params : Empty,StreamObserver<UserOverview> Returns : void} ,context role createOrUpdateUser deleteUser getUsers ,toUserRole ,,,AxonServerClientService ,AuthenticationProvider ,,AuthenticationProvider ,UserRole GrpcAuthentication GrpcAuthentication GrpcAuthentication ,GrpcExceptionBuilder: , e
axon-server-se-master,io.axoniq.axonserver.transport.grpc,VoidStreamObserverSubscriber,1,1,0,0,0,false,BaseSubscriber<Void> ,0 ,0 ,logger: Logger description: String responseObserver: StreamObserver<Empty> ,hookOnComplete{ Params :  Returns : void} hookOnError{ Params : Throwable Returns : void} ,hookOnComplete hookOnError ,,,,,StreamObserver<Empty> ,,StreamObserver<Empty> ,,GrpcExceptionBuilder: , throwable
axon-server-se-master,io.axoniq.axonserver.transport.rest,EventProcessorRestController,1,1,0,0,0,false,0 ,0 ,0 ,service: EventProcessorAdminService ,componentProcessors{ Params : String,String,Principal Returns : Flux<Printable>} isNull{ Params : String Returns : boolean} pause{ Params : String,String,String,Principal Returns : Mono<ResponseEntity<RestResponse>>} start{ Params : String,String,String,Principal Returns : Mono<ResponseEntity<RestResponse>>} moveSegment{ Params : String,int,String,String,String,Principal Returns : Mono<ResponseEntity<RestResponse>>} splitSegment{ Params : String,String,String,Principal Returns : Mono<ResponseEntity<RestResponse>>} mergeSegment{ Params : String,String,String,Principal Returns : Mono<ResponseEntity<RestResponse>>} getClientInstancesFor{ Params : String,String,String,Principal Returns : Flux<String>} response{ Params : Result,String Returns : ResponseEntity<RestResponse>} ,,,,,,EventProcessorAdminService ,,EventProcessorAdminService ,PrincipalAuthentication StreamingProcessor GenericProcessor EventProcessorIdentifier PrincipalAuthentication EventProcessorIdentifier PrincipalAuthentication EventProcessorIdentifier PrincipalAuthentication EventProcessorIdentifier PrincipalAuthentication EventProcessorIdentifier PrincipalAuthentication EventProcessorIdentifier PrincipalAuthentication ,ResponseEntityFactory: , format
axon-server-se-master,io.axoniq.axonserver.transport.rest,EventStoreTransformationRestController,1,1,0,0,0,false,0 ,0 ,0 ,eventStoreTransformationService: EventStoreTransformationService ,startTransformation{ Params : String,String,Principal Returns : String} deleteEvent{ Params : String,String,long,long,Principal Returns : void} replaceEvent{ Params : String,String,long,EventsRestController.JsonEvent,long,Principal Returns : void} cancelTransformation{ Params : String,String,Principal Returns : void} applyTransformation{ Params : String,String,long,Authentication Returns : void} compact{ Params : String,Authentication Returns : void} get{ Params : String,Authentication Returns : Flux<ObjectNode>} toJson{ Params : EventStoreTransformationService.Transformation Returns : ObjectNode} ,,,,,,EventStoreTransformationService ,,EventStoreTransformationService ,PrincipalAuthentication PrincipalAuthentication PrincipalAuthentication PrincipalAuthentication PrincipalAuthentication PrincipalAuthentication PrincipalAuthentication ObjectMapper ,t: 
axon-server-se-master,io.axoniq.axonserver.transport.rest.json,GenericProcessor,1,1,0,0,0,false,0 ,Printable ,0 ,eventProcessor: io.axoniq.axonserver.admin.eventprocessor.api.EventProcessor ,printOn{ Params : Media Returns : void} name{ Params :  Returns : String} fullName{ Params :  Returns : String} warnings{ Params :  Returns : Iterable<Warning>} ,printOn ,,,,Printable ,io.axoniq.axonserver.admin.eventprocessor.api.EventProcessor ,,io.axoniq.axonserver.admin.eventprocessor.api.EventProcessor ,ActiveWarnings ,: 
axon-server-se-master,io.axoniq.axonserver.transport.rest.json,StreamingProcessor,1,1,0,0,0,false,GenericProcessor ,Printable ,0 ,TOKEN_STORE_IDENTIFIER: String CONTEXT: String FREE_THREAD_INSTANCES_COUNT: String ACTIVE_THREADS_COUNT: String CAN_PAUSE_KEY: String CAN_PLAY_KEY: String CAN_SPLIT_KEY: String CAN_MERGE_KEY: String TRACKERS_LIST_KEY: String eventProcessor: io.axoniq.axonserver.admin.eventprocessor.api.EventProcessor ,fullName{ Params :  Returns : String} tokenStoreIdentifier{ Params :  Returns : String} context{ Params :  Returns : String} warnings{ Params :  Returns : Iterable<Warning>} printOn{ Params : Media Returns : void} trackers{ Params :  Returns : List<Printable>} segments{ Params :  Returns : List<EventProcessorSegment>} ,fullName warnings printOn ,,,,Printable ,io.axoniq.axonserver.admin.eventprocessor.api.EventProcessor ,,io.axoniq.axonserver.admin.eventprocessor.api.EventProcessor ,DuplicatedTrackers MissingTrackers HashSet AtomicBoolean AtomicBoolean AtomicLong AtomicInteger AtomicInteger LinkedList ,instance: 
axon-server-se-master,io.axoniq.axonserver.transport.rest.json,StreamingProcessorSegment,1,1,0,0,0,false,0 ,Printable ,0 ,eventProcessorSegment: EventProcessorSegment ,printOn{ Params : Media Returns : void} ,printOn ,,,,Printable ,EventProcessorSegment ,,EventProcessorSegment ,,eventProcessorSegment: 
axon-server-se-master,io.axoniq.axonserver.transport.rest.json.warning,ActiveWarnings,1,1,0,0,0,false,0 ,Iterable<Warning> ,0 ,warnings: Iterable<Warning> ,iterator{ Params :  Returns : Iterator<Warning>} ,iterator ,,,,Iterable ,Iterable<Warning> ,,Iterable<Warning> ,,warnings: 
axon-server-se-master,io.axoniq.axonserver.transport.rest.json.warning,DuplicatedTrackers,1,1,0,0,0,false,0 ,Warning ,0 ,trackerInfos: Iterable<EventProcessorSegment> ,active{ Params :  Returns : boolean} message{ Params :  Returns : String} ,active message ,,,,Warning ,Iterable<EventProcessorSegment> ,,Iterable<EventProcessorSegment> ,HashSet ,ids: 
axon-server-se-master,io.axoniq.axonserver.transport.rest.json.warning,MissingTrackers,1,1,0,0,0,false,0 ,Warning ,0 ,trackerInfos: Iterable<EventProcessorSegment> ,active{ Params :  Returns : boolean} message{ Params :  Returns : String} ,active message ,,,,Warning ,Iterable<EventProcessorSegment> ,,Iterable<EventProcessorSegment> ,HashSet ,ids: , segmentId
axon-server-se-master,io.axoniq.axonserver.transport.rest.json.warning,Warning,2,1,0,0,0,true,0 ,Warning ,0 ,,active{ Params :  Returns : boolean} message{ Params :  Returns : String} printOn{ Params : Media Returns : void} ,printOn ,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.transport.rest,LoadBalancingRestController,1,1,0,0,0,false,0 ,0 ,0 ,eventProcessorAdminService: EventProcessorAdminService ,getStrategies{ Params : Principal Returns : Iterable<? extends Printable>} balanceProcessorLoad{ Params : String,String,String,String,Principal Returns : Mono<Void>} ,,,,,,EventProcessorAdminService ,,EventProcessorAdminService ,PrincipalAuthentication EventProcessorIdentifier PrincipalAuthentication ,eventProcessorAdminService: , new EventProcessorIdentifier(processor, context, tokenStoreIdentifier), strategyName, new PrincipalAuthentication(principal)
axon-server-se-master,io.axoniq.axonserver.transport.rest,PrincipalAuthentication,1,1,0,0,0,false,0 ,Authentication ,0 ,principal: Principal ,username{ Params :  Returns : String} hasRole{ Params : String,String Returns : boolean} application{ Params :  Returns : boolean} toString{ Params :  Returns : String} isLocallyManaged{ Params :  Returns : boolean} isLocalUser{ Params :  Returns : boolean} hasAnyRole{ Params : String Returns : boolean} ,username hasRole application toString isLocallyManaged hasAnyRole ,,,,Authentication ,Principal ,,Principal ,,grantedAuthority: 
axon-server-se-master,io.axoniq.axonserver.transport.rest,ResponseEntityFactory,1,1,0,0,0,false,0 ,0 ,0 ,,asAcceptedRequest{ Params : String Returns : ResponseEntity<RestResponse>} asSuccessResponse{ Params : String Returns : ResponseEntity<RestResponse>} asFailedResponse{ Params : Throwable Returns : Mono<ResponseEntity<RestResponse>>} ,,asAcceptedRequest asSuccessResponse asFailedResponse ,,,,,,,RestResponse RestResponse RestResponse ,ErrorCode: , ex
axon-server-se-master,io.axoniq.axonserver.transport.rest,UserRestController,1,1,0,0,0,false,0 ,0 ,UserJson ,logger: Logger auditLog: Logger userController: UserAdminService roleController: RoleController ,createUser{ Params : UserJson,Principal Returns : void} role{ Params :  Returns : String} context{ Params :  Returns : String} listUsers{ Params : Principal Returns : List<UserJson>} dropUser{ Params : String,Principal Returns : void} getUserName{ Params :  Returns : String} setUserName{ Params : String Returns : void} getPassword{ Params :  Returns : String} setPassword{ Params : String Returns : void} getRoles{ Params :  Returns : String[]} setRoles{ Params : String[] Returns : void} ,role context ,,,,,RoleController ,,RoleController ,MessagingPlatformException HashSet UserRole PrincipalAuthentication PrincipalAuthentication MessagingPlatformException PrincipalAuthentication MessagingPlatformException ,exception: 
axon-server-se-master,io.axoniq.axonserver.transport.rest,UserJson,3,1,0,1,0,false,0 ,0 ,UserJson ,userName: String password: String roles: String ,createUser{ Params : UserJson,Principal Returns : void} role{ Params :  Returns : String} context{ Params :  Returns : String} listUsers{ Params : Principal Returns : List<UserJson>} dropUser{ Params : String,Principal Returns : void} getUserName{ Params :  Returns : String} setUserName{ Params : String Returns : void} getPassword{ Params :  Returns : String} setPassword{ Params : String Returns : void} getRoles{ Params :  Returns : String[]} setRoles{ Params : String[] Returns : void} ,role context ,,,,,String[] ,,String[] ,,exception: 
axon-server-se-master,io.axoniq.axonserver.util,ConstraintCache,2,1,0,0,0,true,0 ,0 ,0 ,,size{ Params :  Returns : int} remove{ Params : K Returns : V} get{ Params : K Returns : V} put{ Params : K,V Returns : V} entrySet{ Params :  Returns : Collection<Map.Entry<K,V>>} ,,,,,,,,,,exception: 
axon-server-se-master,io.axoniq.axonserver.util,DaemonThreadFactory,1,1,0,0,0,false,CustomizableThreadFactory ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.util,NonReplacingConstraintCache,2,1,0,0,0,true,CustomizableThreadFactory ,0 ,0 ,,putIfAbsent{ Params : K,V Returns : V} put{ Params : K,V Returns : V} ,put ,,,,,,,,UnsupportedOperationException ,exception: 
axon-server-se-master,io.axoniq.axonserver.util,ObjectUtils,1,1,0,0,0,false,0 ,0 ,0 ,,getOrDefault{ Params : T,T Returns : T} ,,getOrDefault ,,,,,,,,exception: 
axon-server-se-master,io.axoniq.axonserver.util,SerializedObjectMapper,1,1,0,0,0,false,0 ,0 ,0 ,,map{ Params : SerializedObject Returns : String} ,,map ,,,,,,,,printable: 
axon-server-se-master,io.axoniq.axonserver.util,StreamObserverUtils,1,1,0,0,0,false,0 ,0 ,0 ,,complete{ Params : StreamObserver<?> Returns : void} error{ Params : StreamObserver<?>,Throwable Returns : void} ,,complete error ,,,,,,,,responseStreamObserver: , cause
axon-server-se-master,io.axoniq.axonserver.util,TimeLimitedCache,1,1,0,0,0,false,0 ,0 ,ValueWrapper ,entries: Map<T1, ValueWrapper<T2>> clock: Clock timeToLive: long ,values{ Params :  Returns : Collection<T2>} isEmpty{ Params :  Returns : boolean} put{ Params : T1,T2 Returns : void} get{ Params : T1 Returns : T2} removeIf{ Params : BiPredicate<T1,T2> Returns : void} removeExpired{ Params :  Returns : void} timedOut{ Params : ValueWrapper<T2> Returns : boolean} ,,,,,,long ,,long ,ConcurrentHashMap ValueWrapper ,clock: 
axon-server-se-master,io.axoniq.axonserver.util,ValueWrapper,3,2,0,1,0,false,0 ,0 ,ValueWrapper ,value: T2 evictTimestamp: long ,values{ Params :  Returns : Collection<T2>} isEmpty{ Params :  Returns : boolean} put{ Params : T1,T2 Returns : void} get{ Params : T1 Returns : T2} removeIf{ Params : BiPredicate<T1,T2> Returns : void} removeExpired{ Params :  Returns : void} timedOut{ Params : ValueWrapper<T2> Returns : boolean} ,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.version,DefaultVersionInfoProvider,1,1,0,0,0,false,0 ,VersionInfoProvider ,0 ,applicationName: String defaultVersion: String ,get{ Params :  Returns : VersionInfo} ,get ,,,,VersionInfoProvider ,String ,,String ,VersionInfo ,clock: 
axon-server-se-master,io.axoniq.axonserver.version,VersionInfo,1,1,0,0,0,false,0 ,0 ,0 ,productName: String version: String ,getProductName{ Params :  Returns : String} getVersion{ Params :  Returns : String} ,,,,,,String ,,String ,,clock: 
axon-server-se-master,io.axoniq.axonserver.version,VersionInfoProvider,2,1,0,0,0,true,0 ,0 ,0 ,,get{ Params :  Returns : VersionInfo} ,,,,,,,,,,clock: 
axon-server-se-master,io.axoniq.axonserver.websocket,ClusterUpdatesListener,1,1,0,0,0,false,0 ,0 ,0 ,topologyBaseEventEmitterSink: Sinks.Many<TopologyEvents.TopologyBaseEvent> subscriptionBaseEventEmitterSink: Sinks.Many<SubscriptionEvents.SubscriptionBaseEvent> ,on{ Params : TopologyEvents.TopologyBaseEvent Returns : void} on{ Params : SubscriptionEvents.SubscriptionBaseEvent Returns : void} ,,,,,,Sinks.Many<SubscriptionEvents.SubscriptionBaseEvent> ,,Sinks.Many<SubscriptionEvents.SubscriptionBaseEvent> ,,subscriptionBaseEventEmitterSink: , subscriptionEvent
axon-server-se-master,io.axoniq.axonserver.websocket,WebsocketProcessorEventsSource,1,1,0,0,0,false,0 ,0 ,0 ,updatesConsumer: Runnable logger: Logger updates: AtomicBoolean ,applyIfUpdates{ Params :  Returns : void} on{ Params : EventProcessorStatusUpdate Returns : void} ,,,,,,AtomicBoolean ,,AtomicBoolean ,AtomicBoolean ,updates: , true
axon-server-se-master,io.axoniq.axonserver.access.role,RoleControllerTest,1,1,0,0,0,false,0 ,0 ,0 ,roleController: RoleController roleRepository: RoleRepository versionInfoProvider: VersionInfoProvider ,before{ Params :  Returns : void} testFindRoles{ Params :  Returns : void} ,,,,,,VersionInfoProvider ,,VersionInfoProvider ,RoleController ,: , "ADMIN", "CONTEXT_ADMIN", "DISPATCH_COMMANDS", "DISPATCH_QUERY", "MONITOR", "PUBLISH_EVENTS", "READ", "READ_EVENTS", "SUBSCRIBE_COMMAND_HANDLER", "SUBSCRIBE_QUERY_HANDLER", "TRANSFORM", "TRANSFORM_ADMIN", "USE_CONTEXT", "VIEW_CONFIGURATION", "WRITE"
axon-server-se-master,io.axoniq.axonserver.access.user,UserControllerTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: UserController users: List<User> passwordEncoder: PasswordEncoder ,setup{ Params :  Returns : void} encode{ Params : CharSequence Returns : String} matches{ Params : CharSequence,String Returns : boolean} deleteUser{ Params :  Returns : void} getUsers{ Params :  Returns : void} updateUserWithPassword{ Params :  Returns : void} updateUserWithoutPassword{ Params :  Returns : void} newUser{ Params :  Returns : void} newUserWithoutPassword{ Params :  Returns : void} syncUser{ Params :  Returns : void} syncUserWithoutPassword{ Params :  Returns : void} syncNewUser{ Params :  Returns : void} syncNewUserWithoutPassword{ Params :  Returns : void} ,encode matches ,,,,,PasswordEncoder ,,PasswordEncoder ,ArrayList User PasswordEncoder UserController User User User User ,testSubject: , "Demo6"
axon-server-se-master,io.axoniq.axonserver,ActiveRequestsCacheTest,1,1,0,0,0,false,0 ,0 ,Instruction ,,cancel{ Params :  Returns : void} cancel{ Params : String,Instruction Returns : void} requestToBeCanceled{ Params : String,Instruction Returns : boolean} putTest{ Params :  Returns : void} isCancelable{ Params :  Returns : boolean} onCompletion{ Params : Runnable Returns : void} complete{ Params :  Returns : void} ,cancel requestToBeCanceled onCompletion ,,,,,,,,HashSet LimitedBuffer ActiveRequestsCache Instruction Instruction Instruction CancelStrategy HashSet LimitedBuffer ActiveRequestsCache Instruction AtomicReference ,cache: , "request1"
axon-server-se-master,io.axoniq.axonserver,Instruction,3,2,0,1,0,false,0 ,0 ,Instruction ,cancelable: boolean callback: AtomicReference<Runnable> ,cancel{ Params :  Returns : void} cancel{ Params : String,Instruction Returns : void} requestToBeCanceled{ Params : String,Instruction Returns : boolean} putTest{ Params :  Returns : void} isCancelable{ Params :  Returns : boolean} onCompletion{ Params : Runnable Returns : void} complete{ Params :  Returns : void} ,cancel requestToBeCanceled onCompletion ,,,,Completable ,AtomicReference<Runnable> ,,AtomicReference<Runnable> ,AtomicReference ,callback: 
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.api,FakeEvenProcessorInstance,1,1,0,0,0,false,0 ,EventProcessorInstance ,0 ,clientId: String running: boolean maxSegments: int segmentList: List<EventProcessorSegment> ,clientId{ Params :  Returns : String} isRunning{ Params :  Returns : boolean} maxCapacity{ Params :  Returns : int} claimedSegments{ Params :  Returns : Iterable<EventProcessorSegment>} ,clientId isRunning maxCapacity claimedSegments ,,,,EventProcessorInstance ,List<EventProcessorSegment> ,,List<EventProcessorSegment> ,,callback: 
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.api,FakeEventProcessor,1,1,0,0,0,false,0 ,EventProcessor ,0 ,id: EventProcessorId streaming: boolean mode: String instances: List<EventProcessorInstance> ,id{ Params :  Returns : EventProcessorId} isStreaming{ Params :  Returns : boolean} mode{ Params :  Returns : String} instances{ Params :  Returns : Iterable<EventProcessorInstance>} loadBalancingStrategyName{ Params :  Returns : String} ,id isStreaming mode instances loadBalancingStrategyName ,,,,EventProcessor ,List<EventProcessorInstance> ,,List<EventProcessorInstance> ,EventProcessorIdentifier ,callback: 
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.api,FakeEventProcessorSegment,1,1,0,0,0,false,0 ,EventProcessorSegment ,0 ,id: int onePartOf: int replaying: boolean caughtUp: boolean claimedBy: String ,id{ Params :  Returns : int} onePartOf{ Params :  Returns : int} claimedBy{ Params :  Returns : String} isCaughtUp{ Params :  Returns : boolean} isReplaying{ Params :  Returns : boolean} tokenPosition{ Params :  Returns : long} isInError{ Params :  Returns : boolean} error{ Params :  Returns : Optional<String>} ,id onePartOf claimedBy isCaughtUp isReplaying tokenPosition isInError error ,,,,EventProcessorSegment ,String ,,String ,,Optional: 
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.requestprocessor,DistributedEventProcessorTest,1,1,0,0,0,false,0 ,0 ,0 ,,isStreamingWithoutStreamingFieldSet{ Params :  Returns : void} isNotStreamingWithoutStreamingFieldSet{ Params :  Returns : void} isStreaming{ Params :  Returns : void} clientProcessor{ Params : String,String,boolean Returns : ClientProcessor} clientId{ Params :  Returns : String} context{ Params :  Returns : String} eventProcessorInfo{ Params :  Returns : EventProcessorInfo} belongsToComponent{ Params : String Returns : Boolean} belongsToContext{ Params : String Returns : boolean} ,clientId context eventProcessorInfo belongsToComponent belongsToContext ,,,,,,,,EventProcessorIdentifier DistributedEventProcessor EventProcessorIdentifier DistributedEventProcessor EventProcessorIdentifier DistributedEventProcessor ClientProcessor ,EventProcessorInfo: 
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.requestprocessor,LocalEventProcessorsAdminServiceTest,1,1,0,0,0,false,0 ,0 ,SuccessInstructionResult ,publisher: ProcessorEventPublisher instructionCache: InstructionCache strategyController: LoadBalanceStrategyRepository loadBalancingStrategy: LoadBalancingStrategy loadBalancingOperation: LoadBalancingOperation ,setup{ Params :  Returns : void} pauseTest{ Params :  Returns : void} startTest{ Params :  Returns : void} pauseUnknownProcessor{ Params :  Returns : void} startUnknownProcessor{ Params :  Returns : void} matchException{ Params : Throwable,ErrorCode Returns : boolean} splitTest{ Params :  Returns : void} splitTestNoMatching{ Params :  Returns : void} mergeTest{ Params :  Returns : void} mergeTest2{ Params :  Returns : void} segment{ Params : int,int Returns : SegmentStatus} testMoveSegment{ Params :  Returns : void} testMoveSegmentNoAvailableThreads{ Params :  Returns : void} testMoveSegmentWithTargetNotAvailable{ Params :  Returns : void} testMoveSegmentWithNoClientToRequestRelease{ Params :  Returns : void} testMoveSegmentWhenAlreadyOwned{ Params :  Returns : void} testGetByComponent{ Params :  Returns : void} loadBalance{ Params :  Returns : void} buildEventProcessorInfo{ Params : String,String Returns : EventProcessorInfo} clientId{ Params :  Returns : String} result{ Params :  Returns : Result} errorCode{ Params :  Returns : String} errorMessage{ Params :  Returns : String} ,clientId result errorCode errorMessage ,,,,,,,,InstructionCache SuccessInstructionResult SuccessInstructionResult SuccessInstructionResult SuccessInstructionResult SuccessInstructionResult FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService AuthenticatedUser FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor LocalEventProcessorsAdminService EventProcessorIdentifier AuthenticatedUser ,EventProcessorInfo: 
axon-server-se-master,io.axoniq.axonserver.admin.eventprocessor.requestprocessor,SuccessInstructionResult,3,2,0,1,0,false,0 ,0 ,SuccessInstructionResult ,clientId: String ,setup{ Params :  Returns : void} pauseTest{ Params :  Returns : void} startTest{ Params :  Returns : void} pauseUnknownProcessor{ Params :  Returns : void} startUnknownProcessor{ Params :  Returns : void} matchException{ Params : Throwable,ErrorCode Returns : boolean} splitTest{ Params :  Returns : void} splitTestNoMatching{ Params :  Returns : void} mergeTest{ Params :  Returns : void} mergeTest2{ Params :  Returns : void} segment{ Params : int,int Returns : SegmentStatus} testMoveSegment{ Params :  Returns : void} testMoveSegmentNoAvailableThreads{ Params :  Returns : void} testMoveSegmentWithTargetNotAvailable{ Params :  Returns : void} testMoveSegmentWithNoClientToRequestRelease{ Params :  Returns : void} testMoveSegmentWhenAlreadyOwned{ Params :  Returns : void} testGetByComponent{ Params :  Returns : void} loadBalance{ Params :  Returns : void} buildEventProcessorInfo{ Params : String,String Returns : EventProcessorInfo} clientId{ Params :  Returns : String} result{ Params :  Returns : Result} errorCode{ Params :  Returns : String} errorMessage{ Params :  Returns : String} ,clientId result errorCode errorMessage ,,,,InstructionResult ,String ,,String ,,EventProcessorInfo: 
axon-server-se-master,io.axoniq.axonserver.admin,ResultTest,1,1,0,0,0,false,0 ,0 ,0 ,,and{ Params :  Returns : void} ,,,,,,,,,,FAILURE: , FAILURE
axon-server-se-master,io.axoniq.axonserver.applicationevents,LocalEventPublisherTest,1,1,0,0,0,false,0 ,0 ,Listener ,testSubject: LocalEventPublisher listener: Listener ,publishEvent{ Params :  Returns : void} on{ Params : Object Returns : void} ,,,,,,Listener ,,Listener ,Object ,: , 1
axon-server-se-master,io.axoniq.axonserver.applicationevents,Listener,3,2,0,1,0,false,0 ,0 ,Listener ,,publishEvent{ Params :  Returns : void} on{ Params : Object Returns : void} ,,,,,,,,,,: , 1
axon-server-se-master,io.axoniq.axonserver,AxonServerAccessControllerTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: AxonServerAccessController messagingPlatformConfiguration: MessagingPlatformConfiguration ,setup{ Params :  Returns : void} allowed{ Params :  Returns : void} notAllowed{ Params :  Returns : void} ,,,,,,MessagingPlatformConfiguration ,,MessagingPlatformConfiguration ,AxonServerStandardAccessController AccessControlConfiguration ,testSubject: , "2"
axon-server-se-master,io.axoniq.axonserver,CancelOnTimeoutTest,1,1,0,0,0,false,0 ,0 ,0 ,canceled: List<String> clock: FakeClock requestTimestamp: AtomicLong testSubject: CancelOnTimeout<String> ,setUp{ Params :  Returns : void} cancel{ Params :  Returns : void} requestToBeCanceled{ Params :  Returns : void} ,,,,,,,,,ArrayList FakeClock AtomicLong CancelOnTimeout ,testSubject: , "request", "request"
axon-server-se-master,io.axoniq.axonserver.component.command,DefaultCommandTest,1,1,0,0,0,false,0 ,0 ,0 ,defaultCommand: DefaultCommand ,setUp{ Params :  Returns : void} belongsToComponent{ Params :  Returns : void} notBelongsToComponent{ Params :  Returns : void} printOn{ Params :  Returns : void} ,,,,,,DefaultCommand ,,DefaultCommand ,DirectCommandHandler ClientStreamIdentification DefaultCommand RegistrationEntry GsonMedia ,gsonMedia: 
axon-server-se-master,io.axoniq.axonserver.component,ComponentItemsTest,1,1,0,0,0,false,0 ,0 ,0 ,,testSomeMatch{ Params :  Returns : void} testNoMatch{ Params :  Returns : void} testAllMatch{ Params :  Returns : void} ,,,,,,,,,FakeComponentItem FakeComponentItem FakeComponentItem ComponentItems FakeComponentItem FakeComponentItem ComponentItems FakeComponentItem ComponentItems ,iterator: 
axon-server-se-master,io.axoniq.axonserver.component,FakeComponentItem,1,1,0,0,0,false,0 ,ComponentItem ,0 ,belongs: Boolean ,belongsToComponent{ Params : String Returns : Boolean} belongsToContext{ Params : String Returns : boolean} ,belongsToComponent belongsToContext ,,,,ComponentItem ,Boolean ,,Boolean ,,iterator: 
axon-server-se-master,io.axoniq.axonserver.component.instance,FakeClient,1,1,0,0,0,false,0 ,Client ,0 ,name: String context: String belongs: boolean ,id{ Params :  Returns : String} streamId{ Params :  Returns : String} context{ Params :  Returns : String} belongsToComponent{ Params : String Returns : Boolean} ,id streamId context belongsToComponent ,,,,Client ,boolean ,,boolean ,,iterator: 
axon-server-se-master,io.axoniq.axonserver.component.instance,GenericClientsTest,1,1,0,0,0,false,0 ,0 ,0 ,clientIdRegistry: ClientIdRegistry testSubject: GenericClients ,getHostName{ Params :  Returns : String} concurrentModification{ Params :  Returns : void} ,getHostName ,,,,,GenericClients ,,GenericClients ,GenericClients MessagingPlatformConfiguration SystemInfoProvider ClientTagsCache ApplicationConnected ApplicationConnected GsonMedia ,: , next
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing,FakeOperationFactory,1,1,0,0,0,false,0 ,OperationFactory ,0 ,configuration: Map<String, Collection<Integer>> ,move{ Params : Integer,TrackingEventProcessor,String,String Returns : LoadBalancingOperation} ,move ,,,,OperationFactory ,Map<String,Collection<Integer>> ,,Map<String,Collection<Integer>> ,,configuration: , targetInstance
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.operation,OperationSequenceTest,1,1,0,0,0,false,0 ,0 ,0 ,,perform{ Params :  Returns : void} ,,,,,,,,,LinkedList OperationSequence ,: , "A", "B", "C"
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing,SameProcessorTest,1,1,0,0,0,false,0 ,0 ,0 ,,testMatch{ Params :  Returns : void} testNotMatch{ Params :  Returns : void} ,,,,,,,,,EventProcessorIdentifier SameProcessor FakeClientProcessor EventProcessorIdentifier SameProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor ,testSubject: , clientProcessor3
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,DefaultInstancesRepositoryTest,1,1,0,0,0,false,0 ,0 ,0 ,,testRepositoryFiltersOutStoppedProcessorInstances{ Params :  Returns : void} ,,,,,,,,,DefaultInstancesRepository FakeClientProcessor FakeClientProcessor TrackingEventProcessor ,actual: 
axon-server-se-master,io.axoniq.axonserver.component.processor.balancing.strategy,ThreadNumberBalancingTest,1,1,0,0,0,false,0 ,0 ,0 ,segments: Map<String, Collection<Integer>> threadPoolSize: Map<String, Integer> eventProcessor: TrackingEventProcessor instances: ThreadNumberBalancing.InstancesRepo testSubject: ThreadNumberBalancing ,setUp{ Params :  Returns : void} testTwoSegmentForTwoInstances{ Params :  Returns : void} testFourSegmentForThreeInstances{ Params :  Returns : void} testNineSegmentForFiveInstances{ Params :  Returns : void} testSameThreadPoolSize{ Params :  Returns : void} testDifferentThreadPoolSize{ Params :  Returns : void} testTwoEqualsNodes{ Params :  Returns : void} of{ Params : Integer Returns : Collection<Integer>} ,,,,,,ThreadNumberBalancing ,,ThreadNumberBalancing ,HashMap HashMap TrackingEventProcessor Application ThreadNumberBalancing FakeOperationFactory ArrayList ,Arrays: , segments
axon-server-se-master,io.axoniq.axonserver.component.processor,ClientProcessorsByIdentifierTest,1,1,0,0,0,false,0 ,0 ,0 ,TOKEN_STORE_1: String TOKEN_STORE_2: String CLIENT_A: String CLIENT_B: String CLIENT_C: String CLIENT_D: String CLIENT_E: String CLIENT_F: String BELONGS_TO_CONTEXT: boolean DOES_NOT_BELONG_TO_CONTEXT: boolean BLUE_PROCESSOR: String GREEN_PROCESSOR: String RED_PROCESSOR: String BELONGS_TO_COMPONENT: boolean DOES_NOT_BELONG_TO_COMPONENT: boolean blue1: EventProcessorIdentifier green1: EventProcessorIdentifier red1: EventProcessorIdentifier blue2: EventProcessorIdentifier green2: EventProcessorIdentifier red2: EventProcessorIdentifier blue1Info: EventProcessorInfo green1Info: EventProcessorInfo red1Info: EventProcessorInfo blue2Info: EventProcessorInfo green2Info: EventProcessorInfo red2Info: EventProcessorInfo blueA: ClientProcessor greenA: ClientProcessor redA: ClientProcessor blueB: ClientProcessor greenB: ClientProcessor redB: ClientProcessor blueC: ClientProcessor greenC: ClientProcessor redC: ClientProcessor blueD: ClientProcessor greenD: ClientProcessor redD: ClientProcessor blueE: ClientProcessor greenE: ClientProcessor redE: ClientProcessor blueF: ClientProcessor greenF: ClientProcessor redF: ClientProcessor clientProcessors: ClientProcessors ,iterator{ Params :  Returns : void} ,,,,,,ClientProcessors ,,ClientProcessors ,EventProcessorIdentifier EventProcessorIdentifier EventProcessorIdentifier EventProcessorIdentifier EventProcessorIdentifier EventProcessorIdentifier FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor ClientProcessorsByIdentifier ClientProcessorsByIdentifier ClientProcessorsByIdentifier ClientProcessorsByIdentifier ClientProcessorsByIdentifier ClientProcessorsByIdentifier ,iterator6: 
axon-server-se-master,io.axoniq.axonserver.component.processor,ClientsByEventProcessorTest,1,1,0,0,0,false,0 ,0 ,0 ,TOKEN_STORE_1: String TOKEN_STORE_2: String CLIENT_A: String CLIENT_B: String CLIENT_C: String CLIENT_D: String CLIENT_E: String CLIENT_F: String BELONGS_TO_COMPONENT: boolean DOES_NOT_BELONG_TO_COMPONENT: boolean BELONGS_TO_CONTEXT: boolean DOES_NOT_BELONG_TO_CONTEXT: boolean BLUE_PROCESSOR: String GREEN_PROCESSOR: String RED_PROCESSOR: String blue1: EventProcessorIdentifier green1: EventProcessorIdentifier red1: EventProcessorIdentifier blue2: EventProcessorIdentifier green2: EventProcessorIdentifier red2: EventProcessorIdentifier blue1Info: EventProcessorInfo green1Info: EventProcessorInfo red1Info: EventProcessorInfo blue2Info: EventProcessorInfo green2Info: EventProcessorInfo red2Info: EventProcessorInfo blueA: ClientProcessor greenA: ClientProcessor redA: ClientProcessor blueB: ClientProcessor greenB: ClientProcessor redB: ClientProcessor blueC: ClientProcessor greenC: ClientProcessor redC: ClientProcessor blueD: ClientProcessor greenD: ClientProcessor redD: ClientProcessor blueE: ClientProcessor greenE: ClientProcessor redE: ClientProcessor blueF: ClientProcessor greenF: ClientProcessor redF: ClientProcessor clientProcessors: ClientProcessors ,testIterator{ Params :  Returns : void} ,,,,,,ClientProcessors ,,ClientProcessors ,EventProcessorIdentifier EventProcessorIdentifier EventProcessorIdentifier EventProcessorIdentifier EventProcessorIdentifier EventProcessorIdentifier FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor ClientsByEventProcessor ClientsByEventProcessor ClientsByEventProcessor ,iterator3: 
axon-server-se-master,io.axoniq.axonserver.component.processor,EventProcessorResultListenerTest,1,1,0,0,0,false,0 ,0 ,0 ,context: String refreshed: List<EventProcessorIdentifier> testSubject: EventProcessorResultListener ,setUp{ Params :  Returns : void} onSplit{ Params :  Returns : void} onMerge{ Params :  Returns : void} ,,,,,,EventProcessorResultListener ,,EventProcessorResultListener ,ArrayList EventProcessorResultListener EventProcessorIdentifier SplitSegmentsSucceeded EventProcessorIdentifier MergeSegmentsSucceeded EventProcessorIdentifier ,: , new EventProcessorIdentifier("ProcessorB", "", context)
axon-server-se-master,io.axoniq.axonserver.component.processor,EventProcessorServiceTest,1,1,0,0,0,false,0 ,0 ,0 ,context: String publishedInstructions: Map<String, List<PlatformOutboundInstruction>> resultSubscribers: Map<String, List<ResultSubscriber>> publishedInternalEvents: List<Object> testSubject: EventProcessorService instructionId: String ,setUp{ Params :  Returns : void} onMergeSegmentRequestExecuted{ Params :  Returns : void} onMergeSegmentRequestNotExecuted{ Params :  Returns : void} onSplitSegmentRequestExecuted{ Params :  Returns : void} onSplitSegmentRequestNotExecuted{ Params :  Returns : void} onReleaseSegmentRequest{ Params :  Returns : void} onRequestEventProcessorStatus{ Params :  Returns : void} onPauseSegmentRequestExecuted{ Params :  Returns : void} onStartSegmentRequestExecuted{ Params :  Returns : void} notifySuccessForInstruction{ Params : String Returns : void} notifyFailureForInstruction{ Params : String Returns : void} ,,,,,,String ,,String ,ConcurrentHashMap ConcurrentHashMap CopyOnWriteArrayList EventProcessorService CopyOnWriteArrayList CopyOnWriteArrayList MergeSegmentRequest MergeSegmentRequest SplitSegmentRequest SplitSegmentRequest ReleaseSegmentRequest ProcessorStatusRequest PauseEventProcessorRequest StartEventProcessorRequest ,resultSubscriber: , failure
axon-server-se-master,io.axoniq.axonserver.component.processor,EventProcessorStatusRefreshTest,1,1,0,0,0,false,0 ,0 ,0 ,timeout: Duration processorA: EventProcessorIdentifier processorB: EventProcessorIdentifier processorC: EventProcessorIdentifier clientProcessor1: ClientProcessor clientProcessor2: ClientProcessor clientProcessor3: ClientProcessor clientProcessor4: ClientProcessor clientProcessor5: ClientProcessor clientProcessors: List<ClientProcessor> publishedInternalEvents: List<Object> testSubject: EventProcessorStatusRefresh ,setUp{ Params :  Returns : void} runSuccessfully{ Params :  Returns : void} runSuccessfullyWithAnotherProcessorFromSameClient{ Params :  Returns : void} testFailureForMissingUpdate{ Params :  Returns : void} testFailureForMissingUpdate2{ Params :  Returns : void} updateEvent{ Params : String,String Returns : EventProcessorStatusUpdated} ,,,,,,EventProcessorStatusRefresh ,,EventProcessorStatusRefresh ,EventProcessorIdentifier EventProcessorIdentifier EventProcessorIdentifier FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor LinkedList EventProcessorStatusRefresh EventProcessorStatusUpdated ClientEventProcessorInfo ,EventProcessorInfo: 
axon-server-se-master,io.axoniq.axonserver.component.processor.listener,FakeClientProcessor,1,1,0,0,0,false,0 ,ClientProcessor ,0 ,clientId: String belongsToComponent: boolean context: String eventProcessorInfo: EventProcessorInfo ,clientId{ Params :  Returns : String} context{ Params :  Returns : String} eventProcessorInfo{ Params :  Returns : EventProcessorInfo} belongsToComponent{ Params : String Returns : Boolean} belongsToContext{ Params : String Returns : boolean} withAvailableThreads{ Params : int Returns : FakeClientProcessor} withActiveThreads{ Params : int Returns : FakeClientProcessor} ,clientId context eventProcessorInfo belongsToComponent belongsToContext ,,,,ClientProcessor ,EventProcessorInfo ,,EventProcessorInfo ,FakeClientProcessor FakeClientProcessor ,eventProcessorInfo: 
axon-server-se-master,io.axoniq.axonserver.component.processor.listener,ProcessorsInfoTargetTest,1,1,0,0,0,false,0 ,0 ,0 ,clock: FakeClock testSubject: ProcessorsInfoTarget ,onEventProcessorStatusChange{ Params :  Returns : void} ,,,,,,ProcessorsInfoTarget ,,ProcessorsInfoTarget ,FakeClock ProcessorsInfoTarget ClientEventProcessorInfo EventProcessorStatusUpdate ,: , clientProcessor
axon-server-se-master,io.axoniq.axonserver.component.processor,ProcessorEventPublisherTest,1,1,0,0,0,false,0 ,0 ,0 ,context: String clientId: String processor: String instructionId: String ,setUp{ Params :  Returns : void} pauseProcessorRequest{ Params :  Returns : void} startProcessorRequest{ Params :  Returns : void} releaseSegment{ Params :  Returns : void} splitSegment{ Params :  Returns : void} mergeSegment{ Params :  Returns : void} eventProcessorStatusReceived{ Params :  Returns : void} ,,,,,,String ,,String ,ArrayList ProcessorEventPublisher ArrayList ProcessorEventPublisher ArrayList ProcessorEventPublisher ArrayList ProcessorEventPublisher ArrayList ProcessorEventPublisher ArrayList AtomicReference ProcessorEventPublisher ClientComponent ,update: 
axon-server-se-master,io.axoniq.axonserver.component.processor,ProcessorNamesTest,1,1,0,0,0,false,0 ,0 ,0 ,,test{ Params :  Returns : void} ,,,,,,,,,ArrayList FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor FakeClientProcessor ProcessorNames ,iterator: 
axon-server-se-master,io.axoniq.axonserver.component.query,DefaultQueryTest,1,1,0,0,0,false,0 ,0 ,0 ,query: DefaultQuery ,setUp{ Params :  Returns : void} belongsToComponent{ Params :  Returns : void} notBelongsToMissingComponent{ Params :  Returns : void} notBelongsToComponentWithoutHandlers{ Params :  Returns : void} printOn{ Params :  Returns : void} ,,,,,,DefaultQuery ,,DefaultQuery ,QueryDefinition HashMap DirectQueryHandler DirectQueryHandler DefaultQuery GsonMedia ,gsonMedia: 
axon-server-se-master,io.axoniq.axonserver.component.version,BackwardsCompatibleVersionTest,1,1,0,0,0,false,0 ,0 ,0 ,version3: BackwardsCompatibleVersion version3_1: BackwardsCompatibleVersion version3_1_3: BackwardsCompatibleVersion version4: BackwardsCompatibleVersion version4_0: BackwardsCompatibleVersion version4_0_1: BackwardsCompatibleVersion version4_1: BackwardsCompatibleVersion version4_1_2: BackwardsCompatibleVersion version4_1_3: BackwardsCompatibleVersion version4_1_4: BackwardsCompatibleVersion version4_2: BackwardsCompatibleVersion version4_2_1: BackwardsCompatibleVersion version5: BackwardsCompatibleVersion version5_1: BackwardsCompatibleVersion version5_1_3: BackwardsCompatibleVersion ,testMatch{ Params :  Returns : void} testGreaterOrEqualThan{ Params :  Returns : void} testGreaterOrEqualThanWithPatch{ Params :  Returns : void} testTooManyVersionNumbersInVersionClass{ Params :  Returns : void} testTooFewVersionNumbersInVersionClass{ Params :  Returns : void} ,,,,,,BackwardsCompatibleVersion ,,BackwardsCompatibleVersion ,BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion BackwardsCompatibleVersion ,version4_1_3: , new BackwardsCompatibleVersion("")
axon-server-se-master,io.axoniq.axonserver.component.version,ClientVersionsCacheTest,1,1,0,0,0,false,0 ,0 ,0 ,,apply{ Params :  Returns : void} ,,,,,,,,,ClientVersionsCache ClientVersionUpdate ClientVersionUpdate ClientVersionUpdate ClientVersionUpdate ClientVersionUpdate ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ApplicationDisconnected ClientStreamIdentification ,testSubject: , new ClientStreamIdentification("E", "context2")
axon-server-se-master,io.axoniq.axonserver.config,AxonServerStandardConfigurationTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: AxonServerStandardConfiguration roleController: RoleController ,deleteUserRaisesEvent{ Params :  Returns : void} matches{ Params : Object Returns : boolean} updateUserRaisesEvent{ Params :  Returns : void} matches{ Params : Object Returns : boolean} ,matches matches ,,,,,RoleController ,,RoleController ,AxonServerStandardConfiguration AuthenticatedUser ArgumentMatcher User AuthenticatedUser ArgumentMatcher ,((UserEvents.UserUpdated) o): 
axon-server-se-master,io.axoniq.axonserver.config,ConfigurationPropertiesTest,1,1,0,0,0,false,0 ,0 ,0 ,messagingPlatformConfiguration: MessagingPlatformConfiguration embeddedDBProperties: EmbeddedDBProperties localEventStore: LocalEventStore osgiController: OsgiController gateway: Gateway ,testMaxMessageSize{ Params :  Returns : void} testCacheTtl{ Params :  Returns : void} testSegmentSize{ Params :  Returns : void} ,,,,,,Gateway ,,Gateway ,,embeddedDBProperties: 
axon-server-se-master,io.axoniq.axonserver.config,FileSystemMonitorTest,1,1,0,0,0,false,0 ,0 ,0 ,STORE_EVENTS_UNIX: String STORE_NAME: String STORE_EVENTS_OSX: String STORE_EVENTS_WIN: String testSubject: FileSystemMonitor diskSpaceHealthProperties: DiskSpaceHealthIndicatorProperties meterRegistry: MeterRegistry ,setUp{ Params :  Returns : void} whenFileSystemNotMountedThenStatusIsDown{ Params :  Returns : void} unixWhenSizeAboveThresholdThenStatusIsUp{ Params :  Returns : void} unixWhenSizeBelowThresholdThenStatusIsWarn{ Params :  Returns : void} osXWhenSizeAboveThresholdThenStatusIsUp{ Params :  Returns : void} osXWhenSizeBelowThresholdThenStatusIsWarn{ Params :  Returns : void} windowsWhenSizeAboveThresholdThenStatusIsUp{ Params :  Returns : void} windowsWhenSizeBelowThresholdThenStatusIsWarn{ Params :  Returns : void} ,,,,,,,,,FileSystemMonitor File File File File File File File ,: , builder
axon-server-se-master,io.axoniq.axonserver.config,LoginControllerTest,1,1,0,0,0,false,0 ,0 ,0 ,externalLoginsProvider: ExternalLoginsProvider versionInfoProvider: VersionInfoProvider testSubject: LoginController ,loginError{ Params :  Returns : void} loginNoAccount{ Params :  Returns : void} loginLogout{ Params :  Returns : void} login{ Params :  Returns : void} ,,,,,,LoginController ,,LoginController ,ExternalLogin VersionInfo LoginController ,externalLogins: 
axon-server-se-master,io.axoniq.axonserver.config,MessagingPlatformConfigurationTest,1,1,0,0,0,false,0 ,0 ,NameTest ,logger: Logger FIELD_NAME: String FIELD_HOSTNAME: String FIELD_DOMAIN: String FIELD_FQDN: String FIELD_INTERNAL_HOSTNAME: String FIELD_INTERNAL_DOMAIN: String FIELD_INTERNAL_FQDN: String NOT_SET: String DONT_TEST: String SET_TO_EMPTY: String TEST_AXONIQ_IO: String TEST: String AXONIQ_IO: String AXONSERVER_DEMO_IO: String AXONSERVER: String DEMO_IO: String AXONSERVER_AXONIQ_IO: String standardTests: NameTest emptyDomainTests: NameTest ,buildConfigWithHostname{ Params : String,String,String,String,String,String Returns : MessagingPlatformConfiguration} getHostName{ Params :  Returns : String} testEquals{ Params : String,String,String,String,String Returns : void} value{ Params : String Returns : String} testNames{ Params :  Returns : void} testNamesEmptyDomainAllowed{ Params :  Returns : void} testMaxMessageSizeTooLarge{ Params :  Returns : void} testMaxMessageSizeTooSmall{ Params :  Returns : void} ,getHostName ,value ,,,,,,,MessagingPlatformConfiguration SystemInfoProvider NameTest NameTest NameTest NameTest NameTest NameTest NameTest NameTest NameTest NameTest NameTest NameTest NameTest NameTest NameTest NameTest NameTest ,DataSize: , -1
axon-server-se-master,io.axoniq.axonserver.config,NameTest,3,2,0,1,0,false,0 ,0 ,NameTest ,testName: String testMessage: String name: String hostname: String domain: String systemHostname: String expectedName: String expectedHostname: String expectedDomain: String expectedFQDN: String internalHostname: String internalDomain: String expectedInternalHostname: String expectedInternalDomain: String expectedInternalFQDN: String ,buildConfigWithHostname{ Params : String,String,String,String,String,String Returns : MessagingPlatformConfiguration} getHostName{ Params :  Returns : String} testEquals{ Params : String,String,String,String,String Returns : void} value{ Params : String Returns : String} testNames{ Params :  Returns : void} testNamesEmptyDomainAllowed{ Params :  Returns : void} testMaxMessageSizeTooLarge{ Params :  Returns : void} testMaxMessageSizeTooSmall{ Params :  Returns : void} ,getHostName ,value ,,,,String ,,String ,,null
axon-server-se-master,io.axoniq.axonserver,FlowControlQueuesTest,1,1,0,0,0,false,0 ,0 ,QueueElement ,SOFT_LIMIT_QUEUE_SIZE: int testSubject: FlowControlQueues<QueueElement> configuredErrorCode: ErrorCode ,setup{ Params :  Returns : void} take{ Params :  Returns : void} takeHigestPrio{ Params :  Returns : void} samePrioMaintainOrder{ Params :  Returns : void} move{ Params :  Returns : void} move2{ Params :  Returns : void} queueSoftLimits{ Params :  Returns : void} queueHardLimits{ Params :  Returns : void} getPrioKey{ Params :  Returns : String} ,,,,,,ErrorCode ,,ErrorCode ,FlowControlQueues QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement QueueElement ,exception: 
axon-server-se-master,io.axoniq.axonserver,QueueElement,3,1,0,1,0,false,0 ,0 ,QueueElement ,prioKey: String value: String ,setup{ Params :  Returns : void} take{ Params :  Returns : void} takeHigestPrio{ Params :  Returns : void} samePrioMaintainOrder{ Params :  Returns : void} move{ Params :  Returns : void} move2{ Params :  Returns : void} queueSoftLimits{ Params :  Returns : void} queueHardLimits{ Params :  Returns : void} getPrioKey{ Params :  Returns : String} ,,,,,,String ,,String ,,exception: 
axon-server-se-master,io.axoniq.axonserver.grpc,AuthenticationInterceptorTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: AuthenticationInterceptor accessController: AxonServerAccessController handler: ServerCallHandler<String, String> call: ServerCall<String, String> marshaller: MethodDescriptor.Marshaller<String> path1: MethodDescriptor<String, String> path2: MethodDescriptor<String, String> status: ArgumentCaptor<Status> trailers: ArgumentCaptor<Metadata> metadata: Metadata ,setup{ Params :  Returns : void} noToken{ Params :  Returns : void} invalidToken{ Params :  Returns : void} validToken{ Params :  Returns : void} ,,,,,,Metadata ,,Metadata ,Metadata TokenAuthentication AuthenticationInterceptor ,: 
axon-server-se-master,io.axoniq.axonserver.grpc,CommandServiceTest,1,1,0,0,0,false,0 ,0 ,0 ,clientId: String testSubject: CommandService commandQueue: FlowControlQueues<WrappedCommand> eventPublisher: ApplicationEventPublisher commandDispatcher: CommandDispatcher ,setUp{ Params :  Returns : void} flowControl{ Params :  Returns : void} subscribe{ Params :  Returns : void} unsupportedCommandInstruction{ Params :  Returns : void} unsupportedCommandInstructionWithoutInstructionId{ Params :  Returns : void} unsubscribe{ Params :  Returns : void} unsubscribeAfterSubscribe{ Params :  Returns : void} cancelAfterSubscribe{ Params :  Returns : void} cancelBeforeSubscribe{ Params :  Returns : void} close{ Params :  Returns : void} dispatch{ Params :  Returns : void} commandHandlerDisconnected{ Params :  Returns : void} disconnectClientStream{ Params :  Returns : void} ,,,,,,CommandDispatcher ,,CommandDispatcher ,FlowControlQueues MessagingPlatformConfiguration TestSystemInfoProvider DefaultTopology CommandService DefaultClientIdRegistry DefaultInstructionAckSource SerializedCommandProviderInbound FakeStreamObserver ClientStreamIdentification WrappedCommand SerializedCommand FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver RuntimeException FakeStreamObserver RuntimeException FakeStreamObserver SerializedCommandResponse FakeStreamObserver FakeStreamObserver RuntimeException FakeStreamObserver ,responseObserver: 
axon-server-se-master,io.axoniq.axonserver.grpc,DefaultClientIdRegistryTest,1,1,0,0,0,false,0 ,0 ,0 ,CONTEXT: String testSubject: DefaultClientIdRegistry ,streamIdFor{ Params :  Returns : void} unregister{ Params :  Returns : void} streamIdsFor{ Params :  Returns : void} printOn{ Params :  Returns : void} ,,,,,,DefaultClientIdRegistry ,,DefaultClientIdRegistry ,DefaultClientIdRegistry ClientContext ClientContext ClientContext ClientContext ClientContext ClientContext ClientContext ClientContext ClientContext ClientContext ClientContext GsonMedia ,System.out: , media
axon-server-se-master,io.axoniq.axonserver.grpc,EventStoreServiceTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: EventStoreService authentication: Authentication allowedContext: Set<String> ,setUp{ Params :  Returns : void} accessController{ Params :  Returns : AxonServerAccessController} allowed{ Params : String,String,Authentication Returns : boolean} authenticate{ Params : String Returns : Authentication} eventDispatcher{ Params :  Returns : EventDispatcher} serializedEvent{ Params :  Returns : SerializedEvent} appendEvent{ Params :  Returns : void} appendSnapshot{ Params :  Returns : void} listAggregateEvents{ Params :  Returns : void} listEvents{ Params :  Returns : void} getFirstToken{ Params :  Returns : void} getLastToken{ Params :  Returns : void} getTokenAt{ Params :  Returns : void} readHighestSequenceNr{ Params :  Returns : void} queryEvents{ Params :  Returns : void} queryEventsUnauthorizedContext{ Params :  Returns : void} queryEventsNoAccessControl{ Params :  Returns : void} listAggregateSnapshots{ Params :  Returns : void} ,allowed authenticate ,,,,,Set<String> ,,Set<String> ,HashSet EventStoreService AxonServerAccessController SerializedEventWithToken SerializedEvent FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver RuntimeException FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver ,responseObserver: 
axon-server-se-master,io.axoniq.axonserver.grpc,EventStoreTransformationGrpcControllerTest,1,1,0,0,0,false,0 ,0 ,CompletableFutureStreamObserver ,CONTEXT: String AUTHENTICATION: Authentication mockedService: EventStoreTransformationService testSubject: EventStoreTransformationGrpcController ,testStartTransformation{ Params :  Returns : void} testDeleteEvent{ Params :  Returns : void} testReplaceEvent{ Params :  Returns : void} testCancelTransformation{ Params :  Returns : void} testApplyTransformation{ Params :  Returns : void} testCompact{ Params :  Returns : void} onNext{ Params : T Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} isReady{ Params :  Returns : boolean} setOnReadyHandler{ Params : Runnable Returns : void} disableAutoInboundFlowControl{ Params :  Returns : void} request{ Params : int Returns : void} setMessageCompression{ Params : boolean Returns : void} ,onNext onError onCompleted isReady setOnReadyHandler disableAutoInboundFlowControl request setMessageCompression ,,,,,EventStoreTransformationGrpcController ,,EventStoreTransformationGrpcController ,EventStoreTransformationGrpcController CompletableFuture CompletableFutureStreamObserver CompletableFuture CompletableFutureStreamObserver CompletableFuture CompletableFutureStreamObserver CompletableFuture CompletableFutureStreamObserver CompletableFuture CompletableFutureStreamObserver CompletableFuture CompletableFutureStreamObserver ,CompactionRequest: 
axon-server-se-master,io.axoniq.axonserver.grpc,CompletableFutureStreamObserver,3,1,0,1,0,false,0 ,0 ,CompletableFutureStreamObserver ,future: CompletableFuture<T> ,testStartTransformation{ Params :  Returns : void} testDeleteEvent{ Params :  Returns : void} testReplaceEvent{ Params :  Returns : void} testCancelTransformation{ Params :  Returns : void} testApplyTransformation{ Params :  Returns : void} testCompact{ Params :  Returns : void} onNext{ Params : T Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} isReady{ Params :  Returns : boolean} setOnReadyHandler{ Params : Runnable Returns : void} disableAutoInboundFlowControl{ Params :  Returns : void} request{ Params : int Returns : void} setMessageCompression{ Params : boolean Returns : void} ,onNext onError onCompleted isReady setOnReadyHandler disableAutoInboundFlowControl request setMessageCompression ,,,,,CompletableFuture<T> ,,CompletableFuture<T> ,,future: , null
axon-server-se-master,io.axoniq.axonserver.grpc,FlowControlledStreamObserverTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: FlowControlledStreamObserver<String> errorReference: AtomicReference<Throwable> delegate: FakeStreamObserver<String> ,setUp{ Params :  Returns : void} testNoMorePermits{ Params :  Returns : void} ,,,,,,FakeStreamObserver<String> ,,FakeStreamObserver<String> ,AtomicReference FakeStreamObserver FlowControlledStreamObserver ,delegate: 
axon-server-se-master,io.axoniq.axonserver.grpc,GatewayTest,1,1,0,0,0,false,0 ,0 ,DummyPlatformService ,testSubject: Gateway accessController: AxonServerAccessController routingConfiguration: MessagingPlatformConfiguration licenseAccessController: LicenseAccessController ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} stopWithCallback{ Params :  Returns : void} start{ Params :  Returns : void} startWithSslIncompleteConfiguration{ Params :  Returns : void} startWithSsl{ Params :  Returns : void} testAccessControlInterceptor{ Params :  Returns : void} allowed{ Params : String,String,Authentication Returns : boolean} authenticate{ Params : String Returns : Authentication} testSmallMaxMessageSize{ Params :  Returns : void} testLargeMaxMessageSize{ Params :  Returns : void} generateString{ Params : int Returns : String} getClientInterceptor{ Params : Metadata.Key<String>,String Returns : ClientInterceptor} interceptCall{ Params : MethodDescriptor<ReqT,RespT>,CallOptions,Channel Returns : ClientCall<ReqT,RespT>} start{ Params : Listener<RespT>,Metadata Returns : void} getPlatformServer{ Params : ClientIdentification,StreamObserver<PlatformInfo> Returns : void} ,allowed authenticate interceptCall start getPlatformServer ,,,,,LicenseAccessController ,,LicenseAccessController ,MessagingPlatformConfiguration AccessControlConfiguration Gateway AtomicBoolean Gateway SslConfiguration Gateway SslConfiguration Gateway AxonServerAccessController TokenAuthentication DummyPlatformService Gateway DummyPlatformService Gateway DummyPlatformService Gateway StringBuilder ClientInterceptor SimpleForwardingClientCall DefaultContextProvider ,super: , responseListener, headers
axon-server-se-master,io.axoniq.axonserver.grpc,DummyPlatformService,3,2,0,1,0,false,0 ,0 ,DummyPlatformService ,contextProvider: ContextProvider ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} stopWithCallback{ Params :  Returns : void} start{ Params :  Returns : void} startWithSslIncompleteConfiguration{ Params :  Returns : void} startWithSsl{ Params :  Returns : void} testAccessControlInterceptor{ Params :  Returns : void} allowed{ Params : String,String,Authentication Returns : boolean} authenticate{ Params : String Returns : Authentication} testSmallMaxMessageSize{ Params :  Returns : void} testLargeMaxMessageSize{ Params :  Returns : void} generateString{ Params : int Returns : String} getClientInterceptor{ Params : Metadata.Key<String>,String Returns : ClientInterceptor} interceptCall{ Params : MethodDescriptor<ReqT,RespT>,CallOptions,Channel Returns : ClientCall<ReqT,RespT>} start{ Params : Listener<RespT>,Metadata Returns : void} getPlatformServer{ Params : ClientIdentification,StreamObserver<PlatformInfo> Returns : void} ,allowed authenticate interceptCall start getPlatformServer ,,,,AxonServerClientService ,ContextProvider ,,ContextProvider ,DefaultContextProvider ,responseObserver: 
axon-server-se-master,io.axoniq.axonserver.grpc,GrpcBufferingInterceptorTest,1,1,0,0,0,false,0 ,0 ,StubMarshaller ,mockCallOptions: CallOptions mockChannel: Channel mockResponseListener: ClientCall.Listener<Object> mockCall: ClientCall<Object, Object> mockServerCall: ServerCall<Object, Object> mockMetaData: Metadata mockServerCallHandler: ServerCallHandler<Object, Object> mockListener: ServerCall.Listener<Object> ,setUp{ Params :  Returns : void} testInterceptClientCall_BiDiStreaming{ Params :  Returns : void} testInterceptClientCall_ServerStreaming{ Params :  Returns : void} testInterceptClientCall_ClientStreaming{ Params :  Returns : void} testInterceptClientCall_NoStreaming{ Params :  Returns : void} testInterceptClientCall_ZeroBuffer{ Params :  Returns : void} testInterceptServerCall_BiDiStreaming{ Params :  Returns : void} testInterceptServerCall_ClientStreaming{ Params :  Returns : void} testInterceptServerCall_ServerStreaming{ Params :  Returns : void} testInterceptServerCall_NoStreaming{ Params :  Returns : void} testInterceptServerCall_ZeroBuffer{ Params :  Returns : void} buildMethod{ Params : MethodDescriptor.MethodType Returns : MethodDescriptor<Object,Object>} stream{ Params : Object Returns : InputStream} parse{ Params : InputStream Returns : Object} ,stream parse ,,,,,ServerCall.Listener<Object> ,,ServerCall.Listener<Object> ,GrpcBufferingInterceptor GrpcBufferingInterceptor GrpcBufferingInterceptor GrpcBufferingInterceptor GrpcBufferingInterceptor GrpcBufferingInterceptor GrpcBufferingInterceptor GrpcBufferingInterceptor GrpcBufferingInterceptor GrpcBufferingInterceptor StubMarshaller StubMarshaller ,MethodDescriptor: 
axon-server-se-master,io.axoniq.axonserver.grpc,StubMarshaller,3,2,0,1,0,false,0 ,0 ,StubMarshaller ,,setUp{ Params :  Returns : void} testInterceptClientCall_BiDiStreaming{ Params :  Returns : void} testInterceptClientCall_ServerStreaming{ Params :  Returns : void} testInterceptClientCall_ClientStreaming{ Params :  Returns : void} testInterceptClientCall_NoStreaming{ Params :  Returns : void} testInterceptClientCall_ZeroBuffer{ Params :  Returns : void} testInterceptServerCall_BiDiStreaming{ Params :  Returns : void} testInterceptServerCall_ClientStreaming{ Params :  Returns : void} testInterceptServerCall_ServerStreaming{ Params :  Returns : void} testInterceptServerCall_NoStreaming{ Params :  Returns : void} testInterceptServerCall_ZeroBuffer{ Params :  Returns : void} buildMethod{ Params : MethodDescriptor.MethodType Returns : MethodDescriptor<Object,Object>} stream{ Params : Object Returns : InputStream} parse{ Params : InputStream Returns : Object} ,stream parse ,,,,Marshaller ,,,,,MethodDescriptor: 
axon-server-se-master,io.axoniq.axonserver.grpc,GrpcFlowControlledDispatcherListenerTest,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger testSubject: GrpcFlowControlledDispatcherListener<String, String> ,setUp{ Params :  Returns : void} send{ Params : String Returns : boolean} getLogger{ Params :  Returns : Logger} waiting{ Params :  Returns : void} testExceptionOccurredSendingNextInstruction{ Params :  Returns : void} send{ Params : String Returns : boolean} getLogger{ Params :  Returns : Logger} ,send getLogger send getLogger ,,,,,GrpcFlowControlledDispatcherListener<String,String> ,,GrpcFlowControlledDispatcherListener<String,String> ,FlowControlQueues GrpcFlowControlledDispatcherListener FakeStreamObserver FlowControlQueues CountDownLatch GrpcFlowControlledDispatcherListener FakeStreamObserver RuntimeException ,countDownLatch: 
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,ApplicationInactivityListenerTest,1,1,0,0,0,false,0 ,0 ,0 ,context: String component: String client: ClientContext commandStream: String queryStream: String platformStream: String ,testCloseStreams{ Params :  Returns : void} testCloseCommandStream{ Params :  Returns : void} testCloseNoStream{ Params :  Returns : void} ,,,,,,String ,,String ,ClientContext DefaultClientIdRegistry AtomicBoolean AtomicBoolean HashMap ApplicationInactivityListener ClientStreamIdentification ApplicationInactivityTimeout DefaultClientIdRegistry AtomicBoolean AtomicBoolean HashMap ApplicationInactivityListener ClientStreamIdentification ApplicationInactivityTimeout DefaultClientIdRegistry AtomicBoolean AtomicBoolean HashMap ApplicationInactivityListener ClientStreamIdentification ApplicationInactivityTimeout ,queryStreamClosed: 
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,HeartbeatMonitorTest,1,1,0,0,0,false,0 ,0 ,0 ,client4_2_1: ClientStreamIdentification client4_2_1Connected: ApplicationConnected client4_2_1Disconnected: ApplicationDisconnected client4_2: ClientStreamIdentification client4_2Connected: ApplicationConnected client4_2Disconnected: ApplicationDisconnected heartbeat: PlatformInboundInstruction ,testConnectionActive{ Params :  Returns : void} testConnectionNotActive{ Params :  Returns : void} testHeartbeatNotSupportedByClient{ Params :  Returns : void} ,,,,,,PlatformInboundInstruction ,,PlatformInboundInstruction ,ClientStreamIdentification ApplicationConnected ApplicationDisconnected ClientStreamIdentification ApplicationConnected ApplicationDisconnected FakeClock AtomicReference LinkedList HeartbeatMonitor FakeClock AtomicReference LinkedList HeartbeatMonitor FakeClock AtomicReference LinkedList HeartbeatMonitor ,publishedEvents: 
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,HeartbeatProvidedClientsTest,1,1,0,0,0,false,0 ,0 ,0 ,,iterator{ Params :  Returns : void} ,,,,,,,,,ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification HashMap HeartbeatProvidedClients BackwardsCompatibleVersion ,iterator: 
axon-server-se-master,io.axoniq.axonserver.grpc.heartbeat,HeartbeatPublisherTest,1,1,0,0,0,false,0 ,0 ,0 ,,publish{ Params :  Returns : void} ,,,,,,,,,ClientStreamIdentification ClientStreamIdentification ConcurrentHashMap HeartbeatPublisher ,receivedHeartbeat: , "B"
axon-server-se-master,io.axoniq.axonserver.grpc.istruction.result,InstructionResultSourceFactoryTest,1,1,0,0,0,false,0 ,0 ,0 ,instructionResultListeners: List<Consumer<InstructionResult>> testSubject: InstructionResultSourceFactory ,testOnSuccess{ Params :  Returns : void} testOnFailure{ Params :  Returns : void} testOnTimeout{ Params :  Returns : void} notifyInstructionResultReceived{ Params : InstructionResult Returns : void} ,,,,,,InstructionResultSourceFactory ,,InstructionResultSourceFactory ,ArrayList InstructionResultSourceFactory AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean ,listener: , instructionResult
axon-server-se-master,io.axoniq.axonserver.grpc,LargeAggregateITCase,1,1,0,0,0,false,0 ,0 ,0 ,configuration: AxonServerConfiguration connectionManager: AxonServerConnectionManager axonServerEventStore: EventStore ,testLargeAggregate{ Params :  Returns : void} ,,,,,,EventStore ,,EventStore ,GenericDomainEventMessage RuntimeException ,: , 100_000, i
axon-server-se-master,io.axoniq.axonserver.grpc,PlatformServiceTest,1,1,0,0,0,false,0 ,0 ,0 ,context: String platformService: PlatformService clientIdRegistry: ClientIdRegistry instructionId: String ,setUp{ Params :  Returns : void} getPlatformServer{ Params :  Returns : void} onNext{ Params : PlatformInfo Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} openStream{ Params :  Returns : void} onNext{ Params : PlatformOutboundInstruction Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} unsupportedInstruction{ Params :  Returns : void} unsupportedInstructionWithoutInstructionId{ Params :  Returns : void} onInboundInstruction{ Params :  Returns : void} onApplicationDisconnected{ Params :  Returns : void} testSendInstruction{ Params :  Returns : void} testSendInstructionToInvalidClientIdentifier{ Params :  Returns : void} disconnectClientStream{ Params :  Returns : void} ,onNext onError onCompleted onNext onError onCompleted ,,,,,String ,,String ,DefaultClientIdRegistry MessagingPlatformConfiguration TestSystemInfoProvider PlatformService DefaultTopology DefaultInstructionAckSource StreamObserver StreamObserver FakeStreamObserver FakeStreamObserver AtomicBoolean FakeStreamObserver FakeStreamObserver ApplicationDisconnected FakeStreamObserver FakeStreamObserver FakeStreamObserver ClientStreamIdentification ApplicationInactivityTimeout ClientContext ,responseObserver: 
axon-server-se-master,io.axoniq.axonserver.grpc,QueryServiceTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: QueryService queryDispatcher: QueryDispatcher queryQueue: FlowControlQueues<QueryInstruction> eventPublisher: ApplicationEventPublisher clientId: String ,setUp{ Params :  Returns : void} flowControl{ Params :  Returns : void} subscribe{ Params :  Returns : void} unsupportedQueryInstruction{ Params :  Returns : void} unsupportedQueryInstructionWithoutInstructionId{ Params :  Returns : void} unsubscribe{ Params :  Returns : void} unsubscribeAfterSubscribe{ Params :  Returns : void} cancelAfterSubscribe{ Params :  Returns : void} cancelBeforeSubscribe{ Params :  Returns : void} close{ Params :  Returns : void} dispatch{ Params :  Returns : void} queryHandlerDisconnected{ Params :  Returns : void} disconnectClientStream{ Params :  Returns : void} ,,,,,,String ,,String ,FlowControlQueues MessagingPlatformConfiguration TestSystemInfoProvider DefaultTopology QueryService DefaultClientIdRegistry NoOpSubscriptionQueryInterceptors DefaultInstructionAckSource FakeStreamObserver ClientStreamIdentification Query SerializedQuery Query SerializedQuery FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver RuntimeException FakeStreamObserver RuntimeException FakeStreamObserver FakeStreamObserver FakeStreamObserver RuntimeException FakeStreamObserver ,responseObserver: 
axon-server-se-master,io.axoniq.axonserver.grpc,SerializedCommandProviderInboundTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: SerializedCommandProviderInbound ,testSerializeDeserializeConfirmation{ Params :  Returns : void} testSerializeDeserializeCommand{ Params :  Returns : void} ,,,,,,SerializedCommandProviderInbound ,,SerializedCommandProviderInbound ,SerializedCommandProviderInbound ByteArrayOutputStream SerializedCommand SerializedCommandProviderInbound ByteArrayOutputStream ,parsed: 
axon-server-se-master,io.axoniq.axonserver.grpc,SerializedCommandResponseTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: SerializedCommandResponse ,testSerializeDeserializeConfirmation{ Params :  Returns : void} ,,,,,,SerializedCommandResponse ,,SerializedCommandResponse ,SerializedCommandResponse ByteArrayOutputStream ,parsed: 
axon-server-se-master,io.axoniq.axonserver.grpc,SubscriptionQueryITCase,1,1,0,0,0,false,0 ,0 ,0 ,configuration: AxonServerConfiguration connectionManager: AxonServerConnectionManager queryBus: SimpleQueryBus axonServerQueryBus: QueryBus initialResult: List<String> updates: List<String> ,testMemoryLeak{ Params :  Returns : void} invokeQuery{ Params :  Returns : Object} ,,,,,,List<String> ,,List<String> ,ArrayList ArrayList ReferenceQueue PhantomReference GenericSubscriptionQueryMessage ,message: 
axon-server-se-master,io.axoniq.axonserver.grpc,SubscriptionQueryRequestTargetTest,1,1,0,0,0,false,0 ,0 ,TestSubscriptionQueryInterceptors ,testSubject: SubscriptionQueryRequestTarget responseStreamObserver: FakeStreamObserver<SubscriptionQueryResponse> interceptors: TestSubscriptionQueryInterceptors ,setUp{ Params :  Returns : void} testInterceptorsOnSubscribe{ Params :  Returns : void} interceptorOnSubscribeRejects{ Params :  Returns : void} interceptorOnSubscribeFails{ Params :  Returns : void} subscriptionQueryRequest{ Params : SubscriptionQueryRequest,ExecutionContext Returns : SubscriptionQueryRequest} subscriptionQueryResponse{ Params : SubscriptionQueryResponse,ExecutionContext Returns : SubscriptionQueryResponse} onErrorTest{ Params :  Returns : void} ,subscriptionQueryRequest subscriptionQueryResponse ,,,,,TestSubscriptionQueryInterceptors ,,TestSubscriptionQueryInterceptors ,FakeStreamObserver TestSubscriptionQueryInterceptors SubscriptionQueryRequestTarget MessagingPlatformException MessagingPlatformException LinkedList SubscriptionQueryRequestTarget RuntimeException ,: , subscriptionCancelled instanceof SubscriptionQueryEvents.SubscriptionQueryCanceled
axon-server-se-master,io.axoniq.axonserver.grpc,TestSubscriptionQueryInterceptors,3,2,0,1,0,false,0 ,0 ,TestSubscriptionQueryInterceptors ,rejectRequest: boolean failRequest: boolean subscriptionQueryRequestCount: int subscriptionQueryResponseCount: int lastUUID: UUID ,setUp{ Params :  Returns : void} testInterceptorsOnSubscribe{ Params :  Returns : void} interceptorOnSubscribeRejects{ Params :  Returns : void} interceptorOnSubscribeFails{ Params :  Returns : void} subscriptionQueryRequest{ Params : SubscriptionQueryRequest,ExecutionContext Returns : SubscriptionQueryRequest} subscriptionQueryResponse{ Params : SubscriptionQueryResponse,ExecutionContext Returns : SubscriptionQueryResponse} onErrorTest{ Params :  Returns : void} ,subscriptionQueryRequest subscriptionQueryResponse ,,,,SubscriptionQueryInterceptors ,,,,MessagingPlatformException MessagingPlatformException ,executionContext: , "RequestId"
axon-server-se-master,io.axoniq.axonserver.interceptor,DefaultCommandInterceptorsTest,1,1,0,0,0,false,0 ,0 ,0 ,PLUGIN_KEY: PluginKey osgiController: TestPluginServiceProvider pluginContextFilter: PluginContextFilter meterFactory: MeterFactory testSubject: DefaultCommandInterceptors ,commandRequest{ Params :  Returns : void} serializedCommand{ Params : String Returns : SerializedCommand} commandResponse{ Params :  Returns : void} serializedCommandResponse{ Params : String Returns : SerializedCommandResponse} metaDataValue{ Params : String Returns : MetaDataValue} ,,,,,,DefaultCommandInterceptors ,,DefaultCommandInterceptors ,PluginKey TestPluginServiceProvider PluginContextFilter MeterFactory SimpleMeterRegistry DefaultMetricCollector DefaultCommandInterceptors ServiceWithInfo TestExecutionContext PluginEnabledEvent TestExecutionContext SerializedCommand ServiceWithInfo TestExecutionContext PluginEnabledEvent TestExecutionContext SerializedCommandResponse ,MetaDataValue: 
axon-server-se-master,io.axoniq.axonserver.interceptor,DefaultEventInterceptorsTest,1,1,0,0,0,false,0 ,0 ,0 ,PLUGIN_KEY: PluginKey pluginServiceProvider: TestPluginServiceProvider pluginContextFilter: PluginContextFilter meterFactory: MeterFactory testSubject: DefaultEventInterceptors ,appendEvent{ Params :  Returns : void} eventsPreCommit{ Params :  Returns : void} eventsPreCommitTriesToUpdateEventList{ Params :  Returns : void} eventsPostCommit{ Params :  Returns : void} eventsPostCommitWithException{ Params :  Returns : void} snapshotPostCommitWithException{ Params :  Returns : void} snapshotPostCommit{ Params :  Returns : void} appendSnapshot{ Params :  Returns : void} noReadInterceptors{ Params :  Returns : void} noReadInterceptorsWithSnapshotRead{ Params :  Returns : void} readSnapshot{ Params :  Returns : void} readEvent{ Params :  Returns : void} checkOrdering{ Params :  Returns : void} readEvent{ Params : Event,ExecutionContext Returns : Event} order{ Params :  Returns : int} readEvent{ Params : Event,ExecutionContext Returns : Event} order{ Params :  Returns : int} noEventReadInterceptors{ Params :  Returns : void} metaDataValue{ Params : String Returns : MetaDataValue} serializedObject{ Params : String,String,String Returns : SerializedObject} event{ Params : String,int Returns : Event} event{ Params : String,int,boolean Returns : Event} ,readEvent order readEvent order ,,,,,DefaultEventInterceptors ,,DefaultEventInterceptors ,PluginKey TestPluginServiceProvider PluginContextFilter MeterFactory SimpleMeterRegistry DefaultMetricCollector DefaultEventInterceptors ServiceWithInfo TestExecutionContext PluginEnabledEvent TestExecutionContext AtomicInteger ServiceWithInfo TestExecutionContext PluginEnabledEvent AtomicInteger ServiceWithInfo TestExecutionContext PluginEnabledEvent AtomicInteger ServiceWithInfo TestExecutionContext PluginEnabledEvent ServiceWithInfo RuntimeException TestExecutionContext PluginEnabledEvent ServiceWithInfo RuntimeException TestExecutionContext PluginEnabledEvent AtomicInteger ServiceWithInfo TestExecutionContext PluginEnabledEvent ServiceWithInfo TestExecutionContext PluginEnabledEvent TestExecutionContext ServiceWithInfo PluginEnabledEvent ServiceWithInfo PluginEnabledEvent ServiceWithInfo TestExecutionContext PluginEnabledEvent ServiceWithInfo TestExecutionContext PluginEnabledEvent LinkedList ServiceWithInfo ReadEventInterceptor ServiceWithInfo ReadEventInterceptor PluginEnabledEvent TestExecutionContext PluginEnabledEvent ServiceWithInfo ServiceWithInfo ,: , "type2", "1.0", "sampleData"
axon-server-se-master,io.axoniq.axonserver.interceptor,DefaultQueryInterceptorsTest,1,1,0,0,0,false,0 ,0 ,0 ,PLUGIN_KEY: PluginKey osgiController: TestPluginServiceProvider pluginContextFilter: PluginContextFilter meterFactory: MeterFactory testSubject: DefaultQueryInterceptors ,queryRequest{ Params :  Returns : void} queryResponse{ Params :  Returns : void} serializedQuery{ Params : String Returns : SerializedQuery} queryResponse{ Params : String Returns : QueryResponse} metaDataValue{ Params : String Returns : MetaDataValue} ,,,,,,DefaultQueryInterceptors ,,DefaultQueryInterceptors ,PluginKey TestPluginServiceProvider PluginContextFilter MeterFactory SimpleMeterRegistry DefaultMetricCollector DefaultQueryInterceptors ServiceWithInfo TestExecutionContext PluginEnabledEvent TestExecutionContext ServiceWithInfo TestExecutionContext PluginEnabledEvent TestExecutionContext SerializedQuery ,MetaDataValue: 
axon-server-se-master,io.axoniq.axonserver.interceptor,DefaultSubscriptionQueryInterceptorsTest,1,1,0,0,0,false,0 ,0 ,0 ,PLUGIN_KEY: PluginKey osgiController: TestPluginServiceProvider pluginContextFilter: PluginContextFilter meterFactory: MeterFactory testSubject: DefaultSubscriptionQueryInterceptors ,queryRequest{ Params :  Returns : void} queryResponse{ Params :  Returns : void} ,,,,,,DefaultSubscriptionQueryInterceptors ,,DefaultSubscriptionQueryInterceptors ,PluginKey TestPluginServiceProvider PluginContextFilter MeterFactory SimpleMeterRegistry DefaultMetricCollector DefaultSubscriptionQueryInterceptors ServiceWithInfo TestExecutionContext PluginEnabledEvent TestExecutionContext ServiceWithInfo TestExecutionContext PluginEnabledEvent TestExecutionContext ,intercepted: 
axon-server-se-master,io.axoniq.axonserver.interceptor,NoOpCommandInterceptors,1,1,0,0,0,false,0 ,CommandInterceptors ,0 ,,commandRequest{ Params : SerializedCommand,ExecutionContext Returns : SerializedCommand} commandResponse{ Params : SerializedCommandResponse,ExecutionContext Returns : SerializedCommandResponse} ,commandRequest commandResponse ,,,,CommandInterceptors ,,,,,intercepted: 
axon-server-se-master,io.axoniq.axonserver.interceptor,NoOpEventInterceptors,1,1,0,0,0,false,0 ,EventInterceptors ,0 ,,interceptEvent{ Params : Event,ExecutionContext Returns : Event} interceptSnapshot{ Params : Event,ExecutionContext Returns : Event} interceptEventsPreCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptEventsPostCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptSnapshotPostCommit{ Params : Event,ExecutionContext Returns : void} readSnapshot{ Params : Event,ExecutionContext Returns : Event} readEvent{ Params : Event,ExecutionContext Returns : Event} noReadInterceptors{ Params : String Returns : boolean} noEventReadInterceptors{ Params : String Returns : boolean} ,interceptEvent interceptSnapshot interceptEventsPreCommit interceptEventsPostCommit interceptSnapshotPostCommit readSnapshot readEvent noReadInterceptors noEventReadInterceptors ,,,,EventInterceptors ,,,,,intercepted: 
axon-server-se-master,io.axoniq.axonserver.interceptor,NoOpQueryInterceptors,1,1,0,0,0,false,0 ,QueryInterceptors ,0 ,,queryRequest{ Params : SerializedQuery,ExecutionContext Returns : SerializedQuery} queryResponse{ Params : QueryResponse,ExecutionContext Returns : QueryResponse} ,queryRequest queryResponse ,,,,QueryInterceptors ,,,,,intercepted: 
axon-server-se-master,io.axoniq.axonserver.interceptor,NoOpSubscriptionQueryInterceptors,1,1,0,0,0,false,0 ,SubscriptionQueryInterceptors ,0 ,,subscriptionQueryRequest{ Params : SubscriptionQueryRequest,ExecutionContext Returns : SubscriptionQueryRequest} subscriptionQueryResponse{ Params : SubscriptionQueryResponse,ExecutionContext Returns : SubscriptionQueryResponse} ,subscriptionQueryRequest subscriptionQueryResponse ,,,,SubscriptionQueryInterceptors ,,,,,intercepted: 
axon-server-se-master,io.axoniq.axonserver.interceptor,TestExecutionContext,1,1,0,0,0,false,0 ,ExecutionContext ,0 ,context: String ,contextName{ Params :  Returns : String} principal{ Params :  Returns : String} principalRoles{ Params :  Returns : Set<String>} principalTags{ Params :  Returns : Map<String,String>} putAttribute{ Params : String,Object Returns : void} getAttribute{ Params : String Returns : Object} onFailure{ Params : BiConsumer<Throwable,ExecutionContext> Returns : void} ,contextName principal principalRoles principalTags putAttribute getAttribute onFailure ,,,,ExecutionContext ,String ,,String ,,intercepted: 
axon-server-se-master,io.axoniq.axonserver.interceptor,TestPluginServiceProvider,1,0,0,0,0,false,0 ,PluginServiceProvider ,0 ,services: List<ServiceWithInfo<? extends Ordered>> listeners: Set<BiConsumer<PluginKey, String>> ,add{ Params : ServiceWithInfo<? extends Ordered> Returns : void} registerPluginListener{ Params : BiConsumer<PluginKey,String> Returns : Registration} getServicesWithInfo{ Params : Class<T> Returns : Set<ServiceWithInfo<T>>} ,registerPluginListener getServicesWithInfo ,,,,PluginServiceProvider ,Set<BiConsumer<PluginKey,String>> ,,Set<BiConsumer<PluginKey,String>> ,ArrayList HashSet HashSet ,result: , (ServiceWithInfo<T>) service
axon-server-se-master,io.axoniq.axonserver,LimitedBufferTest,1,1,0,0,0,false,0 ,0 ,0 ,,size{ Params :  Returns : void} remove{ Params :  Returns : void} putWithSpace{ Params :  Returns : void} putWithoutSpace{ Params :  Returns : void} ,,,,,,,,,LimitedBuffer LimitedBuffer LimitedBuffer LimitedBuffer ,limitedBuffer: , "key3", "string3"
axon-server-se-master,io.axoniq.axonserver.localstorage,AggregateReaderTest,1,1,0,0,0,false,0 ,0 ,0 ,tempFolder: TemporaryFolder testStorageContainer: TestInputStreamStorageContainer testSubject: AggregateReader ,init{ Params :  Returns : void} close{ Params :  Returns : void} setUp{ Params :  Returns : void} readEventsFromOldSegment{ Params :  Returns : void} readEventsFromCurrentSegment{ Params :  Returns : void} readSnapshots{ Params :  Returns : void} readAllSnapshots{ Params :  Returns : void} readEventsWithSnapshot{ Params :  Returns : void} readEventsWithSnapshotBeforeMin{ Params :  Returns : void} readEventsWithSnapshotAfterMax{ Params :  Returns : void} readHighestSequenceNr{ Params :  Returns : void} ,,init close ,,,,AggregateReader ,,AggregateReader ,TemporaryFolder TestInputStreamStorageContainer SnapshotWriteStorage AggregateReader SnapshotReader AtomicLong AtomicLong ArrayList ArrayList ArrayList ArrayList ArrayList ,testSubject: , "55"
axon-server-se-master,io.axoniq.axonserver.localstorage,EventWriteStorageTest,1,1,0,0,0,false,0 ,0 ,0 ,tempFolder: TemporaryFolder container: TestInputStreamStorageContainer ,setUp{ Params :  Returns : void} store{ Params :  Returns : void} close{ Params :  Returns : void} ,,setUp close ,,,,,,,TemporaryFolder TestInputStreamStorageContainer ,container: 
axon-server-se-master,io.axoniq.axonserver.localstorage,FakeEventStore,1,1,0,0,0,false,0 ,EventStorageEngine ,0 ,eventType: EventType ,init{ Params : boolean,long Returns : void} getLastSequenceNumber{ Params : String,SearchHint Returns : Optional<Long>} registerCloseListener{ Params : Runnable Returns : Registration} getLastEvent{ Params : String,long,long Returns : Optional<SerializedEvent>} eventsPerAggregate{ Params : String,long,long,long Returns : Flux<SerializedEvent>} processEventsPerAggregate{ Params : String,long,long,long,Consumer<SerializedEvent> Returns : void} processEventsPerAggregateHighestFirst{ Params : String,long,long,int,Consumer<SerializedEvent> Returns : void} getType{ Params :  Returns : EventTypeContext} transactionIterator{ Params : long,long Returns : CloseableIterator<SerializedTransactionWithToken>} query{ Params : QueryOptions,Predicate<EventWithToken> Returns : void} getFirstToken{ Params :  Returns : long} getLastToken{ Params :  Returns : long} nextToken{ Params :  Returns : long} transformContents{ Params : int,Flux<EventWithToken> Returns : Flux<Long>} getTokenAt{ Params : long Returns : long} getGlobalIterator{ Params : long Returns : CloseableIterator<SerializedEventWithToken>} close{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedEventWithToken} ,init getLastSequenceNumber registerCloseListener getLastEvent eventsPerAggregate processEventsPerAggregate processEventsPerAggregateHighestFirst getType transactionIterator query getFirstToken getLastToken nextToken transformContents getTokenAt getGlobalIterator close hasNext next ,,,,EventStorageEngine ,EventType ,,EventType ,EventTypeContext CloseableIterator SerializedEventWithToken ,ex: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,ChecksumTest,1,0,0,0,0,false,0 ,0 ,0 ,BYTES: byte SAMPLE_BYTE_BUFFER: ByteBuffer WRONG_CHECKSUM: String ,testChecksum{ Params :  Returns : void} testLargeBuffer{ Params :  Returns : void} testSizeGreaterThanDataSize{ Params :  Returns : void} testSizeLowerThanDataSize{ Params :  Returns : void} testPositionGreaterThan0{ Params :  Returns : void} testPositionLowerThan0{ Params :  Returns : void} testPositionGreaterThan0andSizeGreaterThanRemainingDataSize{ Params :  Returns : void} ,,,,,,,,,Checksum Checksum Checksum Checksum Checksum Checksum Checksum ,e: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,DefaultSegmentTransformerTest,1,1,0,0,0,false,0 ,0 ,0 ,storagePath: TemporaryFolder testSubject: DefaultSegmentTransformer indexEntriesMap: Map<String, List<IndexEntry>> transactions: List<SerializedTransactionWithToken> ,setÚp{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedTransactionWithToken} transformEvent{ Params :  Returns : void} transformFirstEvent{ Params :  Returns : void} deleteFirstEvent{ Params :  Returns : void} transformSecondEvent{ Params :  Returns : void} transformThirdEvent{ Params :  Returns : void} indexEntres{ Params :  Returns : int} serializedTransactionWithToken{ Params : long,Event Returns : SerializedTransactionWithToken} eventWithToken{ Params : int,Event Returns : EventWithToken} event{ Params : String,String,long Returns : Event} ,hasNext next ,,,,,List<SerializedTransactionWithToken> ,,List<SerializedTransactionWithToken> ,TemporaryFolder ArrayList StorageProperties SystemInfoProvider TransactionIterator DefaultSegmentTransformer SerializedTransactionWithToken SerializedEvent ,ByteString: , payload
axon-server-se-master,io.axoniq.axonserver.localstorage.file,EventSourceFluxTest,1,0,0,0,0,false,0 ,0 ,0 ,READ_ITERATIONS: int ,get{ Params :  Returns : void} create{ Params :  Returns : Optional<EventSource>} readEvent{ Params : int Returns : SerializedEvent} createTransactionIterator{ Params : long,boolean Returns : TransactionIterator} createEventIterator{ Params : long Returns : EventIterator} segment{ Params :  Returns : long} close{ Params :  Returns : void} createIntArray{ Params : int Returns : Integer[]} ,create readEvent createTransactionIterator createEventIterator segment close ,,,,,,,,AtomicInteger EventSourceFactory EventSource AtomicBoolean IllegalStateException SerializedEvent EventSourceFlux StandardIndexEntries ,closedCount: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,FileEventStorageEngineTest,1,1,0,0,0,false,0 ,0 ,0 ,tempFolder: TemporaryFolder context: String embeddedDBProperties: EmbeddedDBProperties meterFactory: MeterFactory fileSystemMonitor: FileSystemMonitor ,primaryEventStore{ Params :  Returns : FileEventStorageEngine} primaryEventStore{ Params : EventType Returns : FileEventStorageEngine} primaryEventStore{ Params : IndexManager Returns : FileEventStorageEngine} aggregateEvents{ Params :  Returns : void} testMetricsInReadingAggregatesEvents{ Params :  Returns : void} testLargeEvent{ Params :  Returns : void} queryEvents{ Params :  Returns : void} testLargeSecondEvent{ Params :  Returns : void} testEventVersions{ Params :  Returns : void} testFirstEventOtherVersion{ Params :  Returns : void} aggregateEventsReusedAggregateIdentifier{ Params :  Returns : void} transactionsIterator{ Params :  Returns : void} largeTransactions{ Params :  Returns : void} readClosedIterator{ Params :  Returns : void} setupEvents{ Params : FileEventStorageEngine,int,int Returns : void} storeEvent{ Params : FileEventStorageEngine,long Returns : void} storeEventWithNewVersion{ Params : FileEventStorageEngine,int,int Returns : void} testGlobalIterator{ Params :  Returns : void} randomData{ Params : int Returns : ByteString} ,,,,,,FileSystemMonitor ,,FileSystemMonitor ,TemporaryFolder MeterFactory SimpleMeterRegistry DefaultMetricCollector EmbeddedDBProperties SystemInfoProvider StandardIndexManager DefaultEventTransformerFactory InputStreamStrorageTierEventStore EventTypeContext FileEventStorageEngine EventTypeContext CountDownLatch ArrayList AtomicInteger QueryOptions QueryOptions QueryOptions QueryOptions File File CountDownLatch ArrayList RuntimeException CountDownLatch ArrayList RuntimeException ,ByteString: , bytes
axon-server-se-master,io.axoniq.axonserver.localstorage.file,InputStreamEventIteratorTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: InputStreamEventIterator ,setUp{ Params :  Returns : void} iterateClosedFile{ Params :  Returns : void} ,,,,,,InputStreamEventIterator ,,InputStreamEventIterator ,File InputStreamEventSource DefaultEventTransformerFactory InputStreamEventIterator ,: , "Reading from closed iterator must fail"
axon-server-se-master,io.axoniq.axonserver.localstorage.file,InputStreamStrorageTierEventStoreTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: InputStreamStrorageTierEventStore ,setUp{ Params :  Returns : void} getEventSource{ Params :  Returns : void} readBackwards{ Params :  Returns : void} iterateTransactions{ Params :  Returns : void} getSegments{ Params :  Returns : void} ,,,,,,InputStreamStrorageTierEventStore ,,InputStreamStrorageTierEventStore ,EmbeddedDBProperties SystemInfoProvider MeterFactory SimpleMeterRegistry DefaultMetricCollector StandardIndexManager DefaultEventTransformerFactory InputStreamStrorageTierEventStore EventTypeContext ,segments: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,MultipleSnapshotSegmentsTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: FileEventStorageEngine fileSystemMonitor: FileSystemMonitor sampleEventStoreFolder: File ,init{ Params :  Returns : void} getHostName{ Params :  Returns : String} readSnapshotInFirstSegment{ Params :  Returns : void} readSnapshotInLastSegment{ Params :  Returns : void} ,getHostName ,,,,,,,,File MeterFactory SimpleMeterRegistry DefaultMetricCollector StorageProperties SystemInfoProvider StandardIndexManager InputStreamStrorageTierEventStore EventTypeContext DefaultEventTransformerFactory FileEventStorageEngine EventTypeContext DefaultEventTransformerFactory ,snapshot: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,RecreateIndexTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: FileEventStorageEngine fileSystemMonitor: FileSystemMonitor ,init{ Params :  Returns : void} getHostName{ Params :  Returns : String} recreateIndex{ Params :  Returns : void} ,getHostName ,,,,,FileSystemMonitor ,,FileSystemMonitor ,File MeterFactory SimpleMeterRegistry DefaultMetricCollector StorageProperties SystemInfoProvider StandardIndexManager InputStreamStrorageTierEventStore EventTypeContext DefaultEventTransformerFactory FileEventStorageEngine EventTypeContext DefaultEventTransformerFactory AtomicInteger ,events: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,RetentionStrategyTest,1,1,0,0,0,false,0 ,0 ,0 ,tempFolder: TemporaryFolder ,testTimeBasedRetentionStrategy{ Params :  Returns : void} testSizeBasedRetentionStrategy{ Params :  Returns : void} ,,,,,,,,,TemporaryFolder HashMap TreeMap RuntimeException TimeBasedRetentionStrategy HashMap ConcurrentSkipListMap RandomAccessFile RandomAccessFile SizeBasedRetentionStrategy ,strategy: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,StandardEventStoreFactoryTest,1,1,0,0,0,false,0 ,0 ,0 ,tempFolder: TemporaryFolder fileSystemMonitor: FileSystemMonitor testSubject: StandardEventStoreFactory ,setUp{ Params :  Returns : void} createEventStorageEngine{ Params :  Returns : void} createSnapshotStorageEngine{ Params :  Returns : void} newEvent{ Params : String,int Returns : Event} dummyData{ Params : int Returns : ByteString} ,,,,,,StandardEventStoreFactory ,,StandardEventStoreFactory ,TemporaryFolder EmbeddedDBProperties SystemInfoProvider MeterFactory SimpleMeterRegistry DefaultMetricCollector StandardEventStoreFactory DefaultEventTransformerFactory DefaultStorageTransactionManagerFactory ,ByteString: , data
axon-server-se-master,io.axoniq.axonserver.localstorage.file,StandardIndexEntriesTest,1,1,0,0,0,false,0 ,0 ,0 ,,testRangeDuringWriting{ Params :  Returns : void} addAndLoopPerformance{ Params :  Returns : void} range{ Params :  Returns : void} ,,,,,,,,,StandardIndexEntries AtomicBoolean AtomicInteger CountDownLatch Thread IndexEntry StandardIndexEntries IndexEntry AtomicLong StandardIndexEntries ,subset: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,StandardIndexManagerTest,1,1,0,0,0,false,0 ,0 ,0 ,temporaryFolder: TemporaryFolder indexManager: StandardIndexManager storageProperties: StorageProperties context: String systemInfoProvider: SystemInfoProvider ,setUp{ Params :  Returns : void} testConcurrentAccess{ Params :  Returns : void} testIndexRange{ Params :  Returns : void} testIndexMinToken{ Params :  Returns : void} testTemporaryFileIsDeletedWhenCreatingIndex{ Params :  Returns : void} testIndexCreationFailsIfTemporaryFileIsKeptOpen{ Params :  Returns : void} testLastSequenceNumberWhenNoDomainEventsInActiveIndexes{ Params :  Returns : void} ,,,,,,SystemInfoProvider ,,SystemInfoProvider ,TemporaryFolder SystemInfoProvider StorageProperties MeterFactory SimpleMeterRegistry DefaultMetricCollector StandardIndexManager IndexEntry FileVersion IndexEntry IndexEntry IndexEntry IndexEntry IndexEntry IndexEntry IndexEntry IndexEntry FileVersion IndexEntry IndexEntry IndexEntry IndexEntry IndexEntry IndexEntry IndexEntry IndexEntry FileVersion FileVersion FileVersion FileOutputStream IndexEntry IndexEntry FileOutputStream StorageProperties MeterFactory SimpleMeterRegistry DefaultMetricCollector StandardIndexManager ,Assertions: , result
axon-server-se-master,io.axoniq.axonserver.localstorage.file,TokenAtTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: FileEventStorageEngine fileSystemMonitor: FileSystemMonitor ,init{ Params :  Returns : void} getHostName{ Params :  Returns : String} tokenAtBeforeFirst{ Params :  Returns : void} tokenAtSecondSegment{ Params :  Returns : void} tokenAtActiveSegment{ Params :  Returns : void} tokenAtAfterLast{ Params :  Returns : void} ,getHostName ,init ,,,,,,,File MeterFactory SimpleMeterRegistry DefaultMetricCollector StorageProperties SystemInfoProvider StandardIndexManager InputStreamStrorageTierEventStore EventTypeContext DefaultEventTransformerFactory FileEventStorageEngine EventTypeContext DefaultEventTransformerFactory ,Instant: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,TransformationIntegrationTest,1,1,0,0,0,false,0 ,0 ,0 ,,createEventStore{ Params :  Returns : void} onNext{ Params : Confirmation Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} transformationTest2{ Params :  Returns : void} onNext{ Params : TransformationId Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} onNext{ Params : TransformRequestAck Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} deleteEvents{ Params :  Returns : void} onNext{ Params : TransformationId Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} onNext{ Params : TransformRequestAck Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} compact{ Params :  Returns : void} event{ Params :  Returns : Event} transformRequest{ Params : TransformationId,long,long,Event Returns : TransformRequest} deleteRequest{ Params : TransformationId,long,long Returns : TransformRequest} transformationTest{ Params :  Returns : void} onNext{ Params : TransformRequestAck Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} onNext{ Params : EventWithToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} updateEvent{ Params : EventWithToken Returns : Event} ,onNext onError onCompleted onNext onError onCompleted onNext onError onCompleted onNext onError onCompleted onNext onError onCompleted onNext onError onCompleted onNext onError onCompleted ,,,,,,,,CompletableFuture StreamObserver CompletableFuture StreamObserver CompletableFuture StreamObserver CompletableFuture CompletableFutureStreamObserver CompletableFuture StreamObserver CompletableFuture StreamObserver CompletableFuture CompletableFutureStreamObserver CompletableFuture CompletableFutureStreamObserver CompletableFuture CompletableFutureStreamObserver CompletableFuture StreamObserver CompletableFuture AtomicLong StreamObserver CompletableFuture CompletableFutureStreamObserver ,event: 
axon-server-se-master,io.axoniq.axonserver.localstorage.file,ValidLastIndexTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: FileEventStorageEngine fileSystemMonitor: FileSystemMonitor sampleEventStoreFolder: File ,init{ Params :  Returns : void} getHostName{ Params :  Returns : String} startWithNewSegment{ Params :  Returns : void} ,getHostName ,,,,,,,,File MeterFactory SimpleMeterRegistry DefaultMetricCollector StorageProperties SystemInfoProvider StandardIndexManager InputStreamStrorageTierEventStore EventTypeContext DefaultEventTransformerFactory FileEventStorageEngine EventTypeContext DefaultEventTransformerFactory File ,sampleEventStoreFolder: 
axon-server-se-master,io.axoniq.axonserver.localstorage,InputStreamAggregateReaderTest,1,1,0,0,0,false,0 ,0 ,0 ,tempFolder: TemporaryFolder testStorageContainer: TestInputStreamStorageContainer testSubject: AggregateReader ,init{ Params :  Returns : void} close{ Params :  Returns : void} setUp{ Params :  Returns : void} readEventsFromOldSegment{ Params :  Returns : void} readEventsFromCurrentSegment{ Params :  Returns : void} readEventsWithSnapshot{ Params :  Returns : void} readEventsWithSnapshotBeforeMin{ Params :  Returns : void} readEventsFromNonExistingAggregate{ Params :  Returns : void} ,,init close ,,,,AggregateReader ,,AggregateReader ,TemporaryFolder TestInputStreamStorageContainer SnapshotWriteStorage AggregateReader SnapshotReader AtomicLong AtomicLong ArrayList ArrayList AtomicLong ,sequenceNumber: 
axon-server-se-master,io.axoniq.axonserver.localstorage,LocalEventStorageEngineTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: LocalEventStore SAMPLE_CONTEXT: String pendingTransactions: List<CompletableFuture<Long>> ,setup{ Params :  Returns : void} storeBatch{ Params : List<Event> Returns : Mono<Long>} reserveSequenceNumbers{ Params : List<Event> Returns : Runnable} cancelPendingTransactions{ Params :  Returns : void} createEventStorageEngine{ Params : String Returns : EventStorageEngine} createSnapshotStorageEngine{ Params : String Returns : EventStorageEngine} deleteContext{ Params :  Returns : void} cancel{ Params :  Returns : void} appendSnapshot{ Params :  Returns : void} appendSnapshotFailsWhenNoEventsFound{ Params :  Returns : void} testAppendEvent{ Params :  Returns : void} events{ Params :  Returns : void} ,storeBatch reserveSequenceNumbers cancelPendingTransactions createEventStorageEngine createSnapshotStorageEngine ,,,,,List<CompletableFuture<Long>> ,,List<CompletableFuture<Long>> ,ArrayList StorageTransactionManager CompletableFuture RuntimeException LocalEventStore EventStoreFactory FakeEventStore FakeEventStore MeterFactory SimpleMeterRegistry DefaultMetricCollector NoOpEventInterceptors DefaultEventDecorator SerializedEvent SerializedEvent ,sink: 
axon-server-se-master,io.axoniq.axonserver.localstorage,LocalEventStoreTest,1,1,0,0,0,false,0 ,0 ,CountingEventInterceptors TestEventStore ,eventInterceptors: CountingEventInterceptors testSubject: LocalEventStore ,setUp{ Params :  Returns : void} createEventStorageEngine{ Params : String Returns : EventStorageEngine} createSnapshotStorageEngine{ Params : String Returns : EventStorageEngine} storeBatch{ Params : List<Event> Returns : Mono<Long>} reserveSequenceNumbers{ Params : List<Event> Returns : Runnable} appendSnapshot{ Params :  Returns : void} appendSnapshotCompensate{ Params :  Returns : void} teststoreBatch{ Params :  Returns : void} createAppendEventConnectionCompensateAppendEntries{ Params :  Returns : void} createAppendEventConnectionCompensatePreCommitAndAppendEntry{ Params :  Returns : void} aggregateEvents{ Params :  Returns : void} aggregateEventsNoSnapshots{ Params :  Returns : void} aggregateSnapshots{ Params :  Returns : void} events{ Params :  Returns : void} queryEvents{ Params :  Returns : void} interceptEvent{ Params : Event,ExecutionContext Returns : Event} interceptSnapshot{ Params : Event,ExecutionContext Returns : Event} interceptEventsPreCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptEventsPostCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptSnapshotPostCommit{ Params : Event,ExecutionContext Returns : void} readSnapshot{ Params : Event,ExecutionContext Returns : Event} readEvent{ Params : Event,ExecutionContext Returns : Event} noReadInterceptors{ Params : String Returns : boolean} noEventReadInterceptors{ Params : String Returns : boolean} noSnapshotReadInterceptors{ Params : String Returns : boolean} processEventsPerAggregate{ Params : String,long,long,long,Consumer<SerializedEvent> Returns : void} eventsPerAggregate{ Params : String,long,long,long Returns : Flux<SerializedEvent>} getGlobalIterator{ Params : long Returns : CloseableIterator<SerializedEventWithToken>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedEventWithToken} close{ Params :  Returns : void} getLastSequenceNumber{ Params : String,SearchHint Returns : Optional<Long>} query{ Params : QueryOptions,Predicate<EventWithToken> Returns : void} store{ Params : List<Event> Returns : CompletableFuture<Long>} processEventsPerAggregateHighestFirst{ Params : String,long,long,int,Consumer<SerializedEvent> Returns : void} getLastEvent{ Params : String,long,long Returns : Optional<SerializedEvent>} ,createEventStorageEngine createSnapshotStorageEngine storeBatch reserveSequenceNumbers interceptEvent interceptSnapshot interceptEventsPreCommit interceptEventsPostCommit interceptSnapshotPostCommit readSnapshot readEvent noReadInterceptors noEventReadInterceptors noSnapshotReadInterceptors processEventsPerAggregate eventsPerAggregate getGlobalIterator hasNext next close getLastSequenceNumber query store processEventsPerAggregateHighestFirst getLastEvent ,,,,,LocalEventStore ,,LocalEventStore ,CountingEventInterceptors EventStoreFactory TestEventStore TestEventStore StorageTransactionManager LocalEventStore SimpleMeterRegistry SerializedEvent SerializedEvent SerializedEvent AtomicReference ArrayList RuntimeException RuntimeException RuntimeException SerializedEvent CloseableIterator SerializedEventWithToken CompletableFuture RuntimeException SerializedEvent SerializedEvent ,sinkRef: 
axon-server-se-master,io.axoniq.axonserver.localstorage,CountingEventInterceptors,3,2,0,1,0,false,0 ,0 ,CountingEventInterceptors TestEventStore ,failAppend: boolean failPreCommit: boolean appendEvent: int appendSnapshot: int eventsPreCommit: int eventsPostCommit: int snapshotPostCommit: int readEvent: int readSnapshot: int compensations: List<String> ,setUp{ Params :  Returns : void} createEventStorageEngine{ Params : String Returns : EventStorageEngine} createSnapshotStorageEngine{ Params : String Returns : EventStorageEngine} storeBatch{ Params : List<Event> Returns : Mono<Long>} reserveSequenceNumbers{ Params : List<Event> Returns : Runnable} appendSnapshot{ Params :  Returns : void} appendSnapshotCompensate{ Params :  Returns : void} teststoreBatch{ Params :  Returns : void} createAppendEventConnectionCompensateAppendEntries{ Params :  Returns : void} createAppendEventConnectionCompensatePreCommitAndAppendEntry{ Params :  Returns : void} aggregateEvents{ Params :  Returns : void} aggregateEventsNoSnapshots{ Params :  Returns : void} aggregateSnapshots{ Params :  Returns : void} events{ Params :  Returns : void} queryEvents{ Params :  Returns : void} interceptEvent{ Params : Event,ExecutionContext Returns : Event} interceptSnapshot{ Params : Event,ExecutionContext Returns : Event} interceptEventsPreCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptEventsPostCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptSnapshotPostCommit{ Params : Event,ExecutionContext Returns : void} readSnapshot{ Params : Event,ExecutionContext Returns : Event} readEvent{ Params : Event,ExecutionContext Returns : Event} noReadInterceptors{ Params : String Returns : boolean} noEventReadInterceptors{ Params : String Returns : boolean} noSnapshotReadInterceptors{ Params : String Returns : boolean} processEventsPerAggregate{ Params : String,long,long,long,Consumer<SerializedEvent> Returns : void} eventsPerAggregate{ Params : String,long,long,long Returns : Flux<SerializedEvent>} getGlobalIterator{ Params : long Returns : CloseableIterator<SerializedEventWithToken>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedEventWithToken} close{ Params :  Returns : void} getLastSequenceNumber{ Params : String,SearchHint Returns : Optional<Long>} query{ Params : QueryOptions,Predicate<EventWithToken> Returns : void} store{ Params : List<Event> Returns : CompletableFuture<Long>} processEventsPerAggregateHighestFirst{ Params : String,long,long,int,Consumer<SerializedEvent> Returns : void} getLastEvent{ Params : String,long,long Returns : Optional<SerializedEvent>} ,createEventStorageEngine createSnapshotStorageEngine storeBatch reserveSequenceNumbers interceptEvent interceptSnapshot interceptEventsPreCommit interceptEventsPostCommit interceptSnapshotPostCommit readSnapshot readEvent noReadInterceptors noEventReadInterceptors noSnapshotReadInterceptors processEventsPerAggregate eventsPerAggregate getGlobalIterator hasNext next close getLastSequenceNumber query store processEventsPerAggregateHighestFirst getLastEvent ,,,,EventInterceptors ,,,,ArrayList RuntimeException RuntimeException RuntimeException ,compensations: , "Compensate Events Pre Commit"
axon-server-se-master,io.axoniq.axonserver.localstorage,TestEventStore,3,2,0,1,0,false,0 ,0 ,CountingEventInterceptors TestEventStore ,events: Event ,setUp{ Params :  Returns : void} createEventStorageEngine{ Params : String Returns : EventStorageEngine} createSnapshotStorageEngine{ Params : String Returns : EventStorageEngine} storeBatch{ Params : List<Event> Returns : Mono<Long>} reserveSequenceNumbers{ Params : List<Event> Returns : Runnable} appendSnapshot{ Params :  Returns : void} appendSnapshotCompensate{ Params :  Returns : void} teststoreBatch{ Params :  Returns : void} createAppendEventConnectionCompensateAppendEntries{ Params :  Returns : void} createAppendEventConnectionCompensatePreCommitAndAppendEntry{ Params :  Returns : void} aggregateEvents{ Params :  Returns : void} aggregateEventsNoSnapshots{ Params :  Returns : void} aggregateSnapshots{ Params :  Returns : void} events{ Params :  Returns : void} queryEvents{ Params :  Returns : void} interceptEvent{ Params : Event,ExecutionContext Returns : Event} interceptSnapshot{ Params : Event,ExecutionContext Returns : Event} interceptEventsPreCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptEventsPostCommit{ Params : List<Event>,ExecutionContext Returns : void} interceptSnapshotPostCommit{ Params : Event,ExecutionContext Returns : void} readSnapshot{ Params : Event,ExecutionContext Returns : Event} readEvent{ Params : Event,ExecutionContext Returns : Event} noReadInterceptors{ Params : String Returns : boolean} noEventReadInterceptors{ Params : String Returns : boolean} noSnapshotReadInterceptors{ Params : String Returns : boolean} processEventsPerAggregate{ Params : String,long,long,long,Consumer<SerializedEvent> Returns : void} eventsPerAggregate{ Params : String,long,long,long Returns : Flux<SerializedEvent>} getGlobalIterator{ Params : long Returns : CloseableIterator<SerializedEventWithToken>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedEventWithToken} close{ Params :  Returns : void} getLastSequenceNumber{ Params : String,SearchHint Returns : Optional<Long>} query{ Params : QueryOptions,Predicate<EventWithToken> Returns : void} store{ Params : List<Event> Returns : CompletableFuture<Long>} processEventsPerAggregateHighestFirst{ Params : String,long,long,int,Consumer<SerializedEvent> Returns : void} getLastEvent{ Params : String,long,long Returns : Optional<SerializedEvent>} ,createEventStorageEngine createSnapshotStorageEngine storeBatch reserveSequenceNumbers interceptEvent interceptSnapshot interceptEventsPreCommit interceptEventsPostCommit interceptSnapshotPostCommit readSnapshot readEvent noReadInterceptors noEventReadInterceptors noSnapshotReadInterceptors processEventsPerAggregate eventsPerAggregate getGlobalIterator hasNext next close getLastSequenceNumber query store processEventsPerAggregateHighestFirst getLastEvent ,,,,,Event[] ,,Event[] ,SerializedEvent CloseableIterator SerializedEventWithToken CompletableFuture RuntimeException SerializedEvent SerializedEvent ,Optional: , new SerializedEvent(events[events.length - 1])
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,AddExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: AddExpression expressionContext: ExpressionContext ,setup{ Params :  Returns : void} addNumbers{ Params :  Returns : void} addString{ Params :  Returns : void} applyWithFirstNull{ Params :  Returns : void} applyWithInvalidSecond{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,Identifier Identifier AddExpression ExpressionContext ,: , "200"
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.binary,InExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: InExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} inContainsString{ Params :  Returns : void} inContainsNumber{ Params :  Returns : void} inNotContainsString{ Params :  Returns : void} inNotContainsNumber{ Params :  Returns : void} inContainsIdentifier{ Params :  Returns : void} inNotContainsIdentifier{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,InExpression Identifier ListExpression StringLiteral Identifier StringLiteral NumericLiteral ExpressionContext ,actual: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,AvgExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: AvgExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} testNoValueAvailableLeavesEmptyAverage{ Params :  Returns : void} testAdditionalValuesModifyAverage{ Params :  Returns : void} testNonNumericValuesKeepExistingAverage{ Params :  Returns : void} testNullValuesKeepExistingAverage{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,AvgExpression Identifier ExpressionContext ,actual3: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,ConcatExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: ConcatExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} concat{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,ConcatExpression Identifier StringLiteral ExpressionContext ,actual: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,ContainsExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: ContainsExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} testStringContainsGivenValue{ Params :  Returns : void} testStringContainsDifferentCase{ Params :  Returns : void} testValueIsNumeric{ Params :  Returns : void} testContainsMatchesElementInList{ Params :  Returns : void} testContainsDoesntMatchElementInList{ Params :  Returns : void} testContainsMatchesNumericValueInCollection{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,ExpressionContext ContainsExpression Identifier StringLiteral ContainsExpression Identifier NumericLiteral ,actualResult: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,CountExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: CountExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} testCountValues{ Params :  Returns : void} testNullValuesNotCounted{ Params :  Returns : void} testCountIncreasedByCollectionSize{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,CountExpression Identifier ExpressionContext ,actual3: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,FormatDateExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: FormatDateExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} apply{ Params :  Returns : void} applyDay{ Params :  Returns : void} applyWeek{ Params :  Returns : void} applyMonth{ Params :  Returns : void} applyYear{ Params :  Returns : void} applyHour{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,FormatDateExpression Identifier Identifier StringLiteral ExpressionContext ,actual: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,JsonPathExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: JsonPathExpression expressionContext: ExpressionContext map: Map<String, ExpressionResult> ,setUp{ Params :  Returns : void} apply{ Params :  Returns : void} applySingleValue{ Params :  Returns : void} applyNumberValue{ Params :  Returns : void} applyNodes{ Params :  Returns : void} ,,,,,,Map<String,ExpressionResult> ,,Map<String,ExpressionResult> ,HashMap ExpressionContext StringExpressionResult JsonPathExpression Identifier StringLiteral MapExpressionResult StringExpressionResult JsonPathExpression Identifier StringLiteral MapExpressionResult JsonPathExpression Identifier StringLiteral MapExpressionResult JsonPathExpression Identifier StringLiteral MapExpressionResult ,: , result
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,LeftExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: LeftExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} normalLeft{ Params :  Returns : void} tooShort{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,LeftExpression Identifier NumericLiteral ExpressionContext ,actual: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,LowerExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: LowerExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} lower{ Params :  Returns : void} lowerNull{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,LowerExpression Identifier ExpressionContext ,actual: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,MatchExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: MatchExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} normalMatch{ Params :  Returns : void} nonMatch{ Params :  Returns : void} nullMatch{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,MatchExpression Identifier Identifier ExpressionContext ,actual: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,RightExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: RightExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} normalRight{ Params :  Returns : void} tooShort{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,RightExpression Identifier NumericLiteral ExpressionContext ,actual: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,SelectExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: SelectExpression context: ExpressionContext ,setup{ Params :  Returns : void} process{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,AddExpression NumericLiteral Identifier Identifier SelectExpression ExpressionContext HashMap NumericExpressionResult StringExpressionResult DefaultQueryResult MapExpressionResult ,Collections: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,SubstringExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: SubstringExpression testSubject2: SubstringExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} normalSubstring{ Params :  Returns : void} normalSubstringOnlyStart{ Params :  Returns : void} tooShort{ Params :  Returns : void} tooShort2{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,SubstringExpression Identifier NumericLiteral NumericLiteral SubstringExpression Identifier Identifier ExpressionContext ,actual: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,UpperExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: UpperExpression expressionContext: ExpressionContext ,setUp{ Params :  Returns : void} upper{ Params :  Returns : void} upperNull{ Params :  Returns : void} ,,,,,,ExpressionContext ,,ExpressionContext ,UpperExpression Identifier ExpressionContext ,actual: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions.functions,XPathExpressionTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: XPathExpression testSubjectWithoutType: XPathExpression expressionContext: ExpressionContext xmlDocument: String ,setUp{ Params :  Returns : void} apply{ Params :  Returns : void} applyWithNodes{ Params :  Returns : void} applyCount{ Params :  Returns : void} getIndex{ Params :  Returns : void} getIndexNode{ Params :  Returns : void} ,,,,,,String ,,String ,ExpressionContext XPathExpression Identifier Identifier Identifier XPathExpression Identifier Identifier StringExpressionResult ,result: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query.expressions,ResultFactory,1,1,1,0,0,false,0 ,0 ,0 ,,emptyMapValue{ Params :  Returns : ExpressionResult} mapValue{ Params : String,ExpressionResult Returns : ExpressionResult} mapValue{ Params : String,ExpressionResult,String,ExpressionResult Returns : ExpressionResult} mapValue{ Params : String,ExpressionResult,String,ExpressionResult,String,ExpressionResult Returns : ExpressionResult} nullValue{ Params :  Returns : ExpressionResult} stringValue{ Params : String Returns : ExpressionResult} numericValue{ Params : long Returns : ExpressionResult} listValue{ Params : ExpressionResult Returns : ExpressionResult} ,,emptyMapValue mapValue mapValue mapValue nullValue stringValue numericValue listValue ,,,,,,,MapExpressionResult MapExpressionResult HashMap MapExpressionResult HashMap MapExpressionResult StringExpressionResult NumericExpressionResult ListExpressionResult ,map: , key3, value3
axon-server-se-master,io.axoniq.axonserver.localstorage.query,QueryEventsRequestStreamObserverTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: QueryEventsRequestStreamObserver eventStreamReader: EventStreamReader snapshotStreamReader: EventStreamReader aggregateReader: AggregateReader completableResult: CompletableFuture<List<QueryEventsResponse>> ,setUp{ Params :  Returns : void} onNext{ Params : QueryEventsResponse Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} completedByCaller{ Params :  Returns : void} onNextEvent{ Params :  Returns : void} onNextSnapshot{ Params :  Returns : void} onNextWithNullExpression{ Params :  Returns : void} ,onNext onError onCompleted ,,,,,CompletableFuture<List<QueryEventsResponse>> ,,CompletableFuture<List<QueryEventsResponse>> ,CompletableFuture StreamObserver LinkedList QueryEventsRequestStreamObserver DefaultEventDecorator SerializedEvent ,responses: 
axon-server-se-master,io.axoniq.axonserver.localstorage.query,QueryTest,1,1,0,0,0,false,0 ,0 ,0 ,eventStream: Stream<EventWithToken> objectMapper: ObjectMapper ,setup{ Params :  Returns : void} groupByExpression{ Params :  Returns : void} groupByExpression2{ Params :  Returns : void} sort{ Params :  Returns : void} testAverage{ Params :  Returns : void} groupByExpression2WithFilter{ Params :  Returns : void} containsExpression{ Params :  Returns : void} equalExpression{ Params :  Returns : void} count{ Params :  Returns : void} lastDay{ Params :  Returns : void} countWithExpression{ Params :  Returns : void} filterOnMetaData{ Params :  Returns : void} executeQuery{ Params : String Returns : List<QueryResult>} ,,,,,,ObjectMapper ,,ObjectMapper ,ArrayList ObjectMapper EventStoreQueryParser RuntimeException ArrayList QueryProcessor DefaultQueryResult EventExpressionResult ,pipeline: , new DefaultQueryResult(new EventExpressionResult(e))
axon-server-se-master,io.axoniq.axonserver.localstorage.query,XmlToJsonTest,1,1,0,0,0,false,0 ,0 ,0 ,xmlDocument: String ,transformXml{ Params :  Returns : void} startElement{ Params : String,String,String,Attributes Returns : void} put{ Params : JSONObject,String,Object Returns : void} endElement{ Params : String,String,String Returns : void} characters{ Params : char[],int,int Returns : void} ignorableWhitespace{ Params : char[],int,int Returns : void} ,startElement endElement characters ignorableWhitespace ,,,,,String ,,String ,Stack JSONObject DefaultHandler JSONObject JSONArray RuntimeException String InputSource StringReader JSONObject ,currentJsonPath: 
axon-server-se-master,io.axoniq.axonserver.localstorage,SerializedEventTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: SerializedEvent wrapped: Event ,setUp{ Params :  Returns : void} asInputStream{ Params :  Returns : void} asEvent{ Params :  Returns : void} size{ Params :  Returns : void} serializedData{ Params :  Returns : void} getAggregateSequenceNumber{ Params :  Returns : void} getMetaData{ Params :  Returns : void} validateEquals{ Params :  Returns : void} ,,,,,,Event ,,Event ,SerializedEvent SerializedEvent ,testSubject: 
axon-server-se-master,io.axoniq.axonserver.localstorage,SerializedEventWithTokenTest,1,1,0,0,0,false,0 ,0 ,0 ,,testEncodedDataIdenticalToGrpcOwnDecoding{ Params :  Returns : void} toByteArray{ Params : InputStream Returns : byte[]} ,,,,,,,,,SerializedEventWithToken SerializedEvent ByteArrayOutputStream ,bos: 
axon-server-se-master,io.axoniq.axonserver.localstorage,TestInputStreamStorageContainer,1,1,0,0,0,false,0 ,0 ,0 ,datafileManagerChain: EventStorageEngine snapshotManagerChain: EventStorageEngine eventWriter: EventWriteStorage fileSystemMonitor: FileSystemMonitor ,createDummyEvents{ Params : int,int Returns : void} createDummyEvents{ Params : int,int,String Returns : void} getDatafileManagerChain{ Params :  Returns : EventStorageEngine} getSnapshotManagerChain{ Params :  Returns : EventStorageEngine} getEventWriter{ Params :  Returns : EventWriteStorage} getTransactionManager{ Params : EventStorageEngine Returns : StorageTransactionManager} getPrimary{ Params :  Returns : FileEventStorageEngine} close{ Params :  Returns : void} ,,,,,,FileSystemMonitor ,,FileSystemMonitor ,EmbeddedDBProperties SystemInfoProvider MeterFactory SimpleMeterRegistry DefaultMetricCollector StandardEventStoreFactory DefaultEventTransformerFactory DefaultStorageTransactionManagerFactory EventWriteStorage SingleInstanceTransactionManager CountDownLatch AtomicReference ArrayList SingleInstanceTransactionManager ,snapshotManagerChain: , false
axon-server-se-master,io.axoniq.axonserver.localstorage,TrackingEventProcessorManagerTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: TrackingEventProcessorManager eventsLeft: AtomicInteger iteratorClosed: AtomicBoolean ,setup{ Params :  Returns : void} close{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : SerializedEventWithToken} createEventTracker{ Params :  Returns : void} onNext{ Params : SerializedEventWithToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} blacklist{ Params :  Returns : void} onNext{ Params : SerializedEventWithToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} testStopAllWhereRequestIsNotForLocalStoreOnly{ Params :  Returns : void} onNext{ Params : SerializedEventWithToken Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} ,close hasNext next onNext onError onCompleted onNext onError onCompleted onNext onError onCompleted ,,,,,AtomicBoolean ,,AtomicBoolean ,AtomicInteger AtomicBoolean AtomicLong CloseableIterator SerializedEventWithToken TrackingEventProcessorManager AtomicInteger AtomicBoolean AtomicBoolean StreamObserver AtomicInteger AtomicBoolean AtomicBoolean StreamObserver AtomicInteger AtomicBoolean AtomicBoolean StreamObserver ,useLocalStoreMessagesReceived: 
axon-server-se-master,io.axoniq.axonserver.localstorage.transaction,SequenceNumberCacheTest,1,1,0,0,0,false,0 ,0 ,0 ,clock: FakeClock testSubject: SequenceNumberCache ,dummySequenceNumberProvider{ Params : String,EventStorageEngine.SearchHint Returns : Optional<Long>} slowSequenceNumberProvider{ Params : String,EventStorageEngine.SearchHint Returns : Optional<Long>} testParallelTransactions{ Params :  Returns : void} reserveSequenceNumbers{ Params :  Returns : void} reserveSequenceNumbersInvalidSequence{ Params :  Returns : void} reserveSequenceNumbersValidAfterInvalidSequence{ Params :  Returns : void} reserveSequenceNumbersValidSequence{ Params :  Returns : void} reserveSequenceNumbersValidSequenceMultipleEvents{ Params :  Returns : void} reserveSequenceNumbersValidSequenceMultipleEvents2{ Params :  Returns : void} reserveSequenceNumbersInvalidDoubleSequence{ Params :  Returns : void} reserveSequenceNumbersInvalidGapSequence{ Params :  Returns : void} clearOldValues{ Params :  Returns : void} serializedEvent{ Params : String,String,int Returns : Event} ,,dummySequenceNumberProvider slowSequenceNumberProvider ,,,,SequenceNumberCache ,,SequenceNumberCache ,FakeClock SequenceNumberCache SequenceNumberCache ,Event: 
axon-server-se-master,io.axoniq.axonserver.message.command,CommandCacheTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: CommandCache clock: FakeClock ,setUp{ Params :  Returns : void} clearOnTimeout{ Params :  Returns : void} onFullCapacityThrowError{ Params :  Returns : void} ,,,,,,FakeClock ,,FakeClock ,FakeClock CommandCache AtomicReference CommandInformation ClientStreamIdentification AtomicReference CommandInformation ClientStreamIdentification CommandInformation ClientStreamIdentification ,testSubject: , "4567", new CommandInformation("4567", "Source", "Target", responseAtomicReference::set, new ClientStreamIdentification("context", "client"), "component")
axon-server-se-master,io.axoniq.axonserver.message.command,CommandDispatcherTest,1,1,0,0,0,false,0 ,0 ,0 ,commandDispatcher: CommandDispatcher meterFactory: MeterFactory metricsRegistry: CommandMetricsRegistry commandCache: CommandCache registrations: CommandRegistrationCache ,setup{ Params :  Returns : void} unregisterCommandHandler{ Params :  Returns : void} dispatch{ Params :  Returns : void} dispatchNotFound{ Params :  Returns : void} dispatchQueueFull{ Params :  Returns : void} dispatchUnknownContext{ Params :  Returns : void} dispatchProxied{ Params :  Returns : void} dispatchProxiedClientNotFound{ Params :  Returns : void} handleResponse{ Params :  Returns : void} dispatchRequestRejected{ Params :  Returns : void} commandRequest{ Params : SerializedCommand,ExecutionContext Returns : SerializedCommand} commandResponse{ Params : SerializedCommandResponse,ExecutionContext Returns : SerializedCommandResponse} dispatchRequestInterceptorException{ Params :  Returns : void} commandRequest{ Params : SerializedCommand,ExecutionContext Returns : SerializedCommand} commandResponse{ Params : SerializedCommandResponse,ExecutionContext Returns : SerializedCommandResponse} handleResponseInterceptorException{ Params :  Returns : void} commandRequest{ Params : SerializedCommand,ExecutionContext Returns : SerializedCommand} commandResponse{ Params : SerializedCommandResponse,ExecutionContext Returns : SerializedCommandResponse} duplicateCommandGetsRejected{ Params :  Returns : void} ,commandRequest commandResponse commandRequest commandResponse commandRequest commandResponse ,,,,,CommandRegistrationCache ,,CommandRegistrationCache ,MeterFactory SimpleMeterRegistry DefaultMetricCollector CommandMetricsRegistry CommandDispatcher NoOpCommandInterceptors CommandHandlerDisconnected FakeStreamObserver FakeStreamObserver ClientStreamIdentification DirectCommandHandler SerializedCommand FakeStreamObserver SerializedCommand CommandDispatcher NoOpCommandInterceptors FakeStreamObserver FakeStreamObserver ClientStreamIdentification DirectCommandHandler SerializedCommand FakeStreamObserver SerializedCommand FakeStreamObserver ClientStreamIdentification FakeStreamObserver DirectCommandHandler SerializedCommand FakeStreamObserver SerializedCommand AtomicBoolean ClientStreamIdentification CommandInformation SerializedCommandResponse CommandDispatcher CommandInterceptors MessagingPlatformException CompletableFuture SerializedCommand CommandDispatcher CommandInterceptors MessagingPlatformException CompletableFuture SerializedCommand CommandCache FakeStreamObserver ClientStreamIdentification DirectCommandHandler CommandDispatcher CommandInterceptors MessagingPlatformException CompletableFuture SerializedCommand SerializedCommandResponse CommandCache CompletableFuture CommandInformation ClientStreamIdentification CommandDispatcher NoOpCommandInterceptors FakeStreamObserver ClientStreamIdentification DirectCommandHandler CompletableFuture SerializedCommand SerializedCommandResponse ,ErrorCode.COMMAND_DUPLICATED: 
axon-server-se-master,io.axoniq.axonserver.message.command,CommandMetricsRegistryTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: CommandMetricsRegistry ,setUp{ Params :  Returns : void} add{ Params :  Returns : void} testRegistryWithLabels{ Params :  Returns : void} value{ Params : Meter Returns : String} name{ Params : Meter Returns : String} ,,,,,,CommandMetricsRegistry ,,CommandMetricsRegistry ,CommandMetricsRegistry MeterFactory SimpleMeterRegistry DefaultMetricCollector ClientStreamIdentification SimpleMeterRegistry ,m: 
axon-server-se-master,io.axoniq.axonserver.message.command,CommandRegistrationCacheLoadFactorTest,1,1,0,0,0,false,0 ,0 ,FakeCommandHandler ,,loadFactorBasedDistribution{ Params :  Returns : void} testLoadFactorSetToZero{ Params :  Returns : void} matchPercentage{ Params : String,int,Map<String,AtomicInteger> Returns : boolean} createSubscribeCommand{ Params : String,String,int Returns : SubscribeCommand} dispatch{ Params : SerializedCommand Returns : void} confirm{ Params : String Returns : void} ,dispatch confirm ,,,,,,,,CommandRegistrationCache HashMap AtomicInteger CommandRegistrationCache HashMap AtomicInteger SubscribeCommand FakeCommandHandler FakeStreamObserver ClientStreamIdentification ,CommandSubscription: 
axon-server-se-master,io.axoniq.axonserver.message.command,FakeCommandHandler,3,2,0,1,0,false,0 ,0 ,FakeCommandHandler ,,loadFactorBasedDistribution{ Params :  Returns : void} testLoadFactorSetToZero{ Params :  Returns : void} matchPercentage{ Params : String,int,Map<String,AtomicInteger> Returns : boolean} createSubscribeCommand{ Params : String,String,int Returns : SubscribeCommand} dispatch{ Params : SerializedCommand Returns : void} confirm{ Params : String Returns : void} ,dispatch confirm ,,,,,,,,FakeStreamObserver ClientStreamIdentification ,CommandSubscription: 
axon-server-se-master,io.axoniq.axonserver.message.command,CommandRegistrationCacheTest,1,1,0,0,0,false,0 ,0 ,0 ,registrationCache: CommandRegistrationCache streamObserver1: StreamObserver<SerializedCommandProviderInbound> streamObserver2: StreamObserver<SerializedCommandProviderInbound> ,setup{ Params :  Returns : void} removeCommandSubscription{ Params :  Returns : void} singleDestinationShortcutTakesContextIntoAccount{ Params :  Returns : void} removeLastCommandSubscription{ Params :  Returns : void} removeConnection{ Params :  Returns : void} add{ Params :  Returns : void} get{ Params :  Returns : void} getNotFound{ Params :  Returns : void} findByExistingClient{ Params :  Returns : void} findByNonExistingClient{ Params :  Returns : void} ,,,,,,StreamObserver<SerializedCommandProviderInbound> ,,StreamObserver<SerializedCommandProviderInbound> ,CommandRegistrationCache FakeStreamObserver FakeStreamObserver DirectCommandHandler ClientStreamIdentification DirectCommandHandler ClientStreamIdentification DirectCommandHandler ClientStreamIdentification ClientStreamIdentification DirectCommandHandler ClientStreamIdentification DirectCommandHandler ClientStreamIdentification DirectCommandHandler ClientStreamIdentification ClientStreamIdentification DirectCommandHandler ClientStreamIdentification ClientStreamIdentification DirectCommandHandler ClientStreamIdentification DirectCommandHandler ClientStreamIdentification DirectCommandHandler ClientStreamIdentification ClientStreamIdentification ClientStreamIdentification ,registrationCache: , new ClientStreamIdentification(Topology.DEFAULT_CONTEXT, "client9"), "command1"
axon-server-se-master,io.axoniq.axonserver.message.command,ConsistentHashRoutingSelectorTest,1,1,0,0,0,false,0 ,0 ,0 ,messagesNumber: int tolerance: double ,testDistribution{ Params :  Returns : void} testNoHandler{ Params :  Returns : void} testSameRoutingKeySameHandler{ Params :  Returns : void} testUnregisteredHandler{ Params :  Returns : void} checkPercentage{ Params : String,double,Map<String,AtomicInteger> Returns : void} ,,,,,,double ,,double ,ConsistentHashRoutingSelector HashMap AtomicInteger ConsistentHashRoutingSelector ConsistentHashRoutingSelector HashMap AtomicInteger ConsistentHashRoutingSelector HashMap AtomicInteger AtomicInteger ,counter: , handler
axon-server-se-master,io.axoniq.axonserver.message.event,EventDispatcherTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: EventDispatcher eventStoreClient: EventStore eventStoreWithoutLeaderCalls: AtomicInteger otherContexts: Map<String, EventStore> eventStoreLocator: EventStoreLocator ,getEventStore{ Params : String Returns : EventStore} eventStore{ Params : String Returns : Mono<EventStore>} getEventStore{ Params : String,boolean Returns : EventStore} eventStore{ Params : String,boolean Returns : Mono<EventStore>} setUp{ Params :  Returns : void} appendEvent{ Params :  Returns : void} dummyEvent{ Params :  Returns : SerializedEvent} appendEventRollback{ Params :  Returns : void} hookOnComplete{ Params :  Returns : void} hookOnError{ Params : Throwable Returns : void} appendSnapshot{ Params :  Returns : void} listAggregateEventsNoEventStore{ Params :  Returns : void} listAggregateEventsWithRetry{ Params :  Returns : void} listAggregateEventsWithFailedRetry{ Params :  Returns : void} events{ Params :  Returns : void} queryEvents{ Params :  Returns : void} testTimeoutOnListAggregateEvents{ Params :  Returns : void} ,getEventStore eventStore getEventStore eventStore hookOnComplete hookOnError ,,,,,EventStoreLocator ,,EventStoreLocator ,AtomicInteger HashMap EventStoreLocator RuntimeException EventDispatcher MeterFactory DefaultMetricCollector CompletableFuture SerializedEvent CompletableFuture BaseSubscriber Throwable CompletableFuture RuntimeException SerializedEvent RuntimeException SerializedEvent FakeStreamObserver ArrayList CompletableFuture IllegalStateException CompletableFuture SerializedEventWithToken EventDispatcher MeterFactory DefaultMetricCollector ,GetAggregateEventsRequest: 
axon-server-se-master,io.axoniq.axonserver.message.event,EventSchedulerServiceTest,1,1,0,0,0,false,0 ,0 ,0 ,standaloneTaskManager: StandaloneTaskManager testSubject: EventSchedulerService ,setup{ Params :  Returns : void} scheduleEvent{ Params :  Returns : void} rescheduleEventWithoutPreviousToken{ Params :  Returns : void} rescheduleEventWithPreviousToken{ Params :  Returns : void} cancelScheduledEvent{ Params :  Returns : void} ,,,,,,EventSchedulerService ,,EventSchedulerService ,EventSchedulerService JacksonTaskPayloadSerializer FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver ,responseObserver: 
axon-server-se-master,io.axoniq.axonserver.message.event,ScheduledEventExecutorTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: ScheduledEventExecutor localEventStore: LocalEventStore ,setUp{ Params :  Returns : void} executeAsync{ Params :  Returns : void} executeAsyncInvalidPayload{ Params :  Returns : void} ,,,,,,LocalEventStore ,,LocalEventStore ,ScheduledEventExecutor ScheduledEventWrapper ,: , "Timeout waiting for result"
axon-server-se-master,io.axoniq.axonserver.message.event,SequenceValidationStreamObserverTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: SequenceValidationStreamObserver delegateMock: CallStreamObserver<SerializedEvent> context: String ,setup{ Params :  Returns : void} testValidSequence{ Params :  Returns : void} testValidSequenceErrorsOut{ Params :  Returns : void} testInvalidSequence{ Params :  Returns : void} testInvalidSequenceLogOnly{ Params :  Returns : void} testRepeatedSequence{ Params :  Returns : void} serializedEvent{ Params : long Returns : SerializedEvent} testLogging{ Params :  Returns : void} ,,,,,,String ,,String ,SequenceValidationStreamObserver RuntimeException SequenceValidationStreamObserver SerializedEvent ListAppender ,logsList: , 0
axon-server-se-master,io.axoniq.axonserver.message,MetaDataBasedTargetSelectorTest,1,1,0,0,0,false,0 ,0 ,0 ,clientTagsCache: ClientTagsCache testSubject: MetaDataBasedTargetSelector ,findOnOneMetaDataValue{ Params :  Returns : void} findWithoutMetaData{ Params :  Returns : void} findClientNotInCache{ Params :  Returns : void} findWithoutMatchingMetaData{ Params :  Returns : void} ,,,,,,MetaDataBasedTargetSelector ,,MetaDataBasedTargetSelector ,ClientTagsCache DefaultClientIdRegistry MetaDataBasedTargetSelector ClientTagsUpdate ClientTagsUpdate HashSet ClientStreamIdentification ClientStreamIdentification ClientTagsUpdate ClientTagsUpdate HashSet ClientStreamIdentification ClientStreamIdentification ClientTagsUpdate ClientTagsUpdate HashSet ClientStreamIdentification ClientTagsUpdate ClientTagsUpdate HashSet ClientStreamIdentification ClientStreamIdentification ,targets: 
axon-server-se-master,io.axoniq.axonserver.message.query,ActiveQueryTest,1,0,0,0,0,false,0 ,0 ,0 ,,forward{ Params :  Returns : void} forwardFirstNonErrorResult{ Params :  Returns : void} forwardFirstError{ Params :  Returns : void} cancelWithError{ Params :  Returns : void} mockedQueryHandlers{ Params :  Returns : Set<QueryHandler<?>>} serializedQuery{ Params :  Returns : SerializedQuery} ,,,,,,,,,ArrayList ActiveQuery ArrayList ActiveQuery ArrayList ActiveQuery ArrayList ActiveQuery SerializedQuery ,QueryRequest: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryCacheTest,1,1,0,0,0,false,TestCase ,0 ,0 ,testSubject: QueryCache ,setUp{ Params :  Returns : void} onFullCapacityThrowError{ Params :  Returns : void} cancelWithErrorOnTimeout{ Params :  Returns : void} ,,,,,,QueryCache ,,QueryCache ,QueryCache QueryCache ,: , "Query cancelled due to timeout"
axon-server-se-master,io.axoniq.axonserver.message.query,QueryDispatcherTest,1,1,0,0,0,false,0 ,0 ,MyQueryInterceptors ,meterFactory: MeterFactory queryMetricsRegistry: QueryMetricsRegistry queryCache: QueryCache testSubject: QueryDispatcher registrationCache: QueryRegistrationCache ,setup{ Params :  Returns : void} queryResponse{ Params :  Returns : void} queryResponseScatterGather{ Params :  Returns : void} queryNotFound{ Params :  Returns : void} queryQueueFull{ Params :  Returns : void} queryFound{ Params :  Returns : void} queryRequestRejected{ Params :  Returns : void} queryRequestInterceptorFailed{ Params :  Returns : void} queryResponseInterceptorFailed{ Params :  Returns : void} dispatch{ Params : SubscriptionQueryRequest Returns : void} dispatchProxied{ Params :  Returns : void} dispatchProxiedNotFound{ Params :  Returns : void} clientDisconnectedError{ Params :  Returns : void} dispatchProxiedWithError{ Params :  Returns : void} queryCancellation{ Params :  Returns : void} queryFlowControl{ Params :  Returns : void} queryDuplicated{ Params :  Returns : void} queryRequest{ Params : SerializedQuery,ExecutionContext Returns : SerializedQuery} queryResponse{ Params : QueryResponse,ExecutionContext Returns : QueryResponse} mockedQueryHandler{ Params :  Returns : Set<QueryHandler<?>>} mockedQueryHandlers{ Params :  Returns : Set<QueryHandler<?>>} serializedQuery{ Params :  Returns : SerializedQuery} cancelRemoveTheInstructionFromDestinationQueue{ Params :  Returns : void} ,dispatch queryRequest queryResponse ,,,,,QueryRegistrationCache ,,QueryRegistrationCache ,MeterFactory DefaultMetricCollector QueryMetricsRegistry QueryCache QueryDispatcher NoOpQueryInterceptors AtomicInteger AtomicBoolean ActiveQuery AtomicInteger AtomicBoolean ActiveQuery FakeStreamObserver SerializedQuery QueryDispatcher NoOpQueryInterceptors FakeStreamObserver HashSet FakeStreamObserver DirectQueryHandler ClientStreamIdentification SerializedQuery FakeStreamObserver HashSet FakeStreamObserver DirectQueryHandler ClientStreamIdentification SerializedQuery QueryDispatcher MyQueryInterceptors CompletableFuture CompletableFuture SerializedQuery QueryDispatcher MyQueryInterceptors CompletableFuture CompletableFuture SerializedQuery QueryCache QueryDispatcher MyQueryInterceptors CompletableFuture CompletableFuture QueryHandler ClientStreamIdentification SerializedQuery FakeStreamObserver SerializedQuery DirectQueryHandler ClientStreamIdentification AtomicInteger SerializedQuery SerializedQuery LinkedList AtomicReference SerializedQuery AtomicInteger DirectQueryHandler FailingStreamObserver ClientStreamIdentification HashSet FakeStreamObserver DirectQueryHandler ClientStreamIdentification SerializedQuery HashSet FakeStreamObserver DirectQueryHandler ClientStreamIdentification SerializedQuery CompletableFuture CompletableFuture HashSet FakeStreamObserver DirectQueryHandler ClientStreamIdentification ActiveQuery QueryDispatcher MyQueryInterceptors CompletableFuture CompletableFuture SerializedQuery MessagingPlatformException MessagingPlatformException MessagingPlatformException HashSet SerializedQuery QueryCache QueryDispatcher MyQueryInterceptors HashSet FakeStreamObserver DirectQueryHandler ClientStreamIdentification AtomicReference SerializedQuery ,completion: 
axon-server-se-master,io.axoniq.axonserver.message.query,MyQueryInterceptors,3,2,0,1,0,false,0 ,0 ,MyQueryInterceptors ,,setup{ Params :  Returns : void} queryResponse{ Params :  Returns : void} queryResponseScatterGather{ Params :  Returns : void} queryNotFound{ Params :  Returns : void} queryQueueFull{ Params :  Returns : void} queryFound{ Params :  Returns : void} queryRequestRejected{ Params :  Returns : void} queryRequestInterceptorFailed{ Params :  Returns : void} queryResponseInterceptorFailed{ Params :  Returns : void} dispatch{ Params : SubscriptionQueryRequest Returns : void} dispatchProxied{ Params :  Returns : void} dispatchProxiedNotFound{ Params :  Returns : void} clientDisconnectedError{ Params :  Returns : void} dispatchProxiedWithError{ Params :  Returns : void} queryCancellation{ Params :  Returns : void} queryFlowControl{ Params :  Returns : void} queryDuplicated{ Params :  Returns : void} queryRequest{ Params : SerializedQuery,ExecutionContext Returns : SerializedQuery} queryResponse{ Params : QueryResponse,ExecutionContext Returns : QueryResponse} mockedQueryHandler{ Params :  Returns : Set<QueryHandler<?>>} mockedQueryHandlers{ Params :  Returns : Set<QueryHandler<?>>} serializedQuery{ Params :  Returns : SerializedQuery} cancelRemoveTheInstructionFromDestinationQueue{ Params :  Returns : void} ,dispatch queryRequest queryResponse ,,,,QueryInterceptors ,,,,MessagingPlatformException MessagingPlatformException MessagingPlatformException ,response: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryMetricsRegistryTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: QueryMetricsRegistry clientIdentification: ClientStreamIdentification ,setUp{ Params :  Returns : void} add{ Params :  Returns : void} get{ Params :  Returns : void} ,,,,,,ClientStreamIdentification ,,ClientStreamIdentification ,ClientStreamIdentification QueryMetricsRegistry MeterFactory SimpleMeterRegistry DefaultMetricCollector QueryDefinition QueryDefinition ,queryMetric: 
axon-server-se-master,io.axoniq.axonserver.message.query,QueryRegistrationCacheTest,1,1,0,0,0,false,0 ,0 ,DummyStreamObserver ,queryRegistrationCache: QueryRegistrationCache dummyStreamObserver: DummyStreamObserver queryHandlerSelector: QueryHandlerSelector ,setup{ Params :  Returns : void} remove{ Params :  Returns : void} removeWithRemaining{ Params :  Returns : void} remove1{ Params :  Returns : void} add{ Params :  Returns : void} find{ Params :  Returns : void} getForClient{ Params :  Returns : void} find1{ Params :  Returns : void} findFromCandidates{ Params :  Returns : void} querySubscriptionTwice{ Params :  Returns : void} onNext{ Params : QueryProviderInbound Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} ,onNext onError onCompleted ,,,,,QueryHandlerSelector ,,QueryHandlerSelector ,DummyStreamObserver QueryRegistrationCache DirectQueryHandler ClientStreamIdentification QueryDefinition DirectQueryHandler ClientStreamIdentification DirectQueryHandler ClientStreamIdentification QueryDefinition QueryDefinition DirectQueryHandler ClientStreamIdentification QueryDefinition QueryDefinition QueryDefinition QueryDefinition DirectQueryHandler ClientStreamIdentification QueryDefinition QueryDefinition QueryDefinition DirectQueryHandler ClientStreamIdentification QueryDefinition QueryDefinition DirectQueryHandler ClientStreamIdentification DirectQueryHandler ClientStreamIdentification QueryDefinition QueryDefinition QueryDefinition DirectQueryHandler ClientStreamIdentification ClientStreamIdentification QueryRegistrationCache QueryDefinition DirectQueryHandler ClientStreamIdentification QueryDefinition DirectQueryHandler ClientStreamIdentification QueryDefinition DirectQueryHandler ClientStreamIdentification ,handlers: 
axon-server-se-master,io.axoniq.axonserver.message.query,DummyStreamObserver,3,2,0,0,0,false,0 ,0 ,DummyStreamObserver ,,setup{ Params :  Returns : void} remove{ Params :  Returns : void} removeWithRemaining{ Params :  Returns : void} remove1{ Params :  Returns : void} add{ Params :  Returns : void} find{ Params :  Returns : void} getForClient{ Params :  Returns : void} find1{ Params :  Returns : void} findFromCandidates{ Params :  Returns : void} querySubscriptionTwice{ Params :  Returns : void} onNext{ Params : QueryProviderInbound Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} ,onNext onError onCompleted ,,,,StreamObserver ,,,,,handlers: 
axon-server-se-master,io.axoniq.axonserver.message.query,RoundRobinQueryHandlerSelectorTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: RoundRobinQueryHandlerSelector ,setUp{ Params :  Returns : void} select{ Params :  Returns : void} selectWithoutLast{ Params :  Returns : void} ,,,,,,RoundRobinQueryHandlerSelector ,,RoundRobinQueryHandlerSelector ,RoundRobinQueryHandlerSelector TreeSet ClientStreamIdentification ClientStreamIdentification QueryDefinition QueryDefinition QueryDefinition TreeSet ClientStreamIdentification QueryDefinition TreeSet ClientStreamIdentification QueryDefinition QueryDefinition ,selected: 
axon-server-se-master,io.axoniq.axonserver.message.query.subscription,DirectSubscriptionQueriesTest,1,1,0,0,0,false,0 ,0 ,0 ,,onSubscriptionQueryRequested{ Params :  Returns : void} onSubscriptionQueryCanceled{ Params :  Returns : void} ,,,,,,,,,DirectSubscriptionQueries SubscriptionQueryStarted DirectSubscriptionQueries SubscriptionQueryStarted SubscriptionQueryCanceled SubscriptionQueryCanceled ,subscriptions: 
axon-server-se-master,io.axoniq.axonserver.message.query.subscription,FakeSubscriptionMetrics,1,1,0,0,0,false,0 ,SubscriptionMetrics ,0 ,totalCount: long activesCount: long updatesCount: long ,totalCount{ Params :  Returns : Long} activesCount{ Params :  Returns : Long} updatesCount{ Params :  Returns : Long} printOn{ Params : Media Returns : void} ,totalCount activesCount updatesCount printOn ,,,,SubscriptionMetrics ,long ,,long ,,subscriptions: 
axon-server-se-master,io.axoniq.axonserver.message.query.subscription.handler,DirectUpdateHandlerTest,1,1,0,0,0,false,0 ,0 ,0 ,,onUpdate{ Params :  Returns : void} onComplete{ Params :  Returns : void} onCompleteExceptionally{ Params :  Returns : void} ,,,,,,,,,LinkedList DirectUpdateHandler LinkedList DirectUpdateHandler LinkedList DirectUpdateHandler ,messages: , 0
axon-server-se-master,io.axoniq.axonserver.message.query.subscription.metric,ApplicationSubscriptionMetricRegistryTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: ApplicationSubscriptionMetricRegistry ,setUp{ Params :  Returns : void} getInitial{ Params :  Returns : void} getAfterSubscribe{ Params :  Returns : void} query{ Params : String Returns : SubscriptionQuery} subscriptionCancelledBeforeStartedTest{ Params :  Returns : void} subscriptionCancelledAfterStartedTest{ Params :  Returns : void} ,,,,,,ApplicationSubscriptionMetricRegistry ,,ApplicationSubscriptionMetricRegistry ,DefaultMetricCollector ApplicationSubscriptionMetricRegistry MeterFactory SimpleMeterRegistry SubscriptionQueryStarted SubscriptionQueryResponseReceived SubscriptionQueryCanceled SubscriptionQueryStarted SubscriptionQueryCanceled ,metrics: 
axon-server-se-master,io.axoniq.axonserver.message.query.subscription.metric,QuerySubscriptionMetricRegistryTest,1,1,0,0,0,false,TestCase ,0 ,0 ,component: String context: String query: String testSubject: QuerySubscriptionMetricRegistry ,setUp{ Params :  Returns : void} testTestOnSubscriptionStarted{ Params :  Returns : void} testOnSubscriptionCancelledAfterStarted{ Params :  Returns : void} testTestOnSubscriptionCancelledBeforeStarted{ Params :  Returns : void} query{ Params : String Returns : SubscriptionQuery} ,,,,,,QuerySubscriptionMetricRegistry ,,QuerySubscriptionMetricRegistry ,DefaultMetricCollector QuerySubscriptionMetricRegistry MeterFactory SimpleMeterRegistry SubscriptionQueryStarted SubscriptionQueryStarted SubscriptionQueryCanceled SubscriptionQueryCanceled ,QueryRequest: 
axon-server-se-master,io.axoniq.axonserver.message.query.subscription,SubscriptionQueryDispatcherTest,1,1,0,0,0,false,0 ,0 ,0 ,COMPONENT: String context: String subscriptionQuery: SubscriptionQuery cache: QueryRegistrationCache testSubject: SubscriptionQueryDispatcher ,init{ Params :  Returns : void} getDirectSubscriptions{ Params :  Returns : Iterator<DirectSubscriptionQueries.ContextSubscriptionQuery>} onQueryDisconnected{ Params :  Returns : void} subscribeQuery{ Params : Consumer<SubscriptionQueryRequest>,String Returns : SubscribeQuery} dispatch{ Params : SubscriptionQueryRequest Returns : void} onInitialResultRequest{ Params :  Returns : void} onSubscribe{ Params :  Returns : void} onSubscribeWithoutHandlers{ Params :  Returns : void} onUnsubscribe{ Params :  Returns : void} ,dispatch ,,,,,SubscriptionQueryDispatcher ,,SubscriptionQueryDispatcher ,QueryRegistrationCache SubscriptionQueryDispatcher ArrayList ContextSubscriptionQuery AtomicInteger QueryHandlerDisconnected QueryHandler FakeStreamObserver ClientStreamIdentification SubscribeQuery AtomicInteger SubscriptionQueryInitialResultRequested AtomicInteger SubscriptionQueryRequested AtomicReference SubscriptionQueryRequested AtomicInteger SubscriptionQueryCanceled ,count: 
axon-server-se-master,io.axoniq.axonserver.metric,CompositeMetricTest,1,1,0,0,0,false,0 ,0 ,0 ,compositeMetric: CompositeMetric ,count{ Params :  Returns : void} min{ Params :  Returns : void} max{ Params :  Returns : void} mean{ Params :  Returns : void} ,,,,,,,,,CompositeMetric FakeClusterMetric FakeClusterMetric ,compositeMetric: 
axon-server-se-master,io.axoniq.axonserver.metric,FakeClusterMetric,1,1,0,0,0,false,0 ,ClusterMetric ,0 ,count: long min: double max: double mean: double value: double ,value{ Params :  Returns : double} min{ Params :  Returns : double} max{ Params :  Returns : double} mean{ Params :  Returns : double} count{ Params :  Returns : long} ,value min max mean count ,,,,ClusterMetric ,double ,,double ,,compositeMetric: 
axon-server-se-master,io.axoniq.axonserver.metric,SlidingWindowTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: SlidingWindow<AtomicLong> clock: FakeClock ,init{ Params :  Returns : void} current{ Params :  Returns : void} bucket{ Params :  Returns : void} reduce{ Params :  Returns : void} ,,,,,,FakeClock ,,FakeClock ,FakeClock SlidingWindow AtomicLong ,testSubject: , 1, TimeUnit.MINUTES
axon-server-se-master,io.axoniq.axonserver.plugin,OsgiControllerTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: OsgiController ,setup{ Params :  Returns : void} loadBundle{ Params :  Returns : void} getAxonServerProperties{ Params :  Returns : void} ,,,,,,OsgiController ,,OsgiController ,OsgiController File ,service: 
axon-server-se-master,io.axoniq.axonserver.plugin,PluginConfigurationManagerTest,1,1,0,0,0,false,0 ,0 ,SampleConfigurationListener ,INVALID_VALUE_FOR_A_ID_2: String testSubject: PluginConfigurationManager sampleConfigurationListener: SampleConfigurationListener ,setUp{ Params :  Returns : void} onEnabled{ Params :  Returns : void} updateConfiguration{ Params :  Returns : void} validateNewConfigurationBeforeApplying{ Params :  Returns : void} configuration{ Params :  Returns : void} removed{ Params : String Returns : void} updated{ Params : String,Map<String,?> Returns : void} configuration{ Params :  Returns : Configuration} validate{ Params : String,R Returns : Validated<R>} ,removed updated configuration validate ,,,,,SampleConfigurationListener ,,SampleConfigurationListener ,SampleConfigurationListener PluginConfigurationManager HashMap HashMap PluginEnabledEvent PluginKey HashMap HashMap PluginKey HashMap HashMap HashMap PluginKey PluginKey HashMap Configuration Invalid ConfigurationError Valid ,properties: , 0
axon-server-se-master,io.axoniq.axonserver.plugin,SampleConfigurationListener,3,2,0,0,0,false,0 ,0 ,SampleConfigurationListener ,configurationPerContext: Map<String, Map<String, ?>> ,setUp{ Params :  Returns : void} onEnabled{ Params :  Returns : void} updateConfiguration{ Params :  Returns : void} validateNewConfigurationBeforeApplying{ Params :  Returns : void} configuration{ Params :  Returns : void} removed{ Params : String Returns : void} updated{ Params : String,Map<String,?> Returns : void} configuration{ Params :  Returns : Configuration} validate{ Params : String,R Returns : Validated<R>} ,removed updated configuration validate ,,,,ConfigurationListener ,,,,HashMap Configuration Invalid ConfigurationError Valid ,List: , new ConfigurationError("id2", "the provided value is invalid for this key")
axon-server-se-master,io.axoniq.axonserver.rest,ClientApplicationRestControllerTest,1,1,0,0,0,false,0 ,0 ,0 ,,getComponentInstances{ Params :  Returns : void} listClients{ Params :  Returns : void} ,,,,,,,,,FakeClient FakeClient FakeClient ClientApplicationRestController DefaultClientIdRegistry FakeClient FakeClient FakeClient ClientApplicationRestController DefaultClientIdRegistry ,clientList: , clientC
axon-server-se-master,io.axoniq.axonserver.rest,CommandRestControllerTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: CommandRestController commandDispatcher: CommandDispatcher ,setUp{ Params :  Returns : void} get{ Params :  Returns : void} getByComponent{ Params :  Returns : void} getByNotExistingComponent{ Params :  Returns : void} ,,,,,,CommandDispatcher ,,CommandDispatcher ,CommandRegistrationCache DirectCommandHandler FakeStreamObserver ClientStreamIdentification CommandRestController ObjectMapper GsonMedia ,iterator: 
axon-server-se-master,io.axoniq.axonserver.rest,HttpStreamingQueryTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: HttpStreamingQuery ,setUp{ Params :  Returns : void} eventsPerAggregate{ Params : String,long,long,long Returns : Flux<SerializedEvent>} init{ Params : boolean,long Returns : void} getLastSequenceNumber{ Params : String,SearchHint Returns : Optional<Long>} registerCloseListener{ Params : Runnable Returns : Registration} getLastEvent{ Params : String,long,long Returns : Optional<SerializedEvent>} processEventsPerAggregate{ Params : String,long,long,long,Consumer<SerializedEvent> Returns : void} processEventsPerAggregateHighestFirst{ Params : String,long,long,int,Consumer<SerializedEvent> Returns : void} getType{ Params :  Returns : EventTypeContext} transactionIterator{ Params : long,long Returns : CloseableIterator<SerializedTransactionWithToken>} query{ Params : QueryOptions,Predicate<EventWithToken> Returns : void} getFirstToken{ Params :  Returns : long} getTokenAt{ Params : long Returns : long} getGlobalIterator{ Params : long Returns : CloseableIterator<SerializedEventWithToken>} nextToken{ Params :  Returns : long} transformContents{ Params : int,Flux<EventWithToken> Returns : Flux<Long>} createEventStorageEngine{ Params : String Returns : EventStorageEngine} createSnapshotStorageEngine{ Params : String Returns : EventStorageEngine} query{ Params :  Returns : void} send{ Params : Object Returns : void} send{ Params : SseEventBuilder Returns : void} ,eventsPerAggregate init getLastSequenceNumber registerCloseListener getLastEvent processEventsPerAggregate processEventsPerAggregateHighestFirst getType transactionIterator query getFirstToken getTokenAt getGlobalIterator nextToken transformContents createEventStorageEngine createSnapshotStorageEngine send send ,,,,,HttpStreamingQuery ,,HttpStreamingQuery ,EventStorageEngine EventTypeContext LocalEventStore EventStoreFactory SimpleMeterRegistry NoOpEventInterceptors DefaultEventStoreLocator HttpStreamingQuery ArrayList CountDownLatch SseEmitter ,messages: 
axon-server-se-master,io.axoniq.axonserver.rest,MetricsRestControllerTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: MetricsRestController commandMetricsRegistry: CommandMetricsRegistry queryMetricsRegistry: QueryMetricsRegistry testclient: ClientStreamIdentification queryClient: ClientStreamIdentification principal: Principal ,setUp{ Params :  Returns : void} dispatch{ Params : SerializedCommand Returns : void} confirm{ Params : String Returns : void} compareTo{ Params : CommandHandler Returns : int} dispatch{ Params : SubscriptionQueryRequest Returns : void} getCommandMetrics{ Params :  Returns : void} getQueryMetrics{ Params :  Returns : void} ,dispatch confirm compareTo dispatch ,,,,,Principal ,,Principal ,CommandRegistrationCache ClientStreamIdentification CommandHandler CommandMetricsRegistry MeterFactory SimpleMeterRegistry DefaultMetricCollector QueryRegistrationCache RoundRobinQueryHandlerSelector ClientStreamIdentification QueryDefinition QueryHandler QueryMetricsRegistry MeterFactory SimpleMeterRegistry DefaultMetricCollector MetricsRestController DefaultTopology MessagingPlatformConfiguration SystemInfoProvider QueryDefinition ,queries: , 0
axon-server-se-master,io.axoniq.axonserver.rest,OverviewModelTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: OverviewModel axonServersOverviewProvider: AxonServersOverviewProvider ,setUp{ Params :  Returns : void} overview{ Params :  Returns : void} overviewV2{ Params :  Returns : void} asSet{ Params : T Returns : Set<T>} ,,,,,,AxonServersOverviewProvider ,,AxonServersOverviewProvider ,FakeAxonServer SimpleAxonServerNode FakeAxonServer SimpleAxonServerNode FakeApplication AxonServersOverviewProvider OverviewModel HashSet ,set: , item
axon-server-se-master,io.axoniq.axonserver.rest,PublicRestControllerTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: PublicRestController limits: FeatureChecker clusterController: Topology commandDispatcher: CommandDispatcher queryDispatcher: QueryDispatcher eventDispatcher: EventDispatcher ,setup{ Params :  Returns : void} getPort{ Params :  Returns : int} getHostName{ Params :  Returns : String} getClusterNodes{ Params :  Returns : void} getNodeInfo{ Params :  Returns : void} licenseInfo{ Params :  Returns : void} ,getPort getHostName ,,,,,EventDispatcher ,,EventDispatcher ,FeatureChecker MessagingPlatformConfiguration SystemInfoProvider DefaultTopology PublicRestController AxonServers DefaultVersionInfoProvider FakeSubscriptionMetrics ,licenseInfo: 
axon-server-se-master,io.axoniq.axonserver.rest,QueryRestControllerTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: QueryRestController registationCache: QueryRegistrationCache queryDispatcher: QueryDispatcher ,setUp{ Params :  Returns : void} get{ Params :  Returns : void} getByComponent{ Params :  Returns : void} getByNotExistingComponent{ Params :  Returns : void} getByNotExistingContext{ Params :  Returns : void} ,,,,,,QueryDispatcher ,,QueryDispatcher ,QueryRegistrationCache ClientStreamIdentification QueryDefinition DirectQueryHandler FakeStreamObserver QueryRestController ObjectMapper GsonMedia ,iterator: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,FakeApplication,1,1,0,0,0,false,0 ,Application ,0 ,name: String component: String context: String instances: int connectedhubNodes: Iterable<String> ,name{ Params :  Returns : String} component{ Params :  Returns : String} contexts{ Params :  Returns : Iterable<String>} instances{ Params :  Returns : int} connectedHubNodes{ Params :  Returns : Iterable<String>} ,name component contexts instances connectedHubNodes ,,,,Application ,Iterable<String> ,,Iterable<String> ,,Arrays: , context
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,FakeAxonServer,1,1,0,0,0,false,0 ,AxonServer ,0 ,active: boolean node: AxonServerNode contexts: Set<String> disconnectedContexts: Set<String> ,isActive{ Params :  Returns : boolean} node{ Params :  Returns : AxonServerNode} contexts{ Params :  Returns : Set<String>} storage{ Params :  Returns : Set<Storage>} ,isActive node contexts storage ,,,,AxonServer ,Set<String> ,,Set<String> ,,Collections: 
axon-server-se-master,io.axoniq.axonserver.rest.svg.mapping,FakeStorage,1,1,0,0,0,false,0 ,Storage ,0 ,name: String contexts: Iterable<String> connectedHubNodes: Iterable<String> ,context{ Params :  Returns : String} master{ Params :  Returns : boolean} ,context master ,,,,Storage ,Iterable<String> ,,Iterable<String> ,,contexts: 
axon-server-se-master,io.axoniq.axonserver.rest,WebSecurityConfigurationTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: TokenAuthenticationFilter statusCodeHolder: AtomicInteger response: ServletResponse ,setStatus{ Params : int Returns : void} setUp{ Params :  Returns : void} getPort{ Params :  Returns : int} getHostName{ Params :  Returns : String} filterValidToken{ Params :  Returns : void} getHeader{ Params : String Returns : String} filterValidTokenParameter{ Params :  Returns : void} getParameter{ Params : String Returns : String} filterInvalidToken{ Params :  Returns : void} getHeader{ Params : String Returns : String} filterInvalidTokenLocalRequest{ Params :  Returns : void} getHeader{ Params : String Returns : String} getLocalAddr{ Params :  Returns : String} getRemoteAddr{ Params :  Returns : String} getRequestURI{ Params :  Returns : String} ,setStatus getPort getHostName getHeader getParameter getHeader getHeader getLocalAddr getRemoteAddr getRequestURI ,,,,,ServletResponse ,,ServletResponse ,AtomicInteger MockHttpServletResponse MessagingPlatformConfiguration SystemInfoProvider AxonServerStandardAccessController TokenAuthenticationFilter MockHttpServletRequest AtomicReference MockHttpServletRequest AtomicReference MockHttpServletRequest AtomicReference MockHttpServletRequest AtomicReference ,statusCodeHolder: 
axon-server-se-master,io.axoniq.axonserver.serializer,GsonMediaTest,1,1,0,0,0,false,0 ,0 ,0 ,,testProperties{ Params :  Returns : void} testObjects{ Params :  Returns : void} testCollections{ Params :  Returns : void} testEmpty{ Params :  Returns : void} ,,,,,,,,,GsonMedia GsonMedia GsonMedia GsonMedia ,: , "{}", json
axon-server-se-master,io.axoniq.axonserver.spring,FakeApplicationEventPublisher,1,1,0,0,0,false,0 ,ApplicationEventPublisher ,0 ,consumers: Collection<Consumer<Object>> events: Collection<Object> ,publishEvent{ Params : ApplicationEvent Returns : void} publishEvent{ Params : Object Returns : void} events{ Params :  Returns : Iterable<Object>} add{ Params : Consumer<Object> Returns : void} ,publishEvent publishEvent ,,,,ApplicationEventPublisher ,Collection<Object> ,,Collection<Object> ,LinkedList LinkedList ,consumers: , consumer
axon-server-se-master,io.axoniq.axonserver.spring,FakeMessageChannel,1,1,0,0,0,false,0 ,MessageChannel ,0 ,success: boolean ,send{ Params : Message<?> Returns : boolean} send{ Params : Message<?>,long Returns : boolean} ,send send ,,,,MessageChannel ,boolean ,,boolean ,,consumers: , consumer
axon-server-se-master,io.axoniq.axonserver.taskscheduler,StandaloneTaskManagerTest,1,1,0,0,0,false,0 ,0 ,0 ,testSubject: StandaloneTaskManager tasks: Map<String, Task> scheduler: FakeScheduledExecutorService transientException: AtomicBoolean nonTransientException: AtomicBoolean executionCounter: AtomicInteger ,setup{ Params :  Returns : void} getTransaction{ Params : TransactionDefinition Returns : TransactionStatus} commit{ Params : TransactionStatus Returns : void} rollback{ Params : TransactionStatus Returns : void} createLocalTask{ Params :  Returns : void} createLocalTaskAfter11Minutes{ Params :  Returns : void} createLocalTaskTransientException{ Params :  Returns : void} createLocalTaskNonTransientException{ Params :  Returns : void} cancel{ Params :  Returns : void} ,getTransaction commit rollback ,,,,,AtomicInteger ,,AtomicInteger ,HashMap FakeScheduledExecutorService AtomicBoolean AtomicBoolean AtomicInteger StandaloneTaskManager CompletableFuture TransientException RuntimeException JacksonTaskPayloadSerializer PlatformTransactionManager SimpleTransactionStatus UserInfo UserInfo UserInfo UserInfo TaskPayload ,tasks: 
axon-server-se-master,io.axoniq.axonserver,TestSystemInfoProvider,1,1,0,0,0,false,0 ,SystemInfoProvider ,0 ,,getPort{ Params :  Returns : int} getHostName{ Params :  Returns : String} ,getPort getHostName ,,,,SystemInfoProvider ,,,,,tasks: 
axon-server-se-master,io.axoniq.axonserver.transport.grpc.eventprocessor,EventProcessorMappingTest,1,1,0,0,0,false,0 ,0 ,0 ,,testMapping{ Params :  Returns : void} ,,,,,,,,,FakeEventProcessorSegment FakeEvenProcessorInstance FakeEventProcessorSegment FakeEvenProcessorInstance FakeEventProcessor EventProcessorMapping ,testSubject: , eventProcessor
axon-server-se-master,io.axoniq.axonserver.transport.grpc,EventProcessorGrpcControllerTest,1,1,0,0,0,false,0 ,0 ,0 ,CONNECTION_CONTEXT: String testSubject: EventProcessorGrpcController result: boolean accepted: boolean error: boolean authentication: org.springframework.security.core.Authentication allowedContexts: Set<String> ,setUp{ Params :  Returns : void} clientsBy{ Params : EventProcessorId,Authentication Returns : Flux<String>} eventProcessorsByComponent{ Params : String,Authentication Returns : Flux<EventProcessor>} eventProcessors{ Params : Authentication Returns : Flux<EventProcessor>} pause{ Params : EventProcessorId,Authentication Returns : Mono<Result>} start{ Params : EventProcessorId,Authentication Returns : Mono<Result>} split{ Params : EventProcessorId,Authentication Returns : Mono<Result>} merge{ Params : EventProcessorId,Authentication Returns : Mono<Result>} move{ Params : EventProcessorId,int,String,Authentication Returns : Mono<Result>} loadBalance{ Params : EventProcessorId,String,Authentication Returns : Mono<Void>} setAutoLoadBalanceStrategy{ Params : EventProcessorId,String,Authentication Returns : Mono<Void>} getBalancingStrategies{ Params : Authentication Returns : Iterable<LoadBalancingStrategy>} accessController{ Params :  Returns : AxonServerAccessController} allowed{ Params : String,String,org.springframework.security.core.Authentication Returns : boolean} authenticate{ Params : String Returns : org.springframework.security.core.Authentication} result{ Params :  Returns : Result} isSuccess{ Params :  Returns : boolean} isAccepted{ Params :  Returns : boolean} eventProcessor{ Params :  Returns : EventProcessor} name{ Params :  Returns : String} tokenStoreIdentifier{ Params :  Returns : String} context{ Params :  Returns : String} id{ Params :  Returns : EventProcessorId} isStreaming{ Params :  Returns : boolean} mode{ Params :  Returns : String} instances{ Params :  Returns : Iterable<EventProcessorInstance>} loadBalancingStrategyName{ Params :  Returns : String} pauseEventProcessor{ Params :  Returns : void} pauseEventProcessorOtherContext{ Params :  Returns : void} pauseEventProcessorOtherContextNoAccess{ Params :  Returns : void} pauseEventProcessorNoAccessControl{ Params :  Returns : void} startEventProcessor{ Params :  Returns : void} startEventProcessorOtherContext{ Params :  Returns : void} startEventProcessorOtherContextNoAccess{ Params :  Returns : void} startEventProcessorNoAccessControl{ Params :  Returns : void} splitEventProcessor{ Params :  Returns : void} splitEventProcessorOtherContext{ Params :  Returns : void} splitEventProcessorOtherContextNoAccess{ Params :  Returns : void} splitEventProcessorNoAccessControl{ Params :  Returns : void} mergeEventProcessor{ Params :  Returns : void} mergeEventProcessorOtherContext{ Params :  Returns : void} mergeEventProcessorOtherContextNoAccess{ Params :  Returns : void} mergeEventProcessorNoAccessControl{ Params :  Returns : void} moveEventProcessorSegment{ Params :  Returns : void} moveEventProcessorOtherContext{ Params :  Returns : void} moveEventProcessorOtherContextNoAccess{ Params :  Returns : void} moveEventProcessorNoAccessControl{ Params :  Returns : void} eventProcessorIdentifier{ Params :  Returns : EventProcessorIdentifier} eventProcessorIdentifier{ Params : String Returns : EventProcessorIdentifier} move{ Params : EventProcessorIdentifier Returns : MoveSegment} ,clientsBy eventProcessorsByComponent eventProcessors pause start split merge move loadBalance setAutoLoadBalanceStrategy getBalancingStrategies allowed authenticate isSuccess isAccepted name tokenStoreIdentifier context id isStreaming mode instances loadBalancingStrategyName ,,,,,Set<String> ,,Set<String> ,HashSet EventProcessorAdminService MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException MessagingPlatformException EventProcessorGrpcController AxonServerAccessController Result EventProcessorId EventProcessor FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver FakeStreamObserver ,MoveSegment: 
axon-server-se-master,io.axoniq.axonserver.transport.grpc,EventStoreTransformationGrpcControllerITCase,1,1,0,0,0,false,0 ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.transport.rest.json,StreamingProcessorSegmentTest,1,1,0,0,0,false,0 ,0 ,0 ,,printOn{ Params :  Returns : void} ,,,,,,,,,GsonMedia FakeEventProcessorSegment StreamingProcessorSegment ,gsonMedia: 
axon-server-se-master,io.axoniq.axonserver.transport.rest.json,StreamingProcessorTest,1,1,0,0,0,false,0 ,0 ,0 ,,testPrintOnCreatesFullyFledgedJson{ Params :  Returns : void} testPrintOnDisableCanMergeIfThereIsOnlyOneSegment{ Params :  Returns : void} testPrintOnEnableCanMergeWhenOnlyOneSegmentOfMultipleIsClaimed{ Params :  Returns : void} ,,,,,,,,,FakeEventProcessorSegment FakeEvenProcessorInstance FakeEventProcessorSegment FakeEvenProcessorInstance FakeEventProcessor StreamingProcessor GsonMedia FakeEventProcessorSegment FakeEvenProcessorInstance FakeEventProcessor StreamingProcessor GsonMedia FakeEventProcessorSegment FakeEvenProcessorInstance FakeEventProcessor StreamingProcessor GsonMedia ObjectMapper ,actual: , "/warnings/0/message"
axon-server-se-master,io.axoniq.axonserver.transport.rest.json.warning,ActiveWarningsTest,1,1,0,0,0,false,0 ,0 ,0 ,,testOne{ Params :  Returns : void} testNone{ Params :  Returns : void} ,,,,,,,,,FakeWarning FakeWarning FakeWarning ActiveWarnings FakeWarning FakeWarning ActiveWarnings ,iterator: 
axon-server-se-master,io.axoniq.axonserver.transport.rest.json.warning,DuplicatedTrackersTest,1,1,0,0,0,false,0 ,0 ,0 ,,testActive{ Params :  Returns : void} testNotActive{ Params :  Returns : void} ,,,,,,,,,FakeEventProcessorSegment FakeEventProcessorSegment DuplicatedTrackers FakeEventProcessorSegment FakeEventProcessorSegment DuplicatedTrackers ,warning: 
axon-server-se-master,io.axoniq.axonserver.transport.rest.json.warning,FakeWarning,1,1,0,0,0,false,0 ,Warning ,0 ,active: boolean message: String ,active{ Params :  Returns : boolean} message{ Params :  Returns : String} ,active message ,,,,Warning ,String ,,String ,,warning: 
axon-server-se-master,io.axoniq.axonserver.transport.rest.json.warning,MissingTrackersTest,1,1,0,0,0,false,0 ,0 ,0 ,,testActive{ Params :  Returns : void} testNotActive{ Params :  Returns : void} testActiveWithDuplicatesSegments{ Params :  Returns : void} testNotActiveWithDuplicatesSegments{ Params :  Returns : void} ,,,,,,,,,FakeEventProcessorSegment FakeEventProcessorSegment MissingTrackers FakeEventProcessorSegment FakeEventProcessorSegment MissingTrackers FakeEventProcessorSegment FakeEventProcessorSegment MissingTrackers FakeEventProcessorSegment FakeEventProcessorSegment FakeEventProcessorSegment FakeEventProcessorSegment MissingTrackers ,warning: 
axon-server-se-master,io.axoniq.axonserver.util,AuthenticatedUser,1,1,0,0,0,false,0 ,Authentication ,0 ,user: String ,username{ Params :  Returns : String} hasRole{ Params : String,String Returns : boolean} application{ Params :  Returns : boolean} isLocallyManaged{ Params :  Returns : boolean} hasAnyRole{ Params : String Returns : boolean} ,username hasRole application isLocallyManaged hasAnyRole ,,,,Authentication ,String ,,String ,,warning: 
axon-server-se-master,io.axoniq.axonserver.util,FailingStreamObserver,1,1,0,0,0,false,0 ,StreamObserver<T> ,0 ,,onNext{ Params : T Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} ,onNext onError onCompleted ,,,,StreamObserver ,,,,RuntimeException ,warning: 
axon-server-se-master,io.axoniq.axonserver.util,SerializedObjectMapperTest,1,1,0,0,0,false,0 ,0 ,0 ,THIS_IS_THE_SAMPLE_DATA: String ,map{ Params :  Returns : void} mapBinary{ Params :  Returns : void} ,,,,,,,,,,SerializedObjectMapper: , serializedObjectWithBinaryContent
axon-server-se-master,io.axoniq.axonserver.util,TimeLimitedCacheTest,1,1,0,0,0,false,0 ,0 ,0 ,fakeClock: FakeClock testSubject: TimeLimitedCache<String, String> ,put{ Params :  Returns : void} get{ Params :  Returns : void} removeIf{ Params :  Returns : void} ,,,,,,TimeLimitedCache<String,String> ,,TimeLimitedCache<String,String> ,FakeClock TimeLimitedCache ,testSubject: 
axon-server-se-master,io.axoniq.axonserver.websocket,WebsocketProcessorEventsSourceTest,1,1,0,0,0,false,0 ,0 ,0 ,,on{ Params :  Returns : void} onException{ Params :  Returns : void} ,,,,,,,,,AtomicInteger WebsocketProcessorEventsSource EventProcessorStatusUpdate EventProcessorStatusUpdate EventProcessorStatusUpdate EventProcessorStatusUpdate EventProcessorStatusUpdate EventProcessorStatusUpdate AtomicInteger WebsocketProcessorEventsSource IllegalArgumentException EventProcessorStatusUpdate ,scheduler: , false
axon-server-se-master,io.axoniq.cli,ActivatePlugin,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[],boolean Returns : void} ,,run ,,,,,,,StringBuilder ,: , commandLine
axon-server-se-master,io.axoniq.cli,AddNodeToContext,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,response: 
axon-server-se-master,io.axoniq.cli,AddNodeToReplicationGroup,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,response: 
axon-server-se-master,io.axoniq.cli,AxonIQCliCommand,1,1,0,0,0,false,0 ,0 ,0 ,,processCommandLine{ Params : String,String[],Option Returns : CommandLine} createUrl{ Params : CommandLine,String,Option Returns : String} createClient{ Params : CommandLine Returns : CloseableHttpClient} getJSON{ Params : CloseableHttpClient,String,Class<T>,int,String Returns : T} responseBody{ Params : CloseableHttpResponse Returns : String} getMap{ Params : CloseableHttpClient,String,TypeReference<T>,int,String Returns : T} delete{ Params : CloseableHttpClient,String,int,String Returns : void} delete{ Params : CloseableHttpClient,String,Predicate<Integer>,String Returns : void} postJSON{ Params : CloseableHttpClient,String,Object,int,String Returns : String} postJSON{ Params : CloseableHttpClient,String,Object,int,String,Class<T> Returns : T} postJSON{ Params : CloseableHttpClient,String,Object,Predicate<Integer>,String,Class<T> Returns : T} patchJSON{ Params : CloseableHttpClient,String,Object,int,String,Class<T> Returns : T} option{ Params : CommandLine,Option Returns : String} jsonOutput{ Params : CommandLine Returns : boolean} getToken{ Params : CommandLine Returns : String} ,,processCommandLine createUrl createClient getJSON responseBody getMap delete delete postJSON postJSON postJSON patchJSON option jsonOutput getToken ,,,,,,,Options DefaultParser HelpFormatter RuntimeException StringBuilder SSLContextBuilder NoopHostnameVerifier RuntimeException HttpGet ObjectMapper CommandExecutionException BufferedReader InputStreamReader StringBuilder BufferedReader InputStreamReader HttpGet CommandExecutionException BufferedReader InputStreamReader ObjectMapper HttpDelete CommandExecutionException HttpPost ObjectMapper ByteArrayEntity CommandExecutionException HttpPatch ObjectMapper ByteArrayEntity CommandExecutionException File BufferedReader FileReader ,e: 
axon-server-se-master,io.axoniq.cli,Cluster,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,RuntimeException ,e: 
axon-server-se-master,io.axoniq.cli,CommandDispatcher,1,1,0,0,0,false,0 ,0 ,CommandProcessor CommandInformation ,executorMap: Map<String, CommandInformation> ,process{ Params : String[] Returns : void} toString{ Params :  Returns : String} process{ Params : String[] Returns : void} main{ Params : String[] Returns : void} usage{ Params :  Returns : void} ,toString ,main usage ,,,,,,,HashMap CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation CommandInformation ,e: 
axon-server-se-master,io.axoniq.cli,CommandProcessor,3,0,0,0,0,true,0 ,0 ,CommandProcessor CommandInformation ,,process{ Params : String[] Returns : void} toString{ Params :  Returns : String} process{ Params : String[] Returns : void} main{ Params : String[] Returns : void} usage{ Params :  Returns : void} ,toString ,main usage ,,,,,,,,e: 
axon-server-se-master,io.axoniq.cli,CommandInformation,3,0,0,1,0,false,0 ,0 ,CommandProcessor CommandInformation ,group: Group commandProcessor: CommandProcessor ,process{ Params : String[] Returns : void} toString{ Params :  Returns : String} process{ Params : String[] Returns : void} main{ Params : String[] Returns : void} usage{ Params :  Returns : void} ,toString ,main usage ,,,,,,,,commandProcessor: , args
axon-server-se-master,io.axoniq.cli,CommandExecutionException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,errorCode: int url: String ,getErrorCode{ Params :  Returns : int} getUrl{ Params :  Returns : String} ,,,,,,String ,,String ,,commandProcessor: , args
axon-server-se-master,io.axoniq.cli,CommandOptions,1,1,0,0,0,false,0 ,0 ,0 ,ADDRESS: Option USE_HTTPS: Option CONNECT_INSECURE: Option APPLICATION: Option PLUGIN_NAME: Option PLUGIN_VERSION: Option PLUGIN_CONTEXT: Option APPLICATION_ROLES: Option USER_ROLES: Option APPLICATION_DESCRIPTION: Option NODE_NAME: Option NODE_ROLE: Option CONTEXT: Option REPLICATIONGROUP: Option CONTEXTREPLICATIONGROUP: Option PRIMARY_NODES: Option CONTEXT_PRIMARY_NODES: Option ACTIVE_BACKUP_NODES: Option PASSIVE_BACKUP_NODES: Option MESSAGING_ONLY_NODES: Option SECONDARY_NODES: Option PROPERTIES: Option CONTEXT_TO_REGISTER_IN: Option DONT_REGISTER_IN_CONTEXTS: Option PRESERVE_EVENT_STORE: Option INTERNALHOST: Option INTERNALPORT: Option TOKEN: Option USERNAME: Option PASSWORD: Option NO_PASSWORD: Option SET_TOKEN: Option OUTPUT: Option FILE: Option PLUGIN_FILE: Option PROPERTIES_FILE: Option ,,,,,,,,,,,null
axon-server-se-master,io.axoniq.cli,ConfigurePlugin,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,PluginConfiguration IllegalArgumentException IllegalArgumentException Yaml FileInputStream ,: , commandLine
axon-server-se-master,io.axoniq.cli,DeleteApplication,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,: , commandLine
axon-server-se-master,io.axoniq.cli,DeleteContext,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,VALID_STATUS_CODES: List<Integer> ,run{ Params : String[] Returns : void} ,,run ,,,,,,,,: , commandLine
axon-server-se-master,io.axoniq.cli,DeleteEvents,1,1,0,0,0,false,0 ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,: , commandLine
axon-server-se-master,io.axoniq.cli,DeleteNodeFromContext,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,: , commandLine
axon-server-se-master,io.axoniq.cli,DeleteNodeFromReplicationGroup,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,: , commandLine
axon-server-se-master,io.axoniq.cli,DeletePlugin,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,StringBuilder ,: , commandLine
axon-server-se-master,io.axoniq.cli,DeleteReplicationGroup,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,: , commandLine
axon-server-se-master,io.axoniq.cli,DeleteUser,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,: , commandLine
axon-server-se-master,io.axoniq.cli,InitNode,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,VALID_STATUS_CODES: List<Integer> ,run{ Params : String[] Returns : void} ,,run ,,,,,,,,: , commandLine
axon-server-se-master,io.axoniq.cli.json,Application,1,1,0,0,0,false,0 ,0 ,0 ,name: String description: String token: String roles: Set<ApplicationContext> metaData: Map<String, String> ,getDescription{ Params :  Returns : String} setDescription{ Params : String Returns : void} getRoles{ Params :  Returns : Set<ApplicationContext>} setRoles{ Params : Set<ApplicationContext> Returns : void} getName{ Params :  Returns : String} setName{ Params : String Returns : void} getToken{ Params :  Returns : String} setToken{ Params : String Returns : void} getMetaData{ Params :  Returns : Map<String,String>} setMetaData{ Params : Map<String,String> Returns : void} ,,,,,,Map<String,String> ,,Map<String,String> ,HashSet HashMap HashMap ArrayList ArrayList ApplicationContext ,: , commandLine
axon-server-se-master,io.axoniq.cli.json,ApplicationContext,1,1,0,0,0,false,0 ,0 ,0 ,context: String roles: List<String> ,getRoles{ Params :  Returns : List<String>} setRoles{ Params : List<String> Returns : void} getContext{ Params :  Returns : String} setContext{ Params : String Returns : void} toString{ Params :  Returns : String} ,toString ,,,,,List<String> ,,List<String> ,,String: , ",", roles
axon-server-se-master,io.axoniq.cli.json,ClusterNode,1,1,0,0,0,false,0 ,0 ,0 ,name: String hostName: String internalHostName: String grpcPort: Integer internalGrpcPort: Integer httpPort: Integer connected: boolean master: boolean context: String noContexts: Boolean ,getName{ Params :  Returns : String} setName{ Params : String Returns : void} getHostName{ Params :  Returns : String} setHostName{ Params : String Returns : void} getInternalHostName{ Params :  Returns : String} setInternalHostName{ Params : String Returns : void} getGrpcPort{ Params :  Returns : Integer} setGrpcPort{ Params : Integer Returns : void} getInternalGrpcPort{ Params :  Returns : Integer} setInternalGrpcPort{ Params : Integer Returns : void} getHttpPort{ Params :  Returns : Integer} setHttpPort{ Params : Integer Returns : void} isConnected{ Params :  Returns : boolean} setConnected{ Params : boolean Returns : void} isMaster{ Params :  Returns : boolean} setMaster{ Params : boolean Returns : void} getContext{ Params :  Returns : String} setContext{ Params : String Returns : void} getNoContexts{ Params :  Returns : Boolean} setNoContexts{ Params : Boolean Returns : void} ,,,,,,Boolean ,,Boolean ,,String: , ",", roles
axon-server-se-master,io.axoniq.cli.json,ContextNode,1,1,0,0,0,false,0 ,0 ,0 ,context: String leader: String replicationGroup: String nodes: List<String> roles: List<NodeAndRole> metaData: Map<String, String> ,getContext{ Params :  Returns : String} setContext{ Params : String Returns : void} getNodes{ Params :  Returns : List<String>} setNodes{ Params : List<String> Returns : void} getLeader{ Params :  Returns : String} setLeader{ Params : String Returns : void} getRoles{ Params :  Returns : List<NodeAndRole>} setRoles{ Params : List<NodeAndRole> Returns : void} hasRoles{ Params :  Returns : boolean} concatNodes{ Params :  Returns : String} concatRoles{ Params :  Returns : String} getReplicationGroup{ Params :  Returns : String} setReplicationGroup{ Params : String Returns : void} getMetaData{ Params :  Returns : Map<String,String>} setMetaData{ Params : Map<String,String> Returns : void} ,,,,,,Map<String,String> ,,Map<String,String> ,ArrayList ArrayList HashMap ,Collectors: , ","
axon-server-se-master,io.axoniq.cli.json,ContextReplyNode,1,1,0,0,0,false,0 ,0 ,0 ,name: String master: String connectedNodes: String ,getName{ Params :  Returns : String} setName{ Params : String Returns : void} getMaster{ Params :  Returns : String} setMaster{ Params : String Returns : void} getConnectedNodes{ Params :  Returns : String[]} setConnectedNodes{ Params : String[] Returns : void} ,,,,,,String[] ,,String[] ,,Collectors: , ","
axon-server-se-master,io.axoniq.cli.json,NodeAndRole,1,1,0,0,0,false,0 ,0 ,0 ,node: String role: String ,getRole{ Params :  Returns : String} setRole{ Params : String Returns : void} getNode{ Params :  Returns : String} setNode{ Params : String Returns : void} toString{ Params :  Returns : String} ,toString ,,,,,String ,,String ,,Collectors: , ","
axon-server-se-master,io.axoniq.cli.json,PluginConfiguration,1,1,0,0,0,false,0 ,0 ,0 ,context: String name: String version: String properties: Map<String, Map<String, Object>> ,getName{ Params :  Returns : String} setName{ Params : String Returns : void} getVersion{ Params :  Returns : String} setVersion{ Params : String Returns : void} getProperties{ Params :  Returns : Map<String,Map<String,Object>>} setProperties{ Params : Map<String,Map<String,Object>> Returns : void} getContext{ Params :  Returns : String} setContext{ Params : String Returns : void} addProperty{ Params : String,String,String Returns : void} ,,,,,,Map<String,Map<String,Object>> ,,Map<String,Map<String,Object>> ,HashMap HashMap ,properties: , group, g -> new HashMap<>()
axon-server-se-master,io.axoniq.cli.json,PluginInfo,1,1,0,0,0,false,0 ,0 ,PluginContextInfo ,name: String version: String contextInfoList: PluginContextInfo ,getVersion{ Params :  Returns : String} setVersion{ Params : String Returns : void} getName{ Params :  Returns : String} setName{ Params : String Returns : void} getContextInfoList{ Params :  Returns : PluginContextInfo[]} setContextInfoList{ Params : PluginContextInfo[] Returns : void} getContext{ Params :  Returns : String} setContext{ Params : String Returns : void} getConfiguration{ Params :  Returns : String} setConfiguration{ Params : String Returns : void} isActive{ Params :  Returns : boolean} setActive{ Params : boolean Returns : void} ,,,,,,PluginContextInfo[] ,,PluginContextInfo[] ,,properties: , group, g -> new HashMap<>()
axon-server-se-master,io.axoniq.cli.json,PluginContextInfo,3,1,0,1,0,false,0 ,0 ,PluginContextInfo ,context: String configuration: String active: boolean ,getVersion{ Params :  Returns : String} setVersion{ Params : String Returns : void} getName{ Params :  Returns : String} setName{ Params : String Returns : void} getContextInfoList{ Params :  Returns : PluginContextInfo[]} setContextInfoList{ Params : PluginContextInfo[] Returns : void} getContext{ Params :  Returns : String} setContext{ Params : String Returns : void} getConfiguration{ Params :  Returns : String} setConfiguration{ Params : String Returns : void} isActive{ Params :  Returns : boolean} setActive{ Params : boolean Returns : void} ,,,,,,boolean ,,boolean ,,properties: , group, g -> new HashMap<>()
axon-server-se-master,io.axoniq.cli.json,ReplicationGroupJSON,1,1,0,0,0,false,0 ,0 ,0 ,name: String leader: String roles: List<NodeAndRole> changePending: boolean pendingSince: long ,getName{ Params :  Returns : String} setName{ Params : String Returns : void} getLeader{ Params :  Returns : String} setLeader{ Params : String Returns : void} isChangePending{ Params :  Returns : boolean} setChangePending{ Params : boolean Returns : void} getPendingSince{ Params :  Returns : long} setPendingSince{ Params : long Returns : void} getRoles{ Params :  Returns : List<NodeAndRole>} setRoles{ Params : List<NodeAndRole> Returns : void} hasRoles{ Params :  Returns : boolean} concatRoles{ Params :  Returns : String} ,,,,,,long ,,long ,ArrayList ,Collectors: , ","
axon-server-se-master,io.axoniq.cli.json,RestResponse,1,1,0,0,0,false,0 ,0 ,0 ,success: boolean message: String ,isSuccess{ Params :  Returns : boolean} setSuccess{ Params : boolean Returns : void} getMessage{ Params :  Returns : String} setMessage{ Params : String Returns : void} ,,,,,,String ,,String ,,Collectors: , ","
axon-server-se-master,io.axoniq.cli.json,User,1,1,0,0,0,false,0 ,0 ,0 ,userName: String password: String roles: String ,getUserName{ Params :  Returns : String} getPassword{ Params :  Returns : String} getRoles{ Params :  Returns : String[]} ,,,,,,String[] ,,String[] ,,Collectors: , ","
axon-server-se-master,io.axoniq.cli,ListApplications,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,Collectors: , ","
axon-server-se-master,io.axoniq.cli,ListContexts,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,context: 
axon-server-se-master,io.axoniq.cli,ListPlugins,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} showExtensionsAsTable{ Params : PluginInfo[] Returns : void} ,,run showExtensionsAsTable ,,,,,,,,contextInfo: 
axon-server-se-master,io.axoniq.cli,ListReplicationGroups,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,replicationGroup: 
axon-server-se-master,io.axoniq.cli,ListUsers,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,user: 
axon-server-se-master,io.axoniq.cli,Metrics,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,ConcurrentSkipListMap TypeReference TypeReference ,System.out: , "%-50s %10s\n", name, value
axon-server-se-master,io.axoniq.cli,PasswordReader,1,1,0,0,0,false,0 ,0 ,0 ,INSTANCE: PasswordReader console: Function<String, String> ,readPassword{ Params :  Returns : String} readFromStdin{ Params : String Returns : String} ,,,,,,Function<String,String> ,,Function<String,String> ,PasswordReader Scanner ,scanner: 
axon-server-se-master,io.axoniq.cli,RegisterApplication,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,MIN_LENGTH: int ,run{ Params : String[] Returns : void} ,,run ,,,,,,,Application IllegalArgumentException ,System.out: , "Please note this token as this will only be provided once!"
axon-server-se-master,io.axoniq.cli,RegisterContext,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,VALID_STATUS_CODES: List<Integer> ,run{ Params : String[] Returns : void} addNodes{ Params : CommandLine,Option,String,Set<String>,List<NodeAndRole> Returns : void} ,,run addNodes ,,,,,,,ContextNode ArrayList HashSet IllegalArgumentException ArrayList IllegalArgumentException NodeAndRole ,definedNodes: , primary
axon-server-se-master,io.axoniq.cli,RegisterNode,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,RuntimeException RuntimeException ClusterNode ,: , commandLine
axon-server-se-master,io.axoniq.cli,RegisterReplicationGroup,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,VALID_STATUS_CODES: List<Integer> ,run{ Params : String[] Returns : void} addNodes{ Params : CommandLine,Option,String,Set<String>,List<NodeAndRole> Returns : void} ,,run addNodes ,,,,,,,ReplicationGroupJSON ArrayList HashSet IllegalArgumentException NodeAndRole ,definedNodes: , primary
axon-server-se-master,io.axoniq.cli,RegisterUser,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,User ,: , commandLine
axon-server-se-master,io.axoniq.cli,UnregisterNode,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,,: , commandLine
axon-server-se-master,io.axoniq.cli,UnregisterPlugin,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,StringBuilder ,: , commandLine
axon-server-se-master,io.axoniq.cli,UpdateContextProperties,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,HashMap IllegalArgumentException ,: , commandLine
axon-server-se-master,io.axoniq.cli,UpdateLicense,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,File CommandExecutionException HttpPost CommandExecutionException ,: , response
axon-server-se-master,io.axoniq.cli,UploadPlugin,1,1,0,0,0,false,AxonIQCliCommand ,0 ,0 ,,run{ Params : String[] Returns : void} ,,run ,,,,,,,File CommandExecutionException HttpPost CommandExecutionException ,: , response
axon-server-se-master,io.axoniq.axonserver,UsernameAuthentication,1,1,0,0,0,false,0 ,Authentication ,0 ,username: String ,username{ Params :  Returns : String} hasRole{ Params : String,String Returns : boolean} application{ Params :  Returns : boolean} isLocallyManaged{ Params :  Returns : boolean} hasAnyRole{ Params : String Returns : boolean} ,username hasRole application isLocallyManaged hasAnyRole ,,,,Authentication ,String ,,String ,,: , response
axon-server-se-master,io.axoniq.axonserver.util,StringUtils,1,1,0,0,0,false,0 ,0 ,0 ,,getOrDefault{ Params : String,String Returns : String} isEmpty{ Params : String Returns : boolean} sanitize{ Params : String Returns : String} username{ Params : String Returns : String} ,,getOrDefault isEmpty sanitize username ,,,,,,,,: , username, "<anonymous>"
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation,ActionScheduledTask,1,1,0,0,0,false,0 ,TransformationTask ,0 ,disposable: AtomicReference<Disposable> scheduledExecutorService: AtomicReference<ScheduledExecutorService> action: Mono<Void> ,start{ Params :  Returns : void} stop{ Params :  Returns : void} apply{ Params :  Returns : Disposable} ,start stop ,,,,TransformationTask ,Mono<Void> ,,Mono<Void> ,AtomicReference AtomicReference ,: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation,ActionSupplier,2,1,0,0,0,true,0 ,TransformationTask ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.api,EventStoreTransformationService,2,1,0,0,0,true,0 ,TransformationTask ,Transformation ,,transformation{ Params : String,String,Authentication Returns : Mono<Transformation>} start{ Params : String,String,String,Authentication Returns : Mono<Void>} transformations{ Params : String,Authentication Returns : Flux<Transformation>} replaceEvent{ Params : String,String,long,Event,long,Authentication Returns : Mono<Void>} deleteEvent{ Params : String,String,long,long,Authentication Returns : Mono<Void>} startCompacting{ Params : String,String,Authentication Returns : Mono<Void>} cancel{ Params : String,String,Authentication Returns : Mono<Void>} startApplying{ Params : String,String,long,Authentication Returns : Mono<Void>} id{ Params :  Returns : String} context{ Params :  Returns : String} description{ Params :  Returns : String} version{ Params :  Returns : int} lastSequence{ Params :  Returns : Optional<Long>} status{ Params :  Returns : Status} applyRequester{ Params :  Returns : Optional<String>} appliedAt{ Params :  Returns : Optional<Instant>} ,,,,,,,,,,transformation: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.api,Transformation,3,0,0,0,0,true,0 ,TransformationTask ,Transformation ,,transformation{ Params : String,String,Authentication Returns : Mono<Transformation>} start{ Params : String,String,String,Authentication Returns : Mono<Void>} transformations{ Params : String,Authentication Returns : Flux<Transformation>} replaceEvent{ Params : String,String,long,Event,long,Authentication Returns : Mono<Void>} deleteEvent{ Params : String,String,long,long,Authentication Returns : Mono<Void>} startCompacting{ Params : String,String,Authentication Returns : Mono<Void>} cancel{ Params : String,String,Authentication Returns : Mono<Void>} startApplying{ Params : String,String,long,Authentication Returns : Mono<Void>} id{ Params :  Returns : String} context{ Params :  Returns : String} description{ Params :  Returns : String} version{ Params :  Returns : int} lastSequence{ Params :  Returns : Optional<Long>} status{ Params :  Returns : Status} applyRequester{ Params :  Returns : Optional<String>} appliedAt{ Params :  Returns : Optional<Instant>} ,,,,,,,,,,transformation: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,CleanTransformationApplied,2,1,0,0,0,true,0 ,TransformationTask ,0 ,,clean{ Params :  Returns : Mono<Void>} ,,,,,,,,,,transformation: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,CleanTransformationProgressStore,1,1,0,0,0,false,0 ,CleanTransformationApplied ,0 ,transformationProgressStore: TransformationProgressStore ,clean{ Params :  Returns : Mono<Void>} ,clean ,,,,CleanTransformationApplied ,TransformationProgressStore ,,TransformationProgressStore ,,transformationProgressStore: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,DefaultTransformationApplyExecutor,1,1,0,0,0,false,0 ,TransformationApplyExecutor ,0 ,logger: Logger EMPTY_EVENT: Event transformationEntryStoreSupplier: TransformationEntryStoreProvider localStateStore: TransformationProgressStore transformer: EventStoreTransformer applyingTransformations: Set<String> ,apply{ Params : Transformation Returns : Mono<Void>} eventWithToken{ Params : TransformationAction Returns : EventWithToken} eventWithToken{ Params : Event,long Returns : EventWithToken} parseFrom{ Params : byte[] Returns : Mono<TransformationAction>} ,apply ,,,,TransformationApplyExecutor ,Set<String> ,,Set<String> ,CopyOnWriteArraySet RuntimeException ,sink: , e
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,EventStoreTransformer,2,1,0,0,0,true,0 ,TransformationApplyExecutor ,0 ,,transformEvents{ Params : String,int,Flux<EventWithToken> Returns : Flux<Long>} ,,,,,,,,,,sink: , e
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,LocalMarkTransformationApplied,1,1,0,0,0,false,0 ,MarkTransformationApplied ,0 ,logger: Logger transformers: Transformers ,markApplied{ Params : String,String Returns : Mono<Void>} ,markApplied ,,,,MarkTransformationApplied ,Transformers ,,Transformers ,,logger: , "Error marking the transformation {} as applied.", transformationId, error
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,MarkTransformationApplied,2,1,0,0,0,true,0 ,MarkTransformationApplied ,0 ,,markApplied{ Params : String,String Returns : Mono<Void>} ,,,,,,,,,,logger: , "Error marking the transformation {} as applied.", transformationId, error
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,TransformationApplyAction,1,1,0,0,0,false,0 ,ActionSupplier ,ApplierTransformation ,logger: Logger applier: TransformationApplyExecutor markTransformationApplied: MarkTransformationApplied cleanTransformationApplied: CleanTransformationApplied transformations: Transformations ,get{ Params :  Returns : Mono<Void>} id{ Params :  Returns : String} context{ Params :  Returns : String} version{ Params :  Returns : int} lastSequence{ Params :  Returns : long} toString{ Params :  Returns : String} ,get id context version lastSequence toString ,,,,ActionSupplier ,Transformations ,,Transformations ,ApplierTransformation IllegalStateException ,cleanTransformationApplied: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,ApplierTransformation,3,0,0,1,0,false,0 ,ActionSupplier ,ApplierTransformation ,state: Transformation ,get{ Params :  Returns : Mono<Void>} id{ Params :  Returns : String} context{ Params :  Returns : String} version{ Params :  Returns : int} lastSequence{ Params :  Returns : long} toString{ Params :  Returns : String} ,get id context version lastSequence toString ,,,,Transformation ,Transformation ,,Transformation ,IllegalStateException ,: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,TransformationApplyExecutor,2,1,0,0,0,true,0 ,ActionSupplier ,Transformation ,,id{ Params :  Returns : String} context{ Params :  Returns : String} version{ Params :  Returns : int} lastSequence{ Params :  Returns : long} apply{ Params : Transformation Returns : Mono<Void>} ,,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,Transformation,3,0,0,0,0,true,0 ,ActionSupplier ,Transformation ,,id{ Params :  Returns : String} context{ Params :  Returns : String} version{ Params :  Returns : int} lastSequence{ Params :  Returns : long} apply{ Params : Transformation Returns : Mono<Void>} ,,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,TransformationApplyingState,2,1,0,0,0,true,0 ,ActionSupplier ,0 ,,lastAppliedSequence{ Params :  Returns : long} applied{ Params :  Returns : boolean} ,,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.apply,TransformationProgressStore,2,1,0,0,0,true,0 ,ActionSupplier ,0 ,,initState{ Params : String Returns : Mono<TransformationApplyingState>} stateFor{ Params : String Returns : Mono<TransformationApplyingState>} incrementLastSequence{ Params : String,long Returns : Mono<Void>} markAsApplied{ Params : String Returns : Mono<Void>} clean{ Params :  Returns : Mono<Void>} ,,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean,DefaultTransformationCleanExecutor,1,1,0,0,0,false,0 ,TransformationCleanExecutor ,0 ,transformationEntryStoreSupplier: TransformationEntryStoreProvider ,clean{ Params : String,String Returns : Mono<Void>} ,clean ,,,,TransformationCleanExecutor ,TransformationEntryStoreProvider ,,TransformationEntryStoreProvider ,,transformationEntryStoreSupplier: , context, transformationId
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean,TransformationCleanAction,1,1,0,0,0,false,0 ,ActionSupplier ,0 ,logger: Logger cleanExecutor: TransformationCleanExecutor transformationsToBeCleaned: TransformationsToBeCleaned ,get{ Params :  Returns : Mono<Void>} ,get ,,,,ActionSupplier ,TransformationsToBeCleaned ,,TransformationsToBeCleaned ,,transformation: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean,TransformationCleanExecutor,2,1,0,0,0,true,0 ,ActionSupplier ,0 ,,clean{ Params : String,String Returns : Mono<Void>} ,,,,,,,,,,transformation: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean,TransformationIdentifier,2,1,0,0,0,true,0 ,ActionSupplier ,0 ,,context{ Params :  Returns : String} id{ Params :  Returns : String} ,,,,,,,,,,transformation: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean.transformations,AppliedTransformations,1,1,0,0,0,false,0 ,TransformationsToBeCleaned ,0 ,localTransformationStores: TransformationsToBeCleaned repository: EventStoreTransformationRepository ,get{ Params :  Returns : Flux<TransformationIdentifier>} ,get ,,,,TransformationsToBeCleaned ,EventStoreTransformationRepository ,,EventStoreTransformationRepository ,,entity: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean.transformations,CancelledTransformations,1,1,0,0,0,false,0 ,TransformationsToBeCleaned ,0 ,localTransformationStores: TransformationsToBeCleaned repository: EventStoreTransformationRepository ,get{ Params :  Returns : Flux<TransformationIdentifier>} ,get ,,,,TransformationsToBeCleaned ,EventStoreTransformationRepository ,,EventStoreTransformationRepository ,,entity: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean.transformations,DefaultTransformationIdentifier,1,1,0,0,0,false,0 ,TransformationIdentifier ,0 ,transformationId: String context: String ,context{ Params :  Returns : String} id{ Params :  Returns : String} ,context id ,,,,TransformationIdentifier ,String ,,String ,,entity: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean.transformations,FileSystemTransformations,1,1,0,0,0,false,0 ,TransformationsToBeCleaned ,0 ,baseStorage: File ,get{ Params :  Returns : Flux<TransformationIdentifier>} ,get ,,,,TransformationsToBeCleaned ,File ,,File ,DefaultTransformationIdentifier ,storeDirectory: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean.transformations,JpaTransformationIdentifier,1,1,0,0,0,false,0 ,TransformationIdentifier ,0 ,entity: EventStoreTransformationJpa ,context{ Params :  Returns : String} id{ Params :  Returns : String} ,context id ,,,,TransformationIdentifier ,EventStoreTransformationJpa ,,EventStoreTransformationJpa ,,entity: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean.transformations,MissingTransformations,1,1,0,0,0,false,0 ,TransformationsToBeCleaned ,0 ,localTransformationStores: TransformationsToBeCleaned repository: EventStoreTransformationRepository ,get{ Params :  Returns : Flux<TransformationIdentifier>} ,get ,,,,TransformationsToBeCleaned ,EventStoreTransformationRepository ,,EventStoreTransformationRepository ,,transformation: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean.transformations,MultipleTransformations,1,1,0,0,0,false,0 ,TransformationsToBeCleaned ,0 ,transformationsArray: Iterable<TransformationsToBeCleaned> ,get{ Params :  Returns : Flux<TransformationIdentifier>} ,get ,,,,TransformationsToBeCleaned ,Iterable<TransformationsToBeCleaned> ,,Iterable<TransformationsToBeCleaned> ,,Flux: , transformationsArray
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.clean,TransformationsToBeCleaned,2,1,0,0,0,true,0 ,TransformationsToBeCleaned ,0 ,,get{ Params :  Returns : Flux<TransformationIdentifier>} ,,,,,,,,,,Flux: , transformationsArray
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.compact,CompactingContexts,2,1,0,0,0,true,0 ,TransformationsToBeCleaned ,CompactingContext ,,compactionId{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.compact,CompactingContext,3,0,0,0,0,true,0 ,TransformationsToBeCleaned ,CompactingContext ,,compactionId{ Params :  Returns : String} context{ Params :  Returns : String} ,,,,,,,,,,Flux: , transformationsArray
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.compact,DefaultEventStoreCompactionExecutor,1,1,0,0,0,false,0 ,EventStoreCompactionExecutor ,0 ,logger: Logger eventStoreCompacter: EventStoreCompactor compactingContexts: Set<String> ,compact{ Params : Compaction Returns : Mono<Void>} ,compact ,,,,EventStoreCompactionExecutor ,Set<String> ,,Set<String> ,CopyOnWriteArraySet RuntimeException ,compaction: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.compact,EventStoreCompactAction,1,1,0,0,0,false,0 ,ActionSupplier ,Compaction ,logger: Logger compactingContexts: Flux<CompactingContext> compactionExecutor: EventStoreCompactionExecutor markEventStoreCompacted: MarkEventStoreCompacted ,get{ Params :  Returns : Mono<Void>} context{ Params :  Returns : String} ,get context ,,,,ActionSupplier ,MarkEventStoreCompacted ,,MarkEventStoreCompacted ,Compaction ,logger: , "Error during compaction", throwable
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.compact,Compaction,3,0,0,1,0,false,0 ,ActionSupplier ,Compaction ,context: String ,get{ Params :  Returns : Mono<Void>} context{ Params :  Returns : String} ,get context ,,,,Compaction ,String ,,String ,,logger: , "Error during compaction", throwable
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.compact,EventStoreCompactionExecutor,2,1,0,0,0,true,0 ,ActionSupplier ,Compaction ,,compact{ Params : Compaction Returns : Mono<Void>} context{ Params :  Returns : String} ,,,,,,,,,,logger: , "Error during compaction", throwable
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.compact,Compaction,3,0,0,0,0,true,0 ,ActionSupplier ,Compaction ,,compact{ Params : Compaction Returns : Mono<Void>} context{ Params :  Returns : String} ,,,,,,,,,,logger: , "Error during compaction", throwable
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.compact,EventStoreCompactor,2,1,0,0,0,true,0 ,ActionSupplier ,0 ,,compact{ Params : String Returns : Mono<Void>} ,,,,,,,,,,logger: , "Error during compaction", throwable
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.compact,LocalMarkEventStoreCompacted,1,1,0,0,0,false,0 ,MarkEventStoreCompacted ,0 ,logger: Logger transformers: Transformers ,markCompacted{ Params : String,String Returns : Mono<Void>} ,markCompacted ,,,,MarkEventStoreCompacted ,Transformers ,,Transformers ,,logger: , "Error marking context {} as compacted.", context, error
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.compact,MarkEventStoreCompacted,2,1,0,0,0,true,0 ,MarkEventStoreCompacted ,0 ,,markCompacted{ Params : String,String Returns : Mono<Void>} ,,,,,,,,,,logger: , "Error marking context {} as compacted.", context, error
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,EventStoreStateJpa,1,1,0,0,0,false,0 ,0 ,0 ,context: String state: State inProgressOperationId: String ,context{ Params :  Returns : String} setContext{ Params : String Returns : void} state{ Params :  Returns : State} setState{ Params : State Returns : void} inProgressOperationId{ Params :  Returns : String} setInProgressOperationId{ Params : String Returns : void} ,,,,,,String ,,String ,,logger: , "Error marking context {} as compacted.", context, error
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,EventStoreStateRepository,2,1,0,0,0,true,0 ,0 ,0 ,,findByState{ Params : State Returns : Iterable<EventStoreStateJpa>} findOptionalByInProgressOperationId{ Params : String Returns : Optional<EventStoreStateJpa>} ,,,,,,,,,,logger: , "Error marking context {} as compacted.", context, error
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,EventStoreTransformationJpa,1,1,0,0,0,false,0 ,0 ,0 ,transformationId: String context: String status: Status version: int description: String dateApplied: Date applier: String lastSequence: Long lastEventToken: Long ,transformationId{ Params :  Returns : String} setTransformationId{ Params : String Returns : void} context{ Params :  Returns : String} setContext{ Params : String Returns : void} status{ Params :  Returns : Status} setStatus{ Params : Status Returns : void} version{ Params :  Returns : int} setVersion{ Params : int Returns : void} description{ Params :  Returns : String} setDescription{ Params : String Returns : void} dateApplied{ Params :  Returns : Date} setDateApplied{ Params : Date Returns : void} applier{ Params :  Returns : String} setApplier{ Params : String Returns : void} lastSequence{ Params :  Returns : Long} setLastSequence{ Params : Long Returns : void} lastEventToken{ Params :  Returns : Long} setLastEventToken{ Params : Long Returns : void} toString{ Params :  Returns : String} ,toString ,,,,,Long ,,Long ,,logger: , "Error marking context {} as compacted.", context, error
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,EventStoreTransformationRepository,2,1,0,0,0,true,0 ,0 ,0 ,,findByContext{ Params : String Returns : List<EventStoreTransformationJpa>} findAllByStatus{ Params : EventStoreTransformationJpa.Status Returns : List<EventStoreTransformationJpa>} deleteAllByContext{ Params : String Returns : void} lastVersion{ Params : String Returns : Optional<Integer>} ,,,,,,,,,,: , context
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,JpaCompactingContexts,1,1,0,0,0,false,0 ,CompactingContexts ,JpaCompactingContext ,repo: EventStoreStateRepository ,iterator{ Params :  Returns : Iterator<CompactingContext>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : CompactingContext} compactionId{ Params :  Returns : String} context{ Params :  Returns : String} ,iterator hasNext next compactionId context ,,,,CompactingContexts ,EventStoreStateRepository ,,EventStoreStateRepository ,Iterator JpaCompactingContext ,iterator: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,JpaCompactingContext,3,2,0,1,0,false,0 ,CompactingContexts ,JpaCompactingContext ,eventStoreStateJpa: EventStoreStateJpa ,iterator{ Params :  Returns : Iterator<CompactingContext>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : CompactingContext} compactionId{ Params :  Returns : String} context{ Params :  Returns : String} ,iterator hasNext next compactionId context ,,,,CompactingContext ,EventStoreStateJpa ,,EventStoreStateJpa ,,eventStoreStateJpa: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,JpaEventStoreStateStore,1,1,0,0,0,false,0 ,EventStoreStateStore ,JpaEntityConstructor ,repository: EventStoreStateRepository ,state{ Params : String Returns : EventStoreState} from{ Params : EventStoreStateJpa Returns : EventStoreState} save{ Params : EventStoreState Returns : void} clean{ Params : String Returns : void} setContext{ Params : String Returns : Visitor} setState{ Params : State Returns : Visitor} setOperationId{ Params : String Returns : Visitor} entity{ Params :  Returns : EventStoreStateJpa} ,state save clean setContext setState setOperationId ,,,,EventStoreStateStore ,EventStoreStateRepository ,,EventStoreStateRepository ,IdleState IdleState TransformingState CompactingState IllegalStateException JpaEntityConstructor EnumMap EventStoreStateJpa ,repository: , context
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,JpaEntityConstructor,3,2,0,1,0,false,0 ,EventStoreStateStore ,JpaEntityConstructor ,stateMapping: EnumMap<State, EventStoreStateJpa.State> entity: EventStoreStateJpa ,state{ Params : String Returns : EventStoreState} from{ Params : EventStoreStateJpa Returns : EventStoreState} save{ Params : EventStoreState Returns : void} clean{ Params : String Returns : void} setContext{ Params : String Returns : Visitor} setState{ Params : State Returns : Visitor} setOperationId{ Params : String Returns : Visitor} entity{ Params :  Returns : EventStoreStateJpa} ,state save clean setContext setState setOperationId ,,,,Visitor ,EventStoreStateJpa ,,EventStoreStateJpa ,EnumMap EventStoreStateJpa ,entity: , operationId
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,JpaLocalTransformationProgressStore,1,1,0,0,0,false,0 ,TransformationProgressStore ,JpaTransformationApplyingState ,repository: LocalEventStoreTransformationRepository ,initState{ Params : String Returns : Mono<TransformationApplyingState>} stateFor{ Params : String Returns : Mono<TransformationApplyingState>} incrementLastSequence{ Params : String,long Returns : Mono<Void>} markAsApplied{ Params : String Returns : Mono<Void>} clean{ Params :  Returns : Mono<Void>} lastAppliedSequence{ Params :  Returns : long} applied{ Params :  Returns : boolean} ,initState stateFor incrementLastSequence markAsApplied clean lastAppliedSequence applied ,,,,TransformationProgressStore ,LocalEventStoreTransformationRepository ,,LocalEventStoreTransformationRepository ,LocalEventStoreTransformationJpa JpaTransformationApplyingState LocalEventStoreTransformationJpa ,Schedulers: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,JpaTransformationApplyingState,3,2,0,1,0,false,0 ,TransformationProgressStore ,JpaTransformationApplyingState ,entity: LocalEventStoreTransformationJpa ,initState{ Params : String Returns : Mono<TransformationApplyingState>} stateFor{ Params : String Returns : Mono<TransformationApplyingState>} incrementLastSequence{ Params : String,long Returns : Mono<Void>} markAsApplied{ Params : String Returns : Mono<Void>} clean{ Params :  Returns : Mono<Void>} lastAppliedSequence{ Params :  Returns : long} applied{ Params :  Returns : boolean} ,initState stateFor incrementLastSequence markAsApplied clean lastAppliedSequence applied ,,,,TransformationApplyingState ,LocalEventStoreTransformationJpa ,,LocalEventStoreTransformationJpa ,,entity: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,JpaTransformations,1,1,0,0,0,false,0 ,Transformations ,0 ,repository: EventStoreTransformationRepository ,allTransformations{ Params :  Returns : Flux<Transformation>} id{ Params :  Returns : String} context{ Params :  Returns : String} description{ Params :  Returns : String} version{ Params :  Returns : int} lastSequence{ Params :  Returns : Optional<Long>} status{ Params :  Returns : Status} applyRequester{ Params :  Returns : Optional<String>} appliedAt{ Params :  Returns : Optional<Instant>} ,allTransformations id context description version lastSequence status applyRequester appliedAt ,,,,Transformations ,EventStoreTransformationRepository ,,EventStoreTransformationRepository ,,Schedulers: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,JPATransformation,1,0,0,0,0,false,0 ,Transformation ,0 ,jpaEntity: EventStoreTransformationJpa ,allTransformations{ Params :  Returns : Flux<Transformation>} id{ Params :  Returns : String} context{ Params :  Returns : String} description{ Params :  Returns : String} version{ Params :  Returns : int} lastSequence{ Params :  Returns : Optional<Long>} status{ Params :  Returns : Status} applyRequester{ Params :  Returns : Optional<String>} appliedAt{ Params :  Returns : Optional<Instant>} ,allTransformations id context description version lastSequence status applyRequester appliedAt ,,,,Transformation ,EventStoreTransformationJpa ,,EventStoreTransformationJpa ,IllegalStateException ,jpaEntity: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,JpaTransformationsInProgressForContext,1,1,0,0,0,false,0 ,TransformationsInProgressForContext ,0 ,repository: EventStoreStateRepository ,inProgress{ Params : String Returns : Mono<Boolean>} notIdle{ Params : EventStoreStateJpa Returns : boolean} ,inProgress ,,,,TransformationsInProgressForContext ,EventStoreStateRepository ,,EventStoreStateRepository ,,state: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,LocalEventStoreTransformationJpa,1,1,0,0,0,false,0 ,0 ,0 ,transformationId: String lastSequenceApplied: long applied: boolean ,getTransformationId{ Params :  Returns : String} getLastSequenceApplied{ Params :  Returns : long} isApplied{ Params :  Returns : boolean} ,,,,,,boolean ,,boolean ,,state: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.jpa,LocalEventStoreTransformationRepository,2,1,0,0,0,true,0 ,0 ,0 ,,incrementLastSequence{ Params : String,long Returns : void} deleteOrphans{ Params :  Returns : void} ,,,,,,,,,,state: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation,MultiScheduledTask,1,1,0,0,0,false,0 ,TransformationTask ,0 ,scheduledTasks: Iterable<TransformationTask> ,start{ Params :  Returns : void} stop{ Params :  Returns : void} ,start stop ,,,,TransformationTask ,Iterable<TransformationTask> ,,Iterable<TransformationTask> ,,scheduledTasks: , TransformationTask::stop
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation,NonTransientTransformationException,2,1,0,0,0,true,0 ,TransformationTask ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,ContextEventProviderSupplier,2,1,0,0,0,true,0 ,TransformationTask ,0 ,,eventProviderFor{ Params : String Returns : EventProvider} ,,,,,,,,,,scheduledTasks: , TransformationTask::stop
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,ContextTransformationStateConverter,1,1,0,0,0,false,0 ,TransformationStateConverter ,0 ,,from{ Params : TransformationState Returns : Mono<Transformation>} activeTransformation{ Params : TransformationState Returns : ActiveTransformation} applyingTransformation{ Params : TransformationState Returns : ApplyingTransformation} finalTransformation{ Params :  Returns : FinalTransformation} ,from ,,,,TransformationStateConverter ,,,,IllegalStateException ActiveTransformation ApplyingTransformation FinalTransformation ,: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,ContextTransformationStore,2,1,0,0,0,true,0 ,TransformationStateConverter ,0 ,,transformation{ Params : String Returns : Mono<TransformationState>} transformations{ Params :  Returns : Flux<TransformationState>} create{ Params : String,String Returns : void} save{ Params : TransformationState Returns : void} clean{ Params : String Returns : void} ,,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,ContextTransformer,2,1,0,0,0,true,0 ,TransformationStateConverter ,0 ,,start{ Params : String,String Returns : Mono<Void>} deleteEvent{ Params : String,long,long Returns : Mono<Void>} replaceEvent{ Params : String,long,Event,long Returns : Mono<Void>} cancel{ Params : String Returns : Mono<Void>} startApplying{ Params : String,long,String Returns : Mono<Void>} markApplied{ Params : String Returns : Mono<Void>} startCompacting{ Params : String Returns : Mono<Void>} markCompacted{ Params : String Returns : Mono<Void>} clean{ Params :  Returns : Mono<Void>} ,,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,DefaultTransformationEntryStoreSupplier,1,1,0,0,0,false,0 ,TransformationEntryStoreProvider ,StoragePropertiesSupplier TransformationId ,storagePropertiesSupplier: StoragePropertiesSupplier cache: Map<TransformationId, Mono<TransformationEntryStore>> ,storagePropertiesFor{ Params : String,String Returns : StorageProperties} provide{ Params : String,String Returns : Mono<TransformationEntryStore>} autoOpen{ Params : Supplier<AppendOnlyFileStore> Returns : TransformationEntryStore} delegate{ Params :  Returns : Mono<? extends TransformationEntryStore>} store{ Params : TransformationEntry Returns : Mono<Long>} read{ Params :  Returns : Flux<TransformationEntry>} delete{ Params :  Returns : Mono<Void>} context{ Params :  Returns : String} id{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,provide store read delete equals hashCode ,,,,TransformationEntryStoreProvider ,Map<TransformationId,Mono<TransformationEntryStore>> ,,Map<TransformationId,Mono<TransformationEntryStore>> ,ConcurrentHashMap TransformationId BaseAppendOnlyFileStore TransformationEntryStore AtomicReference ,: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,StoragePropertiesSupplier,3,1,0,0,0,true,0 ,TransformationEntryStoreProvider ,StoragePropertiesSupplier TransformationId ,,storagePropertiesFor{ Params : String,String Returns : StorageProperties} provide{ Params : String,String Returns : Mono<TransformationEntryStore>} autoOpen{ Params : Supplier<AppendOnlyFileStore> Returns : TransformationEntryStore} delegate{ Params :  Returns : Mono<? extends TransformationEntryStore>} store{ Params : TransformationEntry Returns : Mono<Long>} read{ Params :  Returns : Flux<TransformationEntry>} delete{ Params :  Returns : Mono<Void>} context{ Params :  Returns : String} id{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,provide store read delete equals hashCode ,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,TransformationId,3,2,0,1,0,false,0 ,TransformationEntryStoreProvider ,StoragePropertiesSupplier TransformationId ,context: String id: String ,storagePropertiesFor{ Params : String,String Returns : StorageProperties} provide{ Params : String,String Returns : Mono<TransformationEntryStore>} autoOpen{ Params : Supplier<AppendOnlyFileStore> Returns : TransformationEntryStore} delegate{ Params :  Returns : Mono<? extends TransformationEntryStore>} store{ Params : TransformationEntry Returns : Mono<Long>} read{ Params :  Returns : Flux<TransformationEntry>} delete{ Params :  Returns : Mono<Void>} context{ Params :  Returns : String} id{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,provide store read delete equals hashCode ,,,,,String ,,String ,,Objects: , context, id
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,DefaultTransformationState,1,1,0,0,0,false,0 ,TransformationState ,0 ,INITIAL_SEQUENCE: long stagedEntries: List<TransformationEntry> entity: EventStoreTransformationJpa ,id{ Params :  Returns : String} version{ Params :  Returns : int} description{ Params :  Returns : String} lastSequence{ Params :  Returns : Optional<Long>} lastEventToken{ Params :  Returns : Optional<Long>} applier{ Params :  Returns : Optional<String>} appliedAt{ Params :  Returns : Optional<Instant>} status{ Params :  Returns : EventStoreTransformationJpa.Status} stage{ Params : TransformationAction Returns : TransformationState} staged{ Params :  Returns : List<TransformationEntry>} applying{ Params : String Returns : TransformationState} applied{ Params :  Returns : TransformationState} withStatus{ Params : EventStoreTransformationJpa.Status Returns : DefaultTransformationState} withLastEventToken{ Params : long Returns : TransformationState} toString{ Params :  Returns : String} ,id version description lastSequence lastEventToken applier appliedAt status stage staged applying applied withStatus withLastEventToken toString ,,,,TransformationState ,EventStoreTransformationJpa ,,EventStoreTransformationJpa ,LinkedList ArrayList ProtoTransformationEntry EventStoreTransformationJpa DefaultTransformationState EventStoreTransformationJpa DefaultTransformationState EventStoreTransformationJpa Date DefaultTransformationState EventStoreTransformationJpa DefaultTransformationState EventStoreTransformationJpa DefaultTransformationState ,jpa: , token
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,EventProvider,2,1,0,0,0,true,0 ,TransformationState ,0 ,,event{ Params : long Returns : Mono<Event>} ,,,,,,,,,,jpa: , token
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,EventStoreStateStore,2,1,0,0,0,true,0 ,TransformationState ,Visitor EventStoreState ,,state{ Params : String Returns : EventStoreState} save{ Params : EventStoreState Returns : void} clean{ Params : String Returns : void} setContext{ Params : String Returns : Visitor} setState{ Params : State Returns : Visitor} setOperationId{ Params : String Returns : Visitor} accept{ Params : Visitor Returns : void} transform{ Params : String Returns : EventStoreState} cancelled{ Params :  Returns : EventStoreState} transformed{ Params :  Returns : EventStoreState} compact{ Params : String Returns : EventStoreState} compacted{ Params :  Returns : EventStoreState} ,,,,,,,,,WrongTransformationStateException WrongTransformationStateException WrongTransformationStateException WrongTransformationStateException WrongTransformationStateException ,jpa: , token
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,Visitor,3,0,0,0,0,true,0 ,TransformationState ,Visitor EventStoreState ,,state{ Params : String Returns : EventStoreState} save{ Params : EventStoreState Returns : void} clean{ Params : String Returns : void} setContext{ Params : String Returns : Visitor} setState{ Params : State Returns : Visitor} setOperationId{ Params : String Returns : Visitor} accept{ Params : Visitor Returns : void} transform{ Params : String Returns : EventStoreState} cancelled{ Params :  Returns : EventStoreState} transformed{ Params :  Returns : EventStoreState} compact{ Params : String Returns : EventStoreState} compacted{ Params :  Returns : EventStoreState} ,,,,,,,,,,jpa: , token
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,EventStoreState,3,0,0,0,0,true,0 ,TransformationState ,Visitor EventStoreState ,,state{ Params : String Returns : EventStoreState} save{ Params : EventStoreState Returns : void} clean{ Params : String Returns : void} setContext{ Params : String Returns : Visitor} setState{ Params : State Returns : Visitor} setOperationId{ Params : String Returns : Visitor} accept{ Params : Visitor Returns : void} transform{ Params : String Returns : EventStoreState} cancelled{ Params :  Returns : EventStoreState} transformed{ Params :  Returns : EventStoreState} compact{ Params : String Returns : EventStoreState} compacted{ Params :  Returns : EventStoreState} ,,,,,,,,,WrongTransformationStateException WrongTransformationStateException WrongTransformationStateException WrongTransformationStateException WrongTransformationStateException ,jpa: , token
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,FastValidationEventStoreTransformationService,1,1,0,0,0,false,0 ,EventStoreTransformationService ,0 ,logger: Logger delegate: EventStoreTransformationService contextEventProviderSupplier: ContextEventProviderSupplier transformationAllowed: TransformationAllowed ,destroy{ Params :  Returns : void} validateEventToDelete{ Params : String,long Returns : Mono<Void>} validateEventToReplace{ Params : String,long,Event Returns : Mono<Event>} validateAggregateSequenceNumber{ Params : Event,Event Returns : Mono<Event>} validateAggregateIdentifier{ Params : Event,Event Returns : Mono<Event>} transformations{ Params : String,Authentication Returns : Flux<Transformation>} start{ Params : String,String,String,Authentication Returns : Mono<Void>} deleteEvent{ Params : String,String,long,long,Authentication Returns : Mono<Void>} replaceEvent{ Params : String,String,long,Event,long,Authentication Returns : Mono<Void>} cancel{ Params : String,String,Authentication Returns : Mono<Void>} startApplying{ Params : String,String,long,Authentication Returns : Mono<Void>} startCompacting{ Params : String,String,Authentication Returns : Mono<Void>} ,transformations start deleteEvent replaceEvent cancel startApplying startCompacting ,,,,EventStoreTransformationService ,TransformationAllowed ,,TransformationAllowed ,IllegalArgumentException IllegalArgumentException FastValidationException FastValidationException ,delegate: , compactionId, context, authentication
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,FastValidationException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,LocalContextTransformationStore,1,1,0,0,0,false,0 ,ContextTransformationStore ,0 ,logger: Logger context: String repository: EventStoreTransformationRepository transformationEntryStoreSupplier: TransformationEntryStoreProvider ,transformations{ Params :  Returns : Flux<TransformationState>} create{ Params : String,String Returns : void} transformation{ Params : String Returns : Mono<TransformationState>} lastTransformationVersion{ Params :  Returns : int} save{ Params : TransformationState Returns : void} clean{ Params : String Returns : void} storeStagedActions{ Params : TransformationState Returns : void} entity{ Params : TransformationState Returns : EventStoreTransformationJpa} ,transformations create transformation save clean ,,,,ContextTransformationStore ,TransformationEntryStoreProvider ,,TransformationEntryStoreProvider ,EventStoreTransformationJpa EventStoreTransformationJpa ,state: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,LocalEventStoreTransformationService,1,1,0,0,0,false,0 ,EventStoreTransformationService ,0 ,transformers: Transformers transformations: Transformations auditLog: Logger scheduledTask: TransformationTask ,init{ Params :  Returns : void} destroy{ Params :  Returns : void} transformations{ Params : String,Authentication Returns : Flux<Transformation>} start{ Params : String,String,String,Authentication Returns : Mono<Void>} deleteEvent{ Params : String,String,long,long,Authentication Returns : Mono<Void>} replaceEvent{ Params : String,String,long,Event,long,Authentication Returns : Mono<Void>} cancel{ Params : String,String,Authentication Returns : Mono<Void>} startApplying{ Params : String,String,long,Authentication Returns : Mono<Void>} startCompacting{ Params : String,String,Authentication Returns : Mono<Void>} transformerFor{ Params : String Returns : Mono<ContextTransformer>} ,transformations start deleteEvent replaceEvent cancel startApplying startCompacting ,,,,EventStoreTransformationService ,TransformationTask ,,TransformationTask ,,transformers: , context
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,LocalTransformers,1,1,0,0,0,false,0 ,Transformers ,0 ,logger: Logger transformers: Map<String, Mono<ContextTransformer>> transformationRepository: EventStoreTransformationRepository entryStoreSupplier: TransformationEntryStoreProvider eventStoreStateStore: EventStoreStateStore transactionManager: PlatformTransactionManager ,transformerFor{ Params : String Returns : Mono<ContextTransformer>} clean{ Params : String Returns : Mono<Void>} contextTransformerMono{ Params : String Returns : Mono<ContextTransformer>} ,transformerFor clean ,,,,Transformers ,PlatformTransactionManager ,,PlatformTransactionManager ,ConcurrentHashMap LocalContextTransformationStore ContextTransformationStateConverter TransactionalContextTransformer SequentialContextTransformer ,Mono: , () -> new LocalContextTransformationStore(context, transformationRepository, entryStoreSupplier)
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,LoggingEventTransformationService,1,1,0,0,0,false,0 ,EventStoreTransformationService ,0 ,logger: Logger delegate: EventStoreTransformationService ,start{ Params : String,String,String,Authentication Returns : Mono<Void>} transformations{ Params : String,Authentication Returns : Flux<Transformation>} replaceEvent{ Params : String,String,long,Event,long,Authentication Returns : Mono<Void>} deleteEvent{ Params : String,String,long,long,Authentication Returns : Mono<Void>} startCompacting{ Params : String,String,Authentication Returns : Mono<Void>} cancel{ Params : String,String,Authentication Returns : Mono<Void>} startApplying{ Params : String,String,long,Authentication Returns : Mono<Void>} ,start transformations replaceEvent deleteEvent startCompacting cancel startApplying ,,,,EventStoreTransformationService ,EventStoreTransformationService ,,EventStoreTransformationService ,,logger: , "There was an error starting the apply process for the transformation {} and context {}. The received sequence of the transformation is: {}", transformationId, context, sequence, error
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,ProtoTransformationEntry,1,1,0,0,0,false,0 ,TransformationEntry ,0 ,sequence: long payload: TransformationAction ,sequence{ Params :  Returns : long} payload{ Params :  Returns : byte[]} version{ Params :  Returns : byte} ,sequence payload version ,,,,TransformationEntry ,TransformationAction ,,TransformationAction ,,payload: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,SegmentBasedTransformationEntryStore,1,1,0,0,0,false,0 ,TransformationEntryStore ,0 ,logger: Logger appendOnlyFileStore: AppendOnlyFileStore closed: boolean ,store{ Params : TransformationEntry Returns : Mono<Long>} readFrom{ Params : long Returns : Flux<TransformationEntry>} map{ Params : FileStoreEntry,long Returns : TransformationEntry} sequence{ Params :  Returns : long} payload{ Params :  Returns : byte[]} version{ Params :  Returns : byte} read{ Params :  Returns : Flux<TransformationEntry>} delete{ Params :  Returns : Mono<Void>} isClosed{ Params :  Returns : boolean} toFileStoreEntry{ Params : TransformationEntry Returns : FileStoreEntry} bytes{ Params :  Returns : byte[]} version{ Params :  Returns : byte} resetIfNeeded{ Params : long Returns : Mono<Void>} neededToResetTo{ Params : long Returns : Mono<Long>} reset{ Params : long Returns : Mono<Void>} ,store readFrom sequence payload version read delete bytes version ,,,,TransformationEntryStore ,boolean ,,boolean ,AtomicLong TransformationEntry FileStoreEntry ,appendOnlyFileStore: , sequence
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,SequentialContextTransformer,1,1,0,0,0,false,0 ,ContextTransformer ,0 ,logger: Logger delegate: ContextTransformer taskExecutor: Sinks.Many<Mono<?>> ,startListening{ Params :  Returns : void} start{ Params : String,String Returns : Mono<Void>} deleteEvent{ Params : String,long,long Returns : Mono<Void>} replaceEvent{ Params : String,long,Event,long Returns : Mono<Void>} cancel{ Params : String Returns : Mono<Void>} startApplying{ Params : String,long,String Returns : Mono<Void>} markApplied{ Params : String Returns : Mono<Void>} markCompacted{ Params : String Returns : Mono<Void>} clean{ Params :  Returns : Mono<Void>} startCompacting{ Params : String Returns : Mono<Void>} sequential{ Params : Mono<R> Returns : Mono<R>} ,start deleteEvent replaceEvent cancel startApplying markApplied markCompacted clean startCompacting ,,,,ContextTransformer ,Sinks.Many<Mono<?>> ,,Sinks.Many<Mono<?>> ,,actionResult: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,TransactionalContextTransformer,1,1,0,0,0,false,0 ,ContextTransformer ,0 ,logger: Logger context: String transformationStore: ContextTransformationStore platformTransactionManager: PlatformTransactionManager contextStore: EventStoreStateStore converter: TransformationStateConverter ,executeInTransaction{ Params : Runnable Returns : Mono<Void>} start{ Params : String,String Returns : Mono<Void>} deleteEvent{ Params : String,long,long Returns : Mono<Void>} replaceEvent{ Params : String,long,Event,long Returns : Mono<Void>} cancel{ Params : String Returns : Mono<Void>} startApplying{ Params : String,long,String Returns : Mono<Void>} markApplied{ Params : String Returns : Mono<Void>} startCompacting{ Params : String Returns : Mono<Void>} markCompacted{ Params : String Returns : Mono<Void>} clean{ Params :  Returns : Mono<Void>} perform{ Params : String,String,Function<Transformation,Mono<TransformationState>> Returns : Mono<Void>} ,start deleteEvent replaceEvent cancel startApplying markApplied startCompacting markCompacted clean ,,,,ContextTransformer ,TransformationStateConverter ,,TransformationStateConverter ,,: , "Transformation updated after %s", actionName
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,Transformation,2,1,0,0,0,true,0 ,ContextTransformer ,0 ,,deleteEvent{ Params : long,long Returns : Mono<TransformationState>} replaceEvent{ Params : long,Event,long Returns : Mono<TransformationState>} cancel{ Params :  Returns : Mono<TransformationState>} startApplying{ Params : long,String Returns : Mono<TransformationState>} markApplied{ Params :  Returns : Mono<TransformationState>} ,,,,,,,,,WrongTransformationStateException WrongTransformationStateException WrongTransformationStateException WrongTransformationStateException WrongTransformationStateException ,Mono: , new WrongTransformationStateException("Unsupported operation.")
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,TransformationBaseStorageProvider,2,1,0,0,0,true,0 ,ContextTransformer ,0 ,,storageLocation{ Params :  Returns : String} ,,,,,,,,,,Mono: , new WrongTransformationStateException("Unsupported operation.")
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,TransformationEntry,2,1,0,0,0,true,0 ,ContextTransformer ,0 ,,sequence{ Params :  Returns : long} payload{ Params :  Returns : byte[]} version{ Params :  Returns : byte} ,,,,,,,,,,Mono: , new WrongTransformationStateException("Unsupported operation.")
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,TransformationEntryStore,2,1,0,0,0,true,0 ,ContextTransformer ,0 ,,store{ Params : TransformationEntry Returns : Mono<Long>} read{ Params :  Returns : Flux<TransformationEntry>} readFrom{ Params : long Returns : Flux<TransformationEntry>} read{ Params : long,long Returns : Flux<TransformationEntry>} readClosed{ Params : long,long Returns : Flux<TransformationEntry>} readTo{ Params : long Returns : Flux<TransformationEntry>} delete{ Params :  Returns : Mono<Void>} ,,,,,,,,,,entry: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,TransformationEntryStoreProvider,2,1,0,0,0,true,0 ,ContextTransformer ,0 ,,provide{ Params : String,String Returns : Mono<TransformationEntryStore>} ,,,,,,,,,,entry: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,TransformationNotAllowedException,1,1,0,0,0,false,IllegalStateException ,0 ,0 ,,,,,,,,,,,,null
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,Transformations,2,1,0,0,0,true,IllegalStateException ,0 ,0 ,,allTransformations{ Params :  Returns : Flux<Transformation>} currentTransformations{ Params :  Returns : Flux<Transformation>} applyingTransformations{ Params :  Returns : Flux<Transformation>} ,,,,,,,,,,t: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,TransformationState,2,1,0,0,0,true,IllegalStateException ,0 ,0 ,,id{ Params :  Returns : String} version{ Params :  Returns : int} description{ Params :  Returns : String} lastSequence{ Params :  Returns : Optional<Long>} lastEventToken{ Params :  Returns : Optional<Long>} applier{ Params :  Returns : Optional<String>} appliedAt{ Params :  Returns : Optional<Instant>} status{ Params :  Returns : EventStoreTransformationJpa.Status} stage{ Params : TransformationAction Returns : TransformationState} staged{ Params :  Returns : List<TransformationEntry>} applying{ Params : String Returns : TransformationState} applied{ Params :  Returns : TransformationState} withStatus{ Params : EventStoreTransformationJpa.Status Returns : TransformationState} withLastEventToken{ Params : long Returns : TransformationState} ,,,,,,,,,,t: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,TransformationStateConverter,2,1,0,0,0,true,IllegalStateException ,0 ,0 ,,from{ Params : TransformationState Returns : Mono<Transformation>} ,,,,,,,,,,t: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,Transformers,2,1,0,0,0,true,IllegalStateException ,0 ,0 ,,transformerFor{ Params : String Returns : Mono<ContextTransformer>} clean{ Params : String Returns : Mono<Void>} ,,,,,,,,,,t: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.requestprocessor,WrongTransformationStateException,1,1,0,0,0,false,IllegalStateException ,NonTransientTransformationException ,0 ,,,,,,,NonTransientTransformationException ,,,,,null
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.spi,TransformationAllowed,2,1,0,0,0,true,IllegalStateException ,NonTransientTransformationException ,0 ,,validate{ Params : String Returns : Mono<Void>} ,,,,,,,,,,t: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.spi,TransformationsInProgressForContext,2,1,0,0,0,true,IllegalStateException ,NonTransientTransformationException ,0 ,,inProgress{ Params : String Returns : Mono<Boolean>} ,,,,,,,,,,t: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.state,CompactingState,1,1,0,0,0,false,0 ,EventStoreState ,0 ,compactionId: String context: String ,accept{ Params : EventStoreStateStore.Visitor Returns : void} compacted{ Params :  Returns : EventStoreState} transform{ Params : String Returns : EventStoreState} ,accept compacted transform ,,,,EventStoreState ,String ,,String ,IdleState WrongTransformationStateException ,visitor: , context
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.state,IdleState,1,1,0,0,0,false,0 ,EventStoreState ,0 ,context: String ,accept{ Params : EventStoreStateStore.Visitor Returns : void} transform{ Params : String Returns : EventStoreState} compact{ Params : String Returns : EventStoreState} ,accept transform compact ,,,,EventStoreState ,String ,,String ,TransformingState CompactingState ,visitor: , context
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.state,TransformingState,1,1,0,0,0,false,0 ,EventStoreState ,0 ,transformationId: String context: String ,accept{ Params : EventStoreStateStore.Visitor Returns : void} transformed{ Params :  Returns : EventStoreState} cancelled{ Params :  Returns : EventStoreState} transform{ Params : String Returns : EventStoreState} ,accept transformed cancelled transform ,,,,EventStoreState ,String ,,String ,IdleState IdleState WrongTransformationStateException ,visitor: , context
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.transformation.active,ActiveTransformationAction,2,1,0,0,0,true,0 ,EventStoreState ,0 ,,apply{ Params :  Returns : Mono<TransformationAction>} ,,,,,,,,,,visitor: , context
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.transformation.active,DeleteEventAction,1,1,0,0,0,false,0 ,ActiveTransformationAction ,0 ,logger: Logger tokenToDelete: long ,apply{ Params :  Returns : Mono<TransformationAction>} action{ Params :  Returns : TransformationAction} ,apply ,,,,ActiveTransformationAction ,long ,,long ,,TransformationAction: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.transformation.active,ReplaceEventAction,1,1,0,0,0,false,0 ,ActiveTransformationAction ,0 ,tokenToReplace: long replacement: Event ,apply{ Params :  Returns : Mono<TransformationAction>} action{ Params :  Returns : TransformationAction} ,apply ,,,,ActiveTransformationAction ,Event ,,Event ,,TransformationAction: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.transformation,ActiveTransformation,1,1,0,0,0,false,0 ,Transformation ,0 ,logger: Logger state: TransformationState ,deleteEvent{ Params : long,long Returns : Mono<TransformationState>} replaceEvent{ Params : long,Event,long Returns : Mono<TransformationState>} cancel{ Params :  Returns : Mono<TransformationState>} startApplying{ Params : long,String Returns : Mono<TransformationState>} performEventAction{ Params : ActiveTransformationAction,long,long Returns : Mono<TransformationState>} validateEventsOrder{ Params : long Returns : Mono<Void>} validateSequence{ Params : long Returns : Mono<Void>} ,deleteEvent replaceEvent cancel startApplying ,,,,Transformation ,TransformationState ,,TransformationState ,DeleteEventAction ReplaceEventAction WrongTransformationStateException WrongTransformationStateException WrongTransformationStateException WrongTransformationStateException ,Mono: 
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.transformation,ApplyingTransformation,1,1,0,0,0,false,0 ,Transformation ,0 ,state: TransformationState ,markApplied{ Params :  Returns : Mono<TransformationState>} ,markApplied ,,,,Transformation ,TransformationState ,,TransformationState ,,Mono: , state::applied
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation.transformation,FinalTransformation,1,1,0,0,0,false,0 ,Transformation ,0 ,,,,,,,Transformation ,,,,,null
axon-server-se-master,io.axoniq.axonserver.eventstore.transformation,TransformationTask,2,1,0,0,0,true,0 ,Transformation ,0 ,,start{ Params :  Returns : void} stop{ Params :  Returns : void} ,,,,,,,,,,Mono: , state::applied
axon-server-se-master,io.axoniq.axonserver.filestorage,AppendOnlyFileStore,2,1,0,0,0,true,0 ,Transformation ,0 ,,append{ Params : FileStoreEntry Returns : Mono<Long>} append{ Params : Flux<FileStoreEntry> Returns : Mono<Long>} reset{ Params : long Returns : Mono<Void>} read{ Params : long Returns : Mono<FileStoreEntry>} stream{ Params : long Returns : Flux<FileStoreEntry>} stream{ Params : long,long Returns : Flux<FileStoreEntry>} iterator{ Params : int Returns : CloseableIterator<FileStoreEntry>} delete{ Params :  Returns : Mono<Void>} open{ Params : boolean Returns : Mono<Void>} close{ Params :  Returns : Mono<Void>} lastEntry{ Params :  Returns : FileStoreEntry} isEmpty{ Params :  Returns : boolean} lastSequence{ Params :  Returns : Mono<Long>} ,,,,,,,,,,Mono: 
axon-server-se-master,io.axoniq.axonserver.filestorage,FileStoreEntry,2,1,0,0,0,true,0 ,Transformation ,0 ,,bytes{ Params :  Returns : byte[]} version{ Params :  Returns : byte} ,,,,,,,,,,Mono: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,AbstractSegment,1,1,1,0,0,false,0 ,0 ,0 ,logger: Logger VERSION: byte context: String storageProperties: StorageProperties next: AbstractSegment ,handover{ Params : Long,Runnable Returns : void} init{ Params : boolean Returns : void} validate{ Params : int Returns : void} getAllSegments{ Params :  Returns : Stream<Long>} validateSegment{ Params : long Returns : ValidationResult} initSegments{ Params : long Returns : void} getEntries{ Params : long,long Returns : CloseableIterator<FileStoreEntry>} createIterator{ Params : long,long Returns : Optional<CloseableIterator<FileStoreEntry>>} getSegmentFor{ Params : long Returns : long} prepareSegmentStore{ Params : long Returns : SortedSet<Long>} cleanup{ Params : int Returns : void} getSegments{ Params :  Returns : SortedSet<Long>} getSegmentIterator{ Params : long Returns : CloseableIterator<FileStoreEntry>} isClosed{ Params :  Returns : boolean} close{ Params : boolean Returns : void} removeSegment{ Params : long Returns : void} reset{ Params : long Returns : void} ,,,,handover initSegments createIterator cleanup getSegments isClosed close removeSegment reset ,,,,,FileStoreException ValidationResult ValidationResult ConcurrentSkipListSet FileStoreException ,: , segment, nextIndex
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,BaseAppendOnlyFileStore,1,1,0,0,0,false,0 ,AppendOnlyFileStore ,0 ,primary: WritableSegment activeReaders: Set<CloseableIterator<FileStoreEntry>> resetLock: ResetLock ,append{ Params : FileStoreEntry Returns : Mono<Long>} append{ Params : Flux<FileStoreEntry> Returns : Mono<Long>} reset{ Params : long Returns : Mono<Void>} read{ Params : long Returns : Mono<FileStoreEntry>} stream{ Params : long Returns : Flux<FileStoreEntry>} stream{ Params : long,long Returns : Flux<FileStoreEntry>} close{ Params :  Returns : Mono<Void>} open{ Params : boolean Returns : Mono<Void>} lastEntry{ Params :  Returns : FileStoreEntry} delete{ Params :  Returns : Mono<Void>} iterator{ Params : int Returns : CloseableIterator<FileStoreEntry>} isEmpty{ Params :  Returns : boolean} ,append append reset read stream stream close open lastEntry isEmpty ,,,,AppendOnlyFileStore ,ResetLock ,,ResetLock ,CopyOnWriteArraySet ResetLock WritableSegment ReadOnlySegments FileStoreException FileStoreException FileStoreException FileStoreException ,primary: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,BufferEntryIterator,1,1,0,0,0,false,0 ,CloseableIterator<FileStoreEntry> ,0 ,source: ByteBufferEntrySource ,close{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : FileStoreEntry} ,close hasNext next ,,,,CloseableIterator ,ByteBufferEntrySource ,,ByteBufferEntrySource ,IllegalArgumentException NoSuchElementException ,source: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,ByteBufferEntrySource,1,1,0,0,0,false,0 ,0 ,0 ,START_POSITION: int buffer: ByteBuffer segment: long main: boolean cleanerHackNeeded: boolean ,readEntry{ Params :  Returns : FileStoreEntry} bytes{ Params :  Returns : byte[]} version{ Params :  Returns : byte} createEntryIterator{ Params : long Returns : CloseableIterator<FileStoreEntry>} duplicate{ Params :  Returns : ByteBufferEntrySource} duplicate{ Params : int Returns : ByteBufferEntrySource} finalize{ Params :  Returns : void} getBuffer{ Params :  Returns : ByteBuffer} position{ Params :  Returns : int} clean{ Params : long Returns : void} ,bytes version finalize ,,,,,boolean ,,boolean ,FileStoreEntry FileStoreException BufferEntryIterator ByteBufferEntrySource ByteBufferEntrySource ,: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,Checksum,1,1,0,0,0,false,0 ,0 ,0 ,crc32: CRC32 ,get{ Params :  Returns : int} update{ Params : byte[] Returns : Checksum} update{ Params : ByteBuffer,int,int Returns : Checksum} ,,,,,,CRC32 ,,CRC32 ,CRC32 ,buffer: , position + i
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,CleanUtils,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger cleanupExecutor: ScheduledExecutorService RETRIES: int java8: boolean ,cleanOldsJDK{ Params : ByteBuffer Returns : void} cleanJavaWithModules{ Params : ByteBuffer Returns : void} cleanDirectBuffer{ Params : ByteBuffer,BooleanSupplier,long,String Returns : void} doCleanup{ Params : BooleanSupplier,ByteBuffer,long,String,int Returns : void} ,,cleanOldsJDK cleanJavaWithModules cleanDirectBuffer doCleanup ,,,,,,,Thread ,logger: , "Clean failed", exception
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,FileStoreException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,errorCode: FileStoreErrorCode ,errorCode{ Params :  Returns : FileStoreErrorCode} ,,,,,,FileStoreErrorCode ,,FileStoreErrorCode ,,logger: , "Clean failed", exception
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,FileUtils,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger ,checkCreateDirectory{ Params : File Returns : void} getFilesWithSuffix{ Params : File,String Returns : String[]} delete{ Params : File Returns : boolean} ,,checkCreateDirectory getFilesWithSuffix delete ,,,,,,,FileStoreException FileStoreException FileStoreException ,logger: , "Failed to delete: {}", file, e
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,MultiSegmentIterator,1,1,0,0,0,false,0 ,CloseableIterator<FileStoreEntry> ,0 ,iteratorProvider: Function<Long, CloseableIterator<FileStoreEntry>> nextIndex: AtomicLong lastIndexProvider: Supplier<Long> closed: AtomicBoolean iterator: CloseableIterator<FileStoreEntry> ,hasNext{ Params :  Returns : boolean} next{ Params :  Returns : FileStoreEntry} close{ Params :  Returns : void} checkMoveToNextSegment{ Params :  Returns : void} ,hasNext next close ,,,,CloseableIterator ,CloseableIterator<FileStoreEntry> ,,CloseableIterator<FileStoreEntry> ,AtomicLong AtomicBoolean IllegalStateException NoSuchElementException ,nextIndex: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,PositionKeepingReader,1,1,0,0,0,false,0 ,0 ,0 ,position: int reader: RandomAccessFile ,readByte{ Params :  Returns : byte} readInt{ Params :  Returns : int} position{ Params : int Returns : void} readBytes{ Params : int Returns : byte[]} close{ Params :  Returns : void} readShort{ Params :  Returns : short} position{ Params :  Returns : int} skipBytes{ Params : int Returns : void} readLong{ Params :  Returns : long} ,,,,,,RandomAccessFile ,,RandomAccessFile ,RandomAccessFile ,reader: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,ReaderEventIterator,1,1,0,0,0,false,0 ,CloseableIterator<FileStoreEntry> ,0 ,reader: PositionKeepingReader nextSize: int ,forwardTo{ Params : long,long Returns : void} close{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : FileStoreEntry} bytes{ Params :  Returns : byte[]} version{ Params :  Returns : byte} ,close hasNext next bytes version ,,,,CloseableIterator ,int ,,int ,PositionKeepingReader FileStoreException NoSuchElementException FileStoreEntry FileStoreException ,e: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,ReadOnlySegments,1,1,0,0,0,false,AbstractSegment ,0 ,0 ,scheduledExecutorService: ScheduledExecutorService segments: SortedSet<Long> ,initSegments{ Params : long Returns : void} createIterator{ Params : long,long Returns : Optional<CloseableIterator<FileStoreEntry>>} getSegments{ Params :  Returns : SortedSet<Long>} handover{ Params : Long,Runnable Returns : void} deleteFiles{ Params : Long Returns : void} cleanup{ Params : int Returns : void} removeSegment{ Params : long Returns : void} reset{ Params : long Returns : void} isClosed{ Params :  Returns : boolean} close{ Params : boolean Returns : void} ,initSegments createIterator getSegments handover cleanup isClosed close ,,,,,SortedSet<Long> ,,SortedSet<Long> ,ConcurrentSkipListSet Thread ReaderEventIterator ,segments: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,ResetLock,1,1,0,0,0,false,0 ,0 ,LockInfo ,logger: Logger lockInfo: AtomicReference<LockInfo> ,clear{ Params :  Returns : void} increaseActiveRequests{ Params :  Returns : void} decreaseActiveRequests{ Params :  Returns : void} startReset{ Params :  Returns : void} stopReset{ Params :  Returns : void} resetting{ Params :  Returns : boolean} ,,,,,,AtomicReference<LockInfo> ,,AtomicReference<LockInfo> ,AtomicReference LockInfo LockInfo IllegalStateException FileStoreException LockInfo LockInfo FileStoreException LockInfo LockInfo LockInfo IllegalStateException ,lockInfo: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,LockInfo,3,2,0,1,0,false,0 ,0 ,LockInfo ,activeRequests: int resetting: boolean waiting: Sinks.One<Void> ,clear{ Params :  Returns : void} increaseActiveRequests{ Params :  Returns : void} decreaseActiveRequests{ Params :  Returns : void} startReset{ Params :  Returns : void} stopReset{ Params :  Returns : void} resetting{ Params :  Returns : boolean} ,,,,,,Sinks.One<Void> ,,Sinks.One<Void> ,,null
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,StorageProperties,1,1,0,0,0,false,0 ,0 ,0 ,PATH_FORMAT: String suffix: String syncInterval: long forceInterval: long primaryCleanupDelay: long segmentSize: long flags: int forceClean: boolean storage: File validationSegments: int firstIndex: long ,getSuffix{ Params :  Returns : String} setSuffix{ Params : String Returns : void} getSyncInterval{ Params :  Returns : long} setSyncInterval{ Params : long Returns : void} getForceInterval{ Params :  Returns : long} setForceInterval{ Params : long Returns : void} dataFile{ Params : long Returns : File} getPrimaryCleanupDelay{ Params :  Returns : long} setPrimaryCleanupDelay{ Params : long Returns : void} getSegmentSize{ Params :  Returns : long} setSegmentSize{ Params : long Returns : void} getFlags{ Params :  Returns : int} setFlags{ Params : int Returns : void} isForceClean{ Params :  Returns : boolean} setForceClean{ Params : boolean Returns : void} getStorage{ Params :  Returns : File} setStorage{ Params : File Returns : void} getValidationSegments{ Params :  Returns : int} setValidationSegments{ Params : int Returns : void} getFirstIndex{ Params :  Returns : long} setFirstIndex{ Params : long Returns : void} ,,,,,,long ,,long ,File ,storage: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,Synchronizer,1,1,0,0,0,false,0 ,0 ,0 ,log: Logger writePositions: SortedMap<WritePosition, CompletableFuture<Long>> fsync: ScheduledExecutorService context: String storageProperties: StorageProperties completeSegmentCallback: Consumer<Long> lastCompletedRef: AtomicReference<WritePosition> syncAndCloseFile: ConcurrentSkipListSet<Long> updated: AtomicBoolean forceJob: ScheduledFuture<?> syncJob: ScheduledFuture<?> ,notifyWritePositions{ Params :  Returns : void} syncAndCloseFile{ Params :  Returns : void} closeFile{ Params : Long Returns : void} register{ Params : WritePosition Returns : CompletableFuture<Long>} canSyncAt{ Params : WritePosition Returns : boolean} init{ Params : WritePosition Returns : void} forceCurrent{ Params :  Returns : void} shutdown{ Params : boolean Returns : void} isShutdown{ Params :  Returns : boolean} waitForPendingWrites{ Params :  Returns : void} ,,,,,,ScheduledFuture<?> ,,ScheduledFuture<?> ,ConcurrentSkipListMap AtomicReference ConcurrentSkipListSet AtomicBoolean Thread CompletableFuture FileStoreException ,Thread: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,ValidationResult,1,1,0,0,0,false,0 ,0 ,0 ,segment: long message: String lastToken: long valid: boolean ,getLastToken{ Params :  Returns : long} isValid{ Params :  Returns : boolean} getMessage{ Params :  Returns : String} getSegment{ Params :  Returns : long} ,,,,,,boolean ,,boolean ,,Thread: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,WritableEntrySource,1,1,0,0,0,false,ByteBufferEntrySource ,0 ,0 ,logger: Logger ,mappedByteBuffer{ Params :  Returns : MappedByteBuffer} limit{ Params :  Returns : int} capacity{ Params :  Returns : int} force{ Params :  Returns : void} getInt{ Params : int Returns : int} putInt{ Params : int,int Returns : void} position{ Params : int Returns : void} clearFromPosition{ Params :  Returns : void} ,,,,,,,,,,buffer: , position
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,WritableSegment,1,1,0,0,0,false,AbstractSegment ,0 ,0 ,logger: Logger HEADER_BYTES: int TX_CHECKSUM_BYTES: int FILE_HEADER_SIZE: int FILE_FOOTER_SIZE: int MAX_ENTRY_SIZE: int synchronizer: Synchronizer writePositionRef: AtomicReference<WritePosition> lastIndex: AtomicLong positionsPerSegmentMap: ConcurrentNavigableMap<Long, Map<Long, Integer>> writeBuffers: Map<Long, ByteBufferEntrySource> lastEntry: AtomicReference<FileStoreEntry> ,initSegments{ Params : long Returns : void} write{ Params : FileStoreEntry Returns : CompletableFuture<Long>} write{ Params : List<FileStoreEntry> Returns : CompletableFuture<Long>} getSegmentIterator{ Params : long Returns : CloseableIterator<FileStoreEntry>} getEntryIterator{ Params : long Returns : CloseableIterator<FileStoreEntry>} getEntryIterator{ Params : long,long Returns : CloseableIterator<FileStoreEntry>} createIterator{ Params : long,long Returns : Optional<CloseableIterator<FileStoreEntry>>} validateSegment{ Params : long Returns : ValidationResult} initLatestSegment{ Params : long,long,File,InitOptions Returns : void} getFirstFile{ Params : long,File Returns : long} store{ Params : WritePosition,List<FileStoreEntry> Returns : CompletableFuture<Long>} store{ Params : WritePosition,FileStoreEntry Returns : CompletableFuture<Long>} handover{ Params : Long,Runnable Returns : void} cleanup{ Params : int Returns : void} getSegments{ Params :  Returns : SortedSet<Long>} getLastIndex{ Params :  Returns : long} removeSegment{ Params : long Returns : void} completeSegment{ Params : Long Returns : void} write{ Params : WritePosition,FileStoreEntry Returns : void} write{ Params : WritePosition,List<FileStoreEntry> Returns : void} claim{ Params : long,int Returns : WritePosition} getOrOpenDatafile{ Params : long,long,boolean Returns : WritableEntrySource} checkBuffer{ Params : long,long,int Returns : void} clear{ Params : long Returns : void} delete{ Params :  Returns : void} getSegment{ Params : String Returns : Long} isClosed{ Params :  Returns : boolean} close{ Params : boolean Returns : void} lastEntry{ Params :  Returns : FileStoreEntry} isEmpty{ Params :  Returns : boolean} reset{ Params : long Returns : void} ,initSegments getSegmentIterator createIterator validateSegment handover cleanup getSegments isClosed close ,,,,,AtomicReference<FileStoreEntry> ,,AtomicReference<FileStoreEntry> ,AtomicReference AtomicLong ConcurrentSkipListMap ConcurrentHashMap AtomicReference Synchronizer FileStoreException FileStoreException FileStoreException MultiSegmentIterator MultiSegmentIterator ReaderEventIterator ValidationResult BufferEntryIterator ConcurrentHashMap WritePosition CompletableFuture CompletableFuture Checksum Checksum FileStoreException WritePosition RandomAccessFile ConcurrentHashMap WritableEntrySource FileStoreException FileStoreException ,storageProperties: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,WritePosition,1,1,0,0,0,false,0 ,Comparable<WritePosition> ,0 ,INVALID: WritePosition writePositionComparator: Comparator<WritePosition> sequence: long position: int buffer: WritableEntrySource segment: Long index: long ,reset{ Params : WritableEntrySource Returns : WritePosition} isOverflow{ Params : int Returns : boolean} getSegment{ Params :  Returns : Long} getPosition{ Params :  Returns : int} isWritable{ Params : int Returns : boolean} incrementedWith{ Params : long,int Returns : WritePosition} isComplete{ Params :  Returns : boolean} toString{ Params :  Returns : String} compareTo{ Params : WritePosition Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} force{ Params :  Returns : void} ,toString compareTo equals hashCode ,,,,Comparable ,long ,,long ,WritePosition WritePosition WritePosition ,buffer: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,BaseAppendOnlyFileStoreTest,1,1,0,0,0,false,0 ,0 ,0 ,tempFolder: TemporaryFolder baseFileStore: BaseAppendOnlyFileStore storageProperties: StorageProperties ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} append{ Params :  Returns : void} appendLargeEntry{ Params :  Returns : void} appendMultiple{ Params :  Returns : void} appendMultipleReopenAndRead{ Params :  Returns : void} append{ Params : String,int Returns : long} entry{ Params : byte[],int Returns : FileStoreEntry} bytes{ Params :  Returns : byte[]} version{ Params :  Returns : byte} read{ Params :  Returns : void} reset{ Params :  Returns : void} resetCancelsStreams{ Params :  Returns : void} hookOnSubscribe{ Params : Subscription Returns : void} hookOnNext{ Params : FileStoreEntry Returns : void} hookOnError{ Params : Throwable Returns : void} hookOnComplete{ Params :  Returns : void} resetMultipleSegments{ Params :  Returns : void} stream{ Params :  Returns : void} streamSublist{ Params :  Returns : void} ,bytes version hookOnSubscribe hookOnNext hookOnError hookOnComplete ,,,,,StorageProperties ,,StorageProperties ,TemporaryFolder StorageProperties BaseAppendOnlyFileStore String String BaseAppendOnlyFileStore String FileStoreEntry String String CompletableFuture BaseSubscriber ,entries: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,ResetLockTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testStartReset{ Params :  Returns : void} testStartResetFails{ Params :  Returns : void} ,,,,,,,,,ResetLock ResetLock ,ex: 
axon-server-se-master,io.axoniq.axonserver.queryparser,BaseQueryElement,1,1,1,0,0,false,0 ,PipelineEntry ,0 ,children: List<PipelineEntry> ,add{ Params : PipelineEntry Returns : void} get{ Params : int Returns : PipelineEntry} getIdentifiers{ Params :  Returns : List<String>} alias{ Params :  Returns : Optional<String>} getLiteral{ Params :  Returns : String} size{ Params :  Returns : int} ,add get getIdentifiers alias getLiteral ,,,,PipelineEntry ,,,,ArrayList ArrayList ,children: 
axon-server-se-master,io.axoniq.axonserver.queryparser,EventStoreQueryListener,1,1,0,0,0,false,EventStoreQueryBaseListener ,0 ,0 ,stack: Stack<PipelineEntry> queryParser: io.axoniq.EventStoreQueryParser ,enterQuery{ Params : EventStoreQueryParser.QueryContext Returns : void} exitQuery{ Params : EventStoreQueryParser.QueryContext Returns : void} enterTime_constraint{ Params : EventStoreQueryParser.Time_constraintContext Returns : void} normalizeSymbolicName{ Params : int Returns : String} exitTime_constraint{ Params : EventStoreQueryParser.Time_constraintContext Returns : void} exitTime_unit{ Params : EventStoreQueryParser.Time_unitContext Returns : void} enterExpr{ Params : EventStoreQueryParser.ExprContext Returns : void} exitExpr{ Params : EventStoreQueryParser.ExprContext Returns : void} exitSigned_number{ Params : EventStoreQueryParser.Signed_numberContext Returns : void} exitLiteral_value{ Params : EventStoreQueryParser.Literal_valueContext Returns : void} exitIdentifier{ Params : EventStoreQueryParser.IdentifierContext Returns : void} exitFunction_name{ Params : EventStoreQueryParser.Function_nameContext Returns : void} exitUnary_operator{ Params : EventStoreQueryParser.Unary_operatorContext Returns : void} exitOperator_group1{ Params : EventStoreQueryParser.Operator_group1Context Returns : void} exitOperator_group2{ Params : EventStoreQueryParser.Operator_group2Context Returns : void} exitOperator_group3{ Params : EventStoreQueryParser.Operator_group3Context Returns : void} exitOperator_group4{ Params : EventStoreQueryParser.Operator_group4Context Returns : void} exitOperator_group5{ Params : EventStoreQueryParser.Operator_group5Context Returns : void} exitOperator_group6{ Params : EventStoreQueryParser.Operator_group6Context Returns : void} exitAlias{ Params : EventStoreQueryParser.AliasContext Returns : void} enterExpr_list{ Params : EventStoreQueryParser.Expr_listContext Returns : void} exitExpr_list{ Params : EventStoreQueryParser.Expr_listContext Returns : void} query{ Params :  Returns : Query} ,enterQuery exitQuery enterTime_constraint exitTime_constraint exitTime_unit enterExpr exitExpr exitSigned_number exitLiteral_value exitIdentifier exitFunction_name exitUnary_operator exitOperator_group1 exitOperator_group2 exitOperator_group3 exitOperator_group4 exitOperator_group5 exitOperator_group6 exitAlias enterExpr_list exitExpr_list ,,,,,io.axoniq.EventStoreQueryParser ,,io.axoniq.EventStoreQueryParser ,Stack Query TimeConstraint Identifier Identifier FunctionExpr Numeric StringLiteral Identifier OperandList ,stack: 
axon-server-se-master,io.axoniq.axonserver.queryparser,EventStoreQueryParser,1,1,0,0,0,false,0 ,0 ,0 ,,parse{ Params : String Returns : Query} syntaxError{ Params : Recognizer<?,?>,Object,int,int,String,RecognitionException Returns : void} ,syntaxError ,,,,,,,,EventStoreQueryLexer ANTLRInputStream ArrayList BaseErrorListener ParseException CommonTokenStream EventStoreQueryParser ParseTreeWalker EventStoreQueryListener ,baseListener: 
axon-server-se-master,io.axoniq.axonserver.queryparser,FunctionExpr,1,1,0,0,0,false,BaseQueryElement ,0 ,0 ,alias: String ,toString{ Params :  Returns : String} getIdentifiers{ Params :  Returns : List<String>} operator{ Params :  Returns : String} getParameters{ Params :  Returns : List<? extends QueryElement>} alias{ Params :  Returns : Optional<String>} setAlias{ Params : String Returns : void} setOperator{ Params : String Returns : void} size{ Params :  Returns : int} ,toString getIdentifiers operator getParameters ,,,,,String ,,String ,ArrayList FunctionName ,children: 
axon-server-se-master,io.axoniq.axonserver.queryparser,FunctionName,1,1,0,0,0,false,0 ,PipelineEntry ,0 ,identifier: String ,getIdentifier{ Params :  Returns : String} add{ Params : PipelineEntry Returns : void} get{ Params : int Returns : PipelineEntry} toString{ Params :  Returns : String} getIdentifiers{ Params :  Returns : List<String>} operator{ Params :  Returns : String} getParameters{ Params :  Returns : List<? extends QueryElement>} getLiteral{ Params :  Returns : String} alias{ Params :  Returns : Optional<String>} ,add get toString getIdentifiers operator getParameters getLiteral alias ,,,,PipelineEntry ,String ,,String ,UnsupportedOperationException ,Optional: , identifier
axon-server-se-master,io.axoniq.axonserver.queryparser,Identifier,1,1,0,0,0,false,0 ,PipelineEntry ,0 ,identifier: String alias: String ,getIdentifier{ Params :  Returns : String} add{ Params : PipelineEntry Returns : void} get{ Params : int Returns : PipelineEntry} toString{ Params :  Returns : String} getIdentifiers{ Params :  Returns : List<String>} operator{ Params :  Returns : String} getParameters{ Params :  Returns : List<? extends QueryElement>} getLiteral{ Params :  Returns : String} alias{ Params :  Returns : Optional<String>} setAlias{ Params : String Returns : void} ,add get toString getIdentifiers operator getParameters getLiteral alias ,,,,PipelineEntry ,String ,,String ,UnsupportedOperationException ,Optional: , alias
axon-server-se-master,io.axoniq.axonserver.queryparser,Numeric,1,1,0,0,0,false,0 ,PipelineEntry ,0 ,value: String ,toString{ Params :  Returns : String} operator{ Params :  Returns : String} getParameters{ Params :  Returns : List<QueryElement>} getLiteral{ Params :  Returns : String} alias{ Params :  Returns : Optional<String>} add{ Params : PipelineEntry Returns : void} get{ Params : int Returns : PipelineEntry} getIdentifiers{ Params :  Returns : List<String>} ,toString operator getParameters getLiteral alias add get getIdentifiers ,,,,PipelineEntry ,String ,,String ,UnsupportedOperationException UnsupportedOperationException ,Collections: 
axon-server-se-master,io.axoniq.axonserver.queryparser,OperandList,1,1,0,0,0,false,BaseQueryElement ,0 ,0 ,,toString{ Params :  Returns : String} operator{ Params :  Returns : String} getParameters{ Params :  Returns : List<? extends QueryElement>} getLiteral{ Params :  Returns : String} ,toString operator getParameters getLiteral ,,,,,,,,,Collectors: 
axon-server-se-master,io.axoniq.axonserver.queryparser,PipelineEntry,2,1,0,0,0,true,BaseQueryElement ,0 ,0 ,,add{ Params : PipelineEntry Returns : void} get{ Params : int Returns : PipelineEntry} getIdentifiers{ Params :  Returns : List<String>} ,,,,,,,,,,Collectors: 
axon-server-se-master,io.axoniq.axonserver.queryparser,Query,1,1,0,0,0,false,BaseQueryElement ,0 ,0 ,,toString{ Params :  Returns : String} operator{ Params :  Returns : String} getParameters{ Params :  Returns : List<? extends QueryElement>} getLiteral{ Params :  Returns : String} getStartTime{ Params :  Returns : long} addDefaultLimit{ Params : long Returns : void} hasLimit{ Params :  Returns : boolean} ,toString operator getParameters getLiteral ,,,,,,,,FunctionExpr Identifier Numeric ,entry: 
axon-server-se-master,io.axoniq.axonserver.queryparser,QueryElement,2,1,0,0,0,true,BaseQueryElement ,0 ,0 ,,operator{ Params :  Returns : String} getParameters{ Params :  Returns : List<? extends QueryElement>} getLiteral{ Params :  Returns : String} alias{ Params :  Returns : Optional<String>} ,,,,,,,,,,entry: 
axon-server-se-master,io.axoniq.axonserver.queryparser,StringLiteral,1,1,0,0,0,false,0 ,PipelineEntry ,0 ,literal: String ,operator{ Params :  Returns : String} getParameters{ Params :  Returns : List<QueryElement>} getLiteral{ Params :  Returns : String} alias{ Params :  Returns : Optional<String>} add{ Params : PipelineEntry Returns : void} get{ Params : int Returns : PipelineEntry} getIdentifiers{ Params :  Returns : List<String>} toString{ Params :  Returns : String} ,operator getParameters alias add get getIdentifiers toString ,,,,PipelineEntry ,String ,,String ,UnsupportedOperationException ,literal: , "\"", "\\\""
axon-server-se-master,io.axoniq.axonserver.queryparser,TimeConstraint,1,1,0,0,0,false,BaseQueryElement ,0 ,0 ,,toString{ Params :  Returns : String} getIdentifiers{ Params :  Returns : List<String>} operator{ Params :  Returns : String} getParameters{ Params :  Returns : List<? extends QueryElement>} alias{ Params :  Returns : Optional<String>} getStart{ Params :  Returns : long} ,toString getIdentifiers operator getParameters ,,,,,,,,,now: 
axon-server-se-master,io.axoniq.axonserver.queryparser,EventStoreQueryParserTest,1,1,0,0,0,false,0 ,0 ,0 ,,parseInfixFunction{ Params :  Returns : void} parseSimpleFunction{ Params :  Returns : void} parseEscapedQuote{ Params :  Returns : void} parseTimeConstraint{ Params :  Returns : void} parseConditionAndTimeConstraint{ Params :  Returns : void} parseTimeConstraintFirst{ Params :  Returns : void} parseOneMore{ Params :  Returns : void} parseExprList{ Params :  Returns : void} parseArith{ Params :  Returns : void} parseAlias{ Params :  Returns : void} parsePrecedence{ Params :  Returns : void} parsePrefixNotation{ Params :  Returns : void} parseOr{ Params :  Returns : void} parseAnd{ Params :  Returns : void} parseNot{ Params :  Returns : void} parseMin{ Params :  Returns : void} ,,,,,,,,,EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser EventStoreQueryParser ,System.out: , parsedQuery
axon-server-se-master,io.axoniq.axonserver.test,AssertUtils,1,1,0,0,0,false,0 ,0 ,0 ,,assertWithin{ Params : int,TimeUnit,Runnable Returns : void} ,,assertWithin ,,,,,,,,System: 
axon-server-se-master,io.axoniq.axonserver.test,FakeClock,1,1,0,0,0,false,Clock ,0 ,0 ,instant: Instant ,getZone{ Params :  Returns : ZoneId} withZone{ Params : ZoneId Returns : Clock} instant{ Params :  Returns : Instant} timeElapses{ Params : long Returns : void} timeElapses{ Params : long,TimeUnit Returns : void} ,getZone withZone instant ,,,,,,,,,timeUnit: , delay
axon-server-se-master,io.axoniq.axonserver.test,FakeScheduledExecutorService,1,1,0,0,0,false,0 ,ScheduledExecutorService ,ScheduledTask FakeScheduledRegistration ,tasks: NavigableSet<ScheduledTask> clock: FakeClock ,compareTo{ Params : ScheduledTask Returns : int} run{ Params :  Returns : void} tasks{ Params :  Returns : int} clock{ Params :  Returns : Clock} schedule{ Params : Runnable,long,TimeUnit Returns : FakeScheduledRegistration<?>} schedule{ Params : Callable<V>,long,TimeUnit Returns : ScheduledFuture<V>} scheduleAtFixedRate{ Params : Runnable,long,long,TimeUnit Returns : ScheduledFuture<?>} scheduleWithFixedDelay{ Params : Runnable,long,long,TimeUnit Returns : ScheduledFuture<?>} run{ Params :  Returns : void} execute{ Params : Runnable Returns : void} shutdown{ Params :  Returns : void} shutdownNow{ Params :  Returns : List<Runnable>} isShutdown{ Params :  Returns : boolean} isTerminated{ Params :  Returns : boolean} awaitTermination{ Params : long,TimeUnit Returns : boolean} submit{ Params : Callable<T> Returns : Future<T>} submit{ Params : Runnable,T Returns : Future<T>} submit{ Params : Runnable Returns : Future<?>} invokeAll{ Params : Collection<? extends Callable<T>> Returns : List<Future<T>>} invokeAll{ Params : Collection<? extends Callable<T>>,long,TimeUnit Returns : List<Future<T>>} invokeAny{ Params : Collection<? extends Callable<T>> Returns : T} invokeAny{ Params : Collection<? extends Callable<T>>,long,TimeUnit Returns : T} timeElapses{ Params : long Returns : void} timeElapses{ Params : long,TimeUnit Returns : void} getDelay{ Params : TimeUnit Returns : long} compareTo{ Params : Delayed Returns : int} cancel{ Params : boolean Returns : boolean} isCancelled{ Params :  Returns : boolean} isDone{ Params :  Returns : boolean} get{ Params :  Returns : T} get{ Params : long,TimeUnit Returns : T} ,compareTo schedule schedule scheduleAtFixedRate scheduleWithFixedDelay run execute shutdown shutdownNow isShutdown isTerminated awaitTermination submit submit submit invokeAll invokeAll invokeAny invokeAny getDelay compareTo cancel isCancelled isDone get get ,,,,ScheduledExecutorService ,FakeClock ,,FakeClock ,TreeSet FakeClock ScheduledTask FakeScheduledRegistration NotImplementedException NotImplementedException AtomicReference Runnable FakeScheduledRegistration NotImplementedException NotImplementedException NotImplementedException NotImplementedException NotImplementedException NotImplementedException NotImplementedException ,tasks: 
axon-server-se-master,io.axoniq.axonserver.test,ScheduledTask,3,2,0,1,0,false,0 ,ScheduledExecutorService ,ScheduledTask FakeScheduledRegistration ,command: Runnable scheduledTime: Instant ,compareTo{ Params : ScheduledTask Returns : int} run{ Params :  Returns : void} tasks{ Params :  Returns : int} clock{ Params :  Returns : Clock} schedule{ Params : Runnable,long,TimeUnit Returns : FakeScheduledRegistration<?>} schedule{ Params : Callable<V>,long,TimeUnit Returns : ScheduledFuture<V>} scheduleAtFixedRate{ Params : Runnable,long,long,TimeUnit Returns : ScheduledFuture<?>} scheduleWithFixedDelay{ Params : Runnable,long,long,TimeUnit Returns : ScheduledFuture<?>} run{ Params :  Returns : void} execute{ Params : Runnable Returns : void} shutdown{ Params :  Returns : void} shutdownNow{ Params :  Returns : List<Runnable>} isShutdown{ Params :  Returns : boolean} isTerminated{ Params :  Returns : boolean} awaitTermination{ Params : long,TimeUnit Returns : boolean} submit{ Params : Callable<T> Returns : Future<T>} submit{ Params : Runnable,T Returns : Future<T>} submit{ Params : Runnable Returns : Future<?>} invokeAll{ Params : Collection<? extends Callable<T>> Returns : List<Future<T>>} invokeAll{ Params : Collection<? extends Callable<T>>,long,TimeUnit Returns : List<Future<T>>} invokeAny{ Params : Collection<? extends Callable<T>> Returns : T} invokeAny{ Params : Collection<? extends Callable<T>>,long,TimeUnit Returns : T} timeElapses{ Params : long Returns : void} timeElapses{ Params : long,TimeUnit Returns : void} getDelay{ Params : TimeUnit Returns : long} compareTo{ Params : Delayed Returns : int} cancel{ Params : boolean Returns : boolean} isCancelled{ Params :  Returns : boolean} isDone{ Params :  Returns : boolean} get{ Params :  Returns : T} get{ Params : long,TimeUnit Returns : T} ,compareTo schedule schedule scheduleAtFixedRate scheduleWithFixedDelay run execute shutdown shutdownNow isShutdown isTerminated awaitTermination submit submit submit invokeAll invokeAll invokeAny invokeAny getDelay compareTo cancel isCancelled isDone get get ,,,,Comparable ,Instant ,,Instant ,,command: 
axon-server-se-master,io.axoniq.axonserver.test,FakeScheduledRegistration,3,2,0,0,0,false,0 ,ScheduledExecutorService ,ScheduledTask FakeScheduledRegistration ,task: ScheduledTask ,compareTo{ Params : ScheduledTask Returns : int} run{ Params :  Returns : void} tasks{ Params :  Returns : int} clock{ Params :  Returns : Clock} schedule{ Params : Runnable,long,TimeUnit Returns : FakeScheduledRegistration<?>} schedule{ Params : Callable<V>,long,TimeUnit Returns : ScheduledFuture<V>} scheduleAtFixedRate{ Params : Runnable,long,long,TimeUnit Returns : ScheduledFuture<?>} scheduleWithFixedDelay{ Params : Runnable,long,long,TimeUnit Returns : ScheduledFuture<?>} run{ Params :  Returns : void} execute{ Params : Runnable Returns : void} shutdown{ Params :  Returns : void} shutdownNow{ Params :  Returns : List<Runnable>} isShutdown{ Params :  Returns : boolean} isTerminated{ Params :  Returns : boolean} awaitTermination{ Params : long,TimeUnit Returns : boolean} submit{ Params : Callable<T> Returns : Future<T>} submit{ Params : Runnable,T Returns : Future<T>} submit{ Params : Runnable Returns : Future<?>} invokeAll{ Params : Collection<? extends Callable<T>> Returns : List<Future<T>>} invokeAll{ Params : Collection<? extends Callable<T>>,long,TimeUnit Returns : List<Future<T>>} invokeAny{ Params : Collection<? extends Callable<T>> Returns : T} invokeAny{ Params : Collection<? extends Callable<T>>,long,TimeUnit Returns : T} timeElapses{ Params : long Returns : void} timeElapses{ Params : long,TimeUnit Returns : void} getDelay{ Params : TimeUnit Returns : long} compareTo{ Params : Delayed Returns : int} cancel{ Params : boolean Returns : boolean} isCancelled{ Params :  Returns : boolean} isDone{ Params :  Returns : boolean} get{ Params :  Returns : T} get{ Params : long,TimeUnit Returns : T} ,compareTo schedule schedule scheduleAtFixedRate scheduleWithFixedDelay run execute shutdown shutdownNow isShutdown isTerminated awaitTermination submit submit submit invokeAll invokeAll invokeAny invokeAny getDelay compareTo cancel isCancelled isDone get get ,,,,ScheduledFuture ,ScheduledTask ,,ScheduledTask ,,tasks: , task
axon-server-se-master,io.axoniq.axonserver.test,FakeStreamObserver,1,1,0,0,0,false,ServerCallStreamObserver<M> ,0 ,0 ,values: List<M> errors: List<Throwable> completedCount: int isReady: AtomicBoolean onReadyHandler: Runnable ,onNext{ Params : M Returns : void} onError{ Params : Throwable Returns : void} onCompleted{ Params :  Returns : void} values{ Params :  Returns : List<M>} errors{ Params :  Returns : List<Throwable>} completedCount{ Params :  Returns : int} setIsReady{ Params : boolean Returns : void} isReady{ Params :  Returns : boolean} setOnReadyHandler{ Params : Runnable Returns : void} disableAutoInboundFlowControl{ Params :  Returns : void} request{ Params : int Returns : void} setMessageCompression{ Params : boolean Returns : void} isCancelled{ Params :  Returns : boolean} setOnCancelHandler{ Params : Runnable Returns : void} setCompression{ Params : String Returns : void} ,onNext onError onCompleted isReady setOnReadyHandler disableAutoInboundFlowControl request setMessageCompression isCancelled setOnCancelHandler setCompression ,,,,,Runnable ,,Runnable ,LinkedList LinkedList AtomicBoolean ,isReady: 
axon-server-se-master,io.axoniq.axonserver.test,TestUtils,1,1,0,0,0,false,0 ,0 ,0 ,,fixPathOnWindows{ Params : String Returns : String} ,,fixPathOnWindows ,,,,,,,,file: , 1
axon-server-se-master,io.axoniq.axonserver.filestorage,FileStoreEntry,2,1,0,0,0,true,0 ,0 ,0 ,,bytes{ Params :  Returns : byte[]} version{ Params :  Returns : byte} ,,,,,,,,,,file: , 1
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,AbstractSegment,1,1,1,0,0,false,0 ,0 ,0 ,logger: Logger VERSION: byte context: String storageProperties: StorageProperties next: AbstractSegment ,handover{ Params : Long,Runnable Returns : void} init{ Params : boolean Returns : void} validate{ Params : int Returns : void} getAllSegments{ Params :  Returns : Stream<Long>} validateSegment{ Params : long Returns : ValidationResult} initSegments{ Params : long Returns : void} getEntries{ Params : long,long Returns : CloseableIterator<FileStoreEntry>} createIterator{ Params : long,long Returns : Optional<CloseableIterator<FileStoreEntry>>} getSegmentFor{ Params : long Returns : long} prepareSegmentStore{ Params : long Returns : SortedSet<Long>} cleanup{ Params : int Returns : void} getSegments{ Params :  Returns : SortedSet<Long>} getSegmentIterator{ Params : long Returns : CloseableIterator<FileStoreEntry>} isClosed{ Params :  Returns : boolean} close{ Params : boolean Returns : void} removeSegment{ Params : long Returns : void} ,,,,handover initSegments createIterator cleanup getSegments isClosed close removeSegment ,,,,,FileStoreException ValidationResult ValidationResult ConcurrentSkipListSet FileStoreException ,: , segment, nextIndex
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,BufferEntryIterator,1,1,0,0,0,false,0 ,CloseableIterator<FileStoreEntry> ,0 ,source: ByteBufferEntrySource ,close{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : FileStoreEntry} ,close hasNext next ,,,,CloseableIterator ,ByteBufferEntrySource ,,ByteBufferEntrySource ,IllegalArgumentException NoSuchElementException ,source: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,ByteBufferEntrySource,1,1,0,0,0,false,0 ,0 ,0 ,START_POSITION: int buffer: ByteBuffer segment: long main: boolean cleanerHackNeeded: boolean ,readEntry{ Params :  Returns : FileStoreEntry} bytes{ Params :  Returns : byte[]} version{ Params :  Returns : byte} createEntryIterator{ Params : long Returns : CloseableIterator<FileStoreEntry>} duplicate{ Params :  Returns : ByteBufferEntrySource} duplicate{ Params : int Returns : ByteBufferEntrySource} finalize{ Params :  Returns : void} getBuffer{ Params :  Returns : ByteBuffer} position{ Params :  Returns : int} clean{ Params : long Returns : void} ,bytes version finalize ,,,,,boolean ,,boolean ,FileStoreEntry FileStoreException BufferEntryIterator ByteBufferEntrySource ByteBufferEntrySource ,: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,Checksum,1,1,0,0,0,false,0 ,0 ,0 ,crc32: CRC32 ,get{ Params :  Returns : int} update{ Params : byte[] Returns : Checksum} update{ Params : ByteBuffer,int,int Returns : Checksum} ,,,,,,CRC32 ,,CRC32 ,CRC32 ,buffer: , position + i
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,CleanUtils,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger cleanupExecutor: ScheduledExecutorService RETRIES: int java8: boolean ,cleanOldsJDK{ Params : ByteBuffer Returns : void} cleanJavaWithModules{ Params : ByteBuffer Returns : void} cleanDirectBuffer{ Params : ByteBuffer,BooleanSupplier,long,String Returns : void} doCleanup{ Params : BooleanSupplier,ByteBuffer,long,String,int Returns : void} ,,cleanOldsJDK cleanJavaWithModules cleanDirectBuffer doCleanup ,,,,,,,Thread ,logger: , "Clean failed", exception
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,FileStoreException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,errorCode: FileStoreErrorCode ,,,,,,,FileStoreErrorCode ,,FileStoreErrorCode ,,null
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,FileUtils,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger ,checkCreateDirectory{ Params : File Returns : void} getFilesWithSuffix{ Params : File,String Returns : String[]} delete{ Params : File Returns : boolean} ,,checkCreateDirectory getFilesWithSuffix delete ,,,,,,,FileStoreException FileStoreException FileStoreException ,logger: , "Failed to delete: {}", file, e
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,MultiSegmentIterator,1,1,0,0,0,false,0 ,CloseableIterator<FileStoreEntry> ,0 ,iteratorProvider: Function<Long, CloseableIterator<FileStoreEntry>> nextIndex: AtomicLong lastIndexProvider: Supplier<Long> iterator: CloseableIterator<FileStoreEntry> ,hasNext{ Params :  Returns : boolean} next{ Params :  Returns : FileStoreEntry} close{ Params :  Returns : void} checkMoveToNextSegment{ Params :  Returns : void} ,hasNext next close ,,,,CloseableIterator ,CloseableIterator<FileStoreEntry> ,,CloseableIterator<FileStoreEntry> ,AtomicLong NoSuchElementException ,nextIndex: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,PositionKeepingReader,1,1,0,0,0,false,0 ,0 ,0 ,position: int reader: RandomAccessFile ,readByte{ Params :  Returns : byte} readInt{ Params :  Returns : int} position{ Params : int Returns : void} readBytes{ Params : int Returns : byte[]} close{ Params :  Returns : void} readShort{ Params :  Returns : short} position{ Params :  Returns : int} skipBytes{ Params : int Returns : void} readLong{ Params :  Returns : long} ,,,,,,RandomAccessFile ,,RandomAccessFile ,RandomAccessFile ,reader: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,ReaderEventIterator,1,1,0,0,0,false,0 ,CloseableIterator<FileStoreEntry> ,0 ,reader: PositionKeepingReader nextSize: int ,forwardTo{ Params : long,long Returns : void} close{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : FileStoreEntry} bytes{ Params :  Returns : byte[]} version{ Params :  Returns : byte} ,close hasNext next bytes version ,,,,CloseableIterator ,int ,,int ,PositionKeepingReader FileStoreException NoSuchElementException FileStoreEntry FileStoreException ,e: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,ReadOnlySegments,1,1,0,0,0,false,AbstractSegment ,0 ,0 ,scheduledExecutorService: ScheduledExecutorService segments: SortedSet<Long> ,initSegments{ Params : long Returns : void} createIterator{ Params : long,long Returns : Optional<CloseableIterator<FileStoreEntry>>} getSegments{ Params :  Returns : SortedSet<Long>} handover{ Params : Long,Runnable Returns : void} deleteFiles{ Params : Long Returns : void} cleanup{ Params : int Returns : void} removeSegment{ Params : long Returns : void} isClosed{ Params :  Returns : boolean} close{ Params : boolean Returns : void} ,initSegments createIterator getSegments handover cleanup isClosed close ,,,,,SortedSet<Long> ,,SortedSet<Long> ,ConcurrentSkipListSet Thread ReaderEventIterator ,segments: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,StorageProperties,1,1,0,0,0,false,0 ,0 ,0 ,PATH_FORMAT: String suffix: String syncInterval: long forceInterval: long primaryCleanupDelay: long segmentSize: long flags: int forceClean: boolean storage: File validationSegments: int firstIndex: long ,getSuffix{ Params :  Returns : String} setSuffix{ Params : String Returns : void} getSyncInterval{ Params :  Returns : long} setSyncInterval{ Params : long Returns : void} getForceInterval{ Params :  Returns : long} setForceInterval{ Params : long Returns : void} dataFile{ Params : long Returns : File} getPrimaryCleanupDelay{ Params :  Returns : long} setPrimaryCleanupDelay{ Params : long Returns : void} getSegmentSize{ Params :  Returns : long} setSegmentSize{ Params : long Returns : void} getFlags{ Params :  Returns : int} setFlags{ Params : int Returns : void} isForceClean{ Params :  Returns : boolean} setForceClean{ Params : boolean Returns : void} getStorage{ Params :  Returns : File} setStorage{ Params : File Returns : void} getValidationSegments{ Params :  Returns : int} setValidationSegments{ Params : int Returns : void} getFirstIndex{ Params :  Returns : long} setFirstIndex{ Params : long Returns : void} ,,,,,,long ,,long ,File ,storage: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,Synchronizer,1,1,0,0,0,false,0 ,0 ,0 ,log: Logger writePositions: SortedMap<WritePosition, CompletableFuture<Long>> fsync: ScheduledExecutorService context: String storageProperties: StorageProperties completeSegmentCallback: Consumer<Long> lastCompletedRef: AtomicReference<WritePosition> syncAndCloseFile: ConcurrentSkipListSet<Long> updated: AtomicBoolean forceJob: ScheduledFuture<?> syncJob: ScheduledFuture<?> ,notifyWritePositions{ Params :  Returns : void} syncAndCloseFile{ Params :  Returns : void} closeFile{ Params : Long Returns : void} register{ Params : WritePosition Returns : CompletableFuture<Long>} canSyncAt{ Params : WritePosition Returns : boolean} init{ Params : WritePosition Returns : void} forceCurrent{ Params :  Returns : void} shutdown{ Params : boolean Returns : void} isShutdown{ Params :  Returns : boolean} waitForPendingWrites{ Params :  Returns : void} ,,,,,,ScheduledFuture<?> ,,ScheduledFuture<?> ,ConcurrentSkipListMap AtomicReference ConcurrentSkipListSet AtomicBoolean Thread CompletableFuture FileStoreException ,Thread: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,ValidationResult,1,1,0,0,0,false,0 ,0 ,0 ,segment: long message: String lastToken: long valid: boolean ,getLastToken{ Params :  Returns : long} isValid{ Params :  Returns : boolean} getMessage{ Params :  Returns : String} getSegment{ Params :  Returns : long} ,,,,,,boolean ,,boolean ,,Thread: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,WritableEntrySource,1,1,0,0,0,false,ByteBufferEntrySource ,0 ,0 ,logger: Logger ,mappedByteBuffer{ Params :  Returns : MappedByteBuffer} limit{ Params :  Returns : int} capacity{ Params :  Returns : int} force{ Params :  Returns : void} getInt{ Params : int Returns : int} putInt{ Params : int,int Returns : void} position{ Params : int Returns : void} ,,,,,,,,,,: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,WritableSegment,1,1,0,0,0,false,AbstractSegment ,0 ,0 ,logger: Logger HEADER_BYTES: int TX_CHECKSUM_BYTES: int FILE_HEADER_SIZE: int FILE_FOOTER_SIZE: int MAX_ENTRY_SIZE: int synchronizer: Synchronizer writePositionRef: AtomicReference<WritePosition> lastIndex: AtomicLong positionsPerSegmentMap: ConcurrentNavigableMap<Long, Map<Long, Integer>> readBuffers: Map<Long, ByteBufferEntrySource> lastEntry: AtomicReference<FileStoreEntry> ,initSegments{ Params : long Returns : void} write{ Params : FileStoreEntry Returns : CompletableFuture<Long>} write{ Params : List<FileStoreEntry> Returns : CompletableFuture<Long>} getSegmentIterator{ Params : long Returns : CloseableIterator<FileStoreEntry>} getEntryIterator{ Params : long Returns : CloseableIterator<FileStoreEntry>} getEntryIterator{ Params : long,long Returns : CloseableIterator<FileStoreEntry>} createIterator{ Params : long,long Returns : Optional<CloseableIterator<FileStoreEntry>>} validateSegment{ Params : long Returns : ValidationResult} initLatestSegment{ Params : long,File Returns : void} getFirstFile{ Params : long,File Returns : long} store{ Params : WritePosition,List<FileStoreEntry> Returns : CompletableFuture<Long>} store{ Params : WritePosition,FileStoreEntry Returns : CompletableFuture<Long>} handover{ Params : Long,Runnable Returns : void} cleanup{ Params : int Returns : void} getSegments{ Params :  Returns : SortedSet<Long>} getLastIndex{ Params :  Returns : long} removeSegment{ Params : long Returns : void} completeSegment{ Params : Long Returns : void} write{ Params : WritePosition,FileStoreEntry Returns : void} write{ Params : WritePosition,List<FileStoreEntry> Returns : void} claim{ Params : long,int Returns : WritePosition} getOrOpenDatafile{ Params : long,long,boolean Returns : WritableEntrySource} checkBuffer{ Params : long,long,int Returns : void} clear{ Params : long Returns : void} delete{ Params :  Returns : void} getSegment{ Params : String Returns : Long} isClosed{ Params :  Returns : boolean} close{ Params : boolean Returns : void} lastEntry{ Params :  Returns : FileStoreEntry} isEmpty{ Params :  Returns : boolean} ,initSegments getSegmentIterator createIterator validateSegment handover cleanup getSegments isClosed close ,,,,,AtomicReference<FileStoreEntry> ,,AtomicReference<FileStoreEntry> ,AtomicReference AtomicLong ConcurrentSkipListMap ConcurrentHashMap AtomicReference Synchronizer FileStoreException FileStoreException FileStoreException MultiSegmentIterator MultiSegmentIterator ValidationResult BufferEntryIterator ConcurrentHashMap WritePosition CompletableFuture CompletableFuture Checksum Checksum FileStoreException WritePosition RandomAccessFile ConcurrentHashMap WritableEntrySource FileStoreException FileStoreException ,storageProperties: 
axon-server-se-master,io.axoniq.axonserver.filestorage.impl,WritePosition,1,1,0,0,0,false,0 ,Comparable<WritePosition> ,0 ,INVALID: WritePosition writePositionComparator: Comparator<WritePosition> sequence: long position: int buffer: WritableEntrySource segment: Long index: long ,reset{ Params : WritableEntrySource Returns : WritePosition} isOverflow{ Params : int Returns : boolean} getSegment{ Params :  Returns : Long} getPosition{ Params :  Returns : int} isWritable{ Params : int Returns : boolean} incrementedWith{ Params : long,int Returns : WritePosition} isComplete{ Params :  Returns : boolean} toString{ Params :  Returns : String} compareTo{ Params : WritePosition Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} force{ Params :  Returns : void} ,toString compareTo equals hashCode ,,,,Comparable ,long ,,long ,WritePosition WritePosition WritePosition ,buffer: 
