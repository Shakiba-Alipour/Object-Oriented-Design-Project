Project Name,Package Name,Class Name,Class Type,Class Visibility,Is Abstract,Is Static,Is Final,Is Interface,Extends,Implements,Children,Fields,Methods,Overrides,Static Methods,final Methods , Abstract Methods, Association, Aggregation, Delegation, Composition, Instantiation
JUnit,junit.awtui,AboutDialog,1,0,0,0,0,false,Dialog ,0 ,0 ,,actionPerformed{ Params : ActionEvent Returns : void} windowClosing{ Params : WindowEvent Returns : void} ,,,,,,,,,GridBagLayout Button ActionListener Label Font Label Font Logo GridBagConstraints GridBagConstraints GridBagConstraints Insets GridBagConstraints WindowAdapter 
JUnit,junit.awtui,Logo,1,1,0,0,0,false,Canvas ,0 ,0 ,fImage: Image fWidth: int fHeight: int ,loadImage{ Params : String Returns : Image} paint{ Params : Graphics Returns : void} paintBackground{ Params : java.awt.Graphics Returns : void} ,,,,,,int ,,int ,MediaTracker 
JUnit,junit.awtui,ProgressBar,1,1,0,0,0,false,Canvas ,0 ,0 ,fError: boolean fTotal: int fProgress: int fProgressX: int ,getStatusColor{ Params :  Returns : Color} paint{ Params : Graphics Returns : void} paintBackground{ Params : Graphics Returns : void} paintStatus{ Params : Graphics Returns : void} paintStep{ Params : int,int Returns : void} reset{ Params :  Returns : void} scale{ Params : int Returns : int} setBounds{ Params : int,int,int,int Returns : void} start{ Params : int Returns : void} step{ Params : boolean Returns : void} ,,,,,,,,,Rectangle 
JUnit,junit.awtui,TestRunner,1,1,0,0,0,false,BaseTestRunner ,0 ,0 ,fFrame: Frame fExceptions: Vector fFailedTests: Vector fRunner: Thread fTestResult: TestResult fTraceArea: TextArea fSuiteField: TextField fRun: Button fProgressIndicator: ProgressBar fFailureList: List fLogo: Logo fNumberOfErrors: Label fNumberOfFailures: Label fNumberOfRuns: Label fQuitButton: Button fRerunButton: Button fStatusLine: TextField fUseLoadingRunner: Checkbox PLAIN_FONT: Font GAP: int ,about{ Params :  Returns : void} addError{ Params : Test,Throwable Returns : void} addFailure{ Params : Test,AssertionFailedError Returns : void} addGrid{ Params : Panel,Component,int,int,int,int,double,int Returns : void} appendFailure{ Params : String,Test,Throwable Returns : void} createJUnitMenu{ Params :  Returns : Menu} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} createMenus{ Params : MenuBar Returns : void} createTestResult{ Params :  Returns : TestResult} createUI{ Params : String Returns : Frame} windowClosing{ Params : WindowEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} textValueChanged{ Params : TextEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} itemStateChanged{ Params : ItemEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} failureSelected{ Params :  Returns : void} endTest{ Params : Test Returns : void} isErrorSelected{ Params :  Returns : boolean} loadFrameIcon{ Params :  Returns : Image} getRunner{ Params :  Returns : Thread} main{ Params : String[] Returns : void} run{ Params : Class Returns : void} rerun{ Params :  Returns : void} reset{ Params :  Returns : void} run{ Params :  Returns : void} runFailed{ Params : String Returns : void} runSuite{ Params :  Returns : void} run{ Params :  Returns : void} shouldReload{ Params :  Returns : boolean} setLabelValue{ Params : Label,int Returns : void} setSuiteName{ Params : String Returns : void} showErrorTrace{ Params :  Returns : void} showInfo{ Params : String Returns : void} clearStatus{ Params :  Returns : void} showStatus{ Params : String Returns : void} start{ Params : String[] Returns : void} startTest{ Params : Test Returns : void} ,,main run ,,,,,,,Font AboutDialog GridBagConstraints Insets Menu MenuItem ActionListener MenuItem ActionListener TestResult Frame BorderLayout WindowAdapter MenuBar Label TextField ActionListener TextListener Button ActionListener Checkbox ProgressBar Label Label Label Panel FlowLayout Label Label Label Label List ItemListener Button ActionListener Panel GridLayout TextArea TextField Button ActionListener Logo Panel GridBagLayout TestRunner TestResult Vector Vector Thread 
JUnit,junit.extensions,ActiveTestSuite,1,1,0,0,0,false,TestSuite ,0 ,0 ,fActiveTestDeathCount: int ,run{ Params : TestResult Returns : void} runTest{ Params : Test,TestResult Returns : void} run{ Params :  Returns : void} waitUntilFinished{ Params :  Returns : void} runFinished{ Params : Test Returns : void} ,,,,,,int ,,int ,Thread 
JUnit,junit.extensions,ExceptionTestCase,1,1,0,0,0,false,TestCase ,0 ,0 ,fExpected: Class ,runTest{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.extensions,RepeatedTest,1,1,0,0,0,false,TestDecorator ,0 ,0 ,fTimesRepeat: int ,countTestCases{ Params :  Returns : int} run{ Params : TestResult Returns : void} toString{ Params :  Returns : String} ,,,,,,int ,,int ,IllegalArgumentException 
JUnit,junit.extensions,TestDecorator,1,1,0,0,0,false,Assert ,Test ,0 ,fTest: Test ,basicRun{ Params : TestResult Returns : void} countTestCases{ Params :  Returns : int} run{ Params : TestResult Returns : void} toString{ Params :  Returns : String} getTest{ Params :  Returns : Test} ,,,,,Test ,,,,
JUnit,junit.extensions,TestSetup,1,1,0,0,0,false,TestDecorator ,0 ,0 ,,run{ Params : TestResult Returns : void} protect{ Params :  Returns : void} setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} ,,,,,,,,,Protectable 
JUnit,junit.framework,AssertionFailedError,1,1,0,0,0,false,Error ,0 ,0 ,,,,,,,,,,,
JUnit,junit.framework,Protectable,2,1,0,0,0,true,Error ,0 ,0 ,,protect{ Params :  Returns : void} ,,,,protect ,,,,,
JUnit,junit.framework,Test,2,1,0,0,0,true,Error ,0 ,0 ,,countTestCases{ Params :  Returns : int} run{ Params : TestResult Returns : void} ,,,,countTestCases run ,,,,,
JUnit,junit.framework,TestCase,1,1,1,0,0,false,Assert ,Test ,0 ,fName: String ,countTestCases{ Params :  Returns : int} createResult{ Params :  Returns : TestResult} name{ Params :  Returns : String} run{ Params :  Returns : TestResult} run{ Params : TestResult Returns : void} runBare{ Params :  Returns : void} runTest{ Params :  Returns : void} setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} toString{ Params :  Returns : String} getName{ Params :  Returns : String} setName{ Params : String Returns : void} ,,,,,Test ,String ,,String ,TestResult 
JUnit,junit.framework,TestFailure,1,1,0,0,0,false,Object ,0 ,0 ,fFailedTest: Test fThrownException: Throwable ,failedTest{ Params :  Returns : Test} thrownException{ Params :  Returns : Throwable} toString{ Params :  Returns : String} ,,,,,,,,,StringBuffer 
JUnit,junit.framework,TestListener,2,1,0,0,0,true,Object ,0 ,0 ,,addError{ Params : Test,Throwable Returns : void} addFailure{ Params : Test,AssertionFailedError Returns : void} endTest{ Params : Test Returns : void} startTest{ Params : Test Returns : void} ,,,,,,,,,
JUnit,junit.framework,TestResult,1,1,0,0,0,false,Object ,0 ,0 ,fFailures: Vector fErrors: Vector fListeners: Vector fRunTests: int fStop: boolean ,addError{ Params : Test,Throwable Returns : void} addFailure{ Params : Test,AssertionFailedError Returns : void} addListener{ Params : TestListener Returns : void} removeListener{ Params : TestListener Returns : void} cloneListeners{ Params :  Returns : Vector} endTest{ Params : Test Returns : void} errorCount{ Params :  Returns : int} errors{ Params :  Returns : Enumeration} failureCount{ Params :  Returns : int} failures{ Params :  Returns : Enumeration} run{ Params : TestCase Returns : void} protect{ Params :  Returns : void} runCount{ Params :  Returns : int} runProtected{ Params : Test,Protectable Returns : void} runTests{ Params :  Returns : int} shouldStop{ Params :  Returns : boolean} startTest{ Params : Test Returns : void} stop{ Params :  Returns : void} testErrors{ Params :  Returns : int} testFailures{ Params :  Returns : int} wasSuccessful{ Params :  Returns : boolean} ,,,,,,boolean ,,boolean ,Vector Vector Vector TestFailure TestFailure Protectable 
JUnit,junit.framework,TestSuite,1,1,0,0,0,false,0 ,Test ,0 ,fTests: Vector fName: String ,addTest{ Params : Test Returns : void} addTestSuite{ Params : Class Returns : void} addTestMethod{ Params : Method,Vector,Constructor Returns : void} exceptionToString{ Params : Throwable Returns : String} countTestCases{ Params :  Returns : int} getConstructor{ Params : Class Returns : Constructor} isPublicTestMethod{ Params : Method Returns : boolean} isTestMethod{ Params : Method Returns : boolean} run{ Params : TestResult Returns : void} runTest{ Params : Test,TestResult Returns : void} testAt{ Params : int Returns : Test} testCount{ Params :  Returns : int} tests{ Params :  Returns : Enumeration} toString{ Params :  Returns : String} setName{ Params : String Returns : void} getName{ Params :  Returns : String} warning{ Params : String Returns : Test} runTest{ Params :  Returns : void} ,,,,,Test ,String ,,String ,Vector Vector TestSuite StringWriter PrintWriter TestCase 
JUnit,junit.runner,BaseTestRunner,1,1,1,0,0,false,0 ,TestListener ,0 ,SUITE_METHODNAME: String fPreferences: Properties fgMaxMessageLength: int fgFilterStack: boolean fLoading: boolean ,getTest{ Params : String Returns : Test} elapsedTimeAsString{ Params : long Returns : String} processArguments{ Params : String[] Returns : String} setLoading{ Params : boolean Returns : void} extractClassName{ Params : String Returns : String} truncate{ Params : String Returns : String} runFailed{ Params : String Returns : void} loadSuiteClass{ Params : String Returns : Class} clearStatus{ Params :  Returns : void} getLoader{ Params :  Returns : TestSuiteLoader} useReloadingTestSuiteLoader{ Params :  Returns : boolean} getPreferencesFile{ Params :  Returns : File} readPreferences{ Params :  Returns : void} getPreference{ Params : String Returns : String} getPreference{ Params : String,int Returns : int} inVAJava{ Params :  Returns : boolean} getFilteredTrace{ Params : Throwable Returns : String} filterStack{ Params : String Returns : String} filterLine{ Params : String Returns : boolean} ,,truncate getPreferencesFile readPreferences getPreference getPreference inVAJava getFilteredTrace filterStack filterLine ,,runFailed ,TestListener ,,,,TestSuite ReloadingTestSuiteLoader StandardTestSuiteLoader File FileInputStream Properties StringWriter PrintWriter StringWriter PrintWriter StringReader BufferedReader Properties 
JUnit,junit.runner,ClassPathTestCollector,1,1,1,0,0,false,0 ,TestCollector ,0 ,SUFFIX_LENGTH: int ,collectTests{ Params :  Returns : Enumeration} collectFilesInRoots{ Params : Vector,Hashtable Returns : void} gatherFiles{ Params : File,String,Hashtable Returns : void} splitClassPath{ Params : String,String Returns : Vector} isTestClass{ Params : String Returns : boolean} classNameFromFile{ Params : String Returns : String} ,,,,,TestCollector ,,,,Hashtable File File Vector StringTokenizer 
JUnit,junit.runner,FailureDetailView,2,1,0,0,0,true,0 ,TestCollector ,0 ,,getComponent{ Params :  Returns : Component} showFailure{ Params : TestFailure Returns : void} clear{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.runner,LoadingTestCollector,1,1,0,0,0,false,ClassPathTestCollector ,0 ,0 ,fLoader: TestCaseClassLoader ,isTestClass{ Params : String Returns : boolean} classFromFile{ Params : String Returns : Class} isTestClass{ Params : Class Returns : boolean} hasSuiteMethod{ Params : Class Returns : boolean} hasPublicConstructor{ Params : Class Returns : boolean} ,,,,,,,,,TestCaseClassLoader 
JUnit,junit.runner,ReloadingTestSuiteLoader,1,1,0,0,0,false,0 ,TestSuiteLoader ,0 ,,load{ Params : String Returns : Class} reload{ Params : Class Returns : Class} ,,,,,TestSuiteLoader ,,,,TestCaseClassLoader TestCaseClassLoader 
JUnit,junit.runner,SimpleTestCollector,1,1,0,0,0,false,ClassPathTestCollector ,0 ,0 ,,isTestClass{ Params : String Returns : boolean} ,,,,,,,,,
JUnit,junit.runner,Sorter,1,1,0,0,0,false,0 ,0 ,Swapper ,,swap{ Params : Vector,int,int Returns : void} sortStrings{ Params : Vector,int,int,Swapper Returns : void} ,,sortStrings ,,,,,,,
JUnit,junit.runner,Swapper,3,1,0,1,0,true,0 ,0 ,Swapper ,,swap{ Params : Vector,int,int Returns : void} sortStrings{ Params : Vector,int,int,Swapper Returns : void} ,,sortStrings ,,,,,,,
JUnit,junit.runner,StandardTestSuiteLoader,1,1,0,0,0,false,0 ,TestSuiteLoader ,0 ,,load{ Params : String Returns : Class} reload{ Params : Class Returns : Class} ,,,,,TestSuiteLoader ,,,,
JUnit,junit.runner,TestCaseClassLoader,1,1,0,0,0,false,ClassLoader ,0 ,0 ,fPathItems: Vector defaultExclusions: String EXCLUDED_FILE: String fExcluded: Vector ,scanPath{ Params : String Returns : void} getResource{ Params : String Returns : URL} getResourceAsStream{ Params : String Returns : InputStream} isExcluded{ Params : String Returns : boolean} loadClass{ Params : String,boolean Returns : Class} lookupClassData{ Params : String Returns : byte[]} isJar{ Params : String Returns : boolean} loadFileData{ Params : String,String Returns : byte[]} getClassData{ Params : File Returns : byte[]} loadJarData{ Params : String,String Returns : byte[]} readExcludedPackages{ Params :  Returns : void} ,,,,,,Vector ,,Vector ,Vector StringTokenizer ClassNotFoundException ClassNotFoundException File FileInputStream ByteArrayOutputStream File ZipFile Vector Properties 
JUnit,junit.runner,TestCollector,2,1,0,0,0,true,ClassLoader ,0 ,0 ,,collectTests{ Params :  Returns : Enumeration} ,,,,,,,,,
JUnit,junit.runner,TestSuiteLoader,2,1,0,0,0,true,ClassLoader ,0 ,0 ,,load{ Params : String Returns : Class} reload{ Params : Class Returns : Class} ,,,,load reload ,,,,,
JUnit,junit.runner,Version,1,1,0,0,0,false,0 ,0 ,0 ,,id{ Params :  Returns : String} ,,id ,,,,,,,
JUnit,junit.samples,AllTests,1,1,0,0,0,false,0 ,0 ,0 ,,main{ Params : String[] Returns : void} suite{ Params :  Returns : Test} ,,main suite ,,,,,,,TestSuite TestSuite 
JUnit,junit.samples.money,IMoney,2,0,0,0,0,true,0 ,0 ,0 ,,add{ Params : IMoney Returns : IMoney} addMoney{ Params : Money Returns : IMoney} addMoneyBag{ Params : MoneyBag Returns : IMoney} isZero{ Params :  Returns : boolean} multiply{ Params : int Returns : IMoney} negate{ Params :  Returns : IMoney} subtract{ Params : IMoney Returns : IMoney} ,,,,add isZero multiply negate subtract ,,,,,
JUnit,junit.samples.money,Money,1,0,0,0,0,false,0 ,IMoney ,0 ,fAmount: int fCurrency: String ,add{ Params : IMoney Returns : IMoney} addMoney{ Params : Money Returns : IMoney} addMoneyBag{ Params : MoneyBag Returns : IMoney} amount{ Params :  Returns : int} currency{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} isZero{ Params :  Returns : boolean} multiply{ Params : int Returns : IMoney} negate{ Params :  Returns : IMoney} subtract{ Params : IMoney Returns : IMoney} toString{ Params :  Returns : String} ,,,,,IMoney ,String ,,String ,Money MoneyBag Money Money StringBuffer 
JUnit,junit.samples.money,MoneyBag,1,0,0,0,0,false,0 ,IMoney ,0 ,fMonies: Vector ,add{ Params : IMoney Returns : IMoney} addMoney{ Params : Money Returns : IMoney} addMoneyBag{ Params : MoneyBag Returns : IMoney} appendBag{ Params : MoneyBag Returns : void} appendMoney{ Params : Money Returns : void} contains{ Params : Money Returns : boolean} equals{ Params : Object Returns : boolean} findMoney{ Params : String Returns : Money} hashCode{ Params :  Returns : int} isZero{ Params :  Returns : boolean} multiply{ Params : int Returns : IMoney} negate{ Params :  Returns : IMoney} simplify{ Params :  Returns : IMoney} subtract{ Params : IMoney Returns : IMoney} toString{ Params :  Returns : String} ,,,,,IMoney ,Vector ,,Vector ,Vector MoneyBag MoneyBag MoneyBag MoneyBag StringBuffer 
JUnit,junit.samples.money,MoneyTest,1,1,0,0,0,false,TestCase ,0 ,0 ,f12CHF: Money f14CHF: Money f7USD: Money f21USD: Money fMB1: MoneyBag fMB2: MoneyBag ,main{ Params : String[] Returns : void} setUp{ Params :  Returns : void} testBagMultiply{ Params :  Returns : void} testBagNegate{ Params :  Returns : void} testBagSimpleAdd{ Params :  Returns : void} testBagSubtract{ Params :  Returns : void} testBagSumAdd{ Params :  Returns : void} testIsZero{ Params :  Returns : void} testMixedSimpleAdd{ Params :  Returns : void} testMoneyBagEquals{ Params :  Returns : void} testMoneyBagHash{ Params :  Returns : void} testMoneyEquals{ Params :  Returns : void} testMoneyHash{ Params :  Returns : void} testNormalize{ Params :  Returns : void} testNormalize2{ Params :  Returns : void} testNormalize3{ Params :  Returns : void} testNormalize4{ Params :  Returns : void} testPrint{ Params :  Returns : void} testSimpleAdd{ Params :  Returns : void} testSimpleBagAdd{ Params :  Returns : void} testSimpleMultiply{ Params :  Returns : void} testSimpleNegate{ Params :  Returns : void} testSimpleSubtract{ Params :  Returns : void} ,,main ,,,,MoneyBag ,,MoneyBag ,Money Money Money Money MoneyBag MoneyBag Money Money MoneyBag Money Money MoneyBag Money Money MoneyBag Money Money MoneyBag Money Money MoneyBag Money Money MoneyBag MoneyBag MoneyBag Money Money MoneyBag Money Money Money Money Money Money Money MoneyBag Money MoneyBag Money Money Money MoneyBag Money Money Money MoneyBag Money Money Money Money MoneyBag Money Money Money 
JUnit,junit.samples,SimpleTest,1,1,0,0,0,false,TestCase ,0 ,0 ,fValue1: int fValue2: int ,setUp{ Params :  Returns : void} suite{ Params :  Returns : Test} testAdd{ Params :  Returns : void} testDivideByZero{ Params :  Returns : void} testEquals{ Params :  Returns : void} ,,suite ,,,,,,,TestSuite Long Long 
JUnit,junit.samples,VectorTest,1,1,0,0,0,false,TestCase ,0 ,0 ,fEmpty: Vector fFull: Vector ,main{ Params : String[] Returns : void} setUp{ Params :  Returns : void} suite{ Params :  Returns : Test} testCapacity{ Params :  Returns : void} testClone{ Params :  Returns : void} testContains{ Params :  Returns : void} testElementAt{ Params :  Returns : void} testRemoveAll{ Params :  Returns : void} testRemoveElement{ Params :  Returns : void} ,,main suite ,,,,,,,Vector Vector Integer Integer Integer TestSuite Integer Integer Integer Integer Integer Integer 
JUnit,junit.swingui,AboutDialog,1,0,0,0,0,false,JDialog ,0 ,0 ,,actionPerformed{ Params : ActionEvent Returns : void} windowClosing{ Params : WindowEvent Returns : void} createLogo{ Params :  Returns : JLabel} ,,,,,,,,,GridBagLayout JButton ActionListener JLabel Font JLabel Font GridBagConstraints GridBagConstraints GridBagConstraints Insets GridBagConstraints WindowAdapter JLabel 
JUnit,junit.swingui,CounterPanel,1,1,0,0,0,false,Panel ,0 ,0 ,fNumberOfErrors: JTextField fNumberOfFailures: JTextField fNumberOfRuns: JTextField fTotal: int ,createOutputField{ Params :  Returns : JTextField} reset{ Params :  Returns : void} setTotal{ Params : int Returns : void} setRunValue{ Params : int Returns : void} setErrorValue{ Params : int Returns : void} setFailureValue{ Params : int Returns : void} setLabelValue{ Params : JTextField,int Returns : void} ,,,,,,int ,,int ,GridLayout JLabel JLabel JLabel JTextField 
JUnit,junit.swingui,DefaultFailureDetailView,1,0,0,0,0,false,0 ,FailureDetailView ,0 ,fTextArea: JTextArea ,getComponent{ Params :  Returns : Component} showFailure{ Params : TestFailure Returns : void} clear{ Params :  Returns : void} ,,,,,FailureDetailView ,,,,JTextArea 
JUnit,junit.swingui,FailureRunView,1,0,0,0,0,false,0 ,TestRunView ,FailureListCellRenderer ,fFailureList: JList fRunContext: TestRunContext ,loadIcons{ Params :  Returns : void} getListCellRendererComponent{ Params : JList,Object,int,boolean,boolean Returns : Component} runTest{ Params :  Returns : void} valueChanged{ Params : ListSelectionEvent Returns : void} getSelectedTest{ Params :  Returns : Test} activate{ Params :  Returns : void} addTab{ Params : JTabbedPane Returns : void} revealFailure{ Params : Test Returns : void} aboutToStart{ Params : Test,TestResult Returns : void} runFinished{ Params : Test,TestResult Returns : void} testSelected{ Params :  Returns : void} ,,,,,TestRunView ,,,,JList TestFailure TestCase AssertionFailedError FailureListCellRenderer ListSelectionListener JScrollPane 
JUnit,junit.swingui,FailureListCellRenderer,3,0,0,1,0,false,0 ,TestRunView ,FailureListCellRenderer ,fFailureIcon: Icon fErrorIcon: Icon ,loadIcons{ Params :  Returns : void} getListCellRendererComponent{ Params : JList,Object,int,boolean,boolean Returns : Component} runTest{ Params :  Returns : void} valueChanged{ Params : ListSelectionEvent Returns : void} getSelectedTest{ Params :  Returns : Test} activate{ Params :  Returns : void} addTab{ Params : JTabbedPane Returns : void} revealFailure{ Params : Test Returns : void} aboutToStart{ Params : Test,TestResult Returns : void} runFinished{ Params : Test,TestResult Returns : void} testSelected{ Params :  Returns : void} ,,,,,,Icon ,,Icon ,
JUnit,junit.swingui,ProgressBar,1,0,0,0,0,false,JPanel ,0 ,0 ,fError: boolean fTotal: int fProgress: int fProgressX: int ,getStatusColor{ Params :  Returns : Color} paintBackground{ Params : Graphics Returns : void} paintComponent{ Params : Graphics Returns : void} paintStatus{ Params : Graphics Returns : void} paintStep{ Params : int,int Returns : void} reset{ Params :  Returns : void} scale{ Params : int Returns : int} setBounds{ Params : int,int,int,int Returns : void} start{ Params : int Returns : void} step{ Params : boolean Returns : void} ,,,,,,,,,Rectangle 
JUnit,junit.swingui,StatusLine,1,1,0,0,0,false,JTextField ,0 ,0 ,PLAIN_FONT: Font BOLD_FONT: Font ,showInfo{ Params : String Returns : void} showError{ Params : String Returns : void} clear{ Params :  Returns : void} ,,,,,,,,,Font Font 
JUnit,junit.swingui,TestHierarchyRunView,1,0,0,0,0,false,0 ,TestRunView ,0 ,fTreeBrowser: TestSuitePanel fTestContext: TestRunContext ,valueChanged{ Params : TreeSelectionEvent Returns : void} addTab{ Params : JTabbedPane Returns : void} getSelectedTest{ Params :  Returns : Test} activate{ Params :  Returns : void} revealFailure{ Params : Test Returns : void} aboutToStart{ Params : Test,TestResult Returns : void} runFinished{ Params : Test,TestResult Returns : void} testSelected{ Params :  Returns : void} ,,,,,TestRunView ,,,,TestSuitePanel TreeSelectionListener Vector TreePath 
JUnit,junit.swingui,TestRunContext,2,1,0,0,0,true,0 ,TestRunView ,0 ,,handleTestSelected{ Params : Test Returns : void} getFailures{ Params :  Returns : ListModel} ,,,,,,,,,
JUnit,junit.swingui,TestRunner,1,1,0,0,0,false,BaseTestRunner ,TestRunContext ,0 ,fFrame: JFrame fRunner: Thread fTestResult: TestResult fSuiteCombo: JComboBox fProgressIndicator: ProgressBar fFailures: DefaultListModel fLogo: JLabel fCounterPanel: CounterPanel fRun: JButton fQuitButton: JButton fRerunButton: JButton fStatusLine: StatusLine fFailureView: FailureDetailView fTestViewTab: JTabbedPane fUseLoadingRunner: JCheckBox fTestRunViews: Vector GAP: int HISTORY_LENGTH: int TESTCOLLECTOR_KEY: String FAILUREDETAILVIEW_KEY: String ,main{ Params : String[] Returns : void} run{ Params : Class Returns : void} addError{ Params : Test,Throwable Returns : void} run{ Params :  Returns : void} addFailure{ Params : Test,AssertionFailedError Returns : void} run{ Params :  Returns : void} startTest{ Params : Test Returns : void} endTest{ Params : Test Returns : void} postEndTest{ Params : Test Returns : void} run{ Params :  Returns : void} setSuite{ Params : String Returns : void} addToHistory{ Params : String Returns : void} pruneHistory{ Params :  Returns : void} appendFailure{ Params : String,Test,Throwable Returns : void} revealFailure{ Params : Test Returns : void} aboutToStart{ Params : Test Returns : void} runFinished{ Params : Test Returns : void} run{ Params :  Returns : void} createCounterPanel{ Params :  Returns : CounterPanel} createFailedPanel{ Params :  Returns : JPanel} actionPerformed{ Params : ActionEvent Returns : void} createFailureDetailView{ Params :  Returns : FailureDetailView} createJUnitMenu{ Params :  Returns : JMenu} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} createFrame{ Params : String Returns : JFrame} windowClosing{ Params : WindowEvent Returns : void} createLogo{ Params :  Returns : JLabel} createMenus{ Params : JMenuBar Returns : void} createUseLoaderCheckBox{ Params :  Returns : JCheckBox} createQuitButton{ Params :  Returns : JButton} actionPerformed{ Params : ActionEvent Returns : void} createRunButton{ Params :  Returns : JButton} actionPerformed{ Params : ActionEvent Returns : void} createBrowseButton{ Params :  Returns : Component} actionPerformed{ Params : ActionEvent Returns : void} createStatusLine{ Params :  Returns : StatusLine} createSuiteCombo{ Params :  Returns : JComboBox} keyTyped{ Params : KeyEvent Returns : void} itemStateChanged{ Params : ItemEvent Returns : void} createTestRunViews{ Params :  Returns : JTabbedPane} stateChanged{ Params : ChangeEvent Returns : void} testViewChanged{ Params :  Returns : void} createTestResult{ Params :  Returns : TestResult} createUI{ Params : String Returns : JFrame} addGrid{ Params : JPanel,Component,int,int,int,int,double,int Returns : void} getSuiteText{ Params :  Returns : String} getFailures{ Params :  Returns : ListModel} insertUpdate{ Params : DocumentEvent Returns : void} browseTestClasses{ Params :  Returns : void} createTestCollector{ Params :  Returns : TestCollector} loadFrameIcon{ Params :  Returns : Image} loadHistory{ Params : JComboBox Returns : void} getSettingsFile{ Params :  Returns : File} postInfo{ Params : String Returns : void} run{ Params :  Returns : void} postStatus{ Params : String Returns : void} run{ Params :  Returns : void} removeUpdate{ Params : DocumentEvent Returns : void} rerun{ Params :  Returns : void} rerunTest{ Params : Test Returns : void} reset{ Params :  Returns : void} run{ Params :  Returns : void} runFailed{ Params : String Returns : void} runSuite{ Params :  Returns : void} shouldReload{ Params :  Returns : boolean} runTest{ Params : Test Returns : void} doRunTest{ Params : Test Returns : void} run{ Params :  Returns : void} saveHistory{ Params :  Returns : void} setButtonLabel{ Params : JButton,String Returns : void} run{ Params :  Returns : void} handleTestSelected{ Params : Test Returns : void} showFailureDetail{ Params : Test Returns : void} showInfo{ Params : String Returns : void} showStatus{ Params : String Returns : void} start{ Params : String[] Returns : void} start{ Params : Test Returns : void} run{ Params :  Returns : void} synchUI{ Params :  Returns : void} run{ Params :  Returns : void} terminate{ Params :  Returns : void} textChanged{ Params :  Returns : void} clearStatus{ Params :  Returns : void} getIconResource{ Params : Class,String Returns : Icon} about{ Params :  Returns : void} ,,main run getIconResource ,,,TestRunContext ,,,,Vector TestRunner Runnable Runnable Runnable TestFailure Runnable CounterPanel JPanel GridLayout JButton ActionListener DefaultFailureDetailView JMenu JMenuItem ActionListener JMenuItem ActionListener JFrame BorderLayout WindowAdapter JLabel JLabel JCheckBox JButton ActionListener JButton ActionListener JButton ActionListener StatusLine JComboBox KeyAdapter ItemListener JTabbedPane FailureRunView TestHierarchyRunView ChangeListener TestResult JMenuBar JLabel ProgressBar DefaultListModel JScrollPane JPanel GridBagLayout JSeparator JSplitPane GridBagConstraints Insets TestSelector SimpleTestCollector BufferedReader FileReader File Runnable Runnable TestResult Thread BufferedWriter FileWriter Runnable Runnable Runnable ImageIcon AboutDialog 
JUnit,junit.swingui,TestRunView,2,0,0,0,0,true,BaseTestRunner ,TestRunContext ,0 ,,getSelectedTest{ Params :  Returns : Test} activate{ Params :  Returns : void} revealFailure{ Params : Test Returns : void} addTab{ Params : JTabbedPane Returns : void} aboutToStart{ Params : Test,TestResult Returns : void} runFinished{ Params : Test,TestResult Returns : void} ,,,,,,,,,
JUnit,junit.swingui,TestSelector,1,0,0,0,0,false,JDialog ,0 ,TestCellRenderer DoubleClickListener KeySelectListener ParallelSwapper ,fCancel: JButton fOk: JButton fList: JList fScrolledList: JScrollPane fDescription: JLabel fSelectedItem: String ,getListCellRendererComponent{ Params : JList,Object,int,boolean,boolean Returns : Component} displayString{ Params : String Returns : String} matchesKey{ Params : String,char Returns : boolean} typeIndex{ Params : String Returns : int} mouseClicked{ Params : MouseEvent Returns : void} keyTyped{ Params : KeyEvent Returns : void} addListeners{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} valueChanged{ Params : ListSelectionEvent Returns : void} windowClosing{ Params : WindowEvent Returns : void} defineLayout{ Params :  Returns : void} checkEnableOK{ Params : ListSelectionEvent Returns : void} okSelected{ Params :  Returns : void} isEmpty{ Params :  Returns : boolean} keySelectTestClass{ Params : char Returns : void} getSelectedItem{ Params :  Returns : String} createTestList{ Params : TestCollector Returns : Vector} swap{ Params : Vector,int,int Returns : void} ,,displayString matchesKey typeIndex ,,,,String ,,String ,JList TestCellRenderer JScrollPane JButton JLabel JButton ActionListener ActionListener DoubleClickListener KeySelectListener ListSelectionListener WindowAdapter GridBagLayout GridBagConstraints Insets GridBagConstraints Insets GridBagConstraints Insets GridBagConstraints Insets Vector Vector ParallelSwapper 
JUnit,junit.swingui,TestCellRenderer,3,0,0,1,0,false,JDialog ,0 ,TestCellRenderer DoubleClickListener KeySelectListener ParallelSwapper ,fLeafIcon: Icon fSuiteIcon: Icon ,getListCellRendererComponent{ Params : JList,Object,int,boolean,boolean Returns : Component} displayString{ Params : String Returns : String} matchesKey{ Params : String,char Returns : boolean} typeIndex{ Params : String Returns : int} mouseClicked{ Params : MouseEvent Returns : void} keyTyped{ Params : KeyEvent Returns : void} addListeners{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} valueChanged{ Params : ListSelectionEvent Returns : void} windowClosing{ Params : WindowEvent Returns : void} defineLayout{ Params :  Returns : void} checkEnableOK{ Params : ListSelectionEvent Returns : void} okSelected{ Params :  Returns : void} isEmpty{ Params :  Returns : boolean} keySelectTestClass{ Params : char Returns : void} getSelectedItem{ Params :  Returns : String} createTestList{ Params : TestCollector Returns : Vector} swap{ Params : Vector,int,int Returns : void} ,,displayString matchesKey typeIndex ,,,,,,,
JUnit,junit.swingui,DoubleClickListener,3,3,0,0,0,false,JDialog ,0 ,TestCellRenderer DoubleClickListener KeySelectListener ParallelSwapper ,,getListCellRendererComponent{ Params : JList,Object,int,boolean,boolean Returns : Component} displayString{ Params : String Returns : String} matchesKey{ Params : String,char Returns : boolean} typeIndex{ Params : String Returns : int} mouseClicked{ Params : MouseEvent Returns : void} keyTyped{ Params : KeyEvent Returns : void} addListeners{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} valueChanged{ Params : ListSelectionEvent Returns : void} windowClosing{ Params : WindowEvent Returns : void} defineLayout{ Params :  Returns : void} checkEnableOK{ Params : ListSelectionEvent Returns : void} okSelected{ Params :  Returns : void} isEmpty{ Params :  Returns : boolean} keySelectTestClass{ Params : char Returns : void} getSelectedItem{ Params :  Returns : String} createTestList{ Params : TestCollector Returns : Vector} swap{ Params : Vector,int,int Returns : void} ,,displayString matchesKey typeIndex ,,,,,,,
JUnit,junit.swingui,KeySelectListener,3,3,0,0,0,false,JDialog ,0 ,TestCellRenderer DoubleClickListener KeySelectListener ParallelSwapper ,,getListCellRendererComponent{ Params : JList,Object,int,boolean,boolean Returns : Component} displayString{ Params : String Returns : String} matchesKey{ Params : String,char Returns : boolean} typeIndex{ Params : String Returns : int} mouseClicked{ Params : MouseEvent Returns : void} keyTyped{ Params : KeyEvent Returns : void} addListeners{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} valueChanged{ Params : ListSelectionEvent Returns : void} windowClosing{ Params : WindowEvent Returns : void} defineLayout{ Params :  Returns : void} checkEnableOK{ Params : ListSelectionEvent Returns : void} okSelected{ Params :  Returns : void} isEmpty{ Params :  Returns : boolean} keySelectTestClass{ Params : char Returns : void} getSelectedItem{ Params :  Returns : String} createTestList{ Params : TestCollector Returns : Vector} swap{ Params : Vector,int,int Returns : void} ,,displayString matchesKey typeIndex ,,,,,,,
JUnit,junit.swingui,ParallelSwapper,3,2,0,0,0,false,JDialog ,0 ,TestCellRenderer DoubleClickListener KeySelectListener ParallelSwapper ,fOther: Vector ,getListCellRendererComponent{ Params : JList,Object,int,boolean,boolean Returns : Component} displayString{ Params : String Returns : String} matchesKey{ Params : String,char Returns : boolean} typeIndex{ Params : String Returns : int} mouseClicked{ Params : MouseEvent Returns : void} keyTyped{ Params : KeyEvent Returns : void} addListeners{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} valueChanged{ Params : ListSelectionEvent Returns : void} windowClosing{ Params : WindowEvent Returns : void} defineLayout{ Params :  Returns : void} checkEnableOK{ Params : ListSelectionEvent Returns : void} okSelected{ Params :  Returns : void} isEmpty{ Params :  Returns : boolean} keySelectTestClass{ Params : char Returns : void} getSelectedItem{ Params :  Returns : String} createTestList{ Params : TestCollector Returns : Vector} swap{ Params : Vector,int,int Returns : void} ,,displayString matchesKey typeIndex ,,,Swapper ,,,,
JUnit,junit.swingui,TestSuitePanel,1,0,0,0,0,false,JPanel ,TestListener ,TestTreeCellRenderer ,fTree: JTree fScrollTree: JScrollPane fModel: TestTreeModel ,loadIcons{ Params :  Returns : void} stripParenthesis{ Params : Object Returns : String} getTreeCellRendererComponent{ Params : JTree,Object,boolean,boolean,boolean,int,boolean Returns : Component} addError{ Params : Test,Throwable Returns : void} addFailure{ Params : Test,AssertionFailedError Returns : void} endTest{ Params : Test Returns : void} startTest{ Params : Test Returns : void} getSelectedTest{ Params :  Returns : Test} getTree{ Params :  Returns : JTree} showTestTree{ Params : Test Returns : void} fireTestChanged{ Params : Test,boolean Returns : void} run{ Params :  Returns : void} ,,,,,TestListener ,TestTreeModel ,,TestTreeModel ,BorderLayout Dimension JTree JScrollPane TestTreeModel TestTreeCellRenderer Runnable Vector TreePath TreePath 
JUnit,junit.swingui,TestTreeCellRenderer,3,0,0,1,0,false,JPanel ,TestListener ,TestTreeCellRenderer ,fErrorIcon: Icon fOkIcon: Icon fFailureIcon: Icon ,loadIcons{ Params :  Returns : void} stripParenthesis{ Params : Object Returns : String} getTreeCellRendererComponent{ Params : JTree,Object,boolean,boolean,boolean,int,boolean Returns : Component} addError{ Params : Test,Throwable Returns : void} addFailure{ Params : Test,AssertionFailedError Returns : void} endTest{ Params : Test Returns : void} startTest{ Params : Test Returns : void} getSelectedTest{ Params :  Returns : Test} getTree{ Params :  Returns : JTree} showTestTree{ Params : Test Returns : void} fireTestChanged{ Params : Test,boolean Returns : void} run{ Params :  Returns : void} ,,,,,,Icon ,,Icon ,
JUnit,junit.swingui,TestTreeModel,1,0,0,0,0,false,0 ,TreeModel ,0 ,fRoot: Test fModelListeners: Vector fFailures: Hashtable fErrors: Hashtable fRunTests: Hashtable ,addTreeModelListener{ Params : TreeModelListener Returns : void} removeTreeModelListener{ Params : TreeModelListener Returns : void} findTest{ Params : Test,Test,Vector Returns : int} fireNodeChanged{ Params : TreePath,int Returns : void} getChild{ Params : Object,int Returns : Object} getChildCount{ Params : Object Returns : int} getIndexOfChild{ Params : Object,Object Returns : int} getRoot{ Params :  Returns : Object} isLeaf{ Params : Object Returns : boolean} isTestSuite{ Params : Object Returns : TestSuite} valueForPathChanged{ Params : TreePath,Object Returns : void} addFailure{ Params : Test Returns : void} addError{ Params : Test Returns : void} addRunTest{ Params : Test Returns : void} wasRun{ Params : Test Returns : boolean} isError{ Params : Test Returns : boolean} isFailure{ Params : Test Returns : boolean} resetResults{ Params :  Returns : void} ,,,,,TreeModel ,Hashtable ,,Hashtable ,Vector Hashtable Hashtable Hashtable TreeModelEvent Hashtable Hashtable Hashtable 
JUnit,junit.tests,ActiveTestTest,1,1,0,0,0,false,TestCase ,0 ,SuccessTest ,,success{ Params :  Returns : void} testActiveTest{ Params :  Returns : void} testActiveRepeatedTest{ Params :  Returns : void} testActiveRepeatedTest0{ Params :  Returns : void} testActiveRepeatedTest1{ Params :  Returns : void} createActiveTestSuite{ Params :  Returns : ActiveTestSuite} ,,,,,,,,,TestResult RepeatedTest TestResult RepeatedTest TestResult RepeatedTest TestResult ActiveTestSuite SuccessTest 
JUnit,junit.tests,SuccessTest,3,1,0,1,0,false,TestCase ,0 ,SuccessTest ,,success{ Params :  Returns : void} testActiveTest{ Params :  Returns : void} testActiveRepeatedTest{ Params :  Returns : void} testActiveRepeatedTest0{ Params :  Returns : void} testActiveRepeatedTest1{ Params :  Returns : void} createActiveTestSuite{ Params :  Returns : ActiveTestSuite} ,,,,,,,,,
JUnit,junit.tests,AllTests,1,1,0,0,0,false,0 ,0 ,0 ,,main{ Params : String[] Returns : void} suite{ Params :  Returns : Test} isJDK11{ Params :  Returns : boolean} ,,main suite isJDK11 ,,,,,,,TestSuite TestSuite 
JUnit,junit.tests,AssertTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testAssertEqualsNaNFails{ Params :  Returns : void} testAssertNaNEqualsFails{ Params :  Returns : void} testAssertNaNEqualsNaNFails{ Params :  Returns : void} testAssertPosInfinityNotEqualsNegInfinity{ Params :  Returns : void} testAssertPosInfinityNotEquals{ Params :  Returns : void} testAssertPosInfinityEqualsInfinity{ Params :  Returns : void} testAssertNegInfinityEqualsInfinity{ Params :  Returns : void} testAssertEquals{ Params :  Returns : void} testAssertEqualsNull{ Params :  Returns : void} testAssertNull{ Params :  Returns : void} testAssertNullNotEqualsNull{ Params :  Returns : void} testAssertSame{ Params :  Returns : void} testAssertSameFails{ Params :  Returns : void} testFail{ Params :  Returns : void} testFailAssertNotNull{ Params :  Returns : void} testSucceedAssertNotNull{ Params :  Returns : void} ,,,,,,,,,Object Object Object Integer Integer AssertionFailedError Object 
JUnit,junit.tests,ClassLoaderTest,1,1,0,0,0,false,Assert ,0 ,0 ,,verify{ Params :  Returns : void} isTestCaseClassLoader{ Params : ClassLoader Returns : boolean} verifyApplicationClassLoadedByTestLoader{ Params :  Returns : void} verifySystemClassNotLoadedByTestLoader{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,ExceptionTestCaseTest,1,1,0,0,0,false,junit.framework.TestCase ,0 ,ThrowExceptionTestCase ThrowRuntimeExceptionTestCase ThrowNoExceptionTestCase ,,test{ Params :  Returns : void} test{ Params :  Returns : void} test{ Params :  Returns : void} testExceptionSubclass{ Params :  Returns : void} testExceptionTest{ Params :  Returns : void} testFailure{ Params :  Returns : void} testNoException{ Params :  Returns : void} testWrongException{ Params :  Returns : void} ,,,,,,,,,IndexOutOfBoundsException RuntimeException ThrowExceptionTestCase ThrowExceptionTestCase ThrowRuntimeExceptionTestCase ThrowNoExceptionTestCase ThrowRuntimeExceptionTestCase 
JUnit,junit.tests,ThrowExceptionTestCase,3,0,0,1,0,false,junit.framework.TestCase ,0 ,ThrowExceptionTestCase ThrowRuntimeExceptionTestCase ThrowNoExceptionTestCase ,,test{ Params :  Returns : void} test{ Params :  Returns : void} test{ Params :  Returns : void} testExceptionSubclass{ Params :  Returns : void} testExceptionTest{ Params :  Returns : void} testFailure{ Params :  Returns : void} testNoException{ Params :  Returns : void} testWrongException{ Params :  Returns : void} ,,,,,,,,,IndexOutOfBoundsException 
JUnit,junit.tests,ThrowRuntimeExceptionTestCase,3,0,0,1,0,false,junit.framework.TestCase ,0 ,ThrowExceptionTestCase ThrowRuntimeExceptionTestCase ThrowNoExceptionTestCase ,,test{ Params :  Returns : void} test{ Params :  Returns : void} test{ Params :  Returns : void} testExceptionSubclass{ Params :  Returns : void} testExceptionTest{ Params :  Returns : void} testFailure{ Params :  Returns : void} testNoException{ Params :  Returns : void} testWrongException{ Params :  Returns : void} ,,,,,,,,,RuntimeException 
JUnit,junit.tests,ThrowNoExceptionTestCase,3,0,0,1,0,false,junit.framework.TestCase ,0 ,ThrowExceptionTestCase ThrowRuntimeExceptionTestCase ThrowNoExceptionTestCase ,,test{ Params :  Returns : void} test{ Params :  Returns : void} test{ Params :  Returns : void} testExceptionSubclass{ Params :  Returns : void} testExceptionTest{ Params :  Returns : void} testFailure{ Params :  Returns : void} testNoException{ Params :  Returns : void} testWrongException{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,ExtensionTest,1,1,0,0,0,false,TestCase ,0 ,TornDown ,,tearDown{ Params :  Returns : void} testRunningErrorInTestSetup{ Params :  Returns : void} runTest{ Params :  Returns : void} testRunningErrorsInTestSetup{ Params :  Returns : void} runTest{ Params :  Returns : void} runTest{ Params :  Returns : void} testSetupErrorDontTearDown{ Params :  Returns : void} setUp{ Params :  Returns : void} testSetupErrorInTestSetup{ Params :  Returns : void} setUp{ Params :  Returns : void} ,,,,,,,,,TestCase TestSetup TestResult TestCase TestCase Error TestSuite TestSetup TestResult WasRun TornDown TestResult WasRun TestSetup TestResult 
JUnit,junit.tests,TornDown,3,0,0,1,0,false,TestCase ,0 ,TornDown ,fTornDown: boolean ,tearDown{ Params :  Returns : void} testRunningErrorInTestSetup{ Params :  Returns : void} runTest{ Params :  Returns : void} testRunningErrorsInTestSetup{ Params :  Returns : void} runTest{ Params :  Returns : void} runTest{ Params :  Returns : void} testSetupErrorDontTearDown{ Params :  Returns : void} setUp{ Params :  Returns : void} testSetupErrorInTestSetup{ Params :  Returns : void} setUp{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,Failure,1,1,0,0,0,false,TestCase ,0 ,0 ,,test{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,InheritedTestCase,1,1,0,0,0,false,OneTestCase ,0 ,0 ,,test2{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,LoadedFromJar,1,1,0,0,0,false,Assert ,0 ,0 ,,verify{ Params :  Returns : void} isTestCaseClassLoader{ Params : ClassLoader Returns : boolean} verifyApplicationClassLoadedByTestLoader{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,NoTestCaseClass,1,1,0,0,0,false,Object ,0 ,0 ,,testSuccess{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,NoTestCases,1,1,0,0,0,false,TestCase ,0 ,0 ,,noTestCase{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,NotPublicTestCase,1,1,0,0,0,false,TestCase ,0 ,0 ,,testNotPublic{ Params :  Returns : void} testPublic{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,NotVoidTestCase,1,1,0,0,0,false,TestCase ,0 ,0 ,,testNotVoid{ Params :  Returns : int} testVoid{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,OneTestCase,1,1,0,0,0,false,TestCase ,0 ,0 ,,noTestCase{ Params :  Returns : void} testCase{ Params :  Returns : void} testCase{ Params : int Returns : void} ,,,,,,,,,
JUnit,junit.tests,OverrideTestCase,1,1,0,0,0,false,OneTestCase ,0 ,0 ,,testCase{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,RepeatedTestTest,1,1,0,0,0,false,TestCase ,0 ,SuccessTest ,fSuite: TestSuite ,success{ Params :  Returns : void} testRepeatedOnce{ Params :  Returns : void} testRepeatedMoreThanOnce{ Params :  Returns : void} testRepeatedZero{ Params :  Returns : void} testRepeatedNegative{ Params :  Returns : void} ,,,,,,TestSuite ,,TestSuite ,TestSuite SuccessTest SuccessTest RepeatedTest TestResult RepeatedTest TestResult RepeatedTest TestResult RepeatedTest 
JUnit,junit.tests,SuccessTest,3,1,0,1,0,false,TestCase ,0 ,SuccessTest ,,success{ Params :  Returns : void} testRepeatedOnce{ Params :  Returns : void} testRepeatedMoreThanOnce{ Params :  Returns : void} testRepeatedZero{ Params :  Returns : void} testRepeatedNegative{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,SorterTest,1,1,0,0,0,false,TestCase ,0 ,Swapper ,,swap{ Params : Vector,int,int Returns : void} testSort{ Params :  Returns : void} ,,,,,,,,,Vector Swapper 
JUnit,junit.tests,Swapper,3,0,0,1,0,false,TestCase ,0 ,Swapper ,,swap{ Params : Vector,int,int Returns : void} testSort{ Params :  Returns : void} ,,,,,Swapper ,,,,
JUnit,junit.tests,StackFilterTest,1,1,0,0,0,false,TestCase ,0 ,0 ,fFiltered: String fUnfiltered: String ,setUp{ Params :  Returns : void} testFilter{ Params :  Returns : void} ,,,,,,,,,StringWriter PrintWriter StringWriter PrintWriter 
JUnit,junit.tests,Success,1,1,0,0,0,false,TestCase ,0 ,0 ,,test{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.tests,SuiteTest,1,1,0,0,0,false,TestCase ,0 ,0 ,fResult: TestResult ,setUp{ Params :  Returns : void} suite{ Params :  Returns : Test} testInheritedTests{ Params :  Returns : void} testNoTestCaseClass{ Params :  Returns : void} testNoTestCases{ Params :  Returns : void} testNotExistingTestCase{ Params :  Returns : void} testNotPublicTestCase{ Params :  Returns : void} testNotVoidTestCase{ Params :  Returns : void} testOneTestCase{ Params :  Returns : void} testShadowedTests{ Params :  Returns : void} testAddTestSuite{ Params :  Returns : void} ,,suite ,,,,,,,TestResult TestSuite SuiteTest SuiteTest SuiteTest SuiteTest SuiteTest SuiteTest SuiteTest SuiteTest SuiteTest TestSuite TestSuite TestSuite SuiteTest TestSuite TestSuite TestSuite TestSuite TestSuite 
JUnit,junit.tests,TestCaseClassLoaderTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testClassLoading{ Params :  Returns : void} testJarClassLoading{ Params :  Returns : void} ,,,,,,,,,TestCaseClassLoader TestCaseClassLoader 
JUnit,junit.tests,TestCaseTest,1,1,0,0,0,false,TestCase ,0 ,TornDown ,,tearDown{ Params :  Returns : void} runTest{ Params :  Returns : void} testCaseToString{ Params :  Returns : void} testError{ Params :  Returns : void} runTest{ Params :  Returns : void} testRunAndTearDownFails{ Params :  Returns : void} tearDown{ Params :  Returns : void} runTest{ Params :  Returns : void} testSetupFails{ Params :  Returns : void} setUp{ Params :  Returns : void} runTest{ Params :  Returns : void} testSuccess{ Params :  Returns : void} runTest{ Params :  Returns : void} testFailure{ Params :  Returns : void} runTest{ Params :  Returns : void} testTearDownAfterError{ Params :  Returns : void} testTearDownFails{ Params :  Returns : void} tearDown{ Params :  Returns : void} runTest{ Params :  Returns : void} testTearDownSetupFails{ Params :  Returns : void} setUp{ Params :  Returns : void} testWasRun{ Params :  Returns : void} verifyError{ Params : TestCase Returns : void} verifyFailure{ Params : TestCase Returns : void} verifySuccess{ Params : TestCase Returns : void} ,,,,,,,,,Error TestCase Error TornDown Error Error TestCase Error TestCase TestCase TornDown TestCase Error TornDown Error WasRun 
JUnit,junit.tests,TornDown,3,0,0,1,0,false,TestCase ,0 ,TornDown ,fTornDown: boolean ,tearDown{ Params :  Returns : void} runTest{ Params :  Returns : void} testCaseToString{ Params :  Returns : void} testError{ Params :  Returns : void} runTest{ Params :  Returns : void} testRunAndTearDownFails{ Params :  Returns : void} tearDown{ Params :  Returns : void} runTest{ Params :  Returns : void} testSetupFails{ Params :  Returns : void} setUp{ Params :  Returns : void} runTest{ Params :  Returns : void} testSuccess{ Params :  Returns : void} runTest{ Params :  Returns : void} testFailure{ Params :  Returns : void} runTest{ Params :  Returns : void} testTearDownAfterError{ Params :  Returns : void} testTearDownFails{ Params :  Returns : void} tearDown{ Params :  Returns : void} runTest{ Params :  Returns : void} testTearDownSetupFails{ Params :  Returns : void} setUp{ Params :  Returns : void} testWasRun{ Params :  Returns : void} verifyError{ Params : TestCase Returns : void} verifyFailure{ Params : TestCase Returns : void} verifySuccess{ Params : TestCase Returns : void} ,,,,,,,,,Error 
JUnit,junit.tests,TestImplementorTest,1,1,0,0,0,false,TestCase ,0 ,DoubleTestCase ,fTest: DoubleTestCase ,countTestCases{ Params :  Returns : int} run{ Params : TestResult Returns : void} protect{ Params :  Returns : void} runTest{ Params :  Returns : void} testSuccessfulRun{ Params :  Returns : void} ,,,,,,DoubleTestCase ,,DoubleTestCase ,Protectable TestCase DoubleTestCase TestResult 
JUnit,junit.tests,DoubleTestCase,3,1,0,1,0,false,TestCase ,0 ,DoubleTestCase ,fTestCase: TestCase ,countTestCases{ Params :  Returns : int} run{ Params : TestResult Returns : void} protect{ Params :  Returns : void} runTest{ Params :  Returns : void} testSuccessfulRun{ Params :  Returns : void} ,,,,,Test ,TestCase ,,TestCase ,Protectable 
JUnit,junit.tests,TestListenerTest,1,1,0,0,0,false,TestCase ,TestListener ,0 ,fResult: TestResult fStartCount: int fEndCount: int fFailureCount: int fErrorCount: int ,addError{ Params : Test,Throwable Returns : void} addFailure{ Params : Test,AssertionFailedError Returns : void} endTest{ Params : Test Returns : void} setUp{ Params :  Returns : void} startTest{ Params : Test Returns : void} testError{ Params :  Returns : void} runTest{ Params :  Returns : void} testFailure{ Params :  Returns : void} runTest{ Params :  Returns : void} testStartStop{ Params :  Returns : void} runTest{ Params :  Returns : void} ,,,,,TestListener ,int ,,int ,TestResult TestCase Error TestCase TestCase 
JUnit,junit.tests,TextRunnerTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testFailure{ Params :  Returns : void} testSuccess{ Params :  Returns : void} testError{ Params :  Returns : void} execTest{ Params : String,boolean Returns : void} ,,,,,,,,,
JUnit,junit.tests,WasRun,1,0,0,0,0,false,TestCase ,0 ,0 ,fWasRun: boolean ,runTest{ Params :  Returns : void} ,,,,,,,,,
JUnit,junit.textui,TestRunner,1,1,0,0,0,false,BaseTestRunner ,0 ,0 ,fWriter: PrintStream fColumn: int ,getLoader{ Params :  Returns : TestSuiteLoader} addError{ Params : Test,Throwable Returns : void} addFailure{ Params : Test,AssertionFailedError Returns : void} createTestResult{ Params :  Returns : TestResult} doRun{ Params : Test,boolean Returns : TestResult} pause{ Params : boolean Returns : void} startTest{ Params : Test Returns : void} endTest{ Params : Test Returns : void} main{ Params : String[] Returns : void} print{ Params : TestResult Returns : void} printErrors{ Params : TestResult Returns : void} printFailures{ Params : TestResult Returns : void} printHeader{ Params : TestResult Returns : void} run{ Params : Class Returns : void} run{ Params : Test Returns : void} runAndWait{ Params : Test Returns : void} start{ Params : String[] Returns : TestResult} runFailed{ Params : String Returns : void} writer{ Params :  Returns : PrintStream} ,,main run run runAndWait ,,,,,,,IllegalArgumentException StandardTestSuiteLoader TestResult TestRunner TestSuite TestRunner TestRunner Exception Exception 
JUnit,junit.ui,TestRunner,1,1,0,0,0,false,junit.awtui.TestRunner ,0 ,0 ,,main{ Params : String[] Returns : void} ,,main ,,,,,,,TestRunner 
