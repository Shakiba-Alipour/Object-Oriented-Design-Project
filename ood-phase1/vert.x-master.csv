Project Name,Package Name,Class Name,Class Type,Class Visibility,Is Abstract,Is Static,Is Final,Is Interface,Extends,Implements,Children,Fields,Methods,Overrides,Static Methods,final Methods , Abstract Methods, Association, Aggregation, Delegation, Composition, Instantiation, API
vert.x-master,io.vertx.core.cli,ArgumentConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,Argument Returns : void} toJson{ Params : Argument,JsonObject Returns : void} toJson{ Params : Argument,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.cli,OptionConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,Option Returns : void} toJson{ Params : Option,JsonObject Returns : void} toJson{ Params : Option,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,LinkedHashSet JsonArray ,obj: 
vert.x-master,io.vertx.core.datagram,DatagramSocketOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,DatagramSocketOptions Returns : void} toJson{ Params : DatagramSocketOptions,JsonObject Returns : void} toJson{ Params : DatagramSocketOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core,DeploymentOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,DeploymentOptions Returns : void} toJson{ Params : DeploymentOptions,JsonObject Returns : void} toJson{ Params : DeploymentOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.dns,AddressResolverOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,AddressResolverOptions Returns : void} toJson{ Params : AddressResolverOptions,JsonObject Returns : void} toJson{ Params : AddressResolverOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,ArrayList ArrayList JsonArray JsonArray ,json: , "servers", array
vert.x-master,io.vertx.core.dns,DnsClientOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,DnsClientOptions Returns : void} toJson{ Params : DnsClientOptions,JsonObject Returns : void} toJson{ Params : DnsClientOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.eventbus,EventBusOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,EventBusOptions Returns : void} toJson{ Params : EventBusOptions,JsonObject Returns : void} toJson{ Params : EventBusOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,LinkedHashSet JdkSSLEngineOptions JksOptions OpenSSLEngineOptions PemKeyCertOptions PemTrustOptions PfxOptions PfxOptions JksOptions JsonArray JsonArray JsonArray JsonArray ,obj: 
vert.x-master,io.vertx.core.file,CopyOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,CopyOptions Returns : void} toJson{ Params : CopyOptions,JsonObject Returns : void} toJson{ Params : CopyOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.file,FileSystemOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,FileSystemOptions Returns : void} toJson{ Params : FileSystemOptions,JsonObject Returns : void} toJson{ Params : FileSystemOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.file,OpenOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,OpenOptions Returns : void} toJson{ Params : OpenOptions,JsonObject Returns : void} toJson{ Params : OpenOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.http,GoAwayConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,GoAway Returns : void} toJson{ Params : GoAway,JsonObject Returns : void} toJson{ Params : GoAway,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.http,Http2SettingsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,Http2Settings Returns : void} toJson{ Params : Http2Settings,JsonObject Returns : void} toJson{ Params : Http2Settings,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.http,HttpClientOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,HttpClientOptions Returns : void} toJson{ Params : HttpClientOptions,JsonObject Returns : void} toJson{ Params : HttpClientOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,ArrayList Http2Settings JsonArray ,obj: 
vert.x-master,io.vertx.core.http,HttpServerOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,HttpServerOptions Returns : void} toJson{ Params : HttpServerOptions,JsonObject Returns : void} toJson{ Params : HttpServerOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,ArrayList Http2Settings ArrayList JsonArray JsonArray ,json: , "webSocketSubProtocols", array
vert.x-master,io.vertx.core.http,RequestOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,RequestOptions Returns : void} toJson{ Params : RequestOptions,JsonObject Returns : void} toJson{ Params : RequestOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,ProxyOptions ,obj: 
vert.x-master,io.vertx.core.http,WebSocketConnectOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,WebSocketConnectOptions Returns : void} toJson{ Params : WebSocketConnectOptions,JsonObject Returns : void} toJson{ Params : WebSocketConnectOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,ArrayList JsonArray ,obj: 
vert.x-master,io.vertx.core.metrics,MetricsOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,MetricsOptions Returns : void} toJson{ Params : MetricsOptions,JsonObject Returns : void} toJson{ Params : MetricsOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.net,ClientOptionsBaseConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,ClientOptionsBase Returns : void} toJson{ Params : ClientOptionsBase,JsonObject Returns : void} toJson{ Params : ClientOptionsBase,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,ArrayList ProxyOptions JsonArray ,obj: 
vert.x-master,io.vertx.core.net,JksOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,JksOptions Returns : void} toJson{ Params : JksOptions,JsonObject Returns : void} toJson{ Params : JksOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.net,KeyStoreOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,KeyStoreOptions Returns : void} toJson{ Params : KeyStoreOptions,JsonObject Returns : void} toJson{ Params : KeyStoreOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.net,NetClientOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,NetClientOptions Returns : void} toJson{ Params : NetClientOptions,JsonObject Returns : void} toJson{ Params : NetClientOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,ArrayList JsonArray ,obj: 
vert.x-master,io.vertx.core.net,NetServerOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,NetServerOptions Returns : void} toJson{ Params : NetServerOptions,JsonObject Returns : void} toJson{ Params : NetServerOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.net,NetworkOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,NetworkOptions Returns : void} toJson{ Params : NetworkOptions,JsonObject Returns : void} toJson{ Params : NetworkOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.net,OpenSSLEngineOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,OpenSSLEngineOptions Returns : void} toJson{ Params : OpenSSLEngineOptions,JsonObject Returns : void} toJson{ Params : OpenSSLEngineOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.net,PemKeyCertOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,PemKeyCertOptions Returns : void} toJson{ Params : PemKeyCertOptions,JsonObject Returns : void} toJson{ Params : PemKeyCertOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,ArrayList ArrayList ArrayList ArrayList JsonArray JsonArray JsonArray JsonArray ,json: , "keyValues", array
vert.x-master,io.vertx.core.net,PemTrustOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,PemTrustOptions Returns : void} toJson{ Params : PemTrustOptions,JsonObject Returns : void} toJson{ Params : PemTrustOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,JsonArray JsonArray ,json: , "certValues", array
vert.x-master,io.vertx.core.net,PfxOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,PfxOptions Returns : void} toJson{ Params : PfxOptions,JsonObject Returns : void} toJson{ Params : PfxOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.net,ProxyOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,ProxyOptions Returns : void} toJson{ Params : ProxyOptions,JsonObject Returns : void} toJson{ Params : ProxyOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,obj: 
vert.x-master,io.vertx.core.net,SSLOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,SSLOptions Returns : void} toJson{ Params : SSLOptions,JsonObject Returns : void} toJson{ Params : SSLOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,LinkedHashSet JsonArray JsonArray JsonArray JsonArray ,obj: 
vert.x-master,io.vertx.core.net,TCPSSLOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,TCPSSLOptions Returns : void} toJson{ Params : TCPSSLOptions,JsonObject Returns : void} toJson{ Params : TCPSSLOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,LinkedHashSet JdkSSLEngineOptions JksOptions OpenSSLEngineOptions PemKeyCertOptions PemTrustOptions PfxOptions PfxOptions JksOptions JsonArray JsonArray JsonArray JsonArray ,obj: 
vert.x-master,io.vertx.core.tracing,TracingOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,TracingOptions Returns : void} toJson{ Params : TracingOptions,JsonObject Returns : void} toJson{ Params : TracingOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,,json: 
vert.x-master,io.vertx.core,VertxOptionsConverter,1,1,0,0,0,false,0 ,0 ,0 ,BASE64_DECODER: Base64.Decoder BASE64_ENCODER: Base64.Encoder ,fromJson{ Params : Iterable<java.util.Map.Entry<String,Object>>,VertxOptions Returns : void} toJson{ Params : VertxOptions,JsonObject Returns : void} toJson{ Params : VertxOptions,java.util.Map<String,Object> Returns : void} ,,fromJson toJson toJson ,,,,,,,AddressResolverOptions EventBusOptions FileSystemOptions MetricsOptions TracingOptions ,obj: 
vert.x-master,docoverride.buffer,Examples,1,1,0,0,0,false,0 ,0 ,0 ,,example4{ Params :  Returns : void} ,,,,,,,,,,Buffer: , bytes
vert.x-master,docoverride.dns,Examples,1,1,0,0,0,false,0 ,0 ,0 ,,example16{ Params : Vertx Returns : void} ,,,,,,,,,,ar: 
vert.x-master,docoverride.eventbus,Examples,1,1,0,0,0,false,0 ,0 ,MyPOJO ,,example10{ Params : EventBus,MessageCodec Returns : void} example11{ Params : EventBus,MessageCodec Returns : void} headers{ Params : EventBus Returns : void} ,,,,,,,,,DeliveryOptions MyPOJO MyPOJO DeliveryOptions ,eventBus: , "news.uk.sport", "Yay! Someone kicked a ball", options
vert.x-master,docoverride.eventbus,MyPOJO,3,0,0,0,0,false,0 ,0 ,MyPOJO ,,example10{ Params : EventBus,MessageCodec Returns : void} example11{ Params : EventBus,MessageCodec Returns : void} headers{ Params : EventBus Returns : void} ,,,,,,,,,,null
vert.x-master,docoverride.json,Examples,1,1,0,0,0,false,0 ,0 ,User ,,example0_1{ Params :  Returns : void} exampleCreateFromMap{ Params :  Returns : void} example0_2{ Params :  Returns : void} example1{ Params :  Returns : void} mapFromPojo{ Params : HttpServerRequest Returns : void} mapToPojo{ Params : HttpServerRequest Returns : void} example2{ Params : JsonObject Returns : void} example3{ Params :  Returns : void} example4{ Params : JsonArray Returns : void} example5{ Params : String Returns : void} ,,,,,,,,,JsonObject HashMap JsonObject JsonArray JsonObject User JsonArray ,Json: , arbitraryJson
vert.x-master,docoverride.json,User,3,2,0,1,0,false,0 ,0 ,User ,,example0_1{ Params :  Returns : void} exampleCreateFromMap{ Params :  Returns : void} example0_2{ Params :  Returns : void} example1{ Params :  Returns : void} mapFromPojo{ Params : HttpServerRequest Returns : void} mapToPojo{ Params : HttpServerRequest Returns : void} example2{ Params : JsonObject Returns : void} example3{ Params :  Returns : void} example4{ Params : JsonArray Returns : void} example5{ Params : String Returns : void} ,,,,,,,,,,null
vert.x-master,examples,BufferExamples,1,1,0,0,0,false,0 ,0 ,0 ,,example1{ Params :  Returns : void} example2{ Params :  Returns : void} example3{ Params :  Returns : void} example5{ Params :  Returns : void} example6{ Params : NetSocket Returns : void} example7{ Params :  Returns : void} example8{ Params :  Returns : void} example9{ Params :  Returns : void} ,,,,,,,,,,buff: , pos
vert.x-master,examples.cli,AnnotatedCli,1,1,0,0,0,false,0 ,0 ,0 ,flag: boolean name: String arg: String ,setFlag{ Params : boolean Returns : void} setName{ Params : String Returns : void} setArg{ Params : String Returns : void} ,,,,,,String ,,String ,,buff: , pos
vert.x-master,examples.cli,CLIExamples,1,1,0,0,0,false,0 ,0 ,0 ,,example1{ Params :  Returns : void} example2{ Params :  Returns : void} example3{ Params :  Returns : void} example4{ Params :  Returns : void} example41{ Params :  Returns : void} example5{ Params :  Returns : void} example51{ Params :  Returns : void} example6{ Params :  Returns : void} example7{ Params : CLI,List<String> Returns : void} example8{ Params : CLI,List<String> Returns : void} example9{ Params : PrintStream Returns : void} ,,,,,,,,,Option Argument Argument Option Option Option Option Option Option Argument Argument Argument Argument Option Argument Argument StringBuilder Option Option StringBuilder ,builder: 
vert.x-master,examples.cli,MyCommand,1,1,0,0,0,false,DefaultCommand ,0 ,0 ,name: String ,setName{ Params : String Returns : void} run{ Params :  Returns : void} ,run ,,,,,String ,,String ,,System.out: , "Hello " + name
vert.x-master,examples.cli,TypedCLIExamples,1,1,0,0,0,false,0 ,0 ,Person PersonConverter ,,example1{ Params :  Returns : void} example2{ Params : CLI,List<String> Returns : void} example3{ Params :  Returns : void} example4{ Params : List<String> Returns : void} fromString{ Params : String Returns : Person} ,fromString ,,,,,,,,TypedOption TypedArgument TypedArgument TypedOption PersonConverter AnnotatedCli ,CLIConfigurator: , commandLine, instance
vert.x-master,examples.cli,Person,3,2,0,0,0,false,0 ,0 ,Person PersonConverter ,,example1{ Params :  Returns : void} example2{ Params : CLI,List<String> Returns : void} example3{ Params :  Returns : void} example4{ Params : List<String> Returns : void} fromString{ Params : String Returns : Person} ,fromString ,,,,,,,,,null
vert.x-master,examples.cli,PersonConverter,3,2,0,0,0,false,0 ,0 ,Person PersonConverter ,,example1{ Params :  Returns : void} example2{ Params : CLI,List<String> Returns : void} example3{ Params :  Returns : void} example4{ Params : List<String> Returns : void} fromString{ Params : String Returns : Person} ,fromString ,,,,Converter ,,,,,CLIConfigurator: , commandLine, instance
vert.x-master,examples,CompletionStageInteropExamples,1,1,0,0,0,false,0 ,0 ,0 ,,toCS{ Params : Vertx Returns : void} storeInDb{ Params : String,String Returns : Future<String>} fromCS{ Params : Vertx,CompletionStage<String> Returns : void} ,,,,,,,,,,err: 
vert.x-master,examples,ConfigurableVerticleExamples,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,,start{ Params :  Returns : void} ,start ,,,,,,,,,: 
vert.x-master,examples,CoreExamples,1,1,0,0,0,false,0 ,0 ,BlockingAPI MyVerticle ,someAPI: BlockingAPI ,example1{ Params :  Returns : void} example2{ Params :  Returns : void} example3{ Params : HttpServerRequest Returns : void} example4{ Params : HttpServerRequest Returns : void} example5{ Params : Vertx Returns : void} example6{ Params : HttpServer Returns : void} example7{ Params : Vertx Returns : void} workerExecutor1{ Params : Vertx Returns : void} workerExecutor2{ Params : WorkerExecutor Returns : void} workerExecutor3{ Params : Vertx Returns : void} blockingMethod{ Params : String Returns : String} exampleFuture1{ Params : Vertx,Handler<HttpServerRequest> Returns : void} promiseAsHandler{ Params :  Returns : void} promiseCallbackOrder{ Params : Future<Void> Returns : void} legacyGreetAsync{ Params : Handler<AsyncResult<String>> Returns : void} exampleFutureComposition1{ Params : Vertx Returns : void} exampleFuture2{ Params : Vertx,Handler<HttpServerRequest> Returns : void} exampleFutureAll1{ Params : HttpServer,NetServer Returns : void} exampleFutureAll2{ Params : Future<?>,Future<?>,Future<?> Returns : void} exampleFutureAny1{ Params : Future<String>,Future<String> Returns : void} exampleFutureAny2{ Params : Future<?>,Future<?>,Future<?> Returns : void} exampleFutureJoin1{ Params : Future<?>,Future<?>,Future<?> Returns : void} exampleFutureJoin2{ Params : Future<?>,Future<?>,Future<?> Returns : void} example7_1{ Params : Vertx Returns : void} example8{ Params : Vertx Returns : void} start{ Params :  Returns : void} example9{ Params : Vertx Returns : void} example10{ Params : Vertx Returns : void} example11{ Params : Vertx,String Returns : void} example12{ Params : Vertx Returns : void} example13{ Params : Vertx Returns : void} example15{ Params : Vertx Returns : void} example16{ Params : Vertx Returns : void} example17{ Params : Vertx,long Returns : void} example18{ Params : String,Exception Returns : void} retrieveContext{ Params : Vertx Returns : void} retrieveContextType{ Params : Vertx Returns : void} runInContext{ Params : Vertx Returns : void} runInContextWithData{ Params : Vertx Returns : void} systemAndEnvProperties{ Params :  Returns : void} configureDNSServers{ Params :  Returns : void} configureHosts{ Params :  Returns : void} configureSearchDomains{ Params :  Returns : void} deployVerticleWithDifferentWorkerPool{ Params : Vertx Returns : void} configureNative{ Params :  Returns : void} configureLinuxOptions{ Params : Vertx,boolean,boolean,boolean,boolean Returns : void} configureBSDOptions{ Params : Vertx,boolean Returns : void} tcpServerWithDomainSockets{ Params : Vertx Returns : void} httpServerWithDomainSockets{ Params : Vertx Returns : void} tcpClientWithDomainSockets{ Params : Vertx Returns : void} httpClientWithDomainSockets{ Params : Vertx Returns : void} ,start ,,,,,,,,VertxOptions BlockingAPI DeploymentOptions MyVerticle DeploymentOptions JsonObject DeploymentOptions VertxOptions AddressResolverOptions VertxOptions AddressResolverOptions VertxOptions AddressResolverOptions DeploymentOptions VertxOptions HttpServerOptions HttpServerOptions RequestOptions ,request: 
vert.x-master,examples,BlockingAPI,3,0,0,0,0,false,0 ,0 ,BlockingAPI MyVerticle ,,example1{ Params :  Returns : void} example2{ Params :  Returns : void} example3{ Params : HttpServerRequest Returns : void} example4{ Params : HttpServerRequest Returns : void} example5{ Params : Vertx Returns : void} example6{ Params : HttpServer Returns : void} example7{ Params : Vertx Returns : void} workerExecutor1{ Params : Vertx Returns : void} workerExecutor2{ Params : WorkerExecutor Returns : void} workerExecutor3{ Params : Vertx Returns : void} blockingMethod{ Params : String Returns : String} exampleFuture1{ Params : Vertx,Handler<HttpServerRequest> Returns : void} promiseAsHandler{ Params :  Returns : void} promiseCallbackOrder{ Params : Future<Void> Returns : void} legacyGreetAsync{ Params : Handler<AsyncResult<String>> Returns : void} exampleFutureComposition1{ Params : Vertx Returns : void} exampleFuture2{ Params : Vertx,Handler<HttpServerRequest> Returns : void} exampleFutureAll1{ Params : HttpServer,NetServer Returns : void} exampleFutureAll2{ Params : Future<?>,Future<?>,Future<?> Returns : void} exampleFutureAny1{ Params : Future<String>,Future<String> Returns : void} exampleFutureAny2{ Params : Future<?>,Future<?>,Future<?> Returns : void} exampleFutureJoin1{ Params : Future<?>,Future<?>,Future<?> Returns : void} exampleFutureJoin2{ Params : Future<?>,Future<?>,Future<?> Returns : void} example7_1{ Params : Vertx Returns : void} example8{ Params : Vertx Returns : void} start{ Params :  Returns : void} example9{ Params : Vertx Returns : void} example10{ Params : Vertx Returns : void} example11{ Params : Vertx,String Returns : void} example12{ Params : Vertx Returns : void} example13{ Params : Vertx Returns : void} example15{ Params : Vertx Returns : void} example16{ Params : Vertx Returns : void} example17{ Params : Vertx,long Returns : void} example18{ Params : String,Exception Returns : void} retrieveContext{ Params : Vertx Returns : void} retrieveContextType{ Params : Vertx Returns : void} runInContext{ Params : Vertx Returns : void} runInContextWithData{ Params : Vertx Returns : void} systemAndEnvProperties{ Params :  Returns : void} configureDNSServers{ Params :  Returns : void} configureHosts{ Params :  Returns : void} configureSearchDomains{ Params :  Returns : void} deployVerticleWithDifferentWorkerPool{ Params : Vertx Returns : void} configureNative{ Params :  Returns : void} configureLinuxOptions{ Params : Vertx,boolean,boolean,boolean,boolean Returns : void} configureBSDOptions{ Params : Vertx,boolean Returns : void} tcpServerWithDomainSockets{ Params : Vertx Returns : void} httpServerWithDomainSockets{ Params : Vertx Returns : void} tcpClientWithDomainSockets{ Params : Vertx Returns : void} httpClientWithDomainSockets{ Params : Vertx Returns : void} ,start ,,,,,,,,,request: 
vert.x-master,examples,MyVerticle,3,0,0,0,0,false,0 ,0 ,BlockingAPI MyVerticle ,,example1{ Params :  Returns : void} example2{ Params :  Returns : void} example3{ Params : HttpServerRequest Returns : void} example4{ Params : HttpServerRequest Returns : void} example5{ Params : Vertx Returns : void} example6{ Params : HttpServer Returns : void} example7{ Params : Vertx Returns : void} workerExecutor1{ Params : Vertx Returns : void} workerExecutor2{ Params : WorkerExecutor Returns : void} workerExecutor3{ Params : Vertx Returns : void} blockingMethod{ Params : String Returns : String} exampleFuture1{ Params : Vertx,Handler<HttpServerRequest> Returns : void} promiseAsHandler{ Params :  Returns : void} promiseCallbackOrder{ Params : Future<Void> Returns : void} legacyGreetAsync{ Params : Handler<AsyncResult<String>> Returns : void} exampleFutureComposition1{ Params : Vertx Returns : void} exampleFuture2{ Params : Vertx,Handler<HttpServerRequest> Returns : void} exampleFutureAll1{ Params : HttpServer,NetServer Returns : void} exampleFutureAll2{ Params : Future<?>,Future<?>,Future<?> Returns : void} exampleFutureAny1{ Params : Future<String>,Future<String> Returns : void} exampleFutureAny2{ Params : Future<?>,Future<?>,Future<?> Returns : void} exampleFutureJoin1{ Params : Future<?>,Future<?>,Future<?> Returns : void} exampleFutureJoin2{ Params : Future<?>,Future<?>,Future<?> Returns : void} example7_1{ Params : Vertx Returns : void} example8{ Params : Vertx Returns : void} start{ Params :  Returns : void} example9{ Params : Vertx Returns : void} example10{ Params : Vertx Returns : void} example11{ Params : Vertx,String Returns : void} example12{ Params : Vertx Returns : void} example13{ Params : Vertx Returns : void} example15{ Params : Vertx Returns : void} example16{ Params : Vertx Returns : void} example17{ Params : Vertx,long Returns : void} example18{ Params : String,Exception Returns : void} retrieveContext{ Params : Vertx Returns : void} retrieveContextType{ Params : Vertx Returns : void} runInContext{ Params : Vertx Returns : void} runInContextWithData{ Params : Vertx Returns : void} systemAndEnvProperties{ Params :  Returns : void} configureDNSServers{ Params :  Returns : void} configureHosts{ Params :  Returns : void} configureSearchDomains{ Params :  Returns : void} deployVerticleWithDifferentWorkerPool{ Params : Vertx Returns : void} configureNative{ Params :  Returns : void} configureLinuxOptions{ Params : Vertx,boolean,boolean,boolean,boolean Returns : void} configureBSDOptions{ Params : Vertx,boolean Returns : void} tcpServerWithDomainSockets{ Params : Vertx Returns : void} httpServerWithDomainSockets{ Params : Vertx Returns : void} tcpClientWithDomainSockets{ Params : Vertx Returns : void} httpClientWithDomainSockets{ Params : Vertx Returns : void} ,start ,,,,,,,,,super: 
vert.x-master,examples,DatagramExamples,1,1,0,0,0,false,0 ,0 ,0 ,,example1{ Params : Vertx Returns : void} example2{ Params : Vertx Returns : void} example3{ Params : Vertx Returns : void} example4{ Params : Vertx Returns : void} example5{ Params : Vertx Returns : void} example6{ Params : Vertx Returns : void} example7{ Params : Vertx Returns : void} ,,,,,,,,,DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions ,asyncResult: 
vert.x-master,examples,DNSExamples,1,1,0,0,0,false,0 ,0 ,0 ,,example1{ Params : Vertx Returns : void} example1_{ Params : Vertx Returns : void} example1__{ Params : Vertx Returns : void} example2{ Params : Vertx Returns : void} example3{ Params : Vertx Returns : void} example4{ Params : Vertx Returns : void} example5{ Params : Vertx Returns : void} example6{ Params : Vertx Returns : void} example7{ Params : Vertx Returns : void} example8{ Params : Vertx Returns : void} example9{ Params : MxRecord Returns : void} example10{ Params : Vertx Returns : void} example11{ Params : Vertx Returns : void} example12{ Params : Vertx Returns : void} getSrvRecord{ Params :  Returns : SrvRecord} example13{ Params : SrvRecord Returns : void} example14{ Params : Vertx Returns : void} example15{ Params : Vertx Returns : void} ,,getSrvRecord ,,,,,,,DnsClientOptions DnsClientOptions ,ar: 
vert.x-master,examples,EventBusExamples,1,1,0,0,0,false,0 ,0 ,0 ,,example0_5{ Params : Vertx Returns : void} example1{ Params : Vertx Returns : void} example2{ Params : Vertx Returns : void} example3{ Params : MessageConsumer<String> Returns : void} example4{ Params : MessageConsumer<String> Returns : void} example5{ Params : EventBus Returns : void} example6{ Params : EventBus Returns : void} example8{ Params : EventBus Returns : void} example9{ Params : EventBus Returns : void} example12{ Params :  Returns : void} example13{ Params :  Returns : void} example14{ Params :  Returns : void} ,,,,,,,,,VertxOptions VertxOptions EventBusOptions JksOptions JksOptions VertxOptions EventBusOptions ,res: 
vert.x-master,examples,FileSystemExamples,1,1,0,0,0,false,0 ,0 ,0 ,,example1{ Params : Vertx Returns : void} example2{ Params : Vertx Returns : void} example3{ Params : FileSystem Returns : void} asyncAPIExamples{ Params : Vertx Returns : void} asyncFileWrite{ Params : Vertx Returns : void} asyncFileRead{ Params : Vertx Returns : void} asyncFilePipe{ Params : Vertx Returns : void} ,,,,,,,,,OpenOptions OpenOptions OpenOptions OpenOptions OpenOptions ,result: 
vert.x-master,examples,HTTP2Examples,1,1,0,0,0,false,0 ,0 ,0 ,,example0{ Params : Vertx Returns : void} example1{ Params : HttpServerRequest Returns : void} example2{ Params : HttpServerResponse Returns : void} example3{ Params : HttpServerRequest Returns : void} example4{ Params : HttpServerRequest Returns : void} example5{ Params : HttpServerRequest Returns : void} example6{ Params : HttpServerRequest Returns : void} example7{ Params : Vertx Returns : void} example8{ Params : Vertx Returns : void} example9{ Params : HttpClientRequest Returns : void} example10{ Params : HttpClientRequest Returns : void} example11{ Params : HttpClientRequest Returns : void} example12{ Params : HttpClientRequest Returns : void} example13{ Params : HttpClient Returns : void} example14{ Params : HttpClientRequest Returns : void} example15{ Params : HttpClientResponse Returns : void} example16{ Params : HttpServerRequest Returns : void} example17{ Params : Vertx,HttpServerOptions Returns : void} example18{ Params : HttpClientRequest Returns : void} example19{ Params : HttpClient Returns : void} example20{ Params : HttpConnection Returns : void} example21{ Params : HttpConnection Returns : void} example22{ Params : HttpConnection Returns : void} example23{ Params : HttpConnection Returns : void} example24{ Params : HttpConnection Returns : void} example25{ Params : HttpConnection Returns : void} example26{ Params : HttpConnection Returns : void} example27{ Params : HttpConnection Returns : void} example28{ Params : HttpConnection Returns : void} useMaxStreams{ Params : Vertx Returns : void} ,,,,,,,,,HttpServerOptions JksOptions HttpClientOptions HttpClientOptions Http2Settings Http2Settings HttpClientOptions ,vertx: , clientOptions
vert.x-master,examples,HTTPExamples,1,1,0,0,0,false,0 ,0 ,HttpClient2 ,,example1{ Params : Vertx Returns : void} example2{ Params : Vertx Returns : void} exampleServerLogging{ Params : Vertx Returns : void} example3{ Params : Vertx Returns : void} example4{ Params : Vertx Returns : void} example5{ Params : Vertx Returns : void} example6{ Params : Vertx Returns : void} example7{ Params : Vertx Returns : void} example7_1{ Params : Vertx Returns : void} example8{ Params : HttpServerRequest Returns : void} example9{ Params : HttpServerRequest Returns : void} example10{ Params : HttpServerRequest Returns : void} example11{ Params : HttpServerRequest Returns : void} example12{ Params : HttpServer Returns : void} example13{ Params : HttpServer Returns : void} example14{ Params : HttpServerRequest Returns : void} example15{ Params : HttpServerRequest Returns : void} exampleHandlingCookies{ Params : HttpServerRequest Returns : void} example16{ Params : HttpServerRequest,Buffer Returns : void} example17{ Params : HttpServerRequest Returns : void} example18{ Params : HttpServerRequest Returns : void} example19{ Params : HttpServerRequest Returns : void} example20{ Params : HttpServerRequest Returns : void} example21{ Params : HttpServerRequest Returns : void} example22{ Params : HttpServerRequest Returns : void} example23{ Params : HttpServerRequest Returns : void} example24{ Params : HttpServerRequest Returns : void} example25{ Params : HttpServerRequest Returns : void} example26{ Params : Vertx Returns : void} example26b{ Params : Vertx Returns : void} example26c{ Params : Vertx Returns : void} example27{ Params : Vertx Returns : void} sendHttpServerResponse{ Params : Vertx Returns : void} example28{ Params : Vertx Returns : void} example29{ Params : Vertx Returns : void} exampleClientLogging{ Params : Vertx Returns : void} example30{ Params : HttpClient Returns : void} example31{ Params : Vertx Returns : void} example32{ Params : Vertx Returns : void} example33{ Params : HttpClientRequest Returns : void} sendRequest01{ Params : HttpClient Returns : void} sendRequest02{ Params : HttpClient Returns : void} sendRequest03{ Params : HttpClientRequest Returns : void} sendRequest04{ Params : HttpClientRequest,ReadStream<Buffer> Returns : void} example34{ Params : Vertx,String Returns : void} example35{ Params : HttpClientRequest Returns : void} example36{ Params : HttpClientRequest Returns : void} example39{ Params : HttpClientRequest Returns : void} example40{ Params : HttpClientRequest Returns : void} example41{ Params : HttpClientRequest Returns : void} useRequestAsStream{ Params : HttpClientRequest Returns : void} setRequestExceptionHandler{ Params : HttpClientRequest Returns : void} example44{ Params : HttpClientRequest,AsyncFile Returns : void} example45{ Params : HttpClientRequest Returns : void} example46{ Params : HttpClientResponse Returns : void} example47{ Params : HttpClient Returns : void} example48{ Params : HttpClientRequest Returns : void} example49{ Params : HttpClientRequest Returns : void} get{ Params : String Returns : Future<HttpClientResponse>} exampleClientComposition01{ Params : HttpClient2 Returns : void} exampleClientComposition03{ Params : HttpClient Returns : void} exampleClientComposition04{ Params : HttpClient,FileSystem Returns : void} exampleFollowRedirect01{ Params : HttpClient Returns : void} exampleFollowRedirect02{ Params : Vertx Returns : void} resolveURI{ Params : String,String Returns : String} exampleFollowRedirect03{ Params : HttpClient Returns : void} example50{ Params : HttpClient Returns : void} example50_1{ Params : HttpServer Returns : void} example50_2{ Params : HttpServer Returns : void} clientTunnel{ Params : HttpClient Returns : void} example51{ Params : HttpServer Returns : void} example52{ Params : HttpServer Returns : void} exampleAsynchronousHandshake{ Params : HttpServer Returns : void} authenticate{ Params : MultiMap,Handler<AsyncResult<Boolean>> Returns : void} example53{ Params : HttpServer Returns : void} example54{ Params : HttpClient Returns : void} exampleWebSocketDisableOriginHeader{ Params : HttpClient,String,int,String Returns : void} exampleWebSocketSetOriginHeader{ Params : HttpClient,String,int,String,String Returns : void} example55{ Params : WebSocket Returns : void} example56{ Params : WebSocket,Buffer,Buffer,Buffer Returns : void} example56_1{ Params : WebSocket Returns : void} example57{ Params : WebSocket Returns : void} example58{ Params : Vertx Returns : void} example59{ Params : Vertx Returns : void} nonProxyHosts{ Params : Vertx Returns : void} perRequestProxyOptions{ Params : HttpClient,ProxyOptions Returns : void} example60{ Params : Vertx Returns : void} example61{ Params : Vertx Returns : void} serversharing{ Params : Vertx Returns : void} serversharingclient{ Params : Vertx Returns : void} randomServersharing{ Params : Vertx Returns : void} setSSLPerRequest{ Params : HttpClient Returns : void} setIdentityContentEncodingHeader{ Params : HttpServerRequest Returns : void} setCompressors{ Params :  Returns : void} compressorConfig{ Params :  Returns : void} httpClientSharing1{ Params : Vertx Returns : void} start{ Params :  Returns : void} httpClientSharing2{ Params : Vertx Returns : void} start{ Params :  Returns : void} httpClientSharing3{ Params : Vertx Returns : void} start{ Params :  Returns : void} ,start start start ,authenticate setIdentityContentEncodingHeader setCompressors compressorConfig httpClientSharing1 httpClientSharing2 httpClientSharing3 ,,,,,,,HttpServerOptions HttpServerOptions HttpClientOptions HttpClientOptions HttpClientOptions OpenOptions HttpClientOptions UnsupportedOperationException RequestOptions WebSocketConnectOptions WebSocketConnectOptions HttpClientOptions ProxyOptions HttpClientOptions ProxyOptions HttpClientOptions ProxyOptions RequestOptions HttpClientOptions ProxyOptions HttpServerOptions RequestOptions HttpServerOptions HttpClientOptions AbstractVerticle DeploymentOptions AbstractVerticle HttpClientOptions DeploymentOptions AbstractVerticle HttpClientOptions DeploymentOptions ,new DeploymentOptions(): , 4
vert.x-master,examples,HttpClient2,3,2,0,0,0,true,0 ,0 ,HttpClient2 ,,example1{ Params : Vertx Returns : void} example2{ Params : Vertx Returns : void} exampleServerLogging{ Params : Vertx Returns : void} example3{ Params : Vertx Returns : void} example4{ Params : Vertx Returns : void} example5{ Params : Vertx Returns : void} example6{ Params : Vertx Returns : void} example7{ Params : Vertx Returns : void} example7_1{ Params : Vertx Returns : void} example8{ Params : HttpServerRequest Returns : void} example9{ Params : HttpServerRequest Returns : void} example10{ Params : HttpServerRequest Returns : void} example11{ Params : HttpServerRequest Returns : void} example12{ Params : HttpServer Returns : void} example13{ Params : HttpServer Returns : void} example14{ Params : HttpServerRequest Returns : void} example15{ Params : HttpServerRequest Returns : void} exampleHandlingCookies{ Params : HttpServerRequest Returns : void} example16{ Params : HttpServerRequest,Buffer Returns : void} example17{ Params : HttpServerRequest Returns : void} example18{ Params : HttpServerRequest Returns : void} example19{ Params : HttpServerRequest Returns : void} example20{ Params : HttpServerRequest Returns : void} example21{ Params : HttpServerRequest Returns : void} example22{ Params : HttpServerRequest Returns : void} example23{ Params : HttpServerRequest Returns : void} example24{ Params : HttpServerRequest Returns : void} example25{ Params : HttpServerRequest Returns : void} example26{ Params : Vertx Returns : void} example26b{ Params : Vertx Returns : void} example26c{ Params : Vertx Returns : void} example27{ Params : Vertx Returns : void} sendHttpServerResponse{ Params : Vertx Returns : void} example28{ Params : Vertx Returns : void} example29{ Params : Vertx Returns : void} exampleClientLogging{ Params : Vertx Returns : void} example30{ Params : HttpClient Returns : void} example31{ Params : Vertx Returns : void} example32{ Params : Vertx Returns : void} example33{ Params : HttpClientRequest Returns : void} sendRequest01{ Params : HttpClient Returns : void} sendRequest02{ Params : HttpClient Returns : void} sendRequest03{ Params : HttpClientRequest Returns : void} sendRequest04{ Params : HttpClientRequest,ReadStream<Buffer> Returns : void} example34{ Params : Vertx,String Returns : void} example35{ Params : HttpClientRequest Returns : void} example36{ Params : HttpClientRequest Returns : void} example39{ Params : HttpClientRequest Returns : void} example40{ Params : HttpClientRequest Returns : void} example41{ Params : HttpClientRequest Returns : void} useRequestAsStream{ Params : HttpClientRequest Returns : void} setRequestExceptionHandler{ Params : HttpClientRequest Returns : void} example44{ Params : HttpClientRequest,AsyncFile Returns : void} example45{ Params : HttpClientRequest Returns : void} example46{ Params : HttpClientResponse Returns : void} example47{ Params : HttpClient Returns : void} example48{ Params : HttpClientRequest Returns : void} example49{ Params : HttpClientRequest Returns : void} get{ Params : String Returns : Future<HttpClientResponse>} exampleClientComposition01{ Params : HttpClient2 Returns : void} exampleClientComposition03{ Params : HttpClient Returns : void} exampleClientComposition04{ Params : HttpClient,FileSystem Returns : void} exampleFollowRedirect01{ Params : HttpClient Returns : void} exampleFollowRedirect02{ Params : Vertx Returns : void} resolveURI{ Params : String,String Returns : String} exampleFollowRedirect03{ Params : HttpClient Returns : void} example50{ Params : HttpClient Returns : void} example50_1{ Params : HttpServer Returns : void} example50_2{ Params : HttpServer Returns : void} clientTunnel{ Params : HttpClient Returns : void} example51{ Params : HttpServer Returns : void} example52{ Params : HttpServer Returns : void} exampleAsynchronousHandshake{ Params : HttpServer Returns : void} authenticate{ Params : MultiMap,Handler<AsyncResult<Boolean>> Returns : void} example53{ Params : HttpServer Returns : void} example54{ Params : HttpClient Returns : void} exampleWebSocketDisableOriginHeader{ Params : HttpClient,String,int,String Returns : void} exampleWebSocketSetOriginHeader{ Params : HttpClient,String,int,String,String Returns : void} example55{ Params : WebSocket Returns : void} example56{ Params : WebSocket,Buffer,Buffer,Buffer Returns : void} example56_1{ Params : WebSocket Returns : void} example57{ Params : WebSocket Returns : void} example58{ Params : Vertx Returns : void} example59{ Params : Vertx Returns : void} nonProxyHosts{ Params : Vertx Returns : void} perRequestProxyOptions{ Params : HttpClient,ProxyOptions Returns : void} example60{ Params : Vertx Returns : void} example61{ Params : Vertx Returns : void} serversharing{ Params : Vertx Returns : void} serversharingclient{ Params : Vertx Returns : void} randomServersharing{ Params : Vertx Returns : void} setSSLPerRequest{ Params : HttpClient Returns : void} setIdentityContentEncodingHeader{ Params : HttpServerRequest Returns : void} setCompressors{ Params :  Returns : void} compressorConfig{ Params :  Returns : void} httpClientSharing1{ Params : Vertx Returns : void} start{ Params :  Returns : void} httpClientSharing2{ Params : Vertx Returns : void} start{ Params :  Returns : void} httpClientSharing3{ Params : Vertx Returns : void} start{ Params :  Returns : void} ,start start start ,authenticate setIdentityContentEncodingHeader setCompressors compressorConfig httpClientSharing1 httpClientSharing2 httpClientSharing3 ,,,,,,,,new DeploymentOptions(): , 4
vert.x-master,examples,JsonPointerExamples,1,1,0,0,0,false,0 ,0 ,0 ,,example1Pointers{ Params :  Returns : void} example2Pointers{ Params : JsonPointer,JsonObject,JsonPointer,JsonArray Returns : void} ,,,,,,,,,,arrayPointer: , jsonArray, "new element"
vert.x-master,examples,NetExamples,1,1,0,0,0,false,0 ,0 ,0 ,,example1{ Params : Vertx Returns : void} example2{ Params : Vertx Returns : void} example3{ Params : Vertx Returns : void} example4{ Params : Vertx Returns : void} example5{ Params : Vertx Returns : void} example5_1{ Params : Vertx Returns : void} example6{ Params : Vertx Returns : void} example7{ Params : Vertx Returns : void} example8{ Params : NetSocket Returns : void} example9{ Params : NetServer Returns : void} example9_1{ Params : NetSocket Returns : void} example10{ Params : NetSocket Returns : void} example11{ Params : Vertx Returns : void} start{ Params :  Returns : void} example13{ Params : Vertx Returns : void} example14{ Params : Vertx Returns : void} example15{ Params : Vertx Returns : void} example16{ Params : Vertx Returns : void} exampleNetworkActivityLoggingOnServer{ Params : Vertx Returns : void} exampleNetworkActivityLoggingFormat{ Params : Vertx Returns : void} exampleNetworkActivityLoggingOnClient{ Params : Vertx Returns : void} example17{ Params : Vertx Returns : void} example18{ Params : Vertx Returns : void} example19{ Params : Vertx Returns : void} example20{ Params : Vertx Returns : void} example21{ Params : Vertx Returns : void} example22{ Params : Vertx Returns : void} exampleBKS{ Params : Vertx Returns : void} example23{ Params : Vertx Returns : void} example24{ Params : Vertx Returns : void} example25{ Params : Vertx Returns : void} example26{ Params : Vertx Returns : void} example27{ Params : Vertx Returns : void} example28{ Params : Vertx Returns : void} example29{ Params : Vertx Returns : void} example30{ Params : Vertx Returns : void} example31{ Params : Vertx Returns : void} example32{ Params : Vertx Returns : void} example33{ Params : Vertx Returns : void} example34{ Params : Vertx Returns : void} example35{ Params : Vertx Returns : void} example36{ Params : Vertx Returns : void} example37{ Params : Vertx Returns : void} example38{ Params : Vertx Returns : void} example39{ Params : Vertx Returns : void} example40{ Params : Vertx Returns : void} example41{ Params : Vertx Returns : void} updateSSLOptions{ Params : HttpServer Returns : void} example42{ Params : Vertx,JksOptions Returns : void} example43{ Params : Vertx,JksOptions Returns : void} example44{ Params : Vertx,JksOptions Returns : void} addEnabledTLSPrococol{ Params : Vertx,JksOptions Returns : void} removeEnabledTLSPrococol{ Params : Vertx,JksOptions Returns : void} exampleSSLEngine{ Params : Vertx,JksOptions Returns : void} example46{ Params : Vertx,JksOptions Returns : void} example47{ Params : Vertx Returns : void} nonProxyHosts{ Params : Vertx Returns : void} example48{ Params : Vertx Returns : void} example49{ Params :  Returns : void} example50{ Params : Vertx Returns : void} example51{ Params : Vertx Returns : void} configureSNIServer{ Params : Vertx Returns : void} configureSNIServerWithPems{ Params : Vertx Returns : void} useSNIInClient{ Params : Vertx,JksOptions Returns : void} ,start ,,,,,,,,NetServerOptions DeploymentOptions NetClientOptions NetClientOptions NetClientOptions NetServerOptions NetServerOptions NetClientOptions NetServerOptions JksOptions JksOptions NetServerOptions NetServerOptions PfxOptions PfxOptions NetServerOptions NetServerOptions PemKeyCertOptions PemKeyCertOptions NetServerOptions NetServerOptions KeyStoreOptions NetServerOptions JksOptions NetServerOptions JksOptions NetServerOptions PfxOptions NetServerOptions PfxOptions NetServerOptions PemTrustOptions NetServerOptions PemTrustOptions NetClientOptions NetClientOptions JksOptions NetClientOptions JksOptions NetClientOptions PfxOptions NetClientOptions PfxOptions NetClientOptions PemTrustOptions NetClientOptions PemTrustOptions NetClientOptions JksOptions JksOptions NetClientOptions NetClientOptions PfxOptions PfxOptions NetClientOptions NetClientOptions PemKeyCertOptions PemKeyCertOptions NetClientOptions SSLOptions JksOptions NetClientOptions NetClientOptions NetServerOptions NetServerOptions NetServerOptions NetServerOptions NetServerOptions JdkSSLEngineOptions NetServerOptions OpenSSLEngineOptions NetClientOptions NetClientOptions ProxyOptions NetClientOptions ProxyOptions NetServerOptions NetClientOptions NetClientOptions HttpServerOptions NetServerOptions JksOptions NetServerOptions PemKeyCertOptions NetServerOptions NetClientOptions ,res: 
vert.x-master,examples,MyVerticle,1,0,0,0,0,false,0 ,0 ,0 ,server: NetServer ,example1{ Params : Vertx Returns : void} example2{ Params : Vertx Returns : void} example3{ Params : Vertx Returns : void} example4{ Params : Vertx Returns : void} example5{ Params : Vertx Returns : void} example5_1{ Params : Vertx Returns : void} example6{ Params : Vertx Returns : void} example7{ Params : Vertx Returns : void} example8{ Params : NetSocket Returns : void} example9{ Params : NetServer Returns : void} example9_1{ Params : NetSocket Returns : void} example10{ Params : NetSocket Returns : void} example11{ Params : Vertx Returns : void} start{ Params :  Returns : void} example13{ Params : Vertx Returns : void} example14{ Params : Vertx Returns : void} example15{ Params : Vertx Returns : void} example16{ Params : Vertx Returns : void} exampleNetworkActivityLoggingOnServer{ Params : Vertx Returns : void} exampleNetworkActivityLoggingFormat{ Params : Vertx Returns : void} exampleNetworkActivityLoggingOnClient{ Params : Vertx Returns : void} example17{ Params : Vertx Returns : void} example18{ Params : Vertx Returns : void} example19{ Params : Vertx Returns : void} example20{ Params : Vertx Returns : void} example21{ Params : Vertx Returns : void} example22{ Params : Vertx Returns : void} exampleBKS{ Params : Vertx Returns : void} example23{ Params : Vertx Returns : void} example24{ Params : Vertx Returns : void} example25{ Params : Vertx Returns : void} example26{ Params : Vertx Returns : void} example27{ Params : Vertx Returns : void} example28{ Params : Vertx Returns : void} example29{ Params : Vertx Returns : void} example30{ Params : Vertx Returns : void} example31{ Params : Vertx Returns : void} example32{ Params : Vertx Returns : void} example33{ Params : Vertx Returns : void} example34{ Params : Vertx Returns : void} example35{ Params : Vertx Returns : void} example36{ Params : Vertx Returns : void} example37{ Params : Vertx Returns : void} example38{ Params : Vertx Returns : void} example39{ Params : Vertx Returns : void} example40{ Params : Vertx Returns : void} example41{ Params : Vertx Returns : void} updateSSLOptions{ Params : HttpServer Returns : void} example42{ Params : Vertx,JksOptions Returns : void} example43{ Params : Vertx,JksOptions Returns : void} example44{ Params : Vertx,JksOptions Returns : void} addEnabledTLSPrococol{ Params : Vertx,JksOptions Returns : void} removeEnabledTLSPrococol{ Params : Vertx,JksOptions Returns : void} exampleSSLEngine{ Params : Vertx,JksOptions Returns : void} example46{ Params : Vertx,JksOptions Returns : void} example47{ Params : Vertx Returns : void} nonProxyHosts{ Params : Vertx Returns : void} example48{ Params : Vertx Returns : void} example49{ Params :  Returns : void} example50{ Params : Vertx Returns : void} example51{ Params : Vertx Returns : void} configureSNIServer{ Params : Vertx Returns : void} configureSNIServerWithPems{ Params : Vertx Returns : void} useSNIInClient{ Params : Vertx,JksOptions Returns : void} ,start ,,,,,,,,,server: , 1234, "localhost"
vert.x-master,examples,ParseToolsExamples,1,1,0,0,0,false,0 ,0 ,User ,,recordParserExample1{ Params :  Returns : void} recordParserExample2{ Params :  Returns : void} jsonParserExample1{ Params :  Returns : void} jsonParserExample2{ Params :  Returns : void} jsonParserExample3{ Params :  Returns : void} jsonParserExample4{ Params :  Returns : void} jsonParserExample5{ Params :  Returns : void} jsonParserExample6{ Params : JsonParser Returns : void} jsonParserExample7{ Params :  Returns : void} ,,,,,,,,,,parser: , err -> {
    // Catch any parsing or decoding error
}
vert.x-master,examples,User,3,2,0,1,0,false,0 ,0 ,User ,firstName: String lastName: String ,recordParserExample1{ Params :  Returns : void} recordParserExample2{ Params :  Returns : void} jsonParserExample1{ Params :  Returns : void} jsonParserExample2{ Params :  Returns : void} jsonParserExample3{ Params :  Returns : void} jsonParserExample4{ Params :  Returns : void} jsonParserExample5{ Params :  Returns : void} jsonParserExample6{ Params : JsonParser Returns : void} jsonParserExample7{ Params :  Returns : void} ,,,,,,String ,,String ,,null
vert.x-master,examples,SharedDataExamples,1,1,0,0,0,false,0 ,0 ,0 ,,localMap{ Params : Vertx Returns : void} asyncMap{ Params : Vertx Returns : void} localAsyncMap{ Params : Vertx Returns : void} example3{ Params : AsyncMap<String,String> Returns : void} example4{ Params : AsyncMap<String,String> Returns : void} lock{ Params : Vertx Returns : void} lockWithTimeout{ Params : Vertx Returns : void} localLock{ Params : Vertx Returns : void} counter{ Params : Vertx Returns : void} localCounter{ Params : Vertx Returns : void} ,,,,,,,,,,res: 
vert.x-master,examples,StreamsExamples,1,1,0,0,0,false,0 ,0 ,0 ,,pipe1{ Params : Vertx Returns : void} pipe2{ Params : Vertx Returns : void} pipe3{ Params : Vertx Returns : void} pipe4{ Params : Vertx Returns : void} pipe5{ Params : Vertx Returns : void} pipe6{ Params : NetServer Returns : void} pipe7{ Params : NetServer,FileSystem Returns : void} pipe8{ Params : Vertx,FileSystem Returns : void} pipe9{ Params : AsyncFile,AsyncFile Returns : void} ,,,,,,,,,NetServerOptions NetServerOptions NetServerOptions NetServerOptions NetServerOptions OpenOptions OpenOptions ,Buffer: , "done"
vert.x-master,io.vertx.core,AbstractVerticle,1,1,1,0,0,false,0 ,Verticle ,0 ,vertx: Vertx context: Context ,getVertx{ Params :  Returns : Vertx} init{ Params : Vertx,Context Returns : void} deploymentID{ Params :  Returns : String} config{ Params :  Returns : JsonObject} processArgs{ Params :  Returns : List<String>} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} ,getVertx init start stop ,,,,Verticle ,,,,,stopPromise: 
vert.x-master,io.vertx.core,AsyncResult,2,1,0,0,0,true,0 ,Verticle ,0 ,,result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} map{ Params : Function<T,U> Returns : AsyncResult<U>} result{ Params :  Returns : U} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} map{ Params : V Returns : AsyncResult<V>} mapEmpty{ Params :  Returns : AsyncResult<V>} otherwise{ Params : Function<Throwable,T> Returns : AsyncResult<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} otherwise{ Params : T Returns : AsyncResult<T>} otherwiseEmpty{ Params :  Returns : AsyncResult<T>} ,result cause succeeded failed result cause succeeded failed ,,,,,,,,NullPointerException AsyncResult NullPointerException AsyncResult ,: , err -> null
vert.x-master,io.vertx.core.buffer,Buffer,2,1,0,0,0,true,0 ,Verticle ,0 ,,buffer{ Params :  Returns : Buffer} buffer{ Params : int Returns : Buffer} buffer{ Params : String Returns : Buffer} buffer{ Params : String,String Returns : Buffer} buffer{ Params : byte[] Returns : Buffer} buffer{ Params : ByteBuf Returns : Buffer} toString{ Params :  Returns : String} toString{ Params : String Returns : String} toString{ Params : Charset Returns : String} toJsonObject{ Params :  Returns : JsonObject} toJsonArray{ Params :  Returns : JsonArray} toJson{ Params :  Returns : Object} getByte{ Params : int Returns : byte} getUnsignedByte{ Params : int Returns : short} getInt{ Params : int Returns : int} getIntLE{ Params : int Returns : int} getUnsignedInt{ Params : int Returns : long} getUnsignedIntLE{ Params : int Returns : long} getLong{ Params : int Returns : long} getLongLE{ Params : int Returns : long} getDouble{ Params : int Returns : double} getFloat{ Params : int Returns : float} getShort{ Params : int Returns : short} getShortLE{ Params : int Returns : short} getUnsignedShort{ Params : int Returns : int} getUnsignedShortLE{ Params : int Returns : int} getMedium{ Params : int Returns : int} getMediumLE{ Params : int Returns : int} getUnsignedMedium{ Params : int Returns : int} getUnsignedMediumLE{ Params : int Returns : int} getBytes{ Params :  Returns : byte[]} getBytes{ Params : int,int Returns : byte[]} getBytes{ Params : byte[] Returns : Buffer} getBytes{ Params : byte[],int Returns : Buffer} getBytes{ Params : int,int,byte[] Returns : Buffer} getBytes{ Params : int,int,byte[],int Returns : Buffer} getBuffer{ Params : int,int Returns : Buffer} getString{ Params : int,int,String Returns : String} getString{ Params : int,int Returns : String} appendBuffer{ Params : Buffer Returns : Buffer} appendBuffer{ Params : Buffer,int,int Returns : Buffer} appendBytes{ Params : byte[] Returns : Buffer} appendBytes{ Params : byte[],int,int Returns : Buffer} appendByte{ Params : byte Returns : Buffer} appendUnsignedByte{ Params : short Returns : Buffer} appendInt{ Params : int Returns : Buffer} appendIntLE{ Params : int Returns : Buffer} appendUnsignedInt{ Params : long Returns : Buffer} appendUnsignedIntLE{ Params : long Returns : Buffer} appendMedium{ Params : int Returns : Buffer} appendMediumLE{ Params : int Returns : Buffer} appendLong{ Params : long Returns : Buffer} appendLongLE{ Params : long Returns : Buffer} appendShort{ Params : short Returns : Buffer} appendShortLE{ Params : short Returns : Buffer} appendUnsignedShort{ Params : int Returns : Buffer} appendUnsignedShortLE{ Params : int Returns : Buffer} appendFloat{ Params : float Returns : Buffer} appendDouble{ Params : double Returns : Buffer} appendString{ Params : String,String Returns : Buffer} appendString{ Params : String Returns : Buffer} setByte{ Params : int,byte Returns : Buffer} setUnsignedByte{ Params : int,short Returns : Buffer} setInt{ Params : int,int Returns : Buffer} setIntLE{ Params : int,int Returns : Buffer} setUnsignedInt{ Params : int,long Returns : Buffer} setUnsignedIntLE{ Params : int,long Returns : Buffer} setMedium{ Params : int,int Returns : Buffer} setMediumLE{ Params : int,int Returns : Buffer} setLong{ Params : int,long Returns : Buffer} setLongLE{ Params : int,long Returns : Buffer} setDouble{ Params : int,double Returns : Buffer} setFloat{ Params : int,float Returns : Buffer} setShort{ Params : int,short Returns : Buffer} setShortLE{ Params : int,short Returns : Buffer} setUnsignedShort{ Params : int,int Returns : Buffer} setUnsignedShortLE{ Params : int,int Returns : Buffer} setBuffer{ Params : int,Buffer Returns : Buffer} setBuffer{ Params : int,Buffer,int,int Returns : Buffer} setBytes{ Params : int,ByteBuffer Returns : Buffer} setBytes{ Params : int,byte[] Returns : Buffer} setBytes{ Params : int,byte[],int,int Returns : Buffer} setString{ Params : int,String Returns : Buffer} setString{ Params : int,String,String Returns : Buffer} length{ Params :  Returns : int} copy{ Params :  Returns : Buffer} slice{ Params :  Returns : Buffer} slice{ Params : int,int Returns : Buffer} getByteBuf{ Params :  Returns : ByteBuf} ,,buffer buffer buffer buffer buffer buffer ,,,,,,,,Json.CODEC: , this, Object.class
vert.x-master,io.vertx.core.buffer.impl,BufferImpl,1,1,0,0,0,false,0 ,Buffer ,0 ,buffer: ByteBuf ,buffer{ Params : int Returns : Buffer} buffer{ Params :  Returns : Buffer} buffer{ Params : String Returns : Buffer} buffer{ Params : String,String Returns : Buffer} buffer{ Params : byte[] Returns : Buffer} buffer{ Params : ByteBuf Returns : Buffer} toString{ Params :  Returns : String} toString{ Params : String Returns : String} toString{ Params : Charset Returns : String} toJsonObject{ Params :  Returns : JsonObject} toJsonArray{ Params :  Returns : JsonArray} getByte{ Params : int Returns : byte} getUnsignedByte{ Params : int Returns : short} getInt{ Params : int Returns : int} getIntLE{ Params : int Returns : int} getUnsignedInt{ Params : int Returns : long} getUnsignedIntLE{ Params : int Returns : long} getLong{ Params : int Returns : long} getLongLE{ Params : int Returns : long} getDouble{ Params : int Returns : double} getFloat{ Params : int Returns : float} getShort{ Params : int Returns : short} getShortLE{ Params : int Returns : short} getUnsignedShort{ Params : int Returns : int} getUnsignedShortLE{ Params : int Returns : int} getMedium{ Params : int Returns : int} getMediumLE{ Params : int Returns : int} getUnsignedMedium{ Params : int Returns : int} getUnsignedMediumLE{ Params : int Returns : int} checkUpperBound{ Params : int,int Returns : void} getBytes{ Params :  Returns : byte[]} getBytes{ Params : int,int Returns : byte[]} getBytes{ Params : byte[] Returns : Buffer} getBytes{ Params : byte[],int Returns : Buffer} getBytes{ Params : int,int,byte[] Returns : Buffer} getBytes{ Params : int,int,byte[],int Returns : Buffer} getBuffer{ Params : int,int Returns : Buffer} getString{ Params : int,int,String Returns : String} getString{ Params : int,int Returns : String} appendBuffer{ Params : Buffer Returns : Buffer} appendBuffer{ Params : Buffer,int,int Returns : Buffer} appendBytes{ Params : byte[] Returns : Buffer} appendBytes{ Params : byte[],int,int Returns : Buffer} appendByte{ Params : byte Returns : Buffer} appendUnsignedByte{ Params : short Returns : Buffer} appendInt{ Params : int Returns : Buffer} appendIntLE{ Params : int Returns : Buffer} appendUnsignedInt{ Params : long Returns : Buffer} appendUnsignedIntLE{ Params : long Returns : Buffer} appendMedium{ Params : int Returns : Buffer} appendMediumLE{ Params : int Returns : Buffer} appendLong{ Params : long Returns : Buffer} appendLongLE{ Params : long Returns : Buffer} appendShort{ Params : short Returns : Buffer} appendShortLE{ Params : short Returns : Buffer} appendUnsignedShort{ Params : int Returns : Buffer} appendUnsignedShortLE{ Params : int Returns : Buffer} appendFloat{ Params : float Returns : Buffer} appendDouble{ Params : double Returns : Buffer} appendString{ Params : String,String Returns : Buffer} appendString{ Params : String Returns : Buffer} setByte{ Params : int,byte Returns : Buffer} setUnsignedByte{ Params : int,short Returns : Buffer} setInt{ Params : int,int Returns : Buffer} setIntLE{ Params : int,int Returns : Buffer} setUnsignedInt{ Params : int,long Returns : Buffer} setUnsignedIntLE{ Params : int,long Returns : Buffer} setMedium{ Params : int,int Returns : Buffer} setMediumLE{ Params : int,int Returns : Buffer} setLong{ Params : int,long Returns : Buffer} setLongLE{ Params : int,long Returns : Buffer} setDouble{ Params : int,double Returns : Buffer} setFloat{ Params : int,float Returns : Buffer} setShort{ Params : int,short Returns : Buffer} setShortLE{ Params : int,short Returns : Buffer} setUnsignedShort{ Params : int,int Returns : Buffer} setUnsignedShortLE{ Params : int,int Returns : Buffer} setBuffer{ Params : int,Buffer Returns : Buffer} setBuffer{ Params : int,Buffer,int,int Returns : Buffer} setBytes{ Params : int,ByteBuffer Returns : BufferImpl} setBytes{ Params : int,byte[] Returns : Buffer} setBytes{ Params : int,byte[],int,int Returns : Buffer} setString{ Params : int,String Returns : Buffer} setString{ Params : int,String,String Returns : Buffer} length{ Params :  Returns : int} copy{ Params :  Returns : Buffer} slice{ Params :  Returns : Buffer} slice{ Params : int,int Returns : Buffer} byteBuf{ Params :  Returns : ByteBuf} getByteBuf{ Params :  Returns : ByteBuf} append{ Params : String,Charset Returns : Buffer} setBytes{ Params : int,String,Charset Returns : Buffer} ensureLength{ Params : int Returns : void} ensureExpandableBy{ Params : int Returns : void} setFullMaxCapacity{ Params : int Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} ,toJsonObject toJsonArray getBytes getBytes getBytes getBytes equals hashCode writeToBuffer readFromBuffer ,buffer buffer buffer buffer buffer buffer ,,,Buffer ,ByteBuf ,,ByteBuf ,BufferImpl BufferImpl BufferImpl BufferImpl BufferImpl BufferImpl JsonObject JsonArray IndexOutOfBoundsException BufferImpl String String BufferImpl BufferImpl BufferImpl ,impl: 
vert.x-master,io.vertx.core.buffer.impl,PartialPooledByteBufAllocator,1,1,0,0,1,false,0 ,ByteBufAllocator ,0 ,INSTANCE: PartialPooledByteBufAllocator ,buffer{ Params :  Returns : ByteBuf} buffer{ Params : int Returns : ByteBuf} buffer{ Params : int,int Returns : ByteBuf} ioBuffer{ Params :  Returns : ByteBuf} ioBuffer{ Params : int Returns : ByteBuf} ioBuffer{ Params : int,int Returns : ByteBuf} heapBuffer{ Params :  Returns : ByteBuf} heapBuffer{ Params : int Returns : ByteBuf} heapBuffer{ Params : int,int Returns : ByteBuf} directBuffer{ Params :  Returns : ByteBuf} directBuffer{ Params : int Returns : ByteBuf} directBuffer{ Params : int,int Returns : ByteBuf} compositeBuffer{ Params :  Returns : CompositeByteBuf} compositeBuffer{ Params : int Returns : CompositeByteBuf} compositeHeapBuffer{ Params :  Returns : CompositeByteBuf} compositeHeapBuffer{ Params : int Returns : CompositeByteBuf} compositeDirectBuffer{ Params :  Returns : CompositeByteBuf} compositeDirectBuffer{ Params : int Returns : CompositeByteBuf} isDirectBufferPooled{ Params :  Returns : boolean} calculateNewCapacity{ Params : int,int Returns : int} ,buffer buffer buffer ioBuffer ioBuffer ioBuffer heapBuffer heapBuffer heapBuffer directBuffer directBuffer directBuffer compositeBuffer compositeBuffer compositeHeapBuffer compositeHeapBuffer compositeDirectBuffer compositeDirectBuffer isDirectBufferPooled calculateNewCapacity ,,,,ByteBufAllocator ,,,,PartialPooledByteBufAllocator ,VertxByteBufAllocator.POOLED_ALLOCATOR: , minNewCapacity, maxCapacity
vert.x-master,io.vertx.core.buffer.impl,VertxByteBufAllocator,1,1,1,0,0,false,AbstractByteBufAllocator ,0 ,0 ,POOLED_ALLOCATOR: ByteBufAllocator UNPOOLED_ALLOCATOR: ByteBufAllocator UNSAFE_IMPL: VertxByteBufAllocator IMPL: VertxByteBufAllocator DEFAULT: VertxByteBufAllocator ,newHeapBuffer{ Params : int,int Returns : ByteBuf} newHeapBuffer{ Params : int,int Returns : ByteBuf} newDirectBuffer{ Params : int,int Returns : ByteBuf} isDirectBufferPooled{ Params :  Returns : boolean} ,newHeapBuffer newHeapBuffer newDirectBuffer isDirectBufferPooled ,,,,,,,,PooledByteBufAllocator UnpooledByteBufAllocator VertxByteBufAllocator VertxUnsafeHeapByteBuf VertxByteBufAllocator VertxHeapByteBuf ,UNPOOLED_ALLOCATOR: , initialCapacity, maxCapacity
vert.x-master,io.vertx.core.buffer.impl,VertxHeapByteBuf,1,0,0,0,1,false,UnpooledHeapByteBuf ,0 ,0 ,,retain{ Params : int Returns : ByteBuf} retain{ Params :  Returns : ByteBuf} touch{ Params :  Returns : ByteBuf} touch{ Params : Object Returns : ByteBuf} release{ Params :  Returns : boolean} release{ Params : int Returns : boolean} ,retain retain touch touch release release ,,,,,,,,,UNPOOLED_ALLOCATOR: , initialCapacity, maxCapacity
vert.x-master,io.vertx.core.buffer.impl,VertxUnsafeHeapByteBuf,1,0,0,0,1,false,UnpooledUnsafeHeapByteBuf ,0 ,0 ,,retain{ Params : int Returns : ByteBuf} retain{ Params :  Returns : ByteBuf} touch{ Params :  Returns : ByteBuf} touch{ Params : Object Returns : ByteBuf} release{ Params :  Returns : boolean} release{ Params : int Returns : boolean} ,retain retain touch touch release release ,,,,,,,,,UNPOOLED_ALLOCATOR: , initialCapacity, maxCapacity
vert.x-master,io.vertx.core.cli,AmbiguousOptionException,1,1,0,0,0,false,CLIException ,0 ,0 ,options: List<Option> token: String ,getOptions{ Params :  Returns : List<Option>} getToken{ Params :  Returns : String} ,,,,,,String ,,String ,,UNPOOLED_ALLOCATOR: , initialCapacity, maxCapacity
vert.x-master,io.vertx.core.cli.annotations,CLIConfigurator,1,1,0,0,0,false,0 ,0 ,0 ,,define{ Params : Class<?> Returns : CLI} createOption{ Params : Method Returns : io.vertx.core.cli.Option} createArgument{ Params : Method Returns : io.vertx.core.cli.Argument} getOptionValue{ Params : Method,String,CommandLine Returns : Object} getArgumentValue{ Params : Method,int,CommandLine Returns : Object} inject{ Params : CommandLine,Object Returns : void} createMultiValueContainer{ Params : Method,List<T> Returns : Object} ,,define createOption createArgument getOptionValue getArgumentValue inject createMultiValueContainer ,,,,,,,DefaultCLI IllegalArgumentException IllegalArgumentException TypedOption TypedArgument CLIException CLIException LinkedHashSet ,Collection.class: , type
vert.x-master,io.vertx.core.cli,Argument,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_ARG_NAME: String index: int argName: String description: String hidden: boolean required: boolean defaultValue: String multiValued: boolean ,toJson{ Params :  Returns : JsonObject} getArgName{ Params :  Returns : String} setArgName{ Params : String Returns : Argument} getDescription{ Params :  Returns : String} setDescription{ Params : String Returns : Argument} isHidden{ Params :  Returns : boolean} setHidden{ Params : boolean Returns : Argument} getIndex{ Params :  Returns : int} setIndex{ Params : int Returns : Argument} isRequired{ Params :  Returns : boolean} setRequired{ Params : boolean Returns : Argument} getDefaultValue{ Params :  Returns : String} setDefaultValue{ Params : String Returns : Argument} isMultiValued{ Params :  Returns : boolean} setMultiValued{ Params : boolean Returns : Argument} ensureValidity{ Params :  Returns : void} ,,,,,,,,,JsonObject IllegalArgumentException IllegalArgumentException ,Objects: , description
vert.x-master,io.vertx.core.cli,CLI,2,1,0,0,0,true,0 ,0 ,0 ,,create{ Params : String Returns : CLI} create{ Params : Class<?> Returns : CLI} parse{ Params : List<String> Returns : CommandLine} parse{ Params : List<String>,boolean Returns : CommandLine} getName{ Params :  Returns : String} setName{ Params : String Returns : CLI} getDescription{ Params :  Returns : String} setDescription{ Params : String Returns : CLI} getSummary{ Params :  Returns : String} setSummary{ Params : String Returns : CLI} isHidden{ Params :  Returns : boolean} setHidden{ Params : boolean Returns : CLI} getOptions{ Params :  Returns : List<Option>} addOption{ Params : Option Returns : CLI} addOptions{ Params : List<Option> Returns : CLI} setOptions{ Params : List<Option> Returns : CLI} getArguments{ Params :  Returns : List<Argument>} addArgument{ Params : Argument Returns : CLI} addArguments{ Params : List<Argument> Returns : CLI} setArguments{ Params : List<Argument> Returns : CLI} getOption{ Params : String Returns : Option} getArgument{ Params : String Returns : Argument} getArgument{ Params : int Returns : Argument} removeOption{ Params : String Returns : CLI} removeArgument{ Params : int Returns : CLI} usage{ Params : StringBuilder Returns : CLI} usage{ Params : StringBuilder,String Returns : CLI} getPriority{ Params :  Returns : int} setPriority{ Params : int Returns : CLI} ,,create create ,,,,,,,DefaultCLI ,CLIConfigurator: , clazz
vert.x-master,io.vertx.core.cli,CLIException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.cli,CommandLine,2,1,0,0,0,true,RuntimeException ,0 ,0 ,,create{ Params : CLI Returns : CommandLine} cli{ Params :  Returns : CLI} allArguments{ Params :  Returns : List<String>} getOptionValue{ Params : String Returns : T} getArgumentValue{ Params : String Returns : T} getArgumentValue{ Params : int Returns : T} getOptionValues{ Params : String Returns : List<T>} getArgumentValues{ Params : int Returns : List<T>} isFlagEnabled{ Params : String Returns : boolean} isOptionAssigned{ Params : Option Returns : boolean} getRawValues{ Params : Option Returns : List<String>} getRawValuesForOption{ Params : Option Returns : List<String>} getRawValuesForArgument{ Params : Argument Returns : List<String>} getRawValueForOption{ Params : Option Returns : String} acceptMoreValues{ Params : Option Returns : boolean} getRawValueForArgument{ Params : Argument Returns : String} isArgumentAssigned{ Params : Argument Returns : boolean} isSeenInCommandLine{ Params : Option Returns : boolean} isValid{ Params :  Returns : boolean} isAskingForHelp{ Params :  Returns : boolean} ,,create ,,,,,,,DefaultCommandLine ,: , option
vert.x-master,io.vertx.core.cli.converters,BooleanConverter,1,1,0,0,1,false,0 ,Converter<Boolean> ,0 ,INSTANCE: BooleanConverter TRUE: List<String> ,fromString{ Params : String Returns : Boolean} ,fromString ,,,,Converter ,,,,BooleanConverter ,value: 
vert.x-master,io.vertx.core.cli.converters,CharacterConverter,1,1,0,0,1,false,0 ,Converter<Character> ,0 ,INSTANCE: CharacterConverter ,fromString{ Params : String Returns : Character} ,fromString ,,,,Converter ,,,,CharacterConverter NullPointerException IllegalArgumentException ,input: 
vert.x-master,io.vertx.core.cli.converters,ConstructorBasedConverter,1,1,0,0,1,false,0 ,Converter<T> ,0 ,constructor: Constructor<T> ,getIfEligible{ Params : Class<T> Returns : ConstructorBasedConverter<T>} fromString{ Params : String Returns : T} ,fromString ,getIfEligible ,,,Converter ,Constructor<T> ,,Constructor<T> ,ConstructorBasedConverter IllegalArgumentException IllegalArgumentException ,e: 
vert.x-master,io.vertx.core.cli.converters,Converter,2,1,0,0,0,true,0 ,Converter<T> ,0 ,,fromString{ Params : String Returns : T} ,,,,,,,,,,e: 
vert.x-master,io.vertx.core.cli.converters,Converters,1,1,0,0,0,false,0 ,0 ,0 ,PRIMITIVE_TO_WRAPPER_TYPE: Map<Class<?>, Class<?>> WELL_KNOWN_CONVERTERS: Map<Class<?>, Converter<?>> ,create{ Params : Class<T>,String Returns : T} create{ Params : String,Converter<T> Returns : T} wrap{ Params : Class<T> Returns : Class<T>} getConverter{ Params : Class<T> Returns : Converter<T>} newInstance{ Params : Class<? extends Converter<T>> Returns : Converter<T>} ,,create create wrap getConverter newInstance ,,,,,,,HashMap HashMap NoSuchElementException IllegalArgumentException ,type: 
vert.x-master,io.vertx.core.cli.converters,FromBasedConverter,1,1,0,0,1,false,0 ,Converter<T> ,0 ,FROM: String method: Method clazz: Class<T> ,getIfEligible{ Params : Class<T> Returns : FromBasedConverter<T>} fromString{ Params : String Returns : T} ,fromString ,getIfEligible ,,,Converter ,Class<T> ,,Class<T> ,FromBasedConverter IllegalArgumentException IllegalArgumentException ,e: 
vert.x-master,io.vertx.core.cli.converters,FromStringBasedConverter,1,1,0,0,1,false,0 ,Converter<T> ,0 ,FROM_STRING: String method: Method clazz: Class<T> ,getIfEligible{ Params : Class<T> Returns : FromStringBasedConverter<T>} fromString{ Params : String Returns : T} ,fromString ,getIfEligible ,,,Converter ,Class<T> ,,Class<T> ,FromStringBasedConverter IllegalArgumentException IllegalArgumentException ,e: 
vert.x-master,io.vertx.core.cli.converters,ValueOfBasedConverter,1,1,0,0,1,false,0 ,Converter<T> ,0 ,VALUE_OF: String method: Method clazz: Class<T> ,getIfEligible{ Params : Class<T> Returns : ValueOfBasedConverter<T>} fromString{ Params : String Returns : T} ,fromString ,getIfEligible ,,,Converter ,Class<T> ,,Class<T> ,ValueOfBasedConverter IllegalArgumentException IllegalArgumentException ,e: 
vert.x-master,io.vertx.core.cli.impl,DefaultCLI,1,1,0,0,0,false,0 ,CLI ,0 ,name: String priority: int description: String summary: String hidden: boolean options: List<Option> arguments: List<Argument> ,parse{ Params : List<String> Returns : CommandLine} parse{ Params : List<String>,boolean Returns : CommandLine} getName{ Params :  Returns : String} setName{ Params : String Returns : CLI} getDescription{ Params :  Returns : String} setDescription{ Params : String Returns : CLI} getSummary{ Params :  Returns : String} setSummary{ Params : String Returns : CLI} isHidden{ Params :  Returns : boolean} setHidden{ Params : boolean Returns : CLI} getOptions{ Params :  Returns : List<Option>} addOption{ Params : Option Returns : CLI} addOptions{ Params : List<Option> Returns : CLI} setOptions{ Params : List<Option> Returns : CLI} getArguments{ Params :  Returns : List<Argument>} addArgument{ Params : Argument Returns : CLI} addArguments{ Params : List<Argument> Returns : CLI} setArguments{ Params : List<Argument> Returns : CLI} getOption{ Params : String Returns : Option} getArgument{ Params : String Returns : Argument} getArgument{ Params : int Returns : Argument} removeOption{ Params : String Returns : CLI} removeArgument{ Params : int Returns : CLI} usage{ Params : StringBuilder Returns : CLI} usage{ Params : StringBuilder,String Returns : CLI} getPriority{ Params :  Returns : int} setPriority{ Params : int Returns : CLI} ,parse parse getName setName getDescription setDescription getSummary setSummary isHidden setHidden getOptions addOption addOptions setOptions getArguments addArgument addArguments setArguments getOption getArgument getArgument removeOption removeArgument usage usage getPriority setPriority ,,,,CLI ,List<Argument> ,,List<Argument> ,ArrayList ArrayList DefaultParser DefaultParser IllegalArgumentException ArrayList ArrayList IllegalArgumentException TreeSet UsageMessageFormatter UsageMessageFormatter ,new UsageMessageFormatter(): , builder, prefix, this
vert.x-master,io.vertx.core.cli.impl,DefaultCommandLine,1,1,0,0,0,false,0 ,CommandLine ,0 ,cli: CLI allArgs: List<String> optionValues: Map<Option, List<String>> optionsSeenInCommandLine: List<Option> argumentValues: Map<Argument, List<String>> valid: boolean ,cli{ Params :  Returns : CLI} allArguments{ Params :  Returns : List<String>} addArgumentValue{ Params : String Returns : CommandLine} getOptionValue{ Params : String Returns : T} isFlagEnabled{ Params : String Returns : boolean} getOptionValues{ Params : String Returns : List<T>} getArgumentValues{ Params : int Returns : List<T>} getArgumentValue{ Params : String Returns : T} getArgumentValue{ Params : int Returns : T} isOptionAssigned{ Params : Option Returns : boolean} getRawValuesForOption{ Params : Option Returns : List<String>} getRawValuesForArgument{ Params : Argument Returns : List<String>} addRawValue{ Params : Option,String Returns : DefaultCommandLine} getRawValueForOption{ Params : Option Returns : String} acceptMoreValues{ Params : Option Returns : boolean} getRawValueForArgument{ Params : Argument Returns : String} setRawValue{ Params : Argument,String Returns : DefaultCommandLine} isArgumentAssigned{ Params : Argument Returns : boolean} setSeenInCommandLine{ Params : Option Returns : DefaultCommandLine} isSeenInCommandLine{ Params : Option Returns : boolean} getValue{ Params : TypedOption<T> Returns : T} isBoolean{ Params : TypedOption Returns : boolean} create{ Params : String,TypedArgument<T> Returns : T} create{ Params : String,TypedOption<T> Returns : T} createFromList{ Params : String,TypedOption<T> Returns : List<T>} isValid{ Params :  Returns : boolean} setValidity{ Params : boolean Returns : void} isAskingForHelp{ Params :  Returns : boolean} ,cli allArguments getOptionValue isFlagEnabled getOptionValues getArgumentValues getArgumentValue getArgumentValue isOptionAssigned getRawValuesForOption getRawValuesForArgument getRawValueForOption acceptMoreValues getRawValueForArgument isArgumentAssigned isSeenInCommandLine isValid isAskingForHelp ,create create createFromList ,,,CommandLine ,,,,ArrayList HashMap ArrayList HashMap IllegalArgumentException IllegalStateException CLIException InvalidValueException ArrayList ArrayList IllegalArgumentException InvalidValueException InvalidValueException ,: , option
vert.x-master,io.vertx.core.cli.impl,DefaultParser,1,1,0,0,0,false,0 ,0 ,0 ,token: String current: Option expectedOpts: List<Option> commandLine: DefaultCommandLine skipParsing: boolean cli: CLI ,stripLeadingHyphens{ Params : String Returns : String} stripLeadingAndTrailingQuotes{ Params : String Returns : String} parse{ Params : CLI,List<String> Returns : CommandLine} parse{ Params : CLI,List<String>,boolean Returns : CommandLine} validate{ Params :  Returns : void} getRequiredOptions{ Params :  Returns : List<Option>} checkRequiredOptions{ Params :  Returns : void} checkRequiredValues{ Params :  Returns : void} visit{ Params : String Returns : void} isValue{ Params : String Returns : boolean} isNegativeNumber{ Params : String Returns : boolean} isOption{ Params : String Returns : boolean} isShortOption{ Params : String Returns : boolean} isLongOption{ Params : String Returns : boolean} handleArgument{ Params : String Returns : void} handleLongOption{ Params : String Returns : void} handleLongOptionWithoutEqual{ Params : String Returns : void} handleLongOptionWithEqual{ Params : String Returns : void} handleShortAndLongOption{ Params : String Returns : void} getLongPrefix{ Params : String Returns : String} hasOptionWithLongName{ Params : String Returns : boolean} hasOptionWithShortName{ Params : String Returns : boolean} handleOption{ Params : Option Returns : void} updateRequiredOptions{ Params : Option Returns : void} getOption{ Params : String Returns : Option} isAValidShortOption{ Params : String Returns : boolean} getMatchingOptions{ Params : String Returns : List<Option>} handleConcatenatedOptions{ Params : String Returns : void} ,,stripLeadingHyphens stripLeadingAndTrailingQuotes ,,,,CLI ,,CLI ,ArrayList CLIException CLIException MissingValueException MissingOptionException MissingValueException AmbiguousOptionException AmbiguousOptionException InvalidValueException InvalidValueException InvalidValueException ArrayList ,: , token
vert.x-master,io.vertx.core.cli.impl,ReflectionUtils,1,1,0,0,0,false,0 ,0 ,0 ,,newInstance{ Params : Class<T> Returns : T} isSetter{ Params : Method Returns : boolean} getSetterMethods{ Params : Class<?> Returns : List<Method>} isMultiple{ Params : Method Returns : boolean} getComponentType{ Params : Parameter Returns : Class} ,,newInstance isSetter getSetterMethods isMultiple getComponentType ,,,,,,,IllegalArgumentException ,parameter: 
vert.x-master,io.vertx.core.cli,InvalidValueException,1,1,0,0,0,false,CLIException ,0 ,0 ,option: Option argument: Argument value: String ,getOption{ Params :  Returns : Option} getValue{ Params :  Returns : String} getArgument{ Params :  Returns : Argument} ,,,,,,String ,,String ,,parameter: 
vert.x-master,io.vertx.core.cli,MissingOptionException,1,1,0,0,0,false,CLIException ,0 ,0 ,expected: Collection<Option> ,getExpected{ Params :  Returns : Collection<Option>} ,,,,,,Collection<Option> ,,Collection<Option> ,,parameter: 
vert.x-master,io.vertx.core.cli,MissingValueException,1,1,0,0,0,false,CLIException ,0 ,0 ,option: Option argument: Argument ,getOption{ Params :  Returns : Option} getArgument{ Params :  Returns : Argument} ,,,,,,Argument ,,Argument ,,parameter: 
vert.x-master,io.vertx.core.cli,Option,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_ARG_NAME: String NO_NAME: String longName: String shortName: String argName: String description: String required: boolean hidden: boolean singleValued: boolean multiValued: boolean defaultValue: String flag: boolean help: boolean choices: Set<String> ,toJson{ Params :  Returns : JsonObject} ensureValidity{ Params :  Returns : void} acceptValue{ Params :  Returns : boolean} getName{ Params :  Returns : String} isMultiValued{ Params :  Returns : boolean} setMultiValued{ Params : boolean Returns : Option} isSingleValued{ Params :  Returns : boolean} setSingleValued{ Params : boolean Returns : Option} getArgName{ Params :  Returns : String} setArgName{ Params : String Returns : Option} getDescription{ Params :  Returns : String} setDescription{ Params : String Returns : Option} isHidden{ Params :  Returns : boolean} setHidden{ Params : boolean Returns : Option} getLongName{ Params :  Returns : String} setLongName{ Params : String Returns : Option} isRequired{ Params :  Returns : boolean} setRequired{ Params : boolean Returns : Option} getShortName{ Params :  Returns : String} setShortName{ Params : String Returns : Option} getDefaultValue{ Params :  Returns : String} setDefaultValue{ Params : String Returns : Option} isFlag{ Params :  Returns : boolean} setFlag{ Params : boolean Returns : Option} isHelp{ Params :  Returns : boolean} setHelp{ Params : boolean Returns : Option} getChoices{ Params :  Returns : Set<String>} setChoices{ Params : Set<String> Returns : Option} addChoice{ Params : String Returns : Option} ,,,,,,,,,TreeSet JsonObject IllegalArgumentException ,this.choices: , choice
vert.x-master,io.vertx.core.cli,TypedArgument,1,1,0,0,0,false,Argument ,0 ,0 ,type: Class<T> converter: Converter<T> ,getType{ Params :  Returns : Class<T>} setType{ Params : Class<T> Returns : TypedArgument<T>} getConverter{ Params :  Returns : Converter<T>} setConverter{ Params : Converter<T> Returns : TypedArgument<T>} ensureValidity{ Params :  Returns : void} setArgName{ Params : String Returns : TypedArgument<T>} setDefaultValue{ Params : String Returns : TypedArgument<T>} setDescription{ Params : String Returns : TypedArgument<T>} setHidden{ Params : boolean Returns : TypedArgument<T>} setIndex{ Params : int Returns : TypedArgument<T>} setRequired{ Params : boolean Returns : TypedArgument<T>} setMultiValued{ Params : boolean Returns : TypedArgument<T>} ,ensureValidity setArgName setDefaultValue setDescription setHidden setIndex setRequired setMultiValued ,,,,,,,,IllegalArgumentException ,super: , multiValued
vert.x-master,io.vertx.core.cli,TypedOption,1,1,0,0,0,false,Option ,0 ,0 ,type: Class<T> parsedAsList: boolean listSeparator: String converter: Converter<T> ,setMultiValued{ Params : boolean Returns : TypedOption<T>} setSingleValued{ Params : boolean Returns : TypedOption<T>} setArgName{ Params : String Returns : TypedOption<T>} setDefaultValue{ Params : String Returns : TypedOption<T>} setDescription{ Params : String Returns : TypedOption<T>} setFlag{ Params : boolean Returns : TypedOption<T>} setHidden{ Params : boolean Returns : TypedOption<T>} setLongName{ Params : String Returns : TypedOption<T>} setRequired{ Params : boolean Returns : TypedOption<T>} setShortName{ Params : String Returns : TypedOption<T>} getType{ Params :  Returns : Class<T>} setType{ Params : Class<T> Returns : TypedOption<T>} isParsedAsList{ Params :  Returns : boolean} setParsedAsList{ Params : boolean Returns : TypedOption<T>} getListSeparator{ Params :  Returns : String} setListSeparator{ Params : String Returns : TypedOption<T>} getConverter{ Params :  Returns : Converter<T>} setConverter{ Params : Converter<T> Returns : TypedOption<T>} ensureValidity{ Params :  Returns : void} setChoices{ Params : Set<String> Returns : TypedOption<T>} addChoice{ Params : String Returns : TypedOption<T>} setChoicesFromEnumType{ Params :  Returns : void} ,setMultiValued setSingleValued setArgName setDefaultValue setDescription setFlag setHidden setLongName setRequired setShortName ensureValidity setChoices addChoice ,,,,,,,,IllegalArgumentException ,c: 
vert.x-master,io.vertx.core.cli,UsageMessageFormatter,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_WIDTH: int DEFAULT_LEFT_PAD: int DEFAULT_DESC_PAD: int DEFAULT_USAGE_PREFIX: String DEFAULT_OPT_PREFIX: String DEFAULT_LONG_OPT_PREFIX: String DEFAULT_LONG_OPT_SEPARATOR: String DEFAULT_ARG_NAME: String width: int leftPad: int descPad: int usagePrefix: String newLine: String defaultOptionPrefix: String defaultLongOptPrefix: String defaultArgName: String longOptSeparator: String optionComparator: Comparator<Option> ,setWidth{ Params : int Returns : void} getWidth{ Params :  Returns : int} setLeftPadding{ Params : int Returns : void} getLeftPadding{ Params :  Returns : int} setDescPadding{ Params : int Returns : void} getDescPadding{ Params :  Returns : int} setUsagePrefix{ Params : String Returns : void} getUsagePrefix{ Params :  Returns : String} setNewLine{ Params : String Returns : void} getNewLine{ Params :  Returns : String} setOptionPrefix{ Params : String Returns : void} getOptionPrefix{ Params :  Returns : String} setLongOptionPrefix{ Params : String Returns : void} getLongOptionPrefix{ Params :  Returns : String} setLongOptionSeparator{ Params : String Returns : void} getLongOptionSeparator{ Params :  Returns : String} setArgName{ Params : String Returns : void} getArgName{ Params :  Returns : String} getOptionComparator{ Params :  Returns : Comparator<Option>} setOptionComparator{ Params : Comparator<Option> Returns : void} appendOption{ Params : StringBuilder,Option Returns : void} appendArgument{ Params : StringBuilder,Argument,boolean Returns : void} usage{ Params : StringBuilder,CLI Returns : void} usage{ Params : StringBuilder,String,CLI Returns : void} computeUsage{ Params : StringBuilder,String Returns : void} computeUsageLine{ Params : StringBuilder,String,CLI Returns : void} computeOptionsAndArguments{ Params : StringBuilder,List<Option>,List<Argument> Returns : void} buildWrapped{ Params : StringBuilder,String Returns : void} buildWrapped{ Params : StringBuilder,int,String Returns : void} renderCommands{ Params : StringBuilder,Collection<CLI> Returns : StringBuilder} isNullOrEmpty{ Params : String Returns : boolean} renderOptionsAndArguments{ Params : StringBuilder,List<Option>,List<Argument> Returns : StringBuilder} renderWrappedText{ Params : StringBuilder,int,int,String Returns : StringBuilder} renderWrappedTextBlock{ Params : StringBuilder,int,int,String Returns : Appendable} findWrapPos{ Params : String,int,int Returns : int} createPadding{ Params : int Returns : String} rtrim{ Params : String Returns : String} ,,isNullOrEmpty findWrapPos createPadding rtrim ,,,,,,,StringBuilder StringBuilder ArrayList StringBuilder StringBuilder ArrayList StringBuilder StringBuilder StringBuilder StringBuilder BufferedReader StringReader String ,s: , 0, pos
vert.x-master,io.vertx.core,Closeable,2,1,0,0,0,true,0 ,0 ,0 ,,close{ Params : Promise<Void> Returns : void} ,,,,,,,,,,s: , 0, pos
vert.x-master,io.vertx.core,CompositeFuture,2,1,0,0,0,true,0 ,0 ,0 ,,all{ Params : Future<?>,Future<?> Returns : CompositeFuture} all{ Params : Future<?>,Future<?>,Future<?> Returns : CompositeFuture} all{ Params : Future<?>,Future<?>,Future<?>,Future<?> Returns : CompositeFuture} all{ Params : Future<?>,Future<?>,Future<?>,Future<?>,Future<?> Returns : CompositeFuture} all{ Params : Future<?>,Future<?>,Future<?>,Future<?>,Future<?>,Future<?> Returns : CompositeFuture} all{ Params : List<? extends Future<?>> Returns : CompositeFuture} any{ Params : Future<?>,Future<?> Returns : CompositeFuture} any{ Params : Future<?>,Future<?>,Future<?> Returns : CompositeFuture} any{ Params : Future<?>,Future<?>,Future<?>,Future<?> Returns : CompositeFuture} any{ Params : Future<?>,Future<?>,Future<?>,Future<?>,Future<?> Returns : CompositeFuture} any{ Params : Future<?>,Future<?>,Future<?>,Future<?>,Future<?>,Future<?> Returns : CompositeFuture} any{ Params : List<? extends Future<?>> Returns : CompositeFuture} join{ Params : Future<?>,Future<?> Returns : CompositeFuture} join{ Params : Future<?>,Future<?>,Future<?> Returns : CompositeFuture} join{ Params : Future<?>,Future<?>,Future<?>,Future<?> Returns : CompositeFuture} join{ Params : Future<?>,Future<?>,Future<?>,Future<?>,Future<?> Returns : CompositeFuture} join{ Params : Future<?>,Future<?>,Future<?>,Future<?>,Future<?>,Future<?> Returns : CompositeFuture} join{ Params : List<? extends Future<?>> Returns : CompositeFuture} onComplete{ Params : Handler<AsyncResult<CompositeFuture>> Returns : CompositeFuture} onSuccess{ Params : Handler<CompositeFuture> Returns : CompositeFuture} onFailure{ Params : Handler<Throwable> Returns : CompositeFuture} cause{ Params : int Returns : Throwable} succeeded{ Params : int Returns : boolean} failed{ Params : int Returns : boolean} isComplete{ Params : int Returns : boolean} resultAt{ Params : int Returns : T} size{ Params :  Returns : int} list{ Params :  Returns : List<T>} causes{ Params :  Returns : List<Throwable>} ,onComplete onSuccess onFailure ,all all all all all all any any any any any any join join join join join join ,,,,,,,ArrayList ArrayList ,: , index
vert.x-master,io.vertx.core,Context,2,1,0,0,0,true,0 ,0 ,0 ,,isOnWorkerThread{ Params :  Returns : boolean} isOnEventLoopThread{ Params :  Returns : boolean} isOnVertxThread{ Params :  Returns : boolean} runOnContext{ Params : Handler<Void> Returns : void} executeBlocking{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} executeBlocking{ Params : Handler<Promise<T>> Returns : Future<T>} deploymentID{ Params :  Returns : String} config{ Params :  Returns : JsonObject} processArgs{ Params :  Returns : List<String>} isEventLoopContext{ Params :  Returns : boolean} isWorkerContext{ Params :  Returns : boolean} get{ Params : Object Returns : T} put{ Params : Object,Object Returns : void} remove{ Params : Object Returns : boolean} getLocal{ Params : Object Returns : T} putLocal{ Params : Object,Object Returns : void} removeLocal{ Params : Object Returns : boolean} owner{ Params :  Returns : Vertx} getInstanceCount{ Params :  Returns : int} exceptionHandler{ Params : Handler<Throwable> Returns : Context} exceptionHandler{ Params :  Returns : Handler<Throwable>} ,,isOnWorkerThread isOnEventLoopThread isOnVertxThread ,,,,,,,,VertxCommandLauncher: 
vert.x-master,io.vertx.core.datagram,DatagramPacket,2,1,0,0,0,true,0 ,0 ,0 ,,sender{ Params :  Returns : SocketAddress} data{ Params :  Returns : Buffer} ,,,,,,,,,,VertxCommandLauncher: 
vert.x-master,io.vertx.core.datagram,DatagramSocket,2,1,0,0,0,true,0 ,0 ,0 ,,send{ Params : Buffer,int,String Returns : Future<Void>} sender{ Params : int,String Returns : WriteStream<Buffer>} send{ Params : String,int,String Returns : Future<Void>} send{ Params : String,String,int,String Returns : Future<Void>} close{ Params :  Returns : Future<Void>} localAddress{ Params :  Returns : SocketAddress} listenMulticastGroup{ Params : String Returns : Future<Void>} listenMulticastGroup{ Params : String,String,String Returns : Future<Void>} unlistenMulticastGroup{ Params : String Returns : Future<Void>} unlistenMulticastGroup{ Params : String,String,String Returns : Future<Void>} blockMulticastGroup{ Params : String,String Returns : Future<Void>} blockMulticastGroup{ Params : String,String,String Returns : Future<Void>} listen{ Params : int,String Returns : Future<DatagramSocket>} handler{ Params : Handler<DatagramPacket> Returns : DatagramSocket} exceptionHandler{ Params : Handler<Throwable> Returns : DatagramSocket} ,,,,,,,,,,VertxCommandLauncher: 
vert.x-master,io.vertx.core.datagram,DatagramSocketOptions,1,1,0,0,0,false,NetworkOptions ,0 ,0 ,DEFAULT_BROADCAST: boolean DEFAULT_LOOPBACK_MODE_DISABLED: boolean DEFAULT_MULTICAST_TIME_TO_LIVE: int DEFAULT_MULTICAST_NETWORK_INTERFACE: String DEFAULT_REUSE_ADDRESS: boolean DEFAULT_IPV6: boolean broadcast: boolean loopbackModeDisabled: boolean multicastTimeToLive: int multicastNetworkInterface: String ipV6: boolean ,init{ Params :  Returns : void} getSendBufferSize{ Params :  Returns : int} setSendBufferSize{ Params : int Returns : DatagramSocketOptions} getReceiveBufferSize{ Params :  Returns : int} setReceiveBufferSize{ Params : int Returns : DatagramSocketOptions} setReuseAddress{ Params : boolean Returns : DatagramSocketOptions} setReusePort{ Params : boolean Returns : DatagramSocketOptions} getTrafficClass{ Params :  Returns : int} setTrafficClass{ Params : int Returns : DatagramSocketOptions} isBroadcast{ Params :  Returns : boolean} setBroadcast{ Params : boolean Returns : DatagramSocketOptions} isLoopbackModeDisabled{ Params :  Returns : boolean} setLoopbackModeDisabled{ Params : boolean Returns : DatagramSocketOptions} getMulticastTimeToLive{ Params :  Returns : int} setMulticastTimeToLive{ Params : int Returns : DatagramSocketOptions} getMulticastNetworkInterface{ Params :  Returns : String} setMulticastNetworkInterface{ Params : String Returns : DatagramSocketOptions} isIpV6{ Params :  Returns : boolean} setIpV6{ Params : boolean Returns : DatagramSocketOptions} setLogActivity{ Params : boolean Returns : DatagramSocketOptions} setActivityLogDataFormat{ Params : ByteBufFormat Returns : DatagramSocketOptions} ,getSendBufferSize setSendBufferSize getReceiveBufferSize setReceiveBufferSize setReuseAddress setReusePort getTrafficClass setTrafficClass setLogActivity setActivityLogDataFormat ,,,,,boolean ,,boolean ,,super: , activityLogDataFormat
vert.x-master,io.vertx.core.datagram.impl,DatagramPacketImpl,1,0,0,0,1,false,0 ,DatagramPacket ,0 ,sender: InetSocketAddress buffer: Buffer senderAddress: SocketAddress ,sender{ Params :  Returns : SocketAddress} data{ Params :  Returns : Buffer} ,sender data ,,,,DatagramPacket ,SocketAddress ,,SocketAddress ,,SocketAddress: , sender
vert.x-master,io.vertx.core.datagram.impl,DatagramSocketImpl,1,1,0,0,0,false,0 ,DatagramSocket MetricsProvider Closeable ,Connection ,context: ContextInternal metrics: DatagramSocketMetrics channel: DatagramChannel packetHandler: Handler<io.vertx.core.datagram.DatagramPacket> exceptionHandler: Handler<Throwable> closeFuture: CloseFuture ,create{ Params : VertxInternal,CloseFuture,DatagramSocketOptions Returns : DatagramSocketImpl} init{ Params :  Returns : void} determineMulticastNetworkIface{ Params :  Returns : NetworkInterface} listenMulticastGroup{ Params : String Returns : Future<Void>} listenMulticastGroup{ Params : String,String,String Returns : Future<Void>} unlistenMulticastGroup{ Params : String Returns : Future<Void>} unlistenMulticastGroup{ Params : String,String,String Returns : Future<Void>} blockMulticastGroup{ Params : String,String,String Returns : Future<Void>} blockMulticastGroup{ Params : String,String Returns : Future<Void>} listen{ Params : int,String Returns : Future<DatagramSocket>} handler{ Params : Handler<io.vertx.core.datagram.DatagramPacket> Returns : DatagramSocket} exceptionHandler{ Params : Handler<Throwable> Returns : DatagramSocketImpl} listen{ Params : SocketAddress Returns : Future<DatagramSocket>} send{ Params : Buffer,int,String Returns : Future<Void>} sender{ Params : int,String Returns : WriteStream<Buffer>} send{ Params : String,int,String Returns : Future<Void>} send{ Params : String,String,int,String Returns : Future<Void>} localAddress{ Params :  Returns : SocketAddress} close{ Params :  Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : Metrics} createConnection{ Params : ChannelHandlerContext Returns : Connection} metrics{ Params :  Returns : NetworkMetrics} handleInterestedOpsChanged{ Params :  Returns : void} handleException{ Params : Throwable Returns : void} handleClosed{ Params :  Returns : void} handleMessage{ Params : Object Returns : void} handlePacket{ Params : io.vertx.core.datagram.DatagramPacket Returns : void} ,listenMulticastGroup listenMulticastGroup unlistenMulticastGroup unlistenMulticastGroup blockMulticastGroup blockMulticastGroup listen handler exceptionHandler send sender send send localAddress close close isMetricsEnabled getMetrics metrics handleInterestedOpsChanged handleException handleClosed ,create ,,,DatagramSocket MetricsProvider Closeable ,CloseFuture ,,CloseFuture ,DatagramSocketImpl DatagramSocketOptions LoggingHandler InetSocketAddress IllegalArgumentException DatagramPacket InetSocketAddress PacketWriteStreamImpl Connection DatagramPacketImpl ,future: , (PromiseInternal<Void>) completion
vert.x-master,io.vertx.core.datagram.impl,Connection,3,0,0,0,0,false,0 ,DatagramSocket MetricsProvider Closeable ,Connection ,,create{ Params : VertxInternal,CloseFuture,DatagramSocketOptions Returns : DatagramSocketImpl} init{ Params :  Returns : void} determineMulticastNetworkIface{ Params :  Returns : NetworkInterface} listenMulticastGroup{ Params : String Returns : Future<Void>} listenMulticastGroup{ Params : String,String,String Returns : Future<Void>} unlistenMulticastGroup{ Params : String Returns : Future<Void>} unlistenMulticastGroup{ Params : String,String,String Returns : Future<Void>} blockMulticastGroup{ Params : String,String,String Returns : Future<Void>} blockMulticastGroup{ Params : String,String Returns : Future<Void>} listen{ Params : int,String Returns : Future<DatagramSocket>} handler{ Params : Handler<io.vertx.core.datagram.DatagramPacket> Returns : DatagramSocket} exceptionHandler{ Params : Handler<Throwable> Returns : DatagramSocketImpl} listen{ Params : SocketAddress Returns : Future<DatagramSocket>} send{ Params : Buffer,int,String Returns : Future<Void>} sender{ Params : int,String Returns : WriteStream<Buffer>} send{ Params : String,int,String Returns : Future<Void>} send{ Params : String,String,int,String Returns : Future<Void>} localAddress{ Params :  Returns : SocketAddress} close{ Params :  Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : Metrics} createConnection{ Params : ChannelHandlerContext Returns : Connection} metrics{ Params :  Returns : NetworkMetrics} handleInterestedOpsChanged{ Params :  Returns : void} handleException{ Params : Throwable Returns : void} handleClosed{ Params :  Returns : void} handleMessage{ Params : Object Returns : void} handlePacket{ Params : io.vertx.core.datagram.DatagramPacket Returns : void} ,listenMulticastGroup listenMulticastGroup unlistenMulticastGroup unlistenMulticastGroup blockMulticastGroup blockMulticastGroup listen handler exceptionHandler send sender send send localAddress close close isMetricsEnabled getMetrics metrics handleInterestedOpsChanged handleException handleClosed ,create ,,,,,,,DatagramPacketImpl ,context: , packet, handler
vert.x-master,io.vertx.core.datagram.impl,PacketWriteStreamImpl,1,0,0,0,0,false,0 ,WriteStream<Buffer> Handler<AsyncResult<Void>> ,0 ,datagramSocket: DatagramSocketImpl exceptionHandler: Handler<Throwable> port: int host: String ,handle{ Params : AsyncResult<Void> Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : PacketWriteStreamImpl} write{ Params : Buffer Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : PacketWriteStreamImpl} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : PacketWriteStreamImpl} end{ Params :  Returns : Future<Void>} ,handle exceptionHandler write setWriteQueueMaxSize writeQueueFull drainHandler end ,,,,WriteStream Handler ,String ,,String ,,promise: 
vert.x-master,io.vertx.core,DeploymentOptions,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_WORKER: boolean DEFAULT_HA: boolean DEFAULT_INSTANCES: int config: JsonObject worker: boolean workerPoolName: String workerPoolSize: int maxWorkerExecuteTime: long ha: boolean instances: int maxWorkerExecuteTimeUnit: TimeUnit classLoader: ClassLoader ,fromJson{ Params : JsonObject Returns : void} getConfig{ Params :  Returns : JsonObject} setConfig{ Params : JsonObject Returns : DeploymentOptions} isWorker{ Params :  Returns : boolean} setWorker{ Params : boolean Returns : DeploymentOptions} isHa{ Params :  Returns : boolean} setHa{ Params : boolean Returns : DeploymentOptions} getInstances{ Params :  Returns : int} setInstances{ Params : int Returns : DeploymentOptions} getWorkerPoolName{ Params :  Returns : String} setWorkerPoolName{ Params : String Returns : DeploymentOptions} getWorkerPoolSize{ Params :  Returns : int} setWorkerPoolSize{ Params : int Returns : DeploymentOptions} getMaxWorkerExecuteTime{ Params :  Returns : long} setMaxWorkerExecuteTime{ Params : long Returns : DeploymentOptions} getMaxWorkerExecuteTimeUnit{ Params :  Returns : TimeUnit} setMaxWorkerExecuteTimeUnit{ Params : TimeUnit Returns : DeploymentOptions} getClassLoader{ Params :  Returns : ClassLoader} setClassLoader{ Params : ClassLoader Returns : DeploymentOptions} checkIsolationNotDefined{ Params :  Returns : void} toJson{ Params :  Returns : JsonObject} ,,,,,,ClassLoader ,,ClassLoader ,IllegalArgumentException IllegalArgumentException JsonObject ,DeploymentOptionsConverter: , this, json
vert.x-master,io.vertx.core.dns,AddressResolverOptions,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_SERVERS: List<String> DEFAULT_OPT_RESOURCE_ENABLED: boolean DEFAULT_CACHE_MIN_TIME_TO_LIVE: int DEFAULT_CACHE_MAX_TIME_TO_LIVE: int DEFAULT_CACHE_NEGATIVE_TIME_TO_LIVE: int DEFAULT_QUERY_TIMEOUT: int DEFAULT_MAX_QUERIES: int DEFAULT_RD_FLAG: boolean DEFAULT_SEACH_DOMAINS: List<String> DEFAULT_NDOTS: int DEFAULT_ROTATE_SERVERS: boolean DEFAULT_ROUND_ROBIN_INET_ADDRESS: boolean hostsPath: String hostsValue: Buffer servers: List<String> optResourceEnabled: boolean cacheMinTimeToLive: int cacheMaxTimeToLive: int cacheNegativeTimeToLive: int queryTimeout: long maxQueries: int rdFlag: boolean searchDomains: List<String> ndots: int rotateServers: boolean roundRobinInetAddress: boolean ,getHostsPath{ Params :  Returns : String} setHostsPath{ Params : String Returns : AddressResolverOptions} getHostsValue{ Params :  Returns : Buffer} setHostsValue{ Params : Buffer Returns : AddressResolverOptions} getServers{ Params :  Returns : List<String>} setServers{ Params : List<String> Returns : AddressResolverOptions} addServer{ Params : String Returns : AddressResolverOptions} isOptResourceEnabled{ Params :  Returns : boolean} setOptResourceEnabled{ Params : boolean Returns : AddressResolverOptions} getCacheMinTimeToLive{ Params :  Returns : int} setCacheMinTimeToLive{ Params : int Returns : AddressResolverOptions} getCacheMaxTimeToLive{ Params :  Returns : int} setCacheMaxTimeToLive{ Params : int Returns : AddressResolverOptions} getCacheNegativeTimeToLive{ Params :  Returns : int} setCacheNegativeTimeToLive{ Params : int Returns : AddressResolverOptions} getQueryTimeout{ Params :  Returns : long} setQueryTimeout{ Params : long Returns : AddressResolverOptions} getMaxQueries{ Params :  Returns : int} setMaxQueries{ Params : int Returns : AddressResolverOptions} getRdFlag{ Params :  Returns : boolean} setRdFlag{ Params : boolean Returns : AddressResolverOptions} getSearchDomains{ Params :  Returns : List<String>} setSearchDomains{ Params : List<String> Returns : AddressResolverOptions} addSearchDomain{ Params : String Returns : AddressResolverOptions} getNdots{ Params :  Returns : int} setNdots{ Params : int Returns : AddressResolverOptions} isRotateServers{ Params :  Returns : boolean} setRotateServers{ Params : boolean Returns : AddressResolverOptions} isRoundRobinInetAddress{ Params :  Returns : boolean} setRoundRobinInetAddress{ Params : boolean Returns : AddressResolverOptions} toJson{ Params :  Returns : JsonObject} ,,,,,,boolean ,,boolean ,ArrayList ArrayList ArrayList IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException ArrayList IllegalArgumentException JsonObject ,AddressResolverOptionsConverter: , this, json
vert.x-master,io.vertx.core.dns,DnsClient,2,1,0,0,0,true,0 ,0 ,0 ,,lookup{ Params : String Returns : Future<String>} lookup4{ Params : String Returns : Future<String>} lookup6{ Params : String Returns : Future<String>} resolveA{ Params : String Returns : Future<List<String>>} resolveAAAA{ Params : String Returns : Future<List<String>>} resolveCNAME{ Params : String Returns : Future<List<String>>} resolveMX{ Params : String Returns : Future<List<MxRecord>>} resolveTXT{ Params : String Returns : Future<List<String>>} resolvePTR{ Params : String Returns : Future<String>} resolveNS{ Params : String Returns : Future<List<String>>} resolveSRV{ Params : String Returns : Future<List<SrvRecord>>} reverseLookup{ Params : String Returns : Future<String>} ,,,,,,,,,,AddressResolverOptionsConverter: , this, json
vert.x-master,io.vertx.core.dns,DnsClientOptions,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_PORT: int DEFAULT_HOST: String DEFAULT_QUERY_TIMEOUT: long DEFAULT_LOG_ENABLED: boolean DEFAULT_LOG_ACTIVITY_FORMAT: ByteBufFormat DEFAULT_RECURSION_DESIRED: boolean port: int host: String queryTimeout: long logActivity: boolean activityLogFormat: ByteBufFormat recursionDesired: boolean ,getPort{ Params :  Returns : int} setPort{ Params : int Returns : DnsClientOptions} getHost{ Params :  Returns : String} setHost{ Params : String Returns : DnsClientOptions} getQueryTimeout{ Params :  Returns : long} setQueryTimeout{ Params : long Returns : DnsClientOptions} getLogActivity{ Params :  Returns : boolean} getActivityLogFormat{ Params :  Returns : ByteBufFormat} setLogActivity{ Params : boolean Returns : DnsClientOptions} setActivityLogFormat{ Params : ByteBufFormat Returns : DnsClientOptions} isRecursionDesired{ Params :  Returns : boolean} setRecursionDesired{ Params : boolean Returns : DnsClientOptions} toJson{ Params :  Returns : JsonObject} ,,,,,,boolean ,,boolean ,IllegalArgumentException IllegalArgumentException JsonObject ,DnsClientOptionsConverter: , this, json
vert.x-master,io.vertx.core.dns,DnsException,1,1,0,0,1,false,NoStackTraceThrowable ,0 ,0 ,ERROR_MESSAGE_PREFIX: String code: DnsResponseCode ,code{ Params :  Returns : DnsResponseCode} ,,,,,,DnsResponseCode ,,DnsResponseCode ,,DnsClientOptionsConverter: , this, json
vert.x-master,io.vertx.core.dns.impl.decoder,RecordDecoder,1,1,0,0,0,false,0 ,0 ,0 ,log: Logger MX: Function<DnsRecord, MxRecordImpl> DOMAIN: Function<DnsRecord, String> A: Function<DnsRecord, String> AAAA: Function<DnsRecord, String> SRV: Function<DnsRecord, SrvRecordImpl> SOA: Function<DnsRecord, StartOfAuthorityRecord> TXT: Function<DnsRecord, List<String>> decoders: Map<DnsRecordType, Function<DnsRecord, ?>> ,address{ Params : int Returns : Function<DnsRecord,String>} readName{ Params : ByteBuf Returns : String} getName{ Params : ByteBuf,int Returns : String} decode{ Params : DnsRecord Returns : T} ,,address readName getName decode ,,,,,,,MxRecordImpl SrvRecordImpl StartOfAuthorityRecord ArrayList DecoderException DecoderException StringBuilder StringBuilder HashMap IllegalStateException ,e: 
vert.x-master,io.vertx.core.dns.impl.decoder,StartOfAuthorityRecord,1,1,0,0,0,false,0 ,0 ,0 ,primaryNameServer: String responsiblePerson: String serial: long refreshTime: int retryTime: int expireTime: int minimumTtl: long ,primaryNameServer{ Params :  Returns : String} responsiblePerson{ Params :  Returns : String} serial{ Params :  Returns : long} refreshTime{ Params :  Returns : int} retryTime{ Params :  Returns : int} expireTime{ Params :  Returns : int} minimumTtl{ Params :  Returns : long} ,,,,,,long ,,long ,,e: 
vert.x-master,io.vertx.core.dns.impl,DnsClientImpl,1,1,0,0,1,false,0 ,DnsClient ,Query ,HEX_TABLE: char vertx: VertxInternal inProgressMap: LongObjectMap<Query> dnsServer: InetSocketAddress actualCtx: ContextInternal channel: DatagramChannel options: DnsClientOptions ,channelRead0{ Params : ChannelHandlerContext,DnsResponse Returns : void} lookup4{ Params : String Returns : Future<String>} lookup6{ Params : String Returns : Future<String>} lookup{ Params : String Returns : Future<String>} resolveA{ Params : String Returns : Future<List<String>>} resolveCNAME{ Params : String Returns : Future<List<String>>} resolveMX{ Params : String Returns : Future<List<MxRecord>>} resolveTXT{ Params : String Returns : Future<List<String>>} resolvePTR{ Params : String Returns : Future<String>} resolveAAAA{ Params : String Returns : Future<List<String>>} resolveNS{ Params : String Returns : Future<List<String>>} resolveSRV{ Params : String Returns : Future<List<SrvRecord>>} reverseLookup{ Params : String Returns : Future<String>} lookupSingle{ Params : String,DnsRecordType Returns : Future<T>} lookupList{ Params : String,DnsRecordType Returns : Future<List<T>>} dnsMessageId{ Params : int,String Returns : long} inProgressQueries{ Params : Handler<Integer> Returns : void} fail{ Params : Throwable Returns : void} handle{ Params : DnsResponse Returns : void} run{ Params :  Returns : void} isRequestedType{ Params : DnsRecordType,DnsRecordType[] Returns : boolean} ,channelRead0 lookup4 lookup6 lookup resolveA resolveCNAME resolveMX resolveTXT resolvePTR resolveAAAA resolveNS resolveSRV reverseLookup ,,,,DnsClient ,DnsClientOptions ,,DnsClientOptions ,LongObjectHashMap DnsClientOptions InetSocketAddress IllegalArgumentException LoggingHandler DatagramDnsQueryEncoder DatagramDnsResponseDecoder SimpleChannelInboundHandler ArrayList StringBuilder Query DatagramDnsQuery DefaultDnsQuestion ArrayList DnsException VertxException ,inProgressMap: 
vert.x-master,io.vertx.core.dns.impl,Query,3,2,0,0,0,false,0 ,DnsClient ,Query ,msg: DatagramDnsQuery promise: io.netty.util.concurrent.Promise<List<T>> name: String types: DnsRecordType timerID: long ,channelRead0{ Params : ChannelHandlerContext,DnsResponse Returns : void} lookup4{ Params : String Returns : Future<String>} lookup6{ Params : String Returns : Future<String>} lookup{ Params : String Returns : Future<String>} resolveA{ Params : String Returns : Future<List<String>>} resolveCNAME{ Params : String Returns : Future<List<String>>} resolveMX{ Params : String Returns : Future<List<MxRecord>>} resolveTXT{ Params : String Returns : Future<List<String>>} resolvePTR{ Params : String Returns : Future<String>} resolveAAAA{ Params : String Returns : Future<List<String>>} resolveNS{ Params : String Returns : Future<List<String>>} resolveSRV{ Params : String Returns : Future<List<SrvRecord>>} reverseLookup{ Params : String Returns : Future<String>} lookupSingle{ Params : String,DnsRecordType Returns : Future<T>} lookupList{ Params : String,DnsRecordType Returns : Future<List<T>>} dnsMessageId{ Params : int,String Returns : long} inProgressQueries{ Params : Handler<Integer> Returns : void} fail{ Params : Throwable Returns : void} handle{ Params : DnsResponse Returns : void} run{ Params :  Returns : void} isRequestedType{ Params : DnsRecordType,DnsRecordType[] Returns : boolean} ,channelRead0 lookup4 lookup6 lookup resolveA resolveCNAME resolveMX resolveTXT resolvePTR resolveAAAA resolveNS resolveSRV reverseLookup ,,,,,,,,DatagramDnsQuery DefaultDnsQuestion ArrayList DnsException VertxException ,t: , dnsRecordType
vert.x-master,io.vertx.core.dns.impl,MxRecordImpl,1,1,0,0,1,false,0 ,MxRecord Comparable<MxRecord> ,0 ,priority: int name: String ,priority{ Params :  Returns : int} name{ Params :  Returns : String} toString{ Params :  Returns : String} compareTo{ Params : MxRecord Returns : int} ,priority name toString compareTo ,,,,MxRecord Comparable ,String ,,String ,,o: 
vert.x-master,io.vertx.core.dns.impl,SrvRecordImpl,1,1,0,0,1,false,0 ,SrvRecord Comparable<SrvRecord> ,0 ,priority: int weight: int port: int name: String protocol: String service: String target: String ,priority{ Params :  Returns : int} weight{ Params :  Returns : int} port{ Params :  Returns : int} name{ Params :  Returns : String} protocol{ Params :  Returns : String} service{ Params :  Returns : String} target{ Params :  Returns : String} compareTo{ Params : SrvRecord Returns : int} ,priority weight port name protocol service target compareTo ,,,,SrvRecord Comparable ,String ,,String ,,o: 
vert.x-master,io.vertx.core.dns,MxRecord,2,1,0,0,0,true,0 ,SrvRecord Comparable<SrvRecord> ,0 ,,priority{ Params :  Returns : int} name{ Params :  Returns : String} ,,,,,,,,,,o: 
vert.x-master,io.vertx.core.dns,SrvRecord,2,1,0,0,0,true,0 ,SrvRecord Comparable<SrvRecord> ,0 ,,priority{ Params :  Returns : int} weight{ Params :  Returns : int} port{ Params :  Returns : int} name{ Params :  Returns : String} protocol{ Params :  Returns : String} service{ Params :  Returns : String} target{ Params :  Returns : String} ,,,,,,,,,,o: 
vert.x-master,io.vertx.core.eventbus,AddressHelper,1,1,0,0,0,false,0 ,0 ,0 ,,defaultAddress{ Params :  Returns : String} ,,defaultAddress ,,,,,,,,address: 
vert.x-master,io.vertx.core.eventbus,DeliveryContext,2,1,0,0,0,true,0 ,0 ,0 ,,message{ Params :  Returns : Message<T>} next{ Params :  Returns : void} send{ Params :  Returns : boolean} body{ Params :  Returns : Object} ,,,,,,,,,,address: 
vert.x-master,io.vertx.core.eventbus,DeliveryOptions,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_TIMEOUT: long DEFAULT_LOCAL_ONLY: boolean DEFAULT_TRACING_POLICY: TracingPolicy timeout: long codecName: String headers: MultiMap localOnly: boolean tracingPolicy: TracingPolicy ,toJson{ Params :  Returns : JsonObject} getSendTimeout{ Params :  Returns : long} setSendTimeout{ Params : long Returns : DeliveryOptions} getCodecName{ Params :  Returns : String} setCodecName{ Params : String Returns : DeliveryOptions} addHeader{ Params : String,String Returns : DeliveryOptions} setHeaders{ Params : MultiMap Returns : DeliveryOptions} getHeaders{ Params :  Returns : MultiMap} checkHeaders{ Params :  Returns : void} isLocalOnly{ Params :  Returns : boolean} setLocalOnly{ Params : boolean Returns : DeliveryOptions} getTracingPolicy{ Params :  Returns : TracingPolicy} setTracingPolicy{ Params : TracingPolicy Returns : DeliveryOptions} ,,,,,,TracingPolicy ,,TracingPolicy ,IllegalStateException JsonObject JsonObject ,MultiMap: 
vert.x-master,io.vertx.core.eventbus,EventBus,2,1,0,0,0,true,0 ,0 ,0 ,DEFAULT_SERIALIZABLE_CHECKER: Function<String, Boolean> ,send{ Params : String,Object Returns : EventBus} send{ Params : String,Object,DeliveryOptions Returns : EventBus} request{ Params : String,Object Returns : Future<Message<T>>} request{ Params : String,Object,DeliveryOptions Returns : Future<Message<T>>} publish{ Params : String,Object Returns : EventBus} publish{ Params : String,Object,DeliveryOptions Returns : EventBus} consumer{ Params : String Returns : MessageConsumer<T>} consumer{ Params : String,Handler<Message<T>> Returns : MessageConsumer<T>} localConsumer{ Params : String Returns : MessageConsumer<T>} localConsumer{ Params : String,Handler<Message<T>> Returns : MessageConsumer<T>} sender{ Params : String Returns : MessageProducer<T>} sender{ Params : String,DeliveryOptions Returns : MessageProducer<T>} publisher{ Params : String Returns : MessageProducer<T>} publisher{ Params : String,DeliveryOptions Returns : MessageProducer<T>} registerCodec{ Params : MessageCodec Returns : EventBus} unregisterCodec{ Params : String Returns : EventBus} registerDefaultCodec{ Params : Class<T>,MessageCodec<T,?> Returns : EventBus} unregisterDefaultCodec{ Params : Class Returns : EventBus} codecSelector{ Params : Function<Object,String> Returns : EventBus} addOutboundInterceptor{ Params : Handler<DeliveryContext<T>> Returns : EventBus} removeOutboundInterceptor{ Params : Handler<DeliveryContext<T>> Returns : EventBus} addInboundInterceptor{ Params : Handler<DeliveryContext<T>> Returns : EventBus} removeInboundInterceptor{ Params : Handler<DeliveryContext<T>> Returns : EventBus} clusterSerializableChecker{ Params : Function<String,Boolean> Returns : EventBus} serializableChecker{ Params : Function<String,Boolean> Returns : EventBus} ,,,,,,,,,DeliveryOptions ,: , address, message, new DeliveryOptions()
vert.x-master,io.vertx.core.eventbus,EventBusOptions,1,1,0,0,0,false,TCPSSLOptions ,0 ,0 ,DEFAULT_CLUSTER_HOST: String DEFAULT_CLUSTER_PORT: int DEFAULT_CLUSTER_PUBLIC_HOST: String DEFAULT_CLUSTER_PUBLIC_PORT: int DEFAULT_CLUSTER_PING_INTERVAL: long DEFAULT_CLUSTER_PING_REPLY_INTERVAL: long clusterPublicHost: String clusterPublicPort: int clusterPingInterval: long clusterPingReplyInterval: long clusterNodeMetadata: JsonObject DEFAULT_ACCEPT_BACKLOG: int DEFAULT_CLIENT_AUTH: ClientAuth port: int host: String acceptBacklog: int clientAuth: ClientAuth DEFAULT_RECONNECT_ATTEMPTS: int DEFAULT_RECONNECT_INTERVAL: long DEFAULT_CONNECT_TIMEOUT: int DEFAULT_TRUST_ALL: boolean reconnectAttempts: int reconnectInterval: long connectTimeout: int trustAll: boolean ,toJson{ Params :  Returns : JsonObject} getClientAuth{ Params :  Returns : ClientAuth} setClientAuth{ Params : ClientAuth Returns : EventBusOptions} getAcceptBacklog{ Params :  Returns : int} setAcceptBacklog{ Params : int Returns : EventBusOptions} getHost{ Params :  Returns : String} setHost{ Params : String Returns : EventBusOptions} getPort{ Params :  Returns : int} setPort{ Params : int Returns : EventBusOptions} getReconnectAttempts{ Params :  Returns : int} setReconnectAttempts{ Params : int Returns : EventBusOptions} getReconnectInterval{ Params :  Returns : long} setReconnectInterval{ Params : long Returns : EventBusOptions} addCrlPath{ Params : String Returns : EventBusOptions} addCrlValue{ Params : Buffer Returns : EventBusOptions} addEnabledCipherSuite{ Params : String Returns : EventBusOptions} removeEnabledCipherSuite{ Params : String Returns : EventBusOptions} setIdleTimeout{ Params : int Returns : EventBusOptions} setReadIdleTimeout{ Params : int Returns : EventBusOptions} setWriteIdleTimeout{ Params : int Returns : EventBusOptions} setIdleTimeoutUnit{ Params : TimeUnit Returns : EventBusOptions} setKeyCertOptions{ Params : KeyCertOptions Returns : EventBusOptions} setKeyStoreOptions{ Params : JksOptions Returns : EventBusOptions} setPemKeyCertOptions{ Params : PemKeyCertOptions Returns : EventBusOptions} setPemTrustOptions{ Params : PemTrustOptions Returns : EventBusOptions} setPfxKeyCertOptions{ Params : PfxOptions Returns : EventBusOptions} setPfxTrustOptions{ Params : PfxOptions Returns : EventBusOptions} setSoLinger{ Params : int Returns : EventBusOptions} setSsl{ Params : boolean Returns : EventBusOptions} setTcpKeepAlive{ Params : boolean Returns : EventBusOptions} setTcpNoDelay{ Params : boolean Returns : EventBusOptions} setTrustOptions{ Params : TrustOptions Returns : EventBusOptions} setTrustStoreOptions{ Params : JksOptions Returns : EventBusOptions} setReceiveBufferSize{ Params : int Returns : EventBusOptions} setReuseAddress{ Params : boolean Returns : EventBusOptions} setReusePort{ Params : boolean Returns : EventBusOptions} setSendBufferSize{ Params : int Returns : EventBusOptions} setTrafficClass{ Params : int Returns : EventBusOptions} setUseAlpn{ Params : boolean Returns : EventBusOptions} setSslEngineOptions{ Params : SSLEngineOptions Returns : EventBusOptions} setJdkSslEngineOptions{ Params : JdkSSLEngineOptions Returns : EventBusOptions} setOpenSslEngineOptions{ Params : OpenSSLEngineOptions Returns : EventBusOptions} setEnabledSecureTransportProtocols{ Params : Set<String> Returns : EventBusOptions} addEnabledSecureTransportProtocol{ Params : String Returns : EventBusOptions} removeEnabledSecureTransportProtocol{ Params : String Returns : EventBusOptions} setTcpFastOpen{ Params : boolean Returns : EventBusOptions} setTcpCork{ Params : boolean Returns : EventBusOptions} setTcpQuickAck{ Params : boolean Returns : EventBusOptions} setTcpUserTimeout{ Params : int Returns : EventBusOptions} setLogActivity{ Params : boolean Returns : EventBusOptions} setSslHandshakeTimeout{ Params : long Returns : EventBusOptions} setSslHandshakeTimeoutUnit{ Params : TimeUnit Returns : EventBusOptions} setTrustAll{ Params : boolean Returns : EventBusOptions} isTrustAll{ Params :  Returns : boolean} getConnectTimeout{ Params :  Returns : int} setConnectTimeout{ Params : int Returns : EventBusOptions} getClusterPingInterval{ Params :  Returns : long} setClusterPingInterval{ Params : long Returns : EventBusOptions} getClusterPingReplyInterval{ Params :  Returns : long} setClusterPingReplyInterval{ Params : long Returns : EventBusOptions} getClusterPublicHost{ Params :  Returns : String} setClusterPublicHost{ Params : String Returns : EventBusOptions} getClusterPublicPort{ Params :  Returns : int} setClusterPublicPort{ Params : int Returns : EventBusOptions} getClusterNodeMetadata{ Params :  Returns : JsonObject} setClusterNodeMetadata{ Params : JsonObject Returns : EventBusOptions} ,addCrlPath addCrlValue addEnabledCipherSuite removeEnabledCipherSuite setIdleTimeout setReadIdleTimeout setWriteIdleTimeout setIdleTimeoutUnit setKeyCertOptions setKeyStoreOptions setPemKeyCertOptions setPemTrustOptions setPfxKeyCertOptions setPfxTrustOptions setSoLinger setSsl setTcpKeepAlive setTcpNoDelay setTrustOptions setTrustStoreOptions setReceiveBufferSize setReuseAddress setReusePort setSendBufferSize setTrafficClass setUseAlpn setSslEngineOptions setJdkSslEngineOptions setOpenSslEngineOptions setEnabledSecureTransportProtocols addEnabledSecureTransportProtocol removeEnabledSecureTransportProtocol setTcpFastOpen setTcpCork setTcpQuickAck setTcpUserTimeout setLogActivity setSslHandshakeTimeout setSslHandshakeTimeoutUnit ,,,,,boolean ,,boolean ,JsonObject IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException ,super: , sslHandshakeTimeoutUnit
vert.x-master,io.vertx.core.eventbus.impl,BodyReadStream,1,1,0,0,0,false,0 ,ReadStream<T> ,0 ,delegate: ReadStream<Message<T>> ,exceptionHandler{ Params : Handler<Throwable> Returns : ReadStream<T>} handler{ Params : Handler<T> Returns : ReadStream<T>} pause{ Params :  Returns : ReadStream<T>} fetch{ Params : long Returns : ReadStream<T>} resume{ Params :  Returns : ReadStream<T>} endHandler{ Params : Handler<Void> Returns : ReadStream<T>} ,exceptionHandler handler pause fetch resume endHandler ,,,,ReadStream ,ReadStream<Message<T>> ,,ReadStream<Message<T>> ,,delegate: , endHandler
vert.x-master,io.vertx.core.eventbus.impl.clustered,ClusteredEventBus,1,1,0,0,0,false,EventBusImpl ,0 ,0 ,log: Logger PONG: Buffer options: EventBusOptions clusterManager: ClusterManager nodeSelector: NodeSelector handlerSequence: AtomicLong client: NetClient connections: ConcurrentMap<String, ConnectionHolder> ebContext: EventLoopContext nodeInfo: NodeInfo nodeId: String server: NetServer ,createNetClient{ Params : VertxInternal,NetClientOptions Returns : NetClient} client{ Params :  Returns : NetClient} getServerOptions{ Params :  Returns : NetServerOptions} start{ Params : Promise<Void> Returns : void} close{ Params : Promise<Void> Returns : void} createMessage{ Params : boolean,String,MultiMap,Object,String Returns : MessageImpl} onLocalRegistration{ Params : HandlerHolder<T>,Promise<Void> Returns : void} createHandlerHolder{ Params : HandlerRegistration<T>,boolean,boolean,ContextInternal Returns : HandlerHolder<T>} onLocalUnregistration{ Params : HandlerHolder<T>,Promise<Void> Returns : void} sendOrPub{ Params : OutboundDeliveryContext<T> Returns : void} sendOrPublishFailed{ Params : OutboundDeliveryContext<?>,Throwable Returns : void} generateReplyAddress{ Params :  Returns : String} isMessageLocal{ Params : MessageImpl Returns : boolean} nextHandler{ Params : ConcurrentCyclicSequence<HandlerHolder>,boolean Returns : HandlerHolder} getClusterPort{ Params :  Returns : int} getClusterHost{ Params :  Returns : String} getClusterPublicPort{ Params : int Returns : int} getClusterPublicHost{ Params : String Returns : String} getServerHandler{ Params :  Returns : Handler<NetSocket>} handle{ Params : Buffer Returns : void} sendToNode{ Params : OutboundDeliveryContext<T>,String Returns : void} sendToNodes{ Params : OutboundDeliveryContext<T>,Iterable<String> Returns : void} clusteredSendReply{ Params : String,OutboundDeliveryContext<T> Returns : void} sendRemote{ Params : OutboundDeliveryContext<?>,String,MessageImpl Returns : void} connections{ Params :  Returns : ConcurrentMap<String,ConnectionHolder>} vertx{ Params :  Returns : VertxInternal} options{ Params :  Returns : EventBusOptions} ,start close createMessage onLocalRegistration createHandlerHolder onLocalUnregistration sendOrPub generateReplyAddress isMessageLocal nextHandler ,,,,,NetServer ,,NetServer ,AtomicLong ConcurrentHashMap NetClientOptions CloseFuture NetClientBuilder NetServerOptions NodeInfo ClusteredMessage RegistrationInfo ClusteredHandlerHolder RegistrationInfo Handler ClusteredMessage ConnectionHolder ,holder: , sendContext
vert.x-master,io.vertx.core.eventbus.impl.clustered,ClusteredHandlerHolder,1,1,0,0,0,false,HandlerHolder<T> ,0 ,0 ,seq: long ,getSeq{ Params :  Returns : long} ,getSeq ,,,,,long ,,long ,,holder: , sendContext
vert.x-master,io.vertx.core.eventbus.impl.clustered,ClusteredMessage,1,1,0,0,0,false,MessageImpl<U,V> ,0 ,0 ,log: Logger WIRE_PROTOCOL_VERSION: byte sender: String repliedTo: String wireBuffer: Buffer bodyPos: int headersPos: int fromWire: boolean toWire: boolean failure: String ,createReply{ Params : Object,DeliveryOptions Returns : MessageImpl} copyBeforeReceive{ Params :  Returns : ClusteredMessage<U,V>} headers{ Params :  Returns : MultiMap} body{ Params :  Returns : V} replyAddress{ Params :  Returns : String} encodeToWire{ Params :  Returns : Buffer} readFromWire{ Params : Buffer,CodecManager Returns : void} setFailure{ Params : String Returns : void} decodeBody{ Params :  Returns : void} encodeHeaders{ Params : Buffer Returns : void} decodeHeaders{ Params :  Returns : void} writeBody{ Params : Buffer Returns : void} writeString{ Params : Buffer,String Returns : void} getSender{ Params :  Returns : String} getRepliedTo{ Params :  Returns : String} isFromWire{ Params :  Returns : boolean} isToWire{ Params :  Returns : boolean} isLocal{ Params :  Returns : boolean} hasFailure{ Params :  Returns : boolean} internalError{ Params :  Returns : void} ,createReply headers body replyAddress ,,,,,String ,,String ,ClusteredMessage String String String String String String ReplyException ,log: , failure
vert.x-master,io.vertx.core.eventbus.impl.clustered,ConnectionHolder,1,0,0,0,0,false,0 ,0 ,0 ,log: Logger PING_ADDRESS: String eventBus: ClusteredEventBus remoteNodeId: String vertx: VertxInternal metrics: EventBusMetrics pending: Queue<OutboundDeliveryContext<?>> socket: NetSocket connected: boolean timeoutID: long pingTimeoutID: long ,connect{ Params :  Returns : void} writeMessage{ Params : OutboundDeliveryContext<?> Returns : void} close{ Params :  Returns : void} close{ Params : Throwable Returns : void} schedulePing{ Params :  Returns : void} connected{ Params : NetSocket Returns : void} ,,,,,,long ,,long ,ArrayDeque ClusteredMessage PingMessageCodec ,socket: , data
vert.x-master,io.vertx.core.eventbus.impl.clustered,Serializer,1,1,0,0,0,false,0 ,Closeable ,SerializerQueue SerializedTask ,ctx: ContextInternal queues: Map<String, SerializerQueue> ,get{ Params : ContextInternal Returns : Serializer} queue{ Params : Message<?>,BiConsumer<Message<?>,Promise<T>>,Promise<T> Returns : void} close{ Params : Promise<Void> Returns : void} checkPending{ Params :  Returns : void} add{ Params : Message<?>,BiConsumer<Message<?>,Promise<U>>,Promise<U> Returns : void} processed{ Params :  Returns : void} close{ Params :  Returns : void} process{ Params :  Returns : void} handle{ Params : AsyncResult<U> Returns : void} ,close handle ,get ,,,Closeable ,Map<String,SerializerQueue> ,,Map<String,SerializerQueue> ,HashMap Serializer LinkedList SerializedTask ,completion: 
vert.x-master,io.vertx.core.eventbus.impl.clustered,SerializerQueue,3,2,0,0,0,false,0 ,Closeable ,SerializerQueue SerializedTask ,tasks: Queue<SerializedTask<?>> address: String running: boolean closed: boolean ,get{ Params : ContextInternal Returns : Serializer} queue{ Params : Message<?>,BiConsumer<Message<?>,Promise<T>>,Promise<T> Returns : void} close{ Params : Promise<Void> Returns : void} checkPending{ Params :  Returns : void} add{ Params : Message<?>,BiConsumer<Message<?>,Promise<U>>,Promise<U> Returns : void} processed{ Params :  Returns : void} close{ Params :  Returns : void} process{ Params :  Returns : void} handle{ Params : AsyncResult<U> Returns : void} ,close handle ,get ,,,,boolean ,,boolean ,LinkedList SerializedTask ,tasks: 
vert.x-master,io.vertx.core.eventbus.impl.clustered,SerializedTask,3,2,0,0,0,false,0 ,Closeable ,SerializerQueue SerializedTask ,msg: Message<?> selectHandler: BiConsumer<Message<?>, Promise<U>> internalPromise: Promise<U> ,get{ Params : ContextInternal Returns : Serializer} queue{ Params : Message<?>,BiConsumer<Message<?>,Promise<T>>,Promise<T> Returns : void} close{ Params : Promise<Void> Returns : void} checkPending{ Params :  Returns : void} add{ Params : Message<?>,BiConsumer<Message<?>,Promise<U>>,Promise<U> Returns : void} processed{ Params :  Returns : void} close{ Params :  Returns : void} process{ Params :  Returns : void} handle{ Params : AsyncResult<U> Returns : void} ,close handle ,get ,,,Handler ,,,,,: 
vert.x-master,io.vertx.core.eventbus.impl,CodecManager,1,1,0,0,0,false,0 ,0 ,0 ,PING_MESSAGE_CODEC: MessageCodec<String, String> NULL_MESSAGE_CODEC: MessageCodec<String, String> STRING_MESSAGE_CODEC: MessageCodec<String, String> BUFFER_MESSAGE_CODEC: MessageCodec<Buffer, Buffer> JSON_OBJECT_MESSAGE_CODEC: MessageCodec<JsonObject, JsonObject> JSON_ARRAY_MESSAGE_CODEC: MessageCodec<JsonArray, JsonArray> BYTE_ARRAY_MESSAGE_CODEC: MessageCodec<byte[], byte[]> INT_MESSAGE_CODEC: MessageCodec<Integer, Integer> LONG_MESSAGE_CODEC: MessageCodec<Long, Long> FLOAT_MESSAGE_CODEC: MessageCodec<Float, Float> DOUBLE_MESSAGE_CODEC: MessageCodec<Double, Double> BOOLEAN_MESSAGE_CODEC: MessageCodec<Boolean, Boolean> SHORT_MESSAGE_CODEC: MessageCodec<Short, Short> CHAR_MESSAGE_CODEC: MessageCodec<Character, Character> BYTE_MESSAGE_CODEC: MessageCodec<Byte, Byte> REPLY_EXCEPTION_MESSAGE_CODEC: MessageCodec<ReplyException, ReplyException> systemCodecs: MessageCodec userCodecMap: ConcurrentMap<String, MessageCodec> defaultCodecMap: ConcurrentMap<Class, MessageCodec> clusterSerializableCodec: ClusterSerializableCodec serializableCodec: SerializableCodec clusterSerializableCheck: Function<String, Boolean> serializableCheck: Function<String, Boolean> codecSelector: Function<Object, String> ,lookupCodec{ Params : Object,String,boolean Returns : MessageCodec} getCodec{ Params : String Returns : MessageCodec} registerCodec{ Params : MessageCodec Returns : void} unregisterCodec{ Params : String Returns : void} registerDefaultCodec{ Params : Class<T>,MessageCodec<T,?> Returns : void} unregisterDefaultCodec{ Params : Class Returns : void} systemCodecs{ Params :  Returns : MessageCodec[]} checkSystemCodec{ Params : MessageCodec Returns : void} codecs{ Params : MessageCodec Returns : MessageCodec[]} clusterSerializableCheck{ Params : Function<String,Boolean> Returns : void} acceptClusterSerializable{ Params : String Returns : boolean} serializableCheck{ Params : Function<String,Boolean> Returns : void} acceptSerializable{ Params : String Returns : boolean} codecSelector{ Params : Function<Object,String> Returns : void} ,,,,,,Function<Object,String> ,,Function<Object,String> ,PingMessageCodec NullMessageCodec StringMessageCodec BufferMessageCodec JsonObjectMessageCodec JsonArrayMessageCodec ByteArrayMessageCodec IntMessageCodec LongMessageCodec FloatMessageCodec DoubleMessageCodec BooleanMessageCodec ShortMessageCodec CharMessageCodec ByteMessageCodec ReplyExceptionMessageCodec ConcurrentHashMap ConcurrentHashMap ClusterSerializableCodec SerializableCodec IllegalArgumentException IllegalStateException IllegalStateException IllegalStateException IllegalArgumentException ,Objects: , selector
vert.x-master,io.vertx.core.eventbus.impl.codecs,BooleanMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<Boolean,Boolean> ,0 ,,encodeToWire{ Params : Buffer,Boolean Returns : void} decodeFromWire{ Params : int,Buffer Returns : Boolean} transform{ Params : Boolean Returns : Boolean} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,buffer: , pos
vert.x-master,io.vertx.core.eventbus.impl.codecs,BufferMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<Buffer,Buffer> ,0 ,,encodeToWire{ Params : Buffer,Buffer Returns : void} decodeFromWire{ Params : int,Buffer Returns : Buffer} transform{ Params : Buffer Returns : Buffer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,b: 
vert.x-master,io.vertx.core.eventbus.impl.codecs,ByteArrayMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<byte[],byte[]> ,0 ,,encodeToWire{ Params : Buffer,byte[] Returns : void} decodeFromWire{ Params : int,Buffer Returns : byte[]} transform{ Params : byte[] Returns : byte[]} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,System: , bytes, 0, copied, 0, bytes.length
vert.x-master,io.vertx.core.eventbus.impl.codecs,ByteMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<Byte,Byte> ,0 ,,encodeToWire{ Params : Buffer,Byte Returns : void} decodeFromWire{ Params : int,Buffer Returns : Byte} transform{ Params : Byte Returns : Byte} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,buffer: , pos
vert.x-master,io.vertx.core.eventbus.impl.codecs,CharMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<Character,Character> ,0 ,,encodeToWire{ Params : Buffer,Character Returns : void} decodeFromWire{ Params : int,Buffer Returns : Character} transform{ Params : Character Returns : Character} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,buffer: , pos
vert.x-master,io.vertx.core.eventbus.impl.codecs,ClusterSerializableCodec,1,1,0,0,0,false,0 ,MessageCodec<ClusterSerializable,ClusterSerializable> ,0 ,codecManager: CodecManager ,encodeToWire{ Params : Buffer,ClusterSerializable Returns : void} decodeFromWire{ Params : int,Buffer Returns : ClusterSerializable} getClassLoader{ Params :  Returns : ClassLoader} transform{ Params : ClusterSerializable Returns : ClusterSerializable} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,getClassLoader ,,,MessageCodec ,CodecManager ,,CodecManager ,String RuntimeException RuntimeException ,: , obj
vert.x-master,io.vertx.core.eventbus.impl.codecs,DoubleMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<Double,Double> ,0 ,,encodeToWire{ Params : Buffer,Double Returns : void} decodeFromWire{ Params : int,Buffer Returns : Double} transform{ Params : Double Returns : Double} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,buffer: , pos
vert.x-master,io.vertx.core.eventbus.impl.codecs,FloatMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<Float,Float> ,0 ,,encodeToWire{ Params : Buffer,Float Returns : void} decodeFromWire{ Params : int,Buffer Returns : Float} transform{ Params : Float Returns : Float} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,buffer: , pos
vert.x-master,io.vertx.core.eventbus.impl.codecs,IntMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<Integer,Integer> ,0 ,,encodeToWire{ Params : Buffer,Integer Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : Integer Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,buffer: , pos
vert.x-master,io.vertx.core.eventbus.impl.codecs,JsonArrayMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<JsonArray,JsonArray> ,0 ,,encodeToWire{ Params : Buffer,JsonArray Returns : void} decodeFromWire{ Params : int,Buffer Returns : JsonArray} transform{ Params : JsonArray Returns : JsonArray} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,JsonArray ,jsonArray: 
vert.x-master,io.vertx.core.eventbus.impl.codecs,JsonObjectMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<JsonObject,JsonObject> ,0 ,,encodeToWire{ Params : Buffer,JsonObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : JsonObject} transform{ Params : JsonObject Returns : JsonObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,JsonObject ,jsonObject: 
vert.x-master,io.vertx.core.eventbus.impl.codecs,LongMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<Long,Long> ,0 ,,encodeToWire{ Params : Buffer,Long Returns : void} decodeFromWire{ Params : int,Buffer Returns : Long} transform{ Params : Long Returns : Long} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,buffer: , pos
vert.x-master,io.vertx.core.eventbus.impl.codecs,NullMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<String,String> ,0 ,,encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,buffer: , pos
vert.x-master,io.vertx.core.eventbus.impl.codecs,PingMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<String,String> ,0 ,,encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,buffer: , pos
vert.x-master,io.vertx.core.eventbus.impl.codecs,ReplyExceptionMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<ReplyException,ReplyException> ,0 ,,encodeToWire{ Params : Buffer,ReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : ReplyException} transform{ Params : ReplyException Returns : ReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,String ReplyException ,buffer: , pos, pos + strLength
vert.x-master,io.vertx.core.eventbus.impl.codecs,SerializableCodec,1,1,0,0,0,false,0 ,MessageCodec<Object,Object> ,CheckedClassNameObjectInputStream ,codecManager: CodecManager ,encodeToWire{ Params : Buffer,Object Returns : void} decodeFromWire{ Params : int,Buffer Returns : Object} transform{ Params : Object Returns : Object} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} resolveClass{ Params : ObjectStreamClass Returns : Class<?>} ,encodeToWire decodeFromWire transform name systemCodecID resolveClass ,,,,MessageCodec ,CodecManager ,,CodecManager ,InvalidClassException ,: , o
vert.x-master,io.vertx.core.eventbus.impl.codecs,CheckedClassNameObjectInputStream,3,2,0,0,0,false,0 ,MessageCodec<Object,Object> ,CheckedClassNameObjectInputStream ,,encodeToWire{ Params : Buffer,Object Returns : void} decodeFromWire{ Params : int,Buffer Returns : Object} transform{ Params : Object Returns : Object} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} resolveClass{ Params : ObjectStreamClass Returns : Class<?>} ,encodeToWire decodeFromWire transform name systemCodecID resolveClass ,,,,,,,,InvalidClassException ,super: , desc
vert.x-master,io.vertx.core.eventbus.impl.codecs,ShortMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<Short,Short> ,0 ,,encodeToWire{ Params : Buffer,Short Returns : void} decodeFromWire{ Params : int,Buffer Returns : Short} transform{ Params : Short Returns : Short} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,,buffer: , pos
vert.x-master,io.vertx.core.eventbus.impl.codecs,StringMessageCodec,1,1,0,0,0,false,0 ,MessageCodec<String,String> ,0 ,,encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,encodeToWire decodeFromWire transform name systemCodecID ,,,,MessageCodec ,,,,String ,buffer: , pos, pos + length
vert.x-master,io.vertx.core.eventbus.impl,DeliveryContextBase,1,0,1,0,0,false,0 ,DeliveryContext<T> ,0 ,message: MessageImpl<?, T> context: ContextInternal interceptors: Handler<DeliveryContext> interceptorIdx: int invoking: boolean invokeNext: boolean ,dispatch{ Params :  Returns : void} message{ Params :  Returns : Message<T>} execute{ Params :  Returns : void} next{ Params :  Returns : void} ,message next ,,,execute ,DeliveryContext ,boolean ,,boolean ,,: 
vert.x-master,io.vertx.core.eventbus.impl,EventBusImpl,1,1,0,0,0,false,0 ,EventBusInternal MetricsProvider ,0 ,OUTBOUND_INTERCEPTORS_UPDATER: AtomicReferenceFieldUpdater<EventBusImpl, Handler[]> INBOUND_INTERCEPTORS_UPDATER: AtomicReferenceFieldUpdater<EventBusImpl, Handler[]> outboundInterceptors: Handler<DeliveryContext> inboundInterceptors: Handler<DeliveryContext> replySequence: AtomicLong vertx: VertxInternal metrics: EventBusMetrics handlerMap: ConcurrentMap<String, ConcurrentCyclicSequence<HandlerHolder>> codecManager: CodecManager started: boolean ,addOutboundInterceptor{ Params : Handler<DeliveryContext<T>> Returns : EventBus} addInboundInterceptor{ Params : Handler<DeliveryContext<T>> Returns : EventBus} removeOutboundInterceptor{ Params : Handler<DeliveryContext<T>> Returns : EventBus} removeInboundInterceptor{ Params : Handler<DeliveryContext<T>> Returns : EventBus} inboundInterceptors{ Params :  Returns : Handler<DeliveryContext>[]} outboundInterceptors{ Params :  Returns : Handler<DeliveryContext>[]} clusterSerializableChecker{ Params : Function<String,Boolean> Returns : EventBus} serializableChecker{ Params : Function<String,Boolean> Returns : EventBus} start{ Params : Promise<Void> Returns : void} send{ Params : String,Object Returns : EventBus} send{ Params : String,Object,DeliveryOptions Returns : EventBus} request{ Params : String,Object,DeliveryOptions Returns : Future<Message<T>>} sender{ Params : String Returns : MessageProducer<T>} sender{ Params : String,DeliveryOptions Returns : MessageProducer<T>} publisher{ Params : String Returns : MessageProducer<T>} publisher{ Params : String,DeliveryOptions Returns : MessageProducer<T>} publish{ Params : String,Object Returns : EventBus} publish{ Params : String,Object,DeliveryOptions Returns : EventBus} consumer{ Params : String Returns : MessageConsumer<T>} consumer{ Params : String,Handler<Message<T>> Returns : MessageConsumer<T>} localConsumer{ Params : String Returns : MessageConsumer<T>} localConsumer{ Params : String,Handler<Message<T>> Returns : MessageConsumer<T>} registerCodec{ Params : MessageCodec Returns : EventBus} unregisterCodec{ Params : String Returns : EventBus} registerDefaultCodec{ Params : Class<T>,MessageCodec<T,?> Returns : EventBus} unregisterDefaultCodec{ Params : Class Returns : EventBus} codecSelector{ Params : Function<Object,String> Returns : EventBus} close{ Params : Promise<Void> Returns : void} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : EventBusMetrics<?>} createMessage{ Params : boolean,String,MultiMap,Object,String Returns : MessageImpl} addRegistration{ Params : String,HandlerRegistration<T>,boolean,boolean,Promise<Void> Returns : HandlerHolder<T>} onLocalRegistration{ Params : HandlerHolder<T>,Promise<Void> Returns : void} addLocalRegistration{ Params : String,HandlerRegistration<T>,boolean,boolean Returns : HandlerHolder<T>} createHandlerHolder{ Params : HandlerRegistration<T>,boolean,boolean,ContextInternal Returns : HandlerHolder<T>} removeRegistration{ Params : HandlerHolder<T>,Promise<Void> Returns : void} onLocalUnregistration{ Params : HandlerHolder<T>,Promise<Void> Returns : void} removeLocalRegistration{ Params : HandlerHolder<T> Returns : void} sendReply{ Params : MessageImpl,DeliveryOptions,ReplyHandler<T> Returns : void} sendOrPub{ Params : OutboundDeliveryContext<T> Returns : void} sendLocally{ Params : OutboundDeliveryContext<T> Returns : void} isMessageLocal{ Params : MessageImpl Returns : boolean} deliverMessageLocally{ Params : MessageImpl Returns : ReplyException} nextHandler{ Params : ConcurrentCyclicSequence<HandlerHolder>,boolean Returns : HandlerHolder} checkStarted{ Params :  Returns : void} generateReplyAddress{ Params :  Returns : String} createReplyHandler{ Params : MessageImpl,boolean,DeliveryOptions Returns : ReplyHandler<T>} newSendContext{ Params : MessageImpl,DeliveryOptions,ReplyHandler<T>,Promise<Void> Returns : OutboundDeliveryContext<T>} sendOrPubInternal{ Params : OutboundDeliveryContext<T> Returns : void} sendOrPubInternal{ Params : MessageImpl,DeliveryOptions,ReplyHandler<T>,Promise<Void> Returns : void} unregisterAll{ Params :  Returns : Future<Void>} addInterceptor{ Params : AtomicReferenceFieldUpdater<EventBusImpl,Handler[]>,Handler Returns : void} removeInterceptor{ Params : AtomicReferenceFieldUpdater<EventBusImpl,Handler[]>,Handler Returns : void} ,addOutboundInterceptor addInboundInterceptor removeOutboundInterceptor removeInboundInterceptor clusterSerializableChecker serializableChecker start send send request sender sender publisher publisher publish publish consumer consumer localConsumer localConsumer registerCodec unregisterCodec registerDefaultCodec unregisterDefaultCodec codecSelector close isMetricsEnabled getMetrics ,,,,EventBusInternal MetricsProvider ,,,,AtomicLong ConcurrentHashMap CodecManager IllegalStateException DeliveryOptions MessageProducerImpl DeliveryOptions MessageProducerImpl MessageProducerImpl DeliveryOptions MessageProducerImpl DeliveryOptions MessageConsumerImpl MessageConsumerImpl MessageImpl ConcurrentCyclicSequence HandlerHolder IllegalStateException OutboundDeliveryContext ReplyException IllegalStateException ReplyHandler OutboundDeliveryContext ArrayList ,updater: , this, interceptors, copy
vert.x-master,io.vertx.core.eventbus.impl,EventBusInternal,2,1,0,0,0,true,0 ,EventBusInternal MetricsProvider ,0 ,,start{ Params : Promise<Void> Returns : void} close{ Params : Promise<Void> Returns : void} ,,,,,,,,,,updater: , this, interceptors, copy
vert.x-master,io.vertx.core.eventbus.impl,HandlerHolder,1,1,0,0,0,false,0 ,0 ,0 ,context: ContextInternal handler: HandlerRegistration<T> replyHandler: boolean localOnly: boolean removed: boolean ,setRemoved{ Params :  Returns : boolean} isRemoved{ Params :  Returns : boolean} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getSeq{ Params :  Returns : long} getContext{ Params :  Returns : ContextInternal} getHandler{ Params :  Returns : HandlerRegistration<T>} isReplyHandler{ Params :  Returns : boolean} isLocalOnly{ Params :  Returns : boolean} ,equals hashCode ,,,,,boolean ,,boolean ,,Objects: , handler
vert.x-master,io.vertx.core.eventbus.impl,HandlerRegistration,1,1,1,0,0,false,0 ,Closeable ,InboundDeliveryContext ,context: ContextInternal bus: EventBusImpl address: String src: boolean registered: HandlerHolder<T> metric: Object ,receive{ Params : MessageImpl Returns : void} doReceive{ Params : Message<T> Returns : boolean} dispatch{ Params : Message<T>,ContextInternal,Handler<Message<T>> Returns : void} register{ Params : String,boolean,Promise<Void> Returns : void} isRegistered{ Params :  Returns : boolean} unregister{ Params :  Returns : Future<Void>} dispatch{ Params : Handler<Message<T>>,Message<T>,ContextInternal Returns : void} discard{ Params : Message<T> Returns : void} execute{ Params :  Returns : void} send{ Params :  Returns : boolean} body{ Params :  Returns : Object} close{ Params : Promise<Void> Returns : void} ,send body close ,,,doReceive dispatch ,Closeable ,Object ,,Object ,IllegalStateException InboundDeliveryContext ReplyException ,: 
vert.x-master,io.vertx.core.eventbus.impl,InboundDeliveryContext,3,2,0,0,0,false,0 ,Closeable ,InboundDeliveryContext ,handler: Handler<Message<T>> ,receive{ Params : MessageImpl Returns : void} doReceive{ Params : Message<T> Returns : boolean} dispatch{ Params : Message<T>,ContextInternal,Handler<Message<T>> Returns : void} register{ Params : String,boolean,Promise<Void> Returns : void} isRegistered{ Params :  Returns : boolean} unregister{ Params :  Returns : Future<Void>} dispatch{ Params : Handler<Message<T>>,Message<T>,ContextInternal Returns : void} discard{ Params : Message<T> Returns : void} execute{ Params :  Returns : void} send{ Params :  Returns : boolean} body{ Params :  Returns : Object} close{ Params : Promise<Void> Returns : void} ,send body close ,,,doReceive dispatch ,,Handler<Message<T>> ,,Handler<Message<T>> ,,message: 
vert.x-master,io.vertx.core.eventbus.impl,MessageConsumerImpl,1,1,0,0,0,false,HandlerRegistration<T> ,MessageConsumer<T> ,0 ,log: Logger DEFAULT_MAX_BUFFERED_MESSAGES: int vertx: Vertx context: ContextInternal eventBus: EventBusImpl address: String localOnly: boolean handler: Handler<Message<T>> endHandler: Handler<Void> discardHandler: Handler<Message<T>> maxBufferedMessages: int pending: Queue<Message<T>> demand: long result: Promise<Void> registered: boolean ,setMaxBufferedMessages{ Params : int Returns : MessageConsumer<T>} getMaxBufferedMessages{ Params :  Returns : int} address{ Params :  Returns : String} completion{ Params :  Returns : Future<Void>} unregister{ Params :  Returns : Future<Void>} doReceive{ Params : Message<T> Returns : boolean} dispatch{ Params : Message<T>,ContextInternal,Handler<Message<T>> Returns : void} deliver{ Params : Handler<Message<T>>,Message<T> Returns : void} checkNextTick{ Params :  Returns : void} discardHandler{ Params : Handler<Message<T>> Returns : void} handler{ Params : Handler<Message<T>> Returns : MessageConsumer<T>} bodyStream{ Params :  Returns : ReadStream<T>} pause{ Params :  Returns : MessageConsumer<T>} resume{ Params :  Returns : MessageConsumer<T>} fetch{ Params : long Returns : MessageConsumer<T>} endHandler{ Params : Handler<Void> Returns : MessageConsumer<T>} exceptionHandler{ Params : Handler<Throwable> Returns : MessageConsumer<T>} getHandler{ Params :  Returns : Handler<Message<T>>} ,setMaxBufferedMessages getMaxBufferedMessages address completion unregister dispatch handler bodyStream pause resume fetch endHandler exceptionHandler ,,,,MessageConsumer ,boolean ,,boolean ,ArrayDeque ArrayList ArrayDeque NullPointerException BodyReadStream IllegalArgumentException ,endHandler: , null
vert.x-master,io.vertx.core.eventbus.impl,MessageImpl,1,1,0,0,0,false,0 ,Message<V> ,0 ,messageCodec: MessageCodec<U, V> bus: EventBusImpl address: String replyAddress: String headers: MultiMap sentBody: U receivedBody: V send: boolean trace: Object ,copyBeforeReceive{ Params :  Returns : MessageImpl<U,V>} address{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} body{ Params :  Returns : V} replyAddress{ Params :  Returns : String} reply{ Params : Object,DeliveryOptions Returns : void} replyAndRequest{ Params : Object,DeliveryOptions Returns : Future<Message<R>>} createReply{ Params : Object,DeliveryOptions Returns : MessageImpl} isSend{ Params :  Returns : boolean} setReplyAddress{ Params : String Returns : void} codec{ Params :  Returns : MessageCodec<U,V>} isLocal{ Params :  Returns : boolean} ,address headers body replyAddress reply replyAndRequest isSend ,,,,Message ,,,,MessageImpl IllegalStateException ,options: 
vert.x-master,io.vertx.core.eventbus.impl,MessageProducerImpl,1,1,0,0,0,false,0 ,MessageProducer<T> ,0 ,vertx: Vertx bus: EventBusImpl send: boolean address: String options: DeliveryOptions ,deliveryOptions{ Params : DeliveryOptions Returns : MessageProducer<T>} write{ Params : T Returns : Future<Void>} write{ Params : T,Promise<Void> Returns : void} address{ Params :  Returns : String} close{ Params :  Returns : Future<Void>} ,deliveryOptions write address close ,,,,MessageProducer ,DeliveryOptions ,,DeliveryOptions ,,vertx: 
vert.x-master,io.vertx.core.eventbus.impl,MessageTagExtractor,1,0,0,0,0,false,0 ,TagExtractor<Message<?>> ,0 ,INSTANCE: MessageTagExtractor ,len{ Params : Message<?> Returns : int} name{ Params : Message<?>,int Returns : String} value{ Params : Message<?>,int Returns : String} ,len name value ,,,,TagExtractor ,,,,MessageTagExtractor IndexOutOfBoundsException IndexOutOfBoundsException ,obj: 
vert.x-master,io.vertx.core.eventbus.impl,OutboundDeliveryContext,1,1,0,0,0,false,DeliveryContextBase<T> ,Handler<AsyncResult<Void>> ,0 ,ctx: ContextInternal options: DeliveryOptions replyHandler: ReplyHandler<T> writePromise: Promise<Void> src: boolean bus: EventBusImpl metrics: EventBusMetrics ,handle{ Params : AsyncResult<Void> Returns : void} written{ Params : Throwable Returns : void} execute{ Params :  Returns : void} send{ Params :  Returns : boolean} body{ Params :  Returns : Object} ,handle execute send body ,,,,Handler ,,,,,message: 
vert.x-master,io.vertx.core.eventbus.impl,ReplyHandler,1,0,0,0,0,false,HandlerRegistration<T> ,Handler<Long> ,0 ,eventBus: EventBusImpl context: ContextInternal result: Promise<Message<T>> timeoutID: long timeout: long src: boolean repliedAddress: String trace: Object ,trace{ Params : Object,Throwable Returns : void} result{ Params :  Returns : Future<Message<T>>} fail{ Params : ReplyException Returns : void} doFail{ Params : ReplyException Returns : void} handle{ Params : Long Returns : void} doReceive{ Params : Message<T> Returns : boolean} register{ Params :  Returns : void} dispatch{ Params : Message<T>,ContextInternal,Handler<Message<T>> Returns : void} ,handle doReceive dispatch ,,,,Handler ,,,,ReplyException ,result: , reply
vert.x-master,io.vertx.core.eventbus,Message,2,1,0,0,0,true,HandlerRegistration<T> ,Handler<Long> ,0 ,,address{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} body{ Params :  Returns : T} replyAddress{ Params :  Returns : String} isSend{ Params :  Returns : boolean} reply{ Params : Object Returns : void} reply{ Params : Object,DeliveryOptions Returns : void} replyAndRequest{ Params : Object Returns : Future<Message<R>>} replyAndRequest{ Params : Object,DeliveryOptions Returns : Future<Message<R>>} fail{ Params : int,String Returns : void} ,,,,,,,,,DeliveryOptions DeliveryOptions ReplyException ,: , new ReplyException(ReplyFailure.RECIPIENT_FAILURE, failureCode, message)
vert.x-master,io.vertx.core.eventbus,MessageCodec,2,1,0,0,0,true,HandlerRegistration<T> ,Handler<Long> ,0 ,,encodeToWire{ Params : Buffer,S Returns : void} decodeFromWire{ Params : int,Buffer Returns : R} transform{ Params : S Returns : R} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,,,,,,,,,,: , new ReplyException(ReplyFailure.RECIPIENT_FAILURE, failureCode, message)
vert.x-master,io.vertx.core.eventbus,MessageConsumer,2,1,0,0,0,true,HandlerRegistration<T> ,Handler<Long> ,0 ,,exceptionHandler{ Params : Handler<Throwable> Returns : MessageConsumer<T>} handler{ Params : Handler<Message<T>> Returns : MessageConsumer<T>} pause{ Params :  Returns : MessageConsumer<T>} resume{ Params :  Returns : MessageConsumer<T>} fetch{ Params : long Returns : MessageConsumer<T>} endHandler{ Params : Handler<Void> Returns : MessageConsumer<T>} bodyStream{ Params :  Returns : ReadStream<T>} isRegistered{ Params :  Returns : boolean} address{ Params :  Returns : String} setMaxBufferedMessages{ Params : int Returns : MessageConsumer<T>} getMaxBufferedMessages{ Params :  Returns : int} completion{ Params :  Returns : Future<Void>} unregister{ Params :  Returns : Future<Void>} ,exceptionHandler handler pause resume fetch endHandler ,,,,,,,,,: , new ReplyException(ReplyFailure.RECIPIENT_FAILURE, failureCode, message)
vert.x-master,io.vertx.core.eventbus,MessageProducer,2,1,0,0,0,true,HandlerRegistration<T> ,Handler<Long> ,0 ,,deliveryOptions{ Params : DeliveryOptions Returns : MessageProducer<T>} address{ Params :  Returns : String} write{ Params : T Returns : Future<Void>} close{ Params :  Returns : Future<Void>} ,,,,,,,,,,: , new ReplyException(ReplyFailure.RECIPIENT_FAILURE, failureCode, message)
vert.x-master,io.vertx.core.eventbus,ReplyException,1,1,0,0,0,false,VertxException ,0 ,0 ,failureType: ReplyFailure failureCode: int ,failureType{ Params :  Returns : ReplyFailure} failureCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,toString ,,,,,int ,,int ,,: 
vert.x-master,io.vertx.core.file,AsyncFile,2,1,0,0,0,true,VertxException ,0 ,0 ,,handler{ Params : Handler<Buffer> Returns : AsyncFile} pause{ Params :  Returns : AsyncFile} resume{ Params :  Returns : AsyncFile} endHandler{ Params : Handler<Void> Returns : AsyncFile} setWriteQueueMaxSize{ Params : int Returns : AsyncFile} drainHandler{ Params : Handler<Void> Returns : AsyncFile} exceptionHandler{ Params : Handler<Throwable> Returns : AsyncFile} fetch{ Params : long Returns : AsyncFile} close{ Params :  Returns : Future<Void>} write{ Params : Buffer,long Returns : Future<Void>} read{ Params : Buffer,int,long,int Returns : Future<Buffer>} flush{ Params :  Returns : Future<Void>} setReadPos{ Params : long Returns : AsyncFile} setReadLength{ Params : long Returns : AsyncFile} getReadLength{ Params :  Returns : long} setWritePos{ Params : long Returns : AsyncFile} getWritePos{ Params :  Returns : long} setReadBufferSize{ Params : int Returns : AsyncFile} sizeBlocking{ Params :  Returns : long} size{ Params :  Returns : Future<Long>} tryLock{ Params :  Returns : AsyncFileLock} tryLock{ Params : long,long,boolean Returns : AsyncFileLock} lock{ Params :  Returns : Future<AsyncFileLock>} lock{ Params : long,long,boolean Returns : Future<AsyncFileLock>} ,handler pause resume endHandler setWriteQueueMaxSize drainHandler exceptionHandler fetch ,,,,,,,,,: 
vert.x-master,io.vertx.core.file,AsyncFileLock,2,1,0,0,0,true,VertxException ,0 ,0 ,,position{ Params :  Returns : long} size{ Params :  Returns : long} isShared{ Params :  Returns : boolean} overlaps{ Params : long,long Returns : boolean} isValidBlocking{ Params :  Returns : boolean} isValid{ Params :  Returns : Future<Boolean>} releaseBlocking{ Params :  Returns : void} release{ Params :  Returns : Future<Void>} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.file,CopyOptions,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_REPLACE_EXISTING: boolean DEFAULT_COPY_ATTRIBUTES: boolean DEFAULT_ATOMIC_MOVE: boolean DEFAULT_NOFOLLOW_LINKS: boolean replaceExisting: boolean copyAttributes: boolean atomicMove: boolean nofollowLinks: boolean ,isReplaceExisting{ Params :  Returns : boolean} setReplaceExisting{ Params : boolean Returns : CopyOptions} isCopyAttributes{ Params :  Returns : boolean} setCopyAttributes{ Params : boolean Returns : CopyOptions} isAtomicMove{ Params :  Returns : boolean} setAtomicMove{ Params : boolean Returns : CopyOptions} isNofollowLinks{ Params :  Returns : boolean} setNofollowLinks{ Params : boolean Returns : CopyOptions} ,,,,,,boolean ,,boolean ,,: 
vert.x-master,io.vertx.core.file,FileProps,2,1,0,0,0,true,0 ,0 ,0 ,,creationTime{ Params :  Returns : long} lastAccessTime{ Params :  Returns : long} lastModifiedTime{ Params :  Returns : long} isDirectory{ Params :  Returns : boolean} isOther{ Params :  Returns : boolean} isRegularFile{ Params :  Returns : boolean} isSymbolicLink{ Params :  Returns : boolean} size{ Params :  Returns : long} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.file,FileSystem,2,1,0,0,0,true,0 ,0 ,0 ,,copy{ Params : String,String Returns : Future<Void>} copy{ Params : String,String,CopyOptions Returns : Future<Void>} copyBlocking{ Params : String,String Returns : FileSystem} copyRecursive{ Params : String,String,boolean Returns : Future<Void>} copyRecursiveBlocking{ Params : String,String,boolean Returns : FileSystem} move{ Params : String,String Returns : Future<Void>} move{ Params : String,String,CopyOptions Returns : Future<Void>} moveBlocking{ Params : String,String Returns : FileSystem} truncate{ Params : String,long Returns : Future<Void>} truncateBlocking{ Params : String,long Returns : FileSystem} chmod{ Params : String,String Returns : Future<Void>} chmodBlocking{ Params : String,String Returns : FileSystem} chmodRecursive{ Params : String,String,String Returns : Future<Void>} chmodRecursiveBlocking{ Params : String,String,String Returns : FileSystem} chown{ Params : String,String,String Returns : Future<Void>} chownBlocking{ Params : String,String,String Returns : FileSystem} props{ Params : String Returns : Future<FileProps>} propsBlocking{ Params : String Returns : FileProps} lprops{ Params : String Returns : Future<FileProps>} lpropsBlocking{ Params : String Returns : FileProps} link{ Params : String,String Returns : Future<Void>} linkBlocking{ Params : String,String Returns : FileSystem} symlink{ Params : String,String Returns : Future<Void>} symlinkBlocking{ Params : String,String Returns : FileSystem} unlink{ Params : String Returns : Future<Void>} unlinkBlocking{ Params : String Returns : FileSystem} readSymlink{ Params : String Returns : Future<String>} readSymlinkBlocking{ Params : String Returns : String} delete{ Params : String Returns : Future<Void>} deleteBlocking{ Params : String Returns : FileSystem} deleteRecursive{ Params : String,boolean Returns : Future<Void>} deleteRecursiveBlocking{ Params : String,boolean Returns : FileSystem} mkdir{ Params : String Returns : Future<Void>} mkdirBlocking{ Params : String Returns : FileSystem} mkdir{ Params : String,String Returns : Future<Void>} mkdirBlocking{ Params : String,String Returns : FileSystem} mkdirs{ Params : String Returns : Future<Void>} mkdirsBlocking{ Params : String Returns : FileSystem} mkdirs{ Params : String,String Returns : Future<Void>} mkdirsBlocking{ Params : String,String Returns : FileSystem} readDir{ Params : String Returns : Future<List<String>>} readDirBlocking{ Params : String Returns : List<String>} readDir{ Params : String,String Returns : Future<List<String>>} readDirBlocking{ Params : String,String Returns : List<String>} readFile{ Params : String Returns : Future<Buffer>} readFileBlocking{ Params : String Returns : Buffer} writeFile{ Params : String,Buffer Returns : Future<Void>} writeFileBlocking{ Params : String,Buffer Returns : FileSystem} open{ Params : String,OpenOptions Returns : Future<AsyncFile>} openBlocking{ Params : String,OpenOptions Returns : AsyncFile} createFile{ Params : String Returns : Future<Void>} createFileBlocking{ Params : String Returns : FileSystem} createFile{ Params : String,String Returns : Future<Void>} createFileBlocking{ Params : String,String Returns : FileSystem} exists{ Params : String Returns : Future<Boolean>} existsBlocking{ Params : String Returns : boolean} fsProps{ Params : String Returns : Future<FileSystemProps>} fsPropsBlocking{ Params : String Returns : FileSystemProps} createTempDirectory{ Params : String Returns : Future<String>} createTempDirectoryBlocking{ Params : String Returns : String} createTempDirectory{ Params : String,String Returns : Future<String>} createTempDirectoryBlocking{ Params : String,String Returns : String} createTempDirectory{ Params : String,String,String Returns : Future<String>} createTempDirectoryBlocking{ Params : String,String,String Returns : String} createTempFile{ Params : String,String Returns : Future<String>} createTempFileBlocking{ Params : String,String Returns : String} createTempFile{ Params : String,String,String Returns : Future<String>} createTempFileBlocking{ Params : String,String,String Returns : String} createTempFile{ Params : String,String,String,String Returns : Future<String>} createTempFileBlocking{ Params : String,String,String,String Returns : String} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.file,FileSystemException,1,1,0,0,0,false,VertxException ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.file,FileSystemOptions,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_FILE_CACHING_ENABLED: boolean DEFAULT_CLASS_PATH_RESOLVING_ENABLED: boolean TMPDIR: String DEFAULT_CACHE_DIR_BASE: String DEFAULT_FILE_CACHING_DIR: String classPathResolvingEnabled: boolean fileCachingEnabled: boolean fileCacheDir: String ,toJson{ Params :  Returns : JsonObject} isClassPathResolvingEnabled{ Params :  Returns : boolean} setClassPathResolvingEnabled{ Params : boolean Returns : FileSystemOptions} isFileCachingEnabled{ Params :  Returns : boolean} setFileCachingEnabled{ Params : boolean Returns : FileSystemOptions} getFileCacheDir{ Params :  Returns : String} setFileCacheDir{ Params : String Returns : FileSystemOptions} toString{ Params :  Returns : String} ,toString ,,,,,String ,,String ,JsonObject ,FileSystemOptionsConverter: , this, json
vert.x-master,io.vertx.core.file,FileSystemProps,2,1,0,0,0,true,0 ,0 ,0 ,,totalSpace{ Params :  Returns : long} unallocatedSpace{ Params :  Returns : long} usableSpace{ Params :  Returns : long} ,,,,,,,,,,FileSystemOptionsConverter: , this, json
vert.x-master,io.vertx.core.file.impl,AsyncFileImpl,1,1,0,0,0,false,0 ,AsyncFile ,0 ,log: Logger DEFAULT_READ_BUFFER_SIZE: int vertx: VertxInternal ch: AsynchronousFileChannel context: ContextInternal closed: boolean closedDeferred: Runnable writesOutstanding: long overflow: boolean exceptionHandler: Handler<Throwable> drainHandler: Handler<Void> writePos: long maxWrites: int lwm: int readBufferSize: int queue: InboundBuffer<Buffer> handler: Handler<Buffer> endHandler: Handler<Void> readPos: long readLength: long LOCK_COMPLETION: CompletionHandler<FileLock, PromiseInternal<AsyncFileLock>> ,close{ Params :  Returns : Future<Void>} end{ Params :  Returns : Future<Void>} read{ Params : Buffer,int,long,int Returns : Future<Buffer>} fetch{ Params : long Returns : AsyncFile} write{ Params : Buffer,long Returns : Future<Void>} doWrite{ Params : Buffer,long,Handler<AsyncResult<Void>> Returns : void} write{ Params : Buffer Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : AsyncFile} setReadBufferSize{ Params : int Returns : AsyncFile} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : AsyncFile} exceptionHandler{ Params : Handler<Throwable> Returns : AsyncFile} handler{ Params : Handler<Buffer> Returns : AsyncFile} endHandler{ Params : Handler<Void> Returns : AsyncFile} pause{ Params :  Returns : AsyncFile} resume{ Params :  Returns : AsyncFile} flush{ Params :  Returns : Future<Void>} setReadPos{ Params : long Returns : AsyncFile} setReadLength{ Params : long Returns : AsyncFile} getReadLength{ Params :  Returns : long} setWritePos{ Params : long Returns : AsyncFile} getWritePos{ Params :  Returns : long} handleException{ Params : Throwable Returns : void} doWrite{ Params : ByteBuffer[],long,Handler<AsyncResult<Void>> Returns : void} doRead{ Params :  Returns : void} doRead{ Params : ByteBuffer Returns : void} handleBuffer{ Params : Buffer Returns : void} handleEnd{ Params :  Returns : void} doFlush{ Params : Handler<AsyncResult<Void>> Returns : void} doWrite{ Params : ByteBuffer,long,long,Handler<AsyncResult<Void>> Returns : void} writeInternal{ Params : ByteBuffer,long,Handler<AsyncResult<Void>> Returns : void} completed{ Params : Integer,Object Returns : void} failed{ Params : Throwable,Object Returns : void} doRead{ Params : Buffer,int,ByteBuffer,long,Promise<Buffer> Returns : void} done{ Params :  Returns : void} completed{ Params : Integer,Object Returns : void} failed{ Params : Throwable,Object Returns : void} check{ Params :  Returns : void} checkClosed{ Params :  Returns : void} checkContext{ Params :  Returns : void} doClose{ Params : Handler<AsyncResult<Void>> Returns : void} closeInternal{ Params : Handler<AsyncResult<Void>> Returns : void} sizeBlocking{ Params :  Returns : long} size{ Params :  Returns : Future<Long>} tryLock{ Params :  Returns : AsyncFileLock} tryLock{ Params : long,long,boolean Returns : AsyncFileLock} lock{ Params :  Returns : Future<AsyncFileLock>} completed{ Params : FileLock,PromiseInternal<AsyncFileLock> Returns : void} failed{ Params : Throwable,PromiseInternal<AsyncFileLock> Returns : void} lock{ Params : long,long,boolean Returns : Future<AsyncFileLock>} ,close end read fetch write write setWriteQueueMaxSize setReadBufferSize writeQueueFull drainHandler exceptionHandler handler endHandler pause resume flush setReadPos setReadLength getReadLength setWritePos getWritePos sizeBlocking size tryLock tryLock lock completed failed lock ,,,,AsyncFile ,,,,FileSystemException HashSet FileSystemException InboundBuffer AtomicInteger AtomicBoolean FileSystemException CompletionHandler CompletionHandler IllegalStateException IllegalStateException FileSystemException AsyncFileLockImpl FileSystemException AsyncFileLockImpl FileSystemException CompletionHandler AsyncFileLockImpl FileSystemException FileSystemException ,promise: 
vert.x-master,io.vertx.core.file.impl,AsyncFileLockImpl,1,1,0,0,0,false,0 ,AsyncFileLock ,0 ,vertx: VertxInternal fileLock: FileLock ,position{ Params :  Returns : long} size{ Params :  Returns : long} isShared{ Params :  Returns : boolean} overlaps{ Params : long,long Returns : boolean} isValidBlocking{ Params :  Returns : boolean} isValid{ Params :  Returns : Future<Boolean>} releaseBlocking{ Params :  Returns : void} release{ Params :  Returns : Future<Void>} ,position size isShared overlaps isValidBlocking isValid releaseBlocking release ,,,,AsyncFileLock ,FileLock ,,FileLock ,FileSystemException FileSystemException ,prom: , new FileSystemException(e)
vert.x-master,io.vertx.core.file.impl,FileCache,1,0,0,0,0,false,0 ,0 ,0 ,shutdownHook: Thread cacheDir: File ,setupCache{ Params : String Returns : FileCache} setupCacheDir{ Params : String Returns : File} registerShutdownHook{ Params :  Returns : void} runHook{ Params :  Returns : void} cacheDir{ Params :  Returns : String} close{ Params :  Returns : void} deleteCacheDir{ Params :  Returns : void} getFile{ Params : String Returns : File} getCanonicalFile{ Params : File Returns : File} relativize{ Params : String Returns : String} cacheFile{ Params : String,File,boolean Returns : File} cacheFile{ Params : String,InputStream,boolean Returns : void} cacheDir{ Params : String Returns : void} fileNameCheck{ Params : File Returns : void} getCacheDir{ Params :  Returns : File} ,,setupCache setupCacheDir ,,,,File ,,File ,FileCache File IllegalStateException VertxException Thread Thread File File File File VertxException IllegalStateException ,: 
vert.x-master,io.vertx.core.file.impl,FilePropsImpl,1,1,0,0,0,false,0 ,FileProps ,0 ,creationTime: long lastAccessTime: long lastModifiedTime: long isDirectory: boolean isOther: boolean isRegularFile: boolean isSymbolicLink: boolean size: long ,creationTime{ Params :  Returns : long} lastAccessTime{ Params :  Returns : long} lastModifiedTime{ Params :  Returns : long} isDirectory{ Params :  Returns : boolean} isOther{ Params :  Returns : boolean} isRegularFile{ Params :  Returns : boolean} isSymbolicLink{ Params :  Returns : boolean} size{ Params :  Returns : long} ,creationTime lastAccessTime lastModifiedTime isDirectory isOther isRegularFile isSymbolicLink size ,,,,FileProps ,long ,,long ,,: 
vert.x-master,io.vertx.core.file.impl,FileResolverImpl,1,1,0,0,0,false,0 ,FileResolver ,0 ,DISABLE_FILE_CACHING_PROP_NAME: String DISABLE_CP_RESOLVING_PROP_NAME: String CACHE_DIR_BASE_PROP_NAME: String NON_UNIX_FILE_SEP: boolean JAR_URL_SEP: String cwd: File enableCaching: boolean enableCPResolving: boolean cache: FileCache ,cacheDir{ Params :  Returns : String} getFileCache{ Params :  Returns : FileCache} close{ Params :  Returns : void} resolveFile{ Params : String Returns : File} isValidWindowsCachePath{ Params : char Returns : boolean} isValidCachePath{ Params : String Returns : boolean} getValidClassLoaderResource{ Params : ClassLoader,String Returns : URL} unpackUrlResource{ Params : URL,String,ClassLoader,boolean Returns : File} unpackFromFileURL{ Params : URL,String,ClassLoader Returns : File} unpackFromJarURL{ Params : URL,String,ClassLoader Returns : File} closeQuietly{ Params : Closeable Returns : void} isBundleUrlDirectory{ Params : URL Returns : boolean} unpackFromBundleURL{ Params : URL,String,boolean Returns : File} getClassLoader{ Params :  Returns : ClassLoader} ,,isValidWindowsCachePath isValidCachePath getValidClassLoaderResource ,,,FileResolver ,FileCache ,,FileCache ,FileSystemOptions File File File File IllegalStateException File VertxException VertxException File ZipFile ZipFile StringBuilder VertxException VertxException ,Object.class: 
vert.x-master,io.vertx.core.file.impl,FileSystemImpl,1,1,0,0,0,false,0 ,FileSystem ,BlockingAction ,DEFAULT_OPTIONS: CopyOptions vertx: VertxInternal ,copy{ Params : String,String Returns : Future<Void>} copy{ Params : String,String,CopyOptions Returns : Future<Void>} copyBlocking{ Params : String,String Returns : FileSystem} copyRecursive{ Params : String,String,boolean Returns : Future<Void>} copyRecursiveBlocking{ Params : String,String,boolean Returns : FileSystem} move{ Params : String,String Returns : Future<Void>} move{ Params : String,String,CopyOptions Returns : Future<Void>} moveBlocking{ Params : String,String Returns : FileSystem} truncate{ Params : String,long Returns : Future<Void>} truncateBlocking{ Params : String,long Returns : FileSystem} chmod{ Params : String,String Returns : Future<Void>} chmodBlocking{ Params : String,String Returns : FileSystem} chmodRecursive{ Params : String,String,String Returns : Future<Void>} chmodRecursiveBlocking{ Params : String,String,String Returns : FileSystem} chown{ Params : String,String,String Returns : Future<Void>} chownBlocking{ Params : String,String,String Returns : FileSystem} props{ Params : String Returns : Future<FileProps>} propsBlocking{ Params : String Returns : FileProps} lprops{ Params : String Returns : Future<FileProps>} lpropsBlocking{ Params : String Returns : FileProps} link{ Params : String,String Returns : Future<Void>} linkBlocking{ Params : String,String Returns : FileSystem} symlink{ Params : String,String Returns : Future<Void>} symlinkBlocking{ Params : String,String Returns : FileSystem} unlink{ Params : String Returns : Future<Void>} unlinkBlocking{ Params : String Returns : FileSystem} readSymlink{ Params : String Returns : Future<String>} readSymlinkBlocking{ Params : String Returns : String} delete{ Params : String Returns : Future<Void>} deleteBlocking{ Params : String Returns : FileSystem} deleteRecursive{ Params : String,boolean Returns : Future<Void>} deleteRecursiveBlocking{ Params : String,boolean Returns : FileSystem} mkdir{ Params : String Returns : Future<Void>} mkdirBlocking{ Params : String Returns : FileSystem} mkdirs{ Params : String Returns : Future<Void>} mkdirsBlocking{ Params : String Returns : FileSystem} mkdir{ Params : String,String Returns : Future<Void>} mkdirBlocking{ Params : String,String Returns : FileSystem} mkdirs{ Params : String,String Returns : Future<Void>} mkdirsBlocking{ Params : String,String Returns : FileSystem} readDir{ Params : String Returns : Future<List<String>>} readDirBlocking{ Params : String Returns : List<String>} readDir{ Params : String,String Returns : Future<List<String>>} readDirBlocking{ Params : String,String Returns : List<String>} readFile{ Params : String Returns : Future<Buffer>} readFileBlocking{ Params : String Returns : Buffer} writeFile{ Params : String,Buffer Returns : Future<Void>} writeFileBlocking{ Params : String,Buffer Returns : FileSystem} open{ Params : String,OpenOptions Returns : Future<AsyncFile>} openBlocking{ Params : String,OpenOptions Returns : AsyncFile} createFile{ Params : String Returns : Future<Void>} createFileBlocking{ Params : String Returns : FileSystem} createFile{ Params : String,String Returns : Future<Void>} createFileBlocking{ Params : String,String Returns : FileSystem} exists{ Params : String Returns : Future<Boolean>} existsBlocking{ Params : String Returns : boolean} fsProps{ Params : String Returns : Future<FileSystemProps>} fsPropsBlocking{ Params : String Returns : FileSystemProps} createTempDirectory{ Params : String Returns : Future<String>} createTempDirectoryBlocking{ Params : String Returns : String} createTempDirectory{ Params : String,String Returns : Future<String>} createTempDirectoryBlocking{ Params : String,String Returns : String} createTempDirectory{ Params : String,String,String Returns : Future<String>} createTempDirectoryBlocking{ Params : String,String,String Returns : String} createTempFile{ Params : String,String Returns : Future<String>} createTempFileBlocking{ Params : String,String Returns : String} createTempFile{ Params : String,String,String Returns : Future<String>} createTempFileBlocking{ Params : String,String,String Returns : String} createTempFile{ Params : String,String,String,String Returns : Future<String>} createTempFileBlocking{ Params : String,String,String,String Returns : String} getFileAccessErrorMessage{ Params : String,String Returns : String} getFolderAccessErrorMessage{ Params : String,String Returns : String} getFileCopyErrorMessage{ Params : String,String Returns : String} getFileMoveErrorMessage{ Params : String,String Returns : String} getFileDualOperationErrorMessage{ Params : String,String,String Returns : String} copyInternal{ Params : String,String,CopyOptions Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} copyRecursiveInternal{ Params : String,String,boolean Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} preVisitDirectory{ Params : Path,BasicFileAttributes Returns : FileVisitResult} visitFile{ Params : Path,BasicFileAttributes Returns : FileVisitResult} moveInternal{ Params : String,String,CopyOptions Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} truncateInternal{ Params : String,long Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} chmodInternal{ Params : String,String Returns : BlockingAction<Void>} chmodInternal{ Params : String,String,String Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} preVisitDirectory{ Params : Path,BasicFileAttributes Returns : FileVisitResult} visitFile{ Params : Path,BasicFileAttributes Returns : FileVisitResult} chownInternal{ Params : String,String,String Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} propsInternal{ Params : String Returns : BlockingAction<FileProps>} lpropsInternal{ Params : String Returns : BlockingAction<FileProps>} props{ Params : String,boolean Returns : BlockingAction<FileProps>} perform{ Params :  Returns : FileProps} linkInternal{ Params : String,String Returns : BlockingAction<Void>} symlinkInternal{ Params : String,String Returns : BlockingAction<Void>} link{ Params : String,String,boolean Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} unlinkInternal{ Params : String Returns : BlockingAction<Void>} readSymlinkInternal{ Params : String Returns : BlockingAction<String>} perform{ Params :  Returns : String} deleteInternal{ Params : String Returns : BlockingAction<Void>} deleteInternal{ Params : String,boolean Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} delete{ Params : Path,boolean Returns : void} visitFile{ Params : Path,BasicFileAttributes Returns : FileVisitResult} postVisitDirectory{ Params : Path,IOException Returns : FileVisitResult} mkdirInternal{ Params : String Returns : BlockingAction<Void>} mkdirInternal{ Params : String,boolean Returns : BlockingAction<Void>} mkdirInternal{ Params : String,String Returns : BlockingAction<Void>} mkdirInternal{ Params : String,String,boolean Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} createTempDirectoryInternal{ Params : String,String,String Returns : BlockingAction<String>} perform{ Params :  Returns : String} createTempFileInternal{ Params : String,String,String,String Returns : BlockingAction<String>} perform{ Params :  Returns : String} readDirInternal{ Params : String Returns : BlockingAction<List<String>>} readDirInternal{ Params : String,String Returns : BlockingAction<List<String>>} perform{ Params :  Returns : List<String>} accept{ Params : File,String Returns : boolean} readFileInternal{ Params : String Returns : BlockingAction<Buffer>} perform{ Params :  Returns : Buffer} writeFileInternal{ Params : String,Buffer Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} openInternal{ Params : String,OpenOptions Returns : BlockingAction<AsyncFile>} perform{ Params :  Returns : AsyncFile} doOpen{ Params : String,OpenOptions,ContextInternal Returns : AsyncFile} createFileInternal{ Params : String Returns : BlockingAction<Void>} createFileInternal{ Params : String,String Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} existsInternal{ Params : String Returns : BlockingAction<Boolean>} perform{ Params :  Returns : Boolean} fsPropsInternal{ Params : String Returns : BlockingAction<FileSystemProps>} perform{ Params :  Returns : FileSystemProps} run{ Params :  Returns : Future<T>} handle{ Params : Promise<T> Returns : void} perform{ Params :  Returns : T} toCopyOptionSet{ Params : CopyOptions Returns : Set<CopyOption>} ,copy copy copyRecursive move move truncate chmod chmodRecursive chown props lprops link symlink unlink readSymlink delete deleteRecursive mkdir mkdirs mkdir mkdirs readDir readDir readFile writeFile open createFile createFile exists fsProps createTempDirectory createTempDirectoryBlocking createTempDirectory createTempDirectoryBlocking createTempDirectory createTempDirectoryBlocking createTempFile createTempFileBlocking createTempFile createTempFileBlocking createTempFile createTempFileBlocking visitFile handle ,getFileAccessErrorMessage getFolderAccessErrorMessage getFileCopyErrorMessage getFileMoveErrorMessage getFileDualOperationErrorMessage delete toCopyOptionSet ,,perform ,FileSystem ,,,,CopyOptions BlockingAction FileSystemException BlockingAction SimpleFileVisitor FileSystemException BlockingAction FileSystemException BlockingAction FileSystemException FileSystemException RandomAccessFile FileSystemException BlockingAction SimpleFileVisitor FileSystemException FileSystemException BlockingAction FileSystemException FileSystemException FileSystemException BlockingAction FilePropsImpl FileSystemException BlockingAction FileSystemException BlockingAction FileSystemException BlockingAction FileSystemException SimpleFileVisitor BlockingAction FileSystemException BlockingAction FileSystemException BlockingAction FileSystemException BlockingAction FileSystemException FileSystemException FilenameFilter ArrayList FileSystemException BlockingAction FileSystemException BlockingAction FileSystemException BlockingAction AsyncFileImpl BlockingAction FileSystemException BlockingAction BlockingAction FileSystemPropsImpl FileSystemException HashSet ,copyOptionSet: , LinkOption.NOFOLLOW_LINKS
vert.x-master,io.vertx.core.file.impl,BlockingAction,3,3,1,0,0,false,0 ,FileSystem ,BlockingAction ,context: ContextInternal ,copy{ Params : String,String Returns : Future<Void>} copy{ Params : String,String,CopyOptions Returns : Future<Void>} copyBlocking{ Params : String,String Returns : FileSystem} copyRecursive{ Params : String,String,boolean Returns : Future<Void>} copyRecursiveBlocking{ Params : String,String,boolean Returns : FileSystem} move{ Params : String,String Returns : Future<Void>} move{ Params : String,String,CopyOptions Returns : Future<Void>} moveBlocking{ Params : String,String Returns : FileSystem} truncate{ Params : String,long Returns : Future<Void>} truncateBlocking{ Params : String,long Returns : FileSystem} chmod{ Params : String,String Returns : Future<Void>} chmodBlocking{ Params : String,String Returns : FileSystem} chmodRecursive{ Params : String,String,String Returns : Future<Void>} chmodRecursiveBlocking{ Params : String,String,String Returns : FileSystem} chown{ Params : String,String,String Returns : Future<Void>} chownBlocking{ Params : String,String,String Returns : FileSystem} props{ Params : String Returns : Future<FileProps>} propsBlocking{ Params : String Returns : FileProps} lprops{ Params : String Returns : Future<FileProps>} lpropsBlocking{ Params : String Returns : FileProps} link{ Params : String,String Returns : Future<Void>} linkBlocking{ Params : String,String Returns : FileSystem} symlink{ Params : String,String Returns : Future<Void>} symlinkBlocking{ Params : String,String Returns : FileSystem} unlink{ Params : String Returns : Future<Void>} unlinkBlocking{ Params : String Returns : FileSystem} readSymlink{ Params : String Returns : Future<String>} readSymlinkBlocking{ Params : String Returns : String} delete{ Params : String Returns : Future<Void>} deleteBlocking{ Params : String Returns : FileSystem} deleteRecursive{ Params : String,boolean Returns : Future<Void>} deleteRecursiveBlocking{ Params : String,boolean Returns : FileSystem} mkdir{ Params : String Returns : Future<Void>} mkdirBlocking{ Params : String Returns : FileSystem} mkdirs{ Params : String Returns : Future<Void>} mkdirsBlocking{ Params : String Returns : FileSystem} mkdir{ Params : String,String Returns : Future<Void>} mkdirBlocking{ Params : String,String Returns : FileSystem} mkdirs{ Params : String,String Returns : Future<Void>} mkdirsBlocking{ Params : String,String Returns : FileSystem} readDir{ Params : String Returns : Future<List<String>>} readDirBlocking{ Params : String Returns : List<String>} readDir{ Params : String,String Returns : Future<List<String>>} readDirBlocking{ Params : String,String Returns : List<String>} readFile{ Params : String Returns : Future<Buffer>} readFileBlocking{ Params : String Returns : Buffer} writeFile{ Params : String,Buffer Returns : Future<Void>} writeFileBlocking{ Params : String,Buffer Returns : FileSystem} open{ Params : String,OpenOptions Returns : Future<AsyncFile>} openBlocking{ Params : String,OpenOptions Returns : AsyncFile} createFile{ Params : String Returns : Future<Void>} createFileBlocking{ Params : String Returns : FileSystem} createFile{ Params : String,String Returns : Future<Void>} createFileBlocking{ Params : String,String Returns : FileSystem} exists{ Params : String Returns : Future<Boolean>} existsBlocking{ Params : String Returns : boolean} fsProps{ Params : String Returns : Future<FileSystemProps>} fsPropsBlocking{ Params : String Returns : FileSystemProps} createTempDirectory{ Params : String Returns : Future<String>} createTempDirectoryBlocking{ Params : String Returns : String} createTempDirectory{ Params : String,String Returns : Future<String>} createTempDirectoryBlocking{ Params : String,String Returns : String} createTempDirectory{ Params : String,String,String Returns : Future<String>} createTempDirectoryBlocking{ Params : String,String,String Returns : String} createTempFile{ Params : String,String Returns : Future<String>} createTempFileBlocking{ Params : String,String Returns : String} createTempFile{ Params : String,String,String Returns : Future<String>} createTempFileBlocking{ Params : String,String,String Returns : String} createTempFile{ Params : String,String,String,String Returns : Future<String>} createTempFileBlocking{ Params : String,String,String,String Returns : String} getFileAccessErrorMessage{ Params : String,String Returns : String} getFolderAccessErrorMessage{ Params : String,String Returns : String} getFileCopyErrorMessage{ Params : String,String Returns : String} getFileMoveErrorMessage{ Params : String,String Returns : String} getFileDualOperationErrorMessage{ Params : String,String,String Returns : String} copyInternal{ Params : String,String,CopyOptions Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} copyRecursiveInternal{ Params : String,String,boolean Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} preVisitDirectory{ Params : Path,BasicFileAttributes Returns : FileVisitResult} visitFile{ Params : Path,BasicFileAttributes Returns : FileVisitResult} moveInternal{ Params : String,String,CopyOptions Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} truncateInternal{ Params : String,long Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} chmodInternal{ Params : String,String Returns : BlockingAction<Void>} chmodInternal{ Params : String,String,String Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} preVisitDirectory{ Params : Path,BasicFileAttributes Returns : FileVisitResult} visitFile{ Params : Path,BasicFileAttributes Returns : FileVisitResult} chownInternal{ Params : String,String,String Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} propsInternal{ Params : String Returns : BlockingAction<FileProps>} lpropsInternal{ Params : String Returns : BlockingAction<FileProps>} props{ Params : String,boolean Returns : BlockingAction<FileProps>} perform{ Params :  Returns : FileProps} linkInternal{ Params : String,String Returns : BlockingAction<Void>} symlinkInternal{ Params : String,String Returns : BlockingAction<Void>} link{ Params : String,String,boolean Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} unlinkInternal{ Params : String Returns : BlockingAction<Void>} readSymlinkInternal{ Params : String Returns : BlockingAction<String>} perform{ Params :  Returns : String} deleteInternal{ Params : String Returns : BlockingAction<Void>} deleteInternal{ Params : String,boolean Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} delete{ Params : Path,boolean Returns : void} visitFile{ Params : Path,BasicFileAttributes Returns : FileVisitResult} postVisitDirectory{ Params : Path,IOException Returns : FileVisitResult} mkdirInternal{ Params : String Returns : BlockingAction<Void>} mkdirInternal{ Params : String,boolean Returns : BlockingAction<Void>} mkdirInternal{ Params : String,String Returns : BlockingAction<Void>} mkdirInternal{ Params : String,String,boolean Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} createTempDirectoryInternal{ Params : String,String,String Returns : BlockingAction<String>} perform{ Params :  Returns : String} createTempFileInternal{ Params : String,String,String,String Returns : BlockingAction<String>} perform{ Params :  Returns : String} readDirInternal{ Params : String Returns : BlockingAction<List<String>>} readDirInternal{ Params : String,String Returns : BlockingAction<List<String>>} perform{ Params :  Returns : List<String>} accept{ Params : File,String Returns : boolean} readFileInternal{ Params : String Returns : BlockingAction<Buffer>} perform{ Params :  Returns : Buffer} writeFileInternal{ Params : String,Buffer Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} openInternal{ Params : String,OpenOptions Returns : BlockingAction<AsyncFile>} perform{ Params :  Returns : AsyncFile} doOpen{ Params : String,OpenOptions,ContextInternal Returns : AsyncFile} createFileInternal{ Params : String Returns : BlockingAction<Void>} createFileInternal{ Params : String,String Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} existsInternal{ Params : String Returns : BlockingAction<Boolean>} perform{ Params :  Returns : Boolean} fsPropsInternal{ Params : String Returns : BlockingAction<FileSystemProps>} perform{ Params :  Returns : FileSystemProps} run{ Params :  Returns : Future<T>} handle{ Params : Promise<T> Returns : void} perform{ Params :  Returns : T} toCopyOptionSet{ Params : CopyOptions Returns : Set<CopyOption>} ,copy copy copyRecursive move move truncate chmod chmodRecursive chown props lprops link symlink unlink readSymlink delete deleteRecursive mkdir mkdirs mkdir mkdirs readDir readDir readFile writeFile open createFile createFile exists fsProps createTempDirectory createTempDirectoryBlocking createTempDirectory createTempDirectoryBlocking createTempDirectory createTempDirectoryBlocking createTempFile createTempFileBlocking createTempFile createTempFileBlocking createTempFile createTempFileBlocking visitFile handle ,getFileAccessErrorMessage getFolderAccessErrorMessage getFileCopyErrorMessage getFileMoveErrorMessage getFileDualOperationErrorMessage delete toCopyOptionSet ,,perform ,Handler ,,,,,fut: , e
vert.x-master,io.vertx.core.file.impl,FileSystemPropsImpl,1,1,0,0,0,false,0 ,FileSystemProps ,0 ,totalSpace: long unallocatedSpace: long usableSpace: long ,totalSpace{ Params :  Returns : long} unallocatedSpace{ Params :  Returns : long} usableSpace{ Params :  Returns : long} ,totalSpace unallocatedSpace usableSpace ,,,,FileSystemProps ,long ,,long ,,fut: , e
vert.x-master,io.vertx.core.file.impl,WindowsFileSystem,1,1,0,0,0,false,FileSystemImpl ,0 ,0 ,log: Logger ,logInternal{ Params : String Returns : void} chmodInternal{ Params : String,String,String Returns : BlockingAction<Void>} perform{ Params :  Returns : Void} mkdirInternal{ Params : String,String,boolean Returns : BlockingAction<Void>} doOpen{ Params : String,OpenOptions,ContextInternal Returns : AsyncFile} createFileInternal{ Params : String,String Returns : BlockingAction<Void>} chownInternal{ Params : String,String,String Returns : BlockingAction<Void>} ,chmodInternal perform mkdirInternal doOpen createFileInternal chownInternal ,logInternal ,,,,,,,BlockingAction AsyncFileImpl ,super: , path, user, group
vert.x-master,io.vertx.core.file,OpenOptions,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_PERMS: String DEFAULT_READ: boolean DEFAULT_WRITE: boolean DEFAULT_CREATE: boolean DEFAULT_CREATENEW: boolean DEFAULT_DSYNC: boolean DEFAULT_SYNC: boolean DEFAULT_DELETEONCLOSE: boolean DEFAULT_TRUNCATEEXISTING: boolean DEFAULT_SPARSE: boolean DEFAULT_APPEND: boolean perms: String read: boolean write: boolean create: boolean createNew: boolean dsync: boolean sync: boolean deleteOnClose: boolean truncateExisting: boolean sparse: boolean append: boolean ,getPerms{ Params :  Returns : String} setPerms{ Params : String Returns : OpenOptions} isRead{ Params :  Returns : boolean} setRead{ Params : boolean Returns : OpenOptions} isWrite{ Params :  Returns : boolean} setWrite{ Params : boolean Returns : OpenOptions} isCreate{ Params :  Returns : boolean} setCreate{ Params : boolean Returns : OpenOptions} isCreateNew{ Params :  Returns : boolean} setCreateNew{ Params : boolean Returns : OpenOptions} isDeleteOnClose{ Params :  Returns : boolean} setDeleteOnClose{ Params : boolean Returns : OpenOptions} isTruncateExisting{ Params :  Returns : boolean} setTruncateExisting{ Params : boolean Returns : OpenOptions} isSparse{ Params :  Returns : boolean} setSparse{ Params : boolean Returns : OpenOptions} isSync{ Params :  Returns : boolean} setSync{ Params : boolean Returns : OpenOptions} isDsync{ Params :  Returns : boolean} setDsync{ Params : boolean Returns : OpenOptions} isAppend{ Params :  Returns : boolean} setAppend{ Params : boolean Returns : OpenOptions} ,,,,,,boolean ,,boolean ,,super: , path, user, group
vert.x-master,io.vertx.core,Future,2,1,0,0,0,true,0 ,0 ,0 ,,future{ Params : Handler<Promise<T>> Returns : Future<T>} succeededFuture{ Params :  Returns : Future<T>} succeededFuture{ Params : T Returns : Future<T>} failedFuture{ Params : Throwable Returns : Future<T>} failedFuture{ Params : String Returns : Future<T>} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} onSuccess{ Params : Handler<T> Returns : Future<T>} onFailure{ Params : Handler<Throwable> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} flatMap{ Params : Function<T,Future<U>> Returns : Future<U>} compose{ Params : Function<T,Future<U>> Returns : Future<U>} recover{ Params : Function<Throwable,Future<T>> Returns : Future<T>} compose{ Params : Function<T,Future<U>>,Function<Throwable,Future<U>> Returns : Future<U>} transform{ Params : Function<AsyncResult<T>,Future<U>> Returns : Future<U>} eventually{ Params : Function<Void,Future<U>> Returns : Future<T>} map{ Params : Function<T,U> Returns : Future<U>} map{ Params : V Returns : Future<V>} mapEmpty{ Params :  Returns : Future<V>} otherwise{ Params : Function<Throwable,T> Returns : Future<T>} otherwise{ Params : T Returns : Future<T>} otherwiseEmpty{ Params :  Returns : Future<T>} andThen{ Params : Handler<AsyncResult<T>> Returns : Future<T>} toCompletionStage{ Params :  Returns : CompletionStage<T>} fromCompletionStage{ Params : CompletionStage<T> Returns : Future<T>} fromCompletionStage{ Params : CompletionStage<T>,Context Returns : Future<T>} ,result cause succeeded failed mapEmpty ,future succeededFuture succeededFuture failedFuture failedFuture fromCompletionStage fromCompletionStage ,,,,,,,SucceededFuture FailedFuture FailedFuture CompletableFuture ,promise: 
vert.x-master,io.vertx.core,Handler,2,1,0,0,0,true,0 ,0 ,0 ,,handle{ Params : E Returns : void} ,,,,,,,,,,promise: 
vert.x-master,io.vertx.core.http,ConnectionPoolTooBusyException,1,1,0,0,0,false,VertxException ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.http,Cookie,2,1,0,0,0,true,VertxException ,0 ,0 ,,cookie{ Params : String,String Returns : Cookie} getName{ Params :  Returns : String} getValue{ Params :  Returns : String} setValue{ Params : String Returns : Cookie} setDomain{ Params : String Returns : Cookie} getDomain{ Params :  Returns : String} setPath{ Params : String Returns : Cookie} getPath{ Params :  Returns : String} setMaxAge{ Params : long Returns : Cookie} getMaxAge{ Params :  Returns : long} setSecure{ Params : boolean Returns : Cookie} isSecure{ Params :  Returns : boolean} setHttpOnly{ Params : boolean Returns : Cookie} isHttpOnly{ Params :  Returns : boolean} setSameSite{ Params : CookieSameSite Returns : Cookie} getSameSite{ Params :  Returns : CookieSameSite} encode{ Params :  Returns : String} ,,cookie ,,,,,,,CookieImpl ,promise: 
vert.x-master,io.vertx.core.http,GoAway,1,1,0,0,0,false,0 ,0 ,0 ,errorCode: long lastStreamId: int debugData: Buffer ,getErrorCode{ Params :  Returns : long} setErrorCode{ Params : long Returns : GoAway} getLastStreamId{ Params :  Returns : int} setLastStreamId{ Params : int Returns : GoAway} getDebugData{ Params :  Returns : Buffer} setDebugData{ Params : Buffer Returns : GoAway} toJson{ Params :  Returns : JsonObject} ,,,,,,Buffer ,,Buffer ,JsonObject ,GoAwayConverter: , this, json
vert.x-master,io.vertx.core.http,Http2Settings,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_HEADER_TABLE_SIZE: long DEFAULT_ENABLE_PUSH: boolean DEFAULT_MAX_CONCURRENT_STREAMS: long DEFAULT_INITIAL_WINDOW_SIZE: int DEFAULT_MAX_FRAME_SIZE: int DEFAULT_MAX_HEADER_LIST_SIZE: int DEFAULT_EXTRA_SETTINGS: Map<Integer, Long> headerTableSize: long pushEnabled: boolean maxConcurrentStreams: long initialWindowSize: int maxFrameSize: int maxHeaderListSize: long extraSettings: Map<Integer, Long> ,getHeaderTableSize{ Params :  Returns : long} setHeaderTableSize{ Params : long Returns : Http2Settings} isPushEnabled{ Params :  Returns : boolean} setPushEnabled{ Params : boolean Returns : Http2Settings} getMaxConcurrentStreams{ Params :  Returns : long} setMaxConcurrentStreams{ Params : long Returns : Http2Settings} getInitialWindowSize{ Params :  Returns : int} setInitialWindowSize{ Params : int Returns : Http2Settings} getMaxFrameSize{ Params :  Returns : int} setMaxFrameSize{ Params : int Returns : Http2Settings} getMaxHeaderListSize{ Params :  Returns : long} setMaxHeaderListSize{ Params : long Returns : Http2Settings} getExtraSettings{ Params :  Returns : Map<Integer,Long>} setExtraSettings{ Params : Map<Integer,Long> Returns : Http2Settings} get{ Params : int Returns : Long} set{ Params : int,long Returns : Http2Settings} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} toJson{ Params :  Returns : JsonObject} ,equals hashCode toString ,,,,,Map<Integer,Long> ,,Map<Integer,Long> ,HashMap HashMap JsonObject ,Http2SettingsConverter: , this, json
vert.x-master,io.vertx.core.http,HttpClient,2,1,0,0,0,true,0 ,0 ,0 ,,request{ Params : RequestOptions Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,int,String,String Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,String,String Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,String Returns : Future<HttpClientRequest>} webSocket{ Params : int,String,String Returns : Future<WebSocket>} webSocket{ Params : String,String Returns : Future<WebSocket>} webSocket{ Params : String Returns : Future<WebSocket>} webSocket{ Params : WebSocketConnectOptions Returns : Future<WebSocket>} webSocketAbs{ Params : String,MultiMap,WebsocketVersion,List<String> Returns : Future<WebSocket>} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} connectionHandler{ Params : Handler<HttpConnection> Returns : HttpClient} redirectHandler{ Params : Function<HttpClientResponse,Future<RequestOptions>> Returns : HttpClient} redirectHandler{ Params :  Returns : Function<HttpClientResponse,Future<RequestOptions>>} close{ Params :  Returns : Future<Void>} close{ Params : long,TimeUnit Returns : Future<Void>} ,,,,,,,,,,: , 0, TimeUnit.SECONDS
vert.x-master,io.vertx.core.http,HttpClientOptions,1,1,0,0,0,false,ClientOptionsBase ,0 ,0 ,DEFAULT_MAX_POOL_SIZE: int DEFAULT_HTTP2_MAX_POOL_SIZE: int DEFAULT_HTTP2_MULTIPLEXING_LIMIT: int DEFAULT_HTTP2_CONNECTION_WINDOW_SIZE: int DEFAULT_HTTP2_KEEP_ALIVE_TIMEOUT: int DEFAULT_KEEP_ALIVE: boolean DEFAULT_PIPELINING: boolean DEFAULT_PIPELINING_LIMIT: int DEFAULT_KEEP_ALIVE_TIMEOUT: int DEFAULT_TRY_USE_COMPRESSION: boolean DEFAULT_VERIFY_HOST: boolean DEFAULT_MAX_WEBSOCKET_FRAME_SIZE: int DEFAULT_MAX_WEBSOCKET_MESSAGE_SIZE: int DEFAULT_MAX_WEBSOCKETS: int DEFAULT_DEFAULT_HOST: String DEFAULT_DEFAULT_PORT: int DEFAULT_PROTOCOL_VERSION: HttpVersion DEFAULT_MAX_CHUNK_SIZE: int DEFAULT_MAX_INITIAL_LINE_LENGTH: int DEFAULT_MAX_HEADER_SIZE: int DEFAULT_MAX_WAIT_QUEUE_SIZE: int DEFAULT_ALPN_VERSIONS: List<HttpVersion> DEFAULT_HTTP2_CLEAR_TEXT_UPGRADE: boolean DEFAULT_HTTP2_CLEAR_TEXT_UPGRADE_WITH_PREFLIGHT_REQUEST: boolean DEFAULT_SEND_UNMASKED_FRAMES: boolean DEFAULT_MAX_REDIRECTS: int DEFAULT_FORCE_SNI: boolean DEFAULT_DECODER_INITIAL_BUFFER_SIZE: int DEFAULT_TRY_USE_PER_FRAME_WEBSOCKET_COMPRESSION: boolean DEFAULT_TRY_USE_PER_MESSAGE_WEBSOCKET_COMPRESSION: boolean DEFAULT_WEBSOCKET_COMPRESSION_LEVEL: int DEFAULT_WEBSOCKET_ALLOW_CLIENT_NO_CONTEXT: boolean DEFAULT_WEBSOCKET_REQUEST_SERVER_NO_CONTEXT: boolean DEFAULT_POOL_CLEANER_PERIOD: int DEFAULT_POOL_EVENT_LOOP_SIZE: int DEFAULT_WEBSOCKET_CLOSING_TIMEOUT: int DEFAULT_TRACING_POLICY: TracingPolicy DEFAULT_SHARED: boolean DEFAULT_NAME: String verifyHost: boolean maxPoolSize: int keepAlive: boolean keepAliveTimeout: int pipeliningLimit: int pipelining: boolean http2MaxPoolSize: int http2MultiplexingLimit: int http2ConnectionWindowSize: int http2KeepAliveTimeout: int poolCleanerPeriod: int poolEventLoopSize: int tryUseCompression: boolean maxWebSocketFrameSize: int maxWebSocketMessageSize: int maxWebSockets: int defaultHost: String defaultPort: int protocolVersion: HttpVersion maxChunkSize: int maxInitialLineLength: int maxHeaderSize: int maxWaitQueueSize: int initialSettings: Http2Settings alpnVersions: List<HttpVersion> http2ClearTextUpgrade: boolean http2ClearTextUpgradeWithPreflightRequest: boolean sendUnmaskedFrames: boolean maxRedirects: int forceSni: boolean decoderInitialBufferSize: int tryUsePerFrameWebSocketCompression: boolean tryUsePerMessageWebSocketCompression: boolean webSocketCompressionLevel: int webSocketAllowClientNoContext: boolean webSocketRequestServerNoContext: boolean webSocketClosingTimeout: int tracingPolicy: TracingPolicy shared: boolean name: String ,toJson{ Params :  Returns : JsonObject} init{ Params :  Returns : void} setSendBufferSize{ Params : int Returns : HttpClientOptions} setReceiveBufferSize{ Params : int Returns : HttpClientOptions} setReuseAddress{ Params : boolean Returns : HttpClientOptions} setReusePort{ Params : boolean Returns : HttpClientOptions} setTrafficClass{ Params : int Returns : HttpClientOptions} setTcpNoDelay{ Params : boolean Returns : HttpClientOptions} setTcpKeepAlive{ Params : boolean Returns : HttpClientOptions} setSoLinger{ Params : int Returns : HttpClientOptions} setIdleTimeout{ Params : int Returns : HttpClientOptions} setReadIdleTimeout{ Params : int Returns : HttpClientOptions} setWriteIdleTimeout{ Params : int Returns : HttpClientOptions} setIdleTimeoutUnit{ Params : TimeUnit Returns : HttpClientOptions} setSsl{ Params : boolean Returns : HttpClientOptions} setKeyCertOptions{ Params : KeyCertOptions Returns : HttpClientOptions} setKeyStoreOptions{ Params : JksOptions Returns : HttpClientOptions} setPfxKeyCertOptions{ Params : PfxOptions Returns : HttpClientOptions} setTrustOptions{ Params : TrustOptions Returns : HttpClientOptions} setPemKeyCertOptions{ Params : PemKeyCertOptions Returns : HttpClientOptions} setTrustStoreOptions{ Params : JksOptions Returns : HttpClientOptions} setPfxTrustOptions{ Params : PfxOptions Returns : HttpClientOptions} setPemTrustOptions{ Params : PemTrustOptions Returns : HttpClientOptions} addEnabledCipherSuite{ Params : String Returns : HttpClientOptions} removeEnabledCipherSuite{ Params : String Returns : HttpClientOptions} addEnabledSecureTransportProtocol{ Params : String Returns : HttpClientOptions} removeEnabledSecureTransportProtocol{ Params : String Returns : HttpClientOptions} setTcpFastOpen{ Params : boolean Returns : HttpClientOptions} setTcpCork{ Params : boolean Returns : HttpClientOptions} setTcpQuickAck{ Params : boolean Returns : HttpClientOptions} setTcpUserTimeout{ Params : int Returns : HttpClientOptions} addCrlPath{ Params : String Returns : HttpClientOptions} addCrlValue{ Params : Buffer Returns : HttpClientOptions} setConnectTimeout{ Params : int Returns : HttpClientOptions} setTrustAll{ Params : boolean Returns : HttpClientOptions} setEnabledSecureTransportProtocols{ Params : Set<String> Returns : HttpClientOptions} setSslHandshakeTimeout{ Params : long Returns : HttpClientOptions} setSslHandshakeTimeoutUnit{ Params : TimeUnit Returns : HttpClientOptions} getMaxPoolSize{ Params :  Returns : int} setMaxPoolSize{ Params : int Returns : HttpClientOptions} getHttp2MultiplexingLimit{ Params :  Returns : int} setHttp2MultiplexingLimit{ Params : int Returns : HttpClientOptions} getHttp2MaxPoolSize{ Params :  Returns : int} setHttp2MaxPoolSize{ Params : int Returns : HttpClientOptions} getHttp2ConnectionWindowSize{ Params :  Returns : int} setHttp2ConnectionWindowSize{ Params : int Returns : HttpClientOptions} getHttp2KeepAliveTimeout{ Params :  Returns : int} setHttp2KeepAliveTimeout{ Params : int Returns : HttpClientOptions} isKeepAlive{ Params :  Returns : boolean} setKeepAlive{ Params : boolean Returns : HttpClientOptions} getKeepAliveTimeout{ Params :  Returns : int} setKeepAliveTimeout{ Params : int Returns : HttpClientOptions} isPipelining{ Params :  Returns : boolean} setPipelining{ Params : boolean Returns : HttpClientOptions} getPipeliningLimit{ Params :  Returns : int} setPipeliningLimit{ Params : int Returns : HttpClientOptions} isVerifyHost{ Params :  Returns : boolean} setVerifyHost{ Params : boolean Returns : HttpClientOptions} isTryUseCompression{ Params :  Returns : boolean} setTryUseCompression{ Params : boolean Returns : HttpClientOptions} isSendUnmaskedFrames{ Params :  Returns : boolean} setSendUnmaskedFrames{ Params : boolean Returns : HttpClientOptions} getMaxWebSocketFrameSize{ Params :  Returns : int} setMaxWebSocketFrameSize{ Params : int Returns : HttpClientOptions} getMaxWebSocketMessageSize{ Params :  Returns : int} setMaxWebSocketMessageSize{ Params : int Returns : HttpClientOptions} getMaxWebSockets{ Params :  Returns : int} setMaxWebSockets{ Params : int Returns : HttpClientOptions} getDefaultHost{ Params :  Returns : String} setDefaultHost{ Params : String Returns : HttpClientOptions} getDefaultPort{ Params :  Returns : int} setDefaultPort{ Params : int Returns : HttpClientOptions} getProtocolVersion{ Params :  Returns : HttpVersion} setProtocolVersion{ Params : HttpVersion Returns : HttpClientOptions} setMaxChunkSize{ Params : int Returns : HttpClientOptions} getMaxChunkSize{ Params :  Returns : int} getMaxInitialLineLength{ Params :  Returns : int} setMaxInitialLineLength{ Params : int Returns : HttpClientOptions} getMaxHeaderSize{ Params :  Returns : int} setMaxHeaderSize{ Params : int Returns : HttpClientOptions} setMaxWaitQueueSize{ Params : int Returns : HttpClientOptions} getMaxWaitQueueSize{ Params :  Returns : int} getInitialSettings{ Params :  Returns : Http2Settings} setInitialSettings{ Params : Http2Settings Returns : HttpClientOptions} setUseAlpn{ Params : boolean Returns : HttpClientOptions} setSslEngineOptions{ Params : SSLEngineOptions Returns : HttpClientOptions} setJdkSslEngineOptions{ Params : JdkSSLEngineOptions Returns : HttpClientOptions} setOpenSslEngineOptions{ Params : OpenSSLEngineOptions Returns : HttpClientOptions} getAlpnVersions{ Params :  Returns : List<HttpVersion>} setAlpnVersions{ Params : List<HttpVersion> Returns : HttpClientOptions} isHttp2ClearTextUpgrade{ Params :  Returns : boolean} setHttp2ClearTextUpgrade{ Params : boolean Returns : HttpClientOptions} isHttp2ClearTextUpgradeWithPreflightRequest{ Params :  Returns : boolean} setHttp2ClearTextUpgradeWithPreflightRequest{ Params : boolean Returns : HttpClientOptions} getMaxRedirects{ Params :  Returns : int} setMaxRedirects{ Params : int Returns : HttpClientOptions} isForceSni{ Params :  Returns : boolean} setForceSni{ Params : boolean Returns : HttpClientOptions} setMetricsName{ Params : String Returns : HttpClientOptions} setProxyOptions{ Params : ProxyOptions Returns : HttpClientOptions} setNonProxyHosts{ Params : List<String> Returns : HttpClientOptions} addNonProxyHost{ Params : String Returns : HttpClientOptions} setLocalAddress{ Params : String Returns : HttpClientOptions} setLogActivity{ Params : boolean Returns : HttpClientOptions} setActivityLogDataFormat{ Params : ByteBufFormat Returns : HttpClientOptions} setTryUsePerFrameWebSocketCompression{ Params : boolean Returns : HttpClientOptions} getTryWebSocketDeflateFrameCompression{ Params :  Returns : boolean} setTryUsePerMessageWebSocketCompression{ Params : boolean Returns : HttpClientOptions} getTryUsePerMessageWebSocketCompression{ Params :  Returns : boolean} setWebSocketCompressionLevel{ Params : int Returns : HttpClientOptions} getWebSocketCompressionLevel{ Params :  Returns : int} setWebSocketCompressionAllowClientNoContext{ Params : boolean Returns : HttpClientOptions} getWebSocketCompressionAllowClientNoContext{ Params :  Returns : boolean} setWebSocketCompressionRequestServerNoContext{ Params : boolean Returns : HttpClientOptions} getWebSocketCompressionRequestServerNoContext{ Params :  Returns : boolean} getWebSocketClosingTimeout{ Params :  Returns : int} setWebSocketClosingTimeout{ Params : int Returns : HttpClientOptions} getDecoderInitialBufferSize{ Params :  Returns : int} setDecoderInitialBufferSize{ Params : int Returns : HttpClientOptions} getPoolCleanerPeriod{ Params :  Returns : int} setPoolCleanerPeriod{ Params : int Returns : HttpClientOptions} getPoolEventLoopSize{ Params :  Returns : int} setPoolEventLoopSize{ Params : int Returns : HttpClientOptions} getTracingPolicy{ Params :  Returns : TracingPolicy} setTracingPolicy{ Params : TracingPolicy Returns : HttpClientOptions} isShared{ Params :  Returns : boolean} setShared{ Params : boolean Returns : HttpClientOptions} getName{ Params :  Returns : String} setName{ Params : String Returns : HttpClientOptions} ,setSendBufferSize setReceiveBufferSize setReuseAddress setReusePort setTrafficClass setTcpNoDelay setTcpKeepAlive setSoLinger setIdleTimeout setReadIdleTimeout setWriteIdleTimeout setIdleTimeoutUnit setSsl setKeyCertOptions setKeyStoreOptions setPfxKeyCertOptions setTrustOptions setPemKeyCertOptions setTrustStoreOptions setPfxTrustOptions setPemTrustOptions addEnabledCipherSuite removeEnabledCipherSuite addEnabledSecureTransportProtocol removeEnabledSecureTransportProtocol setTcpFastOpen setTcpCork setTcpQuickAck setTcpUserTimeout addCrlPath addCrlValue setConnectTimeout setTrustAll setEnabledSecureTransportProtocols setSslHandshakeTimeout setSslHandshakeTimeoutUnit setUseAlpn setSslEngineOptions setJdkSslEngineOptions setOpenSslEngineOptions setNonProxyHosts addNonProxyHost setLocalAddress setLogActivity setActivityLogDataFormat ,,,,,String ,,String ,Http2Settings ArrayList Http2Settings ArrayList IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException ,Objects: , name, "Client name cannot be null"
vert.x-master,io.vertx.core.http,HttpClientRequest,2,1,0,0,0,true,ClientOptionsBase ,0 ,0 ,,exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientRequest} setWriteQueueMaxSize{ Params : int Returns : HttpClientRequest} drainHandler{ Params : Handler<Void> Returns : HttpClientRequest} setHost{ Params : String Returns : HttpClientRequest} getHost{ Params :  Returns : String} setPort{ Params : int Returns : HttpClientRequest} getPort{ Params :  Returns : int} setFollowRedirects{ Params : boolean Returns : HttpClientRequest} setMaxRedirects{ Params : int Returns : HttpClientRequest} setChunked{ Params : boolean Returns : HttpClientRequest} isChunked{ Params :  Returns : boolean} getMethod{ Params :  Returns : HttpMethod} setMethod{ Params : HttpMethod Returns : HttpClientRequest} absoluteURI{ Params :  Returns : String} getURI{ Params :  Returns : String} setURI{ Params : String Returns : HttpClientRequest} path{ Params :  Returns : String} query{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} putHeader{ Params : String,String Returns : HttpClientRequest} putHeader{ Params : CharSequence,CharSequence Returns : HttpClientRequest} putHeader{ Params : String,Iterable<String> Returns : HttpClientRequest} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : HttpClientRequest} version{ Params :  Returns : HttpVersion} write{ Params : String Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} continueHandler{ Params : Handler<Void> Returns : HttpClientRequest} earlyHintsHandler{ Params : Handler<MultiMap> Returns : HttpClientRequest} sendHead{ Params :  Returns : Future<Void>} connect{ Params :  Returns : Future<HttpClientResponse>} response{ Params :  Returns : Future<HttpClientResponse>} send{ Params :  Returns : Future<HttpClientResponse>} send{ Params : String Returns : Future<HttpClientResponse>} send{ Params : Buffer Returns : Future<HttpClientResponse>} send{ Params : ReadStream<Buffer> Returns : Future<HttpClientResponse>} end{ Params : String Returns : Future<Void>} end{ Params : String,String Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params :  Returns : Future<Void>} setTimeout{ Params : long Returns : HttpClientRequest} pushHandler{ Params : Handler<HttpClientRequest> Returns : HttpClientRequest} reset{ Params :  Returns : boolean} reset{ Params : long Returns : boolean} reset{ Params : long,Throwable Returns : boolean} connection{ Params :  Returns : HttpConnection} writeCustomFrame{ Params : int,int,Buffer Returns : HttpClientRequest} streamId{ Params :  Returns : int} writeCustomFrame{ Params : HttpFrame Returns : HttpClientRequest} setStreamPriority{ Params : StreamPriority Returns : HttpClientRequest} getStreamPriority{ Params :  Returns : StreamPriority} ,exceptionHandler setWriteQueueMaxSize drainHandler end end ,,,,,,,,,frame: 
vert.x-master,io.vertx.core.http,HttpClientResponse,2,1,0,0,0,true,ClientOptionsBase ,0 ,0 ,,fetch{ Params : long Returns : HttpClientResponse} resume{ Params :  Returns : HttpClientResponse} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientResponse} handler{ Params : Handler<Buffer> Returns : HttpClientResponse} pause{ Params :  Returns : HttpClientResponse} endHandler{ Params : Handler<Void> Returns : HttpClientResponse} netSocket{ Params :  Returns : NetSocket} version{ Params :  Returns : HttpVersion} statusCode{ Params :  Returns : int} statusMessage{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} getHeader{ Params : String Returns : String} getHeader{ Params : CharSequence Returns : String} getTrailer{ Params : String Returns : String} trailers{ Params :  Returns : MultiMap} cookies{ Params :  Returns : List<String>} bodyHandler{ Params : Handler<Buffer> Returns : HttpClientResponse} body{ Params :  Returns : Future<Buffer>} end{ Params :  Returns : Future<Void>} customFrameHandler{ Params : Handler<HttpFrame> Returns : HttpClientResponse} request{ Params :  Returns : HttpClientRequest} streamPriorityHandler{ Params : Handler<StreamPriority> Returns : HttpClientResponse} ,fetch resume exceptionHandler handler pause endHandler ,,,,,,,,,: 
vert.x-master,io.vertx.core.http,HttpClosedException,1,1,0,0,0,false,VertxException ,0 ,0 ,goAway: GoAway ,formatErrorMessage{ Params : GoAway Returns : String} goAway{ Params :  Returns : GoAway} ,,formatErrorMessage ,,,,GoAway ,,GoAway ,GoAway ,goAway: 
vert.x-master,io.vertx.core.http,HttpConnection,2,1,0,0,0,true,VertxException ,0 ,0 ,,getWindowSize{ Params :  Returns : int} setWindowSize{ Params : int Returns : HttpConnection} goAway{ Params : long Returns : HttpConnection} goAway{ Params : long,int Returns : HttpConnection} goAway{ Params : long,int,Buffer Returns : HttpConnection} goAwayHandler{ Params : Handler<GoAway> Returns : HttpConnection} shutdownHandler{ Params : Handler<Void> Returns : HttpConnection} shutdown{ Params :  Returns : Future<Void>} shutdown{ Params : long Returns : Future<Void>} closeHandler{ Params : Handler<Void> Returns : HttpConnection} close{ Params :  Returns : Future<Void>} settings{ Params :  Returns : Http2Settings} updateSettings{ Params : Http2Settings Returns : Future<Void>} remoteSettings{ Params :  Returns : Http2Settings} remoteSettingsHandler{ Params : Handler<Http2Settings> Returns : HttpConnection} ping{ Params : Buffer Returns : Future<Buffer>} pingHandler{ Params : Handler<Buffer> Returns : HttpConnection} exceptionHandler{ Params : Handler<Throwable> Returns : HttpConnection} remoteAddress{ Params :  Returns : SocketAddress} remoteAddress{ Params : boolean Returns : SocketAddress} localAddress{ Params :  Returns : SocketAddress} localAddress{ Params : boolean Returns : SocketAddress} isSsl{ Params :  Returns : boolean} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} peerCertificates{ Params :  Returns : List<Certificate>} indicatedServerName{ Params :  Returns : String} ,,,,,,,,,,: , 30000L
vert.x-master,io.vertx.core.http,HttpFrame,2,1,0,0,0,true,VertxException ,0 ,0 ,,type{ Params :  Returns : int} flags{ Params :  Returns : int} payload{ Params :  Returns : Buffer} ,,,,,,,,,,: , 30000L
vert.x-master,io.vertx.core.http,HttpHeaders,2,1,0,0,0,true,VertxException ,0 ,0 ,DISABLE_HTTP_HEADERS_VALIDATION_PROP_NAME: String DISABLE_HTTP_HEADERS_VALIDATION: boolean ACCEPT: CharSequence ACCEPT_CHARSET: CharSequence ACCEPT_ENCODING: CharSequence ACCEPT_LANGUAGE: CharSequence ACCEPT_RANGES: CharSequence ACCEPT_PATCH: CharSequence ACCESS_CONTROL_ALLOW_CREDENTIALS: CharSequence ACCESS_CONTROL_ALLOW_HEADERS: CharSequence ACCESS_CONTROL_ALLOW_METHODS: CharSequence ACCESS_CONTROL_ALLOW_ORIGIN: CharSequence ACCESS_CONTROL_ALLOW_PRIVATE_NETWORK: CharSequence ACCESS_CONTROL_EXPOSE_HEADERS: CharSequence ACCESS_CONTROL_MAX_AGE: CharSequence ACCESS_CONTROL_REQUEST_HEADERS: CharSequence ACCESS_CONTROL_REQUEST_METHOD: CharSequence ACCESS_CONTROL_REQUEST_PRIVATE_NETWORK: CharSequence AGE: CharSequence ALLOW: CharSequence AUTHORIZATION: CharSequence CACHE_CONTROL: CharSequence CONNECTION: CharSequence CONTENT_BASE: CharSequence CONTENT_DISPOSITION: CharSequence CONTENT_ENCODING: CharSequence CONTENT_LANGUAGE: CharSequence CONTENT_LENGTH: CharSequence CONTENT_LOCATION: CharSequence CONTENT_TRANSFER_ENCODING: CharSequence CONTENT_MD5: CharSequence CONTENT_RANGE: CharSequence CONTENT_TYPE: CharSequence COOKIE: CharSequence DATE: CharSequence ETAG: CharSequence EXPECT: CharSequence EXPIRES: CharSequence FROM: CharSequence HOST: CharSequence IF_MATCH: CharSequence IF_MODIFIED_SINCE: CharSequence IF_NONE_MATCH: CharSequence LAST_MODIFIED: CharSequence LOCATION: CharSequence ORIGIN: CharSequence PROXY_AUTHENTICATE: CharSequence PROXY_AUTHORIZATION: CharSequence REFERER: CharSequence RETRY_AFTER: CharSequence SERVER: CharSequence TRANSFER_ENCODING: CharSequence USER_AGENT: CharSequence SET_COOKIE: CharSequence APPLICATION_X_WWW_FORM_URLENCODED: CharSequence CHUNKED: CharSequence CLOSE: CharSequence CONTINUE: CharSequence IDENTITY: CharSequence KEEP_ALIVE: CharSequence UPGRADE: CharSequence WEBSOCKET: CharSequence DEFLATE_GZIP: CharSequence DEFLATE_GZIP_BR: CharSequence TEXT_HTML: CharSequence GET: CharSequence VARY: CharSequence ,createOptimized{ Params : String Returns : CharSequence} headers{ Params :  Returns : MultiMap} set{ Params : String,String Returns : MultiMap} set{ Params : CharSequence,CharSequence Returns : MultiMap} ,,createOptimized headers set set ,,,,,,,AsciiString ,HeadersMultiMap: 
vert.x-master,io.vertx.core.http,HttpMethod,1,1,0,0,0,false,0 ,0 ,0 ,OPTIONS: HttpMethod GET: HttpMethod HEAD: HttpMethod POST: HttpMethod PUT: HttpMethod DELETE: HttpMethod TRACE: HttpMethod CONNECT: HttpMethod PATCH: HttpMethod PROPFIND: HttpMethod PROPPATCH: HttpMethod MKCOL: HttpMethod COPY: HttpMethod MOVE: HttpMethod LOCK: HttpMethod UNLOCK: HttpMethod MKCALENDAR: HttpMethod VERSION_CONTROL: HttpMethod REPORT: HttpMethod CHECKOUT: HttpMethod CHECKIN: HttpMethod UNCHECKOUT: HttpMethod MKWORKSPACE: HttpMethod UPDATE: HttpMethod LABEL: HttpMethod MERGE: HttpMethod BASELINE_CONTROL: HttpMethod MKACTIVITY: HttpMethod ORDERPATCH: HttpMethod ACL: HttpMethod SEARCH: HttpMethod ALL: List<HttpMethod> nettyMethod: io.netty.handler.codec.http.HttpMethod ,values{ Params :  Returns : List<HttpMethod>} fromNetty{ Params : io.netty.handler.codec.http.HttpMethod Returns : HttpMethod} _fromNetty{ Params : io.netty.handler.codec.http.HttpMethod Returns : HttpMethod} valueOf{ Params : String Returns : HttpMethod} toJson{ Params :  Returns : JsonObject} name{ Params :  Returns : String} toString{ Params :  Returns : String} hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} toNetty{ Params :  Returns : io.netty.handler.codec.http.HttpMethod} ,hashCode equals ,values fromNetty _fromNetty valueOf ,,,,io.netty.handler.codec.http.HttpMethod ,,io.netty.handler.codec.http.HttpMethod ,HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod HttpMethod UnsupportedOperationException ,that: 
vert.x-master,io.vertx.core.http,HttpServer,2,1,0,0,0,true,0 ,0 ,0 ,,requestHandler{ Params : Handler<HttpServerRequest> Returns : HttpServer} requestHandler{ Params :  Returns : Handler<HttpServerRequest>} invalidRequestHandler{ Params : Handler<HttpServerRequest> Returns : HttpServer} connectionHandler{ Params : Handler<HttpConnection> Returns : HttpServer} exceptionHandler{ Params : Handler<Throwable> Returns : HttpServer} webSocketHandler{ Params : Handler<ServerWebSocket> Returns : HttpServer} webSocketHandler{ Params :  Returns : Handler<ServerWebSocket>} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} listen{ Params :  Returns : Future<HttpServer>} listen{ Params : int,String Returns : Future<HttpServer>} listen{ Params : SocketAddress Returns : Future<HttpServer>} listen{ Params : int Returns : Future<HttpServer>} close{ Params :  Returns : Future<Void>} actualPort{ Params :  Returns : int} ,,,,,,,,,SocketAddressImpl ,: , port, "0.0.0.0"
vert.x-master,io.vertx.core.http,HttpServerFileUpload,2,1,0,0,0,true,0 ,0 ,0 ,,exceptionHandler{ Params : Handler<Throwable> Returns : HttpServerFileUpload} handler{ Params : Handler<Buffer> Returns : HttpServerFileUpload} endHandler{ Params : Handler<Void> Returns : HttpServerFileUpload} pause{ Params :  Returns : HttpServerFileUpload} resume{ Params :  Returns : HttpServerFileUpload} fetch{ Params : long Returns : HttpServerFileUpload} streamToFileSystem{ Params : String Returns : Future<Void>} cancelStreamToFileSystem{ Params :  Returns : boolean} filename{ Params :  Returns : String} name{ Params :  Returns : String} contentType{ Params :  Returns : String} contentTransferEncoding{ Params :  Returns : String} charset{ Params :  Returns : String} size{ Params :  Returns : long} isSizeAvailable{ Params :  Returns : boolean} file{ Params :  Returns : AsyncFile} ,exceptionHandler handler endHandler pause resume fetch ,,,,,,,,,: , port, "0.0.0.0"
vert.x-master,io.vertx.core.http,HttpServerOptions,1,1,0,0,0,false,NetServerOptions ,0 ,0 ,DEFAULT_PORT: int DEFAULT_COMPRESSION_SUPPORTED: boolean DEFAULT_COMPRESSION_LEVEL: int DEFAULT_MAX_WEBSOCKET_FRAME_SIZE: int DEFAULT_MAX_WEBSOCKET_MESSAGE_SIZE: int DEFAULT_MAX_CHUNK_SIZE: int DEFAULT_MAX_INITIAL_LINE_LENGTH: int DEFAULT_MAX_HEADER_SIZE: int DEFAULT_MAX_FORM_ATTRIBUTE_SIZE: int DEFAULT_HANDLE_100_CONTINE_AUTOMATICALLY: boolean DEFAULT_ALPN_VERSIONS: List<HttpVersion> DEFAULT_INITIAL_SETTINGS_MAX_CONCURRENT_STREAMS: long DEFAULT_HTTP2_CONNECTION_WINDOW_SIZE: int DEFAULT_DECOMPRESSION_SUPPORTED: boolean DEFAULT_ACCEPT_UNMASKED_FRAMES: boolean DEFAULT_DECODER_INITIAL_BUFFER_SIZE: int DEFAULT_PER_FRAME_WEBSOCKET_COMPRESSION_SUPPORTED: boolean DEFAULT_PER_MESSAGE_WEBSOCKET_COMPRESSION_SUPPORTED: boolean DEFAULT_WEBSOCKET_COMPRESSION_LEVEL: int DEFAULT_WEBSOCKET_ALLOW_SERVER_NO_CONTEXT: boolean DEFAULT_WEBSOCKET_PREFERRED_CLIENT_NO_CONTEXT: boolean DEFAULT_WEBSOCKET_CLOSING_TIMEOUT: int DEFAULT_TRACING_POLICY: TracingPolicy DEFAULT_REGISTER_WEBSOCKET_WRITE_HANDLERS: boolean compressionSupported: boolean compressionLevel: int compressors: List<CompressionOptions> maxWebSocketFrameSize: int maxWebSocketMessageSize: int webSocketSubProtocols: List<String> handle100ContinueAutomatically: boolean maxChunkSize: int maxInitialLineLength: int maxHeaderSize: int maxFormAttributeSize: int initialSettings: Http2Settings alpnVersions: List<HttpVersion> http2ConnectionWindowSize: int decompressionSupported: boolean acceptUnmaskedFrames: boolean decoderInitialBufferSize: int perFrameWebSocketCompressionSupported: boolean perMessageWebSocketCompressionSupported: boolean webSocketCompressionLevel: int webSocketAllowServerNoContext: boolean webSocketPreferredClientNoContext: boolean webSocketClosingTimeout: int tracingPolicy: TracingPolicy registerWebSocketWriteHandlers: boolean ,toJson{ Params :  Returns : JsonObject} init{ Params :  Returns : void} setSendBufferSize{ Params : int Returns : HttpServerOptions} setReceiveBufferSize{ Params : int Returns : HttpServerOptions} setReuseAddress{ Params : boolean Returns : HttpServerOptions} setReusePort{ Params : boolean Returns : HttpServerOptions} setTrafficClass{ Params : int Returns : HttpServerOptions} setTcpNoDelay{ Params : boolean Returns : HttpServerOptions} setTcpKeepAlive{ Params : boolean Returns : HttpServerOptions} setSoLinger{ Params : int Returns : HttpServerOptions} setIdleTimeout{ Params : int Returns : HttpServerOptions} setReadIdleTimeout{ Params : int Returns : HttpServerOptions} setWriteIdleTimeout{ Params : int Returns : HttpServerOptions} setIdleTimeoutUnit{ Params : TimeUnit Returns : HttpServerOptions} setSsl{ Params : boolean Returns : HttpServerOptions} setUseAlpn{ Params : boolean Returns : HttpServerOptions} setKeyCertOptions{ Params : KeyCertOptions Returns : HttpServerOptions} setKeyStoreOptions{ Params : JksOptions Returns : HttpServerOptions} setPfxKeyCertOptions{ Params : PfxOptions Returns : HttpServerOptions} setPemKeyCertOptions{ Params : PemKeyCertOptions Returns : HttpServerOptions} setTrustOptions{ Params : TrustOptions Returns : HttpServerOptions} setTrustStoreOptions{ Params : JksOptions Returns : HttpServerOptions} setPemTrustOptions{ Params : PemTrustOptions Returns : HttpServerOptions} setPfxTrustOptions{ Params : PfxOptions Returns : HttpServerOptions} addEnabledCipherSuite{ Params : String Returns : HttpServerOptions} removeEnabledCipherSuite{ Params : String Returns : HttpServerOptions} addEnabledSecureTransportProtocol{ Params : String Returns : HttpServerOptions} removeEnabledSecureTransportProtocol{ Params : String Returns : HttpServerOptions} setTcpFastOpen{ Params : boolean Returns : HttpServerOptions} setTcpCork{ Params : boolean Returns : HttpServerOptions} setTcpQuickAck{ Params : boolean Returns : HttpServerOptions} addCrlPath{ Params : String Returns : HttpServerOptions} addCrlValue{ Params : Buffer Returns : HttpServerOptions} setAcceptBacklog{ Params : int Returns : HttpServerOptions} setPort{ Params : int Returns : HttpServerOptions} setHost{ Params : String Returns : HttpServerOptions} setClientAuth{ Params : ClientAuth Returns : HttpServerOptions} setSslEngineOptions{ Params : SSLEngineOptions Returns : HttpServerOptions} setJdkSslEngineOptions{ Params : JdkSSLEngineOptions Returns : HttpServerOptions} setOpenSslEngineOptions{ Params : OpenSSLEngineOptions Returns : HttpServerOptions} setEnabledSecureTransportProtocols{ Params : Set<String> Returns : HttpServerOptions} setSslHandshakeTimeout{ Params : long Returns : HttpServerOptions} setSslHandshakeTimeoutUnit{ Params : TimeUnit Returns : HttpServerOptions} isCompressionSupported{ Params :  Returns : boolean} setCompressionSupported{ Params : boolean Returns : HttpServerOptions} getCompressionLevel{ Params :  Returns : int} setCompressionLevel{ Params : int Returns : HttpServerOptions} getCompressors{ Params :  Returns : List<CompressionOptions>} addCompressor{ Params : CompressionOptions Returns : HttpServerOptions} setCompressors{ Params : List<CompressionOptions> Returns : HttpServerOptions} isAcceptUnmaskedFrames{ Params :  Returns : boolean} setAcceptUnmaskedFrames{ Params : boolean Returns : HttpServerOptions} getMaxWebSocketFrameSize{ Params :  Returns : int} setMaxWebSocketFrameSize{ Params : int Returns : HttpServerOptions} getMaxWebSocketMessageSize{ Params :  Returns : int} setMaxWebSocketMessageSize{ Params : int Returns : HttpServerOptions} addWebSocketSubProtocol{ Params : String Returns : HttpServerOptions} setWebSocketSubProtocols{ Params : List<String> Returns : HttpServerOptions} getWebSocketSubProtocols{ Params :  Returns : List<String>} isHandle100ContinueAutomatically{ Params :  Returns : boolean} setHandle100ContinueAutomatically{ Params : boolean Returns : HttpServerOptions} setMaxChunkSize{ Params : int Returns : HttpServerOptions} getMaxChunkSize{ Params :  Returns : int} getMaxInitialLineLength{ Params :  Returns : int} setMaxInitialLineLength{ Params : int Returns : HttpServerOptions} getMaxHeaderSize{ Params :  Returns : int} setMaxHeaderSize{ Params : int Returns : HttpServerOptions} getMaxFormAttributeSize{ Params :  Returns : int} setMaxFormAttributeSize{ Params : int Returns : HttpServerOptions} getInitialSettings{ Params :  Returns : Http2Settings} setInitialSettings{ Params : Http2Settings Returns : HttpServerOptions} getAlpnVersions{ Params :  Returns : List<HttpVersion>} setAlpnVersions{ Params : List<HttpVersion> Returns : HttpServerOptions} getHttp2ConnectionWindowSize{ Params :  Returns : int} setHttp2ConnectionWindowSize{ Params : int Returns : HttpServerOptions} setLogActivity{ Params : boolean Returns : HttpServerOptions} setActivityLogDataFormat{ Params : ByteBufFormat Returns : HttpServerOptions} setSni{ Params : boolean Returns : HttpServerOptions} setUseProxyProtocol{ Params : boolean Returns : HttpServerOptions} setProxyProtocolTimeout{ Params : long Returns : HttpServerOptions} setProxyProtocolTimeoutUnit{ Params : TimeUnit Returns : HttpServerOptions} isDecompressionSupported{ Params :  Returns : boolean} setDecompressionSupported{ Params : boolean Returns : HttpServerOptions} getDecoderInitialBufferSize{ Params :  Returns : int} setDecoderInitialBufferSize{ Params : int Returns : HttpServerOptions} setPerFrameWebSocketCompressionSupported{ Params : boolean Returns : HttpServerOptions} getPerFrameWebSocketCompressionSupported{ Params :  Returns : boolean} setPerMessageWebSocketCompressionSupported{ Params : boolean Returns : HttpServerOptions} getPerMessageWebSocketCompressionSupported{ Params :  Returns : boolean} setWebSocketCompressionLevel{ Params : int Returns : HttpServerOptions} getWebSocketCompressionLevel{ Params :  Returns : int} setWebSocketAllowServerNoContext{ Params : boolean Returns : HttpServerOptions} getWebSocketAllowServerNoContext{ Params :  Returns : boolean} setWebSocketPreferredClientNoContext{ Params : boolean Returns : HttpServerOptions} getWebSocketPreferredClientNoContext{ Params :  Returns : boolean} getWebSocketClosingTimeout{ Params :  Returns : int} setWebSocketClosingTimeout{ Params : int Returns : HttpServerOptions} getTracingPolicy{ Params :  Returns : TracingPolicy} setTracingPolicy{ Params : TracingPolicy Returns : HttpServerOptions} isRegisterWriteHandler{ Params :  Returns : boolean} setRegisterWriteHandler{ Params : boolean Returns : HttpServerOptions} isRegisterWebSocketWriteHandlers{ Params :  Returns : boolean} setRegisterWebSocketWriteHandlers{ Params : boolean Returns : HttpServerOptions} ,setSendBufferSize setReceiveBufferSize setReuseAddress setReusePort setTrafficClass setTcpNoDelay setTcpKeepAlive setSoLinger setIdleTimeout setReadIdleTimeout setWriteIdleTimeout setIdleTimeoutUnit setSsl setUseAlpn setKeyCertOptions setKeyStoreOptions setPfxKeyCertOptions setPemKeyCertOptions setTrustOptions setTrustStoreOptions setPemTrustOptions setPfxTrustOptions addEnabledCipherSuite removeEnabledCipherSuite addEnabledSecureTransportProtocol removeEnabledSecureTransportProtocol setTcpFastOpen setTcpCork setTcpQuickAck addCrlPath addCrlValue setAcceptBacklog setHost setClientAuth setSslEngineOptions setJdkSslEngineOptions setOpenSslEngineOptions setEnabledSecureTransportProtocols setSslHandshakeTimeout setSslHandshakeTimeoutUnit setLogActivity setActivityLogDataFormat setSni setUseProxyProtocol setProxyProtocolTimeout setProxyProtocolTimeoutUnit isRegisterWriteHandler setRegisterWriteHandler ,,,,,boolean ,,boolean ,ArrayList ArrayList Http2Settings ArrayList Http2Settings ArrayList ArrayList ArrayList ,Arguments: , decoderInitialBufferSize > 0, "initialBufferSizeHttpDecoder must be > 0"
vert.x-master,io.vertx.core.http,HttpServerRequest,2,1,0,0,0,true,NetServerOptions ,0 ,0 ,DEFAULT_INVALID_REQUEST_HANDLER: Handler<HttpServerRequest> ,exceptionHandler{ Params : Handler<Throwable> Returns : HttpServerRequest} handler{ Params : Handler<Buffer> Returns : HttpServerRequest} pause{ Params :  Returns : HttpServerRequest} resume{ Params :  Returns : HttpServerRequest} fetch{ Params : long Returns : HttpServerRequest} endHandler{ Params : Handler<Void> Returns : HttpServerRequest} version{ Params :  Returns : HttpVersion} method{ Params :  Returns : HttpMethod} isSSL{ Params :  Returns : boolean} scheme{ Params :  Returns : String} uri{ Params :  Returns : String} path{ Params :  Returns : String} query{ Params :  Returns : String} host{ Params :  Returns : String} bytesRead{ Params :  Returns : long} response{ Params :  Returns : HttpServerResponse} headers{ Params :  Returns : MultiMap} getHeader{ Params : String Returns : String} getHeader{ Params : CharSequence Returns : String} setParamsCharset{ Params : String Returns : HttpServerRequest} getParamsCharset{ Params :  Returns : String} params{ Params :  Returns : MultiMap} getParam{ Params : String Returns : String} getParam{ Params : String,String Returns : String} remoteAddress{ Params :  Returns : SocketAddress} localAddress{ Params :  Returns : SocketAddress} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} absoluteURI{ Params :  Returns : String} bodyHandler{ Params : Handler<Buffer> Returns : HttpServerRequest} body{ Params :  Returns : Future<Buffer>} end{ Params :  Returns : Future<Void>} toNetSocket{ Params :  Returns : Future<NetSocket>} setExpectMultipart{ Params : boolean Returns : HttpServerRequest} isExpectMultipart{ Params :  Returns : boolean} uploadHandler{ Params : Handler<HttpServerFileUpload> Returns : HttpServerRequest} formAttributes{ Params :  Returns : MultiMap} getFormAttribute{ Params : String Returns : String} streamId{ Params :  Returns : int} toWebSocket{ Params :  Returns : Future<ServerWebSocket>} isEnded{ Params :  Returns : boolean} customFrameHandler{ Params : Handler<HttpFrame> Returns : HttpServerRequest} connection{ Params :  Returns : HttpConnection} streamPriority{ Params :  Returns : StreamPriority} streamPriorityHandler{ Params : Handler<StreamPriority> Returns : HttpServerRequest} decoderResult{ Params :  Returns : DecoderResult} getCookie{ Params : String Returns : Cookie} getCookie{ Params : String,String,String Returns : Cookie} cookieCount{ Params :  Returns : int} cookieMap{ Params :  Returns : Map<String,Cookie>} cookies{ Params : String Returns : Set<Cookie>} cookies{ Params :  Returns : Set<Cookie>} routed{ Params : String Returns : HttpServerRequest} ,exceptionHandler handler pause resume fetch endHandler ,,,,,,,,,Collectors: , Cookie::getName, cookie -> cookie
vert.x-master,io.vertx.core.http,HttpServerResponse,2,1,0,0,0,true,NetServerOptions ,0 ,0 ,,exceptionHandler{ Params : Handler<Throwable> Returns : HttpServerResponse} setWriteQueueMaxSize{ Params : int Returns : HttpServerResponse} drainHandler{ Params : Handler<Void> Returns : HttpServerResponse} getStatusCode{ Params :  Returns : int} setStatusCode{ Params : int Returns : HttpServerResponse} getStatusMessage{ Params :  Returns : String} setStatusMessage{ Params : String Returns : HttpServerResponse} setChunked{ Params : boolean Returns : HttpServerResponse} isChunked{ Params :  Returns : boolean} headers{ Params :  Returns : MultiMap} putHeader{ Params : String,String Returns : HttpServerResponse} putHeader{ Params : CharSequence,CharSequence Returns : HttpServerResponse} putHeader{ Params : String,Iterable<String> Returns : HttpServerResponse} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : HttpServerResponse} trailers{ Params :  Returns : MultiMap} putTrailer{ Params : String,String Returns : HttpServerResponse} putTrailer{ Params : CharSequence,CharSequence Returns : HttpServerResponse} putTrailer{ Params : String,Iterable<String> Returns : HttpServerResponse} putTrailer{ Params : CharSequence,Iterable<CharSequence> Returns : HttpServerResponse} closeHandler{ Params : Handler<Void> Returns : HttpServerResponse} endHandler{ Params : Handler<Void> Returns : HttpServerResponse} write{ Params : String,String Returns : Future<Void>} write{ Params : String Returns : Future<Void>} writeContinue{ Params :  Returns : HttpServerResponse} writeEarlyHints{ Params : MultiMap Returns : Future<Void>} end{ Params : String Returns : Future<Void>} end{ Params : String,String Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params :  Returns : Future<Void>} send{ Params :  Returns : Future<Void>} send{ Params : String Returns : Future<Void>} send{ Params : Buffer Returns : Future<Void>} send{ Params : ReadStream<Buffer> Returns : Future<Void>} sendFile{ Params : String Returns : Future<Void>} sendFile{ Params : String,long Returns : Future<Void>} sendFile{ Params : String,long,long Returns : Future<Void>} close{ Params :  Returns : void} ended{ Params :  Returns : boolean} closed{ Params :  Returns : boolean} headWritten{ Params :  Returns : boolean} headersEndHandler{ Params : Handler<Void> Returns : HttpServerResponse} bodyEndHandler{ Params : Handler<Void> Returns : HttpServerResponse} bytesWritten{ Params :  Returns : long} streamId{ Params :  Returns : int} push{ Params : HttpMethod,String,String Returns : Future<HttpServerResponse>} push{ Params : HttpMethod,String,MultiMap Returns : Future<HttpServerResponse>} push{ Params : HttpMethod,String Returns : Future<HttpServerResponse>} push{ Params : HttpMethod,String,String,MultiMap Returns : Future<HttpServerResponse>} reset{ Params :  Returns : boolean} reset{ Params : long Returns : boolean} writeCustomFrame{ Params : int,int,Buffer Returns : HttpServerResponse} writeCustomFrame{ Params : HttpFrame Returns : HttpServerResponse} setStreamPriority{ Params : StreamPriority Returns : HttpServerResponse} addCookie{ Params : Cookie Returns : HttpServerResponse} removeCookie{ Params : String Returns : Cookie} removeCookie{ Params : String,boolean Returns : Cookie} removeCookies{ Params : String Returns : Set<Cookie>} removeCookies{ Params : String,boolean Returns : Set<Cookie>} removeCookie{ Params : String,String,String Returns : Cookie} removeCookie{ Params : String,String,String,boolean Returns : Cookie} ,exceptionHandler setWriteQueueMaxSize drainHandler end end ,,,,,,,,,: , name, domain, path, true
vert.x-master,io.vertx.core.http.impl,AssembledFullHttpRequest,1,0,0,0,0,false,AssembledHttpRequest ,FullHttpRequest ,0 ,,toLastContent{ Params : ByteBuf Returns : LastHttpContent} replace{ Params : ByteBuf Returns : AssembledFullHttpRequest} retainedDuplicate{ Params :  Returns : AssembledFullHttpRequest} setUri{ Params : String Returns : AssembledFullHttpRequest} setProtocolVersion{ Params : HttpVersion Returns : AssembledFullHttpRequest} setMethod{ Params : HttpMethod Returns : AssembledFullHttpRequest} duplicate{ Params :  Returns : AssembledFullHttpRequest} copy{ Params :  Returns : AssembledFullHttpRequest} trailingHeaders{ Params :  Returns : HttpHeaders} retain{ Params :  Returns : AssembledFullHttpRequest} retain{ Params : int Returns : AssembledFullHttpRequest} touch{ Params : Object Returns : AssembledFullHttpRequest} touch{ Params :  Returns : AssembledFullHttpRequest} ,replace retainedDuplicate setUri setProtocolVersion setMethod duplicate copy trailingHeaders retain retain touch touch ,toLastContent ,,,FullHttpRequest ,,,,DefaultLastHttpContent UnsupportedOperationException UnsupportedOperationException ,super: 
vert.x-master,io.vertx.core.http.impl,AssembledFullHttpResponse,1,0,0,0,0,false,AssembledHttpResponse ,FullHttpResponse ,0 ,trailingHeaders: HttpHeaders ,trailingHeaders{ Params :  Returns : HttpHeaders} setStatus{ Params : HttpResponseStatus Returns : AssembledFullHttpResponse} retain{ Params : int Returns : AssembledFullHttpResponse} retain{ Params :  Returns : AssembledFullHttpResponse} duplicate{ Params :  Returns : AssembledFullHttpResponse} copy{ Params :  Returns : AssembledFullHttpResponse} retainedDuplicate{ Params :  Returns : AssembledFullHttpResponse} replace{ Params : ByteBuf Returns : AssembledFullHttpResponse} setProtocolVersion{ Params : HttpVersion Returns : AssembledFullHttpResponse} touch{ Params :  Returns : AssembledFullHttpResponse} touch{ Params : Object Returns : AssembledFullHttpResponse} ,trailingHeaders setStatus retain retain duplicate copy retainedDuplicate replace setProtocolVersion touch touch ,,,,FullHttpResponse ,HttpHeaders ,,HttpHeaders ,,super: , hint
vert.x-master,io.vertx.core.http.impl,AssembledHttpRequest,1,0,0,0,0,false,0 ,HttpContent HttpRequest ,0 ,request: HttpRequest content: HttpContent ,copy{ Params :  Returns : AssembledHttpRequest} duplicate{ Params :  Returns : AssembledHttpRequest} retainedDuplicate{ Params :  Returns : HttpContent} replace{ Params : ByteBuf Returns : HttpContent} retain{ Params :  Returns : AssembledHttpRequest} retain{ Params : int Returns : AssembledHttpRequest} touch{ Params : Object Returns : AssembledHttpRequest} touch{ Params :  Returns : AssembledHttpRequest} method{ Params :  Returns : HttpMethod} getMethod{ Params :  Returns : HttpMethod} uri{ Params :  Returns : String} getUri{ Params :  Returns : String} headers{ Params :  Returns : HttpHeaders} setMethod{ Params : HttpMethod Returns : HttpRequest} protocolVersion{ Params :  Returns : HttpVersion} getProtocolVersion{ Params :  Returns : HttpVersion} setUri{ Params : String Returns : HttpRequest} setProtocolVersion{ Params : HttpVersion Returns : HttpRequest} decoderResult{ Params :  Returns : DecoderResult} getDecoderResult{ Params :  Returns : DecoderResult} setDecoderResult{ Params : DecoderResult Returns : void} content{ Params :  Returns : ByteBuf} refCnt{ Params :  Returns : int} release{ Params :  Returns : boolean} release{ Params : int Returns : boolean} ,copy duplicate retainedDuplicate replace retain retain touch touch method getMethod uri getUri headers setMethod protocolVersion getProtocolVersion setUri setProtocolVersion decoderResult getDecoderResult setDecoderResult content refCnt release release ,,,,HttpContent HttpRequest ,,,,DefaultHttpContent UnsupportedOperationException UnsupportedOperationException UnsupportedMessageTypeException UnsupportedMessageTypeException ,content: , decrement
vert.x-master,io.vertx.core.http.impl,AssembledHttpResponse,1,0,0,0,0,false,0 ,io.netty.handler.codec.http.HttpResponse HttpContent ,0 ,head: boolean status: HttpResponseStatus version: HttpVersion headers: HttpHeaders content: ByteBuf result: DecoderResult ,head{ Params :  Returns : boolean} copy{ Params :  Returns : HttpContent} duplicate{ Params :  Returns : HttpContent} retainedDuplicate{ Params :  Returns : HttpContent} replace{ Params : ByteBuf Returns : HttpContent} retain{ Params :  Returns : AssembledHttpResponse} retain{ Params : int Returns : AssembledHttpResponse} getStatus{ Params :  Returns : HttpResponseStatus} setStatus{ Params : HttpResponseStatus Returns : AssembledHttpResponse} setProtocolVersion{ Params : HttpVersion Returns : AssembledHttpResponse} getProtocolVersion{ Params :  Returns : HttpVersion} protocolVersion{ Params :  Returns : HttpVersion} status{ Params :  Returns : HttpResponseStatus} touch{ Params :  Returns : AssembledHttpResponse} touch{ Params : Object Returns : AssembledHttpResponse} decoderResult{ Params :  Returns : DecoderResult} headers{ Params :  Returns : HttpHeaders} getDecoderResult{ Params :  Returns : DecoderResult} setDecoderResult{ Params : DecoderResult Returns : void} content{ Params :  Returns : ByteBuf} refCnt{ Params :  Returns : int} release{ Params :  Returns : boolean} release{ Params : int Returns : boolean} ,copy duplicate retainedDuplicate replace retain retain getStatus setStatus setProtocolVersion getProtocolVersion protocolVersion status touch touch decoderResult headers getDecoderResult setDecoderResult content refCnt release release ,,,,HttpResponse HttpContent ,DecoderResult ,,DecoderResult ,UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,content: , decrement
vert.x-master,io.vertx.core.http.impl,AssembledLastHttpContent,1,0,0,0,0,false,DefaultByteBufHolder ,LastHttpContent ,0 ,trailingHeaders: HttpHeaders result: DecoderResult ,trailingHeaders{ Params :  Returns : HttpHeaders} copy{ Params :  Returns : LastHttpContent} retain{ Params : int Returns : LastHttpContent} retain{ Params :  Returns : LastHttpContent} duplicate{ Params :  Returns : LastHttpContent} replace{ Params : ByteBuf Returns : LastHttpContent} retainedDuplicate{ Params :  Returns : LastHttpContent} decoderResult{ Params :  Returns : DecoderResult} getDecoderResult{ Params :  Returns : DecoderResult} setDecoderResult{ Params : DecoderResult Returns : void} touch{ Params :  Returns : AssembledLastHttpContent} touch{ Params : Object Returns : AssembledLastHttpContent} ,trailingHeaders copy retain retain duplicate replace retainedDuplicate decoderResult getDecoderResult setDecoderResult touch touch ,,,,LastHttpContent ,DecoderResult ,,DecoderResult ,UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,super: , hint
vert.x-master,io.vertx.core.http.impl.cgbystrom,FlashPolicyHandler,1,1,0,0,0,false,ChannelInboundHandlerAdapter ,0 ,0 ,XML: String state: ParseState ,channelRead{ Params : ChannelHandlerContext,Object Returns : void} ,channelRead ,,,,,ParseState ,,ParseState ,,Unpooled: , XML, CharsetUtil.UTF_8
vert.x-master,io.vertx.core.http.impl,CleanableHttpClient,1,1,0,0,0,false,0 ,HttpClientInternal ,Action ,delegate: HttpClientInternal cleanable: Cleaner.Cleanable action: Action ,run{ Params :  Returns : void} request{ Params : RequestOptions Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,int,String,String Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,String,String Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,String Returns : Future<HttpClientRequest>} webSocket{ Params : int,String,String Returns : Future<WebSocket>} webSocket{ Params : String,String Returns : Future<WebSocket>} webSocket{ Params : String Returns : Future<WebSocket>} webSocket{ Params : WebSocketConnectOptions Returns : Future<WebSocket>} webSocketAbs{ Params : String,MultiMap,WebsocketVersion,List<String> Returns : Future<WebSocket>} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} connectionHandler{ Params : Handler<HttpConnection> Returns : HttpClient} redirectHandler{ Params : Function<HttpClientResponse,Future<RequestOptions>> Returns : HttpClient} redirectHandler{ Params :  Returns : Function<HttpClientResponse,Future<RequestOptions>>} close{ Params : long,TimeUnit Returns : Future<Void>} vertx{ Params :  Returns : VertxInternal} options{ Params :  Returns : HttpClientOptions} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : Metrics} netClient{ Params :  Returns : NetClientInternal} closeFuture{ Params :  Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} ,run request request request request webSocket webSocket webSocket webSocket webSocketAbs updateSSLOptions connectionHandler redirectHandler redirectHandler close vertx options isMetricsEnabled getMetrics netClient closeFuture close ,,,,HttpClientInternal ,Action ,,Action ,Action IllegalArgumentException IllegalArgumentException ,delegate: , completion
vert.x-master,io.vertx.core.http.impl,Action,3,0,0,1,0,false,0 ,HttpClientInternal ,Action ,dispose: BiFunction<Long, TimeUnit, Future<Void>> timeout: long timeUnit: TimeUnit closeFuture: Future<Void> ,run{ Params :  Returns : void} request{ Params : RequestOptions Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,int,String,String Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,String,String Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,String Returns : Future<HttpClientRequest>} webSocket{ Params : int,String,String Returns : Future<WebSocket>} webSocket{ Params : String,String Returns : Future<WebSocket>} webSocket{ Params : String Returns : Future<WebSocket>} webSocket{ Params : WebSocketConnectOptions Returns : Future<WebSocket>} webSocketAbs{ Params : String,MultiMap,WebsocketVersion,List<String> Returns : Future<WebSocket>} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} connectionHandler{ Params : Handler<HttpConnection> Returns : HttpClient} redirectHandler{ Params : Function<HttpClientResponse,Future<RequestOptions>> Returns : HttpClient} redirectHandler{ Params :  Returns : Function<HttpClientResponse,Future<RequestOptions>>} close{ Params : long,TimeUnit Returns : Future<Void>} vertx{ Params :  Returns : VertxInternal} options{ Params :  Returns : HttpClientOptions} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : Metrics} netClient{ Params :  Returns : NetClientInternal} closeFuture{ Params :  Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} ,run request request request request webSocket webSocket webSocket webSocket webSocketAbs updateSSLOptions connectionHandler redirectHandler redirectHandler close vertx options isMetricsEnabled getMetrics netClient closeFuture close ,,,,Runnable ,Future<Void> ,,Future<Void> ,,dispose: , timeout, timeUnit
vert.x-master,io.vertx.core.http.impl,ClientHttpEndpointBase,1,0,1,0,0,false,Endpoint<C> ,0 ,0 ,metrics: ClientMetrics ,requestConnection{ Params : ContextInternal,long Returns : Future<C>} requestConnection2{ Params : ContextInternal,long Returns : Future<C>} checkExpired{ Params :  Returns : void} dispose{ Params :  Returns : void} ,requestConnection dispose ,,,requestConnection2 checkExpired ,,ClientMetrics ,,ClientMetrics ,,metrics: 
vert.x-master,io.vertx.core.http.impl,CookieImpl,1,1,0,0,0,false,0 ,ServerCookie ,0 ,nettyCookie: io.netty.handler.codec.http.cookie.Cookie fromUserAgent: boolean changed: boolean sameSite: CookieSameSite ,getValue{ Params :  Returns : String} setValue{ Params : String Returns : Cookie} getName{ Params :  Returns : String} setDomain{ Params : String Returns : Cookie} getDomain{ Params :  Returns : String} setPath{ Params : String Returns : Cookie} getPath{ Params :  Returns : String} setMaxAge{ Params : long Returns : Cookie} getMaxAge{ Params :  Returns : long} setSecure{ Params : boolean Returns : Cookie} isSecure{ Params :  Returns : boolean} setHttpOnly{ Params : boolean Returns : Cookie} isHttpOnly{ Params :  Returns : boolean} setSameSite{ Params : CookieSameSite Returns : Cookie} getSameSite{ Params :  Returns : CookieSameSite} encode{ Params :  Returns : String} isChanged{ Params :  Returns : boolean} setChanged{ Params : boolean Returns : void} isFromUserAgent{ Params :  Returns : boolean} ,getValue setValue getName setDomain getDomain setPath getPath setMaxAge getMaxAge setSecure isSecure setHttpOnly isHttpOnly setSameSite getSameSite encode ,,,,ServerCookie ,CookieSameSite ,,CookieSameSite ,DefaultCookie ,ServerCookieEncoder.STRICT: , nettyCookie
vert.x-master,io.vertx.core.http.impl,CookieJar,1,1,0,0,0,false,AbstractSet<ServerCookie> ,0 ,0 ,EMPTY: CookieJar list: List<ServerCookie> ,size{ Params :  Returns : int} contains{ Params : Object Returns : boolean} iterator{ Params :  Returns : Iterator<ServerCookie>} add{ Params : ServerCookie Returns : boolean} clear{ Params :  Returns : void} cookieUniqueIdComparator{ Params : ServerCookie,String,String,String Returns : int} get{ Params : String Returns : ServerCookie} getAll{ Params : String Returns : CookieJar} get{ Params : String,String,String Returns : ServerCookie} removeOrInvalidateAll{ Params : String,boolean Returns : CookieJar} removeOrInvalidate{ Params : String,String,String,boolean Returns : ServerCookie} removeOrInvalidate{ Params : String,boolean Returns : ServerCookie} removeOrInvalidateCookie{ Params : Iterator<ServerCookie>,ServerCookie,boolean Returns : void} ,size contains iterator add clear ,cookieUniqueIdComparator removeOrInvalidateCookie ,,,,List<ServerCookie> ,,List<ServerCookie> ,CookieJar ArrayList ArrayList CookieImpl NullPointerException ArrayList CookieJar ArrayList CookieJar ,it: 
vert.x-master,io.vertx.core.http.impl,EndpointKey,1,0,0,0,1,false,0 ,0 ,0 ,ssl: boolean serverAddr: SocketAddress peerAddr: SocketAddress proxyOptions: ProxyOptions ,equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} equals{ Params : ProxyOptions,ProxyOptions Returns : boolean} hashCode{ Params : ProxyOptions Returns : int} ,equals hashCode ,equals hashCode ,,,,,,,NullPointerException NullPointerException ,options: 
vert.x-master,io.vertx.core.http.impl.headers,HeadersAdaptor,1,1,0,0,0,false,0 ,MultiMap ,0 ,headers: HttpHeaders ,get{ Params : String Returns : String} getAll{ Params : String Returns : List<String>} entries{ Params :  Returns : List<Map.Entry<String,String>>} contains{ Params : String Returns : boolean} isEmpty{ Params :  Returns : boolean} names{ Params :  Returns : Set<String>} add{ Params : String,String Returns : MultiMap} add{ Params : String,Iterable<String> Returns : MultiMap} addAll{ Params : MultiMap Returns : MultiMap} addAll{ Params : Map<String,String> Returns : MultiMap} set{ Params : String,String Returns : MultiMap} set{ Params : String,Iterable<String> Returns : MultiMap} setAll{ Params : MultiMap Returns : MultiMap} remove{ Params : String Returns : MultiMap} clear{ Params :  Returns : MultiMap} iterator{ Params :  Returns : Iterator<Map.Entry<String,String>>} size{ Params :  Returns : int} setAll{ Params : Map<String,String> Returns : MultiMap} get{ Params : CharSequence Returns : String} getAll{ Params : CharSequence Returns : List<String>} contains{ Params : CharSequence Returns : boolean} contains{ Params : String,String,boolean Returns : boolean} contains{ Params : CharSequence,CharSequence,boolean Returns : boolean} add{ Params : CharSequence,CharSequence Returns : MultiMap} add{ Params : CharSequence,Iterable<CharSequence> Returns : MultiMap} set{ Params : CharSequence,CharSequence Returns : MultiMap} set{ Params : CharSequence,Iterable<CharSequence> Returns : MultiMap} remove{ Params : CharSequence Returns : MultiMap} toString{ Params :  Returns : String} ,get getAll entries contains isEmpty names add add addAll addAll set set setAll remove clear iterator size setAll get getAll contains contains contains add add set set remove toString ,,,,MultiMap ,HttpHeaders ,,HttpHeaders ,StringBuilder ,sb: 
vert.x-master,io.vertx.core.http.impl.headers,HeadersMultiMap,1,1,0,0,1,false,HttpHeaders ,MultiMap ,MapEntry ,HTTP_VALIDATOR: BiConsumer<CharSequence, CharSequence> validator: BiConsumer<CharSequence, CharSequence> entries: HeadersMultiMap.MapEntry head: HeadersMultiMap.MapEntry COLON_AND_SPACE_SHORT: int CRLF_SHORT: int ,toValidCharSequence{ Params : Object Returns : CharSequence} httpHeaders{ Params :  Returns : HeadersMultiMap} headers{ Params :  Returns : HeadersMultiMap} setAll{ Params : MultiMap Returns : MultiMap} setAll{ Params : Map<String,String> Returns : MultiMap} size{ Params :  Returns : int} add{ Params : CharSequence,CharSequence Returns : HeadersMultiMap} add{ Params : CharSequence,Object Returns : HeadersMultiMap} add{ Params : String,Object Returns : HttpHeaders} add{ Params : String,String Returns : HeadersMultiMap} add{ Params : CharSequence,Iterable Returns : HeadersMultiMap} add{ Params : String,Iterable Returns : HeadersMultiMap} addAll{ Params : MultiMap Returns : MultiMap} addAll{ Params : Map<String,String> Returns : MultiMap} addAll{ Params : Iterable<Map.Entry<String,String>> Returns : MultiMap} remove{ Params : CharSequence Returns : HeadersMultiMap} remove{ Params : String Returns : HeadersMultiMap} set{ Params : CharSequence,CharSequence Returns : HeadersMultiMap} set{ Params : String,String Returns : HeadersMultiMap} set{ Params : String,Object Returns : HeadersMultiMap} set{ Params : CharSequence,Object Returns : HeadersMultiMap} set{ Params : CharSequence,Iterable Returns : HeadersMultiMap} set{ Params : String,Iterable Returns : HeadersMultiMap} containsValue{ Params : CharSequence,CharSequence,boolean Returns : boolean} contains{ Params : CharSequence,CharSequence,boolean Returns : boolean} containsInternal{ Params : CharSequence,CharSequence,boolean,boolean Returns : boolean} contains{ Params : String,String,boolean Returns : boolean} contains{ Params : CharSequence Returns : boolean} contains{ Params : String Returns : boolean} get{ Params : CharSequence Returns : String} get{ Params : String Returns : String} getAll{ Params : CharSequence Returns : List<String>} getAll{ Params : String Returns : List<String>} forEach{ Params : Consumer<? super Map.Entry<String,String>> Returns : void} forEach{ Params : BiConsumer<String,String> Returns : void} entries{ Params :  Returns : List<Map.Entry<String,String>>} iterator{ Params :  Returns : Iterator<Map.Entry<String,String>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Map.Entry<String,String>} getKey{ Params :  Returns : String} getValue{ Params :  Returns : String} setValue{ Params : String Returns : String} toString{ Params :  Returns : String} isEmpty{ Params :  Returns : boolean} names{ Params :  Returns : Set<String>} clear{ Params :  Returns : HeadersMultiMap} toString{ Params :  Returns : String} getInt{ Params : CharSequence Returns : Integer} getInt{ Params : CharSequence,int Returns : int} getShort{ Params : CharSequence Returns : Short} getShort{ Params : CharSequence,short Returns : short} getTimeMillis{ Params : CharSequence Returns : Long} getTimeMillis{ Params : CharSequence,long Returns : long} iteratorCharSequence{ Params :  Returns : Iterator<Map.Entry<CharSequence,CharSequence>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Map.Entry<CharSequence,CharSequence>} addInt{ Params : CharSequence,int Returns : HttpHeaders} addShort{ Params : CharSequence,short Returns : HttpHeaders} setInt{ Params : CharSequence,int Returns : HttpHeaders} setShort{ Params : CharSequence,short Returns : HttpHeaders} encode{ Params : ByteBuf Returns : void} encoderHeader{ Params : CharSequence,CharSequence,ByteBuf Returns : void} writeAscii{ Params : ByteBuf,int,CharSequence Returns : void} remove{ Params :  Returns : void} addBefore{ Params : HeadersMultiMap.MapEntry Returns : void} getKey{ Params :  Returns : CharSequence} getValue{ Params :  Returns : CharSequence} setValue{ Params : CharSequence Returns : CharSequence} toString{ Params :  Returns : String} stringEntry{ Params :  Returns : Map.Entry<String,String>} remove0{ Params : int,int,CharSequence Returns : void} add0{ Params : int,int,CharSequence,CharSequence Returns : void} set0{ Params : CharSequence,CharSequence Returns : HeadersMultiMap} get0{ Params : CharSequence Returns : CharSequence} set0{ Params : Iterable<Map.Entry<String,String>> Returns : MultiMap} ,setAll setAll size add add add add add add addAll addAll remove remove set set set set set set containsValue contains contains contains contains get get getAll getAll forEach forEach entries iterator hasNext next getKey getValue setValue toString isEmpty names clear getInt getInt getShort getShort getTimeMillis getTimeMillis iteratorCharSequence hasNext next addInt addShort setInt setShort getKey getValue setValue toString ,toValidCharSequence httpHeaders headers encoderHeader writeAscii ,,,MultiMap ,,,,HeadersMultiMap HeadersMultiMap MapEntry LinkedList Iterator NoSuchElementException Entry TreeSet StringBuilder UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException Iterator UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException SimpleEntry MapEntry ,entry: 
vert.x-master,io.vertx.core.http.impl.headers,MapEntry,3,2,0,0,1,false,HttpHeaders ,MultiMap ,MapEntry ,hash: int key: CharSequence value: CharSequence next: HeadersMultiMap.MapEntry before: HeadersMultiMap.MapEntry ,toValidCharSequence{ Params : Object Returns : CharSequence} httpHeaders{ Params :  Returns : HeadersMultiMap} headers{ Params :  Returns : HeadersMultiMap} setAll{ Params : MultiMap Returns : MultiMap} setAll{ Params : Map<String,String> Returns : MultiMap} size{ Params :  Returns : int} add{ Params : CharSequence,CharSequence Returns : HeadersMultiMap} add{ Params : CharSequence,Object Returns : HeadersMultiMap} add{ Params : String,Object Returns : HttpHeaders} add{ Params : String,String Returns : HeadersMultiMap} add{ Params : CharSequence,Iterable Returns : HeadersMultiMap} add{ Params : String,Iterable Returns : HeadersMultiMap} addAll{ Params : MultiMap Returns : MultiMap} addAll{ Params : Map<String,String> Returns : MultiMap} addAll{ Params : Iterable<Map.Entry<String,String>> Returns : MultiMap} remove{ Params : CharSequence Returns : HeadersMultiMap} remove{ Params : String Returns : HeadersMultiMap} set{ Params : CharSequence,CharSequence Returns : HeadersMultiMap} set{ Params : String,String Returns : HeadersMultiMap} set{ Params : String,Object Returns : HeadersMultiMap} set{ Params : CharSequence,Object Returns : HeadersMultiMap} set{ Params : CharSequence,Iterable Returns : HeadersMultiMap} set{ Params : String,Iterable Returns : HeadersMultiMap} containsValue{ Params : CharSequence,CharSequence,boolean Returns : boolean} contains{ Params : CharSequence,CharSequence,boolean Returns : boolean} containsInternal{ Params : CharSequence,CharSequence,boolean,boolean Returns : boolean} contains{ Params : String,String,boolean Returns : boolean} contains{ Params : CharSequence Returns : boolean} contains{ Params : String Returns : boolean} get{ Params : CharSequence Returns : String} get{ Params : String Returns : String} getAll{ Params : CharSequence Returns : List<String>} getAll{ Params : String Returns : List<String>} forEach{ Params : Consumer<? super Map.Entry<String,String>> Returns : void} forEach{ Params : BiConsumer<String,String> Returns : void} entries{ Params :  Returns : List<Map.Entry<String,String>>} iterator{ Params :  Returns : Iterator<Map.Entry<String,String>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Map.Entry<String,String>} getKey{ Params :  Returns : String} getValue{ Params :  Returns : String} setValue{ Params : String Returns : String} toString{ Params :  Returns : String} isEmpty{ Params :  Returns : boolean} names{ Params :  Returns : Set<String>} clear{ Params :  Returns : HeadersMultiMap} toString{ Params :  Returns : String} getInt{ Params : CharSequence Returns : Integer} getInt{ Params : CharSequence,int Returns : int} getShort{ Params : CharSequence Returns : Short} getShort{ Params : CharSequence,short Returns : short} getTimeMillis{ Params : CharSequence Returns : Long} getTimeMillis{ Params : CharSequence,long Returns : long} iteratorCharSequence{ Params :  Returns : Iterator<Map.Entry<CharSequence,CharSequence>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Map.Entry<CharSequence,CharSequence>} addInt{ Params : CharSequence,int Returns : HttpHeaders} addShort{ Params : CharSequence,short Returns : HttpHeaders} setInt{ Params : CharSequence,int Returns : HttpHeaders} setShort{ Params : CharSequence,short Returns : HttpHeaders} encode{ Params : ByteBuf Returns : void} encoderHeader{ Params : CharSequence,CharSequence,ByteBuf Returns : void} writeAscii{ Params : ByteBuf,int,CharSequence Returns : void} remove{ Params :  Returns : void} addBefore{ Params : HeadersMultiMap.MapEntry Returns : void} getKey{ Params :  Returns : CharSequence} getValue{ Params :  Returns : CharSequence} setValue{ Params : CharSequence Returns : CharSequence} toString{ Params :  Returns : String} stringEntry{ Params :  Returns : Map.Entry<String,String>} remove0{ Params : int,int,CharSequence Returns : void} add0{ Params : int,int,CharSequence,CharSequence Returns : void} set0{ Params : CharSequence,CharSequence Returns : HeadersMultiMap} get0{ Params : CharSequence Returns : CharSequence} set0{ Params : Iterable<Map.Entry<String,String>> Returns : MultiMap} ,setAll setAll size add add add add add add addAll addAll remove remove set set set set set set containsValue contains contains contains contains get get getAll getAll forEach forEach entries iterator hasNext next getKey getValue setValue toString isEmpty names clear getInt getInt getShort getShort getTimeMillis getTimeMillis iteratorCharSequence hasNext next addInt addShort setInt setShort getKey getValue setValue toString ,toValidCharSequence httpHeaders headers encoderHeader writeAscii ,,,Entry ,,,,SimpleEntry ,value: 
vert.x-master,io.vertx.core.http.impl.headers,Http2HeadersAdaptor,1,1,0,0,0,false,0 ,MultiMap ,0 ,headers: Http2Headers ,get{ Params : String Returns : String} getAll{ Params : String Returns : List<String>} get{ Params : int Returns : String} size{ Params :  Returns : int} contains{ Params : String Returns : boolean} contains{ Params : String,String,boolean Returns : boolean} isEmpty{ Params :  Returns : boolean} names{ Params :  Returns : Set<String>} add{ Params : String,String Returns : MultiMap} add{ Params : String,Iterable<String> Returns : MultiMap} addAll{ Params : MultiMap Returns : MultiMap} addAll{ Params : Map<String,String> Returns : MultiMap} set{ Params : String,String Returns : MultiMap} set{ Params : String,Iterable<String> Returns : MultiMap} setAll{ Params : MultiMap Returns : MultiMap} remove{ Params : String Returns : MultiMap} clear{ Params :  Returns : MultiMap} iterator{ Params :  Returns : Iterator<Map.Entry<String,String>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Map.Entry<String,String>} getKey{ Params :  Returns : String} getValue{ Params :  Returns : String} setValue{ Params : String Returns : String} toString{ Params :  Returns : String} size{ Params :  Returns : int} setAll{ Params : Map<String,String> Returns : MultiMap} get{ Params : CharSequence Returns : String} getAll{ Params : CharSequence Returns : List<String>} contains{ Params : CharSequence Returns : boolean} contains{ Params : CharSequence,CharSequence,boolean Returns : boolean} add{ Params : CharSequence,CharSequence Returns : MultiMap} add{ Params : CharSequence,Iterable<CharSequence> Returns : MultiMap} set{ Params : CharSequence,CharSequence Returns : MultiMap} set{ Params : CharSequence,Iterable<CharSequence> Returns : MultiMap} remove{ Params : CharSequence Returns : MultiMap} toString{ Params :  Returns : String} ,get getAll get size contains contains isEmpty names add add addAll addAll set set setAll remove clear iterator hasNext next getKey getValue setValue toString size setAll get getAll contains contains add add set set remove toString ,,,,MultiMap ,Http2Headers ,,Http2Headers ,AbstractList TreeSet Iterator Entry StringBuilder ,sb: 
vert.x-master,io.vertx.core.http.impl,Http1xClientConnection,1,1,0,0,0,false,Http1xConnectionBase<WebSocketImpl> ,HttpClientConnection ,Stream StreamImpl ,log: Logger INVALID_MSG_HANDLER: Handler<Object> client: HttpClientImpl options: HttpClientOptions ssl: boolean server: SocketAddress metrics: ClientMetrics version: HttpVersion lowWaterMark: long highWaterMark: long requests: Deque<Stream> responses: Deque<Stream> closed: boolean evicted: boolean evictionHandler: Handler<Void> invalidMessageHandler: Handler<Object> close: boolean shutdown: boolean shutdownTimerID: long isConnect: boolean keepAliveTimeout: int expirationTimestamp: long seq: int readWindow: long writeWindow: long writeOverflow: boolean pendingFrames: Deque<WebSocketFrame> lastResponseReceivedTimestamp: long ,evictionHandler{ Params : Handler<Void> Returns : HttpClientConnection} handleEvent{ Params : Object Returns : void} concurrencyChangeHandler{ Params : Handler<Long> Returns : HttpClientConnection} concurrency{ Params :  Returns : long} toNetSocket{ Params :  Returns : NetSocketInternal} createRequest{ Params : HttpMethod,String,MultiMap,String,boolean,ByteBuf,boolean Returns : HttpRequest} determineCompressionAcceptEncoding{ Params :  Returns : CharSequence} isBrotliAvailable{ Params :  Returns : boolean} beginRequest{ Params : Stream,HttpRequestHead,boolean,ByteBuf,boolean,boolean,PromiseInternal<Void> Returns : void} writeBuffer{ Params : Stream,ByteBuf,boolean,FutureListener<Void> Returns : void} endRequest{ Params : Stream Returns : void} reset{ Params : Stream Returns : boolean} receiveBytes{ Params : int Returns : void} ackBytes{ Params : int Returns : void} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} handleHead{ Params : HttpResponseHead Returns : void} handleChunk{ Params : Buffer Returns : void} handleEnd{ Params : LastHttpContent Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} handleException{ Params : Throwable Returns : void} handleClosed{ Params :  Returns : void} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} drainHandler{ Params : Handler<Void> Returns : StreamImpl} exceptionHandler{ Params : Handler<Throwable> Returns : StreamImpl} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} headHandler{ Params : Handler<HttpResponseHead> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} connection{ Params :  Returns : HttpClientConnection} getContext{ Params :  Returns : ContextInternal} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,boolean,PromiseInternal<Void> Returns : void} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeBuffer{ Params : ByteBuf,boolean,FutureListener<Void> Returns : void} writeFrame{ Params : int,int,ByteBuf Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} _reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} handleHead{ Params : HttpResponseHead Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} handleChunk{ Params : Buffer Returns : void} handleEnd{ Params : LastHttpContent Returns : void} handleException{ Params : Throwable Returns : void} handleClosed{ Params :  Returns : void} tryClose{ Params :  Returns : void} checkLifecycle{ Params :  Returns : void} close{ Params :  Returns : Future<Void>} validateMessage{ Params : Object Returns : Throwable} handleMessage{ Params : Object Returns : void} handleHttpMessage{ Params : HttpObject Returns : void} handleChunk{ Params : ByteBuf Returns : void} handleResponseBegin{ Params : Stream,HttpResponseHead Returns : void} removeChannelHandlers{ Params :  Returns : void} handleResponseChunk{ Params : Stream,ByteBuf Returns : void} handleResponseEnd{ Params : Stream,LastHttpContent Returns : void} metrics{ Params :  Returns : HttpClientMetrics} toWebSocket{ Params : ContextInternal,String,MultiMap,boolean,WebsocketVersion,List<String>,long,boolean,int Returns : Future<WebSocket>} newHandshaker{ Params : URI,WebSocketVersion,String,boolean,boolean,HttpHeaders,int,boolean Returns : WebSocketClientHandshaker} newWebsocketDecoder{ Params :  Returns : WebSocketFrameDecoder} newHandshakeRequest{ Params :  Returns : FullHttpRequest} newWebsocketDecoder{ Params :  Returns : WebSocketFrameDecoder} newHandshakeRequest{ Params :  Returns : FullHttpRequest} newWebsocketDecoder{ Params :  Returns : WebSocketFrameDecoder} newHandshakeRequest{ Params :  Returns : FullHttpRequest} newHandshakeRequest{ Params :  Returns : FullHttpRequest} initializeWebSocketExtensionHandshakers{ Params : HttpClientOptions Returns : ArrayList<WebSocketClientExtensionHandshaker>} handleInterestedOpsChanged{ Params :  Returns : void} handleClosed{ Params :  Returns : void} handleIdle{ Params : IdleStateEvent Returns : void} handleException{ Params : Throwable Returns : void} createStream{ Params : ContextInternal Returns : Future<HttpClientStream>} createStream{ Params : ContextInternal,Promise<HttpClientStream> Returns : void} lastResponseReceivedTimestamp{ Params :  Returns : long} isValid{ Params :  Returns : boolean} shutdown{ Params : long Returns : Future<Void>} shutdownNow{ Params :  Returns : void} shutdown{ Params : long,PromiseInternal<Void> Returns : void} expirationTimestampOf{ Params : long Returns : long} ,evictionHandler handleEvent concurrencyChangeHandler concurrency continueHandler earlyHintsHandler drainHandler exceptionHandler setWriteQueueMaxSize writeQueueFull headHandler closeHandler priorityHandler pushHandler unknownFrameHandler id metric trace version connection getContext writeHead writeBuffer writeFrame doSetWriteQueueMaxSize isNotWritable doPause doFetch reset priority updatePriority handleWritabilityChanged handleHead chunkHandler endHandler handleClosed close newWebsocketDecoder newHandshakeRequest newWebsocketDecoder newHandshakeRequest newWebsocketDecoder newHandshakeRequest newHandshakeRequest handleInterestedOpsChanged handleException createStream lastResponseReceivedTimestamp isValid shutdown ,determineCompressionAcceptEncoding isBrotliAvailable newHandshaker expirationTimestampOf ,,handleContinue handleEarlyHints handleHead handleChunk handleEnd handleWritabilityChanged handleException handleClosed ,HttpClientConnection ,long ,,long ,IllegalStateException ArrayDeque ArrayDeque NetSocketImpl DefaultHttpRequest AssembledFullHttpRequest AssembledFullHttpRequest AssembledHttpRequest HeadersAdaptor DefaultLastHttpContent DefaultHttpContent InboundBuffer IllegalStateException IllegalStateException HeadersAdaptor IllegalStateException ArrayDeque VertxException HttpResponseHead HeadersAdaptor URI URI DefaultHttpHeaders WebSocketClientExtensionHandler WebSocketHandshakeInboundHandler WebSocketImpl HeadersAdaptor WebSocketClientHandshaker13 WebSocket13FrameDecoder WebSocketClientHandshaker08 WebSocket08FrameDecoder WebSocketClientHandshaker07 WebSocket07FrameDecoder WebSocketClientHandshaker00 WebSocketHandshakeException ArrayList DeflateFrameClientExtensionHandshaker PerMessageDeflateClientExtensionHandshaker ArrayList ArrayList LinkedHashSet StreamImpl ,System: 
vert.x-master,io.vertx.core.http.impl,Stream,3,2,1,1,0,false,Http1xConnectionBase<WebSocketImpl> ,HttpClientConnection ,Stream StreamImpl ,promise: Promise<HttpClientStream> context: ContextInternal id: int trace: Object metric: Object response: HttpResponseHead responseEnded: boolean bytesRead: long bytesWritten: long ,evictionHandler{ Params : Handler<Void> Returns : HttpClientConnection} handleEvent{ Params : Object Returns : void} concurrencyChangeHandler{ Params : Handler<Long> Returns : HttpClientConnection} concurrency{ Params :  Returns : long} toNetSocket{ Params :  Returns : NetSocketInternal} createRequest{ Params : HttpMethod,String,MultiMap,String,boolean,ByteBuf,boolean Returns : HttpRequest} determineCompressionAcceptEncoding{ Params :  Returns : CharSequence} isBrotliAvailable{ Params :  Returns : boolean} beginRequest{ Params : Stream,HttpRequestHead,boolean,ByteBuf,boolean,boolean,PromiseInternal<Void> Returns : void} writeBuffer{ Params : Stream,ByteBuf,boolean,FutureListener<Void> Returns : void} endRequest{ Params : Stream Returns : void} reset{ Params : Stream Returns : boolean} receiveBytes{ Params : int Returns : void} ackBytes{ Params : int Returns : void} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} handleHead{ Params : HttpResponseHead Returns : void} handleChunk{ Params : Buffer Returns : void} handleEnd{ Params : LastHttpContent Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} handleException{ Params : Throwable Returns : void} handleClosed{ Params :  Returns : void} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} drainHandler{ Params : Handler<Void> Returns : StreamImpl} exceptionHandler{ Params : Handler<Throwable> Returns : StreamImpl} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} headHandler{ Params : Handler<HttpResponseHead> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} connection{ Params :  Returns : HttpClientConnection} getContext{ Params :  Returns : ContextInternal} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,boolean,PromiseInternal<Void> Returns : void} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeBuffer{ Params : ByteBuf,boolean,FutureListener<Void> Returns : void} writeFrame{ Params : int,int,ByteBuf Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} _reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} handleHead{ Params : HttpResponseHead Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} handleChunk{ Params : Buffer Returns : void} handleEnd{ Params : LastHttpContent Returns : void} handleException{ Params : Throwable Returns : void} handleClosed{ Params :  Returns : void} tryClose{ Params :  Returns : void} checkLifecycle{ Params :  Returns : void} close{ Params :  Returns : Future<Void>} validateMessage{ Params : Object Returns : Throwable} handleMessage{ Params : Object Returns : void} handleHttpMessage{ Params : HttpObject Returns : void} handleChunk{ Params : ByteBuf Returns : void} handleResponseBegin{ Params : Stream,HttpResponseHead Returns : void} removeChannelHandlers{ Params :  Returns : void} handleResponseChunk{ Params : Stream,ByteBuf Returns : void} handleResponseEnd{ Params : Stream,LastHttpContent Returns : void} metrics{ Params :  Returns : HttpClientMetrics} toWebSocket{ Params : ContextInternal,String,MultiMap,boolean,WebsocketVersion,List<String>,long,boolean,int Returns : Future<WebSocket>} newHandshaker{ Params : URI,WebSocketVersion,String,boolean,boolean,HttpHeaders,int,boolean Returns : WebSocketClientHandshaker} newWebsocketDecoder{ Params :  Returns : WebSocketFrameDecoder} newHandshakeRequest{ Params :  Returns : FullHttpRequest} newWebsocketDecoder{ Params :  Returns : WebSocketFrameDecoder} newHandshakeRequest{ Params :  Returns : FullHttpRequest} newWebsocketDecoder{ Params :  Returns : WebSocketFrameDecoder} newHandshakeRequest{ Params :  Returns : FullHttpRequest} newHandshakeRequest{ Params :  Returns : FullHttpRequest} initializeWebSocketExtensionHandshakers{ Params : HttpClientOptions Returns : ArrayList<WebSocketClientExtensionHandshaker>} handleInterestedOpsChanged{ Params :  Returns : void} handleClosed{ Params :  Returns : void} handleIdle{ Params : IdleStateEvent Returns : void} handleException{ Params : Throwable Returns : void} createStream{ Params : ContextInternal Returns : Future<HttpClientStream>} createStream{ Params : ContextInternal,Promise<HttpClientStream> Returns : void} lastResponseReceivedTimestamp{ Params :  Returns : long} isValid{ Params :  Returns : boolean} shutdown{ Params : long Returns : Future<Void>} shutdownNow{ Params :  Returns : void} shutdown{ Params : long,PromiseInternal<Void> Returns : void} expirationTimestampOf{ Params : long Returns : long} ,evictionHandler handleEvent concurrencyChangeHandler concurrency continueHandler earlyHintsHandler drainHandler exceptionHandler setWriteQueueMaxSize writeQueueFull headHandler closeHandler priorityHandler pushHandler unknownFrameHandler id metric trace version connection getContext writeHead writeBuffer writeFrame doSetWriteQueueMaxSize isNotWritable doPause doFetch reset priority updatePriority handleWritabilityChanged handleHead chunkHandler endHandler handleClosed close newWebsocketDecoder newHandshakeRequest newWebsocketDecoder newHandshakeRequest newWebsocketDecoder newHandshakeRequest newHandshakeRequest handleInterestedOpsChanged handleException createStream lastResponseReceivedTimestamp isValid shutdown ,determineCompressionAcceptEncoding isBrotliAvailable newHandshaker expirationTimestampOf ,,handleContinue handleEarlyHints handleHead handleChunk handleEnd handleWritabilityChanged handleException handleClosed ,,long ,,long ,,System: 
vert.x-master,io.vertx.core.http.impl,StreamImpl,3,2,0,1,0,false,Http1xConnectionBase<WebSocketImpl> ,HttpClientConnection ,Stream StreamImpl ,conn: Http1xClientConnection queue: InboundBuffer<Object> reset: boolean closed: boolean request: HttpRequestHead headHandler: Handler<HttpResponseHead> chunkHandler: Handler<Buffer> endHandler: Handler<MultiMap> drainHandler: Handler<Void> continueHandler: Handler<Void> earlyHintsHandler: Handler<MultiMap> exceptionHandler: Handler<Throwable> closeHandler: Handler<Void> ,evictionHandler{ Params : Handler<Void> Returns : HttpClientConnection} handleEvent{ Params : Object Returns : void} concurrencyChangeHandler{ Params : Handler<Long> Returns : HttpClientConnection} concurrency{ Params :  Returns : long} toNetSocket{ Params :  Returns : NetSocketInternal} createRequest{ Params : HttpMethod,String,MultiMap,String,boolean,ByteBuf,boolean Returns : HttpRequest} determineCompressionAcceptEncoding{ Params :  Returns : CharSequence} isBrotliAvailable{ Params :  Returns : boolean} beginRequest{ Params : Stream,HttpRequestHead,boolean,ByteBuf,boolean,boolean,PromiseInternal<Void> Returns : void} writeBuffer{ Params : Stream,ByteBuf,boolean,FutureListener<Void> Returns : void} endRequest{ Params : Stream Returns : void} reset{ Params : Stream Returns : boolean} receiveBytes{ Params : int Returns : void} ackBytes{ Params : int Returns : void} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} handleHead{ Params : HttpResponseHead Returns : void} handleChunk{ Params : Buffer Returns : void} handleEnd{ Params : LastHttpContent Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} handleException{ Params : Throwable Returns : void} handleClosed{ Params :  Returns : void} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} drainHandler{ Params : Handler<Void> Returns : StreamImpl} exceptionHandler{ Params : Handler<Throwable> Returns : StreamImpl} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} headHandler{ Params : Handler<HttpResponseHead> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} connection{ Params :  Returns : HttpClientConnection} getContext{ Params :  Returns : ContextInternal} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,boolean,PromiseInternal<Void> Returns : void} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeBuffer{ Params : ByteBuf,boolean,FutureListener<Void> Returns : void} writeFrame{ Params : int,int,ByteBuf Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} _reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} handleHead{ Params : HttpResponseHead Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} handleChunk{ Params : Buffer Returns : void} handleEnd{ Params : LastHttpContent Returns : void} handleException{ Params : Throwable Returns : void} handleClosed{ Params :  Returns : void} tryClose{ Params :  Returns : void} checkLifecycle{ Params :  Returns : void} close{ Params :  Returns : Future<Void>} validateMessage{ Params : Object Returns : Throwable} handleMessage{ Params : Object Returns : void} handleHttpMessage{ Params : HttpObject Returns : void} handleChunk{ Params : ByteBuf Returns : void} handleResponseBegin{ Params : Stream,HttpResponseHead Returns : void} removeChannelHandlers{ Params :  Returns : void} handleResponseChunk{ Params : Stream,ByteBuf Returns : void} handleResponseEnd{ Params : Stream,LastHttpContent Returns : void} metrics{ Params :  Returns : HttpClientMetrics} toWebSocket{ Params : ContextInternal,String,MultiMap,boolean,WebsocketVersion,List<String>,long,boolean,int Returns : Future<WebSocket>} newHandshaker{ Params : URI,WebSocketVersion,String,boolean,boolean,HttpHeaders,int,boolean Returns : WebSocketClientHandshaker} newWebsocketDecoder{ Params :  Returns : WebSocketFrameDecoder} newHandshakeRequest{ Params :  Returns : FullHttpRequest} newWebsocketDecoder{ Params :  Returns : WebSocketFrameDecoder} newHandshakeRequest{ Params :  Returns : FullHttpRequest} newWebsocketDecoder{ Params :  Returns : WebSocketFrameDecoder} newHandshakeRequest{ Params :  Returns : FullHttpRequest} newHandshakeRequest{ Params :  Returns : FullHttpRequest} initializeWebSocketExtensionHandshakers{ Params : HttpClientOptions Returns : ArrayList<WebSocketClientExtensionHandshaker>} handleInterestedOpsChanged{ Params :  Returns : void} handleClosed{ Params :  Returns : void} handleIdle{ Params : IdleStateEvent Returns : void} handleException{ Params : Throwable Returns : void} createStream{ Params : ContextInternal Returns : Future<HttpClientStream>} createStream{ Params : ContextInternal,Promise<HttpClientStream> Returns : void} lastResponseReceivedTimestamp{ Params :  Returns : long} isValid{ Params :  Returns : boolean} shutdown{ Params : long Returns : Future<Void>} shutdownNow{ Params :  Returns : void} shutdown{ Params : long,PromiseInternal<Void> Returns : void} expirationTimestampOf{ Params : long Returns : long} ,evictionHandler handleEvent concurrencyChangeHandler concurrency continueHandler earlyHintsHandler drainHandler exceptionHandler setWriteQueueMaxSize writeQueueFull headHandler closeHandler priorityHandler pushHandler unknownFrameHandler id metric trace version connection getContext writeHead writeBuffer writeFrame doSetWriteQueueMaxSize isNotWritable doPause doFetch reset priority updatePriority handleWritabilityChanged handleHead chunkHandler endHandler handleClosed close newWebsocketDecoder newHandshakeRequest newWebsocketDecoder newHandshakeRequest newWebsocketDecoder newHandshakeRequest newHandshakeRequest handleInterestedOpsChanged handleException createStream lastResponseReceivedTimestamp isValid shutdown ,determineCompressionAcceptEncoding isBrotliAvailable newHandshaker expirationTimestampOf ,,handleContinue handleEarlyHints handleHead handleChunk handleEnd handleWritabilityChanged handleException handleClosed ,HttpClientStream ,Handler<Void> ,,Handler<Void> ,InboundBuffer IllegalStateException IllegalStateException HeadersAdaptor ,closeHandler: , null
vert.x-master,io.vertx.core.http.impl,Http1xConnectionBase,1,0,1,0,0,false,ConnectionBase ,io.vertx.core.http.HttpConnection ,0 ,webSocket: S ,handleWsFrame{ Params : WebSocketFrame Returns : void} decodeFrame{ Params : io.netty.handler.codec.http.websocketx.WebSocketFrame Returns : WebSocketFrameInternal} close{ Params :  Returns : Future<Void>} closeHandler{ Params : Handler<Void> Returns : Http1xConnectionBase} exceptionHandler{ Params : Handler<Throwable> Returns : Http1xConnectionBase} goAway{ Params : long,int,Buffer Returns : HttpConnection} goAwayHandler{ Params : Handler<GoAway> Returns : HttpConnection} shutdownHandler{ Params : Handler<Void> Returns : HttpConnection} shutdown{ Params : long Returns : Future<Void>} settings{ Params :  Returns : Http2Settings} updateSettings{ Params : Http2Settings Returns : Future<Void>} remoteSettings{ Params :  Returns : Http2Settings} remoteSettingsHandler{ Params : Handler<Http2Settings> Returns : HttpConnection} pingHandler{ Params : Handler<Buffer> Returns : HttpConnection} ping{ Params : Buffer Returns : Future<Buffer>} sizeof{ Params : Object Returns : long} ,close closeHandler exceptionHandler goAway goAwayHandler shutdownHandler shutdown settings updateSettings remoteSettings remoteSettingsHandler pingHandler ping sizeof ,,,,HttpConnection ,,,,IllegalStateException WebSocketFrameImpl UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,file: 
vert.x-master,io.vertx.core.http.impl,Http1xOrH2CHandler,1,1,0,0,0,false,ChannelInboundHandlerAdapter ,0 ,0 ,HTTP_2_PREFACE: String HTTP_2_PREFACE_ARRAY: byte current: int ,channelRead{ Params : ChannelHandlerContext,Object Returns : void} end{ Params : ChannelHandlerContext,ByteBuf,boolean Returns : void} configure{ Params : ChannelHandlerContext,boolean Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} ,channelRead exceptionCaught ,,,,,int ,,int ,,channel: 
vert.x-master,io.vertx.core.http.impl,Http1xServerConnection,1,1,0,0,0,false,Http1xConnectionBase<ServerWebSocketImpl> ,HttpServerConnection ,0 ,log: Logger serverOrigin: String streamContextSupplier: Supplier<ContextInternal> sslChannelProvider: SslChannelProvider tracingPolicy: TracingPolicy requestFailed: boolean requestInProgress: Http1xServerRequest responseInProgress: Http1xServerRequest channelPaused: boolean writable: boolean requestHandler: Handler<HttpServerRequest> invalidRequestHandler: Handler<HttpServerRequest> metrics: HttpServerMetrics handle100ContinueAutomatically: boolean options: HttpServerOptions ,tracingPolicy{ Params :  Returns : TracingPolicy} handler{ Params : Handler<HttpServerRequest> Returns : HttpServerConnection} invalidRequestHandler{ Params : Handler<HttpServerRequest> Returns : HttpServerConnection} metrics{ Params :  Returns : HttpServerMetrics} handleMessage{ Params : Object Returns : void} enqueueRequest{ Params : Http1xServerRequest Returns : void} handleOther{ Params : Object Returns : void} onContent{ Params : Object Returns : void} onEnd{ Params :  Returns : void} responseComplete{ Params :  Returns : void} handleNext{ Params : Http1xServerRequest Returns : void} doPause{ Params :  Returns : void} doResume{ Params :  Returns : void} reportResponseComplete{ Params :  Returns : void} getServerOrigin{ Params :  Returns : String} vertx{ Params :  Returns : Vertx} createWebSocket{ Params : Http1xServerRequest,PromiseInternal<ServerWebSocket> Returns : void} createHandshaker{ Params : Http1xServerRequest Returns : WebSocketServerHandshaker} netSocket{ Params : Handler<AsyncResult<NetSocket>> Returns : void} netSocket{ Params :  Returns : Future<NetSocket>} netSocket{ Params : Promise<NetSocket> Returns : void} handleClosed{ Params :  Returns : void} handleMessage{ Params : Object Returns : void} handleInterestedOpsChanged{ Params :  Returns : void} write100Continue{ Params :  Returns : void} write103EarlyHints{ Params : HttpHeaders,PromiseInternal<Void> Returns : void} handleClosed{ Params :  Returns : void} handleException{ Params : Throwable Returns : void} supportsFileRegion{ Params :  Returns : boolean} handleError{ Params : HttpObject Returns : void} ,handler invalidRequestHandler metrics doPause doResume handleClosed handleMessage handleInterestedOpsChanged handleException supportsFileRegion ,,,,HttpServerConnection ,,,,Http1xServerRequest IllegalStateException ServerWebSocketImpl WebSocketHandshakeException WebSocketHandshakeException WebSocketHandshakeException WebSocketServerHandshakerFactory WebSocketHandshakeException NetSocketImpl DefaultFullHttpResponse DefaultFullHttpResponse ,result: 
vert.x-master,io.vertx.core.http.impl,Http1xServerRequest,1,1,0,0,0,false,HttpServerRequestInternal ,io.vertx.core.spi.observability.HttpRequest ,0 ,log: Logger conn: Http1xServerConnection context: ContextInternal request: HttpRequest version: io.vertx.core.http.HttpVersion method: io.vertx.core.http.HttpMethod uri: String path: String query: String next: Http1xServerRequest metric: Object trace: Object response: Http1xServerResponse paramsCharset: Charset params: MultiMap headers: MultiMap absoluteURI: String eventHandler: HttpEventHandler uploadHandler: Handler<HttpServerFileUpload> attributes: MultiMap decoder: HttpPostRequestDecoder ended: boolean bytesRead: long pending: InboundBuffer<Object> ,eventHandler{ Params : boolean Returns : HttpEventHandler} nettyRequest{ Params :  Returns : HttpRequest} setRequest{ Params : HttpRequest Returns : void} pendingQueue{ Params :  Returns : InboundBuffer<Object>} handleContent{ Params : Buffer Returns : void} handleBegin{ Params : boolean Returns : void} enqueue{ Params : Http1xServerRequest Returns : void} next{ Params :  Returns : Http1xServerRequest} check100{ Params :  Returns : void} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} context{ Params :  Returns : Context} id{ Params :  Returns : int} version{ Params :  Returns : io.vertx.core.http.HttpVersion} method{ Params :  Returns : io.vertx.core.http.HttpMethod} uri{ Params :  Returns : String} path{ Params :  Returns : String} query{ Params :  Returns : String} host{ Params :  Returns : String} bytesRead{ Params :  Returns : long} response{ Params :  Returns : Http1xServerResponse} headers{ Params :  Returns : MultiMap} setParamsCharset{ Params : String Returns : HttpServerRequest} getParamsCharset{ Params :  Returns : String} params{ Params :  Returns : MultiMap} handler{ Params : Handler<Buffer> Returns : HttpServerRequest} exceptionHandler{ Params : Handler<Throwable> Returns : HttpServerRequest} pause{ Params :  Returns : HttpServerRequest} fetch{ Params : long Returns : HttpServerRequest} resume{ Params :  Returns : HttpServerRequest} endHandler{ Params : Handler<Void> Returns : HttpServerRequest} scheme{ Params :  Returns : String} absoluteURI{ Params :  Returns : String} remoteAddress{ Params :  Returns : SocketAddress} peerCertificateChain{ Params :  Returns : X509Certificate[]} toNetSocket{ Params :  Returns : Future<NetSocket>} uploadHandler{ Params : Handler<HttpServerFileUpload> Returns : HttpServerRequest} formAttributes{ Params :  Returns : MultiMap} getFormAttribute{ Params : String Returns : String} toWebSocket{ Params :  Returns : Future<ServerWebSocket>} webSocket{ Params :  Returns : Future<ServerWebSocket>} webSocket{ Params : PromiseInternal<ServerWebSocket> Returns : void} setExpectMultipart{ Params : boolean Returns : HttpServerRequest} isExpectMultipart{ Params :  Returns : boolean} isEnded{ Params :  Returns : boolean} customFrameHandler{ Params : Handler<HttpFrame> Returns : HttpServerRequest} connection{ Params :  Returns : HttpConnection} body{ Params :  Returns : Future<Buffer>} end{ Params :  Returns : Future<Void>} onData{ Params : Buffer Returns : void} handleEnd{ Params :  Returns : void} onEnd{ Params :  Returns : void} reportRequestComplete{ Params :  Returns : void} reportRequestBegin{ Params :  Returns : void} endDecode{ Params :  Returns : void} handleException{ Params : Throwable Returns : void} reportRequestReset{ Params : Throwable Returns : void} checkEnded{ Params :  Returns : void} attributes{ Params :  Returns : MultiMap} streamPriorityHandler{ Params : Handler<StreamPriority> Returns : HttpServerRequest} decoderResult{ Params :  Returns : DecoderResult} cookies{ Params :  Returns : Set<Cookie>} cookies{ Params : String Returns : Set<Cookie>} getCookie{ Params : String Returns : Cookie} getCookie{ Params : String,String,String Returns : Cookie} routed{ Params : String Returns : HttpServerRequest} ,context id version method uri path query host bytesRead response headers setParamsCharset getParamsCharset params handler exceptionHandler pause fetch resume endHandler scheme absoluteURI remoteAddress peerCertificateChain toNetSocket uploadHandler formAttributes getFormAttribute toWebSocket setExpectMultipart isExpectMultipart isEnded customFrameHandler connection body end streamPriorityHandler decoderResult cookies cookies getCookie getCookie routed ,,,,HttpRequest ,InboundBuffer<Object> ,,InboundBuffer<Object> ,HttpEventHandler InboundBuffer Http1xServerResponse HeadersAdaptor DefaultFullHttpRequest IllegalStateException IllegalStateException IllegalStateException NettyFileUploadDataFactory HttpPostRequestDecoder DefaultHttpContent IllegalStateException ,conn.metrics: , metric, route
vert.x-master,io.vertx.core.http.impl,Http1xServerRequestHandler,1,1,0,0,0,false,0 ,Handler<HttpServerRequest> ,0 ,handlers: HttpServerConnectionHandler ,handle{ Params : HttpServerRequest Returns : void} ,handle ,,,,Handler ,HttpServerConnectionHandler ,,HttpServerConnectionHandler ,,reqHandler: , req
vert.x-master,io.vertx.core.http.impl,Http1xServerResponse,1,1,0,0,0,false,0 ,HttpServerResponse HttpResponse ,0 ,EMPTY_BUFFER: Buffer log: Logger RESPONSE_WRITTEN: String vertx: VertxInternal request: HttpRequest conn: Http1xServerConnection context: ContextInternal status: HttpResponseStatus version: HttpVersion keepAlive: boolean head: boolean requestMetric: Object headWritten: boolean written: boolean drainHandler: Handler<Void> exceptionHandler: Handler<Throwable> closeHandler: Handler<Void> endHandler: Handler<Void> headersEndHandler: Handler<Void> bodyEndHandler: Handler<Void> writable: boolean closed: boolean headers: HeadersMultiMap cookies: CookieJar trailers: MultiMap trailingHeaders: io.netty.handler.codec.http.HttpHeaders statusMessage: String bytesWritten: long netSocket: Future<NetSocket> ,headers{ Params :  Returns : MultiMap} trailers{ Params :  Returns : MultiMap} statusCode{ Params :  Returns : int} getStatusCode{ Params :  Returns : int} setStatusCode{ Params : int Returns : HttpServerResponse} getStatusMessage{ Params :  Returns : String} setStatusMessage{ Params : String Returns : HttpServerResponse} setChunked{ Params : boolean Returns : Http1xServerResponse} isChunked{ Params :  Returns : boolean} putHeader{ Params : String,String Returns : Http1xServerResponse} putHeader{ Params : String,Iterable<String> Returns : Http1xServerResponse} putTrailer{ Params : String,String Returns : Http1xServerResponse} putTrailer{ Params : String,Iterable<String> Returns : Http1xServerResponse} putHeader{ Params : CharSequence,CharSequence Returns : HttpServerResponse} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : HttpServerResponse} putTrailer{ Params : CharSequence,CharSequence Returns : HttpServerResponse} putTrailer{ Params : CharSequence,Iterable<CharSequence> Returns : HttpServerResponse} setWriteQueueMaxSize{ Params : int Returns : HttpServerResponse} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : HttpServerResponse} exceptionHandler{ Params : Handler<Throwable> Returns : HttpServerResponse} closeHandler{ Params : Handler<Void> Returns : HttpServerResponse} endHandler{ Params : Handler<Void> Returns : HttpServerResponse} write{ Params : Buffer Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} write{ Params : String Returns : Future<Void>} writeContinue{ Params :  Returns : HttpServerResponse} writeEarlyHints{ Params : MultiMap Returns : Future<Void>} end{ Params : String Returns : Future<Void>} end{ Params : String,String Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params : Buffer,PromiseInternal<Void> Returns : void} completeHandshake{ Params :  Returns : void} close{ Params :  Returns : void} end{ Params :  Returns : Future<Void>} sendFile{ Params : String,long,long Returns : Future<Void>} ended{ Params :  Returns : boolean} closed{ Params :  Returns : boolean} headWritten{ Params :  Returns : boolean} bytesWritten{ Params :  Returns : long} headersEndHandler{ Params : Handler<Void> Returns : HttpServerResponse} bodyEndHandler{ Params : Handler<Void> Returns : HttpServerResponse} closeConnAfterWrite{ Params :  Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} handleException{ Params : Throwable Returns : void} handleClosed{ Params :  Returns : void} checkValid{ Params :  Returns : void} checkHeadWritten{ Params :  Returns : void} prepareHeaders{ Params : long Returns : void} setCookies{ Params :  Returns : void} reportResponseBegin{ Params :  Returns : void} write{ Params : ByteBuf,PromiseInternal<Void> Returns : Http1xServerResponse} netSocket{ Params : HttpMethod,MultiMap Returns : Future<NetSocket>} streamId{ Params :  Returns : int} reset{ Params : long Returns : boolean} push{ Params : HttpMethod,String,String,MultiMap Returns : Future<HttpServerResponse>} writeCustomFrame{ Params : int,int,Buffer Returns : HttpServerResponse} cookies{ Params :  Returns : CookieJar} addCookie{ Params : Cookie Returns : HttpServerResponse} removeCookie{ Params : String,boolean Returns : Cookie} removeCookie{ Params : String,String,String,boolean Returns : Cookie} removeCookies{ Params : String,boolean Returns : Set<Cookie>} ,headers trailers statusCode getStatusCode setStatusCode getStatusMessage setStatusMessage setChunked isChunked putHeader putHeader putTrailer putTrailer putHeader putHeader putTrailer putTrailer setWriteQueueMaxSize writeQueueFull drainHandler exceptionHandler closeHandler endHandler write write write writeContinue writeEarlyHints end end end close end sendFile ended closed headWritten bytesWritten headersEndHandler bodyEndHandler streamId reset push writeCustomFrame addCookie removeCookie removeCookie removeCookies ,,,,HttpServerResponse HttpResponse ,Future<NetSocket> ,,Future<NetSocket> ,HttpResponseStatus HttpResponseStatus IllegalStateException AssembledFullHttpResponse AssembledLastHttpContent IllegalStateException RandomAccessFile AssembledHttpResponse IllegalStateException IllegalStateException IllegalStateException IllegalStateException AssembledHttpResponse DefaultHttpContent AssembledHttpResponse CookieJar CookieJar ,: 
vert.x-master,io.vertx.core.http.impl,Http1xUpgradeToH2CHandler,1,1,0,0,0,false,ChannelInboundHandlerAdapter ,0 ,0 ,initializer: HttpServerWorker sslChannelProvider: SslChannelProvider handler: VertxHttp2ConnectionHandler<Http2ServerConnection> isCompressionSupported: boolean isDecompressionSupported: boolean ,channelRead{ Params : ChannelHandlerContext,Object Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} ,channelRead userEventTriggered ,,,,,boolean ,,boolean ,StringBuilder DefaultFullHttpResponse DefaultHttp2Headers DefaultHttp2HeadersFrame DefaultFullHttpResponse DefaultHttp2DataFrame ,ctx: , evt
vert.x-master,io.vertx.core.http.impl,Http2ClientConnection,1,0,0,0,0,false,Http2ConnectionBase ,HttpClientConnection ,Stream StreamImpl ,client: HttpClientImpl metrics: ClientMetrics evictionHandler: Handler<Void> concurrencyChangeHandler: Handler<Long> expirationTimestamp: long evicted: boolean ,evictionHandler{ Params : Handler<Void> Returns : Http2ClientConnection} concurrencyChangeHandler{ Params : Handler<Long> Returns : Http2ClientConnection} concurrency{ Params :  Returns : long} onGoAwaySent{ Params : GoAway Returns : boolean} onGoAwayReceived{ Params : GoAway Returns : boolean} tryEvict{ Params :  Returns : void} concurrencyChanged{ Params : long Returns : void} metrics{ Params :  Returns : HttpClientMetrics} upgradeStream{ Params : Object,Object,ContextInternal Returns : HttpClientStream} createStream{ Params : ContextInternal Returns : Future<HttpClientStream>} createStream2{ Params : ContextInternal Returns : StreamImpl} recycle{ Params :  Returns : void} isValid{ Params :  Returns : boolean} lastResponseReceivedTimestamp{ Params :  Returns : long} onHeadersRead{ Params : int,Http2Headers,StreamPriority,boolean Returns : void} metricsEnd{ Params : Stream Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onContinue{ Params :  Returns : void} onEarlyHints{ Params : MultiMap Returns : void} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} doWriteData{ Params : ByteBuf,boolean,Promise<Void> Returns : void} doWriteHeaders{ Params : Http2Headers,boolean,Promise<Void> Returns : void} doWriteReset{ Params : long Returns : void} endWritten{ Params :  Returns : void} onEnd{ Params : MultiMap Returns : void} onReset{ Params : long Returns : void} onHeaders{ Params : Http2Headers,StreamPriority Returns : void} removeStatusHeaders{ Params : Http2Headers Returns : void} onClose{ Params :  Returns : void} closeHandler{ Params : Handler<Void> Returns : void} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} drainHandler{ Params : Handler<Void> Returns : StreamImpl} exceptionHandler{ Params : Handler<Throwable> Returns : StreamImpl} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} isNotWritable{ Params :  Returns : boolean} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} version{ Params :  Returns : HttpVersion} handleEnd{ Params : MultiMap Returns : void} handleData{ Params : Buffer Returns : void} handleReset{ Params : long Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} handleCustomFrame{ Params : HttpFrame Returns : void} handlePriorityChange{ Params : StreamPriority Returns : void} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} handleException{ Params : Throwable Returns : void} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} writeHeaders{ Params : HttpRequestHead,ByteBuf,boolean,StreamPriority,boolean,Promise<Void> Returns : void} createStream{ Params : HttpRequestHead,Http2Headers Returns : void} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} getContext{ Params :  Returns : ContextInternal} doSetWriteQueueMaxSize{ Params : int Returns : void} reset{ Params : Throwable Returns : void} connection{ Params :  Returns : HttpClientConnection} handleIdle{ Params : IdleStateEvent Returns : void} createHttp2ConnectionHandler{ Params : HttpClientImpl,ClientMetrics,EventLoopContext,boolean,Object Returns : VertxHttp2ConnectionHandler<Http2ClientConnection>} ,evictionHandler concurrencyChangeHandler onGoAwaySent onGoAwayReceived concurrencyChanged metrics createStream isValid lastResponseReceivedTimestamp onPushPromiseRead doWriteData doWriteHeaders doWriteReset onEnd onReset onHeaders onClose closeHandler continueHandler earlyHintsHandler unknownFrameHandler pushHandler drainHandler exceptionHandler setWriteQueueMaxSize writeQueueFull isNotWritable headHandler chunkHandler priorityHandler endHandler priority updatePriority version handleEnd handleData handleReset handleWritabilityChanged handleCustomFrame handlePriorityChange writeHead writeBuffer getContext doSetWriteQueueMaxSize reset connection handleIdle ,createHttp2ConnectionHandler ,,handleContinue handleEarlyHints ,HttpClientConnection ,boolean ,,boolean ,StreamImpl Http2HeadersAdaptor StreamImpl HttpClientPush HttpResponseHead Http2HeadersAdaptor StreamResetException DefaultHttp2Headers IllegalArgumentException Http2HeadersAdaptor VertxHttp2ConnectionHandlerBuilder Http2ClientConnection ,conn: 
vert.x-master,io.vertx.core.http.impl,Stream,3,0,1,1,0,false,Http2ConnectionBase ,HttpClientConnection ,Stream StreamImpl ,push: boolean response: HttpResponseHead metric: Object trace: Object requestEnded: boolean responseEnded: boolean headHandler: Handler<HttpResponseHead> chunkHandler: Handler<Buffer> endHandler: Handler<MultiMap> priorityHandler: Handler<StreamPriority> drainHandler: Handler<Void> continueHandler: Handler<Void> earlyHintsHandler: Handler<MultiMap> unknownFrameHandler: Handler<HttpFrame> exceptionHandler: Handler<Throwable> pushHandler: Handler<HttpClientPush> closeHandler: Handler<Void> writeWindow: long windowSize: long ,evictionHandler{ Params : Handler<Void> Returns : Http2ClientConnection} concurrencyChangeHandler{ Params : Handler<Long> Returns : Http2ClientConnection} concurrency{ Params :  Returns : long} onGoAwaySent{ Params : GoAway Returns : boolean} onGoAwayReceived{ Params : GoAway Returns : boolean} tryEvict{ Params :  Returns : void} concurrencyChanged{ Params : long Returns : void} metrics{ Params :  Returns : HttpClientMetrics} upgradeStream{ Params : Object,Object,ContextInternal Returns : HttpClientStream} createStream{ Params : ContextInternal Returns : Future<HttpClientStream>} createStream2{ Params : ContextInternal Returns : StreamImpl} recycle{ Params :  Returns : void} isValid{ Params :  Returns : boolean} lastResponseReceivedTimestamp{ Params :  Returns : long} onHeadersRead{ Params : int,Http2Headers,StreamPriority,boolean Returns : void} metricsEnd{ Params : Stream Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onContinue{ Params :  Returns : void} onEarlyHints{ Params : MultiMap Returns : void} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} doWriteData{ Params : ByteBuf,boolean,Promise<Void> Returns : void} doWriteHeaders{ Params : Http2Headers,boolean,Promise<Void> Returns : void} doWriteReset{ Params : long Returns : void} endWritten{ Params :  Returns : void} onEnd{ Params : MultiMap Returns : void} onReset{ Params : long Returns : void} onHeaders{ Params : Http2Headers,StreamPriority Returns : void} removeStatusHeaders{ Params : Http2Headers Returns : void} onClose{ Params :  Returns : void} closeHandler{ Params : Handler<Void> Returns : void} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} drainHandler{ Params : Handler<Void> Returns : StreamImpl} exceptionHandler{ Params : Handler<Throwable> Returns : StreamImpl} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} isNotWritable{ Params :  Returns : boolean} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} version{ Params :  Returns : HttpVersion} handleEnd{ Params : MultiMap Returns : void} handleData{ Params : Buffer Returns : void} handleReset{ Params : long Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} handleCustomFrame{ Params : HttpFrame Returns : void} handlePriorityChange{ Params : StreamPriority Returns : void} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} handleException{ Params : Throwable Returns : void} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} writeHeaders{ Params : HttpRequestHead,ByteBuf,boolean,StreamPriority,boolean,Promise<Void> Returns : void} createStream{ Params : HttpRequestHead,Http2Headers Returns : void} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} getContext{ Params :  Returns : ContextInternal} doSetWriteQueueMaxSize{ Params : int Returns : void} reset{ Params : Throwable Returns : void} connection{ Params :  Returns : HttpClientConnection} handleIdle{ Params : IdleStateEvent Returns : void} createHttp2ConnectionHandler{ Params : HttpClientImpl,ClientMetrics,EventLoopContext,boolean,Object Returns : VertxHttp2ConnectionHandler<Http2ClientConnection>} ,evictionHandler concurrencyChangeHandler onGoAwaySent onGoAwayReceived concurrencyChanged metrics createStream isValid lastResponseReceivedTimestamp onPushPromiseRead doWriteData doWriteHeaders doWriteReset onEnd onReset onHeaders onClose closeHandler continueHandler earlyHintsHandler unknownFrameHandler pushHandler drainHandler exceptionHandler setWriteQueueMaxSize writeQueueFull isNotWritable headHandler chunkHandler priorityHandler endHandler priority updatePriority version handleEnd handleData handleReset handleWritabilityChanged handleCustomFrame handlePriorityChange writeHead writeBuffer getContext doSetWriteQueueMaxSize reset connection handleIdle ,createHttp2ConnectionHandler ,,handleContinue handleEarlyHints ,,,,,HttpResponseHead Http2HeadersAdaptor ,closeHandler: , null
vert.x-master,io.vertx.core.http.impl,StreamImpl,3,0,0,1,0,false,Http2ConnectionBase ,HttpClientConnection ,Stream StreamImpl ,,evictionHandler{ Params : Handler<Void> Returns : Http2ClientConnection} concurrencyChangeHandler{ Params : Handler<Long> Returns : Http2ClientConnection} concurrency{ Params :  Returns : long} onGoAwaySent{ Params : GoAway Returns : boolean} onGoAwayReceived{ Params : GoAway Returns : boolean} tryEvict{ Params :  Returns : void} concurrencyChanged{ Params : long Returns : void} metrics{ Params :  Returns : HttpClientMetrics} upgradeStream{ Params : Object,Object,ContextInternal Returns : HttpClientStream} createStream{ Params : ContextInternal Returns : Future<HttpClientStream>} createStream2{ Params : ContextInternal Returns : StreamImpl} recycle{ Params :  Returns : void} isValid{ Params :  Returns : boolean} lastResponseReceivedTimestamp{ Params :  Returns : long} onHeadersRead{ Params : int,Http2Headers,StreamPriority,boolean Returns : void} metricsEnd{ Params : Stream Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onContinue{ Params :  Returns : void} onEarlyHints{ Params : MultiMap Returns : void} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} doWriteData{ Params : ByteBuf,boolean,Promise<Void> Returns : void} doWriteHeaders{ Params : Http2Headers,boolean,Promise<Void> Returns : void} doWriteReset{ Params : long Returns : void} endWritten{ Params :  Returns : void} onEnd{ Params : MultiMap Returns : void} onReset{ Params : long Returns : void} onHeaders{ Params : Http2Headers,StreamPriority Returns : void} removeStatusHeaders{ Params : Http2Headers Returns : void} onClose{ Params :  Returns : void} closeHandler{ Params : Handler<Void> Returns : void} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} drainHandler{ Params : Handler<Void> Returns : StreamImpl} exceptionHandler{ Params : Handler<Throwable> Returns : StreamImpl} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} isNotWritable{ Params :  Returns : boolean} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} version{ Params :  Returns : HttpVersion} handleEnd{ Params : MultiMap Returns : void} handleData{ Params : Buffer Returns : void} handleReset{ Params : long Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} handleCustomFrame{ Params : HttpFrame Returns : void} handlePriorityChange{ Params : StreamPriority Returns : void} handleContinue{ Params :  Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} handleException{ Params : Throwable Returns : void} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} writeHeaders{ Params : HttpRequestHead,ByteBuf,boolean,StreamPriority,boolean,Promise<Void> Returns : void} createStream{ Params : HttpRequestHead,Http2Headers Returns : void} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} getContext{ Params :  Returns : ContextInternal} doSetWriteQueueMaxSize{ Params : int Returns : void} reset{ Params : Throwable Returns : void} connection{ Params :  Returns : HttpClientConnection} handleIdle{ Params : IdleStateEvent Returns : void} createHttp2ConnectionHandler{ Params : HttpClientImpl,ClientMetrics,EventLoopContext,boolean,Object Returns : VertxHttp2ConnectionHandler<Http2ClientConnection>} ,evictionHandler concurrencyChangeHandler onGoAwaySent onGoAwayReceived concurrencyChanged metrics createStream isValid lastResponseReceivedTimestamp onPushPromiseRead doWriteData doWriteHeaders doWriteReset onEnd onReset onHeaders onClose closeHandler continueHandler earlyHintsHandler unknownFrameHandler pushHandler drainHandler exceptionHandler setWriteQueueMaxSize writeQueueFull isNotWritable headHandler chunkHandler priorityHandler endHandler priority updatePriority version handleEnd handleData handleReset handleWritabilityChanged handleCustomFrame handlePriorityChange writeHead writeBuffer getContext doSetWriteQueueMaxSize reset connection handleIdle ,createHttp2ConnectionHandler ,,handleContinue handleEarlyHints ,HttpClientStream ,,,,StreamResetException DefaultHttp2Headers IllegalArgumentException Http2HeadersAdaptor ,conn.context: , code, this::writeReset
vert.x-master,io.vertx.core.http.impl,Http2ConnectionBase,1,0,1,0,0,false,ConnectionBase ,Http2FrameListener HttpConnection ,0 ,log: Logger handlerContext: ChannelHandlerContext handler: VertxHttp2ConnectionHandler streamKey: Http2Connection.PropertyKey shutdown: boolean remoteSettingsHandler: Handler<io.vertx.core.http.Http2Settings> updateSettingsHandlers: ArrayDeque<Handler<Void>> pongHandlers: ArrayDeque<Promise<Buffer>> localSettings: Http2Settings remoteSettings: Http2Settings goAwayHandler: Handler<GoAway> shutdownHandler: Handler<Void> pingHandler: Handler<Buffer> goAwayStatus: GoAway windowSize: int maxConcurrentStreams: long ,safeBuffer{ Params : ByteBuf Returns : ByteBuf} vertx{ Params :  Returns : VertxInternal} handleClosed{ Params :  Returns : void} handleInterestedOpsChanged{ Params :  Returns : void} handleIdle{ Params : IdleStateEvent Returns : void} onConnectionError{ Params : Throwable Returns : void} stream{ Params : int Returns : VertxHttp2Stream<?>} onStreamError{ Params : int,Throwable Returns : void} onStreamWritabilityChanged{ Params : Http2Stream Returns : void} onStreamClosed{ Params : Http2Stream Returns : void} onGoAwaySent{ Params : GoAway Returns : boolean} onGoAwayReceived{ Params : GoAway Returns : boolean} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,boolean Returns : void} onHeadersRead{ Params : int,Http2Headers,StreamPriority,boolean Returns : void} onSettingsAckRead{ Params : ChannelHandlerContext Returns : void} concurrencyChanged{ Params : long Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} onPingRead{ Params : ChannelHandlerContext,long Returns : void} onPingAckRead{ Params : ChannelHandlerContext,long Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} onUnknownFrame{ Params : ChannelHandlerContext,byte,int,Http2Flags,ByteBuf Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} getWindowSize{ Params :  Returns : int} setWindowSize{ Params : int Returns : HttpConnection} goAway{ Params : long,int,Buffer Returns : HttpConnection} goAwayHandler{ Params : Handler<GoAway> Returns : HttpConnection} shutdownHandler{ Params : Handler<Void> Returns : HttpConnection} shutdown{ Params : long Returns : Future<Void>} shutdown{ Params : long,PromiseInternal<Void> Returns : void} closeHandler{ Params : Handler<Void> Returns : Http2ConnectionBase} close{ Params :  Returns : Future<Void>} remoteSettingsHandler{ Params : Handler<io.vertx.core.http.Http2Settings> Returns : HttpConnection} remoteSettings{ Params :  Returns : io.vertx.core.http.Http2Settings} settings{ Params :  Returns : io.vertx.core.http.Http2Settings} updateSettings{ Params : io.vertx.core.http.Http2Settings Returns : Future<Void>} updateSettings{ Params : Http2Settings Returns : Future<Void>} ping{ Params : Buffer Returns : Future<Buffer>} pingHandler{ Params : Handler<Buffer> Returns : HttpConnection} exceptionHandler{ Params : Handler<Throwable> Returns : Http2ConnectionBase} consumeCredits{ Params : Http2Stream,int Returns : void} checkShutdown{ Params :  Returns : void} doShutdown{ Params : Handler<Void> Returns : void} ,handleClosed handleInterestedOpsChanged handleIdle onPriorityRead onHeadersRead onHeadersRead onSettingsAckRead onSettingsRead onPingRead onPingAckRead onPushPromiseRead onGoAwayRead onWindowUpdateRead onUnknownFrame onRstStreamRead onDataRead getWindowSize setWindowSize goAway goAwayHandler shutdownHandler shutdown closeHandler close remoteSettingsHandler remoteSettings settings updateSettings ping pingHandler exceptionHandler ,safeBuffer ,,onHeadersRead ,Http2FrameListener HttpConnection ,long ,,long ,ArrayDeque ArrayDeque ArrayList HttpClosedException GoAway StreamPriority StreamPriority HttpFrameImpl VertxException IllegalArgumentException IllegalArgumentException ,context: , shutdownHandler
vert.x-master,io.vertx.core.http.impl,Http2ServerConnection,1,1,0,0,0,false,Http2ConnectionBase ,HttpServerConnection ,EncodingDetector Push ,options: HttpServerOptions serverOrigin: String metrics: HttpServerMetrics encodingDetector: Function<String, String> streamContextSupplier: Supplier<ContextInternal> requestHandler: Handler<HttpServerRequest> concurrentStreams: int pendingPushes: ArrayDeque<Push> upgraded: VertxHttp2Stream ,handler{ Params : Handler<HttpServerRequest> Returns : HttpServerConnection} invalidRequestHandler{ Params : Handler<HttpServerRequest> Returns : HttpServerConnection} metrics{ Params :  Returns : HttpServerMetrics} isMalformedRequest{ Params : Http2Headers Returns : boolean} determineEncoding{ Params : String Returns : String} determineContentEncoding{ Params : Http2Headers Returns : String} createStream{ Params : int,Http2Headers,boolean Returns : Http2ServerStream} stream{ Params : int Returns : VertxHttp2Stream<?>} onHeadersRead{ Params : int,Http2Headers,StreamPriority,boolean Returns : void} sendPush{ Params : int,String,HttpMethod,MultiMap,String,StreamPriority,Promise<HttpServerResponse> Returns : void} doSendPush{ Params : int,String,HttpMethod,MultiMap,String,StreamPriority,Promise<HttpServerResponse> Returns : void} updateSettings{ Params : Http2Settings Returns : io.vertx.core.Future<Void>} response{ Params :  Returns : Http2ServerResponse} dispatch{ Params : Handler<HttpServerRequest> Returns : void} handleReset{ Params : long Returns : void} handleException{ Params : Throwable Returns : void} handleClose{ Params :  Returns : void} complete{ Params :  Returns : void} ,handler invalidRequestHandler determineEncoding onHeadersRead response dispatch handleReset handleException handleClose ,isMalformedRequest ,,,HttpServerConnection ,VertxHttp2Stream ,,VertxHttp2Stream ,ArrayDeque URI Http2ServerStream Http2ServerRequest DefaultHttp2Headers Http2ServerStream Push Http2ServerResponse UnsupportedOperationException StreamResetException ,super: , settingsUpdate
vert.x-master,io.vertx.core.http.impl,EncodingDetector,3,2,0,1,0,false,Http2ConnectionBase ,HttpServerConnection ,EncodingDetector Push ,,handler{ Params : Handler<HttpServerRequest> Returns : HttpServerConnection} invalidRequestHandler{ Params : Handler<HttpServerRequest> Returns : HttpServerConnection} metrics{ Params :  Returns : HttpServerMetrics} isMalformedRequest{ Params : Http2Headers Returns : boolean} determineEncoding{ Params : String Returns : String} determineContentEncoding{ Params : Http2Headers Returns : String} createStream{ Params : int,Http2Headers,boolean Returns : Http2ServerStream} stream{ Params : int Returns : VertxHttp2Stream<?>} onHeadersRead{ Params : int,Http2Headers,StreamPriority,boolean Returns : void} sendPush{ Params : int,String,HttpMethod,MultiMap,String,StreamPriority,Promise<HttpServerResponse> Returns : void} doSendPush{ Params : int,String,HttpMethod,MultiMap,String,StreamPriority,Promise<HttpServerResponse> Returns : void} updateSettings{ Params : Http2Settings Returns : io.vertx.core.Future<Void>} response{ Params :  Returns : Http2ServerResponse} dispatch{ Params : Handler<HttpServerRequest> Returns : void} handleReset{ Params : long Returns : void} handleException{ Params : Throwable Returns : void} handleClose{ Params :  Returns : void} complete{ Params :  Returns : void} ,handler invalidRequestHandler determineEncoding onHeadersRead response dispatch handleReset handleException handleClose ,isMalformedRequest ,,,,,,,,super: , acceptEncoding
vert.x-master,io.vertx.core.http.impl,Push,3,2,0,0,0,false,Http2ConnectionBase ,HttpServerConnection ,EncodingDetector Push ,context: ContextInternal stream: Http2ServerStream response: Http2ServerResponse promise: Promise<HttpServerResponse> ,handler{ Params : Handler<HttpServerRequest> Returns : HttpServerConnection} invalidRequestHandler{ Params : Handler<HttpServerRequest> Returns : HttpServerConnection} metrics{ Params :  Returns : HttpServerMetrics} isMalformedRequest{ Params : Http2Headers Returns : boolean} determineEncoding{ Params : String Returns : String} determineContentEncoding{ Params : Http2Headers Returns : String} createStream{ Params : int,Http2Headers,boolean Returns : Http2ServerStream} stream{ Params : int Returns : VertxHttp2Stream<?>} onHeadersRead{ Params : int,Http2Headers,StreamPriority,boolean Returns : void} sendPush{ Params : int,String,HttpMethod,MultiMap,String,StreamPriority,Promise<HttpServerResponse> Returns : void} doSendPush{ Params : int,String,HttpMethod,MultiMap,String,StreamPriority,Promise<HttpServerResponse> Returns : void} updateSettings{ Params : Http2Settings Returns : io.vertx.core.Future<Void>} response{ Params :  Returns : Http2ServerResponse} dispatch{ Params : Handler<HttpServerRequest> Returns : void} handleReset{ Params : long Returns : void} handleException{ Params : Throwable Returns : void} handleClose{ Params :  Returns : void} complete{ Params :  Returns : void} ,handler invalidRequestHandler determineEncoding onHeadersRead response dispatch handleReset handleException handleClose ,isMalformedRequest ,,,Http2ServerStreamHandler ,Promise<HttpServerResponse> ,,Promise<HttpServerResponse> ,Http2ServerResponse UnsupportedOperationException StreamResetException ,promise: , response
vert.x-master,io.vertx.core.http.impl,Http2ServerRequest,1,1,0,0,0,false,HttpServerRequestInternal ,Http2ServerStreamHandler io.vertx.core.spi.observability.HttpRequest ,0 ,log: Logger context: ContextInternal stream: Http2ServerStream response: Http2ServerResponse serverOrigin: String headersMap: MultiMap scheme: String paramsCharset: Charset params: MultiMap absoluteURI: String attributes: MultiMap eventHandler: HttpEventHandler ended: boolean uploadHandler: Handler<HttpServerFileUpload> postRequestDecoder: HttpPostRequestDecoder customFrameHandler: Handler<HttpFrame> streamPriorityHandler: Handler<StreamPriority> ,eventHandler{ Params : boolean Returns : HttpEventHandler} dispatch{ Params : Handler<HttpServerRequest> Returns : void} handleException{ Params : Throwable Returns : void} notifyException{ Params : Throwable Returns : void} handleClose{ Params :  Returns : void} handleCustomFrame{ Params : HttpFrame Returns : void} handleData{ Params : Buffer Returns : void} handleEnd{ Params : MultiMap Returns : void} handleReset{ Params : long Returns : void} checkEnded{ Params :  Returns : void} method{ Params :  Returns : HttpMethod} id{ Params :  Returns : int} metric{ Params :  Returns : Object} context{ Params :  Returns : Context} exceptionHandler{ Params : Handler<Throwable> Returns : HttpServerRequest} handler{ Params : Handler<Buffer> Returns : HttpServerRequest} pause{ Params :  Returns : HttpServerRequest} resume{ Params :  Returns : HttpServerRequest} fetch{ Params : long Returns : HttpServerRequest} endHandler{ Params : Handler<Void> Returns : HttpServerRequest} version{ Params :  Returns : HttpVersion} uri{ Params :  Returns : String} path{ Params :  Returns : String} query{ Params :  Returns : String} scheme{ Params :  Returns : String} host{ Params :  Returns : String} bytesRead{ Params :  Returns : long} response{ Params :  Returns : Http2ServerResponse} headers{ Params :  Returns : MultiMap} setParamsCharset{ Params : String Returns : HttpServerRequest} getParamsCharset{ Params :  Returns : String} params{ Params :  Returns : MultiMap} peerCertificateChain{ Params :  Returns : X509Certificate[]} remoteAddress{ Params :  Returns : SocketAddress} absoluteURI{ Params :  Returns : String} toNetSocket{ Params :  Returns : Future<NetSocket>} setExpectMultipart{ Params : boolean Returns : HttpServerRequest} isExpectMultipart{ Params :  Returns : boolean} uploadHandler{ Params : Handler<HttpServerFileUpload> Returns : HttpServerRequest} formAttributes{ Params :  Returns : MultiMap} getFormAttribute{ Params : String Returns : String} streamId{ Params :  Returns : int} toWebSocket{ Params :  Returns : Future<ServerWebSocket>} isEnded{ Params :  Returns : boolean} customFrameHandler{ Params : Handler<HttpFrame> Returns : HttpServerRequest} connection{ Params :  Returns : HttpConnection} body{ Params :  Returns : Future<Buffer>} end{ Params :  Returns : Future<Void>} streamPriority{ Params :  Returns : StreamPriority} streamPriorityHandler{ Params : Handler<StreamPriority> Returns : HttpServerRequest} decoderResult{ Params :  Returns : DecoderResult} handlePriorityChange{ Params : StreamPriority Returns : void} cookies{ Params :  Returns : Set<Cookie>} cookies{ Params : String Returns : Set<Cookie>} getCookie{ Params : String Returns : Cookie} getCookie{ Params : String,String,String Returns : Cookie} routed{ Params : String Returns : HttpServerRequest} ,handleException handleClose handleCustomFrame handleReset method id metric context exceptionHandler handler pause resume fetch endHandler version uri path query scheme host bytesRead response headers setParamsCharset getParamsCharset params peerCertificateChain remoteAddress absoluteURI toNetSocket setExpectMultipart isExpectMultipart uploadHandler formAttributes getFormAttribute streamId toWebSocket isEnded customFrameHandler connection body end streamPriorityHandler decoderResult handlePriorityChange cookies cookies getCookie getCookie routed ,,,,Http2ServerStreamHandler HttpRequest ,Handler<StreamPriority> ,,Handler<StreamPriority> ,Http2ServerResponse Http2HeadersAdaptor HttpEventHandler DefaultHttpContent StreamResetException IllegalStateException IllegalStateException IllegalStateException IllegalStateException DefaultHttpRequest NettyFileUploadDataFactory HttpPostRequestDecoder ,stream: , route
vert.x-master,io.vertx.core.http.impl,Http2ServerResponse,1,1,0,0,0,false,0 ,HttpServerResponse HttpResponse ,0 ,stream: Http2ServerStream ctx: ChannelHandlerContext conn: Http2ServerConnection push: boolean contentEncoding: String headers: Http2Headers headersMap: Http2HeadersAdaptor trailers: Http2Headers trailedMap: Http2HeadersAdaptor chunked: boolean headWritten: boolean ended: boolean closed: boolean cookies: CookieJar status: HttpResponseStatus statusMessage: String drainHandler: Handler<Void> exceptionHandler: Handler<Throwable> headersEndHandler: Handler<Void> bodyEndHandler: Handler<Void> closeHandler: Handler<Void> endHandler: Handler<Void> netSocket: Future<NetSocket> ,isPush{ Params :  Returns : boolean} handleReset{ Params : long Returns : void} handleException{ Params : Throwable Returns : void} handleClose{ Params :  Returns : void} checkHeadWritten{ Params :  Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : HttpServerResponse} statusCode{ Params :  Returns : int} getStatusCode{ Params :  Returns : int} setStatusCode{ Params : int Returns : HttpServerResponse} getStatusMessage{ Params :  Returns : String} setStatusMessage{ Params : String Returns : HttpServerResponse} setChunked{ Params : boolean Returns : HttpServerResponse} isChunked{ Params :  Returns : boolean} headers{ Params :  Returns : MultiMap} putHeader{ Params : String,String Returns : HttpServerResponse} putHeader{ Params : CharSequence,CharSequence Returns : HttpServerResponse} putHeader{ Params : String,Iterable<String> Returns : HttpServerResponse} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : HttpServerResponse} trailers{ Params :  Returns : MultiMap} putTrailer{ Params : String,String Returns : HttpServerResponse} putTrailer{ Params : CharSequence,CharSequence Returns : HttpServerResponse} putTrailer{ Params : String,Iterable<String> Returns : HttpServerResponse} putTrailer{ Params : CharSequence,Iterable<CharSequence> Returns : HttpServerResponse} closeHandler{ Params : Handler<Void> Returns : HttpServerResponse} endHandler{ Params : Handler<Void> Returns : HttpServerResponse} writeContinue{ Params :  Returns : HttpServerResponse} writeEarlyHints{ Params : MultiMap Returns : Future<Void>} write{ Params : Buffer Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} write{ Params : String Returns : Future<Void>} end{ Params : String Returns : Future<Void>} end{ Params : String,String Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params :  Returns : Future<Void>} netSocket{ Params :  Returns : Future<NetSocket>} write{ Params : ByteBuf,boolean Returns : Future<Void>} needsContentLengthHeader{ Params :  Returns : boolean} checkSendHeaders{ Params : boolean Returns : boolean} prepareHeaders{ Params :  Returns : void} setCookies{ Params :  Returns : void} writeCustomFrame{ Params : int,int,Buffer Returns : HttpServerResponse} checkValid{ Params :  Returns : void} handlerWritabilityChanged{ Params : boolean Returns : void} writeQueueFull{ Params :  Returns : boolean} setWriteQueueMaxSize{ Params : int Returns : HttpServerResponse} drainHandler{ Params : Handler<Void> Returns : HttpServerResponse} sendFile{ Params : String,long,long Returns : Future<Void>} close{ Params :  Returns : void} ended{ Params :  Returns : boolean} closed{ Params :  Returns : boolean} headWritten{ Params :  Returns : boolean} headersEndHandler{ Params : Handler<Void> Returns : HttpServerResponse} bodyEndHandler{ Params : Handler<Void> Returns : HttpServerResponse} bytesWritten{ Params :  Returns : long} streamId{ Params :  Returns : int} reset{ Params : long Returns : boolean} push{ Params : HttpMethod,String,String,MultiMap Returns : Future<HttpServerResponse>} setStreamPriority{ Params : StreamPriority Returns : HttpServerResponse} cookies{ Params :  Returns : CookieJar} addCookie{ Params : Cookie Returns : HttpServerResponse} removeCookie{ Params : String,boolean Returns : Cookie} removeCookie{ Params : String,String,String,boolean Returns : Cookie} removeCookies{ Params : String,boolean Returns : Set<Cookie>} ,exceptionHandler statusCode getStatusCode setStatusCode getStatusMessage setStatusMessage setChunked isChunked headers putHeader putHeader putHeader putHeader trailers putTrailer putTrailer putTrailer putTrailer closeHandler endHandler writeContinue writeEarlyHints write write write end end end end writeCustomFrame writeQueueFull setWriteQueueMaxSize drainHandler sendFile close ended closed headWritten headersEndHandler bodyEndHandler bytesWritten streamId reset push setStreamPriority addCookie removeCookie removeCookie removeCookies ,,,,HttpServerResponse HttpResponse ,Future<NetSocket> ,,Future<NetSocket> ,DefaultHttp2Headers StreamResetException IllegalStateException IllegalArgumentException Http2HeadersAdaptor Http2HeadersAdaptor DefaultHttp2Headers DefaultHttp2Headers DefaultHttp2Headers IllegalStateException IllegalStateException IllegalStateException CookieJar CookieJar ,: 
vert.x-master,io.vertx.core.http.impl,Http2ServerStream,1,0,0,0,0,false,VertxHttp2Stream<Http2ServerConnection> ,0 ,0 ,headers: Http2Headers method: HttpMethod uri: String host: String tracingPolicy: TracingPolicy metric: Object trace: Object halfClosedRemote: boolean requestEnded: boolean responseEnded: boolean request: Http2ServerStreamHandler ,registerMetrics{ Params :  Returns : void} onHeaders{ Params : Http2Headers,StreamPriority Returns : void} onEnd{ Params : MultiMap Returns : void} doWriteHeaders{ Params : Http2Headers,boolean,Promise<Void> Returns : void} doWriteReset{ Params : long Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} method{ Params :  Returns : HttpMethod} endWritten{ Params :  Returns : void} handleClose{ Params :  Returns : void} handleReset{ Params : long Returns : void} handleException{ Params : Throwable Returns : void} handleCustomFrame{ Params : HttpFrame Returns : void} handlePriorityChange{ Params : StreamPriority Returns : void} handleData{ Params : Buffer Returns : void} handleEnd{ Params : MultiMap Returns : void} onClose{ Params :  Returns : void} metric{ Params :  Returns : Object} routed{ Params : String Returns : HttpServerRequest} ,onHeaders onEnd doWriteHeaders doWriteReset handleWritabilityChanged endWritten handleClose handleReset handleException handleCustomFrame handlePriorityChange handleData handleEnd onClose ,,,,,,,,Http2HeadersAdaptor ,metrics: , metric, route
vert.x-master,io.vertx.core.http.impl,Http2ServerStreamHandler,2,0,0,0,0,true,VertxHttp2Stream<Http2ServerConnection> ,0 ,0 ,,response{ Params :  Returns : Http2ServerResponse} dispatch{ Params : Handler<HttpServerRequest> Returns : void} handleReset{ Params : long Returns : void} handleException{ Params : Throwable Returns : void} handleClose{ Params :  Returns : void} handleData{ Params : Buffer Returns : void} handleEnd{ Params : MultiMap Returns : void} handleCustomFrame{ Params : HttpFrame Returns : void} handlePriorityChange{ Params : StreamPriority Returns : void} onException{ Params : Throwable Returns : void} onClose{ Params :  Returns : void} ,,,,,,,,,,metrics: , metric, route
vert.x-master,io.vertx.core.http.impl,Http2UpgradeClientConnection,1,1,0,0,0,false,0 ,HttpClientConnection ,DelegatingStream UpgradingStream ,SEND_BUFFERED_MESSAGES: Object log: Logger client: HttpClientImpl current: HttpClientConnection upgradeProcessed: boolean closeHandler: Handler<Void> shutdownHandler: Handler<Void> goAwayHandler: Handler<GoAway> exceptionHandler: Handler<Throwable> pingHandler: Handler<Buffer> evictionHandler: Handler<Void> concurrencyChangeHandler: Handler<Long> remoteSettingsHandler: Handler<Http2Settings> ,unwrap{ Params :  Returns : HttpClientConnection} concurrency{ Params :  Returns : long} channelHandlerContext{ Params :  Returns : ChannelHandlerContext} channel{ Params :  Returns : Channel} close{ Params :  Returns : Future<Void>} metric{ Params :  Returns : Object} lastResponseReceivedTimestamp{ Params :  Returns : long} id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} connection{ Params :  Returns : HttpClientConnection} getContext{ Params :  Returns : ContextInternal} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeFrame{ Params : int,int,ByteBuf Returns : void} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : WriteStream<Buffer>} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : WriteStream<Buffer>} connection{ Params :  Returns : HttpClientConnection} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} upgradeTo{ Params : ChannelHandlerContext,FullHttpResponse Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} handlerRemoved{ Params : ChannelHandlerContext Returns : void} doWriteHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean,Handler<AsyncResult<Void>> Returns : void} id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} getContext{ Params :  Returns : ContextInternal} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} drainHandler{ Params : Handler<Void> Returns : UpgradingStream} exceptionHandler{ Params : Handler<Throwable> Returns : UpgradingStream} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeFrame{ Params : int,int,ByteBuf Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} createStream{ Params : ContextInternal Returns : Future<HttpClientStream>} getContext{ Params :  Returns : ContextInternal} remoteSettingsHandler{ Params : Handler<Http2Settings> Returns : HttpConnection} pingHandler{ Params : Handler<Buffer> Returns : HttpConnection} goAwayHandler{ Params : Handler<GoAway> Returns : HttpConnection} shutdownHandler{ Params : Handler<Void> Returns : HttpConnection} closeHandler{ Params : Handler<Void> Returns : HttpConnection} exceptionHandler{ Params : Handler<Throwable> Returns : HttpConnection} evictionHandler{ Params : Handler<Void> Returns : HttpClientConnection} concurrencyChangeHandler{ Params : Handler<Long> Returns : HttpClientConnection} goAway{ Params : long,int,Buffer Returns : HttpConnection} shutdown{ Params : long Returns : Future<Void>} updateSettings{ Params : Http2Settings Returns : Future<Void>} settings{ Params :  Returns : Http2Settings} remoteSettings{ Params :  Returns : Http2Settings} ping{ Params : Buffer Returns : Future<Buffer>} remoteAddress{ Params :  Returns : SocketAddress} remoteAddress{ Params : boolean Returns : SocketAddress} localAddress{ Params :  Returns : SocketAddress} localAddress{ Params : boolean Returns : SocketAddress} isSsl{ Params :  Returns : boolean} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} peerCertificates{ Params :  Returns : List<Certificate>} isValid{ Params :  Returns : boolean} indicatedServerName{ Params :  Returns : String} ,concurrency channelHandlerContext channel close metric lastResponseReceivedTimestamp id metric trace version connection getContext writeHead writeBuffer writeFrame continueHandler earlyHintsHandler pushHandler unknownFrameHandler headHandler chunkHandler endHandler priorityHandler closeHandler doSetWriteQueueMaxSize isNotWritable doPause doFetch reset priority updatePriority exceptionHandler setWriteQueueMaxSize writeQueueFull drainHandler connection writeHead userEventTriggered channelRead upgradeTo channelRead userEventTriggered handlerRemoved id metric trace version getContext continueHandler earlyHintsHandler pushHandler closeHandler drainHandler exceptionHandler headHandler chunkHandler endHandler unknownFrameHandler priorityHandler setWriteQueueMaxSize writeQueueFull writeBuffer writeFrame doSetWriteQueueMaxSize isNotWritable doPause doFetch reset priority updatePriority createStream getContext remoteSettingsHandler pingHandler goAwayHandler shutdownHandler closeHandler exceptionHandler evictionHandler concurrencyChangeHandler goAway shutdown updateSettings settings remoteSettings ping remoteAddress remoteAddress localAddress localAddress isSsl sslSession peerCertificateChain peerCertificates isValid indicatedServerName ,,,,HttpClientConnection ,Handler<Http2Settings> ,,Handler<Http2Settings> ,Object VertxHttp2ClientUpgradeCodec HttpClientUpgradeHandler ArrayDeque TooLongFrameException UpgradeRequestHandler UpgradingStream DelegatingStream ,current: 
vert.x-master,io.vertx.core.http.impl,DelegatingStream,3,2,0,1,0,false,0 ,HttpClientConnection ,DelegatingStream UpgradingStream ,connection: Http2UpgradeClientConnection delegate: HttpClientStream ,unwrap{ Params :  Returns : HttpClientConnection} concurrency{ Params :  Returns : long} channelHandlerContext{ Params :  Returns : ChannelHandlerContext} channel{ Params :  Returns : Channel} close{ Params :  Returns : Future<Void>} metric{ Params :  Returns : Object} lastResponseReceivedTimestamp{ Params :  Returns : long} id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} connection{ Params :  Returns : HttpClientConnection} getContext{ Params :  Returns : ContextInternal} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeFrame{ Params : int,int,ByteBuf Returns : void} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : WriteStream<Buffer>} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : WriteStream<Buffer>} connection{ Params :  Returns : HttpClientConnection} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} upgradeTo{ Params : ChannelHandlerContext,FullHttpResponse Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} handlerRemoved{ Params : ChannelHandlerContext Returns : void} doWriteHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean,Handler<AsyncResult<Void>> Returns : void} id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} getContext{ Params :  Returns : ContextInternal} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} drainHandler{ Params : Handler<Void> Returns : UpgradingStream} exceptionHandler{ Params : Handler<Throwable> Returns : UpgradingStream} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeFrame{ Params : int,int,ByteBuf Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} createStream{ Params : ContextInternal Returns : Future<HttpClientStream>} getContext{ Params :  Returns : ContextInternal} remoteSettingsHandler{ Params : Handler<Http2Settings> Returns : HttpConnection} pingHandler{ Params : Handler<Buffer> Returns : HttpConnection} goAwayHandler{ Params : Handler<GoAway> Returns : HttpConnection} shutdownHandler{ Params : Handler<Void> Returns : HttpConnection} closeHandler{ Params : Handler<Void> Returns : HttpConnection} exceptionHandler{ Params : Handler<Throwable> Returns : HttpConnection} evictionHandler{ Params : Handler<Void> Returns : HttpClientConnection} concurrencyChangeHandler{ Params : Handler<Long> Returns : HttpClientConnection} goAway{ Params : long,int,Buffer Returns : HttpConnection} shutdown{ Params : long Returns : Future<Void>} updateSettings{ Params : Http2Settings Returns : Future<Void>} settings{ Params :  Returns : Http2Settings} remoteSettings{ Params :  Returns : Http2Settings} ping{ Params : Buffer Returns : Future<Buffer>} remoteAddress{ Params :  Returns : SocketAddress} remoteAddress{ Params : boolean Returns : SocketAddress} localAddress{ Params :  Returns : SocketAddress} localAddress{ Params : boolean Returns : SocketAddress} isSsl{ Params :  Returns : boolean} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} peerCertificates{ Params :  Returns : List<Certificate>} isValid{ Params :  Returns : boolean} indicatedServerName{ Params :  Returns : String} ,concurrency channelHandlerContext channel close metric lastResponseReceivedTimestamp id metric trace version connection getContext writeHead writeBuffer writeFrame continueHandler earlyHintsHandler pushHandler unknownFrameHandler headHandler chunkHandler endHandler priorityHandler closeHandler doSetWriteQueueMaxSize isNotWritable doPause doFetch reset priority updatePriority exceptionHandler setWriteQueueMaxSize writeQueueFull drainHandler connection writeHead userEventTriggered channelRead upgradeTo channelRead userEventTriggered handlerRemoved id metric trace version getContext continueHandler earlyHintsHandler pushHandler closeHandler drainHandler exceptionHandler headHandler chunkHandler endHandler unknownFrameHandler priorityHandler setWriteQueueMaxSize writeQueueFull writeBuffer writeFrame doSetWriteQueueMaxSize isNotWritable doPause doFetch reset priority updatePriority createStream getContext remoteSettingsHandler pingHandler goAwayHandler shutdownHandler closeHandler exceptionHandler evictionHandler concurrencyChangeHandler goAway shutdown updateSettings settings remoteSettings ping remoteAddress remoteAddress localAddress localAddress isSsl sslSession peerCertificateChain peerCertificates isValid indicatedServerName ,,,,HttpClientStream ,HttpClientStream ,,HttpClientStream ,,delegate: , handler
vert.x-master,io.vertx.core.http.impl,UpgradingStream,3,2,0,1,0,false,0 ,HttpClientConnection ,DelegatingStream UpgradingStream ,upgradingConnection: Http1xClientConnection upgradingStream: HttpClientStream upgradedConnection: Http2UpgradeClientConnection upgradedStream: HttpClientStream headHandler: Handler<HttpResponseHead> chunkHandler: Handler<Buffer> endHandler: Handler<MultiMap> priorityHandler: Handler<StreamPriority> exceptionHandler: Handler<Throwable> drainHandler: Handler<Void> continueHandler: Handler<Void> earlyHintsHandler: Handler<MultiMap> pushHandler: Handler<HttpClientPush> unknownFrameHandler: Handler<HttpFrame> closeHandler: Handler<Void> ,unwrap{ Params :  Returns : HttpClientConnection} concurrency{ Params :  Returns : long} channelHandlerContext{ Params :  Returns : ChannelHandlerContext} channel{ Params :  Returns : Channel} close{ Params :  Returns : Future<Void>} metric{ Params :  Returns : Object} lastResponseReceivedTimestamp{ Params :  Returns : long} id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} connection{ Params :  Returns : HttpClientConnection} getContext{ Params :  Returns : ContextInternal} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeFrame{ Params : int,int,ByteBuf Returns : void} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : WriteStream<Buffer>} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : WriteStream<Buffer>} connection{ Params :  Returns : HttpClientConnection} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} upgradeTo{ Params : ChannelHandlerContext,FullHttpResponse Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} handlerRemoved{ Params : ChannelHandlerContext Returns : void} doWriteHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean,Handler<AsyncResult<Void>> Returns : void} id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} getContext{ Params :  Returns : ContextInternal} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} drainHandler{ Params : Handler<Void> Returns : UpgradingStream} exceptionHandler{ Params : Handler<Throwable> Returns : UpgradingStream} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeFrame{ Params : int,int,ByteBuf Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} createStream{ Params : ContextInternal Returns : Future<HttpClientStream>} getContext{ Params :  Returns : ContextInternal} remoteSettingsHandler{ Params : Handler<Http2Settings> Returns : HttpConnection} pingHandler{ Params : Handler<Buffer> Returns : HttpConnection} goAwayHandler{ Params : Handler<GoAway> Returns : HttpConnection} shutdownHandler{ Params : Handler<Void> Returns : HttpConnection} closeHandler{ Params : Handler<Void> Returns : HttpConnection} exceptionHandler{ Params : Handler<Throwable> Returns : HttpConnection} evictionHandler{ Params : Handler<Void> Returns : HttpClientConnection} concurrencyChangeHandler{ Params : Handler<Long> Returns : HttpClientConnection} goAway{ Params : long,int,Buffer Returns : HttpConnection} shutdown{ Params : long Returns : Future<Void>} updateSettings{ Params : Http2Settings Returns : Future<Void>} settings{ Params :  Returns : Http2Settings} remoteSettings{ Params :  Returns : Http2Settings} ping{ Params : Buffer Returns : Future<Buffer>} remoteAddress{ Params :  Returns : SocketAddress} remoteAddress{ Params : boolean Returns : SocketAddress} localAddress{ Params :  Returns : SocketAddress} localAddress{ Params : boolean Returns : SocketAddress} isSsl{ Params :  Returns : boolean} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} peerCertificates{ Params :  Returns : List<Certificate>} isValid{ Params :  Returns : boolean} indicatedServerName{ Params :  Returns : String} ,concurrency channelHandlerContext channel close metric lastResponseReceivedTimestamp id metric trace version connection getContext writeHead writeBuffer writeFrame continueHandler earlyHintsHandler pushHandler unknownFrameHandler headHandler chunkHandler endHandler priorityHandler closeHandler doSetWriteQueueMaxSize isNotWritable doPause doFetch reset priority updatePriority exceptionHandler setWriteQueueMaxSize writeQueueFull drainHandler connection writeHead userEventTriggered channelRead upgradeTo channelRead userEventTriggered handlerRemoved id metric trace version getContext continueHandler earlyHintsHandler pushHandler closeHandler drainHandler exceptionHandler headHandler chunkHandler endHandler unknownFrameHandler priorityHandler setWriteQueueMaxSize writeQueueFull writeBuffer writeFrame doSetWriteQueueMaxSize isNotWritable doPause doFetch reset priority updatePriority createStream getContext remoteSettingsHandler pingHandler goAwayHandler shutdownHandler closeHandler exceptionHandler evictionHandler concurrencyChangeHandler goAway shutdown updateSettings settings remoteSettings ping remoteAddress remoteAddress localAddress localAddress isSsl sslSession peerCertificateChain peerCertificates isValid indicatedServerName ,,,,HttpClientStream ,Handler<Void> ,,Handler<Void> ,VertxHttp2ClientUpgradeCodec HttpClientUpgradeHandler ArrayDeque TooLongFrameException UpgradeRequestHandler ,upgradingStream: , streamPriority
vert.x-master,io.vertx.core.http.impl,UpgradeRequestHandler,1,0,0,0,0,false,0 ,HttpClientConnection ,DelegatingStream UpgradingStream ,,unwrap{ Params :  Returns : HttpClientConnection} concurrency{ Params :  Returns : long} channelHandlerContext{ Params :  Returns : ChannelHandlerContext} channel{ Params :  Returns : Channel} close{ Params :  Returns : Future<Void>} metric{ Params :  Returns : Object} lastResponseReceivedTimestamp{ Params :  Returns : long} id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} connection{ Params :  Returns : HttpClientConnection} getContext{ Params :  Returns : ContextInternal} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeFrame{ Params : int,int,ByteBuf Returns : void} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : WriteStream<Buffer>} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : WriteStream<Buffer>} connection{ Params :  Returns : HttpClientConnection} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} upgradeTo{ Params : ChannelHandlerContext,FullHttpResponse Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} handlerRemoved{ Params : ChannelHandlerContext Returns : void} doWriteHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean,Handler<AsyncResult<Void>> Returns : void} id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} getContext{ Params :  Returns : ContextInternal} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} drainHandler{ Params : Handler<Void> Returns : UpgradingStream} exceptionHandler{ Params : Handler<Throwable> Returns : UpgradingStream} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} setWriteQueueMaxSize{ Params : int Returns : WriteStream<Buffer>} writeQueueFull{ Params :  Returns : boolean} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeFrame{ Params : int,int,ByteBuf Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} createStream{ Params : ContextInternal Returns : Future<HttpClientStream>} getContext{ Params :  Returns : ContextInternal} remoteSettingsHandler{ Params : Handler<Http2Settings> Returns : HttpConnection} pingHandler{ Params : Handler<Buffer> Returns : HttpConnection} goAwayHandler{ Params : Handler<GoAway> Returns : HttpConnection} shutdownHandler{ Params : Handler<Void> Returns : HttpConnection} closeHandler{ Params : Handler<Void> Returns : HttpConnection} exceptionHandler{ Params : Handler<Throwable> Returns : HttpConnection} evictionHandler{ Params : Handler<Void> Returns : HttpClientConnection} concurrencyChangeHandler{ Params : Handler<Long> Returns : HttpClientConnection} goAway{ Params : long,int,Buffer Returns : HttpConnection} shutdown{ Params : long Returns : Future<Void>} updateSettings{ Params : Http2Settings Returns : Future<Void>} settings{ Params :  Returns : Http2Settings} remoteSettings{ Params :  Returns : Http2Settings} ping{ Params : Buffer Returns : Future<Buffer>} remoteAddress{ Params :  Returns : SocketAddress} remoteAddress{ Params : boolean Returns : SocketAddress} localAddress{ Params :  Returns : SocketAddress} localAddress{ Params : boolean Returns : SocketAddress} isSsl{ Params :  Returns : boolean} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} peerCertificates{ Params :  Returns : List<Certificate>} isValid{ Params :  Returns : boolean} indicatedServerName{ Params :  Returns : String} ,concurrency channelHandlerContext channel close metric lastResponseReceivedTimestamp id metric trace version connection getContext writeHead writeBuffer writeFrame continueHandler earlyHintsHandler pushHandler unknownFrameHandler headHandler chunkHandler endHandler priorityHandler closeHandler doSetWriteQueueMaxSize isNotWritable doPause doFetch reset priority updatePriority exceptionHandler setWriteQueueMaxSize writeQueueFull drainHandler connection writeHead userEventTriggered channelRead upgradeTo channelRead userEventTriggered handlerRemoved id metric trace version getContext continueHandler earlyHintsHandler pushHandler closeHandler drainHandler exceptionHandler headHandler chunkHandler endHandler unknownFrameHandler priorityHandler setWriteQueueMaxSize writeQueueFull writeBuffer writeFrame doSetWriteQueueMaxSize isNotWritable doPause doFetch reset priority updatePriority createStream getContext remoteSettingsHandler pingHandler goAwayHandler shutdownHandler closeHandler exceptionHandler evictionHandler concurrencyChangeHandler goAway shutdown updateSettings settings remoteSettings ping remoteAddress remoteAddress localAddress localAddress isSsl sslSession peerCertificateChain peerCertificates isValid indicatedServerName ,,,,,,,,,super: , ctx, msg
vert.x-master,io.vertx.core.http.impl,HttpChannelConnector,1,1,0,0,0,false,0 ,0 ,0 ,client: HttpClientImpl netClient: NetClientInternal options: HttpClientOptions proxyOptions: ProxyOptions metrics: ClientMetrics ssl: boolean useAlpn: boolean version: HttpVersion peerAddress: SocketAddress server: SocketAddress ,server{ Params :  Returns : SocketAddress} connect{ Params : EventLoopContext,Promise<NetSocket> Returns : void} wrap{ Params : EventLoopContext,NetSocket Returns : Future<HttpClientConnection>} httpConnect{ Params : EventLoopContext Returns : Future<HttpClientConnection>} applyHttp2ConnectionOptions{ Params : ChannelPipeline Returns : void} applyHttp1xConnectionOptions{ Params : ChannelPipeline Returns : void} http1xConnected{ Params : HttpVersion,SocketAddress,boolean,ContextInternal,Object,Channel,Promise<HttpClientConnection> Returns : void} http2Connected{ Params : EventLoopContext,Object,Channel,PromiseInternal<HttpClientConnection> Returns : void} connectFailed{ Params : Channel,Throwable,Promise<HttpClientConnection> Returns : void} ,,,,,,SocketAddress ,,SocketAddress ,ArrayList IdleStateHandler IdleStateHandler LoggingHandler HttpClientCodec HttpContentDecompressor Http1xClientConnection Http2UpgradeClientConnection HttpRequestHead Http2UpgradeClientConnection ,future: , t
vert.x-master,io.vertx.core.http.impl,HttpChunkContentCompressor,1,0,0,0,1,false,HttpContentCompressor ,0 ,0 ,,write{ Params : ChannelHandlerContext,Object,ChannelPromise Returns : void} beginEncode{ Params : HttpResponse,String Returns : Result} ,write beginEncode ,,,,,,,,DefaultHttpContent ,httpResponse: 
vert.x-master,io.vertx.core.http.impl,HttpClientConnection,2,1,0,0,0,true,HttpContentCompressor ,0 ,0 ,log: Logger DEFAULT_EVICTION_HANDLER: Handler<Void> DEFAULT_CONCURRENCY_CHANGE_HANDLER: Handler<Long> ,evictionHandler{ Params : Handler<Void> Returns : HttpClientConnection} concurrencyChangeHandler{ Params : Handler<Long> Returns : HttpClientConnection} concurrency{ Params :  Returns : long} channel{ Params :  Returns : Channel} channelHandlerContext{ Params :  Returns : ChannelHandlerContext} createStream{ Params : ContextInternal Returns : Future<HttpClientStream>} getContext{ Params :  Returns : ContextInternal} isValid{ Params :  Returns : boolean} metric{ Params :  Returns : Object} lastResponseReceivedTimestamp{ Params :  Returns : long} ,,,,,,,,,,httpResponse: 
vert.x-master,io.vertx.core.http.impl,HttpClientImpl,1,1,0,0,0,false,0 ,HttpClientInternal MetricsProvider ,PoolChecker ,ABS_URI_START_PATTERN: Pattern DEFAULT_HANDLER: Function<HttpClientResponse, Future<RequestOptions>> EXPIRED_CHECKER: Consumer<Endpoint<Lease<HttpClientConnection>>> vertx: VertxInternal options: HttpClientOptions webSocketCM: ConnectionManager<EndpointKey, HttpClientConnection> httpCM: ConnectionManager<EndpointKey, Lease<HttpClientConnection>> netClient: NetClientInternal metrics: HttpClientMetrics keepAlive: boolean pipelining: boolean closeSequence: CloseSequence closeTimeout: long closeTimeoutUnit: TimeUnit timerID: long proxyFilter: Predicate<SocketAddress> connectionHandler: Handler<HttpConnection> redirectHandler: Function<HttpClientResponse, Future<RequestOptions>> contextProvider: Function<ContextInternal, EventLoopContext> ,netClient{ Params :  Returns : NetClientInternal} closeFuture{ Params :  Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} handle{ Params : Long Returns : void} checkExpired{ Params : Handler<Long> Returns : void} httpConnectionManager{ Params :  Returns : ConnectionManager<EndpointKey,Lease<HttpClientConnection>>} webSocketConnectionManager{ Params :  Returns : ConnectionManager<EndpointKey,HttpClientConnection>} contextProvider{ Params :  Returns : Function<ContextInternal,EventLoopContext>} getPort{ Params : RequestOptions Returns : int} getProxyOptions{ Params : ProxyOptions Returns : ProxyOptions} getHost{ Params : RequestOptions Returns : String} resolveProxyOptions{ Params : ProxyOptions,SocketAddress Returns : ProxyOptions} metrics{ Params :  Returns : HttpClientMetrics} connect{ Params : SocketAddress Returns : Future<HttpClientConnection>} connect{ Params : SocketAddress,SocketAddress Returns : Future<HttpClientConnection>} webSocket{ Params : ContextInternal,WebSocketConnectOptions Returns : Future<WebSocket>} create{ Params : ContextInternal,Runnable Returns : Endpoint<HttpClientConnection>} webSocket{ Params : int,String,String Returns : Future<WebSocket>} webSocket{ Params : String,String Returns : Future<WebSocket>} webSocket{ Params : String Returns : Future<WebSocket>} webSocket{ Params : WebSocketConnectOptions Returns : Future<WebSocket>} webSocketAbs{ Params : String,MultiMap,WebsocketVersion,List<String> Returns : Future<WebSocket>} request{ Params : RequestOptions Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,int,String,String Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,String,String Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,String Returns : Future<HttpClientRequest>} doShutdown{ Params : Promise<Void> Returns : void} doClose{ Params : Promise<Void> Returns : void} close{ Params : long,TimeUnit Returns : Future<Void>} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : Metrics} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} connectionHandler{ Params : Handler<HttpConnection> Returns : HttpClient} connectionHandler{ Params :  Returns : Handler<HttpConnection>} redirectHandler{ Params : Function<HttpClientResponse,Future<RequestOptions>> Returns : HttpClient} redirectHandler{ Params :  Returns : Function<HttpClientResponse,Future<RequestOptions>>} proxyFilter{ Params : Predicate<SocketAddress> Returns : HttpClient} options{ Params :  Returns : HttpClientOptions} vertx{ Params :  Returns : VertxInternal} doRequest{ Params : RequestOptions Returns : Future<HttpClientRequest>} doRequest{ Params : HttpMethod,SocketAddress,SocketAddress,String,int,Boolean,String,MultiMap,String,long,Boolean,ProxyOptions,EndpointKey Returns : Future<HttpClientRequest>} create{ Params : ContextInternal,Runnable Returns : Endpoint<Lease<HttpClientConnection>>} checkClosed{ Params :  Returns : void} ,closeFuture close handle create webSocket webSocket webSocket webSocket webSocketAbs request request request request close isMetricsEnabled getMetrics updateSSLOptions connectionHandler redirectHandler redirectHandler options vertx create ,,,,HttpClientInternal MetricsProvider ,Function<ContextInternal,EventLoopContext> ,,Function<ContextInternal,EventLoopContext> ,RequestOptions HttpClientOptions CloseSequence IllegalStateException NetClientBuilder NetClientOptions PoolChecker AtomicInteger WeakReference ConnectionManager ConnectionManager HttpChannelConnector EndpointKey EndpointProvider HttpChannelConnector WebSocketEndpoint WebSocketConnectOptions URI IllegalArgumentException IllegalArgumentException StringBuilder WebSocketConnectOptions RequestOptions EndpointKey EndpointKey EndpointProvider HttpChannelConnector SharedClientHttpStreamEndpoint HttpClientRequestImpl IllegalStateException ,closeSequence: 
vert.x-master,io.vertx.core.http.impl,PoolChecker,3,2,0,1,0,false,0 ,HttpClientInternal MetricsProvider ,PoolChecker ,ref: WeakReference<HttpClientImpl> ,netClient{ Params :  Returns : NetClientInternal} closeFuture{ Params :  Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} handle{ Params : Long Returns : void} checkExpired{ Params : Handler<Long> Returns : void} httpConnectionManager{ Params :  Returns : ConnectionManager<EndpointKey,Lease<HttpClientConnection>>} webSocketConnectionManager{ Params :  Returns : ConnectionManager<EndpointKey,HttpClientConnection>} contextProvider{ Params :  Returns : Function<ContextInternal,EventLoopContext>} getPort{ Params : RequestOptions Returns : int} getProxyOptions{ Params : ProxyOptions Returns : ProxyOptions} getHost{ Params : RequestOptions Returns : String} resolveProxyOptions{ Params : ProxyOptions,SocketAddress Returns : ProxyOptions} metrics{ Params :  Returns : HttpClientMetrics} connect{ Params : SocketAddress Returns : Future<HttpClientConnection>} connect{ Params : SocketAddress,SocketAddress Returns : Future<HttpClientConnection>} webSocket{ Params : ContextInternal,WebSocketConnectOptions Returns : Future<WebSocket>} create{ Params : ContextInternal,Runnable Returns : Endpoint<HttpClientConnection>} webSocket{ Params : int,String,String Returns : Future<WebSocket>} webSocket{ Params : String,String Returns : Future<WebSocket>} webSocket{ Params : String Returns : Future<WebSocket>} webSocket{ Params : WebSocketConnectOptions Returns : Future<WebSocket>} webSocketAbs{ Params : String,MultiMap,WebsocketVersion,List<String> Returns : Future<WebSocket>} request{ Params : RequestOptions Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,int,String,String Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,String,String Returns : Future<HttpClientRequest>} request{ Params : HttpMethod,String Returns : Future<HttpClientRequest>} doShutdown{ Params : Promise<Void> Returns : void} doClose{ Params : Promise<Void> Returns : void} close{ Params : long,TimeUnit Returns : Future<Void>} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : Metrics} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} connectionHandler{ Params : Handler<HttpConnection> Returns : HttpClient} connectionHandler{ Params :  Returns : Handler<HttpConnection>} redirectHandler{ Params : Function<HttpClientResponse,Future<RequestOptions>> Returns : HttpClient} redirectHandler{ Params :  Returns : Function<HttpClientResponse,Future<RequestOptions>>} proxyFilter{ Params : Predicate<SocketAddress> Returns : HttpClient} options{ Params :  Returns : HttpClientOptions} vertx{ Params :  Returns : VertxInternal} doRequest{ Params : RequestOptions Returns : Future<HttpClientRequest>} doRequest{ Params : HttpMethod,SocketAddress,SocketAddress,String,int,Boolean,String,MultiMap,String,long,Boolean,ProxyOptions,EndpointKey Returns : Future<HttpClientRequest>} create{ Params : ContextInternal,Runnable Returns : Endpoint<Lease<HttpClientConnection>>} checkClosed{ Params :  Returns : void} ,closeFuture close handle create webSocket webSocket webSocket webSocket webSocketAbs request request request request close isMetricsEnabled getMetrics updateSSLOptions connectionHandler redirectHandler redirectHandler options vertx create ,,,,Handler ,,,,WeakReference ,client: , this
vert.x-master,io.vertx.core.http.impl,HttpClientInternal,2,1,0,0,0,true,0 ,HttpClientInternal MetricsProvider ,0 ,,vertx{ Params :  Returns : VertxInternal} options{ Params :  Returns : HttpClientOptions} netClient{ Params :  Returns : NetClientInternal} closeFuture{ Params :  Returns : Future<Void>} ,,,,,,,,,,client: , this
vert.x-master,io.vertx.core.http.impl,HttpClientPush,1,1,0,0,0,false,0 ,HttpRequest ,0 ,port: int uri: String method: HttpMethod host: String stream: HttpClientStream headers: MultiMap ,id{ Params :  Returns : int} headers{ Params :  Returns : MultiMap} absoluteURI{ Params :  Returns : String} remoteAddress{ Params :  Returns : SocketAddress} uri{ Params :  Returns : String} method{ Params :  Returns : HttpMethod} ,id headers absoluteURI remoteAddress uri method ,,,,HttpRequest ,,,,Http2HeadersAdaptor ,stream: 
vert.x-master,io.vertx.core.http.impl,HttpClientRequestBase,1,1,1,0,0,false,0 ,HttpClientRequest ,0 ,client: HttpClientImpl context: ContextInternal stream: HttpClientStream server: SocketAddress ssl: boolean method: io.vertx.core.http.HttpMethod host: String port: int uri: String path: String query: String responsePromise: PromiseInternal<HttpClientResponse> pushHandler: Handler<HttpClientRequest> currentTimeoutTimerId: long currentTimeoutMs: long lastDataReceived: long ,authority{ Params :  Returns : String} streamId{ Params :  Returns : int} absoluteURI{ Params :  Returns : String} query{ Params :  Returns : String} path{ Params :  Returns : String} getURI{ Params :  Returns : String} setURI{ Params : String Returns : HttpClientRequest} getHost{ Params :  Returns : String} setHost{ Params : String Returns : HttpClientRequest} getPort{ Params :  Returns : int} setPort{ Params : int Returns : HttpClientRequest} getMethod{ Params :  Returns : HttpMethod} setMethod{ Params : HttpMethod Returns : HttpClientRequest} setTimeout{ Params : long Returns : HttpClientRequest} handleException{ Params : Throwable Returns : void} fail{ Params : Throwable Returns : void} handlePush{ Params : HttpClientPush Returns : void} handleResponse{ Params : HttpClientResponse Returns : void} handleResponse{ Params : Promise<HttpClientResponse>,HttpClientResponse,long Returns : void} cancelTimeout{ Params :  Returns : long} handleTimeout{ Params : long Returns : void} timeoutEx{ Params : long,HttpMethod,SocketAddress,String Returns : NoStackTraceTimeoutException} dataReceived{ Params :  Returns : void} reset{ Params : long Returns : boolean} reset{ Params : long,Throwable Returns : boolean} reset{ Params : Throwable Returns : boolean} response{ Params :  Returns : Future<HttpClientResponse>} pushHandler{ Params :  Returns : Handler<HttpClientRequest>} pushHandler{ Params : Handler<HttpClientRequest> Returns : HttpClientRequest} ,streamId absoluteURI setURI setHost getPort setPort getMethod setMethod setTimeout reset reset response pushHandler ,timeoutEx ,,handleResponse reset ,HttpClientRequest ,long ,,long ,HttpClientResponseImpl HttpClientRequestPushPromise NoStackTraceTimeoutException StreamResetException StreamResetException ,responsePromise: 
vert.x-master,io.vertx.core.http.impl,HttpClientRequestImpl,1,1,0,0,0,false,HttpClientRequestBase ,HttpClientRequest ,0 ,log: Logger endPromise: Promise<Void> endFuture: Future<Void> chunked: boolean continueHandler: Handler<Void> earlyHintsHandler: Handler<MultiMap> drainHandler: Handler<Void> exceptionHandler: Handler<Throwable> ended: boolean reset: Throwable followRedirects: int headers: HeadersMultiMap priority: StreamPriority headWritten: boolean isConnect: boolean traceOperation: String ,handleException{ Params : Throwable Returns : void} setFollowRedirects{ Params : boolean Returns : HttpClientRequest} setMaxRedirects{ Params : int Returns : HttpClientRequest} setChunked{ Params : boolean Returns : HttpClientRequestImpl} isChunked{ Params :  Returns : boolean} headers{ Params :  Returns : MultiMap} putHeader{ Params : String,String Returns : HttpClientRequest} putHeader{ Params : String,Iterable<String> Returns : HttpClientRequest} setWriteQueueMaxSize{ Params : int Returns : HttpClientRequest} writeQueueFull{ Params :  Returns : boolean} version{ Params :  Returns : HttpVersion} exceptionHandler{ Params :  Returns : Handler<Throwable>} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientRequest} drainHandler{ Params : Handler<Void> Returns : HttpClientRequest} continueHandler{ Params : Handler<Void> Returns : HttpClientRequest} earlyHintsHandler{ Params : Handler<MultiMap> Returns : HttpClientRequest} sendHead{ Params :  Returns : Future<Void>} connect{ Params :  Returns : Future<HttpClientResponse>} putHeader{ Params : CharSequence,CharSequence Returns : HttpClientRequest} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : HttpClientRequest} reset{ Params : Throwable Returns : boolean} tryComplete{ Params :  Returns : void} connection{ Params :  Returns : HttpConnection} writeCustomFrame{ Params : int,int,Buffer Returns : HttpClientRequest} handleDrained{ Params : Void Returns : void} handleNextRequest{ Params : HttpClientRequest,Handler<AsyncResult<HttpClientResponse>>,long Returns : void} handleContinue{ Params : Void Returns : void} handleEarlyHints{ Params : MultiMap Returns : void} handleResponse{ Params : Promise<HttpClientResponse>,HttpClientResponse,long Returns : void} end{ Params : String Returns : Future<Void>} end{ Params : String,String Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params :  Returns : Future<Void>} write{ Params : Buffer Returns : Future<Void>} write{ Params : String Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} requiresContentLength{ Params :  Returns : boolean} write{ Params : ByteBuf,boolean Returns : Future<Void>} doWrite{ Params : ByteBuf,boolean,boolean Returns : Future<Void>} checkEnded{ Params :  Returns : void} checkResponseHandler{ Params :  Returns : void} setStreamPriority{ Params : StreamPriority Returns : HttpClientRequest} getStreamPriority{ Params :  Returns : StreamPriority} ,handleException setFollowRedirects setMaxRedirects setChunked isChunked headers putHeader putHeader setWriteQueueMaxSize writeQueueFull version drainHandler continueHandler earlyHintsHandler sendHead connect putHeader putHeader reset connection writeCustomFrame end end end end write write write setStreamPriority getStreamPriority ,,,,HttpClientRequest ,String ,,String ,IllegalStateException IllegalStateException IllegalStateException HttpRequestHead IllegalArgumentException IllegalStateException ,stream: 
vert.x-master,io.vertx.core.http.impl,HttpClientRequestPushPromise,1,0,0,0,0,false,HttpClientRequestBase ,0 ,0 ,stream: HttpClientStream headers: MultiMap ,version{ Params :  Returns : HttpVersion} handleResponse{ Params : Promise<HttpClientResponse>,HttpClientResponse,long Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientRequest} connection{ Params :  Returns : HttpConnection} reset{ Params : Throwable Returns : boolean} isChunked{ Params :  Returns : boolean} headers{ Params :  Returns : MultiMap} write{ Params : Buffer Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : HttpClientRequest} drainHandler{ Params : Handler<Void> Returns : HttpClientRequest} setFollowRedirects{ Params : boolean Returns : HttpClientRequest} setMaxRedirects{ Params : int Returns : HttpClientRequest} setChunked{ Params : boolean Returns : HttpClientRequest} putHeader{ Params : String,String Returns : HttpClientRequest} putHeader{ Params : CharSequence,CharSequence Returns : HttpClientRequest} putHeader{ Params : String,Iterable<String> Returns : HttpClientRequest} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : HttpClientRequest} write{ Params : String Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} continueHandler{ Params : Handler<Void> Returns : HttpClientRequest} earlyHintsHandler{ Params : Handler<MultiMap> Returns : HttpClientRequest} sendHead{ Params :  Returns : Future<Void>} connect{ Params :  Returns : Future<HttpClientResponse>} end{ Params : String Returns : Future<Void>} end{ Params : String,String Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params :  Returns : Future<Void>} writeQueueFull{ Params :  Returns : boolean} getStreamPriority{ Params :  Returns : StreamPriority} writeCustomFrame{ Params : int,int,Buffer Returns : HttpClientRequest} ,version handleResponse exceptionHandler connection reset isChunked headers write setWriteQueueMaxSize drainHandler setFollowRedirects setMaxRedirects setChunked putHeader putHeader putHeader putHeader write write continueHandler earlyHintsHandler sendHead connect end end end end writeQueueFull getStreamPriority writeCustomFrame ,,,,,MultiMap ,,MultiMap ,IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException UnsupportedOperationException ,stream: 
vert.x-master,io.vertx.core.http.impl,HttpClientResponseImpl,1,1,0,0,0,false,0 ,HttpClientResponse ,0 ,log: Logger version: HttpVersion statusCode: int statusMessage: String request: HttpClientRequestBase conn: HttpConnection stream: HttpClientStream eventHandler: HttpEventHandler customFrameHandler: Handler<HttpFrame> priorityHandler: Handler<StreamPriority> headers: MultiMap trailers: MultiMap cookies: List<String> netSocket: NetSocket ,eventHandler{ Params : boolean Returns : HttpEventHandler} request{ Params :  Returns : HttpClientRequestBase} netSocket{ Params :  Returns : NetSocket} version{ Params :  Returns : HttpVersion} statusCode{ Params :  Returns : int} statusMessage{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} getHeader{ Params : String Returns : String} getHeader{ Params : CharSequence Returns : String} trailers{ Params :  Returns : MultiMap} getTrailer{ Params : String Returns : String} cookies{ Params :  Returns : List<String>} checkEnded{ Params :  Returns : void} handler{ Params : Handler<Buffer> Returns : HttpClientResponse} endHandler{ Params : Handler<Void> Returns : HttpClientResponse} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientResponse} pause{ Params :  Returns : HttpClientResponse} resume{ Params :  Returns : HttpClientResponse} fetch{ Params : long Returns : HttpClientResponse} customFrameHandler{ Params : Handler<HttpFrame> Returns : HttpClientResponse} handleUnknownFrame{ Params : HttpFrame Returns : void} handleChunk{ Params : Buffer Returns : void} handleEnd{ Params : MultiMap Returns : void} handleException{ Params : Throwable Returns : void} body{ Params :  Returns : Future<Buffer>} end{ Params :  Returns : Future<Void>} streamPriorityHandler{ Params : Handler<StreamPriority> Returns : HttpClientResponse} handlePriorityChange{ Params : StreamPriority Returns : void} ,request netSocket version statusCode statusMessage headers getHeader getHeader trailers getTrailer cookies handler endHandler exceptionHandler pause resume fetch customFrameHandler body end streamPriorityHandler ,,,,HttpClientResponse ,NetSocket ,,NetSocket ,HttpEventHandler HeadersAdaptor DefaultHttpHeaders ArrayList IllegalStateException ,handler: , streamPriority
vert.x-master,io.vertx.core.http.impl,HttpClientStream,2,1,0,0,0,true,0 ,HttpClientResponse ,0 ,,id{ Params :  Returns : int} metric{ Params :  Returns : Object} trace{ Params :  Returns : Object} version{ Params :  Returns : HttpVersion} connection{ Params :  Returns : HttpClientConnection} getContext{ Params :  Returns : ContextInternal} writeHead{ Params : HttpRequestHead,boolean,ByteBuf,boolean,StreamPriority,boolean Returns : Future<Void>} writeBuffer{ Params : ByteBuf,boolean Returns : Future<Void>} writeFrame{ Params : int,int,ByteBuf Returns : void} continueHandler{ Params : Handler<Void> Returns : void} earlyHintsHandler{ Params : Handler<MultiMap> Returns : void} pushHandler{ Params : Handler<HttpClientPush> Returns : void} unknownFrameHandler{ Params : Handler<HttpFrame> Returns : void} write{ Params : Buffer Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params :  Returns : Future<Void>} headHandler{ Params : Handler<HttpResponseHead> Returns : void} chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<MultiMap> Returns : void} priorityHandler{ Params : Handler<StreamPriority> Returns : void} closeHandler{ Params : Handler<Void> Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} isNotWritable{ Params :  Returns : boolean} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} reset{ Params : Throwable Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} ,write end end ,,,,,,,,,: , Unpooled.EMPTY_BUFFER, true
vert.x-master,io.vertx.core.http.impl,HttpEventHandler,1,0,0,0,0,false,0 ,0 ,0 ,context: ContextInternal chunkHandler: Handler<Buffer> endHandler: Handler<Void> exceptionHandler: Handler<Throwable> body: Buffer bodyPromise: Promise<Buffer> endPromise: Promise<Void> ,chunkHandler{ Params : Handler<Buffer> Returns : void} endHandler{ Params : Handler<Void> Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : void} handleChunk{ Params : Buffer Returns : void} body{ Params :  Returns : Future<Buffer>} end{ Params :  Returns : Future<Void>} handleEnd{ Params :  Returns : void} handleException{ Params : Throwable Returns : void} ,,,,,,Promise<Void> ,,Promise<Void> ,,endPromise: , err
vert.x-master,io.vertx.core.http.impl,HttpFrameImpl,1,1,0,0,0,false,0 ,HttpFrame ,0 ,type: int flags: int payload: Buffer ,flags{ Params :  Returns : int} type{ Params :  Returns : int} payload{ Params :  Returns : Buffer} ,flags type payload ,,,,HttpFrame ,Buffer ,,Buffer ,,endPromise: , err
vert.x-master,io.vertx.core.http.impl,HttpNetSocket,1,0,0,0,0,false,0 ,NetSocket ,0 ,conn: ConnectionBase context: ContextInternal readStream: ReadStream<Buffer> writeStream: WriteStream<Buffer> exceptionHandler: Handler<Throwable> closeHandler: Handler<Void> endHandler: Handler<Void> dataHandler: Handler<Buffer> ,netSocket{ Params : ConnectionBase,ContextInternal,ReadStream<Buffer>,WriteStream<Buffer> Returns : HttpNetSocket} handleEnd{ Params : Void Returns : void} handleData{ Params : Buffer Returns : void} handleException{ Params : Throwable Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : NetSocket} exceptionHandler{ Params :  Returns : Handler<Throwable>} handler{ Params : Handler<Buffer> Returns : NetSocket} handler{ Params :  Returns : Handler<Buffer>} fetch{ Params : long Returns : NetSocket} pause{ Params :  Returns : NetSocket} resume{ Params :  Returns : NetSocket} endHandler{ Params : Handler<Void> Returns : NetSocket} endHandler{ Params :  Returns : Handler<Void>} setWriteQueueMaxSize{ Params : int Returns : NetSocket} drainHandler{ Params : Handler<Void> Returns : NetSocket} writeQueueFull{ Params :  Returns : boolean} writeHandlerID{ Params :  Returns : String} write{ Params : Buffer Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} write{ Params : String Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params :  Returns : Future<Void>} sendFile{ Params : String,long,long Returns : Future<Void>} remoteAddress{ Params :  Returns : SocketAddress} remoteAddress{ Params : boolean Returns : SocketAddress} localAddress{ Params :  Returns : SocketAddress} localAddress{ Params : boolean Returns : SocketAddress} close{ Params :  Returns : Future<Void>} closeHandler{ Params : Handler<Void> Returns : NetSocket} closeHandler{ Params :  Returns : Handler<Void>} upgradeToSsl{ Params :  Returns : Future<Void>} upgradeToSsl{ Params : String Returns : Future<Void>} isSsl{ Params :  Returns : boolean} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} peerCertificates{ Params :  Returns : List<Certificate>} indicatedServerName{ Params :  Returns : String} applicationLayerProtocol{ Params :  Returns : String} ,exceptionHandler handler fetch pause resume endHandler setWriteQueueMaxSize drainHandler writeQueueFull writeHandlerID write write write end end sendFile remoteAddress remoteAddress localAddress localAddress close closeHandler upgradeToSsl upgradeToSsl isSsl sslSession peerCertificateChain peerCertificates indicatedServerName applicationLayerProtocol ,netSocket ,,,NetSocket ,Handler<Buffer> ,,Handler<Buffer> ,HttpNetSocket ,conn: 
vert.x-master,io.vertx.core.http.impl,HttpRequestHead,1,1,0,0,0,false,0 ,HttpRequest ,0 ,id: int remoteAddress: SocketAddress method: HttpMethod uri: String headers: MultiMap authority: String absoluteURI: String traceOperation: String ,headers{ Params :  Returns : MultiMap} remoteAddress{ Params :  Returns : SocketAddress} absoluteURI{ Params :  Returns : String} id{ Params :  Returns : int} uri{ Params :  Returns : String} method{ Params :  Returns : HttpMethod} ,headers remoteAddress absoluteURI id uri method ,,,,HttpRequest ,,,,IllegalArgumentException ,conn: 
vert.x-master,io.vertx.core.http.impl,HttpResponseHead,1,1,0,0,0,false,0 ,HttpResponse ,0 ,version: HttpVersion statusCode: int statusMessage: String headers: MultiMap ,statusCode{ Params :  Returns : int} headers{ Params :  Returns : MultiMap} ,statusCode headers ,,,,HttpResponse ,,,,,conn: 
vert.x-master,io.vertx.core.http.impl,HttpServerConnection,2,1,0,0,0,true,0 ,HttpResponse ,0 ,,getContext{ Params :  Returns : ContextInternal} channel{ Params :  Returns : Channel} channelHandlerContext{ Params :  Returns : ChannelHandlerContext} handler{ Params : Handler<HttpServerRequest> Returns : HttpServerConnection} invalidRequestHandler{ Params : Handler<HttpServerRequest> Returns : HttpServerConnection} ,,,,,,,,,,conn: 
vert.x-master,io.vertx.core.http.impl,HttpServerConnectionHandler,1,1,0,0,0,false,0 ,Handler<HttpServerConnection> ,0 ,server: HttpServerImpl requestHandler: Handler<HttpServerRequest> invalidRequestHandler: Handler<HttpServerRequest> wsHandler: Handler<ServerWebSocket> connectionHandler: Handler<HttpConnection> exceptionHandler: Handler<Throwable> ,handle{ Params : HttpServerConnection Returns : void} initializeWebSocketExtensions{ Params : ChannelPipeline Returns : void} ,handle ,,,,Handler ,,,,Http1xServerRequestHandler ArrayList DeflateFrameServerExtensionHandshaker PerMessageDeflateServerExtensionHandshaker WebSocketServerExtensionHandler ,pipeline: , "handler", "webSocketExtensionHandler", extensionHandler
vert.x-master,io.vertx.core.http.impl,HttpServerFileUploadImpl,1,0,0,0,0,false,0 ,HttpServerFileUpload ,0 ,stream: ReadStream<Buffer> context: ContextInternal name: String filename: String contentType: String contentTransferEncoding: String charset: Charset dataHandler: Handler<Buffer> endHandler: Handler<Void> exceptionHandler: Handler<Throwable> size: long lazyCalculateSize: boolean file: AsyncFile pipe: Pipe<Buffer> cancelled: boolean ,handleData{ Params : Buffer Returns : void} handleException{ Params : Throwable Returns : void} handleEnd{ Params :  Returns : void} filename{ Params :  Returns : String} name{ Params :  Returns : String} contentType{ Params :  Returns : String} contentTransferEncoding{ Params :  Returns : String} charset{ Params :  Returns : String} size{ Params :  Returns : long} handler{ Params : Handler<Buffer> Returns : HttpServerFileUpload} pause{ Params :  Returns : HttpServerFileUpload} fetch{ Params : long Returns : HttpServerFileUpload} resume{ Params :  Returns : HttpServerFileUpload} exceptionHandler{ Params : Handler<Throwable> Returns : HttpServerFileUpload} endHandler{ Params : Handler<Void> Returns : HttpServerFileUpload} streamToFileSystem{ Params : String Returns : Future<Void>} cancelStreamToFileSystem{ Params :  Returns : boolean} isSizeAvailable{ Params :  Returns : boolean} file{ Params :  Returns : AsyncFile} ,filename name contentType contentTransferEncoding charset size handler pause fetch resume exceptionHandler endHandler streamToFileSystem cancelStreamToFileSystem isSizeAvailable file ,,,,HttpServerFileUpload ,boolean ,,boolean ,OpenOptions IllegalStateException ,pipe: 
vert.x-master,io.vertx.core.http.impl,HttpServerImpl,1,1,0,0,0,false,TCPServerBase ,HttpServer Closeable MetricsProvider ,0 ,log: Logger DEFAULT_EXCEPTION_HANDLER: Handler<Throwable> FLASH_POLICY_HANDLER_PROP_NAME: String DISABLE_WEBSOCKETS_PROP_NAME: String DISABLE_H2C_PROP_NAME: String USE_FLASH_POLICY_HANDLER: boolean DISABLE_WEBSOCKETS: boolean options: HttpServerOptions disableH2c: boolean requestHandler: Handler<HttpServerRequest> wsHandler: Handler<ServerWebSocket> invalidRequestHandler: Handler<HttpServerRequest> connectionHandler: Handler<HttpConnection> exceptionHandler: Handler<Throwable> ,createMetrics{ Params : SocketAddress Returns : TCPMetrics<?>} requestHandler{ Params : Handler<HttpServerRequest> Returns : HttpServer} webSocketHandler{ Params : Handler<ServerWebSocket> Returns : HttpServer} requestHandler{ Params :  Returns : Handler<HttpServerRequest>} invalidRequestHandler{ Params : Handler<HttpServerRequest> Returns : HttpServer} connectionHandler{ Params : Handler<HttpConnection> Returns : HttpServer} exceptionHandler{ Params : Handler<Throwable> Returns : HttpServer} webSocketHandler{ Params :  Returns : Handler<ServerWebSocket>} listen{ Params :  Returns : Future<HttpServer>} childHandler{ Params : ContextInternal,SocketAddress Returns : BiConsumer<Channel,SslChannelProvider>} createSSLHelper{ Params :  Returns : SSLHelper} listen{ Params : SocketAddress Returns : Future<HttpServer>} close{ Params :  Returns : Future<Void>} isClosed{ Params :  Returns : boolean} requestAccept{ Params :  Returns : boolean} wsAccept{ Params :  Returns : boolean} ,createMetrics requestHandler webSocketHandler requestHandler invalidRequestHandler connectionHandler exceptionHandler webSocketHandler listen childHandler createSSLHelper listen close ,,,,HttpServer Closeable MetricsProvider ,Handler<Throwable> ,,Handler<Throwable> ,HttpServerOptions IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException HttpServerConnectionHandler HttpServerWorker SSLHelper IllegalStateException ,: 
vert.x-master,io.vertx.core.http.impl,HttpServerRequestInternal,1,1,1,0,0,false,0 ,HttpServerRequest ,0 ,,context{ Params :  Returns : Context} metric{ Params :  Returns : Object} ,,,,context metric ,HttpServerRequest ,,,,,: 
vert.x-master,io.vertx.core.http.impl,HttpServerRequestWrapper,1,1,0,0,0,false,HttpServerRequestInternal ,0 ,0 ,delegate: HttpServerRequestInternal ,exceptionHandler{ Params : Handler<Throwable> Returns : HttpServerRequest} handler{ Params : Handler<Buffer> Returns : HttpServerRequest} pause{ Params :  Returns : HttpServerRequest} resume{ Params :  Returns : HttpServerRequest} fetch{ Params : long Returns : HttpServerRequest} endHandler{ Params : Handler<Void> Returns : HttpServerRequest} version{ Params :  Returns : HttpVersion} method{ Params :  Returns : HttpMethod} isSSL{ Params :  Returns : boolean} scheme{ Params :  Returns : String} uri{ Params :  Returns : String} path{ Params :  Returns : String} query{ Params :  Returns : String} host{ Params :  Returns : String} bytesRead{ Params :  Returns : long} response{ Params :  Returns : HttpServerResponse} headers{ Params :  Returns : MultiMap} getHeader{ Params : String Returns : String} getHeader{ Params : CharSequence Returns : String} setParamsCharset{ Params : String Returns : HttpServerRequest} getParamsCharset{ Params :  Returns : String} params{ Params :  Returns : MultiMap} getParam{ Params : String Returns : String} getParam{ Params : String,String Returns : String} remoteAddress{ Params :  Returns : SocketAddress} localAddress{ Params :  Returns : SocketAddress} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} absoluteURI{ Params :  Returns : String} bodyHandler{ Params : Handler<Buffer> Returns : HttpServerRequest} body{ Params :  Returns : Future<Buffer>} end{ Params :  Returns : Future<Void>} toNetSocket{ Params :  Returns : Future<NetSocket>} setExpectMultipart{ Params : boolean Returns : HttpServerRequest} isExpectMultipart{ Params :  Returns : boolean} uploadHandler{ Params : Handler<HttpServerFileUpload> Returns : HttpServerRequest} formAttributes{ Params :  Returns : MultiMap} getFormAttribute{ Params : String Returns : String} streamId{ Params :  Returns : int} toWebSocket{ Params :  Returns : Future<ServerWebSocket>} isEnded{ Params :  Returns : boolean} customFrameHandler{ Params : Handler<HttpFrame> Returns : HttpServerRequest} connection{ Params :  Returns : HttpConnection} streamPriority{ Params :  Returns : StreamPriority} streamPriorityHandler{ Params : Handler<StreamPriority> Returns : HttpServerRequest} decoderResult{ Params :  Returns : DecoderResult} getCookie{ Params : String Returns : Cookie} getCookie{ Params : String,String,String Returns : Cookie} cookieCount{ Params :  Returns : int} cookieMap{ Params :  Returns : Map<String,Cookie>} cookies{ Params : String Returns : Set<Cookie>} cookies{ Params :  Returns : Set<Cookie>} routed{ Params : String Returns : HttpServerRequest} context{ Params :  Returns : Context} metric{ Params :  Returns : Object} pipe{ Params :  Returns : Pipe<Buffer>} pipeTo{ Params : WriteStream<Buffer> Returns : Future<Void>} ,exceptionHandler handler pause resume fetch endHandler version method isSSL scheme uri path query host bytesRead response headers getHeader getHeader setParamsCharset getParamsCharset params getParam getParam remoteAddress localAddress sslSession peerCertificateChain absoluteURI bodyHandler body end toNetSocket setExpectMultipart isExpectMultipart uploadHandler formAttributes getFormAttribute streamId toWebSocket isEnded customFrameHandler connection streamPriority streamPriorityHandler decoderResult getCookie getCookie cookieCount cookieMap cookies cookies routed context metric pipe pipeTo ,,,,,,,,NullPointerException ,delegate: , dst
vert.x-master,io.vertx.core.http.impl,HttpServerWorker,1,1,0,0,0,false,0 ,BiConsumer<Channel,SslChannelProvider> ,EncodingDetector ,context: EventLoopContext streamContextSupplier: Supplier<ContextInternal> vertx: VertxInternal server: HttpServerImpl options: HttpServerOptions serverOrigin: String logEnabled: boolean disableH2C: boolean connectionHandler: Handler<HttpServerConnection> exceptionHandler: Handler<Throwable> compressionOptions: CompressionOptions encodingDetector: Function<String, String> ,accept{ Params : Channel,SslChannelProvider Returns : void} configurePipeline{ Params : Channel,SslChannelProvider Returns : void} configure{ Params : ChannelHandlerContext,boolean Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} handleException{ Params : Throwable Returns : void} handleHttp1{ Params : Channel,SslChannelProvider Returns : void} sendServiceUnavailable{ Params : Channel Returns : void} handleHttp2{ Params : Channel Returns : void} configureHttp2{ Params : ChannelPipeline Returns : void} buildHttp2ConnectionHandler{ Params : EventLoopContext,Handler<HttpServerConnection> Returns : VertxHttp2ConnectionHandler<Http2ServerConnection>} configureHttp1OrH2C{ Params : ChannelPipeline,SslChannelProvider Returns : void} configureHttp1{ Params : ChannelPipeline,SslChannelProvider Returns : void} determineEncoding{ Params : String Returns : String} ,accept configure userEventTriggered exceptionCaught determineEncoding ,,,,BiConsumer ,Function<String,String> ,,Function<String,String> ,EncodingDetector HAProxyMessageDecoder IdleStateHandler HAProxyMessageCompletionHandler SslHandshakeCompletionHandler IdleStateHandler Http1xOrH2CHandler IdleStateHandler VertxHttp2ConnectionHandlerBuilder Http2ServerConnection LoggingHandler FlashPolicyHandler VertxHttpRequestDecoder VertxHttpResponseEncoder HttpContentDecompressor HttpChunkContentCompressor ChunkedWriteHandler IdleStateHandler Http1xUpgradeToH2CHandler Http1xServerConnection ,connectionHandler: , conn
vert.x-master,io.vertx.core.http.impl,EncodingDetector,3,2,0,1,0,false,0 ,BiConsumer<Channel,SslChannelProvider> ,EncodingDetector ,,accept{ Params : Channel,SslChannelProvider Returns : void} configurePipeline{ Params : Channel,SslChannelProvider Returns : void} configure{ Params : ChannelHandlerContext,boolean Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} handleException{ Params : Throwable Returns : void} handleHttp1{ Params : Channel,SslChannelProvider Returns : void} sendServiceUnavailable{ Params : Channel Returns : void} handleHttp2{ Params : Channel Returns : void} configureHttp2{ Params : ChannelPipeline Returns : void} buildHttp2ConnectionHandler{ Params : EventLoopContext,Handler<HttpServerConnection> Returns : VertxHttp2ConnectionHandler<Http2ServerConnection>} configureHttp1OrH2C{ Params : ChannelPipeline,SslChannelProvider Returns : void} configureHttp1{ Params : ChannelPipeline,SslChannelProvider Returns : void} determineEncoding{ Params : String Returns : String} ,accept configure userEventTriggered exceptionCaught determineEncoding ,,,,,,,,,super: , acceptEncoding
vert.x-master,io.vertx.core.http.impl,HttpUtils,1,1,0,0,1,false,0 ,0 ,0 ,CONNECTION_CLOSED_EXCEPTION: HttpClosedException STREAM_CLOSED_EXCEPTION: HttpClosedException SC_SWITCHING_PROTOCOLS: int SC_BAD_GATEWAY: int SERVER_REQUEST_TAG_EXTRACTOR: TagExtractor<HttpServerRequest> SERVER_RESPONSE_TAG_EXTRACTOR: TagExtractor<HttpServerResponse> CLIENT_HTTP_REQUEST_TAG_EXTRACTOR: TagExtractor<HttpRequestHead> CLIENT_RESPONSE_TAG_EXTRACTOR: TagExtractor<HttpResponseHead> DEFAULT_STREAM_PRIORITY: StreamPriority TIMEOUT_EQ: AsciiString HEADER_VALUE_VALIDATOR: Consumer<CharSequence> HIGHEST_INVALID_VALUE_CHAR_MASK: int VALID_H_NAME_ASCII_CHARS: boolean ,len{ Params : HttpServerRequest Returns : int} name{ Params : HttpServerRequest,int Returns : String} value{ Params : HttpServerRequest,int Returns : String} len{ Params : HttpServerResponse Returns : int} name{ Params : HttpServerResponse,int Returns : String} value{ Params : HttpServerResponse,int Returns : String} len{ Params : HttpRequestHead Returns : int} name{ Params : HttpRequestHead,int Returns : String} value{ Params : HttpRequestHead,int Returns : String} len{ Params : HttpResponseHead Returns : int} name{ Params : HttpResponseHead,int Returns : String} value{ Params : HttpResponseHead,int Returns : String} setWeight{ Params : short Returns : StreamPriority} setDependency{ Params : int Returns : StreamPriority} setExclusive{ Params : boolean Returns : StreamPriority} indexOfSlash{ Params : CharSequence,int Returns : int} matches{ Params : CharSequence,int,String Returns : boolean} matches{ Params : CharSequence,int,String,boolean Returns : boolean} normalizePath{ Params : String Returns : String} normalizePathSlow{ Params : String,int Returns : String} decodeUnreservedChars{ Params : StringBuilder,int Returns : void} decodeUnreserved{ Params : StringBuilder,int Returns : void} removeDots{ Params : CharSequence Returns : String} resolveURIReference{ Params : String,String Returns : URI} resolveURIReference{ Params : URI,String Returns : URI} parsePath{ Params : String Returns : String} parseQuery{ Params : String Returns : String} absoluteURI{ Params : String,HttpServerRequest Returns : String} params{ Params : String,Charset Returns : MultiMap} fromVertxInitialSettings{ Params : boolean,io.vertx.core.http.Http2Settings,Http2Settings Returns : void} fromVertxSettings{ Params : io.vertx.core.http.Http2Settings Returns : Http2Settings} toVertxSettings{ Params : Http2Settings Returns : io.vertx.core.http.Http2Settings} decodeSettings{ Params : String Returns : Http2Settings} encodeSettings{ Params : io.vertx.core.http.Http2Settings Returns : String} generateWSCloseFrameByteBuf{ Params : short,String Returns : ByteBuf} sendError{ Params : Channel,HttpResponseStatus Returns : void} sendError{ Params : Channel,HttpResponseStatus,CharSequence Returns : void} getWebSocketLocation{ Params : HttpServerRequest,boolean Returns : String} toLowerCase{ Params : CharSequence Returns : CharSequence} toNettyHttpVersion{ Params : io.vertx.core.http.HttpVersion Returns : HttpVersion} toVertxMethod{ Params : String Returns : io.vertx.core.http.HttpMethod} parseKeepAliveHeaderTimeout{ Params : CharSequence Returns : int} validateHeader{ Params : CharSequence,CharSequence Returns : void} validateHeader{ Params : CharSequence,Iterable<? extends CharSequence> Returns : void} validateHeaderValue{ Params : CharSequence Returns : void} validateValueChar{ Params : CharSequence,int,char Returns : int} validateHeaderName{ Params : CharSequence Returns : void} validateHeaderName{ Params : AsciiString Returns : void} validateHeaderName0{ Params : CharSequence Returns : void} isValidMultipartContentType{ Params : String Returns : boolean} isValidMultipartMethod{ Params : HttpMethod Returns : boolean} resolveFile{ Params : ContextInternal,String,long,long Returns : Future<AsyncFile>} isConnectOrUpgrade{ Params : io.vertx.core.http.HttpMethod,MultiMap Returns : boolean} ,len name value len name value len name value len name value setWeight setDependency setExclusive ,indexOfSlash matches matches normalizePath normalizePathSlow decodeUnreservedChars decodeUnreserved removeDots resolveURIReference resolveURIReference parsePath parseQuery absoluteURI params fromVertxInitialSettings fromVertxSettings toVertxSettings decodeSettings encodeSettings generateWSCloseFrameByteBuf sendError sendError getWebSocketLocation toLowerCase toNettyHttpVersion toVertxMethod parseKeepAliveHeaderTimeout validateHeader validateHeader validateHeaderValue validateValueChar validateHeaderName validateHeaderName validateHeaderName0 isValidMultipartContentType isValidMultipartMethod resolveFile isConnectOrUpgrade ,,,,,,,HttpClosedException HttpClosedException TagExtractor IndexOutOfBoundsException IndexOutOfBoundsException TagExtractor IndexOutOfBoundsException IndexOutOfBoundsException TagExtractor IndexOutOfBoundsException IndexOutOfBoundsException TagExtractor IndexOutOfBoundsException IndexOutOfBoundsException StreamPriority UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException StringBuilder StringBuilder IllegalArgumentException IllegalArgumentException IllegalArgumentException StringBuilder URI URI QueryStringDecoder Http2Settings Http2Settings Http2Settings DefaultFullHttpResponse URI StringBuilder IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException FileNotFoundException RandomAccessFile OpenOptions ,headers: , io.vertx.core.http.HttpHeaders.CONNECTION, io.vertx.core.http.HttpHeaders.UPGRADE, true
vert.x-master,io.vertx.core.http.impl,MimeMapping,1,1,0,0,0,false,0 ,0 ,0 ,m: Map<String, String> ,getMimeTypeForExtension{ Params : String Returns : String} getMimeTypeForFilename{ Params : String Returns : String} ,,getMimeTypeForExtension getMimeTypeForFilename ,,,,,getMimeTypeForExtension ,,HashMap ,MimeMapping: , ext
vert.x-master,io.vertx.core.http.impl,NettyFileUpload,1,0,0,0,1,false,0 ,FileUpload ReadStream<Buffer> ,0 ,name: String contentType: String filename: String contentTransferEncoding: String charset: Charset completed: boolean maxSize: long request: HttpServerRequest pending: InboundBuffer<Object> endHandler: Handler<Void> exceptionHandler: Handler<Throwable> dataHandler: Handler<Buffer> size: long ,exceptionHandler{ Params : Handler<Throwable> Returns : NettyFileUpload} handler{ Params :  Returns : Handler<Buffer>} handler{ Params : Handler<Buffer> Returns : NettyFileUpload} pause{ Params :  Returns : NettyFileUpload} resume{ Params :  Returns : NettyFileUpload} fetch{ Params : long Returns : NettyFileUpload} endHandler{ Params :  Returns : Handler<Void>} endHandler{ Params : Handler<Void> Returns : NettyFileUpload} receiveData{ Params : Buffer Returns : void} end{ Params :  Returns : void} handleException{ Params : Throwable Returns : void} setContent{ Params : ByteBuf Returns : void} addContent{ Params : ByteBuf,boolean Returns : void} setContent{ Params : File Returns : void} setContent{ Params : InputStream Returns : void} isCompleted{ Params :  Returns : boolean} length{ Params :  Returns : long} delete{ Params :  Returns : void} definedLength{ Params :  Returns : long} checkSize{ Params : long Returns : void} getMaxSize{ Params :  Returns : long} setMaxSize{ Params : long Returns : void} get{ Params :  Returns : byte[]} getChunk{ Params : int Returns : ByteBuf} getString{ Params :  Returns : String} getString{ Params : Charset Returns : String} setCharset{ Params : Charset Returns : void} getCharset{ Params :  Returns : Charset} renameTo{ Params : File Returns : boolean} isInMemory{ Params :  Returns : boolean} getFile{ Params :  Returns : File} getName{ Params :  Returns : String} getHttpDataType{ Params :  Returns : HttpDataType} compareTo{ Params : InterfaceHttpData Returns : int} getFilename{ Params :  Returns : String} setFilename{ Params : String Returns : void} setContentType{ Params : String Returns : void} getContentType{ Params :  Returns : String} setContentTransferEncoding{ Params : String Returns : void} getContentTransferEncoding{ Params :  Returns : String} getByteBuf{ Params :  Returns : ByteBuf} copy{ Params :  Returns : FileUpload} duplicate{ Params :  Returns : FileUpload} retainedDuplicate{ Params :  Returns : FileUpload} replace{ Params : ByteBuf Returns : FileUpload} retain{ Params :  Returns : FileUpload} retain{ Params : int Returns : FileUpload} touch{ Params : Object Returns : FileUpload} touch{ Params :  Returns : FileUpload} content{ Params :  Returns : ByteBuf} refCnt{ Params :  Returns : int} release{ Params :  Returns : boolean} release{ Params : int Returns : boolean} ,exceptionHandler handler pause resume fetch endHandler setContent addContent setContent setContent isCompleted length delete definedLength checkSize getMaxSize setMaxSize get getChunk getString getString setCharset getCharset renameTo isInMemory getFile getName getHttpDataType compareTo getFilename setFilename setContentType getContentType setContentTransferEncoding getContentTransferEncoding getByteBuf copy retainedDuplicate replace retain retain touch touch content refCnt release release ,,,,FileUpload ReadStream ,long ,,long ,InboundBuffer UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException IOException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,: 
vert.x-master,io.vertx.core.http.impl,NettyFileUploadDataFactory,1,0,0,0,0,false,DefaultHttpDataFactory ,0 ,0 ,context: ContextInternal request: HttpServerRequest lazyUploadHandler: Supplier<Handler<HttpServerFileUpload>> ,createFileUpload{ Params : HttpRequest,String,String,String,String,Charset,long Returns : FileUpload} ,createFileUpload ,,,,,Supplier<Handler<HttpServerFileUpload>> ,,Supplier<Handler<HttpServerFileUpload>> ,NettyFileUpload HttpServerFileUploadImpl ,context: , upload, uploadHandler
vert.x-master,io.vertx.core.http.impl,NoStackTraceTimeoutException,1,0,0,0,0,false,TimeoutException ,0 ,0 ,,fillInStackTrace{ Params :  Returns : Throwable} ,fillInStackTrace ,,,,,,,,,context: , upload, uploadHandler
vert.x-master,io.vertx.core.http.impl,ServerCookie,2,1,0,0,0,true,TimeoutException ,0 ,0 ,,isChanged{ Params :  Returns : boolean} setChanged{ Params : boolean Returns : void} isFromUserAgent{ Params :  Returns : boolean} ,,,,,,,,,,context: , upload, uploadHandler
vert.x-master,io.vertx.core.http.impl,ServerWebSocketImpl,1,1,0,0,0,false,WebSocketImplBase<ServerWebSocketImpl> ,ServerWebSocket ,0 ,conn: Http1xServerConnection closingTimeoutMS: long scheme: String host: String uri: String path: String query: String handshaker: WebSocketServerHandshaker request: Http1xServerRequest status: Integer handshakePromise: Promise<Integer> ,scheme{ Params :  Returns : String} host{ Params :  Returns : String} uri{ Params :  Returns : String} path{ Params :  Returns : String} query{ Params :  Returns : String} accept{ Params :  Returns : void} reject{ Params :  Returns : void} reject{ Params : int Returns : void} close{ Params : short,String Returns : Future<Void>} writeFrame{ Params : WebSocketFrame Returns : Future<Void>} checkAccept{ Params :  Returns : Boolean} handleHandshake{ Params : int Returns : void} doHandshake{ Params :  Returns : void} tryHandshake{ Params : int Returns : Boolean} setHandshake{ Params : Future<Integer> Returns : Future<Integer>} handleCloseConnection{ Params :  Returns : void} handleClose{ Params : boolean Returns : void} ,scheme host uri path query accept reject reject close writeFrame setHandshake handleCloseConnection handleClose ,,,,ServerWebSocket ,Promise<Integer> ,,Promise<Integer> ,IllegalStateException IllegalArgumentException IllegalStateException IllegalStateException IllegalStateException NullPointerException IllegalStateException ,super: , graceful
vert.x-master,io.vertx.core.http.impl,SharedClientHttpStreamEndpoint,1,0,0,0,0,false,ClientHttpEndpointBase<Lease<HttpClientConnection>> ,PoolConnector<HttpClientConnection> ,Request ,LIFO_SELECTOR: BiFunction<PoolWaiter<HttpClientConnection>, List<PoolConnection<HttpClientConnection>>, PoolConnection<HttpClientConnection>> client: HttpClientImpl connector: HttpChannelConnector pool: ConnectionPool<HttpClientConnection> ,connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<HttpClientConnection>>} isValid{ Params : HttpClientConnection Returns : boolean} checkExpired{ Params :  Returns : void} onEnqueue{ Params : PoolWaiter<HttpClientConnection> Returns : void} onConnect{ Params : PoolWaiter<HttpClientConnection> Returns : void} handle{ Params : AsyncResult<Lease<HttpClientConnection>> Returns : void} acquire{ Params :  Returns : void} requestConnection2{ Params : ContextInternal,long Returns : Future<Lease<HttpClientConnection>>} close{ Params :  Returns : void} ,connect isValid onEnqueue onConnect handle requestConnection2 close ,,,,PoolConnector ,ConnectionPool<HttpClientConnection> ,,ConnectionPool<HttpClientConnection> ,ConnectResult NoStackTraceTimeoutException Request ,pool: 
vert.x-master,io.vertx.core.http.impl,Request,3,2,0,0,0,false,ClientHttpEndpointBase<Lease<HttpClientConnection>> ,PoolConnector<HttpClientConnection> ,Request ,context: ContextInternal protocol: HttpVersion timeout: long promise: Promise<Lease<HttpClientConnection>> timerID: long ,connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<HttpClientConnection>>} isValid{ Params : HttpClientConnection Returns : boolean} checkExpired{ Params :  Returns : void} onEnqueue{ Params : PoolWaiter<HttpClientConnection> Returns : void} onConnect{ Params : PoolWaiter<HttpClientConnection> Returns : void} handle{ Params : AsyncResult<Lease<HttpClientConnection>> Returns : void} acquire{ Params :  Returns : void} requestConnection2{ Params : ContextInternal,long Returns : Future<Lease<HttpClientConnection>>} close{ Params :  Returns : void} ,connect isValid onEnqueue onConnect handle requestConnection2 close ,,,,Listener Handler ,long ,,long ,NoStackTraceTimeoutException ,pool: , context, this, protocol == HttpVersion.HTTP_2 ? 1 : 0, this
vert.x-master,io.vertx.core.http.impl,VertxHttp2ClientUpgradeCodec,1,1,0,0,0,false,0 ,HttpClientUpgradeHandler.UpgradeCodec ,0 ,UPGRADE_HEADERS: List<CharSequence> settings: io.vertx.core.http.Http2Settings ,protocol{ Params :  Returns : CharSequence} setUpgradeHeaders{ Params : ChannelHandlerContext,HttpRequest Returns : Collection<CharSequence>} upgradeTo{ Params : ChannelHandlerContext,FullHttpResponse Returns : void} ,protocol setUpgradeHeaders upgradeTo ,,,,UpgradeCodec ,io.vertx.core.http.Http2Settings ,,io.vertx.core.http.Http2Settings ,Http2Settings String ,upgradeRequest: 
vert.x-master,io.vertx.core.http.impl,VertxHttp2ConnectionHandler,1,0,0,0,0,false,Http2ConnectionHandler ,Http2FrameListener Http2Connection.Listener ,0 ,connectionFactory: Function<VertxHttp2ConnectionHandler<C>, C> connection: C chctx: ChannelHandlerContext connectFuture: Promise<C> settingsRead: boolean addHandler: Handler<C> removeHandler: Handler<C> useDecompressor: boolean initialSettings: Http2Settings upgraded: boolean read: boolean ,connectFuture{ Params :  Returns : Future<C>} context{ Params :  Returns : ChannelHandlerContext} initialSettings{ Params :  Returns : Http2Settings} addHandler{ Params : Handler<C> Returns : VertxHttp2ConnectionHandler<C>} removeHandler{ Params : Handler<C> Returns : VertxHttp2ConnectionHandler<C>} handlerAdded{ Params : ChannelHandlerContext Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} serverUpgrade{ Params : ChannelHandlerContext,Http2Settings Returns : void} clientUpgrade{ Params : ChannelHandlerContext Returns : void} channelInactive{ Params : ChannelHandlerContext Returns : void} onConnectionError{ Params : ChannelHandlerContext,boolean,Throwable,Http2Exception Returns : void} onStreamError{ Params : ChannelHandlerContext,boolean,Throwable,Http2Exception.StreamException Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} onStreamClosed{ Params : Http2Stream Returns : void} onStreamAdded{ Params : Http2Stream Returns : void} onStreamActive{ Params : Http2Stream Returns : void} onStreamHalfClosed{ Params : Http2Stream Returns : void} onStreamRemoved{ Params : Http2Stream Returns : void} onGoAwaySent{ Params : int,long,ByteBuf Returns : void} onGoAwayReceived{ Params : int,long,ByteBuf Returns : void} writeHeaders{ Params : Http2Stream,Http2Headers,boolean,int,short,boolean,FutureListener<Void> Returns : void} writeData{ Params : Http2Stream,ByteBuf,boolean,FutureListener<Void> Returns : void} checkFlush{ Params :  Returns : void} writePing{ Params : long Returns : ChannelFuture} _writePing{ Params : long,ChannelPromise Returns : void} consume{ Params : Http2Stream,int Returns : void} writeFrame{ Params : Http2Stream,byte,short,ByteBuf Returns : void} writeReset{ Params : int,long Returns : void} writeGoAway{ Params : long,int,ByteBuf Returns : void} _writeGoAway{ Params : long,int,ByteBuf Returns : void} writeSettings{ Params : Http2Settings Returns : ChannelFuture} _writeSettings{ Params : Http2Settings,ChannelPromise Returns : void} writePushPromise{ Params : int,Http2Headers Returns : io.netty.util.concurrent.Future<Integer>} maxConcurrentStreams{ Params :  Returns : int} _writePushPromise{ Params : int,int,Http2Headers,ChannelPromise Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,boolean Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} onSettingsAckRead{ Params : ChannelHandlerContext Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} onPingRead{ Params : ChannelHandlerContext,long Returns : void} onPingAckRead{ Params : ChannelHandlerContext,long Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} onUnknownFrame{ Params : ChannelHandlerContext,byte,int,Http2Flags,ByteBuf Returns : void} _writePriority{ Params : Http2Stream,int,short,boolean Returns : void} writePriority{ Params : Http2Stream,int,short,boolean Returns : void} ,handlerAdded exceptionCaught channelInactive onConnectionError onStreamError userEventTriggered onStreamClosed onStreamAdded onStreamActive onStreamHalfClosed onStreamRemoved onGoAwaySent onGoAwayReceived onDataRead onHeadersRead onHeadersRead onPriorityRead onRstStreamRead onSettingsAckRead onSettingsRead channelRead channelReadComplete onPingRead onPingAckRead onPushPromiseRead onGoAwayRead onWindowUpdateRead onUnknownFrame ,,,,Http2FrameListener Listener ,boolean ,,boolean ,IllegalStateException DefaultPromise GoAway GoAway Http2Flags DefaultPromise UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException DelegatingDecompressorFrameListener UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,: , stream, streamDependency, weight, exclusive
vert.x-master,io.vertx.core.http.impl,VertxHttp2ConnectionHandlerBuilder,1,0,0,0,0,false,AbstractHttp2ConnectionHandlerBuilder<VertxHttp2ConnectionHandler<C>,VertxHttp2ConnectionHandlerBuilder<C>> ,0 ,0 ,useDecompression: boolean compressionOptions: CompressionOptions connectionFactory: Function<VertxHttp2ConnectionHandler<C>, C> logEnabled: boolean ,server{ Params : boolean Returns : VertxHttp2ConnectionHandlerBuilder<C>} initialSettings{ Params : io.vertx.core.http.Http2Settings Returns : VertxHttp2ConnectionHandlerBuilder<C>} useCompression{ Params : CompressionOptions[] Returns : VertxHttp2ConnectionHandlerBuilder<C>} gracefulShutdownTimeoutMillis{ Params : long Returns : VertxHttp2ConnectionHandlerBuilder<C>} useDecompression{ Params : boolean Returns : VertxHttp2ConnectionHandlerBuilder<C>} connectionFactory{ Params : Function<VertxHttp2ConnectionHandler<C>,C> Returns : VertxHttp2ConnectionHandlerBuilder<C>} logEnabled{ Params : boolean Returns : VertxHttp2ConnectionHandlerBuilder<C>} build{ Params :  Returns : VertxHttp2ConnectionHandler<C>} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,boolean Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} onSettingsAckRead{ Params : ChannelHandlerContext Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} onPingRead{ Params : ChannelHandlerContext,long Returns : void} onPingAckRead{ Params : ChannelHandlerContext,long Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} onUnknownFrame{ Params : ChannelHandlerContext,byte,int,Http2Flags,ByteBuf Returns : void} build{ Params : Http2ConnectionDecoder,Http2ConnectionEncoder,Http2Settings Returns : VertxHttp2ConnectionHandler<C>} ,gracefulShutdownTimeoutMillis build onDataRead onHeadersRead onHeadersRead onPriorityRead onRstStreamRead onSettingsAckRead onSettingsRead onPingRead onPingAckRead onPushPromiseRead onGoAwayRead onWindowUpdateRead onUnknownFrame build ,,,,,boolean ,,boolean ,Http2FrameLogger Http2FrameListener UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException CompressorHttp2ConnectionEncoder VertxHttp2ConnectionHandler VertxHttp2ConnectionHandler ,decoder: , handler
vert.x-master,io.vertx.core.http.impl,VertxHttp2Stream,1,0,1,0,0,false,0 ,0 ,0 ,EMPTY: MultiMap conn: C vertx: VertxInternal context: ContextInternal stream: Http2Stream priority: StreamPriority pending: InboundBuffer<Object> writable: boolean bytesRead: long bytesWritten: long isConnect: boolean ,init{ Params : Http2Stream Returns : void} onClose{ Params :  Returns : void} onException{ Params : Throwable Returns : void} onReset{ Params : long Returns : void} onPriorityChange{ Params : StreamPriority Returns : void} onCustomFrame{ Params : HttpFrame Returns : void} onHeaders{ Params : Http2Headers,StreamPriority Returns : void} onData{ Params : Buffer Returns : void} onWritabilityChanged{ Params :  Returns : void} onEnd{ Params :  Returns : void} onEnd{ Params : MultiMap Returns : void} id{ Params :  Returns : int} bytesWritten{ Params :  Returns : long} bytesRead{ Params :  Returns : long} doPause{ Params :  Returns : void} doFetch{ Params : long Returns : void} isNotWritable{ Params :  Returns : boolean} writeFrame{ Params : int,int,ByteBuf Returns : void} doWriteFrame{ Params : int,int,ByteBuf Returns : void} writeHeaders{ Params : Http2Headers,boolean,Promise<Void> Returns : void} doWriteHeaders{ Params : Http2Headers,boolean,Promise<Void> Returns : void} endWritten{ Params :  Returns : void} writePriorityFrame{ Params : StreamPriority Returns : void} writeData{ Params : ByteBuf,boolean,Promise<Void> Returns : void} doWriteData{ Params : ByteBuf,boolean,Promise<Void> Returns : void} writeReset{ Params : long Returns : void} doWriteReset{ Params : long Returns : void} handleWritabilityChanged{ Params : boolean Returns : void} handleData{ Params : Buffer Returns : void} handleCustomFrame{ Params : HttpFrame Returns : void} handleEnd{ Params : MultiMap Returns : void} handleReset{ Params : long Returns : void} handleException{ Params : Throwable Returns : void} handleClose{ Params :  Returns : void} priority{ Params : StreamPriority Returns : void} priority{ Params :  Returns : StreamPriority} updatePriority{ Params : StreamPriority Returns : void} handlePriorityChange{ Params : StreamPriority Returns : void} ,,,writeFrame writeHeaders writeData writeReset ,,,,,,Http2HeadersAdaptor InboundBuffer ,: , priority
vert.x-master,io.vertx.core.http.impl,VertxHttpRequestDecoder,1,1,0,0,0,false,HttpRequestDecoder ,0 ,0 ,,createMessage{ Params : String[] Returns : HttpMessage} isContentAlwaysEmpty{ Params : HttpMessage Returns : boolean} ,createMessage isContentAlwaysEmpty ,,,,,,,,DefaultHttpRequest ,super: , msg
vert.x-master,io.vertx.core.http.impl,VertxHttpResponseEncoder,1,0,0,0,1,false,HttpResponseEncoder ,0 ,0 ,,encodeHeaders{ Params : HttpHeaders,ByteBuf Returns : void} acceptOutboundMessage{ Params : Object Returns : boolean} handlerAdded{ Params : ChannelHandlerContext Returns : void} isContentAlwaysEmpty{ Params : HttpResponse Returns : boolean} ,encodeHeaders acceptOutboundMessage handlerAdded isContentAlwaysEmpty ,,,,,,,,,super: , msg
vert.x-master,io.vertx.core.http.impl,WebSocketEndpoint,1,0,0,0,0,false,ClientHttpEndpointBase<HttpClientConnection> ,0 ,Waiter ,maxPoolSize: int connector: HttpChannelConnector waiters: Deque<Waiter> inflightConnections: int ,onEvict{ Params :  Returns : void} tryConnect{ Params : ContextInternal Returns : Future<HttpClientConnection>} requestConnection2{ Params : ContextInternal,long Returns : Future<HttpClientConnection>} checkExpired{ Params :  Returns : void} close{ Params :  Returns : void} ,requestConnection2 checkExpired close ,,,,,int ,,int ,ArrayDeque VertxException Waiter ,waiters: 
vert.x-master,io.vertx.core.http.impl,Waiter,3,2,0,1,0,false,ClientHttpEndpointBase<HttpClientConnection> ,0 ,Waiter ,promise: Promise<HttpClientConnection> context: ContextInternal ,onEvict{ Params :  Returns : void} tryConnect{ Params : ContextInternal Returns : Future<HttpClientConnection>} requestConnection2{ Params : ContextInternal,long Returns : Future<HttpClientConnection>} checkExpired{ Params :  Returns : void} close{ Params :  Returns : void} ,requestConnection2 checkExpired close ,,,,,,,,,null
vert.x-master,io.vertx.core.http.impl,WebSocketHandshakeInboundHandler,1,0,0,0,0,false,ChannelInboundHandlerAdapter ,0 ,0 ,handshaker: WebSocketClientHandshaker upgrade: Promise<HttpHeaders> chctx: ChannelHandlerContext response: FullHttpResponse fut: ChannelFuture ,handlerAdded{ Params : ChannelHandlerContext Returns : void} channelInactive{ Params : ChannelHandlerContext Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} handshakeComplete{ Params : FullHttpResponse Returns : HttpHeaders} ,handlerAdded channelInactive channelRead ,,,,,ChannelFuture ,,ChannelFuture ,WebSocketHandshakeException DefaultFullHttpResponse UpgradeRejectedException HeadersAdaptor ,response: 
vert.x-master,io.vertx.core.http.impl,WebSocketImpl,1,1,0,0,0,false,WebSocketImplBase<WebSocketImpl> ,WebSocket ,0 ,conn: Http1xClientConnection closingTimeoutMS: long ,handleCloseConnection{ Params :  Returns : void} handleClose{ Params : boolean Returns : void} ,handleCloseConnection handleClose ,,,,WebSocket ,long ,,long ,,super: , graceful
vert.x-master,io.vertx.core.http.impl,WebSocketImplBase,1,1,1,0,0,false,0 ,WebSocketInternal ,FrameAggregator ,supportsContinuation: boolean textHandlerID: String binaryHandlerID: String maxWebSocketFrameSize: int maxWebSocketMessageSize: int pending: InboundBuffer<WebSocketFrameInternal> chctx: ChannelHandlerContext context: ContextInternal binaryHandlerRegistration: MessageConsumer textHandlerRegistration: MessageConsumer subProtocol: String metric: Object handler: Handler<Buffer> frameHandler: Handler<WebSocketFrameInternal> pongHandler: Handler<Buffer> drainHandler: Handler<Void> exceptionHandler: Handler<Throwable> closeHandler: Handler<Void> endHandler: Handler<Void> conn: Http1xConnectionBase writable: boolean closed: boolean closeStatusCode: Short closeReason: String closeTimeoutID: long headers: MultiMap ,registerHandler{ Params : EventBus Returns : void} channelHandlerContext{ Params :  Returns : ChannelHandlerContext} connection{ Params :  Returns : HttpConnection} binaryHandlerID{ Params :  Returns : String} textHandlerID{ Params :  Returns : String} writeQueueFull{ Params :  Returns : boolean} close{ Params :  Returns : Future<Void>} close{ Params : short Returns : Future<Void>} close{ Params : short,String Returns : Future<Void>} isSsl{ Params :  Returns : boolean} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} peerCertificates{ Params :  Returns : List<Certificate>} localAddress{ Params :  Returns : SocketAddress} remoteAddress{ Params :  Returns : SocketAddress} writeFinalTextFrame{ Params : String Returns : Future<Void>} writeFinalBinaryFrame{ Params : Buffer Returns : Future<Void>} subProtocol{ Params :  Returns : String} subProtocol{ Params : String Returns : void} closeStatusCode{ Params :  Returns : Short} closeReason{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} headers{ Params : MultiMap Returns : void} writeBinaryMessage{ Params : Buffer Returns : Future<Void>} writeTextMessage{ Params : String Returns : Future<Void>} write{ Params : Buffer Returns : Future<Void>} writePing{ Params : Buffer Returns : Future<Void>} writePong{ Params : Buffer Returns : Future<Void>} writePartialMessage{ Params : WebSocketFrameType,Buffer,int Returns : Future<Void>} writeFrame{ Params : WebSocketFrame Returns : Future<Void>} writeBinaryFrameInternal{ Params : Buffer Returns : void} writeTextFrameInternal{ Params : String Returns : void} encodeFrame{ Params : WebSocketFrameImpl Returns : io.netty.handler.codec.http.websocketx.WebSocketFrame} checkClosed{ Params :  Returns : void} isClosed{ Params :  Returns : boolean} handleFrame{ Params : WebSocketFrameInternal Returns : void} handleCloseFrame{ Params : WebSocketFrameInternal Returns : void} handleClose{ Params : boolean Returns : void} receiveFrame{ Params : WebSocketFrameInternal Returns : void} handleCloseConnection{ Params :  Returns : void} closeConnection{ Params :  Returns : void} initiateConnectionCloseTimeout{ Params : long Returns : void} handle{ Params : WebSocketFrameInternal Returns : void} handleTextFrame{ Params : WebSocketFrameInternal Returns : void} handleBinaryFrame{ Params : WebSocketFrameInternal Returns : void} frameHandler{ Params : Handler<WebSocketFrame> Returns : S} textMessageHandler{ Params : Handler<String> Returns : WebSocketBase} binaryMessageHandler{ Params : Handler<Buffer> Returns : S} pongHandler{ Params : Handler<Buffer> Returns : WebSocketBase} pongHandler{ Params :  Returns : Handler<Buffer>} handleWritabilityChanged{ Params : boolean Returns : void} handleException{ Params : Throwable Returns : void} handleConnectionClosed{ Params :  Returns : void} setMetric{ Params : Object Returns : void} getMetric{ Params :  Returns : Object} handler{ Params : Handler<Buffer> Returns : S} handler{ Params :  Returns : Handler<Buffer>} endHandler{ Params : Handler<Void> Returns : S} endHandler{ Params :  Returns : Handler<Void>} exceptionHandler{ Params : Handler<Throwable> Returns : S} closeHandler{ Params : Handler<Void> Returns : S} drainHandler{ Params : Handler<Void> Returns : S} pause{ Params :  Returns : S} resume{ Params :  Returns : S} fetch{ Params : long Returns : S} setWriteQueueMaxSize{ Params : int Returns : S} end{ Params :  Returns : Future<Void>} ,channelHandlerContext connection close close close isSsl sslSession peerCertificateChain peerCertificates localAddress remoteAddress writeFinalTextFrame writeFinalBinaryFrame subProtocol closeStatusCode closeReason headers writeBinaryMessage writeTextMessage write writePing writePong writeFrame handle frameHandler textMessageHandler binaryMessageHandler pongHandler handler endHandler exceptionHandler closeHandler drainHandler pause resume fetch setWriteQueueMaxSize end ,,,handleCloseConnection ,WebSocketInternal ,MultiMap ,,MultiMap ,InboundBuffer CloseWebSocketFrame WebSocketFrameImpl WebSocketFrameImpl WebSocketFrameImpl BinaryWebSocketFrame TextWebSocketFrame CloseWebSocketFrame ContinuationWebSocketFrame PongWebSocketFrame PingWebSocketFrame IllegalStateException IllegalStateException PongWebSocketFrame CloseWebSocketFrame IllegalStateException IllegalStateException FrameAggregator FrameAggregator ,: 
vert.x-master,io.vertx.core.http.impl,FrameAggregator,3,2,0,0,0,false,0 ,WebSocketInternal ,FrameAggregator ,textMessageHandler: Handler<String> binaryMessageHandler: Handler<Buffer> textMessageBuffer: Buffer binaryMessageBuffer: Buffer ,registerHandler{ Params : EventBus Returns : void} channelHandlerContext{ Params :  Returns : ChannelHandlerContext} connection{ Params :  Returns : HttpConnection} binaryHandlerID{ Params :  Returns : String} textHandlerID{ Params :  Returns : String} writeQueueFull{ Params :  Returns : boolean} close{ Params :  Returns : Future<Void>} close{ Params : short Returns : Future<Void>} close{ Params : short,String Returns : Future<Void>} isSsl{ Params :  Returns : boolean} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} peerCertificates{ Params :  Returns : List<Certificate>} localAddress{ Params :  Returns : SocketAddress} remoteAddress{ Params :  Returns : SocketAddress} writeFinalTextFrame{ Params : String Returns : Future<Void>} writeFinalBinaryFrame{ Params : Buffer Returns : Future<Void>} subProtocol{ Params :  Returns : String} subProtocol{ Params : String Returns : void} closeStatusCode{ Params :  Returns : Short} closeReason{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} headers{ Params : MultiMap Returns : void} writeBinaryMessage{ Params : Buffer Returns : Future<Void>} writeTextMessage{ Params : String Returns : Future<Void>} write{ Params : Buffer Returns : Future<Void>} writePing{ Params : Buffer Returns : Future<Void>} writePong{ Params : Buffer Returns : Future<Void>} writePartialMessage{ Params : WebSocketFrameType,Buffer,int Returns : Future<Void>} writeFrame{ Params : WebSocketFrame Returns : Future<Void>} writeBinaryFrameInternal{ Params : Buffer Returns : void} writeTextFrameInternal{ Params : String Returns : void} encodeFrame{ Params : WebSocketFrameImpl Returns : io.netty.handler.codec.http.websocketx.WebSocketFrame} checkClosed{ Params :  Returns : void} isClosed{ Params :  Returns : boolean} handleFrame{ Params : WebSocketFrameInternal Returns : void} handleCloseFrame{ Params : WebSocketFrameInternal Returns : void} handleClose{ Params : boolean Returns : void} receiveFrame{ Params : WebSocketFrameInternal Returns : void} handleCloseConnection{ Params :  Returns : void} closeConnection{ Params :  Returns : void} initiateConnectionCloseTimeout{ Params : long Returns : void} handle{ Params : WebSocketFrameInternal Returns : void} handleTextFrame{ Params : WebSocketFrameInternal Returns : void} handleBinaryFrame{ Params : WebSocketFrameInternal Returns : void} frameHandler{ Params : Handler<WebSocketFrame> Returns : S} textMessageHandler{ Params : Handler<String> Returns : WebSocketBase} binaryMessageHandler{ Params : Handler<Buffer> Returns : S} pongHandler{ Params : Handler<Buffer> Returns : WebSocketBase} pongHandler{ Params :  Returns : Handler<Buffer>} handleWritabilityChanged{ Params : boolean Returns : void} handleException{ Params : Throwable Returns : void} handleConnectionClosed{ Params :  Returns : void} setMetric{ Params : Object Returns : void} getMetric{ Params :  Returns : Object} handler{ Params : Handler<Buffer> Returns : S} handler{ Params :  Returns : Handler<Buffer>} endHandler{ Params : Handler<Void> Returns : S} endHandler{ Params :  Returns : Handler<Void>} exceptionHandler{ Params : Handler<Throwable> Returns : S} closeHandler{ Params : Handler<Void> Returns : S} drainHandler{ Params : Handler<Void> Returns : S} pause{ Params :  Returns : S} resume{ Params :  Returns : S} fetch{ Params : long Returns : S} setWriteQueueMaxSize{ Params : int Returns : S} end{ Params :  Returns : Future<Void>} ,channelHandlerContext connection close close close isSsl sslSession peerCertificateChain peerCertificates localAddress remoteAddress writeFinalTextFrame writeFinalBinaryFrame subProtocol closeStatusCode closeReason headers writeBinaryMessage writeTextMessage write writePing writePong writeFrame handle frameHandler textMessageHandler binaryMessageHandler pongHandler handler endHandler exceptionHandler closeHandler drainHandler pause resume fetch setWriteQueueMaxSize end ,,,handleCloseConnection ,Handler ,Buffer ,,Buffer ,IllegalStateException IllegalStateException ,binaryMessageHandler: , fullMessage
vert.x-master,io.vertx.core.http.impl,WebSocketInternal,2,1,0,0,0,true,0 ,WebSocketInternal ,0 ,,channelHandlerContext{ Params :  Returns : ChannelHandlerContext} connection{ Params :  Returns : HttpConnection} ,,,,,,,,,,binaryMessageHandler: , fullMessage
vert.x-master,io.vertx.core.http.impl.ws,WebSocketFrameImpl,1,1,0,0,0,false,0 ,WebSocketFrameInternal ReferenceCounted ,0 ,type: WebSocketFrameType isFinalFrame: boolean binaryData: ByteBuf closeParsed: boolean closeStatusCode: short closeReason: String ,binaryFrame{ Params : Buffer,boolean Returns : WebSocketFrame} textFrame{ Params : String,boolean Returns : WebSocketFrame} continuationFrame{ Params : Buffer,boolean Returns : WebSocketFrame} pingFrame{ Params : Buffer Returns : WebSocketFrame} pongFrame{ Params : Buffer Returns : WebSocketFrame} isText{ Params :  Returns : boolean} isBinary{ Params :  Returns : boolean} isContinuation{ Params :  Returns : boolean} isClose{ Params :  Returns : boolean} isPing{ Params :  Returns : boolean} getBinaryData{ Params :  Returns : ByteBuf} textData{ Params :  Returns : String} binaryData{ Params :  Returns : Buffer} setBinaryData{ Params : ByteBuf Returns : void} setTextData{ Params : String Returns : void} length{ Params :  Returns : int} toString{ Params :  Returns : String} refCnt{ Params :  Returns : int} retain{ Params :  Returns : ReferenceCounted} retain{ Params : int Returns : ReferenceCounted} release{ Params :  Returns : boolean} release{ Params : int Returns : boolean} touch{ Params :  Returns : ReferenceCounted} touch{ Params : Object Returns : ReferenceCounted} isFinal{ Params :  Returns : boolean} parseCloseFrame{ Params :  Returns : void} checkClose{ Params :  Returns : void} closeStatusCode{ Params :  Returns : short} closeReason{ Params :  Returns : String} type{ Params :  Returns : WebSocketFrameType} ,isPing length toString refCnt retain retain release release touch touch isFinal closeStatusCode closeReason type ,binaryFrame textFrame continuationFrame pingFrame pongFrame ,,,WebSocketFrameInternal ReferenceCounted ,String ,,String ,WebSocketFrameImpl WebSocketFrameImpl WebSocketFrameImpl WebSocketFrameImpl WebSocketFrameImpl IllegalStateException ,: 
vert.x-master,io.vertx.core.http.impl.ws,WebSocketFrameInternal,2,1,0,0,0,true,0 ,WebSocketFrameInternal ReferenceCounted ,0 ,,getBinaryData{ Params :  Returns : ByteBuf} setBinaryData{ Params : ByteBuf Returns : void} setTextData{ Params : String Returns : void} length{ Params :  Returns : int} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.http,RequestOptions,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_PROXY_OPTIONS: ProxyOptions DEFAULT_SERVER: SocketAddress DEFAULT_HTTP_METHOD: HttpMethod DEFAULT_HOST: String DEFAULT_PORT: Integer DEFAULT_SSL: Boolean DEFAULT_URI: String DEFAULT_FOLLOW_REDIRECTS: boolean DEFAULT_TIMEOUT: long proxyOptions: ProxyOptions server: SocketAddress method: HttpMethod host: String port: Integer ssl: Boolean uri: String headers: MultiMap followRedirects: boolean timeout: long traceOperation: String ,getProxyOptions{ Params :  Returns : ProxyOptions} setProxyOptions{ Params : ProxyOptions Returns : RequestOptions} getServer{ Params :  Returns : SocketAddress} setServer{ Params : SocketAddress Returns : RequestOptions} getMethod{ Params :  Returns : HttpMethod} setMethod{ Params : HttpMethod Returns : RequestOptions} getHost{ Params :  Returns : String} setHost{ Params : String Returns : RequestOptions} getPort{ Params :  Returns : Integer} setPort{ Params : Integer Returns : RequestOptions} isSsl{ Params :  Returns : Boolean} setSsl{ Params : Boolean Returns : RequestOptions} getURI{ Params :  Returns : String} setURI{ Params : String Returns : RequestOptions} getFollowRedirects{ Params :  Returns : Boolean} setFollowRedirects{ Params : Boolean Returns : RequestOptions} getTimeout{ Params :  Returns : long} setTimeout{ Params : long Returns : RequestOptions} parseUrl{ Params : String Returns : URL} setAbsoluteURI{ Params : String Returns : RequestOptions} setAbsoluteURI{ Params : URL Returns : RequestOptions} addHeader{ Params : String,String Returns : RequestOptions} addHeader{ Params : CharSequence,CharSequence Returns : RequestOptions} addHeader{ Params : CharSequence,Iterable<CharSequence> Returns : RequestOptions} putHeader{ Params : String,String Returns : RequestOptions} putHeader{ Params : CharSequence,CharSequence Returns : RequestOptions} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : RequestOptions} removeHeader{ Params : String Returns : RequestOptions} removeHeader{ Params : CharSequence Returns : RequestOptions} setHeaders{ Params : MultiMap Returns : RequestOptions} getHeaders{ Params :  Returns : MultiMap} checkHeaders{ Params :  Returns : void} getTraceOperation{ Params :  Returns : String} setTraceOperation{ Params : String Returns : RequestOptions} toJson{ Params :  Returns : JsonObject} ,,,,,,String ,,String ,URL VertxException IllegalArgumentException JsonObject JsonObject JsonObject ,json: , "headers", headers
vert.x-master,io.vertx.core.http,ServerWebSocket,2,1,0,0,0,true,0 ,0 ,0 ,,exceptionHandler{ Params : Handler<Throwable> Returns : ServerWebSocket} handler{ Params : Handler<Buffer> Returns : ServerWebSocket} pause{ Params :  Returns : ServerWebSocket} resume{ Params :  Returns : ServerWebSocket} fetch{ Params : long Returns : ServerWebSocket} endHandler{ Params : Handler<Void> Returns : ServerWebSocket} setWriteQueueMaxSize{ Params : int Returns : ServerWebSocket} drainHandler{ Params : Handler<Void> Returns : ServerWebSocket} closeHandler{ Params : Handler<Void> Returns : ServerWebSocket} frameHandler{ Params : Handler<WebSocketFrame> Returns : ServerWebSocket} scheme{ Params :  Returns : String} host{ Params :  Returns : String} uri{ Params :  Returns : String} path{ Params :  Returns : String} query{ Params :  Returns : String} accept{ Params :  Returns : void} reject{ Params :  Returns : void} reject{ Params : int Returns : void} setHandshake{ Params : Future<Integer> Returns : Future<Integer>} close{ Params :  Returns : Future<Void>} sslSession{ Params :  Returns : SSLSession} ,exceptionHandler handler pause resume fetch endHandler setWriteQueueMaxSize drainHandler closeHandler frameHandler close ,,,,,,,,,json: , "headers", headers
vert.x-master,io.vertx.core.http,StreamPriority,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_DEPENDENCY: int DEFAULT_WEIGHT: short DEFAULT_EXCLUSIVE: boolean weight: short dependency: int exclusive: boolean ,getWeight{ Params :  Returns : short} setWeight{ Params : short Returns : StreamPriority} getDependency{ Params :  Returns : int} setDependency{ Params : int Returns : StreamPriority} isExclusive{ Params :  Returns : boolean} setExclusive{ Params : boolean Returns : StreamPriority} hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} toJson{ Params :  Returns : JsonObject} toString{ Params :  Returns : String} ,hashCode equals toString ,,,,,boolean ,,boolean ,JsonObject ,json: , "exclusive", exclusive
vert.x-master,io.vertx.core.http,StreamResetException,1,1,0,0,0,false,VertxException ,0 ,0 ,code: long ,getCode{ Params :  Returns : long} ,,,,,,long ,,long ,,json: , "exclusive", exclusive
vert.x-master,io.vertx.core.http,UpgradeRejectedException,1,1,0,0,0,false,VertxException ,0 ,0 ,status: int headers: MultiMap body: Buffer ,getStatus{ Params :  Returns : int} getHeaders{ Params :  Returns : MultiMap} getBody{ Params :  Returns : Buffer} ,,,,,,Buffer ,,Buffer ,,json: , "exclusive", exclusive
vert.x-master,io.vertx.core.http,WebSocket,2,1,0,0,0,true,VertxException ,0 ,0 ,,exceptionHandler{ Params : Handler<Throwable> Returns : WebSocket} handler{ Params : Handler<Buffer> Returns : WebSocket} pause{ Params :  Returns : WebSocket} resume{ Params :  Returns : WebSocket} fetch{ Params : long Returns : WebSocket} endHandler{ Params : Handler<Void> Returns : WebSocket} setWriteQueueMaxSize{ Params : int Returns : WebSocket} drainHandler{ Params : Handler<Void> Returns : WebSocket} closeHandler{ Params : Handler<Void> Returns : WebSocket} frameHandler{ Params : Handler<WebSocketFrame> Returns : WebSocket} ,exceptionHandler handler pause resume fetch endHandler setWriteQueueMaxSize drainHandler closeHandler frameHandler ,,,,,,,,,json: , "exclusive", exclusive
vert.x-master,io.vertx.core.http,WebSocketBase,2,1,0,0,0,true,VertxException ,0 ,0 ,,exceptionHandler{ Params : Handler<Throwable> Returns : WebSocketBase} handler{ Params : Handler<Buffer> Returns : WebSocketBase} pause{ Params :  Returns : WebSocketBase} resume{ Params :  Returns : WebSocketBase} fetch{ Params : long Returns : WebSocketBase} endHandler{ Params : Handler<Void> Returns : WebSocketBase} setWriteQueueMaxSize{ Params : int Returns : WebSocketBase} drainHandler{ Params : Handler<Void> Returns : WebSocketBase} binaryHandlerID{ Params :  Returns : String} textHandlerID{ Params :  Returns : String} subProtocol{ Params :  Returns : String} closeStatusCode{ Params :  Returns : Short} closeReason{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} writeFrame{ Params : WebSocketFrame Returns : Future<Void>} writeFinalTextFrame{ Params : String Returns : Future<Void>} writeFinalBinaryFrame{ Params : Buffer Returns : Future<Void>} writeBinaryMessage{ Params : Buffer Returns : Future<Void>} writeTextMessage{ Params : String Returns : Future<Void>} writePing{ Params : Buffer Returns : Future<Void>} writePong{ Params : Buffer Returns : Future<Void>} closeHandler{ Params : Handler<Void> Returns : WebSocketBase} frameHandler{ Params : Handler<WebSocketFrame> Returns : WebSocketBase} textMessageHandler{ Params : Handler<String> Returns : WebSocketBase} binaryMessageHandler{ Params : Handler<Buffer> Returns : WebSocketBase} pongHandler{ Params : Handler<Buffer> Returns : WebSocketBase} end{ Params :  Returns : Future<Void>} close{ Params :  Returns : Future<Void>} close{ Params : short Returns : Future<Void>} close{ Params : short,String Returns : Future<Void>} remoteAddress{ Params :  Returns : SocketAddress} localAddress{ Params :  Returns : SocketAddress} isSsl{ Params :  Returns : boolean} isClosed{ Params :  Returns : boolean} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} peerCertificates{ Params :  Returns : List<Certificate>} ,exceptionHandler handler pause resume fetch endHandler setWriteQueueMaxSize drainHandler end ,,,,,,,,,json: , "exclusive", exclusive
vert.x-master,io.vertx.core.http,WebSocketConnectOptions,1,1,0,0,0,false,RequestOptions ,0 ,0 ,DEFAULT_PROXY_OPTIONS: ProxyOptions DEFAULT_VERSION: WebsocketVersion DEFAULT_SUB_PROTOCOLS: List<String> DEFAULT_ALLOW_ORIGIN_HEADER: boolean DEFAULT_REGISTER_WRITE_HANDLERS: boolean proxyOptions: ProxyOptions version: WebsocketVersion subProtocols: List<String> allowOriginHeader: boolean registerWriteHandlers: boolean ,getVersion{ Params :  Returns : WebsocketVersion} setVersion{ Params : WebsocketVersion Returns : WebSocketConnectOptions} getSubProtocols{ Params :  Returns : List<String>} setSubProtocols{ Params : List<String> Returns : WebSocketConnectOptions} addSubProtocol{ Params : String Returns : WebSocketConnectOptions} getProxyOptions{ Params :  Returns : ProxyOptions} setProxyOptions{ Params : ProxyOptions Returns : RequestOptions} getAllowOriginHeader{ Params :  Returns : boolean} setAllowOriginHeader{ Params : boolean Returns : WebSocketConnectOptions} setHost{ Params : String Returns : WebSocketConnectOptions} setPort{ Params : Integer Returns : WebSocketConnectOptions} setSsl{ Params : Boolean Returns : WebSocketConnectOptions} setURI{ Params : String Returns : WebSocketConnectOptions} setTimeout{ Params : long Returns : WebSocketConnectOptions} addHeader{ Params : String,String Returns : WebSocketConnectOptions} addHeader{ Params : CharSequence,CharSequence Returns : WebSocketConnectOptions} addHeader{ Params : CharSequence,Iterable<CharSequence> Returns : WebSocketConnectOptions} putHeader{ Params : String,String Returns : WebSocketConnectOptions} putHeader{ Params : CharSequence,CharSequence Returns : WebSocketConnectOptions} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : WebSocketConnectOptions} setHeaders{ Params : MultiMap Returns : WebSocketConnectOptions} toJson{ Params :  Returns : JsonObject} isRegisterWriteHandlers{ Params :  Returns : boolean} setRegisterWriteHandlers{ Params : boolean Returns : WebSocketConnectOptions} ,setHost setPort setSsl setURI setTimeout addHeader addHeader addHeader putHeader putHeader putHeader setHeaders toJson ,,,,,boolean ,,boolean ,ProxyOptions ArrayList ,WebSocketConnectOptionsConverter: , this, json
vert.x-master,io.vertx.core.http,WebSocketFrame,2,1,0,0,0,true,RequestOptions ,0 ,0 ,,binaryFrame{ Params : Buffer,boolean Returns : WebSocketFrame} textFrame{ Params : String,boolean Returns : WebSocketFrame} pingFrame{ Params : Buffer Returns : WebSocketFrame} pongFrame{ Params : Buffer Returns : WebSocketFrame} continuationFrame{ Params : Buffer,boolean Returns : WebSocketFrame} type{ Params :  Returns : WebSocketFrameType} isText{ Params :  Returns : boolean} isBinary{ Params :  Returns : boolean} isContinuation{ Params :  Returns : boolean} isClose{ Params :  Returns : boolean} isPing{ Params :  Returns : boolean} textData{ Params :  Returns : String} binaryData{ Params :  Returns : Buffer} isFinal{ Params :  Returns : boolean} closeStatusCode{ Params :  Returns : short} closeReason{ Params :  Returns : String} ,,binaryFrame textFrame pingFrame pongFrame continuationFrame ,,,,,,,,WebSocketFrameImpl: , data, isFinal
vert.x-master,io.vertx.core.impl,AddressResolver,1,1,0,0,0,false,0 ,0 ,0 ,log: Logger NDOTS_OPTIONS_PATTERN: Pattern ROTATE_OPTIONS_PATTERN: Pattern DEFAULT_NDOTS_RESOLV_OPTION: int DEFAULT_ROTATE_RESOLV_OPTION: boolean vertx: Vertx resolverGroup: AddressResolverGroup<InetSocketAddress> provider: ResolverProvider ,resolvOption{ Params : String Returns : Pattern} resolveHostname{ Params : String Returns : Future<InetAddress>} resolveHostname{ Params : EventLoop,String Returns : io.netty.util.concurrent.Future<InetSocketAddress>} resolveHostnameAll{ Params : String,Handler<AsyncResult<List<InetSocketAddress>>> Returns : void} resolveHostnameAll{ Params : EventLoop,String Returns : io.netty.util.concurrent.Future<List<InetSocketAddress>>} getResolver{ Params : EventLoop Returns : io.netty.resolver.AddressResolver<InetSocketAddress>} nettyAddressResolverGroup{ Params :  Returns : AddressResolverGroup<InetSocketAddress>} close{ Params :  Returns : Future<Void>} parseNdotsOptionFromResolvConf{ Params : String Returns : int} parseRotateOptionFromResolvConf{ Params : String Returns : boolean} ,,resolvOption parseNdotsOptionFromResolvConf parseRotateOptionFromResolvConf ,,,,ResolverProvider ,,ResolverProvider ,File String ,matcher: 
vert.x-master,io.vertx.core.impl,Args,1,1,0,0,0,false,0 ,0 ,0 ,map: Map<String, String> ,getInt{ Params : String Returns : int} ,,,,,,,,,HashMap IllegalArgumentException ,arg: 
vert.x-master,io.vertx.core.impl,Arguments,1,1,0,0,0,false,0 ,0 ,0 ,,require{ Params : boolean,String Returns : void} requireInRange{ Params : int,int,int,String Returns : void} ,,require requireInRange ,,,,,,,IllegalArgumentException IllegalArgumentException ,arg: 
vert.x-master,io.vertx.core.impl.btc,BlockedThreadChecker,1,1,0,0,0,false,0 ,0 ,0 ,LOGGER_NAME: String log: Logger threads: Map<Thread, ThreadInfo> timer: Timer blockedThreadHandler: Handler<BlockedThreadEvent> ,run{ Params :  Returns : void} setThreadBlockedHandler{ Params : Handler<BlockedThreadEvent> Returns : void} registerThread{ Params : Thread,ThreadInfo Returns : void} close{ Params :  Returns : void} defaultBlockedThreadHandler{ Params : BlockedThreadEvent Returns : void} ,run ,defaultBlockedThreadHandler ,,,,Handler<BlockedThreadEvent> ,,Handler<BlockedThreadEvent> ,WeakHashMap Timer TimerTask ArrayList BlockedThreadEvent VertxException ,log: , message, stackTrace
vert.x-master,io.vertx.core.impl.btc,BlockedThreadEvent,1,1,0,0,0,false,0 ,0 ,0 ,thread: Thread maxExecTime: long duration: long warningExceptionTime: long ,thread{ Params :  Returns : Thread} maxExecTime{ Params :  Returns : long} duration{ Params :  Returns : long} warningExceptionTime{ Params :  Returns : long} toString{ Params :  Returns : String} ,toString ,,,,,long ,,long ,,thread: 
vert.x-master,io.vertx.core.impl.btc,ThreadInfo,1,1,0,0,1,false,0 ,0 ,0 ,startTime: long maxExecTimeUnit: TimeUnit maxExecTime: long ,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl,ClassLoaderHolder,1,0,0,0,0,false,0 ,0 ,0 ,group: String loader: ClassLoader refCount: int ,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl,CloseFuture,1,1,0,0,0,false,NestedCloseable ,Closeable ,0 ,log: Logger promise: Promise<Void> closed: boolean children: Map<Closeable, CloseFuture> ,add{ Params : Closeable Returns : void} remove{ Params : Closeable Returns : boolean} isClosed{ Params :  Returns : boolean} future{ Params :  Returns : Future<Void>} close{ Params :  Returns : Future<Void>} cascadeClose{ Params :  Returns : void} unregisterFromOwner{ Params :  Returns : void} close{ Params : Promise<Void> Returns : void} ,,,,,Closeable ,Map<Closeable,CloseFuture> ,,Map<Closeable,CloseFuture> ,IllegalStateException IllegalStateException HashMap ArrayList AtomicInteger ,: 
vert.x-master,io.vertx.core.impl,CloseSequence,1,1,0,0,0,false,NestedCloseable ,Closeable ,0 ,current: int idx: int sequence: Closeable steps: List<Promise<Void>> ,started{ Params :  Returns : boolean} progressTo{ Params : int Returns : Future<Void>} tryProgress{ Params :  Returns : void} future{ Params :  Returns : Future<Void>} close{ Params :  Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} ,close ,,,,Closeable ,List<Promise<Void>> ,,List<Promise<Void>> ,IllegalArgumentException ArrayList IllegalArgumentException ,: , 0
vert.x-master,io.vertx.core.impl,ClusterSerializableUtils,1,1,0,0,0,false,0 ,0 ,0 ,,copy{ Params : ClusterSerializable Returns : ClusterSerializable} ,,copy ,,,,,,,RuntimeException ,copy: , 0, buffer
vert.x-master,io.vertx.core.impl,ConcurrentHashSet,1,1,0,0,0,false,0 ,Set<E> ,0 ,map: Map<E, Object> OBJ: Object ,size{ Params :  Returns : int} isEmpty{ Params :  Returns : boolean} contains{ Params : Object Returns : boolean} iterator{ Params :  Returns : Iterator<E>} toArray{ Params :  Returns : Object[]} toArray{ Params : T[] Returns : T[]} add{ Params : E Returns : boolean} remove{ Params : Object Returns : boolean} containsAll{ Params : Collection<?> Returns : boolean} addAll{ Params : Collection<? extends E> Returns : boolean} retainAll{ Params : Collection<?> Returns : boolean} removeAll{ Params : Collection<?> Returns : boolean} clear{ Params :  Returns : void} ,size isEmpty contains iterator toArray toArray add remove containsAll addAll retainAll removeAll clear ,,,,Set ,,,,Object ConcurrentHashMap ConcurrentHashMap UnsupportedOperationException UnsupportedOperationException ,map: 
vert.x-master,io.vertx.core.impl,ContextBase,1,1,1,0,0,false,0 ,ContextInternal ,0 ,log: Logger DISABLE_TIMINGS_PROP_NAME: String DISABLE_TIMINGS: boolean owner: VertxInternal config: JsonObject deployment: Deployment closeFuture: CloseFuture tccl: ClassLoader eventLoop: EventLoop data: ConcurrentMap<Object, Object> localData: ConcurrentMap<Object, Object> exceptionHandler: Handler<Throwable> internalOrderedTasks: TaskQueue internalWorkerPool: WorkerPool workerPool: WorkerPool orderedTasks: TaskQueue ,getDeployment{ Params :  Returns : Deployment} closeFuture{ Params :  Returns : CloseFuture} config{ Params :  Returns : JsonObject} nettyEventLoop{ Params :  Returns : EventLoop} owner{ Params :  Returns : VertxInternal} executeBlockingInternal{ Params : Handler<Promise<T>> Returns : Future<T>} executeBlockingInternal{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} executeBlocking{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} executeBlocking{ Params : Handler<Promise<T>>,TaskQueue Returns : Future<T>} executeBlocking{ Params : ContextInternal,Handler<Promise<T>>,WorkerPool,TaskQueue Returns : Future<T>} tracer{ Params :  Returns : VertxTracer} classLoader{ Params :  Returns : ClassLoader} workerPool{ Params :  Returns : WorkerPool} contextData{ Params :  Returns : ConcurrentMap<Object,Object>} localContextData{ Params :  Returns : ConcurrentMap<Object,Object>} reportException{ Params : Throwable Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : Context} exceptionHandler{ Params :  Returns : Handler<Throwable>} runOnContext{ Params : Handler<Void> Returns : void} runOnContext{ Params : ContextInternal,Handler<Void> Returns : void} execute{ Params : Runnable Returns : void} execute{ Params : ContextInternal,Runnable Returns : void} execute{ Params : T,Handler<T> Returns : void} execute{ Params : ContextInternal,T,Handler<T> Returns : void} emit{ Params : T,Handler<T> Returns : void} emit{ Params : ContextInternal,T,Handler<T> Returns : void} duplicate{ Params :  Returns : ContextInternal} ,closeFuture config executeBlockingInternal executeBlockingInternal executeBlocking executeBlocking tracer classLoader workerPool contextData localContextData exceptionHandler exceptionHandler runOnContext execute execute emit duplicate ,executeBlocking ,runOnContext execute ,runOnContext execute execute emit ,ContextInternal ,,,,JsonObject TaskQueue TaskQueue ConcurrentHashMap ConcurrentHashMap DuplicatedContext ,: , this, argument, task
vert.x-master,io.vertx.core.impl,ContextInternal,2,1,0,0,0,true,0 ,ContextInternal ,0 ,,current{ Params :  Returns : ContextInternal} runOnContext{ Params : Handler<Void> Returns : void} executor{ Params :  Returns : Executor} nettyEventLoop{ Params :  Returns : EventLoop} promise{ Params :  Returns : PromiseInternal<T>} promise{ Params : Promise<T> Returns : PromiseInternal<T>} succeededFuture{ Params :  Returns : Future<T>} succeededFuture{ Params : T Returns : Future<T>} failedFuture{ Params : Throwable Returns : Future<T>} failedFuture{ Params : String Returns : Future<T>} executeBlocking{ Params : Handler<Promise<T>>,TaskQueue Returns : Future<T>} executeBlockingInternal{ Params : Handler<Promise<T>> Returns : Future<T>} executeBlockingInternal{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} getDeployment{ Params :  Returns : Deployment} owner{ Params :  Returns : VertxInternal} inThread{ Params :  Returns : boolean} emit{ Params : T,Handler<T> Returns : void} emit{ Params : Handler<Void> Returns : void} execute{ Params : Handler<Void> Returns : void} execute{ Params : Runnable Returns : void} execute{ Params : T,Handler<T> Returns : void} isRunningOnContext{ Params :  Returns : boolean} dispatch{ Params : Runnable Returns : void} dispatch{ Params : Handler<Void> Returns : void} dispatch{ Params : E,Handler<E> Returns : void} beginDispatch{ Params :  Returns : ContextInternal} endDispatch{ Params : ContextInternal Returns : void} reportException{ Params : Throwable Returns : void} contextData{ Params :  Returns : ConcurrentMap<Object,Object>} get{ Params : Object Returns : T} put{ Params : Object,Object Returns : void} remove{ Params : Object Returns : boolean} localContextData{ Params :  Returns : ConcurrentMap<Object,Object>} getLocal{ Params : Object Returns : T} putLocal{ Params : Object,Object Returns : void} removeLocal{ Params : Object Returns : boolean} classLoader{ Params :  Returns : ClassLoader} workerPool{ Params :  Returns : WorkerPool} tracer{ Params :  Returns : VertxTracer} duplicate{ Params :  Returns : ContextInternal} setPeriodic{ Params : long,Handler<Long> Returns : long} setTimer{ Params : long,Handler<Long> Returns : long} isDeployment{ Params :  Returns : boolean} deploymentID{ Params :  Returns : String} getInstanceCount{ Params :  Returns : int} closeFuture{ Params :  Returns : CloseFuture} addCloseHook{ Params : Closeable Returns : void} removeCloseHook{ Params : Closeable Returns : void} unwrap{ Params :  Returns : ContextInternal} isDuplicate{ Params :  Returns : boolean} ,runOnContext owner get put remove getLocal putLocal removeLocal ,current ,,,,,,,PromiseImpl SucceededFuture SucceededFuture FailedFuture FailedFuture ,: 
vert.x-master,io.vertx.core.impl,ConversionHelper,1,1,0,0,0,false,0 ,0 ,0 ,,toObject{ Params : Object Returns : Object} toJsonElement{ Params : Object Returns : Object} toJsonObject{ Params : Map<String,Object> Returns : JsonObject} toJsonArray{ Params : List<Object> Returns : JsonArray} fromObject{ Params : Object Returns : T} fromJsonObject{ Params : JsonObject Returns : Map<String,Object>} fromJsonArray{ Params : JsonArray Returns : List<Object>} ,,toObject toJsonElement toJsonObject toJsonArray fromObject fromJsonObject fromJsonArray ,,,,,,,LinkedHashMap JsonObject ArrayList JsonArray LinkedHashMap ArrayList ,list: , i
vert.x-master,io.vertx.core.impl.cpu,CpuCoreSensor,1,1,0,0,0,false,0 ,0 ,0 ,CPUS_ALLOWED: String BITS: byte ,availableProcessors{ Params :  Returns : int} determineProcessors{ Params :  Returns : int} readCPUMask{ Params : File Returns : int} ,,availableProcessors determineProcessors readCPUMask ,,,,,,,File FileInputStream InputStreamReader BufferedReader ,line: , i
vert.x-master,io.vertx.core.impl,Deployment,2,1,0,0,0,true,0 ,0 ,0 ,,addChild{ Params : Deployment Returns : boolean} removeChild{ Params : Deployment Returns : void} doUndeploy{ Params : ContextInternal Returns : Future<Void>} config{ Params :  Returns : JsonObject} deploymentID{ Params :  Returns : String} verticleIdentifier{ Params :  Returns : String} deploymentOptions{ Params :  Returns : DeploymentOptions} getContexts{ Params :  Returns : Set<Context>} getVerticles{ Params :  Returns : Set<Verticle>} undeployHandler{ Params : Handler<Void> Returns : void} isChild{ Params :  Returns : boolean} ,,,,,,,,,,line: , i
vert.x-master,io.vertx.core.impl,DeploymentManager,1,1,0,0,0,false,0 ,0 ,VerticleHolder DeploymentImpl ,log: Logger vertx: VertxInternal deployments: Map<String, Deployment> ,generateDeploymentID{ Params :  Returns : String} deployVerticle{ Params : Callable<Verticle>,DeploymentOptions Returns : Future<String>} undeployVerticle{ Params : String Returns : Future<Void>} deployments{ Params :  Returns : Set<String>} getDeployment{ Params : String Returns : Deployment} undeployAll{ Params :  Returns : Future<Void>} reportFailure{ Params : Throwable,ContextInternal,Promise<T> Returns : void} reportResult{ Params : Context,Promise<T>,AsyncResult<T> Returns : void} doDeploy{ Params : DeploymentOptions,Function<Verticle,String>,ContextInternal,ContextInternal,ClassLoader,Callable<Verticle> Returns : Future<Deployment>} doDeploy{ Params : String,DeploymentOptions,ContextInternal,ContextInternal,ClassLoader,Verticle Returns : Future<Deployment>} close{ Params :  Returns : Future<Void>} addVerticle{ Params : VerticleHolder Returns : void} rollback{ Params : ContextInternal,Promise<Deployment>,ContextBase,VerticleHolder,Throwable Returns : void} doUndeployChildren{ Params : ContextInternal Returns : Future<Void>} doUndeploy{ Params : ContextInternal Returns : Future<Void>} verticleIdentifier{ Params :  Returns : String} deploymentOptions{ Params :  Returns : DeploymentOptions} config{ Params :  Returns : JsonObject} addChild{ Params : Deployment Returns : boolean} removeChild{ Params : Deployment Returns : void} getContexts{ Params :  Returns : Set<Context>} getVerticles{ Params :  Returns : Set<Verticle>} undeployHandler{ Params : Handler<Void> Returns : void} isChild{ Params :  Returns : boolean} deploymentID{ Params :  Returns : String} ,verticleIdentifier deploymentOptions config addChild removeChild getContexts getVerticles undeployHandler isChild deploymentID ,,,,,Map<String,Deployment> ,,Map<String,Deployment> ,ConcurrentHashMap IllegalArgumentException IllegalStateException HashSet ArrayList IdentityHashMap DeploymentImpl AtomicInteger AtomicBoolean CloseFuture VerticleHolder CopyOnWriteArrayList ConcurrentHashSet JsonObject ArrayList HashSet IllegalStateException ArrayList HashSet HashSet ,promise: 
vert.x-master,io.vertx.core.impl,VerticleHolder,3,0,0,1,0,false,0 ,0 ,VerticleHolder DeploymentImpl ,verticle: Verticle context: ContextBase workerPool: WorkerPool closeFuture: CloseFuture ,generateDeploymentID{ Params :  Returns : String} deployVerticle{ Params : Callable<Verticle>,DeploymentOptions Returns : Future<String>} undeployVerticle{ Params : String Returns : Future<Void>} deployments{ Params :  Returns : Set<String>} getDeployment{ Params : String Returns : Deployment} undeployAll{ Params :  Returns : Future<Void>} reportFailure{ Params : Throwable,ContextInternal,Promise<T> Returns : void} reportResult{ Params : Context,Promise<T>,AsyncResult<T> Returns : void} doDeploy{ Params : DeploymentOptions,Function<Verticle,String>,ContextInternal,ContextInternal,ClassLoader,Callable<Verticle> Returns : Future<Deployment>} doDeploy{ Params : String,DeploymentOptions,ContextInternal,ContextInternal,ClassLoader,Verticle Returns : Future<Deployment>} close{ Params :  Returns : Future<Void>} addVerticle{ Params : VerticleHolder Returns : void} rollback{ Params : ContextInternal,Promise<Deployment>,ContextBase,VerticleHolder,Throwable Returns : void} doUndeployChildren{ Params : ContextInternal Returns : Future<Void>} doUndeploy{ Params : ContextInternal Returns : Future<Void>} verticleIdentifier{ Params :  Returns : String} deploymentOptions{ Params :  Returns : DeploymentOptions} config{ Params :  Returns : JsonObject} addChild{ Params : Deployment Returns : boolean} removeChild{ Params : Deployment Returns : void} getContexts{ Params :  Returns : Set<Context>} getVerticles{ Params :  Returns : Set<Verticle>} undeployHandler{ Params : Handler<Void> Returns : void} isChild{ Params :  Returns : boolean} deploymentID{ Params :  Returns : String} ,verticleIdentifier deploymentOptions config addChild removeChild getContexts getVerticles undeployHandler isChild deploymentID ,,,,,,,,,workerPool: 
vert.x-master,io.vertx.core.impl,DeploymentImpl,3,2,0,0,0,false,0 ,0 ,VerticleHolder DeploymentImpl ,ST_DEPLOYED: int parent: Deployment deploymentID: String conf: JsonObject verticleIdentifier: String verticles: List<VerticleHolder> children: Set<Deployment> options: DeploymentOptions undeployHandler: Handler<Void> status: int child: boolean ,generateDeploymentID{ Params :  Returns : String} deployVerticle{ Params : Callable<Verticle>,DeploymentOptions Returns : Future<String>} undeployVerticle{ Params : String Returns : Future<Void>} deployments{ Params :  Returns : Set<String>} getDeployment{ Params : String Returns : Deployment} undeployAll{ Params :  Returns : Future<Void>} reportFailure{ Params : Throwable,ContextInternal,Promise<T> Returns : void} reportResult{ Params : Context,Promise<T>,AsyncResult<T> Returns : void} doDeploy{ Params : DeploymentOptions,Function<Verticle,String>,ContextInternal,ContextInternal,ClassLoader,Callable<Verticle> Returns : Future<Deployment>} doDeploy{ Params : String,DeploymentOptions,ContextInternal,ContextInternal,ClassLoader,Verticle Returns : Future<Deployment>} close{ Params :  Returns : Future<Void>} addVerticle{ Params : VerticleHolder Returns : void} rollback{ Params : ContextInternal,Promise<Deployment>,ContextBase,VerticleHolder,Throwable Returns : void} doUndeployChildren{ Params : ContextInternal Returns : Future<Void>} doUndeploy{ Params : ContextInternal Returns : Future<Void>} verticleIdentifier{ Params :  Returns : String} deploymentOptions{ Params :  Returns : DeploymentOptions} config{ Params :  Returns : JsonObject} addChild{ Params : Deployment Returns : boolean} removeChild{ Params : Deployment Returns : void} getContexts{ Params :  Returns : Set<Context>} getVerticles{ Params :  Returns : Set<Verticle>} undeployHandler{ Params : Handler<Void> Returns : void} isChild{ Params :  Returns : boolean} deploymentID{ Params :  Returns : String} ,verticleIdentifier deploymentOptions config addChild removeChild getContexts getVerticles undeployHandler isChild deploymentID ,,,,Deployment ,boolean ,,boolean ,CopyOnWriteArrayList ConcurrentHashSet JsonObject ArrayList HashSet IllegalStateException ArrayList HashSet HashSet ,handler: , null
vert.x-master,io.vertx.core.impl,DuplicatedContext,1,0,0,0,0,false,0 ,ContextInternal ,0 ,delegate: ContextBase localData: ConcurrentMap<Object, Object> ,inThread{ Params :  Returns : boolean} closeFuture{ Params :  Returns : CloseFuture} tracer{ Params :  Returns : VertxTracer} config{ Params :  Returns : JsonObject} exceptionHandler{ Params : Handler<Throwable> Returns : Context} executor{ Params :  Returns : Executor} exceptionHandler{ Params :  Returns : Handler<Throwable>} nettyEventLoop{ Params :  Returns : EventLoop} getDeployment{ Params :  Returns : Deployment} owner{ Params :  Returns : VertxInternal} classLoader{ Params :  Returns : ClassLoader} workerPool{ Params :  Returns : WorkerPool} reportException{ Params : Throwable Returns : void} contextData{ Params :  Returns : ConcurrentMap<Object,Object>} localContextData{ Params :  Returns : ConcurrentMap<Object,Object>} executeBlockingInternal{ Params : Handler<Promise<T>> Returns : Future<T>} executeBlockingInternal{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} executeBlocking{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} executeBlocking{ Params : Handler<Promise<T>>,TaskQueue Returns : Future<T>} runOnContext{ Params : Handler<Void> Returns : void} execute{ Params : T,Handler<T> Returns : void} emit{ Params : T,Handler<T> Returns : void} execute{ Params : Runnable Returns : void} isEventLoopContext{ Params :  Returns : boolean} isWorkerContext{ Params :  Returns : boolean} duplicate{ Params :  Returns : ContextInternal} unwrap{ Params :  Returns : ContextInternal} isDuplicate{ Params :  Returns : boolean} ,inThread closeFuture tracer config exceptionHandler executor exceptionHandler nettyEventLoop getDeployment owner classLoader workerPool reportException contextData localContextData executeBlockingInternal executeBlockingInternal executeBlocking executeBlocking runOnContext execute emit execute isEventLoopContext isWorkerContext duplicate unwrap isDuplicate ,,closeFuture tracer config exceptionHandler exceptionHandler nettyEventLoop getDeployment owner classLoader reportException contextData localContextData executeBlockingInternal executeBlockingInternal executeBlocking executeBlocking runOnContext execute ,,ContextInternal ,ConcurrentMap<Object,Object> ,,ConcurrentMap<Object,Object> ,ConcurrentHashMap DuplicatedContext ,delegate: 
vert.x-master,io.vertx.core.impl,EventLoopContext,1,1,0,0,0,false,ContextBase ,0 ,0 ,,executor{ Params :  Returns : Executor} runOnContext{ Params : ContextInternal,Handler<Void> Returns : void} emit{ Params : ContextInternal,T,Handler<T> Returns : void} execute{ Params : ContextInternal,T,Handler<T> Returns : void} execute{ Params : ContextInternal,Runnable Returns : void} isEventLoopContext{ Params :  Returns : boolean} isWorkerContext{ Params :  Returns : boolean} inThread{ Params :  Returns : boolean} ,executor runOnContext emit execute execute isEventLoopContext isWorkerContext inThread ,,,,,,,,,: 
vert.x-master,io.vertx.core.impl,FailoverCompleteHandler,2,1,0,0,0,true,ContextBase ,0 ,0 ,,handle{ Params : String,JsonObject,boolean Returns : void} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.impl.future,CompositeFutureImpl,1,1,0,0,0,false,FutureImpl<CompositeFuture> ,CompositeFuture ,0 ,ALL: Function<CompositeFuture, Object> results: Future count: int ,all{ Params : Future<?> Returns : CompositeFuture} any{ Params : Future<?> Returns : CompositeFuture} join{ Params : Future<?> Returns : CompositeFuture} join{ Params : Function<CompositeFuture,Object>,Future<?> Returns : CompositeFuture} cause{ Params : int Returns : Throwable} succeeded{ Params : int Returns : boolean} failed{ Params : int Returns : boolean} isComplete{ Params : int Returns : boolean} resultAt{ Params : int Returns : T} future{ Params : int Returns : Future<T>} size{ Params :  Returns : int} trySucceed{ Params :  Returns : void} fail{ Params : Throwable Returns : void} complete{ Params : Object Returns : void} onComplete{ Params : Handler<AsyncResult<CompositeFuture>> Returns : CompositeFuture} onSuccess{ Params : Handler<CompositeFuture> Returns : CompositeFuture} onFailure{ Params : Handler<Throwable> Returns : CompositeFuture} formatValue{ Params : Object,StringBuilder Returns : void} ,cause succeeded failed isComplete resultAt size onComplete onSuccess onFailure formatValue ,all any join join ,,,CompositeFuture ,int ,,int ,CompositeFutureImpl CompositeFutureImpl CompositeFutureImpl IndexOutOfBoundsException ,sb: , ')'
vert.x-master,io.vertx.core.impl.future,Composition,1,0,0,0,0,false,Operation<U> ,Listener<T> ,0 ,successMapper: Function<T, Future<U>> failureMapper: Function<Throwable, Future<U>> ,onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} newListener{ Params :  Returns : Listener<U>} onSuccess{ Params : U Returns : void} onFailure{ Params : Throwable Returns : void} ,onSuccess onFailure onSuccess onFailure ,,,,Listener ,Function<Throwable,Future<U>> ,,Function<Throwable,Future<U>> ,Listener ,: , failure
vert.x-master,io.vertx.core.impl.future,Eventually,1,0,0,0,0,false,Operation<T> ,Listener<T> ,0 ,mapper: Function<Void, Future<U>> ,onSuccess{ Params : T Returns : void} onSuccess{ Params : U Returns : void} onFailure{ Params : Throwable Returns : void} onFailure{ Params : Throwable Returns : void} onSuccess{ Params : U Returns : void} onFailure{ Params : Throwable Returns : void} ,onSuccess onSuccess onFailure onFailure onSuccess onFailure ,,,,Listener ,Function<Void,Future<U>> ,,Function<Void,Future<U>> ,Listener Listener ,: , failure
vert.x-master,io.vertx.core.impl.future,FailedFuture,1,1,0,0,1,false,FutureBase<T> ,0 ,0 ,cause: Throwable ,isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} onSuccess{ Params : Handler<T> Returns : Future<T>} onFailure{ Params : Handler<Throwable> Returns : Future<T>} addListener{ Params : Listener<T> Returns : void} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} map{ Params : Function<T,U> Returns : Future<U>} map{ Params : V Returns : Future<V>} otherwise{ Params : T Returns : Future<T>} toString{ Params :  Returns : String} ,isComplete onComplete onSuccess onFailure addListener result cause succeeded failed map map otherwise toString ,,,,,Throwable ,,Throwable ,NoStackTraceThrowable NoStackTraceThrowable SucceededFuture ,cause: 
vert.x-master,io.vertx.core.impl.future,FixedMapping,1,0,0,0,0,false,Operation<U> ,Listener<T> ,0 ,value: U ,onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} ,onSuccess onFailure ,,,,Listener ,U ,,U ,,: , failure
vert.x-master,io.vertx.core.impl.future,FixedOtherwise,1,0,0,0,0,false,Operation<T> ,Listener<T> ,0 ,value: T ,onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} ,onSuccess onFailure ,,,,Listener ,T ,,T ,,: , value
vert.x-master,io.vertx.core.impl.future,FutureBase,1,1,1,0,0,false,0 ,FutureInternal<T> ,0 ,context: ContextInternal ,context{ Params :  Returns : ContextInternal} emitSuccess{ Params : T,Listener<T> Returns : void} emitFailure{ Params : Throwable,Listener<T> Returns : void} compose{ Params : Function<T,Future<U>>,Function<Throwable,Future<U>> Returns : Future<U>} transform{ Params : Function<AsyncResult<T>,Future<U>> Returns : Future<U>} eventually{ Params : Function<Void,Future<U>> Returns : Future<T>} map{ Params : Function<T,U> Returns : Future<U>} map{ Params : V Returns : Future<V>} otherwise{ Params : Function<Throwable,T> Returns : Future<T>} otherwise{ Params : T Returns : Future<T>} ,compose transform eventually map map otherwise otherwise ,,context emitSuccess emitFailure ,,FutureInternal ,,,,Composition Transformation Eventually Mapping FixedMapping Otherwise FixedOtherwise ,: , operation
vert.x-master,io.vertx.core.impl.future,FutureImpl,1,0,0,0,0,false,FutureBase<T> ,0 ,ListenerArray CauseHolder ,NULL_VALUE: Object value: Object listener: Listener<T> ,result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} isComplete{ Params :  Returns : boolean} onSuccess{ Params : Handler<T> Returns : Future<T>} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} onFailure{ Params : Handler<Throwable> Returns : Future<T>} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} addListener{ Params : Listener<T> Returns : void} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} toString{ Params :  Returns : String} formatValue{ Params : Object,StringBuilder Returns : void} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} ,onSuccess onSuccess onFailure onFailure onSuccess onFailure onComplete onSuccess onFailure addListener toString onSuccess onFailure ,,,,,Listener<T> ,,Listener<T> ,Object Listener Listener Listener ListenerArray NoStackTraceThrowable CauseHolder StringBuilder ,sb: , value
vert.x-master,io.vertx.core.impl.future,ListenerArray,3,2,0,1,0,false,FutureBase<T> ,0 ,ListenerArray CauseHolder ,,result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} isComplete{ Params :  Returns : boolean} onSuccess{ Params : Handler<T> Returns : Future<T>} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} onFailure{ Params : Handler<Throwable> Returns : Future<T>} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} addListener{ Params : Listener<T> Returns : void} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} toString{ Params :  Returns : String} formatValue{ Params : Object,StringBuilder Returns : void} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} ,onSuccess onSuccess onFailure onFailure onSuccess onFailure onComplete onSuccess onFailure addListener toString onSuccess onFailure ,,,,Listener ,,,,,handler: , failure
vert.x-master,io.vertx.core.impl.future,CauseHolder,3,2,0,1,0,false,FutureBase<T> ,0 ,ListenerArray CauseHolder ,cause: Throwable ,result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} isComplete{ Params :  Returns : boolean} onSuccess{ Params : Handler<T> Returns : Future<T>} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} onFailure{ Params : Handler<Throwable> Returns : Future<T>} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} addListener{ Params : Listener<T> Returns : void} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} toString{ Params :  Returns : String} formatValue{ Params : Object,StringBuilder Returns : void} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} ,onSuccess onSuccess onFailure onFailure onSuccess onFailure onComplete onSuccess onFailure addListener toString onSuccess onFailure ,,,,,Throwable ,,Throwable ,,null
vert.x-master,io.vertx.core.impl.future,FutureInternal,2,1,0,0,0,true,FutureBase<T> ,0 ,0 ,,context{ Params :  Returns : ContextInternal} addListener{ Params : Listener<T> Returns : void} ,,,,,,,,,,handler: , failure
vert.x-master,io.vertx.core.impl.future,Listener,2,1,0,0,0,true,FutureBase<T> ,0 ,0 ,,onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} ,,,,,,,,,,handler: , failure
vert.x-master,io.vertx.core.impl.future,Mapping,1,0,0,0,0,false,Operation<U> ,Listener<T> ,0 ,successMapper: Function<T, U> ,onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} ,onSuccess onFailure ,,,,Listener ,Function<T,U> ,,Function<T,U> ,,: , failure
vert.x-master,io.vertx.core.impl.future,Operation,1,0,1,0,0,false,FutureImpl<T> ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.future,Otherwise,1,0,0,0,0,false,Operation<T> ,Listener<T> ,0 ,mapper: Function<Throwable, T> ,onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} ,onSuccess onFailure ,,,,Listener ,Function<Throwable,T> ,,Function<Throwable,T> ,,: , result
vert.x-master,io.vertx.core.impl.future,PromiseImpl,1,1,0,0,1,false,FutureImpl<T> ,PromiseInternal<T> Listener<T> ,0 ,,handle{ Params : AsyncResult<T> Returns : void} onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} future{ Params :  Returns : Future<T>} operationComplete{ Params : io.netty.util.concurrent.Future<T> Returns : void} ,onSuccess onFailure future operationComplete ,,,,PromiseInternal Listener ,,,,,future: 
vert.x-master,io.vertx.core.impl.future,PromiseInternal,2,1,0,0,0,true,FutureImpl<T> ,PromiseInternal<T> Listener<T> ,0 ,,context{ Params :  Returns : ContextInternal} ,,,,,,,,,,future: 
vert.x-master,io.vertx.core.impl.future,SucceededFuture,1,1,0,0,1,false,FutureBase<T> ,0 ,0 ,EMPTY: SucceededFuture result: T ,isComplete{ Params :  Returns : boolean} onSuccess{ Params : Handler<T> Returns : Future<T>} onFailure{ Params : Handler<Throwable> Returns : Future<T>} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} addListener{ Params : Listener<T> Returns : void} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} map{ Params : V Returns : Future<V>} otherwise{ Params : Function<Throwable,T> Returns : Future<T>} otherwise{ Params : T Returns : Future<T>} toString{ Params :  Returns : String} ,isComplete onSuccess onFailure onComplete addListener result cause succeeded failed map otherwise otherwise toString ,,,,,T ,,T ,SucceededFuture SucceededFuture ,Objects: , mapper, "No null mapper accepted"
vert.x-master,io.vertx.core.impl.future,Transformation,1,0,0,0,0,false,Operation<U> ,Listener<T> ,0 ,future: Future<T> mapper: Function<AsyncResult<T>, Future<U>> ,onSuccess{ Params : T Returns : void} onFailure{ Params : Throwable Returns : void} newListener{ Params :  Returns : Listener<U>} onSuccess{ Params : U Returns : void} onFailure{ Params : Throwable Returns : void} ,onSuccess onFailure onSuccess onFailure ,,,,Listener ,Function<AsyncResult<T>,Future<U>> ,,Function<AsyncResult<T>,Future<U>> ,Listener ,: , failure
vert.x-master,io.vertx.core.impl,HAManager,1,1,0,0,0,false,0 ,0 ,0 ,log: Logger QUORUM_CHECK_PERIOD: long vertx: VertxInternal deploymentManager: DeploymentManager verticleFactoryManager: VerticleManager clusterManager: ClusterManager quorumSize: int group: String haInfo: JsonObject clusterMap: Map<String, String> nodeID: String toDeployOnQuorum: Queue<Runnable> quorumTimerID: long checkQuorumTimerID: long attainedQuorum: boolean failoverCompleteHandler: FailoverCompleteHandler failDuringFailover: boolean stopped: boolean killed: boolean ,init{ Params :  Returns : void} nodeAdded{ Params : String Returns : void} nodeLeft{ Params : String Returns : void} removeFromHA{ Params : String Returns : void} addDataToAHAInfo{ Params : String,JsonObject Returns : void} deployVerticle{ Params : String,DeploymentOptions,Handler<AsyncResult<String>> Returns : void} stop{ Params :  Returns : void} simulateKill{ Params :  Returns : void} setFailoverCompleteHandler{ Params : FailoverCompleteHandler Returns : void} isKilled{ Params :  Returns : boolean} failDuringFailover{ Params : boolean Returns : void} doDeployVerticle{ Params : String,DeploymentOptions,Handler<AsyncResult<String>> Returns : void} nodeAdded{ Params : String Returns : void} nodeLeft{ Params : String Returns : void} addHaInfoIfLost{ Params :  Returns : void} checkQuorumWhenAdded{ Params : String,long Returns : void} checkQuorum{ Params :  Returns : void} addToHA{ Params : String,String,DeploymentOptions Returns : void} addToHADeployList{ Params : String,DeploymentOptions,Handler<AsyncResult<String>> Returns : void} checkHADeployments{ Params :  Returns : void} undeployHADeployments{ Params :  Returns : void} deployHADeployments{ Params :  Returns : void} checkFailover{ Params : String,JsonObject Returns : void} runOnContextAndWait{ Params : Runnable Returns : void} processFailover{ Params : JsonObject Returns : void} chooseHashedNode{ Params : String,int Returns : String} ,nodeAdded nodeLeft ,,,,,boolean ,,boolean ,ConcurrentLinkedQueue JsonObject JsonArray NodeListener CountDownLatch JsonObject JsonObject JsonObject JsonObject CountDownLatch VertxException CountDownLatch AtomicReference DeploymentOptions VertxException VertxException IllegalStateException ArrayList JsonObject ,matchingMembers: , (int) lpos
vert.x-master,io.vertx.core.impl,IsolatingClassLoader,1,1,0,0,0,false,URLClassLoader ,0 ,0 ,closed: boolean isolatedClasses: List<String> ,loadClass{ Params : String,boolean Returns : Class<?>} isIsolatedClass{ Params : String Returns : boolean} getResource{ Params : String Returns : URL} getResources{ Params : String Returns : Enumeration<URL>} close{ Params :  Returns : void} isClosed{ Params :  Returns : boolean} isVertxOrSystemClass{ Params : String Returns : boolean} ,loadClass getResource getResources close ,,,,,List<String> ,,List<String> ,,name: , "com.fasterxml.jackson"
vert.x-master,io.vertx.core.impl,JavaVerticleFactory,1,1,0,0,0,false,0 ,VerticleFactory ,0 ,,prefix{ Params :  Returns : String} createVerticle{ Params : String,ClassLoader,Promise<Callable<Verticle>> Returns : void} ,prefix createVerticle ,,,,VerticleFactory ,,,,CompilingClassLoader ,promise: , clazz::newInstance
vert.x-master,io.vertx.core.impl.launcher,CommandLineUtils,1,1,0,0,0,false,0 ,0 ,0 ,,getJar{ Params :  Returns : String} getCommand{ Params :  Returns : String} getFirstSegmentOfCommand{ Params :  Returns : String} ,,getJar getCommand getFirstSegmentOfCommand ,,,,,,,,cmd: , " "
vert.x-master,io.vertx.core.impl.launcher.commands,BareCommand,1,1,0,0,0,false,ClasspathHandler ,0 ,0 ,VERTX_OPTIONS_PROP_PREFIX: String VERTX_EVENTBUS_PROP_PREFIX: String DEPLOYMENT_OPTIONS_PROP_PREFIX: String METRICS_OPTIONS_PROP_PREFIX: String vertx: Vertx clusterPort: int clusterHost: String clusterPublicPort: int clusterPublicHost: String quorum: int haGroup: String vertxOptions: String options: VertxOptions finalAction: Runnable configureFromSystemProperties: ThreadLocal<Logger> ,setQuorum{ Params : int Returns : void} setHAGroup{ Params : String Returns : void} setClusterPort{ Params : int Returns : void} setClusterHost{ Params : String Returns : void} setClusterPublicPort{ Params : int Returns : void} setClusterPublicHost{ Params : String Returns : void} setVertxOptions{ Params : String Returns : void} isClustered{ Params :  Returns : boolean} getHA{ Params :  Returns : boolean} run{ Params :  Returns : void} run{ Params : Runnable Returns : void} startVertx{ Params :  Returns : Vertx} getJsonFromFileOrString{ Params : String,String Returns : JsonObject} afterStartingVertx{ Params : Vertx Returns : void} beforeStartingVertx{ Params : VertxOptions Returns : void} getEventBusOptions{ Params :  Returns : EventBusOptions} getEventBusOptions{ Params : JsonObject Returns : EventBusOptions} configureFromSystemProperties{ Params : Object,String Returns : void} getSetter{ Params : String,Class<?> Returns : Method} addShutdownHook{ Params : Vertx,Logger,Runnable Returns : void} getTerminationRunnable{ Params : Vertx,Logger,Runnable Returns : Runnable} getDefaultAddress{ Params :  Returns : String} setExecutionContext{ Params : ExecutionContext Returns : void} vertx{ Params :  Returns : Vertx} ,run ,configureFromSystemProperties getSetter addShutdownHook getTerminationRunnable ,,,,,,,VertxBuilder VertxBuilder CountDownLatch AtomicReference Scanner File JsonObject JsonObject EventBusOptions EventBusOptions ThreadLocal VertxException Thread CountDownLatch IllegalStateException ,AddressHelper: 
vert.x-master,io.vertx.core.impl.launcher.commands,BareCommandFactory,1,1,0,0,0,false,DefaultCommandFactory<BareCommand> ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher.commands,ClasspathHandler,1,1,1,0,0,false,DefaultCommand ,0 ,0 ,PATH_SEP: String log: Logger classpath: List<String> manager: Object classloader: ClassLoader ,setClasspath{ Params : String Returns : void} createClassloader{ Params :  Returns : ClassLoader} newInstance{ Params :  Returns : Object} create{ Params : VertxBuilder Returns : Vertx} createClustered{ Params : VertxBuilder Returns : Future<Vertx>} deploy{ Params : String,Vertx,DeploymentOptions,Handler<AsyncResult<String>> Returns : void} ,,,,,,ClassLoader ,,ClassLoader ,File IllegalStateException URLClassLoader IllegalStateException ,Thread: 
vert.x-master,io.vertx.core.impl.launcher.commands,ExecUtils,1,1,0,0,0,false,0 ,0 ,0 ,SINGLE_QUOTE: String DOUBLE_QUOTE: String VERTX_INITIALIZATION_EXIT_CODE: int VERTX_DEPLOYMENT_EXIT_CODE: int PROCESS_ERROR_EXIT_CODE: int SYSTEM_CONFIGURATION_EXIT_CODE: int osName: String ,quoteArgument{ Params : String Returns : String} addArgument{ Params : List<String>,String Returns : void} isWindows{ Params :  Returns : boolean} isLinux{ Params :  Returns : boolean} exit{ Params : int Returns : void} exitBecauseOfVertxInitializationIssue{ Params :  Returns : void} exitBecauseOfVertxDeploymentIssue{ Params :  Returns : void} exitBecauseOfProcessIssue{ Params :  Returns : void} exitBecauseOfSystemConfigurationIssue{ Params :  Returns : void} ,,quoteArgument addArgument isWindows isLinux exit exitBecauseOfVertxInitializationIssue exitBecauseOfVertxDeploymentIssue exitBecauseOfProcessIssue exitBecauseOfSystemConfigurationIssue ,,,,,,,StringBuilder IllegalArgumentException ,: , SYSTEM_CONFIGURATION_EXIT_CODE
vert.x-master,io.vertx.core.impl.launcher.commands,FileSelector,1,1,0,0,1,false,0 ,0 ,0 ,,separatorPatternStartSlashMismatch{ Params : String,String,String Returns : boolean} matchPath{ Params : String,String Returns : boolean} matchPath{ Params : String,String,boolean Returns : boolean} matchPath{ Params : String,String,String,boolean Returns : boolean} matchPathPattern{ Params : String,String,String,boolean Returns : boolean} matchPathPattern{ Params : String[],String[],boolean Returns : boolean} match{ Params : String,String Returns : boolean} match{ Params : String,String,boolean Returns : boolean} match{ Params : char[],char[],boolean Returns : boolean} checkOnlyStartsLeft{ Params : char[],int,int Returns : boolean} equals{ Params : char,char,boolean Returns : boolean} tokenizePathToString{ Params : String,String Returns : String[]} ,,separatorPatternStartSlashMismatch matchPath matchPath matchPath matchPathPattern matchPathPattern match match match checkOnlyStartsLeft equals tokenizePathToString ,,,,,,,ArrayList StringTokenizer ,ret: , new String[0]
vert.x-master,io.vertx.core.impl.launcher.commands,ListCommand,1,1,0,0,0,false,DefaultCommand ,0 ,0 ,PS: Pattern FAT_JAR_EXTRACTION: Pattern VERTICLE_EXTRACTION: Pattern ,run{ Params :  Returns : void} dumpFoundVertxApplications{ Params : List<String> Returns : void} extractApplicationDetails{ Params : String Returns : String} ,run ,extractApplicationDetails ,,,,,,,ArrayList ProcessBuilder BufferedReader InputStreamReader ,matcher: , 1
vert.x-master,io.vertx.core.impl.launcher.commands,ListCommandFactory,1,1,0,0,0,false,DefaultCommandFactory<ListCommand> ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher.commands,RunCommand,1,1,0,0,0,false,BareCommand ,Closeable ,0 ,deploymentOptions: DeploymentOptions cluster: boolean ha: boolean instances: int config: String worker: boolean mainVerticle: String redeploy: List<String> vertxApplicationBackgroundId: String onRedeployCommand: String watcher: Watcher redeployScanPeriod: long redeployGracePeriod: long redeployTerminationPeriod: long ,setHighAvailability{ Params : boolean Returns : void} setCluster{ Params : boolean Returns : void} setWorker{ Params : boolean Returns : void} setInstances{ Params : int Returns : void} setConfig{ Params : String Returns : void} setMainVerticle{ Params : String Returns : void} setRedeploy{ Params : List<String> Returns : void} setOnRedeployCommandOld{ Params : String Returns : void} setOnRedeployCommand{ Params : String Returns : void} setRedeployScanPeriod{ Params : long Returns : void} setRedeployGracePeriod{ Params : long Returns : void} setRedeployStopWaitingTime{ Params : long Returns : void} setUp{ Params : ExecutionContext Returns : void} isClustered{ Params :  Returns : boolean} getHA{ Params :  Returns : boolean} run{ Params :  Returns : void} initializeRedeployment{ Params :  Returns : void} run{ Params :  Returns : void} shutdownRedeployment{ Params :  Returns : void} stopBackgroundApplication{ Params : Handler<Void> Returns : void} startAsBackgroundApplication{ Params : Handler<Void> Returns : void} deploy{ Params :  Returns : void} handleDeployFailed{ Params : Throwable Returns : void} getConfiguration{ Params :  Returns : JsonObject} beforeDeployingVerticle{ Params : DeploymentOptions Returns : void} afterConfigParsed{ Params : JsonObject Returns : void} beforeStoppingVertx{ Params : Vertx Returns : void} afterStoppingVertx{ Params :  Returns : void} close{ Params : Promise<Void> Returns : void} ,setUp isClustered getHA run close ,,,,Closeable ,long ,,long ,CLIException CLIException JsonObject DeploymentOptions IllegalStateException Watcher Thread ArrayList ,completion: , e
vert.x-master,io.vertx.core.impl.launcher.commands,RunCommandFactory,1,1,0,0,0,false,DefaultCommandFactory<RunCommand> ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher.commands,StartCommand,1,1,0,0,0,false,DefaultCommand ,0 ,0 ,id: String launcher: String redirect: boolean jvmOptions: String ,setApplicationId{ Params : String Returns : void} setJavaOptions{ Params : String Returns : void} setLauncherClass{ Params : String Returns : void} setRedirect{ Params : boolean Returns : void} run{ Params :  Returns : void} addJavaCommand{ Params : List<String> Returns : void} getJava{ Params :  Returns : File} isLaunchedAsFatJar{ Params :  Returns : boolean} getArguments{ Params :  Returns : List<String>} getId{ Params :  Returns : String} ,run ,,,,,String ,,String ,ArrayList ProcessBuilder File File File ,UUID: 
vert.x-master,io.vertx.core.impl.launcher.commands,StartCommandFactory,1,1,0,0,0,false,DefaultCommandFactory<StartCommand> ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher.commands,StopCommand,1,1,0,0,0,false,DefaultCommand ,0 ,0 ,id: String redeploy: boolean PS: Pattern ,setApplicationId{ Params : String Returns : void} setRedeploy{ Params : boolean Returns : void} run{ Params :  Returns : void} terminateLinuxApplication{ Params :  Returns : void} terminateWindowsApplication{ Params :  Returns : void} pid{ Params :  Returns : String} ,run ,,,,,,,,ArrayList ProcessBuilder ProcessBuilder ProcessBuilder BufferedReader InputStreamReader ,e: , out
vert.x-master,io.vertx.core.impl.launcher.commands,StopCommandFactory,1,1,0,0,0,false,DefaultCommandFactory<StopCommand> ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher.commands,VersionCommand,1,1,0,0,0,false,DefaultCommand ,0 ,0 ,log: Logger version: String ,run{ Params :  Returns : void} getVersion{ Params :  Returns : String} ,run ,getVersion ,,,,,,,IllegalStateException Scanner IllegalStateException ,e: 
vert.x-master,io.vertx.core.impl.launcher.commands,VersionCommandFactory,1,1,0,0,0,false,DefaultCommandFactory<VersionCommand> ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher.commands,VertxIsolatedDeployer,1,1,0,0,0,false,0 ,0 ,0 ,log: Logger deploymentId: String vertx: Vertx ,deploy{ Params : String,Vertx,DeploymentOptions,Handler<AsyncResult<String>> Returns : void} undeploy{ Params : Handler<AsyncResult<Void>> Returns : void} createHandler{ Params : String,Handler<AsyncResult<String>> Returns : Handler<AsyncResult<String>>} ,,,,,,Vertx ,,Vertx ,,completionHandler: , res
vert.x-master,io.vertx.core.impl.launcher.commands,Watcher,1,1,0,0,0,false,0 ,Runnable ,FileInfo ,LOGGER: Logger gracePeriod: long fileMap: Map<File, Map<File, FileInfo>> filesToWatch: Set<File> scanPeriod: long roots: List<File> cwd: File lastChange: long includes: List<String> deploy: Handler<Handler<Void>> undeploy: Handler<Handler<Void>> cmd: String closed: boolean ,extractRoots{ Params : File,List<String> Returns : List<File>} sanitizeIncludePatterns{ Params : List<String> Returns : List<String>} addFilesToWatchedList{ Params : List<File> Returns : void} addFileToWatchedList{ Params : File Returns : void} changesHaveOccurred{ Params :  Returns : boolean} match{ Params : File Returns : boolean} watch{ Params :  Returns : Watcher} close{ Params :  Returns : void} run{ Params :  Returns : void} trigger{ Params :  Returns : void} executeUserCommand{ Params : Handler<Void> Returns : void} ,run ,extractRoots ,,,Runnable ,boolean ,,boolean ,LinkedHashMap HashSet File File HashMap FileInfo FileInfo HashSet LinkedHashMap IllegalStateException HashMap FileInfo FileInfo Thread ArrayList ProcessBuilder ,onCompletion: , null
vert.x-master,io.vertx.core.impl.launcher.commands,FileInfo,3,2,0,1,1,false,0 ,Runnable ,FileInfo ,lastModified: long length: long ,extractRoots{ Params : File,List<String> Returns : List<File>} sanitizeIncludePatterns{ Params : List<String> Returns : List<String>} addFilesToWatchedList{ Params : List<File> Returns : void} addFileToWatchedList{ Params : File Returns : void} changesHaveOccurred{ Params :  Returns : boolean} match{ Params : File Returns : boolean} watch{ Params :  Returns : Watcher} close{ Params :  Returns : void} run{ Params :  Returns : void} trigger{ Params :  Returns : void} executeUserCommand{ Params : Handler<Void> Returns : void} ,run ,extractRoots ,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher,ServiceCommandFactoryLoader,1,1,0,0,0,false,0 ,CommandFactoryLookup ,0 ,commands: Collection<CommandFactory> ,lookup{ Params :  Returns : Collection<CommandFactory<?>>} ,lookup ,,,,CommandFactoryLookup ,Collection<CommandFactory> ,,Collection<CommandFactory> ,ArrayList ,commands: 
vert.x-master,io.vertx.core.impl.launcher,VertxCommandLauncher,1,1,0,0,0,false,UsageMessageFormatter ,0 ,CommandRegistration ,PROCESS_ARGS: List<String> lookups: List<CommandFactoryLookup> commandByName: Map<String, CommandRegistration> main: Object ,getProcessArguments{ Params :  Returns : List<String>} addCommand{ Params : Command Returns : void} getCommand{ Params :  Returns : Command} getCommands{ Params :  Returns : List<Command>} load{ Params :  Returns : void} register{ Params : CommandFactory Returns : VertxCommandLauncher} register{ Params : Class<? extends Command> Returns : VertxCommandLauncher} register{ Params : Class<? extends Command>,Supplier<? extends Command> Returns : VertxCommandLauncher} unregister{ Params : String Returns : VertxCommandLauncher} getCommandNames{ Params :  Returns : Collection<String>} getNewCommandInstance{ Params : String,CommandLine Returns : Command} getExistingCommandInstance{ Params : String Returns : Command} execute{ Params : String,String Returns : void} printCommandUsage{ Params : CLI Returns : void} printGenericExecutionError{ Params : CLI,CLIException Returns : void} printSpecificException{ Params : CLI,Exception Returns : void} printCommandNotFound{ Params : String Returns : void} printGlobalUsage{ Params :  Returns : void} getCommandLinePrefix{ Params :  Returns : String} isAskingForHelp{ Params : String Returns : boolean} isAskingForVersion{ Params : String Returns : boolean} dispatch{ Params : String[] Returns : void} dispatch{ Params : Object,String[] Returns : void} getDefaultCommand{ Params :  Returns : String} getCommandFromManifest{ Params :  Returns : String} getFromManifest{ Params : String Returns : String} getPrintStream{ Params :  Returns : PrintStream} getMainVerticle{ Params :  Returns : String} resetProcessArguments{ Params :  Returns : void} ,,getProcessArguments isAskingForHelp isAskingForVersion resetProcessArguments ,,,,,,,ArrayList ServiceCommandFactoryLoader ArrayList TreeMap CommandRegistration CommandRegistration CommandRegistration DefaultCommandFactory CommandRegistration DefaultCommandFactory CommandRegistration ExecutionContext StringBuilder StringBuilder StringBuilder Manifest IllegalStateException ,: , "Main-Verticle"
vert.x-master,io.vertx.core.impl.launcher,CommandRegistration,3,1,0,1,0,false,UsageMessageFormatter ,0 ,CommandRegistration ,factory: CommandFactory cli: CLI commands: List<Command> ,getProcessArguments{ Params :  Returns : List<String>} addCommand{ Params : Command Returns : void} getCommand{ Params :  Returns : Command} getCommands{ Params :  Returns : List<Command>} load{ Params :  Returns : void} register{ Params : CommandFactory Returns : VertxCommandLauncher} register{ Params : Class<? extends Command> Returns : VertxCommandLauncher} register{ Params : Class<? extends Command>,Supplier<? extends Command> Returns : VertxCommandLauncher} unregister{ Params : String Returns : VertxCommandLauncher} getCommandNames{ Params :  Returns : Collection<String>} getNewCommandInstance{ Params : String,CommandLine Returns : Command} getExistingCommandInstance{ Params : String Returns : Command} execute{ Params : String,String Returns : void} printCommandUsage{ Params : CLI Returns : void} printGenericExecutionError{ Params : CLI,CLIException Returns : void} printSpecificException{ Params : CLI,Exception Returns : void} printCommandNotFound{ Params : String Returns : void} printGlobalUsage{ Params :  Returns : void} getCommandLinePrefix{ Params :  Returns : String} isAskingForHelp{ Params : String Returns : boolean} isAskingForVersion{ Params : String Returns : boolean} dispatch{ Params : String[] Returns : void} dispatch{ Params : Object,String[] Returns : void} getDefaultCommand{ Params :  Returns : String} getCommandFromManifest{ Params :  Returns : String} getFromManifest{ Params : String Returns : String} getPrintStream{ Params :  Returns : PrintStream} getMainVerticle{ Params :  Returns : String} resetProcessArguments{ Params :  Returns : void} ,,getProcessArguments isAskingForHelp isAskingForVersion resetProcessArguments ,,,,List<Command> ,,List<Command> ,ArrayList ,commands: , 0
vert.x-master,io.vertx.core.impl.launcher,VertxLifecycleHooks,2,1,0,0,0,true,UsageMessageFormatter ,0 ,0 ,,afterConfigParsed{ Params : JsonObject Returns : void} beforeStartingVertx{ Params : VertxOptions Returns : void} afterStartingVertx{ Params : Vertx Returns : void} beforeDeployingVerticle{ Params : DeploymentOptions Returns : void} beforeStoppingVertx{ Params : Vertx Returns : void} afterStoppingVertx{ Params :  Returns : void} handleDeployFailed{ Params : Vertx,String,DeploymentOptions,Throwable Returns : void} ,,,,,,,,,,commands: , 0
vert.x-master,io.vertx.core.impl,LoaderManager,1,0,0,0,0,false,0 ,0 ,0 ,,getClassLoader{ Params : DeploymentOptions Returns : ClassLoaderHolder} release{ Params : ClassLoaderHolder Returns : void} ,,,,,,,,,,commands: , 0
vert.x-master,io.vertx.core.impl.logging,Logger,2,1,0,0,0,true,0 ,0 ,0 ,,isTraceEnabled{ Params :  Returns : boolean} trace{ Params : Object Returns : void} trace{ Params : Object,Throwable Returns : void} isDebugEnabled{ Params :  Returns : boolean} debug{ Params : Object Returns : void} debug{ Params : Object,Throwable Returns : void} isInfoEnabled{ Params :  Returns : boolean} info{ Params : Object Returns : void} info{ Params : Object,Throwable Returns : void} isWarnEnabled{ Params :  Returns : boolean} warn{ Params : Object Returns : void} warn{ Params : Object,Throwable Returns : void} error{ Params : Object Returns : void} error{ Params : Object,Throwable Returns : void} ,,,,,,,,,,commands: , 0
vert.x-master,io.vertx.core.impl.logging,LoggerAdapter,1,1,0,0,1,false,0 ,Logger ,0 ,adapted: LogDelegate ,isTraceEnabled{ Params :  Returns : boolean} trace{ Params : Object Returns : void} trace{ Params : Object,Throwable Returns : void} isDebugEnabled{ Params :  Returns : boolean} debug{ Params : Object Returns : void} debug{ Params : Object,Throwable Returns : void} isInfoEnabled{ Params :  Returns : boolean} info{ Params : Object Returns : void} info{ Params : Object,Throwable Returns : void} isWarnEnabled{ Params :  Returns : boolean} warn{ Params : Object Returns : void} warn{ Params : Object,Throwable Returns : void} error{ Params : Object Returns : void} error{ Params : Object,Throwable Returns : void} ,isTraceEnabled trace trace isDebugEnabled debug debug isInfoEnabled info info isWarnEnabled warn warn error error ,,,,Logger ,LogDelegate ,,LogDelegate ,,adapted: , message, t
vert.x-master,io.vertx.core.impl.logging,LoggerFactory,1,1,0,0,0,false,0 ,0 ,0 ,,getLogger{ Params : Class<?> Returns : Logger} getLogger{ Params : String Returns : Logger} ,,getLogger getLogger ,,,,,,,LoggerAdapter LoggerAdapter ,io.vertx.core.logging.LoggerFactory: , name
vert.x-master,io.vertx.core.impl,NestedCloseable,1,0,1,0,0,false,0 ,0 ,0 ,owner: CloseFuture ,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl,NoStackTraceThrowable,1,1,0,0,0,false,Throwable ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.resolver,DefaultResolverProvider,1,1,0,0,0,false,0 ,ResolverProvider ,0 ,,resolver{ Params : AddressResolverOptions Returns : AddressResolverGroup<InetSocketAddress>} close{ Params :  Returns : Future<Void>} ,resolver close ,,,,ResolverProvider ,,,,,Future: 
vert.x-master,io.vertx.core.impl.resolver,DnsResolverProvider,1,1,0,0,0,false,0 ,ResolverProvider ,ResolverRegistration ,vertx: Vertx resolvers: List<ResolverRegistration> resolverGroup: AddressResolverGroup<InetSocketAddress> serverList: List<InetSocketAddress> ,nameServerAddresses{ Params :  Returns : List<InetSocketAddress>} address{ Params : String,ResolvedAddressTypes Returns : InetAddress} lookup{ Params : String,ResolvedAddressTypes Returns : InetAddress} newAddressResolver{ Params : EventLoop,NameResolver<InetAddress> Returns : io.netty.resolver.AddressResolver<InetSocketAddress>} resolver{ Params : AddressResolverOptions Returns : AddressResolverGroup<InetSocketAddress>} close{ Params :  Returns : Future<Void>} ,address newAddressResolver resolver close ,,,,ResolverProvider ,List<InetSocketAddress> ,,List<InetSocketAddress> ,ArrayList ArrayList InetSocketAddress VertxException HashSet IOException VertxException StringReader VertxException DefaultDnsCache DefaultDnsCache DnsNameResolverBuilder HostsFileEntriesResolver IllegalArgumentException DnsAddressResolverGroup RoundRobinInetAddressResolver ResolverRegistration AtomicInteger ,promise: 
vert.x-master,io.vertx.core.impl.resolver,ResolverRegistration,3,2,0,1,0,false,0 ,ResolverProvider ,ResolverRegistration ,resolver: io.netty.resolver.AddressResolver<InetSocketAddress> executor: EventLoop ,nameServerAddresses{ Params :  Returns : List<InetSocketAddress>} address{ Params : String,ResolvedAddressTypes Returns : InetAddress} lookup{ Params : String,ResolvedAddressTypes Returns : InetAddress} newAddressResolver{ Params : EventLoop,NameResolver<InetAddress> Returns : io.netty.resolver.AddressResolver<InetSocketAddress>} resolver{ Params : AddressResolverOptions Returns : AddressResolverGroup<InetSocketAddress>} close{ Params :  Returns : Future<Void>} ,address newAddressResolver resolver close ,,,,,EventLoop ,,EventLoop ,,null
vert.x-master,io.vertx.core.impl,SerializableUtils,1,1,0,0,0,false,0 ,0 ,ObjectInputStreamFactory ,,toBytes{ Params : Object Returns : byte[]} create{ Params : ByteArrayInputStream Returns : ObjectInputStream} fromBytes{ Params : byte[],ObjectInputStreamFactory Returns : Object} ,,toBytes fromBytes ,,,,,,,ByteArrayOutputStream ObjectOutputStream RuntimeException ByteArrayInputStream RuntimeException ,ois: 
vert.x-master,io.vertx.core.impl,ObjectInputStreamFactory,3,1,0,0,0,true,0 ,0 ,ObjectInputStreamFactory ,,toBytes{ Params : Object Returns : byte[]} create{ Params : ByteArrayInputStream Returns : ObjectInputStream} fromBytes{ Params : byte[],ObjectInputStreamFactory Returns : Object} ,,toBytes fromBytes ,,,,,,,,ois: 
vert.x-master,io.vertx.core.impl,SharedResourceHolder,1,0,0,0,0,false,0 ,Shareable ,Hook ,hook: Hook<C> count: int resource: C ,clearSharedResource{ Params : Vertx,String Returns : List<C>} createSharedResource{ Params : Vertx,String,String,CloseFuture,Function<CloseFuture,R> Returns : R} close{ Params : Promise<Void> Returns : void} ,close ,clearSharedResource createSharedResource ,,,Shareable ,,,,ArrayList Hook SharedResourceHolder SharedResourceHolder CloseFuture SharedResourceHolder ,closeFuture: , v.hook
vert.x-master,io.vertx.core.impl,Hook,3,2,0,1,0,false,0 ,Shareable ,Hook ,vertx: Vertx closeFuture: CloseFuture resourceKey: String resourceName: String ,clearSharedResource{ Params : Vertx,String Returns : List<C>} createSharedResource{ Params : Vertx,String,String,CloseFuture,Function<CloseFuture,R> Returns : R} close{ Params : Promise<Void> Returns : void} ,close ,clearSharedResource createSharedResource ,,,Closeable ,String ,,String ,CloseFuture SharedResourceHolder ,completion: 
vert.x-master,io.vertx.core.impl,TaskQueue,1,1,0,0,0,false,0 ,0 ,Task ,log: Logger tasks: LinkedList<Task> current: Executor runner: Runnable ,run{ Params :  Returns : void} execute{ Params : Runnable,Executor Returns : void} ,,,,,,Runnable ,,Runnable ,LinkedList Task ,executor: , runner
vert.x-master,io.vertx.core.impl,Task,3,2,0,1,0,false,0 ,0 ,Task ,runnable: Runnable exec: Executor ,run{ Params :  Returns : void} execute{ Params : Runnable,Executor Returns : void} ,,,,,,Executor ,,Executor ,,null
vert.x-master,io.vertx.core.impl.transports,EpollTransport,1,1,0,0,0,false,0 ,Transport ,0 ,pendingFastOpenRequestsThreshold: int ,getPendingFastOpenRequestsThreshold{ Params :  Returns : int} setPendingFastOpenRequestsThreshold{ Params : int Returns : void} supportsDomainSockets{ Params :  Returns : boolean} convert{ Params : io.vertx.core.net.SocketAddress Returns : SocketAddress} convert{ Params : SocketAddress Returns : io.vertx.core.net.SocketAddress} isAvailable{ Params :  Returns : boolean} unavailabilityCause{ Params :  Returns : Throwable} eventLoopGroup{ Params : int,int,ThreadFactory,int Returns : EventLoopGroup} datagramChannel{ Params :  Returns : DatagramChannel} datagramChannel{ Params : InternetProtocolFamily Returns : DatagramChannel} channelFactory{ Params : boolean Returns : ChannelFactory<? extends Channel>} serverChannelFactory{ Params : boolean Returns : ChannelFactory<? extends ServerChannel>} configure{ Params : DatagramChannel,DatagramSocketOptions Returns : void} configure{ Params : NetServerOptions,boolean,ServerBootstrap Returns : void} configure{ Params : ClientOptionsBase,boolean,Bootstrap Returns : void} ,supportsDomainSockets convert convert isAvailable unavailabilityCause eventLoopGroup datagramChannel datagramChannel channelFactory configure configure configure ,getPendingFastOpenRequestsThreshold setPendingFastOpenRequestsThreshold ,,,Transport ,,,,IllegalArgumentException DomainSocketAddress SocketAddressImpl EpollEventLoopGroup EpollDatagramChannel EpollDatagramChannel ,Transport.super: , options, domainSocket, bootstrap
vert.x-master,io.vertx.core.impl.transports,JDKTransport,1,1,0,0,0,false,0 ,Transport ,0 ,INSTANCE: Transport ,eventLoopGroup{ Params : int,int,ThreadFactory,int Returns : EventLoopGroup} datagramChannel{ Params :  Returns : DatagramChannel} datagramChannel{ Params : InternetProtocolFamily Returns : DatagramChannel} channelFactory{ Params : boolean Returns : ChannelFactory<? extends Channel>} serverChannelFactory{ Params : boolean Returns : ChannelFactory<? extends ServerChannel>} ,,,,,Transport ,,,,JDKTransport NioEventLoopGroup NioDatagramChannel NioDatagramChannel NioDatagramChannel UnsupportedOperationException IllegalArgumentException IllegalArgumentException ,eventLoopGroup: , ioRatio
vert.x-master,io.vertx.core.impl.transports,KQueueTransport,1,1,0,0,0,false,0 ,Transport ,0 ,,supportsDomainSockets{ Params :  Returns : boolean} convert{ Params : io.vertx.core.net.SocketAddress Returns : SocketAddress} convert{ Params : SocketAddress Returns : io.vertx.core.net.SocketAddress} isAvailable{ Params :  Returns : boolean} unavailabilityCause{ Params :  Returns : Throwable} eventLoopGroup{ Params : int,int,ThreadFactory,int Returns : EventLoopGroup} datagramChannel{ Params :  Returns : DatagramChannel} datagramChannel{ Params : InternetProtocolFamily Returns : DatagramChannel} channelFactory{ Params : boolean Returns : ChannelFactory<? extends Channel>} serverChannelFactory{ Params : boolean Returns : ChannelFactory<? extends ServerChannel>} configure{ Params : NetServerOptions,boolean,ServerBootstrap Returns : void} configure{ Params : DatagramChannel,DatagramSocketOptions Returns : void} ,supportsDomainSockets convert convert isAvailable unavailabilityCause eventLoopGroup datagramChannel datagramChannel channelFactory serverChannelFactory configure configure ,,,,Transport ,,,,DomainSocketAddress SocketAddressImpl KQueueEventLoopGroup KQueueDatagramChannel KQueueDatagramChannel ,Transport.super: , channel, options
vert.x-master,io.vertx.core.impl.utils,ConcurrentCyclicSequence,1,1,0,0,0,false,0 ,Iterable<T> Iterator<T> ,SingletonIter Iter ,EMPTY_ARRAY: Object pos: AtomicInteger elements: Object ,index{ Params :  Returns : int} computeIndex{ Params : int Returns : int} first{ Params :  Returns : T} add{ Params : T Returns : ConcurrentCyclicSequence<T>} remove{ Params : T Returns : ConcurrentCyclicSequence<T>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : T} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<T>} iterator{ Params : boolean Returns : Iterator<T>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : T} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : T} ,hasNext next iterator hasNext next hasNext next ,,,,Iterable Iterator ,Object[] ,,Object[] ,AtomicInteger ConcurrentCyclicSequence ConcurrentCyclicSequence ConcurrentCyclicSequence SingletonIter Iter NoSuchElementException NoSuchElementException ,pos: 
vert.x-master,io.vertx.core.impl.utils,SingletonIter,3,2,0,0,0,false,0 ,Iterable<T> Iterator<T> ,SingletonIter Iter ,next: boolean ,index{ Params :  Returns : int} computeIndex{ Params : int Returns : int} first{ Params :  Returns : T} add{ Params : T Returns : ConcurrentCyclicSequence<T>} remove{ Params : T Returns : ConcurrentCyclicSequence<T>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : T} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<T>} iterator{ Params : boolean Returns : Iterator<T>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : T} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : T} ,hasNext next iterator hasNext next hasNext next ,,,,Iterator ,,,,NoSuchElementException ,pos: 
vert.x-master,io.vertx.core.impl.utils,Iter,3,2,0,0,0,false,0 ,Iterable<T> Iterator<T> ,SingletonIter Iter ,start: int cursor: int ,index{ Params :  Returns : int} computeIndex{ Params : int Returns : int} first{ Params :  Returns : T} add{ Params : T Returns : ConcurrentCyclicSequence<T>} remove{ Params : T Returns : ConcurrentCyclicSequence<T>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : T} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<T>} iterator{ Params : boolean Returns : Iterator<T>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : T} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : T} ,hasNext next iterator hasNext next hasNext next ,,,,Iterator ,,,,NoSuchElementException ,: , start + cursor++
vert.x-master,io.vertx.core.impl,Utils,1,1,0,0,0,false,0 ,0 ,0 ,LINE_SEPARATOR: String isLinux: boolean isWindows: boolean ,isLinux{ Params :  Returns : boolean} isWindows{ Params :  Returns : boolean} ,,isLinux isWindows ,,,,,,,,: , start + cursor++
vert.x-master,io.vertx.core.impl.verticle,CompilingClassLoader,1,1,0,0,0,false,ClassLoader ,0 ,0 ,log: Logger JAVA_COMPILER_OPTIONS_PROP_NAME: String COMPILER_OPTIONS: List<String> javaSourceContext: JavaSourceContext fileManager: MemoryFileManager ,resolveMainClassName{ Params :  Returns : String} findClass{ Params : String Returns : Class<?>} getClassBytes{ Params : String Returns : byte[]} ,findClass ,,,,,MemoryFileManager ,,MemoryFileManager ,ArrayList RuntimeException File RuntimeException File JavaSourceContext DiagnosticCollector RuntimeException MemoryFileManager RuntimeException RuntimeException ClassNotFoundException ,fileManager: , name
vert.x-master,io.vertx.core.impl.verticle,CustomJavaFileObject,1,1,0,0,0,false,0 ,JavaFileObject ,0 ,binaryName: String kind: Kind uri: URI ,binaryName{ Params :  Returns : String} openInputStream{ Params :  Returns : InputStream} getKind{ Params :  Returns : Kind} getNestingKind{ Params :  Returns : NestingKind} toUri{ Params :  Returns : URI} getName{ Params :  Returns : String} openOutputStream{ Params :  Returns : OutputStream} openReader{ Params : boolean Returns : Reader} getCharContent{ Params : boolean Returns : CharSequence} openWriter{ Params :  Returns : Writer} getLastModified{ Params :  Returns : long} delete{ Params :  Returns : boolean} isNameCompatible{ Params : String,Kind Returns : boolean} getAccessLevel{ Params :  Returns : Modifier} toString{ Params :  Returns : String} ,openInputStream toUri toString ,,,,JavaFileObject ,URI ,,URI ,UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException OutputStreamWriter ,: 
vert.x-master,io.vertx.core.impl.verticle,JavaSourceContext,1,1,0,0,0,false,0 ,0 ,0 ,className: String sourceRoot: File ,getSourceRoot{ Params :  Returns : File} getClassName{ Params :  Returns : String} parsePackage{ Params : File Returns : String} ,,parsePackage ,,,,File ,,File ,RuntimeException String RuntimeException ,line: , ';', idx
vert.x-master,io.vertx.core.impl.verticle,MemoryFileManager,1,1,0,0,0,false,ForwardingJavaFileManager<JavaFileManager> ,0 ,0 ,compiledClasses: Map<String, ByteArrayOutputStream> helper: PackageHelper ,getJavaFileForOutput{ Params : Location,String,JavaFileObject.Kind,FileObject Returns : JavaFileObject} openOutputStream{ Params :  Returns : OutputStream} getCompiledClass{ Params : String Returns : byte[]} inferBinaryName{ Params : Location,JavaFileObject Returns : String} list{ Params : Location,String,Set<JavaFileObject.Kind>,boolean Returns : Iterable<JavaFileObject>} ,getJavaFileForOutput inferBinaryName list ,,,,,PackageHelper ,,PackageHelper ,HashMap PackageHelper SimpleJavaFileObject URI ByteArrayOutputStream RuntimeException ,super: , location, packageName, kinds, recurse
vert.x-master,io.vertx.core.impl.verticle,PackageHelper,1,1,0,0,0,false,0 ,0 ,0 ,CLASS_FILE: String classLoader: ClassLoader ,find{ Params : String Returns : List<JavaFileObject>} browseDir{ Params : String,File Returns : List<JavaFileObject>} browseJar{ Params : URL Returns : List<JavaFileObject>} ,,browseDir browseJar ,,,,ClassLoader ,,ClassLoader ,ArrayList File ArrayList CustomJavaFileObject ArrayList CustomJavaFileObject RuntimeException ,URI: , jarUri + "!/" + name
vert.x-master,io.vertx.core.impl,VerticleManager,1,1,0,0,0,false,0 ,0 ,0 ,vertx: VertxInternal deploymentManager: DeploymentManager loaderManager: LoaderManager verticleFactories: Map<String, List<VerticleFactory>> defaultFactories: List<VerticleFactory> ,loadVerticleFactories{ Params :  Returns : void} registerVerticleFactory{ Params : VerticleFactory Returns : void} unregisterVerticleFactory{ Params : VerticleFactory Returns : void} verticleFactories{ Params :  Returns : Set<VerticleFactory>} resolveFactories{ Params : String Returns : List<VerticleFactory>} getSuffix{ Params : int,String Returns : String} deployVerticle{ Params : String,DeploymentOptions Returns : Future<Deployment>} doDeployVerticle{ Params : String,DeploymentOptions,ContextInternal,ContextInternal,ClassLoader Returns : Future<Deployment>} doDeployVerticle{ Params : Iterator<VerticleFactory>,Throwable,String,DeploymentOptions,ContextInternal,ContextInternal,ClassLoader Returns : Future<Deployment>} doDeployVerticle{ Params : VerticleFactory,String,DeploymentOptions,ContextInternal,ContextInternal,ClassLoader Returns : Future<Deployment>} getCurrentClassLoader{ Params :  Returns : ClassLoader} ,,getSuffix getCurrentClassLoader ,,,,List<VerticleFactory> ,,List<VerticleFactory> ,LoaderManager ConcurrentHashMap ArrayList JavaVerticleFactory IllegalArgumentException ArrayList IllegalArgumentException IllegalArgumentException IllegalArgumentException HashSet IllegalArgumentException UnsupportedOperationException UnsupportedOperationException ,VerticleManager.class: 
vert.x-master,io.vertx.core.impl,VertxBuilder,1,1,0,0,0,false,0 ,0 ,0 ,log: Logger options: VertxOptions config: JsonObject transport: Transport clusterManager: ClusterManager clusterNodeSelector: NodeSelector tracer: VertxTracer threadFactory: VertxThreadFactory executorServiceFactory: ExecutorServiceFactory metrics: VertxMetrics fileResolver: FileResolver ,options{ Params :  Returns : VertxOptions} config{ Params :  Returns : JsonObject} findTransport{ Params :  Returns : Transport} findTransport{ Params : Transport Returns : VertxBuilder} clusterManager{ Params :  Returns : ClusterManager} clusterManager{ Params : ClusterManager Returns : VertxBuilder} clusterNodeSelector{ Params :  Returns : NodeSelector} clusterNodeSelector{ Params : NodeSelector Returns : VertxBuilder} tracer{ Params :  Returns : VertxTracer} tracer{ Params : VertxTracer Returns : VertxBuilder} metrics{ Params :  Returns : VertxMetrics} metrics{ Params : VertxMetrics Returns : VertxBuilder} fileResolver{ Params :  Returns : FileResolver} fileResolver{ Params : FileResolver Returns : VertxBuilder} threadFactory{ Params :  Returns : VertxThreadFactory} threadFactory{ Params : VertxThreadFactory Returns : VertxBuilder} executorServiceFactory{ Params :  Returns : ExecutorServiceFactory} executorServiceFactory{ Params : ExecutorServiceFactory Returns : VertxBuilder} vertx{ Params :  Returns : Vertx} clusteredVertx{ Params :  Returns : Future<Vertx>} init{ Params :  Returns : VertxBuilder} initProviders{ Params : Collection<VertxServiceProvider> Returns : void} initMetrics{ Params : VertxOptions,Collection<VertxServiceProvider> Returns : void} initTracing{ Params : VertxOptions,Collection<VertxServiceProvider> Returns : void} initClusterManager{ Params : VertxOptions,Collection<VertxServiceProvider> Returns : void} initTransport{ Params :  Returns : void} initFileResolver{ Params :  Returns : void} initThreadFactory{ Params :  Returns : void} initExecutorServiceFactory{ Params :  Returns : void} checkBeforeInstantiating{ Params :  Returns : void} checkTracing{ Params :  Returns : void} checkMetrics{ Params :  Returns : void} nativeTransport{ Params :  Returns : Transport} findTransport{ Params : boolean Returns : Transport} ,,initMetrics initTracing initClusterManager nativeTransport findTransport ,,,,FileResolver ,,FileResolver ,VertxOptions VertxOptions VertxImpl IllegalStateException VertxImpl DefaultNodeSelector ArrayList IllegalStateException FileResolverImpl EpollTransport KQueueTransport ,nativeTransport: 
vert.x-master,io.vertx.core.impl,VertxImpl,1,1,0,0,0,false,0 ,VertxInternal MetricsProvider ,InternalTimerHandler ContextDispatch ,cleaner: Cleaner nonVertxContextDispatch: ThreadLocal<ContextDispatch> log: Logger CLUSTER_MAP_NAME: String NETTY_IO_RATIO_PROPERTY_NAME: String NETTY_IO_RATIO: int fileSystem: FileSystem sharedData: SharedData metrics: VertxMetrics timeouts: ConcurrentMap<Long, InternalTimerHandler> timeoutCounter: AtomicLong clusterManager: ClusterManager nodeSelector: NodeSelector deploymentManager: DeploymentManager verticleManager: VerticleManager fileResolver: FileResolver sharedHttpServers: Map<ServerID, HttpServerImpl> sharedNetServers: Map<ServerID, NetServerImpl> workerPool: WorkerPool internalWorkerPool: WorkerPool threadFactory: VertxThreadFactory executorServiceFactory: ExecutorServiceFactory eventLoopThreadFactory: ThreadFactory eventLoopGroup: EventLoopGroup acceptorEventLoopGroup: EventLoopGroup checker: BlockedThreadChecker addressResolver: AddressResolver addressResolverOptions: AddressResolverOptions eventBus: EventBusInternal haManager: HAManager closed: boolean exceptionHandler: Handler<Throwable> defaultWorkerPoolSize: int maxWorkerExecTime: long maxWorkerExecTimeUnit: TimeUnit maxEventLoopExecTime: long maxEventLoopExecTimeUnit: TimeUnit closeFuture: CloseFuture transport: Transport tracer: VertxTracer stickyContext: ThreadLocal<WeakReference<ContextInternal>> disableTCCL: boolean useDaemonThread: Boolean ,init{ Params :  Returns : void} initClustered{ Params : VertxOptions Returns : Future<Vertx>} createHaManager{ Params : VertxOptions,Promise<Void> Returns : void} startEventBus{ Params : boolean,Promise<Void> Returns : void} initializeHaManager{ Params : Promise<Void> Returns : void} getFileSystem{ Params :  Returns : FileSystem} maxEventLoopExecTime{ Params :  Returns : long} maxEventLoopExecTimeUnit{ Params :  Returns : TimeUnit} createDatagramSocket{ Params : DatagramSocketOptions Returns : DatagramSocket} createNetServer{ Params : NetServerOptions Returns : NetServer} createNetClient{ Params : NetClientOptions Returns : NetClient} transport{ Params :  Returns : Transport} isNativeTransportEnabled{ Params :  Returns : boolean} unavailableNativeTransportCause{ Params :  Returns : Throwable} fileSystem{ Params :  Returns : FileSystem} sharedData{ Params :  Returns : SharedData} createHttpServer{ Params : HttpServerOptions Returns : HttpServer} createHttpClient{ Params : HttpClientOptions Returns : HttpClient} eventBus{ Params :  Returns : EventBus} setPeriodic{ Params : long,long,Handler<Long> Returns : long} setTimer{ Params : long,Handler<Long> Returns : long} promise{ Params :  Returns : PromiseInternal<T>} promise{ Params : Promise<T> Returns : PromiseInternal<T>} runOnContext{ Params : Handler<Void> Returns : void} getWorkerPool{ Params :  Returns : WorkerPool} getInternalWorkerPool{ Params :  Returns : WorkerPool} getEventLoopGroup{ Params :  Returns : EventLoopGroup} getAcceptorEventLoopGroup{ Params :  Returns : EventLoopGroup} getOrCreateContext{ Params :  Returns : ContextInternal} sharedHttpServers{ Params :  Returns : Map<ServerID,HttpServerImpl>} sharedNetServers{ Params :  Returns : Map<ServerID,NetServerImpl>} sharedTCPServers{ Params : Class<S> Returns : Map<ServerID,S>} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : Metrics} cancelTimer{ Params : long Returns : boolean} createEventLoopContext{ Params : Deployment,CloseFuture,WorkerPool,ClassLoader Returns : EventLoopContext} createEventLoopContext{ Params : EventLoop,WorkerPool,ClassLoader Returns : EventLoopContext} createEventLoopContext{ Params :  Returns : EventLoopContext} createWorkerContext{ Params : Deployment,CloseFuture,WorkerPool,ClassLoader Returns : WorkerContext} createWorkerContext{ Params :  Returns : WorkerContext} createDnsClient{ Params : int,String Returns : DnsClient} createDnsClient{ Params :  Returns : DnsClient} createDnsClient{ Params : DnsClientOptions Returns : DnsClient} scheduleTimeout{ Params : ContextInternal,boolean,long,long,TimeUnit,boolean,Handler<Long> Returns : long} scheduleTimeout{ Params : ContextInternal,boolean,long,TimeUnit,boolean,Handler<Long> Returns : long} getContext{ Params :  Returns : ContextInternal} getClusterManager{ Params :  Returns : ClusterManager} closeClusterManager{ Params :  Returns : Future<Void>} close{ Params :  Returns : Future<Void>} deployVerticle{ Params : String,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Verticle,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Class<? extends Verticle>,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Supplier<Verticle>,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Callable<Verticle>,DeploymentOptions Returns : Future<String>} undeploy{ Params : String Returns : Future<Void>} deploymentIDs{ Params :  Returns : Set<String>} registerVerticleFactory{ Params : VerticleFactory Returns : void} unregisterVerticleFactory{ Params : VerticleFactory Returns : void} verticleFactories{ Params :  Returns : Set<VerticleFactory>} isClustered{ Params :  Returns : boolean} nettyEventLoopGroup{ Params :  Returns : EventLoopGroup} simulateKill{ Params :  Returns : void} getDeployment{ Params : String Returns : Deployment} failoverCompleteHandler{ Params : FailoverCompleteHandler Returns : void} isKilled{ Params :  Returns : boolean} failDuringFailover{ Params : boolean Returns : void} metricsSPI{ Params :  Returns : VertxMetrics} resolveFile{ Params : String Returns : File} resolveAddress{ Params : String Returns : Future<InetAddress>} addressResolver{ Params :  Returns : AddressResolver} nettyAddressResolverGroup{ Params :  Returns : AddressResolverGroup<InetSocketAddress>} fileResolver{ Params :  Returns : FileResolver} blockedThreadChecker{ Params :  Returns : BlockedThreadChecker} deleteCacheDirAndShutdown{ Params : Promise<Void> Returns : void} operationComplete{ Params : io.netty.util.concurrent.Future Returns : void} operationComplete{ Params : io.netty.util.concurrent.Future Returns : void} haManager{ Params :  Returns : HAManager} run{ Params :  Returns : void} handle{ Params : Void Returns : void} cancel{ Params :  Returns : boolean} tryCancel{ Params :  Returns : boolean} close{ Params : Promise<Void> Returns : void} createSharedWorkerExecutor{ Params : String Returns : WorkerExecutorImpl} createSharedWorkerExecutor{ Params : String,int Returns : WorkerExecutorImpl} createSharedWorkerExecutor{ Params : String,int,long Returns : WorkerExecutorImpl} createSharedWorkerExecutor{ Params : String,int,long,TimeUnit Returns : WorkerExecutorImpl} createSharedWorkerPool{ Params : String,int,long,TimeUnit Returns : WorkerPool} createSharedWorkerPool{ Params : CloseFuture,String,int,long,TimeUnit Returns : WorkerPool} close{ Params :  Returns : void} createThreadFactory{ Params : VertxThreadFactory,BlockedThreadChecker,Boolean,long,TimeUnit,String,boolean Returns : ThreadFactory} exceptionHandler{ Params : Handler<Throwable> Returns : Vertx} exceptionHandler{ Params :  Returns : Handler<Throwable>} closeFuture{ Params :  Returns : CloseFuture} tracer{ Params :  Returns : VertxTracer} addCloseHook{ Params : Closeable Returns : void} removeCloseHook{ Params : Closeable Returns : void} resolveCloseFuture{ Params :  Returns : CloseFuture} executeIsolated{ Params : Handler<Void> Returns : void} beginDispatch{ Params : ContextInternal Returns : ContextInternal} beginDispatch2{ Params : Thread,ContextInternal Returns : ContextInternal} endDispatch{ Params : ContextInternal Returns : void} endDispatch2{ Params : ContextInternal Returns : void} ,maxEventLoopExecTime maxEventLoopExecTimeUnit createDatagramSocket transport isNativeTransportEnabled unavailableNativeTransportCause setPeriodic promise getInternalWorkerPool sharedTCPServers isMetricsEnabled getMetrics createEventLoopContext createEventLoopContext createEventLoopContext createWorkerContext createWorkerContext createDnsClient createDnsClient createDnsClient close deployVerticle deployVerticle deployVerticle deployVerticle undeploy deploymentIDs registerVerticleFactory unregisterVerticleFactory verticleFactories isClustered nettyEventLoopGroup getDeployment failoverCompleteHandler isKilled failDuringFailover metricsSPI resolveFile resolveAddress addressResolver nettyAddressResolverGroup fileResolver blockedThreadChecker operationComplete operationComplete run createSharedWorkerExecutor createSharedWorkerExecutor createSharedWorkerExecutor createSharedWorkerExecutor close exceptionHandler exceptionHandler closeFuture tracer addCloseHook removeCloseHook ,createThreadFactory ,,,VertxInternal MetricsProvider ,Boolean ,,Boolean ,ThreadLocal ConcurrentHashMap AtomicLong HashMap HashMap ThreadLocal BlockedThreadChecker CloseFuture WorkerPool WorkerPool AddressResolver ClusteredEventBus EventBusImpl SharedDataImpl DeploymentManager VerticleManager HAManager WindowsFileSystem FileSystemImpl CloseFuture NetServerImpl NetClientBuilder CleanableNetClient HttpServerImpl CloseFuture HttpClientImpl CleanableHttpClient HttpClientImpl CleanableHttpClient WeakReference IllegalStateException EventLoopContext EventLoopContext WorkerContext DnsClientOptions DnsClientOptions DnsResolverProvider DnsClientOptions DnsClientImpl IllegalArgumentException IllegalArgumentException InternalTimerHandler IllegalArgumentException GenericFutureListener GenericFutureListener AtomicBoolean CloseFuture WorkerExecutorImpl CloseFuture IllegalArgumentException IllegalArgumentException WorkerPool WorkerPool AtomicInteger ContextDispatch ,Thread: 
vert.x-master,io.vertx.core.impl,InternalTimerHandler,3,0,0,0,0,false,0 ,VertxInternal MetricsProvider ,InternalTimerHandler ContextDispatch ,handler: Handler<Long> periodic: boolean id: long context: ContextInternal disposed: AtomicBoolean future: java.util.concurrent.Future<?> ,init{ Params :  Returns : void} initClustered{ Params : VertxOptions Returns : Future<Vertx>} createHaManager{ Params : VertxOptions,Promise<Void> Returns : void} startEventBus{ Params : boolean,Promise<Void> Returns : void} initializeHaManager{ Params : Promise<Void> Returns : void} getFileSystem{ Params :  Returns : FileSystem} maxEventLoopExecTime{ Params :  Returns : long} maxEventLoopExecTimeUnit{ Params :  Returns : TimeUnit} createDatagramSocket{ Params : DatagramSocketOptions Returns : DatagramSocket} createNetServer{ Params : NetServerOptions Returns : NetServer} createNetClient{ Params : NetClientOptions Returns : NetClient} transport{ Params :  Returns : Transport} isNativeTransportEnabled{ Params :  Returns : boolean} unavailableNativeTransportCause{ Params :  Returns : Throwable} fileSystem{ Params :  Returns : FileSystem} sharedData{ Params :  Returns : SharedData} createHttpServer{ Params : HttpServerOptions Returns : HttpServer} createHttpClient{ Params : HttpClientOptions Returns : HttpClient} eventBus{ Params :  Returns : EventBus} setPeriodic{ Params : long,long,Handler<Long> Returns : long} setTimer{ Params : long,Handler<Long> Returns : long} promise{ Params :  Returns : PromiseInternal<T>} promise{ Params : Promise<T> Returns : PromiseInternal<T>} runOnContext{ Params : Handler<Void> Returns : void} getWorkerPool{ Params :  Returns : WorkerPool} getInternalWorkerPool{ Params :  Returns : WorkerPool} getEventLoopGroup{ Params :  Returns : EventLoopGroup} getAcceptorEventLoopGroup{ Params :  Returns : EventLoopGroup} getOrCreateContext{ Params :  Returns : ContextInternal} sharedHttpServers{ Params :  Returns : Map<ServerID,HttpServerImpl>} sharedNetServers{ Params :  Returns : Map<ServerID,NetServerImpl>} sharedTCPServers{ Params : Class<S> Returns : Map<ServerID,S>} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : Metrics} cancelTimer{ Params : long Returns : boolean} createEventLoopContext{ Params : Deployment,CloseFuture,WorkerPool,ClassLoader Returns : EventLoopContext} createEventLoopContext{ Params : EventLoop,WorkerPool,ClassLoader Returns : EventLoopContext} createEventLoopContext{ Params :  Returns : EventLoopContext} createWorkerContext{ Params : Deployment,CloseFuture,WorkerPool,ClassLoader Returns : WorkerContext} createWorkerContext{ Params :  Returns : WorkerContext} createDnsClient{ Params : int,String Returns : DnsClient} createDnsClient{ Params :  Returns : DnsClient} createDnsClient{ Params : DnsClientOptions Returns : DnsClient} scheduleTimeout{ Params : ContextInternal,boolean,long,long,TimeUnit,boolean,Handler<Long> Returns : long} scheduleTimeout{ Params : ContextInternal,boolean,long,TimeUnit,boolean,Handler<Long> Returns : long} getContext{ Params :  Returns : ContextInternal} getClusterManager{ Params :  Returns : ClusterManager} closeClusterManager{ Params :  Returns : Future<Void>} close{ Params :  Returns : Future<Void>} deployVerticle{ Params : String,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Verticle,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Class<? extends Verticle>,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Supplier<Verticle>,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Callable<Verticle>,DeploymentOptions Returns : Future<String>} undeploy{ Params : String Returns : Future<Void>} deploymentIDs{ Params :  Returns : Set<String>} registerVerticleFactory{ Params : VerticleFactory Returns : void} unregisterVerticleFactory{ Params : VerticleFactory Returns : void} verticleFactories{ Params :  Returns : Set<VerticleFactory>} isClustered{ Params :  Returns : boolean} nettyEventLoopGroup{ Params :  Returns : EventLoopGroup} simulateKill{ Params :  Returns : void} getDeployment{ Params : String Returns : Deployment} failoverCompleteHandler{ Params : FailoverCompleteHandler Returns : void} isKilled{ Params :  Returns : boolean} failDuringFailover{ Params : boolean Returns : void} metricsSPI{ Params :  Returns : VertxMetrics} resolveFile{ Params : String Returns : File} resolveAddress{ Params : String Returns : Future<InetAddress>} addressResolver{ Params :  Returns : AddressResolver} nettyAddressResolverGroup{ Params :  Returns : AddressResolverGroup<InetSocketAddress>} fileResolver{ Params :  Returns : FileResolver} blockedThreadChecker{ Params :  Returns : BlockedThreadChecker} deleteCacheDirAndShutdown{ Params : Promise<Void> Returns : void} operationComplete{ Params : io.netty.util.concurrent.Future Returns : void} operationComplete{ Params : io.netty.util.concurrent.Future Returns : void} haManager{ Params :  Returns : HAManager} run{ Params :  Returns : void} handle{ Params : Void Returns : void} cancel{ Params :  Returns : boolean} tryCancel{ Params :  Returns : boolean} close{ Params : Promise<Void> Returns : void} createSharedWorkerExecutor{ Params : String Returns : WorkerExecutorImpl} createSharedWorkerExecutor{ Params : String,int Returns : WorkerExecutorImpl} createSharedWorkerExecutor{ Params : String,int,long Returns : WorkerExecutorImpl} createSharedWorkerExecutor{ Params : String,int,long,TimeUnit Returns : WorkerExecutorImpl} createSharedWorkerPool{ Params : String,int,long,TimeUnit Returns : WorkerPool} createSharedWorkerPool{ Params : CloseFuture,String,int,long,TimeUnit Returns : WorkerPool} close{ Params :  Returns : void} createThreadFactory{ Params : VertxThreadFactory,BlockedThreadChecker,Boolean,long,TimeUnit,String,boolean Returns : ThreadFactory} exceptionHandler{ Params : Handler<Throwable> Returns : Vertx} exceptionHandler{ Params :  Returns : Handler<Throwable>} closeFuture{ Params :  Returns : CloseFuture} tracer{ Params :  Returns : VertxTracer} addCloseHook{ Params : Closeable Returns : void} removeCloseHook{ Params : Closeable Returns : void} resolveCloseFuture{ Params :  Returns : CloseFuture} executeIsolated{ Params : Handler<Void> Returns : void} beginDispatch{ Params : ContextInternal Returns : ContextInternal} beginDispatch2{ Params : Thread,ContextInternal Returns : ContextInternal} endDispatch{ Params : ContextInternal Returns : void} endDispatch2{ Params : ContextInternal Returns : void} ,maxEventLoopExecTime maxEventLoopExecTimeUnit createDatagramSocket transport isNativeTransportEnabled unavailableNativeTransportCause setPeriodic promise getInternalWorkerPool sharedTCPServers isMetricsEnabled getMetrics createEventLoopContext createEventLoopContext createEventLoopContext createWorkerContext createWorkerContext createDnsClient createDnsClient createDnsClient close deployVerticle deployVerticle deployVerticle deployVerticle undeploy deploymentIDs registerVerticleFactory unregisterVerticleFactory verticleFactories isClustered nettyEventLoopGroup getDeployment failoverCompleteHandler isKilled failDuringFailover metricsSPI resolveFile resolveAddress addressResolver nettyAddressResolverGroup fileResolver blockedThreadChecker operationComplete operationComplete run createSharedWorkerExecutor createSharedWorkerExecutor createSharedWorkerExecutor createSharedWorkerExecutor close exceptionHandler exceptionHandler closeFuture tracer addCloseHook removeCloseHook ,createThreadFactory ,,,Handler Closeable Runnable ,java.util.concurrent.Future<?> ,,java.util.concurrent.Future<?> ,AtomicBoolean ,completion: 
vert.x-master,io.vertx.core.impl,ContextDispatch,3,0,0,1,0,false,0 ,VertxInternal MetricsProvider ,InternalTimerHandler ContextDispatch ,context: ContextInternal topLevelTCCL: ClassLoader ,init{ Params :  Returns : void} initClustered{ Params : VertxOptions Returns : Future<Vertx>} createHaManager{ Params : VertxOptions,Promise<Void> Returns : void} startEventBus{ Params : boolean,Promise<Void> Returns : void} initializeHaManager{ Params : Promise<Void> Returns : void} getFileSystem{ Params :  Returns : FileSystem} maxEventLoopExecTime{ Params :  Returns : long} maxEventLoopExecTimeUnit{ Params :  Returns : TimeUnit} createDatagramSocket{ Params : DatagramSocketOptions Returns : DatagramSocket} createNetServer{ Params : NetServerOptions Returns : NetServer} createNetClient{ Params : NetClientOptions Returns : NetClient} transport{ Params :  Returns : Transport} isNativeTransportEnabled{ Params :  Returns : boolean} unavailableNativeTransportCause{ Params :  Returns : Throwable} fileSystem{ Params :  Returns : FileSystem} sharedData{ Params :  Returns : SharedData} createHttpServer{ Params : HttpServerOptions Returns : HttpServer} createHttpClient{ Params : HttpClientOptions Returns : HttpClient} eventBus{ Params :  Returns : EventBus} setPeriodic{ Params : long,long,Handler<Long> Returns : long} setTimer{ Params : long,Handler<Long> Returns : long} promise{ Params :  Returns : PromiseInternal<T>} promise{ Params : Promise<T> Returns : PromiseInternal<T>} runOnContext{ Params : Handler<Void> Returns : void} getWorkerPool{ Params :  Returns : WorkerPool} getInternalWorkerPool{ Params :  Returns : WorkerPool} getEventLoopGroup{ Params :  Returns : EventLoopGroup} getAcceptorEventLoopGroup{ Params :  Returns : EventLoopGroup} getOrCreateContext{ Params :  Returns : ContextInternal} sharedHttpServers{ Params :  Returns : Map<ServerID,HttpServerImpl>} sharedNetServers{ Params :  Returns : Map<ServerID,NetServerImpl>} sharedTCPServers{ Params : Class<S> Returns : Map<ServerID,S>} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : Metrics} cancelTimer{ Params : long Returns : boolean} createEventLoopContext{ Params : Deployment,CloseFuture,WorkerPool,ClassLoader Returns : EventLoopContext} createEventLoopContext{ Params : EventLoop,WorkerPool,ClassLoader Returns : EventLoopContext} createEventLoopContext{ Params :  Returns : EventLoopContext} createWorkerContext{ Params : Deployment,CloseFuture,WorkerPool,ClassLoader Returns : WorkerContext} createWorkerContext{ Params :  Returns : WorkerContext} createDnsClient{ Params : int,String Returns : DnsClient} createDnsClient{ Params :  Returns : DnsClient} createDnsClient{ Params : DnsClientOptions Returns : DnsClient} scheduleTimeout{ Params : ContextInternal,boolean,long,long,TimeUnit,boolean,Handler<Long> Returns : long} scheduleTimeout{ Params : ContextInternal,boolean,long,TimeUnit,boolean,Handler<Long> Returns : long} getContext{ Params :  Returns : ContextInternal} getClusterManager{ Params :  Returns : ClusterManager} closeClusterManager{ Params :  Returns : Future<Void>} close{ Params :  Returns : Future<Void>} deployVerticle{ Params : String,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Verticle,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Class<? extends Verticle>,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Supplier<Verticle>,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Callable<Verticle>,DeploymentOptions Returns : Future<String>} undeploy{ Params : String Returns : Future<Void>} deploymentIDs{ Params :  Returns : Set<String>} registerVerticleFactory{ Params : VerticleFactory Returns : void} unregisterVerticleFactory{ Params : VerticleFactory Returns : void} verticleFactories{ Params :  Returns : Set<VerticleFactory>} isClustered{ Params :  Returns : boolean} nettyEventLoopGroup{ Params :  Returns : EventLoopGroup} simulateKill{ Params :  Returns : void} getDeployment{ Params : String Returns : Deployment} failoverCompleteHandler{ Params : FailoverCompleteHandler Returns : void} isKilled{ Params :  Returns : boolean} failDuringFailover{ Params : boolean Returns : void} metricsSPI{ Params :  Returns : VertxMetrics} resolveFile{ Params : String Returns : File} resolveAddress{ Params : String Returns : Future<InetAddress>} addressResolver{ Params :  Returns : AddressResolver} nettyAddressResolverGroup{ Params :  Returns : AddressResolverGroup<InetSocketAddress>} fileResolver{ Params :  Returns : FileResolver} blockedThreadChecker{ Params :  Returns : BlockedThreadChecker} deleteCacheDirAndShutdown{ Params : Promise<Void> Returns : void} operationComplete{ Params : io.netty.util.concurrent.Future Returns : void} operationComplete{ Params : io.netty.util.concurrent.Future Returns : void} haManager{ Params :  Returns : HAManager} run{ Params :  Returns : void} handle{ Params : Void Returns : void} cancel{ Params :  Returns : boolean} tryCancel{ Params :  Returns : boolean} close{ Params : Promise<Void> Returns : void} createSharedWorkerExecutor{ Params : String Returns : WorkerExecutorImpl} createSharedWorkerExecutor{ Params : String,int Returns : WorkerExecutorImpl} createSharedWorkerExecutor{ Params : String,int,long Returns : WorkerExecutorImpl} createSharedWorkerExecutor{ Params : String,int,long,TimeUnit Returns : WorkerExecutorImpl} createSharedWorkerPool{ Params : String,int,long,TimeUnit Returns : WorkerPool} createSharedWorkerPool{ Params : CloseFuture,String,int,long,TimeUnit Returns : WorkerPool} close{ Params :  Returns : void} createThreadFactory{ Params : VertxThreadFactory,BlockedThreadChecker,Boolean,long,TimeUnit,String,boolean Returns : ThreadFactory} exceptionHandler{ Params : Handler<Throwable> Returns : Vertx} exceptionHandler{ Params :  Returns : Handler<Throwable>} closeFuture{ Params :  Returns : CloseFuture} tracer{ Params :  Returns : VertxTracer} addCloseHook{ Params : Closeable Returns : void} removeCloseHook{ Params : Closeable Returns : void} resolveCloseFuture{ Params :  Returns : CloseFuture} executeIsolated{ Params : Handler<Void> Returns : void} beginDispatch{ Params : ContextInternal Returns : ContextInternal} beginDispatch2{ Params : Thread,ContextInternal Returns : ContextInternal} endDispatch{ Params : ContextInternal Returns : void} endDispatch2{ Params : ContextInternal Returns : void} ,maxEventLoopExecTime maxEventLoopExecTimeUnit createDatagramSocket transport isNativeTransportEnabled unavailableNativeTransportCause setPeriodic promise getInternalWorkerPool sharedTCPServers isMetricsEnabled getMetrics createEventLoopContext createEventLoopContext createEventLoopContext createWorkerContext createWorkerContext createDnsClient createDnsClient createDnsClient close deployVerticle deployVerticle deployVerticle deployVerticle undeploy deploymentIDs registerVerticleFactory unregisterVerticleFactory verticleFactories isClustered nettyEventLoopGroup getDeployment failoverCompleteHandler isKilled failDuringFailover metricsSPI resolveFile resolveAddress addressResolver nettyAddressResolverGroup fileResolver blockedThreadChecker operationComplete operationComplete run createSharedWorkerExecutor createSharedWorkerExecutor createSharedWorkerExecutor createSharedWorkerExecutor close exceptionHandler exceptionHandler closeFuture tracer addCloseHook removeCloseHook ,createThreadFactory ,,,,,,,,null
vert.x-master,io.vertx.core.impl,VertxInternal,2,1,0,0,0,true,0 ,VertxInternal MetricsProvider ,0 ,,promise{ Params :  Returns : PromiseInternal<T>} promise{ Params : Promise<T> Returns : PromiseInternal<T>} maxEventLoopExecTime{ Params :  Returns : long} maxEventLoopExecTimeUnit{ Params :  Returns : TimeUnit} getOrCreateContext{ Params :  Returns : ContextInternal} getEventLoopGroup{ Params :  Returns : EventLoopGroup} getAcceptorEventLoopGroup{ Params :  Returns : EventLoopGroup} getWorkerPool{ Params :  Returns : WorkerPool} getInternalWorkerPool{ Params :  Returns : WorkerPool} sharedHttpServers{ Params :  Returns : Map<ServerID,HttpServerImpl>} sharedNetServers{ Params :  Returns : Map<ServerID,NetServerImpl>} sharedTCPServers{ Params : Class<S> Returns : Map<ServerID,S>} metricsSPI{ Params :  Returns : VertxMetrics} transport{ Params :  Returns : Transport} createSharedResource{ Params : String,String,CloseFuture,Function<CloseFuture,C> Returns : C} getContext{ Params :  Returns : ContextInternal} createEventLoopContext{ Params : Deployment,CloseFuture,WorkerPool,ClassLoader Returns : EventLoopContext} createEventLoopContext{ Params : EventLoop,WorkerPool,ClassLoader Returns : EventLoopContext} createEventLoopContext{ Params :  Returns : EventLoopContext} createWorkerContext{ Params : Deployment,CloseFuture,WorkerPool,ClassLoader Returns : WorkerContext} createWorkerContext{ Params :  Returns : WorkerContext} createSharedWorkerExecutor{ Params : String Returns : WorkerExecutorInternal} createSharedWorkerExecutor{ Params : String,int Returns : WorkerExecutorInternal} createSharedWorkerExecutor{ Params : String,int,long Returns : WorkerExecutorInternal} createSharedWorkerExecutor{ Params : String,int,long,TimeUnit Returns : WorkerExecutorInternal} createSharedWorkerPool{ Params : String,int,long,TimeUnit Returns : WorkerPool} simulateKill{ Params :  Returns : void} getDeployment{ Params : String Returns : Deployment} failoverCompleteHandler{ Params : FailoverCompleteHandler Returns : void} isKilled{ Params :  Returns : boolean} failDuringFailover{ Params : boolean Returns : void} resolveFile{ Params : String Returns : File} executeBlockingInternal{ Params : Handler<Promise<T>> Returns : Future<T>} executeBlockingInternal{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} getClusterManager{ Params :  Returns : ClusterManager} haManager{ Params :  Returns : HAManager} resolveAddress{ Params : String Returns : Future<InetAddress>} addressResolver{ Params :  Returns : AddressResolver} fileResolver{ Params :  Returns : FileResolver} nettyAddressResolverGroup{ Params :  Returns : AddressResolverGroup<InetSocketAddress>} blockedThreadChecker{ Params :  Returns : BlockedThreadChecker} closeFuture{ Params :  Returns : CloseFuture} tracer{ Params :  Returns : VertxTracer} addCloseHook{ Params : Closeable Returns : void} removeCloseHook{ Params : Closeable Returns : void} ,getOrCreateContext createSharedWorkerExecutor createSharedWorkerExecutor createSharedWorkerExecutor createSharedWorkerExecutor ,,,,,,,,,context: , blockingCodeHandler, ordered
vert.x-master,io.vertx.core.impl,VertxThread,1,1,0,0,0,false,FastThreadLocalThread ,0 ,0 ,worker: boolean info: ThreadInfo context: ContextInternal topLevelTCCL: ClassLoader ,context{ Params :  Returns : ContextInternal} executeStart{ Params :  Returns : void} executeEnd{ Params :  Returns : void} startTime{ Params :  Returns : long} isWorker{ Params :  Returns : boolean} maxExecTime{ Params :  Returns : long} maxExecTimeUnit{ Params :  Returns : TimeUnit} ,,,,,,,,,ThreadInfo ,System: 
vert.x-master,io.vertx.core.impl,VertxWrapper,1,1,1,0,0,false,0 ,VertxInternal ,0 ,delegate: VertxInternal ,createNetServer{ Params : NetServerOptions Returns : NetServer} createNetServer{ Params :  Returns : NetServer} createNetClient{ Params : NetClientOptions Returns : NetClient} createNetClient{ Params :  Returns : NetClient} createHttpServer{ Params : HttpServerOptions Returns : HttpServer} createHttpServer{ Params :  Returns : HttpServer} createHttpClient{ Params : HttpClientOptions Returns : HttpClient} createHttpClient{ Params :  Returns : HttpClient} createDatagramSocket{ Params : DatagramSocketOptions Returns : DatagramSocket} createDatagramSocket{ Params :  Returns : DatagramSocket} fileSystem{ Params :  Returns : FileSystem} eventBus{ Params :  Returns : EventBus} createDnsClient{ Params : int,String Returns : DnsClient} createDnsClient{ Params :  Returns : DnsClient} createDnsClient{ Params : DnsClientOptions Returns : DnsClient} sharedData{ Params :  Returns : SharedData} setTimer{ Params : long,Handler<Long> Returns : long} setPeriodic{ Params : long,Handler<Long> Returns : long} setPeriodic{ Params : long,long,Handler<Long> Returns : long} cancelTimer{ Params : long Returns : boolean} runOnContext{ Params : Handler<Void> Returns : void} close{ Params :  Returns : Future<Void>} deployVerticle{ Params : Verticle Returns : Future<String>} deployVerticle{ Params : Verticle,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Class<? extends Verticle>,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Supplier<Verticle>,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : String Returns : Future<String>} deployVerticle{ Params : String,DeploymentOptions Returns : Future<String>} undeploy{ Params : String Returns : Future<Void>} deploymentIDs{ Params :  Returns : Set<String>} registerVerticleFactory{ Params : VerticleFactory Returns : void} unregisterVerticleFactory{ Params : VerticleFactory Returns : void} verticleFactories{ Params :  Returns : Set<VerticleFactory>} isClustered{ Params :  Returns : boolean} executeBlocking{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} executeBlocking{ Params : Handler<Promise<T>> Returns : Future<T>} nettyEventLoopGroup{ Params :  Returns : EventLoopGroup} isNativeTransportEnabled{ Params :  Returns : boolean} exceptionHandler{ Params : Handler<Throwable> Returns : Vertx} exceptionHandler{ Params :  Returns : Handler<Throwable>} promise{ Params :  Returns : PromiseInternal<T>} maxEventLoopExecTime{ Params :  Returns : long} maxEventLoopExecTimeUnit{ Params :  Returns : TimeUnit} getOrCreateContext{ Params :  Returns : ContextInternal} getEventLoopGroup{ Params :  Returns : EventLoopGroup} getAcceptorEventLoopGroup{ Params :  Returns : EventLoopGroup} getWorkerPool{ Params :  Returns : WorkerPool} getInternalWorkerPool{ Params :  Returns : WorkerPool} sharedHttpServers{ Params :  Returns : Map<ServerID,HttpServerImpl>} sharedNetServers{ Params :  Returns : Map<ServerID,NetServerImpl>} sharedTCPServers{ Params : Class<S> Returns : Map<ServerID,S>} metricsSPI{ Params :  Returns : VertxMetrics} transport{ Params :  Returns : Transport} createSharedResource{ Params : String,String,CloseFuture,Function<CloseFuture,C> Returns : C} getContext{ Params :  Returns : ContextInternal} createEventLoopContext{ Params : Deployment,CloseFuture,WorkerPool,ClassLoader Returns : EventLoopContext} createEventLoopContext{ Params : EventLoop,WorkerPool,ClassLoader Returns : EventLoopContext} createEventLoopContext{ Params :  Returns : EventLoopContext} createWorkerContext{ Params : Deployment,CloseFuture,WorkerPool,ClassLoader Returns : WorkerContext} createWorkerContext{ Params :  Returns : WorkerContext} createSharedWorkerExecutor{ Params : String Returns : WorkerExecutorInternal} createSharedWorkerExecutor{ Params : String,int Returns : WorkerExecutorInternal} createSharedWorkerExecutor{ Params : String,int,long Returns : WorkerExecutorInternal} createSharedWorkerExecutor{ Params : String,int,long,TimeUnit Returns : WorkerExecutorInternal} createSharedWorkerPool{ Params : String,int,long,TimeUnit Returns : WorkerPool} simulateKill{ Params :  Returns : void} getDeployment{ Params : String Returns : Deployment} failoverCompleteHandler{ Params : FailoverCompleteHandler Returns : void} isKilled{ Params :  Returns : boolean} failDuringFailover{ Params : boolean Returns : void} resolveFile{ Params : String Returns : File} executeBlockingInternal{ Params : Handler<Promise<T>> Returns : Future<T>} executeBlockingInternal{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} getClusterManager{ Params :  Returns : ClusterManager} haManager{ Params :  Returns : HAManager} resolveAddress{ Params : String Returns : Future<InetAddress>} addressResolver{ Params :  Returns : AddressResolver} fileResolver{ Params :  Returns : FileResolver} nettyAddressResolverGroup{ Params :  Returns : AddressResolverGroup<InetSocketAddress>} blockedThreadChecker{ Params :  Returns : BlockedThreadChecker} closeFuture{ Params :  Returns : CloseFuture} tracer{ Params :  Returns : VertxTracer} addCloseHook{ Params : Closeable Returns : void} removeCloseHook{ Params : Closeable Returns : void} isMetricsEnabled{ Params :  Returns : boolean} ,createNetServer createNetServer createNetClient createNetClient createHttpServer createHttpServer createHttpClient createHttpClient createDatagramSocket createDatagramSocket fileSystem eventBus createDnsClient createDnsClient createDnsClient sharedData setTimer setPeriodic setPeriodic cancelTimer runOnContext close deployVerticle deployVerticle deployVerticle deployVerticle deployVerticle deployVerticle undeploy deploymentIDs registerVerticleFactory unregisterVerticleFactory verticleFactories isClustered executeBlocking executeBlocking nettyEventLoopGroup isNativeTransportEnabled exceptionHandler exceptionHandler promise maxEventLoopExecTime maxEventLoopExecTimeUnit getOrCreateContext getEventLoopGroup getAcceptorEventLoopGroup getWorkerPool getInternalWorkerPool sharedHttpServers sharedNetServers sharedTCPServers metricsSPI transport createSharedResource getContext createEventLoopContext createEventLoopContext createEventLoopContext createWorkerContext createWorkerContext createSharedWorkerExecutor createSharedWorkerExecutor createSharedWorkerExecutor createSharedWorkerExecutor createSharedWorkerPool simulateKill getDeployment failoverCompleteHandler isKilled failDuringFailover resolveFile executeBlockingInternal executeBlockingInternal getClusterManager haManager resolveAddress addressResolver fileResolver nettyAddressResolverGroup blockedThreadChecker closeFuture tracer addCloseHook removeCloseHook isMetricsEnabled ,,,,VertxInternal ,,,,NullPointerException ,delegate: 
vert.x-master,io.vertx.core.impl,WorkerContext,1,1,0,0,0,false,ContextBase ,0 ,0 ,executor: Executor ,runOnContext{ Params : ContextInternal,Handler<Void> Returns : void} execute{ Params : ContextInternal,T,Handler<T> Returns : void} emit{ Params : ContextInternal,T,Handler<T> Returns : void} execute{ Params : ContextInternal,Runnable Returns : void} isEventLoopContext{ Params :  Returns : boolean} isWorkerContext{ Params :  Returns : boolean} executor{ Params :  Returns : Executor} run{ Params : ContextInternal,T,Handler<T> Returns : void} execute{ Params : TaskQueue,T,Handler<T> Returns : void} inThread{ Params :  Returns : boolean} ,runOnContext execute emit execute isEventLoopContext isWorkerContext executor inThread ,,,,,Executor ,,Executor ,,Context: 
vert.x-master,io.vertx.core.impl,WorkerExecutorImpl,1,0,0,0,0,false,0 ,MetricsProvider WorkerExecutorInternal ,0 ,vertx: VertxInternal pool: WorkerPool cleanable: Cleaner.Cleanable ,getMetrics{ Params :  Returns : Metrics} isMetricsEnabled{ Params :  Returns : boolean} vertx{ Params :  Returns : Vertx} getPool{ Params :  Returns : WorkerPool} executeBlocking{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} close{ Params :  Returns : Future<Void>} ,getMetrics isMetricsEnabled vertx getPool executeBlocking close ,,,,MetricsProvider WorkerExecutorInternal ,Cleaner.Cleanable ,,Cleaner.Cleanable ,,vertx: 
vert.x-master,io.vertx.core.impl,WorkerExecutorInternal,2,1,0,0,0,true,0 ,MetricsProvider WorkerExecutorInternal ,0 ,,vertx{ Params :  Returns : Vertx} getPool{ Params :  Returns : WorkerPool} ,,,,,,,,,,vertx: 
vert.x-master,io.vertx.core.impl,WorkerPool,1,1,0,0,0,false,0 ,0 ,0 ,pool: ExecutorService metrics: PoolMetrics ,executor{ Params :  Returns : ExecutorService} metrics{ Params :  Returns : PoolMetrics} close{ Params :  Returns : void} ,,,,,,PoolMetrics ,,PoolMetrics ,,pool: 
vert.x-master,io.vertx.core.json,DecodeException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.json,EncodeException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.json.impl,JsonUtil,1,1,0,0,1,false,0 ,0 ,0 ,BASE64_ENCODER: Base64.Encoder BASE64_DECODER: Base64.Decoder DEFAULT_CLONER: Function<Object, ?> ,wrapJsonValue{ Params : Object Returns : Object} deepCopy{ Params : Object,Function<Object,?> Returns : Object} asStream{ Params : Iterator<T> Returns : Stream<T>} ,,wrapJsonValue deepCopy asStream ,,,,,,,JsonObject JsonArray IllegalStateException JsonObject JsonArray ,iterable: 
vert.x-master,io.vertx.core.json.jackson,BufferDeserializer,1,0,0,0,0,false,JsonDeserializer<Buffer> ,0 ,0 ,,deserialize{ Params : JsonParser,DeserializationContext Returns : Buffer} ,deserialize ,,,,,,,,InvalidFormatException ,BASE64_DECODER: , text
vert.x-master,io.vertx.core.json.jackson,BufferSerializer,1,0,0,0,0,false,JsonSerializer<Buffer> ,0 ,0 ,,serialize{ Params : Buffer,JsonGenerator,SerializerProvider Returns : void} ,serialize ,,,,,,,,,value: 
vert.x-master,io.vertx.core.json.jackson,ByteArrayDeserializer,1,0,0,0,0,false,JsonDeserializer<byte[]> ,0 ,0 ,,deserialize{ Params : JsonParser,DeserializationContext Returns : byte[]} ,deserialize ,,,,,,,,InvalidFormatException ,BASE64_DECODER: , text
vert.x-master,io.vertx.core.json.jackson,ByteArraySerializer,1,0,0,0,0,false,JsonSerializer<byte[]> ,0 ,0 ,,serialize{ Params : byte[],JsonGenerator,SerializerProvider Returns : void} ,serialize ,,,,,,,,,BASE64_ENCODER: , value
vert.x-master,io.vertx.core.json.jackson,DatabindCodec,1,1,0,0,0,false,JacksonCodec ,0 ,0 ,mapper: ObjectMapper prettyMapper: ObjectMapper ,initialize{ Params :  Returns : void} mapper{ Params :  Returns : ObjectMapper} prettyMapper{ Params :  Returns : ObjectMapper} fromValue{ Params : Object,Class<T> Returns : T} fromValue{ Params : Object,TypeReference<T> Returns : T} fromString{ Params : String,Class<T> Returns : T} fromString{ Params : String,TypeReference<T> Returns : T} fromBuffer{ Params : Buffer,Class<T> Returns : T} fromBuffer{ Params : Buffer,TypeReference<T> Returns : T} createParser{ Params : Buffer Returns : JsonParser} createParser{ Params : String Returns : JsonParser} fromParser{ Params : JsonParser,Class<T> Returns : T} fromParser{ Params : JsonParser,TypeReference<T> Returns : T} toString{ Params : Object,boolean Returns : String} toBuffer{ Params : Object,boolean Returns : Buffer} adapt{ Params : Object Returns : Object} ,fromValue fromString fromBuffer toString toBuffer ,initialize mapper prettyMapper createParser createParser fromParser fromParser adapt ,,,,,,,ObjectMapper ObjectMapper VertxModule ByteBufInputStream DecodeException DecodeException DecodeException DecodeException DecodeException EncodeException EncodeException JsonArray JsonObject DecodeException ,e: 
vert.x-master,io.vertx.core.json.jackson,InstantDeserializer,1,0,0,0,0,false,JsonDeserializer<Instant> ,0 ,0 ,,deserialize{ Params : JsonParser,DeserializationContext Returns : Instant} ,deserialize ,,,,,,,,InvalidFormatException ,ISO_INSTANT: , text
vert.x-master,io.vertx.core.json.jackson,InstantSerializer,1,0,0,0,0,false,JsonSerializer<Instant> ,0 ,0 ,,serialize{ Params : Instant,JsonGenerator,SerializerProvider Returns : void} ,serialize ,,,,,,,,,ISO_INSTANT: , value
vert.x-master,io.vertx.core.json.jackson,JacksonCodec,1,1,0,0,0,false,0 ,JsonCodec ,0 ,factory: JsonFactory ,fromString{ Params : String,Class<T> Returns : T} fromString{ Params : String,TypeReference<T> Returns : T} fromBuffer{ Params : Buffer,Class<T> Returns : T} fromBuffer{ Params : Buffer,TypeReference<T> Returns : T} fromValue{ Params : Object,Class<T> Returns : T} fromValue{ Params : Object,TypeReference<T> Returns : T} toString{ Params : Object,boolean Returns : String} toBuffer{ Params : Object,boolean Returns : Buffer} createParser{ Params : String Returns : JsonParser} createParser{ Params : Buffer Returns : JsonParser} createGenerator{ Params : Writer,boolean Returns : JsonGenerator} createGenerator{ Params : OutputStream,boolean Returns : JsonGenerator} fromString{ Params : String Returns : Object} fromBuffer{ Params : Buffer Returns : Object} fromParser{ Params : JsonParser,Class<T> Returns : T} parseAny{ Params : JsonParser Returns : Object} parseObject{ Params : JsonParser Returns : Map<String,Object>} parseArray{ Params : JsonParser Returns : List<Object>} close{ Params : Closeable Returns : void} encodeJson{ Params : Object,JsonGenerator Returns : void} classTypeOf{ Params : TypeReference<T> Returns : Class<T>} cast{ Params : Object,Class<T> Returns : T} decodeValue{ Params : String,TypeReference<T> Returns : T} decodeValue{ Params : Buffer,TypeReference<T> Returns : T} ,fromString fromBuffer fromValue toString toBuffer ,createParser createParser createGenerator createGenerator fromParser parseAny parseObject parseArray close encodeJson classTypeOf cast decodeValue decodeValue ,,,JsonCodec ,,,,JsonFactory DecodeException DecodeException StringWriter EncodeException ByteBufOutputStream EncodeException DecodeException ByteBufInputStream DecodeException DecodeException DecodeException DecodeException DecodeException DecodeException LinkedHashMap LinkedHashMap LinkedHashMap LinkedHashMap ArrayList UnsupportedOperationException EncodeException EncodeException DecodeException DecodeException JsonObject DecodeException JsonArray DecodeException DecodeException DecodeException ,JacksonFactory.CODEC: , buf, type
vert.x-master,io.vertx.core.json.jackson,JacksonFactory,1,1,0,0,0,false,0 ,io.vertx.core.spi.JsonFactory ,0 ,INSTANCE: JacksonFactory CODEC: JacksonCodec ,codec{ Params :  Returns : JsonCodec} ,codec ,,,,JsonFactory ,,,,JacksonFactory DatabindCodec JacksonCodec ,JacksonFactory.CODEC: , buf, type
vert.x-master,io.vertx.core.json.jackson,JsonArraySerializer,1,0,0,0,0,false,JsonSerializer<JsonArray> ,0 ,0 ,,serialize{ Params : JsonArray,JsonGenerator,SerializerProvider Returns : void} ,serialize ,,,,,,,,,value: 
vert.x-master,io.vertx.core.json.jackson,JsonObjectSerializer,1,0,0,0,0,false,JsonSerializer<JsonObject> ,0 ,0 ,,serialize{ Params : JsonObject,JsonGenerator,SerializerProvider Returns : void} ,serialize ,,,,,,,,,value: 
vert.x-master,io.vertx.core.json.jackson,VertxModule,1,1,0,0,0,false,SimpleModule ,0 ,0 ,,,,,,,,,,,JsonObjectSerializer JsonArraySerializer InstantSerializer InstantDeserializer ByteArraySerializer ByteArrayDeserializer BufferSerializer BufferDeserializer ,null
vert.x-master,io.vertx.core.json,Json,1,1,0,0,0,false,0 ,0 ,0 ,CODEC: JsonCodec ,load{ Params :  Returns : io.vertx.core.spi.JsonFactory} encode{ Params : Object Returns : String} encodeToBuffer{ Params : Object Returns : Buffer} encodePrettily{ Params : Object Returns : String} decodeValue{ Params : String,Class<T> Returns : T} decodeValue{ Params : String Returns : Object} decodeValue{ Params : Buffer Returns : Object} decodeValue{ Params : Buffer,Class<T> Returns : T} ,,load encode encodeToBuffer encodePrettily decodeValue decodeValue decodeValue decodeValue ,,,,,,,,CODEC: , buf, clazz
vert.x-master,io.vertx.core.json,JsonArray,1,1,0,0,0,false,0 ,Iterable<Object> ClusterSerializable Shareable ,Iter ,list: List<Object> ,of{ Params : Object Returns : JsonArray} getString{ Params : int Returns : String} getNumber{ Params : int Returns : Number} getInteger{ Params : int Returns : Integer} getLong{ Params : int Returns : Long} getDouble{ Params : int Returns : Double} getFloat{ Params : int Returns : Float} getBoolean{ Params : int Returns : Boolean} getJsonObject{ Params : int Returns : JsonObject} getJsonArray{ Params : int Returns : JsonArray} getBinary{ Params : int Returns : byte[]} getBuffer{ Params : int Returns : Buffer} getInstant{ Params : int Returns : Instant} getValue{ Params : int Returns : Object} hasNull{ Params : int Returns : boolean} addNull{ Params :  Returns : JsonArray} add{ Params : Object Returns : JsonArray} add{ Params : int,Object Returns : JsonArray} addAll{ Params : JsonArray Returns : JsonArray} setNull{ Params : int Returns : JsonArray} set{ Params : int,Object Returns : JsonArray} contains{ Params : Object Returns : boolean} remove{ Params : Object Returns : boolean} remove{ Params : int Returns : Object} size{ Params :  Returns : int} isEmpty{ Params :  Returns : boolean} getList{ Params :  Returns : List} clear{ Params :  Returns : JsonArray} iterator{ Params :  Returns : Iterator<Object>} encode{ Params :  Returns : String} toBuffer{ Params :  Returns : Buffer} encodePrettily{ Params :  Returns : String} copy{ Params :  Returns : JsonArray} copy{ Params : Function<Object,?> Returns : JsonArray} stream{ Params :  Returns : Stream<Object>} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} fromJson{ Params : String Returns : void} fromBuffer{ Params : Buffer Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Object} remove{ Params :  Returns : void} ,iterator copy toString equals hashCode writeToBuffer readFromBuffer hasNext next remove ,of ,,,Iterable ClusterSerializable Shareable ,List<Object> ,,List<Object> ,NullPointerException DecodeException ArrayList NullPointerException NullPointerException DecodeException JsonArray JsonArray ArrayList JsonObject JsonArray Iter ArrayList JsonArray ,Json.CODEC: , buf, List.class
vert.x-master,io.vertx.core.json,Iter,3,2,0,1,0,false,0 ,Iterable<Object> ClusterSerializable Shareable ,Iter ,listIter: Iterator<Object> ,of{ Params : Object Returns : JsonArray} getString{ Params : int Returns : String} getNumber{ Params : int Returns : Number} getInteger{ Params : int Returns : Integer} getLong{ Params : int Returns : Long} getDouble{ Params : int Returns : Double} getFloat{ Params : int Returns : Float} getBoolean{ Params : int Returns : Boolean} getJsonObject{ Params : int Returns : JsonObject} getJsonArray{ Params : int Returns : JsonArray} getBinary{ Params : int Returns : byte[]} getBuffer{ Params : int Returns : Buffer} getInstant{ Params : int Returns : Instant} getValue{ Params : int Returns : Object} hasNull{ Params : int Returns : boolean} addNull{ Params :  Returns : JsonArray} add{ Params : Object Returns : JsonArray} add{ Params : int,Object Returns : JsonArray} addAll{ Params : JsonArray Returns : JsonArray} setNull{ Params : int Returns : JsonArray} set{ Params : int,Object Returns : JsonArray} contains{ Params : Object Returns : boolean} remove{ Params : Object Returns : boolean} remove{ Params : int Returns : Object} size{ Params :  Returns : int} isEmpty{ Params :  Returns : boolean} getList{ Params :  Returns : List} clear{ Params :  Returns : JsonArray} iterator{ Params :  Returns : Iterator<Object>} encode{ Params :  Returns : String} toBuffer{ Params :  Returns : Buffer} encodePrettily{ Params :  Returns : String} copy{ Params :  Returns : JsonArray} copy{ Params : Function<Object,?> Returns : JsonArray} stream{ Params :  Returns : Stream<Object>} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} fromJson{ Params : String Returns : void} fromBuffer{ Params : Buffer Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Object} remove{ Params :  Returns : void} ,iterator copy toString equals hashCode writeToBuffer readFromBuffer hasNext next remove ,of ,,,Iterator ,,,,,listIter: 
vert.x-master,io.vertx.core.json,JsonObject,1,1,0,0,0,false,0 ,Iterable<Map.Entry<String,Object>> ClusterSerializable Shareable ,Iter Entry ,map: Map<String, Object> ,of{ Params :  Returns : JsonObject} of{ Params : String,Object Returns : JsonObject} of{ Params : String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} mapFrom{ Params : Object Returns : JsonObject} mapTo{ Params : Class<T> Returns : T} getString{ Params : String Returns : String} getNumber{ Params : String Returns : Number} getInteger{ Params : String Returns : Integer} getLong{ Params : String Returns : Long} getDouble{ Params : String Returns : Double} getFloat{ Params : String Returns : Float} getBoolean{ Params : String Returns : Boolean} getJsonObject{ Params : String Returns : JsonObject} getJsonArray{ Params : String Returns : JsonArray} getBinary{ Params : String Returns : byte[]} getBuffer{ Params : String Returns : Buffer} getInstant{ Params : String Returns : Instant} getValue{ Params : String Returns : Object} getString{ Params : String,String Returns : String} getNumber{ Params : String,Number Returns : Number} getInteger{ Params : String,Integer Returns : Integer} getLong{ Params : String,Long Returns : Long} getDouble{ Params : String,Double Returns : Double} getFloat{ Params : String,Float Returns : Float} getBoolean{ Params : String,Boolean Returns : Boolean} getJsonObject{ Params : String,JsonObject Returns : JsonObject} getJsonArray{ Params : String,JsonArray Returns : JsonArray} getBinary{ Params : String,byte[] Returns : byte[]} getBuffer{ Params : String,Buffer Returns : Buffer} getInstant{ Params : String,Instant Returns : Instant} getValue{ Params : String,Object Returns : Object} containsKey{ Params : String Returns : boolean} fieldNames{ Params :  Returns : Set<String>} putNull{ Params : String Returns : JsonObject} put{ Params : String,Object Returns : JsonObject} remove{ Params : String Returns : Object} mergeIn{ Params : JsonObject Returns : JsonObject} mergeIn{ Params : JsonObject,boolean Returns : JsonObject} mergeIn{ Params : JsonObject,int Returns : JsonObject} encode{ Params :  Returns : String} encodePrettily{ Params :  Returns : String} toBuffer{ Params :  Returns : Buffer} copy{ Params :  Returns : JsonObject} copy{ Params : Function<Object,?> Returns : JsonObject} getMap{ Params :  Returns : Map<String,Object>} stream{ Params :  Returns : Stream<Map.Entry<String,Object>>} iterator{ Params :  Returns : Iterator<Map.Entry<String,Object>>} size{ Params :  Returns : int} clear{ Params :  Returns : JsonObject} isEmpty{ Params :  Returns : boolean} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} fromJson{ Params : String Returns : void} fromBuffer{ Params : Buffer Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Map.Entry<String,Object>} remove{ Params :  Returns : void} getKey{ Params :  Returns : String} getValue{ Params :  Returns : Object} setValue{ Params : Object Returns : Object} ,copy iterator toString equals hashCode writeToBuffer readFromBuffer hasNext next remove getKey getValue setValue ,of of of of of of of of of of of mapFrom ,,,Iterable ClusterSerializable Shareable ,Map<String,Object> ,,Map<String,Object> ,NullPointerException DecodeException LinkedHashMap NullPointerException NullPointerException DecodeException JsonObject JsonObject LinkedHashMap JsonObject LinkedHashMap JsonObject LinkedHashMap JsonObject LinkedHashMap JsonObject LinkedHashMap JsonObject LinkedHashMap JsonObject LinkedHashMap JsonObject LinkedHashMap JsonObject LinkedHashMap JsonObject LinkedHashMap JsonObject JsonObject JsonArray JsonObject JsonObject LinkedHashMap HashMap JsonObject Iter Entry UnsupportedOperationException ,Json.CODEC: , buf, Map.class
vert.x-master,io.vertx.core.json,Iter,3,2,0,1,0,false,0 ,Iterable<Map.Entry<String,Object>> ClusterSerializable Shareable ,Iter Entry ,mapIter: Iterator<Map.Entry<String, Object>> ,of{ Params :  Returns : JsonObject} of{ Params : String,Object Returns : JsonObject} of{ Params : String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} mapFrom{ Params : Object Returns : JsonObject} mapTo{ Params : Class<T> Returns : T} getString{ Params : String Returns : String} getNumber{ Params : String Returns : Number} getInteger{ Params : String Returns : Integer} getLong{ Params : String Returns : Long} getDouble{ Params : String Returns : Double} getFloat{ Params : String Returns : Float} getBoolean{ Params : String Returns : Boolean} getJsonObject{ Params : String Returns : JsonObject} getJsonArray{ Params : String Returns : JsonArray} getBinary{ Params : String Returns : byte[]} getBuffer{ Params : String Returns : Buffer} getInstant{ Params : String Returns : Instant} getValue{ Params : String Returns : Object} getString{ Params : String,String Returns : String} getNumber{ Params : String,Number Returns : Number} getInteger{ Params : String,Integer Returns : Integer} getLong{ Params : String,Long Returns : Long} getDouble{ Params : String,Double Returns : Double} getFloat{ Params : String,Float Returns : Float} getBoolean{ Params : String,Boolean Returns : Boolean} getJsonObject{ Params : String,JsonObject Returns : JsonObject} getJsonArray{ Params : String,JsonArray Returns : JsonArray} getBinary{ Params : String,byte[] Returns : byte[]} getBuffer{ Params : String,Buffer Returns : Buffer} getInstant{ Params : String,Instant Returns : Instant} getValue{ Params : String,Object Returns : Object} containsKey{ Params : String Returns : boolean} fieldNames{ Params :  Returns : Set<String>} putNull{ Params : String Returns : JsonObject} put{ Params : String,Object Returns : JsonObject} remove{ Params : String Returns : Object} mergeIn{ Params : JsonObject Returns : JsonObject} mergeIn{ Params : JsonObject,boolean Returns : JsonObject} mergeIn{ Params : JsonObject,int Returns : JsonObject} encode{ Params :  Returns : String} encodePrettily{ Params :  Returns : String} toBuffer{ Params :  Returns : Buffer} copy{ Params :  Returns : JsonObject} copy{ Params : Function<Object,?> Returns : JsonObject} getMap{ Params :  Returns : Map<String,Object>} stream{ Params :  Returns : Stream<Map.Entry<String,Object>>} iterator{ Params :  Returns : Iterator<Map.Entry<String,Object>>} size{ Params :  Returns : int} clear{ Params :  Returns : JsonObject} isEmpty{ Params :  Returns : boolean} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} fromJson{ Params : String Returns : void} fromBuffer{ Params : Buffer Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Map.Entry<String,Object>} remove{ Params :  Returns : void} getKey{ Params :  Returns : String} getValue{ Params :  Returns : Object} setValue{ Params : Object Returns : Object} ,copy iterator toString equals hashCode writeToBuffer readFromBuffer hasNext next remove getKey getValue setValue ,of of of of of of of of of of of mapFrom ,,,Iterator ,,,,Entry ,mapIter: 
vert.x-master,io.vertx.core.json,Entry,3,2,0,1,1,false,0 ,Iterable<Map.Entry<String,Object>> ClusterSerializable Shareable ,Iter Entry ,key: String value: Object ,of{ Params :  Returns : JsonObject} of{ Params : String,Object Returns : JsonObject} of{ Params : String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} of{ Params : String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object,String,Object Returns : JsonObject} mapFrom{ Params : Object Returns : JsonObject} mapTo{ Params : Class<T> Returns : T} getString{ Params : String Returns : String} getNumber{ Params : String Returns : Number} getInteger{ Params : String Returns : Integer} getLong{ Params : String Returns : Long} getDouble{ Params : String Returns : Double} getFloat{ Params : String Returns : Float} getBoolean{ Params : String Returns : Boolean} getJsonObject{ Params : String Returns : JsonObject} getJsonArray{ Params : String Returns : JsonArray} getBinary{ Params : String Returns : byte[]} getBuffer{ Params : String Returns : Buffer} getInstant{ Params : String Returns : Instant} getValue{ Params : String Returns : Object} getString{ Params : String,String Returns : String} getNumber{ Params : String,Number Returns : Number} getInteger{ Params : String,Integer Returns : Integer} getLong{ Params : String,Long Returns : Long} getDouble{ Params : String,Double Returns : Double} getFloat{ Params : String,Float Returns : Float} getBoolean{ Params : String,Boolean Returns : Boolean} getJsonObject{ Params : String,JsonObject Returns : JsonObject} getJsonArray{ Params : String,JsonArray Returns : JsonArray} getBinary{ Params : String,byte[] Returns : byte[]} getBuffer{ Params : String,Buffer Returns : Buffer} getInstant{ Params : String,Instant Returns : Instant} getValue{ Params : String,Object Returns : Object} containsKey{ Params : String Returns : boolean} fieldNames{ Params :  Returns : Set<String>} putNull{ Params : String Returns : JsonObject} put{ Params : String,Object Returns : JsonObject} remove{ Params : String Returns : Object} mergeIn{ Params : JsonObject Returns : JsonObject} mergeIn{ Params : JsonObject,boolean Returns : JsonObject} mergeIn{ Params : JsonObject,int Returns : JsonObject} encode{ Params :  Returns : String} encodePrettily{ Params :  Returns : String} toBuffer{ Params :  Returns : Buffer} copy{ Params :  Returns : JsonObject} copy{ Params : Function<Object,?> Returns : JsonObject} getMap{ Params :  Returns : Map<String,Object>} stream{ Params :  Returns : Stream<Map.Entry<String,Object>>} iterator{ Params :  Returns : Iterator<Map.Entry<String,Object>>} size{ Params :  Returns : int} clear{ Params :  Returns : JsonObject} isEmpty{ Params :  Returns : boolean} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} fromJson{ Params : String Returns : void} fromBuffer{ Params : Buffer Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Map.Entry<String,Object>} remove{ Params :  Returns : void} getKey{ Params :  Returns : String} getValue{ Params :  Returns : Object} setValue{ Params : Object Returns : Object} ,copy iterator toString equals hashCode writeToBuffer readFromBuffer hasNext next remove getKey getValue setValue ,of of of of of of of of of of of mapFrom ,,,Entry ,,,,UnsupportedOperationException ,mapIter: 
vert.x-master,io.vertx.core.json.pointer.impl,JsonPointerImpl,1,1,0,0,0,false,0 ,JsonPointer ,0 ,VALID_POINTER_PATTERN: Pattern startingUri: URI decodedTokens: List<String> ,parse{ Params : String Returns : ArrayList<String>} escape{ Params : String Returns : String} unescape{ Params : String Returns : String} isRootPointer{ Params :  Returns : boolean} isLocalPointer{ Params :  Returns : boolean} isParent{ Params : JsonPointer Returns : boolean} toString{ Params :  Returns : String} toURI{ Params :  Returns : URI} getURIWithoutFragment{ Params :  Returns : URI} append{ Params : String Returns : JsonPointer} append{ Params : int Returns : JsonPointer} append{ Params : List<String> Returns : JsonPointer} append{ Params : JsonPointer Returns : JsonPointer} parent{ Params :  Returns : JsonPointer} copy{ Params :  Returns : JsonPointer} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} queryOrDefault{ Params : Object,JsonPointerIterator,Object Returns : Object} tracedQuery{ Params : Object,JsonPointerIterator Returns : List<Object>} write{ Params : Object,JsonPointerIterator,Object,boolean Returns : Object} walkTillLastElement{ Params : Object,JsonPointerIterator,boolean,Consumer<Object> Returns : Object} writeLastElement{ Params : Object,JsonPointerIterator,Object Returns : boolean} removeFragment{ Params : URI Returns : URI} replaceFragment{ Params : URI,String Returns : URI} ,isRootPointer isLocalPointer isParent toString toURI getURIWithoutFragment append append append append parent copy equals hashCode queryOrDefault tracedQuery write ,,,,JsonPointer ,,,,ArrayList ArrayList IllegalArgumentException JsonPointerImpl ArrayList URI URI ,e: 
vert.x-master,io.vertx.core.json.pointer.impl,JsonPointerIteratorImpl,1,1,0,0,0,false,0 ,JsonPointerIterator ,0 ,,isObject{ Params : Object Returns : boolean} isArray{ Params : Object Returns : boolean} isNull{ Params : Object Returns : boolean} objectContainsKey{ Params : Object,String Returns : boolean} getObjectParameter{ Params : Object,String,boolean Returns : Object} getArrayElement{ Params : Object,int Returns : Object} writeObjectParameter{ Params : Object,String,Object Returns : boolean} writeArrayElement{ Params : Object,int,Object Returns : boolean} appendArrayElement{ Params : Object,Object Returns : boolean} jsonifyValue{ Params : Object Returns : Object} ,isObject isArray isNull objectContainsKey getObjectParameter getArrayElement writeObjectParameter writeArrayElement appendArrayElement ,,,,JsonPointerIterator ,,,,JsonObject JsonObject JsonArray ,((JsonArray) value): , el
vert.x-master,io.vertx.core.json.pointer,JsonPointer,2,1,0,0,0,true,0 ,JsonPointerIterator ,0 ,,isRootPointer{ Params :  Returns : boolean} isLocalPointer{ Params :  Returns : boolean} isParent{ Params : JsonPointer Returns : boolean} toString{ Params :  Returns : String} toURI{ Params :  Returns : URI} getURIWithoutFragment{ Params :  Returns : URI} append{ Params : String Returns : JsonPointer} append{ Params : int Returns : JsonPointer} append{ Params : List<String> Returns : JsonPointer} append{ Params : JsonPointer Returns : JsonPointer} parent{ Params :  Returns : JsonPointer} query{ Params : Object,JsonPointerIterator Returns : Object} queryOrDefault{ Params : Object,JsonPointerIterator,Object Returns : Object} queryJson{ Params : Object Returns : Object} queryJsonOrDefault{ Params : Object,Object Returns : Object} tracedQuery{ Params : Object,JsonPointerIterator Returns : List<Object>} write{ Params : Object,JsonPointerIterator,Object,boolean Returns : Object} writeJson{ Params : Object,Object Returns : Object} writeJson{ Params : Object,Object,boolean Returns : Object} copy{ Params :  Returns : JsonPointer} create{ Params :  Returns : JsonPointer} from{ Params : String Returns : JsonPointer} fromURI{ Params : URI Returns : JsonPointer} ,toString ,create from fromURI ,,,,,,,JsonPointerImpl JsonPointerImpl JsonPointerImpl ,: , jsonElement, JsonPointerIterator.JSON_ITERATOR, newElement, createOnMissing
vert.x-master,io.vertx.core.json.pointer,JsonPointerIterator,2,1,0,0,0,true,0 ,JsonPointerIterator ,0 ,JSON_ITERATOR: JsonPointerIterator ,isObject{ Params : Object Returns : boolean} isArray{ Params : Object Returns : boolean} isNull{ Params : Object Returns : boolean} objectContainsKey{ Params : Object,String Returns : boolean} getObjectParameter{ Params : Object,String,boolean Returns : Object} getArrayElement{ Params : Object,int Returns : Object} writeObjectParameter{ Params : Object,String,Object Returns : boolean} writeArrayElement{ Params : Object,int,Object Returns : boolean} appendArrayElement{ Params : Object,Object Returns : boolean} ,,,,,,,,,JsonPointerIteratorImpl ,: , jsonElement, JsonPointerIterator.JSON_ITERATOR, newElement, createOnMissing
vert.x-master,io.vertx.core,Launcher,1,1,0,0,0,false,VertxCommandLauncher ,VertxLifecycleHooks ,0 ,,main{ Params : String[] Returns : void} executeCommand{ Params : String,String Returns : void} afterConfigParsed{ Params : JsonObject Returns : void} beforeStartingVertx{ Params : VertxOptions Returns : void} afterStartingVertx{ Params : Vertx Returns : void} beforeDeployingVerticle{ Params : DeploymentOptions Returns : void} beforeStoppingVertx{ Params : Vertx Returns : void} afterStoppingVertx{ Params :  Returns : void} handleDeployFailed{ Params : Vertx,String,DeploymentOptions,Throwable Returns : void} ,beforeStoppingVertx afterStoppingVertx ,main executeCommand ,,,VertxLifecycleHooks ,,,,Launcher Launcher ,vertx: 
vert.x-master,io.vertx.core.logging,JULLogDelegate,1,1,0,0,0,false,0 ,LogDelegate ,0 ,logger: java.util.logging.Logger ,isWarnEnabled{ Params :  Returns : boolean} isInfoEnabled{ Params :  Returns : boolean} isDebugEnabled{ Params :  Returns : boolean} isTraceEnabled{ Params :  Returns : boolean} fatal{ Params : Object Returns : void} fatal{ Params : Object,Throwable Returns : void} error{ Params : Object Returns : void} error{ Params : Object,Object Returns : void} error{ Params : Object,Throwable Returns : void} error{ Params : Object,Throwable,Object Returns : void} warn{ Params : Object Returns : void} warn{ Params : Object,Object Returns : void} warn{ Params : Object,Throwable Returns : void} warn{ Params : Object,Throwable,Object Returns : void} info{ Params : Object Returns : void} info{ Params : Object,Object Returns : void} info{ Params : Object,Throwable Returns : void} info{ Params : Object,Throwable,Object Returns : void} debug{ Params : Object Returns : void} debug{ Params : Object,Object Returns : void} debug{ Params : Object,Throwable Returns : void} debug{ Params : Object,Throwable,Object Returns : void} trace{ Params : Object Returns : void} trace{ Params : Object,Object Returns : void} trace{ Params : Object,Throwable Returns : void} trace{ Params : Object,Throwable,Object Returns : void} log{ Params : Level,Object Returns : void} log{ Params : Level,Object,Throwable,Object Returns : void} log{ Params : Level,Object,Throwable Returns : void} unwrap{ Params :  Returns : Object} ,isWarnEnabled error error warn warn info info debug debug trace trace unwrap ,,,,LogDelegate ,java.util.logging.Logger ,,java.util.logging.Logger ,LogRecord ,: , level, message, t, (Object[]) null
vert.x-master,io.vertx.core.logging,JULLogDelegateFactory,1,1,0,0,0,false,0 ,LogDelegateFactory ,0 ,,loadConfig{ Params :  Returns : void} isAvailable{ Params :  Returns : boolean} createDelegate{ Params : String Returns : LogDelegate} ,isAvailable ,loadConfig ,,,LogDelegateFactory ,,,,JULLogDelegate ,LogManager: 
vert.x-master,io.vertx.core.logging,Log4j2LogDelegate,1,1,0,0,0,false,0 ,LogDelegate ,0 ,logger: ExtendedLogger FQCN: String ,isWarnEnabled{ Params :  Returns : boolean} isInfoEnabled{ Params :  Returns : boolean} isDebugEnabled{ Params :  Returns : boolean} isTraceEnabled{ Params :  Returns : boolean} fatal{ Params : Object Returns : void} fatal{ Params : Object,Throwable Returns : void} error{ Params : Object Returns : void} error{ Params : Object,Object Returns : void} error{ Params : Object,Throwable Returns : void} error{ Params : Object,Throwable,Object Returns : void} warn{ Params : Object Returns : void} warn{ Params : Object,Object Returns : void} warn{ Params : Object,Throwable Returns : void} warn{ Params : Object,Throwable,Object Returns : void} info{ Params : Object Returns : void} info{ Params : Object,Object Returns : void} info{ Params : Object,Throwable Returns : void} info{ Params : Object,Throwable,Object Returns : void} debug{ Params : Object Returns : void} debug{ Params : Object,Object Returns : void} debug{ Params : Object,Throwable Returns : void} debug{ Params : Object,Throwable,Object Returns : void} trace{ Params : Object Returns : void} trace{ Params : Object,Object Returns : void} trace{ Params : Object,Throwable Returns : void} trace{ Params : Object,Throwable,Object Returns : void} log{ Params : Level,Object Returns : void} log{ Params : Level,Object,Throwable Returns : void} log{ Params : Level,String,Object Returns : void} log{ Params : Level,String,Throwable,Object Returns : void} unwrap{ Params :  Returns : Object} ,isWarnEnabled error error warn warn info info debug debug trace trace unwrap ,,,,LogDelegate ,,,,FormattedMessage ,logger: , FQCN, level, null, new FormattedMessage(message, params), t
vert.x-master,io.vertx.core.logging,Log4j2LogDelegateFactory,1,1,0,0,0,false,0 ,LogDelegateFactory ,0 ,,isAvailable{ Params :  Returns : boolean} createDelegate{ Params : String Returns : LogDelegate} ,isAvailable ,,,,LogDelegateFactory ,,,,Log4j2LogDelegate ,LogManager: , Log4j2LogDelegateFactory.class
vert.x-master,io.vertx.core.logging,Logger,1,1,0,0,0,false,0 ,0 ,0 ,delegate: LogDelegate ,isWarnEnabled{ Params :  Returns : boolean} isInfoEnabled{ Params :  Returns : boolean} isDebugEnabled{ Params :  Returns : boolean} isTraceEnabled{ Params :  Returns : boolean} fatal{ Params : Object Returns : void} fatal{ Params : Object,Throwable Returns : void} error{ Params : Object Returns : void} error{ Params : Object,Throwable Returns : void} error{ Params : Object,Object Returns : void} error{ Params : Object,Throwable,Object Returns : void} warn{ Params : Object Returns : void} warn{ Params : Object,Throwable Returns : void} warn{ Params : Object,Object Returns : void} warn{ Params : Object,Throwable,Object Returns : void} info{ Params : Object Returns : void} info{ Params : Object,Throwable Returns : void} info{ Params : Object,Object Returns : void} info{ Params : Object,Throwable,Object Returns : void} debug{ Params : Object Returns : void} debug{ Params : Object,Throwable Returns : void} debug{ Params : Object,Object Returns : void} debug{ Params : Object,Throwable,Object Returns : void} trace{ Params : Object Returns : void} trace{ Params : Object,Throwable Returns : void} trace{ Params : Object,Object Returns : void} trace{ Params : Object,Throwable,Object Returns : void} getDelegate{ Params :  Returns : LogDelegate} ,,,,,,,,,,delegate: , message, t, objects
vert.x-master,io.vertx.core.logging,LoggerFactory,1,1,0,0,0,false,0 ,0 ,0 ,LOGGER_DELEGATE_FACTORY_CLASS_NAME: String delegateFactory: LogDelegateFactory loggers: ConcurrentMap<String, Logger> ,initialise{ Params :  Returns : void} configureWith{ Params : String,boolean,ClassLoader Returns : boolean} getLogger{ Params : Class<?> Returns : Logger} getLogger{ Params : String Returns : Logger} removeLogger{ Params : String Returns : void} ,,initialise configureWith getLogger getLogger removeLogger ,,,,,,,ConcurrentHashMap JULLogDelegateFactory Logger ,loggers: , name
vert.x-master,io.vertx.core.logging,SLF4JLogDelegate,1,1,0,0,0,false,0 ,LogDelegate ,0 ,EMPTY_PARAMETERS: Object FQCN: String logger: Logger ,isWarnEnabled{ Params :  Returns : boolean} isInfoEnabled{ Params :  Returns : boolean} isDebugEnabled{ Params :  Returns : boolean} isTraceEnabled{ Params :  Returns : boolean} fatal{ Params : Object Returns : void} fatal{ Params : Object,Throwable Returns : void} error{ Params : Object Returns : void} error{ Params : Object,Object Returns : void} error{ Params : Object,Throwable Returns : void} error{ Params : Object,Throwable,Object Returns : void} warn{ Params : Object Returns : void} warn{ Params : Object,Object Returns : void} warn{ Params : Object,Throwable Returns : void} warn{ Params : Object,Throwable,Object Returns : void} info{ Params : Object Returns : void} info{ Params : Object,Object Returns : void} info{ Params : Object,Throwable Returns : void} info{ Params : Object,Throwable,Object Returns : void} debug{ Params : Object Returns : void} debug{ Params : Object,Object Returns : void} debug{ Params : Object,Throwable Returns : void} debug{ Params : Object,Throwable,Object Returns : void} trace{ Params : Object Returns : void} trace{ Params : Object,Object Returns : void} trace{ Params : Object,Throwable Returns : void} trace{ Params : Object,Throwable,Object Returns : void} log{ Params : int,Object Returns : void} log{ Params : int,Object,Throwable Returns : void} log{ Params : int,Object,Throwable,Object Returns : void} unwrap{ Params :  Returns : Object} ,isWarnEnabled error error warn warn info info trace trace unwrap ,,,,LogDelegate ,Logger ,,Logger ,IllegalArgumentException ,logger: , msg, parameters
vert.x-master,io.vertx.core.logging,SLF4JLogDelegateFactory,1,1,0,0,0,false,0 ,LogDelegateFactory ,0 ,,isAvailable{ Params :  Returns : boolean} createDelegate{ Params : String Returns : LogDelegate} ,isAvailable ,,,,LogDelegateFactory ,,,,PrintStream ByteArrayOutputStream SLF4JLogDelegate ,LoggerFactory: 
vert.x-master,io.vertx.core.logging,VertxLoggerFormatter,1,1,0,0,0,false,java.util.logging.Formatter ,0 ,0 ,,format{ Params : LogRecord Returns : String} fromMillis{ Params : long Returns : OffsetDateTime} ,format ,fromMillis ,,,,,,,StringBuilder StringWriter PrintWriter ,ZoneId: 
vert.x-master,io.vertx.core.metrics.impl,DummyVertxMetrics,1,1,0,0,0,false,0 ,VertxMetrics ,DummyEventBusMetrics DummyHttpServerMetrics DummyHttpClientMetrics DummyClientMetrics DummyTCPMetrics DummyDatagramMetrics DummyWorkerPoolMetrics ,INSTANCE: DummyVertxMetrics ,,,,,,VertxMetrics ,,,,DummyVertxMetrics DummyEventBusMetrics DummyHttpServerMetrics DummyHttpClientMetrics DummyClientMetrics DummyTCPMetrics DummyDatagramMetrics DummyWorkerPoolMetrics ,null
vert.x-master,io.vertx.core.metrics.impl,DummyEventBusMetrics,3,1,0,1,0,false,0 ,VertxMetrics ,DummyEventBusMetrics DummyHttpServerMetrics DummyHttpClientMetrics DummyClientMetrics DummyTCPMetrics DummyDatagramMetrics DummyWorkerPoolMetrics ,INSTANCE: DummyEventBusMetrics ,,,,,,EventBusMetrics ,,,,DummyEventBusMetrics ,null
vert.x-master,io.vertx.core.metrics.impl,DummyHttpServerMetrics,3,1,0,1,0,false,0 ,VertxMetrics ,DummyEventBusMetrics DummyHttpServerMetrics DummyHttpClientMetrics DummyClientMetrics DummyTCPMetrics DummyDatagramMetrics DummyWorkerPoolMetrics ,INSTANCE: DummyHttpServerMetrics ,,,,,,HttpServerMetrics ,,,,DummyHttpServerMetrics ,null
vert.x-master,io.vertx.core.metrics.impl,DummyHttpClientMetrics,3,1,0,1,0,false,0 ,VertxMetrics ,DummyEventBusMetrics DummyHttpServerMetrics DummyHttpClientMetrics DummyClientMetrics DummyTCPMetrics DummyDatagramMetrics DummyWorkerPoolMetrics ,INSTANCE: DummyHttpClientMetrics ,,,,,,HttpClientMetrics ,,,,DummyHttpClientMetrics ,null
vert.x-master,io.vertx.core.metrics.impl,DummyClientMetrics,3,1,0,1,0,false,0 ,VertxMetrics ,DummyEventBusMetrics DummyHttpServerMetrics DummyHttpClientMetrics DummyClientMetrics DummyTCPMetrics DummyDatagramMetrics DummyWorkerPoolMetrics ,INSTANCE: DummyClientMetrics ,,,,,,ClientMetrics ,,,,DummyClientMetrics ,null
vert.x-master,io.vertx.core.metrics.impl,DummyTCPMetrics,3,1,0,1,0,false,0 ,VertxMetrics ,DummyEventBusMetrics DummyHttpServerMetrics DummyHttpClientMetrics DummyClientMetrics DummyTCPMetrics DummyDatagramMetrics DummyWorkerPoolMetrics ,INSTANCE: DummyTCPMetrics ,,,,,,TCPMetrics ,,,,DummyTCPMetrics ,null
vert.x-master,io.vertx.core.metrics.impl,DummyDatagramMetrics,3,1,0,1,0,false,0 ,VertxMetrics ,DummyEventBusMetrics DummyHttpServerMetrics DummyHttpClientMetrics DummyClientMetrics DummyTCPMetrics DummyDatagramMetrics DummyWorkerPoolMetrics ,INSTANCE: DummyDatagramMetrics ,,,,,,DatagramSocketMetrics ,,,,DummyDatagramMetrics ,null
vert.x-master,io.vertx.core.metrics.impl,DummyWorkerPoolMetrics,3,1,0,1,0,false,0 ,VertxMetrics ,DummyEventBusMetrics DummyHttpServerMetrics DummyHttpClientMetrics DummyClientMetrics DummyTCPMetrics DummyDatagramMetrics DummyWorkerPoolMetrics ,INSTANCE: DummyWorkerPoolMetrics ,,,,,,PoolMetrics ,,,,DummyWorkerPoolMetrics ,null
vert.x-master,io.vertx.core.metrics,Measured,2,1,0,0,0,true,0 ,VertxMetrics ,0 ,,isMetricsEnabled{ Params :  Returns : boolean} ,,,,,,,,,,ZoneId: 
vert.x-master,io.vertx.core.metrics,MetricsOptions,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_METRICS_ENABLED: boolean enabled: boolean json: JsonObject factory: VertxMetricsFactory ,isEnabled{ Params :  Returns : boolean} setEnabled{ Params : boolean Returns : MetricsOptions} getFactory{ Params :  Returns : VertxMetricsFactory} setFactory{ Params : VertxMetricsFactory Returns : MetricsOptions} toJson{ Params :  Returns : JsonObject} toString{ Params :  Returns : String} ,toString ,,,,,VertxMetricsFactory ,,VertxMetricsFactory ,JsonObject ,MetricsOptionsConverter: , this, json
vert.x-master,io.vertx.core,MultiMap,2,1,0,0,0,true,0 ,0 ,0 ,,caseInsensitiveMultiMap{ Params :  Returns : MultiMap} get{ Params : CharSequence Returns : String} get{ Params : String Returns : String} getAll{ Params : String Returns : List<String>} getAll{ Params : CharSequence Returns : List<String>} forEach{ Params : BiConsumer<String,String> Returns : void} accept{ Params : Map.Entry<String,String> Returns : void} entries{ Params :  Returns : List<Map.Entry<String,String>>} contains{ Params : String Returns : boolean} contains{ Params : CharSequence Returns : boolean} contains{ Params : String,String,boolean Returns : boolean} contains{ Params : CharSequence,CharSequence,boolean Returns : boolean} isEmpty{ Params :  Returns : boolean} names{ Params :  Returns : Set<String>} add{ Params : String,String Returns : MultiMap} add{ Params : CharSequence,CharSequence Returns : MultiMap} add{ Params : String,Iterable<String> Returns : MultiMap} add{ Params : CharSequence,Iterable<CharSequence> Returns : MultiMap} addAll{ Params : MultiMap Returns : MultiMap} addAll{ Params : Map<String,String> Returns : MultiMap} set{ Params : String,String Returns : MultiMap} set{ Params : CharSequence,CharSequence Returns : MultiMap} set{ Params : String,Iterable<String> Returns : MultiMap} set{ Params : CharSequence,Iterable<CharSequence> Returns : MultiMap} setAll{ Params : MultiMap Returns : MultiMap} setAll{ Params : Map<String,String> Returns : MultiMap} remove{ Params : String Returns : MultiMap} remove{ Params : CharSequence Returns : MultiMap} clear{ Params :  Returns : MultiMap} size{ Params :  Returns : int} ,accept ,caseInsensitiveMultiMap ,,,,,,,Consumer ArrayList ,: , name
vert.x-master,io.vertx.core.net,ClientOptionsBase,1,1,1,0,0,false,TCPSSLOptions ,0 ,0 ,DEFAULT_CONNECT_TIMEOUT: int DEFAULT_TRUST_ALL: boolean DEFAULT_METRICS_NAME: String connectTimeout: int trustAll: boolean metricsName: String proxyOptions: ProxyOptions localAddress: String nonProxyHosts: List<String> ,toJson{ Params :  Returns : JsonObject} init{ Params :  Returns : void} isTrustAll{ Params :  Returns : boolean} setTrustAll{ Params : boolean Returns : ClientOptionsBase} getConnectTimeout{ Params :  Returns : int} setConnectTimeout{ Params : int Returns : ClientOptionsBase} getMetricsName{ Params :  Returns : String} setMetricsName{ Params : String Returns : ClientOptionsBase} setProxyOptions{ Params : ProxyOptions Returns : ClientOptionsBase} getProxyOptions{ Params :  Returns : ProxyOptions} getNonProxyHosts{ Params :  Returns : List<String>} setNonProxyHosts{ Params : List<String> Returns : ClientOptionsBase} addNonProxyHost{ Params : String Returns : ClientOptionsBase} getLocalAddress{ Params :  Returns : String} setLocalAddress{ Params : String Returns : ClientOptionsBase} setLogActivity{ Params : boolean Returns : ClientOptionsBase} setActivityLogDataFormat{ Params : ByteBufFormat Returns : ClientOptionsBase} setTcpNoDelay{ Params : boolean Returns : ClientOptionsBase} setTcpKeepAlive{ Params : boolean Returns : ClientOptionsBase} setSoLinger{ Params : int Returns : ClientOptionsBase} setIdleTimeout{ Params : int Returns : ClientOptionsBase} setReadIdleTimeout{ Params : int Returns : ClientOptionsBase} setWriteIdleTimeout{ Params : int Returns : ClientOptionsBase} setIdleTimeoutUnit{ Params : TimeUnit Returns : ClientOptionsBase} setSsl{ Params : boolean Returns : ClientOptionsBase} setKeyCertOptions{ Params : KeyCertOptions Returns : ClientOptionsBase} setKeyStoreOptions{ Params : JksOptions Returns : ClientOptionsBase} setPfxKeyCertOptions{ Params : PfxOptions Returns : ClientOptionsBase} setPemKeyCertOptions{ Params : PemKeyCertOptions Returns : ClientOptionsBase} setTrustOptions{ Params : TrustOptions Returns : ClientOptionsBase} setTrustStoreOptions{ Params : JksOptions Returns : ClientOptionsBase} setPfxTrustOptions{ Params : PfxOptions Returns : ClientOptionsBase} setPemTrustOptions{ Params : PemTrustOptions Returns : ClientOptionsBase} setUseAlpn{ Params : boolean Returns : ClientOptionsBase} setSslEngineOptions{ Params : SSLEngineOptions Returns : ClientOptionsBase} setJdkSslEngineOptions{ Params : JdkSSLEngineOptions Returns : ClientOptionsBase} setOpenSslEngineOptions{ Params : OpenSSLEngineOptions Returns : ClientOptionsBase} setSendBufferSize{ Params : int Returns : ClientOptionsBase} setReceiveBufferSize{ Params : int Returns : ClientOptionsBase} setReuseAddress{ Params : boolean Returns : ClientOptionsBase} setReusePort{ Params : boolean Returns : ClientOptionsBase} setTrafficClass{ Params : int Returns : ClientOptionsBase} addEnabledCipherSuite{ Params : String Returns : ClientOptionsBase} removeEnabledCipherSuite{ Params : String Returns : ClientOptionsBase} addCrlPath{ Params : String Returns : ClientOptionsBase} addCrlValue{ Params : Buffer Returns : ClientOptionsBase} addEnabledSecureTransportProtocol{ Params : String Returns : ClientOptionsBase} removeEnabledSecureTransportProtocol{ Params : String Returns : ClientOptionsBase} setTcpFastOpen{ Params : boolean Returns : ClientOptionsBase} setTcpCork{ Params : boolean Returns : ClientOptionsBase} setTcpQuickAck{ Params : boolean Returns : ClientOptionsBase} setTcpUserTimeout{ Params : int Returns : ClientOptionsBase} ,setLogActivity setActivityLogDataFormat setTcpNoDelay setTcpKeepAlive setSoLinger setIdleTimeout setReadIdleTimeout setWriteIdleTimeout setIdleTimeoutUnit setSsl setKeyCertOptions setKeyStoreOptions setPfxKeyCertOptions setPemKeyCertOptions setTrustOptions setTrustStoreOptions setPfxTrustOptions setPemTrustOptions setUseAlpn setSslEngineOptions setJdkSslEngineOptions setOpenSslEngineOptions setSendBufferSize setReceiveBufferSize setReuseAddress setReusePort setTrafficClass addEnabledCipherSuite removeEnabledCipherSuite addCrlPath addCrlValue addEnabledSecureTransportProtocol removeEnabledSecureTransportProtocol setTcpFastOpen setTcpCork setTcpQuickAck setTcpUserTimeout ,,,,,List<String> ,,List<String> ,ProxyOptions ArrayList IllegalArgumentException ArrayList ,super: , tcpUserTimeout
vert.x-master,io.vertx.core.net.impl,ChannelProvider,1,1,0,0,1,false,0 ,0 ,0 ,bootstrap: Bootstrap sslContextProvider: SslChannelProvider context: ContextInternal proxyOptions: ProxyOptions applicationProtocol: String handler: Handler<Channel> ,proxyOptions{ Params : ProxyOptions Returns : ChannelProvider} handler{ Params : Handler<Channel> Returns : ChannelProvider} applicationProtocol{ Params :  Returns : String} connect{ Params : SocketAddress,SocketAddress,String,boolean,boolean Returns : Future<Channel>} connect{ Params : Handler<Channel>,SocketAddress,SocketAddress,String,boolean,boolean,Promise<Channel> Returns : void} initSSL{ Params : Handler<Channel>,SocketAddress,String,boolean,boolean,Channel,Promise<Channel> Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} handleConnect{ Params : Handler<Channel>,SocketAddress,SocketAddress,String,boolean,boolean,Promise<Channel> Returns : void} initChannel{ Params : Channel Returns : void} connected{ Params : Handler<Channel>,Channel,boolean,Promise<Channel> Returns : void} handleProxyConnect{ Params : Handler<Channel>,SocketAddress,SocketAddress,String,boolean,boolean,Promise<Channel> Returns : void} initChannel{ Params : Channel Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} ,userEventTriggered exceptionCaught initChannel initChannel userEventTriggered exceptionCaught ,,,,,Handler<Channel> ,,Handler<Channel> ,ChannelInboundHandlerAdapter SSLHandshakeException ChannelInitializer InetSocketAddress HttpProxyHandler HttpProxyHandler Socks5ProxyHandler Socks5ProxyHandler Socks4ProxyHandler Socks4ProxyHandler ChannelInitializer ChannelInboundHandlerAdapter ,dnsRes: 
vert.x-master,io.vertx.core.net.impl,CleanableNetClient,1,1,0,0,0,false,0 ,NetClientInternal ,Action ,client: NetClientInternal cleanable: Cleaner.Cleanable action: Action ,run{ Params :  Returns : void} unwrap{ Params :  Returns : NetClientInternal} connect{ Params : int,String Returns : Future<NetSocket>} connect{ Params : int,String,String Returns : Future<NetSocket>} connect{ Params : SocketAddress Returns : Future<NetSocket>} connect{ Params : SocketAddress,String Returns : Future<NetSocket>} close{ Params :  Returns : Future<Void>} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} connectInternal{ Params : ProxyOptions,SocketAddress,SocketAddress,String,boolean,boolean,boolean,Promise<NetSocket>,ContextInternal,int Returns : void} closeFuture{ Params :  Returns : Future<Void>} shutdown{ Params : long,TimeUnit Returns : Future<Void>} close{ Params : long,TimeUnit Returns : Future<Void>} getMetrics{ Params :  Returns : Metrics} ,run connect connect connect connect close updateSSLOptions close connectInternal closeFuture shutdown close getMetrics ,,,,NetClientInternal ,Action ,,Action ,Action ,client: 
vert.x-master,io.vertx.core.net.impl,Action,3,0,0,1,0,false,0 ,NetClientInternal ,Action ,client: NetClientInternal timeout: long timeUnit: TimeUnit ,run{ Params :  Returns : void} unwrap{ Params :  Returns : NetClientInternal} connect{ Params : int,String Returns : Future<NetSocket>} connect{ Params : int,String,String Returns : Future<NetSocket>} connect{ Params : SocketAddress Returns : Future<NetSocket>} connect{ Params : SocketAddress,String Returns : Future<NetSocket>} close{ Params :  Returns : Future<Void>} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} connectInternal{ Params : ProxyOptions,SocketAddress,SocketAddress,String,boolean,boolean,boolean,Promise<NetSocket>,ContextInternal,int Returns : void} closeFuture{ Params :  Returns : Future<Void>} shutdown{ Params : long,TimeUnit Returns : Future<Void>} close{ Params : long,TimeUnit Returns : Future<Void>} getMetrics{ Params :  Returns : Metrics} ,run connect connect connect connect close updateSSLOptions close connectInternal closeFuture shutdown close getMetrics ,,,,Runnable ,TimeUnit ,,TimeUnit ,,client: , timeout, timeUnit
vert.x-master,io.vertx.core.net.impl,ConnectionBase,1,1,1,0,0,false,0 ,0 ,0 ,METRICS_REPORTED_BYTES_LOW_MASK: long METRICS_REPORTED_BYTES_HIGH_MASK: long CLOSED_EXCEPTION: VertxException REMOTE_ADDRESS_OVERRIDE: AttributeKey<SocketAddress> LOCAL_ADDRESS_OVERRIDE: AttributeKey<SocketAddress> log: Logger MAX_REGION_SIZE: int voidPromise: VoidChannelPromise vertx: VertxInternal chctx: ChannelHandlerContext context: ContextInternal exceptionHandler: Handler<Throwable> closeHandler: Handler<Void> writeInProgress: int metric: Object remoteAddress: SocketAddress realRemoteAddress: SocketAddress localAddress: SocketAddress realLocalAddress: SocketAddress closePromise: ChannelPromise closeFuture: Future<Void> remainingBytesRead: long remainingBytesWritten: long read: boolean needsFlush: boolean closed: boolean ,closeFuture{ Params :  Returns : Future<Void>} fail{ Params : Throwable Returns : void} close{ Params : ChannelPromise Returns : void} endReadAndFlush{ Params :  Returns : void} read{ Params : Object Returns : void} write{ Params : Object,Boolean,ChannelPromise Returns : void} writeClose{ Params : PromiseInternal<Void> Returns : void} wrap{ Params : FutureListener<Void> Returns : ChannelPromise} writeToChannel{ Params : Object,FutureListener<Void> Returns : void} writeToChannel{ Params : Object,ChannelPromise Returns : void} writeToChannel{ Params : Object,boolean,ChannelPromise Returns : void} queueForWrite{ Params : Object,boolean,ChannelPromise Returns : void} writeToChannel{ Params : Object Returns : void} flush{ Params :  Returns : void} flush{ Params : ChannelPromise Returns : void} isNotWritable{ Params :  Returns : boolean} close{ Params :  Returns : Future<Void>} closeHandler{ Params : Handler<Void> Returns : ConnectionBase} exceptionHandler{ Params : Handler<Throwable> Returns : ConnectionBase} exceptionHandler{ Params :  Returns : Handler<Throwable>} doPause{ Params :  Returns : void} doResume{ Params :  Returns : void} doSetWriteQueueMaxSize{ Params : int Returns : void} channel{ Params :  Returns : Channel} channelHandlerContext{ Params :  Returns : ChannelHandlerContext} getContext{ Params :  Returns : ContextInternal} metric{ Params : Object Returns : void} metric{ Params :  Returns : Object} metrics{ Params :  Returns : NetworkMetrics} handleException{ Params : Throwable Returns : void} handleClosed{ Params :  Returns : void} checkCloseHandler{ Params : AsyncResult<Void> Returns : void} handleEvent{ Params : Object Returns : void} handleIdle{ Params : IdleStateEvent Returns : void} handleInterestedOpsChanged{ Params :  Returns : void} supportsFileRegion{ Params :  Returns : boolean} reportBytesRead{ Params : Object Returns : void} doReportBytesRead{ Params : Object,NetworkMetrics Returns : void} sizeof{ Params : Object Returns : long} reportBytesRead{ Params : long Returns : void} reportsBytesWritten{ Params : Object Returns : void} reportBytesWritten{ Params : long Returns : void} flushBytesRead{ Params :  Returns : void} flushBytesWritten{ Params :  Returns : void} sendFileRegion{ Params : RandomAccessFile,long,long,ChannelPromise Returns : void} sendFile{ Params : RandomAccessFile,long,long Returns : ChannelFuture} isSsl{ Params :  Returns : boolean} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} peerCertificates{ Params :  Returns : List<Certificate>} indicatedServerName{ Params :  Returns : String} channelFuture{ Params :  Returns : ChannelPromise} remoteName{ Params :  Returns : String} channelRemoteAddress{ Params :  Returns : SocketAddress} socketAdressOverride{ Params : AttributeKey<SocketAddress> Returns : SocketAddress} remoteAddress{ Params :  Returns : SocketAddress} remoteAddress{ Params : boolean Returns : SocketAddress} channelLocalAddress{ Params :  Returns : SocketAddress} localAddress{ Params :  Returns : SocketAddress} localAddress{ Params : boolean Returns : SocketAddress} handleMessage{ Params : Object Returns : void} ,,,endReadAndFlush read writeToChannel writeToChannel writeToChannel flush flush channel channelHandlerContext getContext metric metric reportBytesRead reportBytesRead reportsBytesWritten reportBytesWritten ,metrics handleInterestedOpsChanged ,,boolean ,,boolean ,VertxException VoidChannelPromise WriteBufferWaterMark IllegalArgumentException IllegalArgumentException DefaultFileRegion DefaultFileRegion ChunkedNioFile ,: 
vert.x-master,io.vertx.core.net.impl,HAProxyMessageCompletionHandler,1,1,0,0,0,false,MessageToMessageDecoder<HAProxyMessage> ,0 ,0 ,UNSUPPORTED_PROTOCOL_EXCEPTION: IOException log: Logger proxyProtocolCodecFound: boolean promise: Promise<Channel> ,canUseProxyProtocol{ Params : boolean Returns : boolean} decode{ Params : ChannelHandlerContext,HAProxyMessage,List<Object> Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} createAddress{ Params : HAProxyProxiedProtocol,String,int Returns : SocketAddress} ,decode exceptionCaught userEventTriggered ,canUseProxyProtocol ,,,,Promise<Channel> ,,Promise<Channel> ,IOException IllegalStateException ,SocketAddress: , sourceAddress
vert.x-master,io.vertx.core.net.impl,KeyStoreHelper,1,1,0,0,0,false,0 ,0 ,0 ,DUMMY_PASSWORD: String DUMMY_CERT_ALIAS: String BEGIN_PATTERN: Pattern END_PATTERN: Pattern password: String store: KeyStore aliasPassword: String wildcardMgrFactoryMap: Map<String, KeyManagerFactory> mgrFactoryMap: Map<String, KeyManagerFactory> trustMgrMap: Map<String, TrustManagerFactory> ,getClientAliases{ Params : String,Principal[] Returns : String[]} chooseClientAlias{ Params : String[],Principal[],Socket Returns : String} getServerAliases{ Params : String,Principal[] Returns : String[]} chooseServerAlias{ Params : String,Principal[],Socket Returns : String} getCertificateChain{ Params : String Returns : X509Certificate[]} getPrivateKey{ Params : String Returns : PrivateKey} toKeyManagerFactory{ Params : X509KeyManager Returns : KeyManagerFactory} getKeyMgrFactory{ Params :  Returns : KeyManagerFactory} keyPassword{ Params : String,String Returns : char[]} getKeyMgrFactory{ Params : String Returns : KeyManagerFactory} getKeyMgr{ Params :  Returns : KeyManager[]} getTrustMgr{ Params : String Returns : TrustManager[]} getTrustMgrFactory{ Params : VertxInternal Returns : TrustManagerFactory} getTrustMgrs{ Params : VertxInternal Returns : TrustManager[]} store{ Params :  Returns : KeyStore} getX509CertificateCommonNames{ Params : String Returns : List<String>} loadKeyStore{ Params : String,String,String,Supplier<Buffer>,String Returns : KeyStore} loadKeyCert{ Params : List<Buffer>,List<Buffer> Returns : KeyStore} loadPrivateKey{ Params : Buffer Returns : PrivateKey} getECKeyFactory{ Params :  Returns : KeyFactory} loadCA{ Params : Stream<Buffer> Returns : KeyStore} loadPems{ Params : Buffer,BiFunction<String,byte[],Collection<P>> Returns : List<P>} loadCerts{ Params : Buffer Returns : X509Certificate[]} createEmptyKeyStore{ Params :  Returns : KeyStore} ,getClientAliases chooseClientAlias getServerAliases chooseServerAlias getCertificateChain getPrivateKey ,toKeyManagerFactory getX509CertificateCommonNames loadKeyStore loadKeyCert loadPrivateKey getECKeyFactory loadCA loadPems loadCerts createEmptyKeyStore ,,,,Map<String,TrustManagerFactory> ,,Map<String,TrustManagerFactory> ,HashMap HashMap HashMap ArrayList X509KeyManager UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ArrayList LdapName ByteArrayInputStream IllegalArgumentException VertxException VertxException PrivateKeyEntry PasswordProtection RuntimeException PKCS8EncodedKeySpec PKCS8EncodedKeySpec VertxException RuntimeException ArrayList RuntimeException RuntimeException RuntimeException RuntimeException ByteArrayInputStream VertxException RuntimeException KeyStoreException ,keyStore: , null, null
vert.x-master,io.vertx.core.net.impl,NetClientBuilder,1,1,0,0,0,false,0 ,0 ,0 ,vertx: VertxInternal options: NetClientOptions metrics: TCPMetrics ,metrics{ Params : TCPMetrics Returns : NetClientBuilder} build{ Params :  Returns : NetClientInternal} ,,,,,,TCPMetrics ,,TCPMetrics ,NetClientImpl ,keyStore: , null, null
vert.x-master,io.vertx.core.net.impl,NetClientImpl,1,0,0,0,0,false,0 ,NetClientInternal ,0 ,log: Logger idleTimeout: int readIdleTimeout: int writeIdleTimeout: int idleTimeoutUnit: TimeUnit logEnabled: boolean vertx: VertxInternal options: NetClientOptions sslHelper: SSLHelper sslChannelProvider: AtomicReference<Future<SslChannelProvider>> channelGroup: ChannelGroup metrics: TCPMetrics closeEvent: ShutdownEvent graceFuture: ChannelGroupFuture closeSequence: CloseSequence proxyFilter: Predicate<SocketAddress> ,initChannel{ Params : ChannelPipeline Returns : void} connect{ Params : int,String Returns : Future<NetSocket>} connect{ Params : int,String,String Returns : Future<NetSocket>} connect{ Params : SocketAddress Returns : Future<NetSocket>} connect{ Params : SocketAddress,String Returns : Future<NetSocket>} connect{ Params : ContextInternal,SocketAddress,String Returns : Future<NetSocket>} doShutdown{ Params : Promise<Void> Returns : void} doGrace{ Params : Promise<Void> Returns : void} doClose{ Params : Promise<Void> Returns : void} close{ Params : Promise<Void> Returns : void} closeFuture{ Params :  Returns : Future<Void>} shutdown{ Params : long,TimeUnit Returns : Future<Void>} close{ Params : long,TimeUnit Returns : Future<Void>} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : Metrics} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} connect{ Params : SocketAddress,String,Promise<NetSocket>,ContextInternal Returns : void} connectInternal{ Params : ProxyOptions,SocketAddress,SocketAddress,String,boolean,boolean,boolean,Promise<NetSocket>,ContextInternal,int Returns : void} connectInternal2{ Params : ProxyOptions,SocketAddress,SocketAddress,SslChannelProvider,String,boolean,boolean,boolean,Promise<NetSocket>,ContextInternal,int Returns : void} connected{ Params : ContextInternal,Channel,Promise<NetSocket>,SocketAddress,SslChannelProvider,String,boolean Returns : void} failed{ Params : ContextInternal,Channel,Throwable,Promise<NetSocket> Returns : void} ,connect connect connect connect close closeFuture shutdown close isMetricsEnabled getMetrics updateSSLOptions ,,,,NetClientInternal ,Predicate<SocketAddress> ,,Predicate<SocketAddress> ,AtomicReference CloseSequence DefaultChannelGroup NetClientOptions SSLHelper LoggingHandler ChunkedWriteHandler IdleStateHandler ShutdownEvent ShutdownEvent ShutdownEvent SSLOptions IllegalStateException IllegalStateException Bootstrap ChannelProvider NetSocketImpl ,context: , th, connectHandler::tryFail
vert.x-master,io.vertx.core.net.impl,NetClientInternal,2,1,0,0,0,true,0 ,NetClientInternal ,0 ,,connectInternal{ Params : ProxyOptions,SocketAddress,SocketAddress,String,boolean,boolean,boolean,Promise<NetSocket>,ContextInternal,int Returns : void} close{ Params :  Returns : Future<Void>} closeFuture{ Params :  Returns : Future<Void>} shutdown{ Params : long,TimeUnit Returns : Future<Void>} close{ Params : long,TimeUnit Returns : Future<Void>} ,close ,,,,,,,,,: , 0L, TimeUnit.SECONDS
vert.x-master,io.vertx.core.net.impl,NetServerImpl,1,1,0,0,0,false,TCPServerBase ,Closeable MetricsProvider NetServer ,NetServerWorker NetSocketStream ,demand: long handler: Handler<NetSocket> endHandler: Handler<Void> exceptionHandler: Handler<Throwable> ,pauseAccepting{ Params :  Returns : void} resumeAccepting{ Params :  Returns : void} fetchAccepting{ Params : long Returns : void} accept{ Params :  Returns : boolean} connectHandler{ Params :  Returns : Handler<NetSocket>} connectHandler{ Params : Handler<NetSocket> Returns : NetServer} exceptionHandler{ Params : Handler<Throwable> Returns : NetServer} createMetrics{ Params : SocketAddress Returns : TCPMetrics<?>} close{ Params :  Returns : Future<Void>} childHandler{ Params : ContextInternal,SocketAddress Returns : BiConsumer<Channel,SslChannelProvider>} listen{ Params : SocketAddress Returns : Future<NetServer>} listen{ Params :  Returns : Future<NetServer>} close{ Params : Promise<Void> Returns : void} isClosed{ Params :  Returns : boolean} accept{ Params : Channel,SslChannelProvider Returns : void} configurePipeline{ Params : Channel,SslChannelProvider Returns : void} handleException{ Params : Throwable Returns : void} connected{ Params : Channel,SslChannelProvider Returns : void} initChannel{ Params : ChannelPipeline,boolean Returns : void} handler{ Params : Handler<NetSocket> Returns : NetSocketStream} pause{ Params :  Returns : NetSocketStream} resume{ Params :  Returns : NetSocketStream} fetch{ Params : long Returns : ReadStream<NetSocket>} endHandler{ Params : Handler<Void> Returns : NetSocketStream} exceptionHandler{ Params : Handler<Throwable> Returns : NetSocketStream} ,connectHandler connectHandler exceptionHandler createMetrics childHandler listen listen close accept handler pause resume fetch endHandler exceptionHandler ,,,,Closeable MetricsProvider NetServer ,Handler<Throwable> ,,Handler<Throwable> ,IllegalStateException IllegalStateException NetServerWorker NullPointerException IllegalStateException HAProxyMessageDecoder IdleStateHandler HAProxyMessageCompletionHandler SslHandshakeCompletionHandler NetSocketImpl LoggingHandler ChunkedWriteHandler IdleStateHandler ,options: 
vert.x-master,io.vertx.core.net.impl,NetServerWorker,3,2,0,0,0,false,TCPServerBase ,Closeable MetricsProvider NetServer ,NetServerWorker NetSocketStream ,context: ContextInternal connectionHandler: Handler<NetSocket> exceptionHandler: Handler<Throwable> ,pauseAccepting{ Params :  Returns : void} resumeAccepting{ Params :  Returns : void} fetchAccepting{ Params : long Returns : void} accept{ Params :  Returns : boolean} connectHandler{ Params :  Returns : Handler<NetSocket>} connectHandler{ Params : Handler<NetSocket> Returns : NetServer} exceptionHandler{ Params : Handler<Throwable> Returns : NetServer} createMetrics{ Params : SocketAddress Returns : TCPMetrics<?>} close{ Params :  Returns : Future<Void>} childHandler{ Params : ContextInternal,SocketAddress Returns : BiConsumer<Channel,SslChannelProvider>} listen{ Params : SocketAddress Returns : Future<NetServer>} listen{ Params :  Returns : Future<NetServer>} close{ Params : Promise<Void> Returns : void} isClosed{ Params :  Returns : boolean} accept{ Params : Channel,SslChannelProvider Returns : void} configurePipeline{ Params : Channel,SslChannelProvider Returns : void} handleException{ Params : Throwable Returns : void} connected{ Params : Channel,SslChannelProvider Returns : void} initChannel{ Params : ChannelPipeline,boolean Returns : void} handler{ Params : Handler<NetSocket> Returns : NetSocketStream} pause{ Params :  Returns : NetSocketStream} resume{ Params :  Returns : NetSocketStream} fetch{ Params : long Returns : ReadStream<NetSocket>} endHandler{ Params : Handler<Void> Returns : NetSocketStream} exceptionHandler{ Params : Handler<Throwable> Returns : NetSocketStream} ,connectHandler connectHandler exceptionHandler createMetrics childHandler listen listen close accept handler pause resume fetch endHandler exceptionHandler ,,,,BiConsumer ,Handler<Throwable> ,,Handler<Throwable> ,HAProxyMessageDecoder IdleStateHandler HAProxyMessageCompletionHandler SslHandshakeCompletionHandler NetSocketImpl ,ch: 
vert.x-master,io.vertx.core.net.impl,NetSocketStream,3,2,0,0,0,false,TCPServerBase ,Closeable MetricsProvider NetServer ,NetServerWorker NetSocketStream ,,pauseAccepting{ Params :  Returns : void} resumeAccepting{ Params :  Returns : void} fetchAccepting{ Params : long Returns : void} accept{ Params :  Returns : boolean} connectHandler{ Params :  Returns : Handler<NetSocket>} connectHandler{ Params : Handler<NetSocket> Returns : NetServer} exceptionHandler{ Params : Handler<Throwable> Returns : NetServer} createMetrics{ Params : SocketAddress Returns : TCPMetrics<?>} close{ Params :  Returns : Future<Void>} childHandler{ Params : ContextInternal,SocketAddress Returns : BiConsumer<Channel,SslChannelProvider>} listen{ Params : SocketAddress Returns : Future<NetServer>} listen{ Params :  Returns : Future<NetServer>} close{ Params : Promise<Void> Returns : void} isClosed{ Params :  Returns : boolean} accept{ Params : Channel,SslChannelProvider Returns : void} configurePipeline{ Params : Channel,SslChannelProvider Returns : void} handleException{ Params : Throwable Returns : void} connected{ Params : Channel,SslChannelProvider Returns : void} initChannel{ Params : ChannelPipeline,boolean Returns : void} handler{ Params : Handler<NetSocket> Returns : NetSocketStream} pause{ Params :  Returns : NetSocketStream} resume{ Params :  Returns : NetSocketStream} fetch{ Params : long Returns : ReadStream<NetSocket>} endHandler{ Params : Handler<Void> Returns : NetSocketStream} exceptionHandler{ Params : Handler<Throwable> Returns : NetSocketStream} ,connectHandler connectHandler exceptionHandler createMetrics childHandler listen listen close accept handler pause resume fetch endHandler exceptionHandler ,,,,ReadStream ,,,,,: , amount
vert.x-master,io.vertx.core.net.impl,NetSocketImpl,1,1,0,0,0,false,ConnectionBase ,NetSocketInternal ,DataMessageHandler ,log: Logger writeHandlerID: String sslChannelProvider: SslChannelProvider remoteAddress: SocketAddress metrics: TCPMetrics pending: InboundBuffer<Object> negotiatedApplicationLayerProtocol: String endHandler: Handler<Void> drainHandler: Handler<Void> registration: MessageConsumer handler: Handler<Buffer> messageHandler: Handler<Object> eventHandler: Handler<Object> ,registerEventBusHandler{ Params :  Returns : void} unregisterEventBusHandler{ Params :  Returns : void} metrics{ Params :  Returns : TCPMetrics} writeHandlerID{ Params :  Returns : String} writeMessage{ Params : Object Returns : Future<Void>} applicationLayerProtocol{ Params :  Returns : String} write{ Params : Buffer Returns : Future<Void>} write{ Params : String Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} handler{ Params :  Returns : Handler<Buffer>} handler{ Params : Handler<Buffer> Returns : NetSocket} messageHandler{ Params :  Returns : Handler<Object>} messageHandler{ Params : Handler<Object> Returns : NetSocketInternal} eventHandler{ Params : Handler<Object> Returns : NetSocketInternal} pause{ Params :  Returns : NetSocket} fetch{ Params : long Returns : NetSocket} resume{ Params :  Returns : NetSocket} setWriteQueueMaxSize{ Params : int Returns : NetSocket} writeQueueFull{ Params :  Returns : boolean} endHandler{ Params :  Returns : Handler<Void>} endHandler{ Params : Handler<Void> Returns : NetSocket} drainHandler{ Params : Handler<Void> Returns : NetSocket} sendFile{ Params : String,long,long Returns : Future<Void>} exceptionHandler{ Params : Handler<Throwable> Returns : NetSocketImpl} closeHandler{ Params : Handler<Void> Returns : NetSocketImpl} upgradeToSsl{ Params :  Returns : Future<Void>} upgradeToSsl{ Params : String Returns : Future<Void>} handleInterestedOpsChanged{ Params :  Returns : void} end{ Params :  Returns : Future<Void>} handleClosed{ Params :  Returns : void} handleMessage{ Params : Object Returns : void} handleEvent{ Params : Object Returns : void} handle{ Params : Object Returns : void} handleInvalid{ Params : Object Returns : void} callDrainHandler{ Params :  Returns : void} ,metrics writeHandlerID writeMessage applicationLayerProtocol write write write handler messageHandler eventHandler pause fetch resume setWriteQueueMaxSize writeQueueFull endHandler drainHandler sendFile closeHandler upgradeToSsl upgradeToSsl handleInterestedOpsChanged end handleClosed handleMessage handleEvent handle ,,,,NetSocketInternal ,Handler<Object> ,,Handler<Object> ,DataMessageHandler InboundBuffer DataMessageHandler RandomAccessFile SslHandshakeCompletionHandler ,drainHandler: , null
vert.x-master,io.vertx.core.net.impl,DataMessageHandler,3,2,0,0,0,false,ConnectionBase ,NetSocketInternal ,DataMessageHandler ,,registerEventBusHandler{ Params :  Returns : void} unregisterEventBusHandler{ Params :  Returns : void} metrics{ Params :  Returns : TCPMetrics} writeHandlerID{ Params :  Returns : String} writeMessage{ Params : Object Returns : Future<Void>} applicationLayerProtocol{ Params :  Returns : String} write{ Params : Buffer Returns : Future<Void>} write{ Params : String Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} handler{ Params :  Returns : Handler<Buffer>} handler{ Params : Handler<Buffer> Returns : NetSocket} messageHandler{ Params :  Returns : Handler<Object>} messageHandler{ Params : Handler<Object> Returns : NetSocketInternal} eventHandler{ Params : Handler<Object> Returns : NetSocketInternal} pause{ Params :  Returns : NetSocket} fetch{ Params : long Returns : NetSocket} resume{ Params :  Returns : NetSocket} setWriteQueueMaxSize{ Params : int Returns : NetSocket} writeQueueFull{ Params :  Returns : boolean} endHandler{ Params :  Returns : Handler<Void>} endHandler{ Params : Handler<Void> Returns : NetSocket} drainHandler{ Params : Handler<Void> Returns : NetSocket} sendFile{ Params : String,long,long Returns : Future<Void>} exceptionHandler{ Params : Handler<Throwable> Returns : NetSocketImpl} closeHandler{ Params : Handler<Void> Returns : NetSocketImpl} upgradeToSsl{ Params :  Returns : Future<Void>} upgradeToSsl{ Params : String Returns : Future<Void>} handleInterestedOpsChanged{ Params :  Returns : void} end{ Params :  Returns : Future<Void>} handleClosed{ Params :  Returns : void} handleMessage{ Params : Object Returns : void} handleEvent{ Params : Object Returns : void} handle{ Params : Object Returns : void} handleInvalid{ Params : Object Returns : void} callDrainHandler{ Params :  Returns : void} ,metrics writeHandlerID writeMessage applicationLayerProtocol write write write handler messageHandler eventHandler pause fetch resume setWriteQueueMaxSize writeQueueFull endHandler drainHandler sendFile closeHandler upgradeToSsl upgradeToSsl handleInterestedOpsChanged end handleClosed handleMessage handleEvent handle ,,,,Handler ,,,,,refCounter: 
vert.x-master,io.vertx.core.net.impl,NetSocketInternal,2,1,0,0,0,true,ConnectionBase ,NetSocketInternal ,0 ,,channelHandlerContext{ Params :  Returns : ChannelHandlerContext} writeMessage{ Params : Object Returns : Future<Void>} messageHandler{ Params : Handler<Object> Returns : NetSocketInternal} eventHandler{ Params : Handler<Object> Returns : NetSocketInternal} ,,,,,,,,,,refCounter: 
vert.x-master,io.vertx.core.net.impl.pkcs1,PrivateKeyParser,1,1,0,0,0,false,0 ,0 ,DerParser Asn1Object ,OID_RSA_PUBLIC_KEY: byte OID_EC_PUBLIC_KEY: byte ,oidToString{ Params : byte[] Returns : String} getECParameterSpec{ Params : String Returns : ECParameterSpec} getPKCS8EncodedKeyAlgorithm{ Params : byte[] Returns : String} getECKeySpec{ Params : byte[] Returns : ECPrivateKeySpec} getRSAKeySpec{ Params : byte[] Returns : RSAPrivateCrtKeySpec} readByte{ Params :  Returns : int} readBytes{ Params : int Returns : byte[]} read{ Params :  Returns : Asn1Object} getLength{ Params :  Returns : int} getType{ Params :  Returns : int} getLength{ Params :  Returns : int} getValue{ Params :  Returns : byte[]} isConstructed{ Params :  Returns : boolean} getParser{ Params :  Returns : DerParser} getInteger{ Params :  Returns : BigInteger} getObjectIdentifier{ Params :  Returns : byte[]} getString{ Params :  Returns : String} ,,oidToString getECParameterSpec getPKCS8EncodedKeyAlgorithm getECKeySpec getRSAKeySpec ,,,,,,,StringBuilder IllegalArgumentException ECGenParameterSpec VertxException DerParser VertxException VertxException VertxException VertxException DerParser VertxException VertxException VertxException VertxException ECPrivateKeySpec BigInteger DerParser VertxException RSAPrivateCrtKeySpec VertxException VertxException Asn1Object VertxException BigInteger VertxException DerParser VertxException BigInteger VertxException VertxException VertxException String VertxException ,parser: 
vert.x-master,io.vertx.core.net.impl.pkcs1,DerParser,3,0,0,1,0,false,0 ,0 ,DerParser Asn1Object ,UNIVERSAL: int APPLICATION: int CONTEXT: int PRIVATE: int CONSTRUCTED: int ANY: int BOOLEAN: int INTEGER: int BIT_STRING: int OCTET_STRING: int NULL: int OBJECT_IDENTIFIER: int REAL: int ENUMERATED: int SEQUENCE: int SET: int NUMERIC_STRING: int PRINTABLE_STRING: int VIDEOTEX_STRING: int IA5_STRING: int GRAPHIC_STRING: int ISO646_STRING: int GENERAL_STRING: int UTF8_STRING: int UNIVERSAL_STRING: int BMP_STRING: int UTC_TIME: int in: Buffer pos: int ,oidToString{ Params : byte[] Returns : String} getECParameterSpec{ Params : String Returns : ECParameterSpec} getPKCS8EncodedKeyAlgorithm{ Params : byte[] Returns : String} getECKeySpec{ Params : byte[] Returns : ECPrivateKeySpec} getRSAKeySpec{ Params : byte[] Returns : RSAPrivateCrtKeySpec} readByte{ Params :  Returns : int} readBytes{ Params : int Returns : byte[]} read{ Params :  Returns : Asn1Object} getLength{ Params :  Returns : int} getType{ Params :  Returns : int} getLength{ Params :  Returns : int} getValue{ Params :  Returns : byte[]} isConstructed{ Params :  Returns : boolean} getParser{ Params :  Returns : DerParser} getInteger{ Params :  Returns : BigInteger} getObjectIdentifier{ Params :  Returns : byte[]} getString{ Params :  Returns : String} ,,oidToString getECParameterSpec getPKCS8EncodedKeyAlgorithm getECKeySpec getRSAKeySpec ,,,,int ,,int ,VertxException VertxException Asn1Object VertxException BigInteger ,new BigInteger(1, bytes): 
vert.x-master,io.vertx.core.net.impl.pkcs1,Asn1Object,3,0,0,1,0,false,0 ,0 ,DerParser Asn1Object ,type: int length: int value: byte tag: int ,oidToString{ Params : byte[] Returns : String} getECParameterSpec{ Params : String Returns : ECParameterSpec} getPKCS8EncodedKeyAlgorithm{ Params : byte[] Returns : String} getECKeySpec{ Params : byte[] Returns : ECPrivateKeySpec} getRSAKeySpec{ Params : byte[] Returns : RSAPrivateCrtKeySpec} readByte{ Params :  Returns : int} readBytes{ Params : int Returns : byte[]} read{ Params :  Returns : Asn1Object} getLength{ Params :  Returns : int} getType{ Params :  Returns : int} getLength{ Params :  Returns : int} getValue{ Params :  Returns : byte[]} isConstructed{ Params :  Returns : boolean} getParser{ Params :  Returns : DerParser} getInteger{ Params :  Returns : BigInteger} getObjectIdentifier{ Params :  Returns : byte[]} getString{ Params :  Returns : String} ,,oidToString getECParameterSpec getPKCS8EncodedKeyAlgorithm getECKeySpec getRSAKeySpec ,,,,,,,VertxException DerParser VertxException BigInteger VertxException VertxException VertxException String VertxException ,: 
vert.x-master,io.vertx.core.net.impl.pool,CombinerExecutor,1,1,0,0,0,false,0 ,Executor<S> ,0 ,q: Queue<Action<S>> s: AtomicInteger state: S current: ThreadLocal<Task> ,submit{ Params : Action<S> Returns : void} pollAndExecute{ Params : Task Returns : Task} merge{ Params : Task,Task Returns : void} ,submit ,merge ,,,Executor ,ThreadLocal<Task> ,,ThreadLocal<Task> ,AtomicInteger ThreadLocal ,: , head, task
vert.x-master,io.vertx.core.net.impl.pool,ConnectionManager,1,1,0,0,0,false,0 ,0 ,0 ,endpointMap: Map<K, Endpoint<C>> ,forEach{ Params : Consumer<Endpoint<C>> Returns : void} getConnection{ Params : ContextInternal,K,EndpointProvider<C> Returns : Future<C>} getConnection{ Params : ContextInternal,K,EndpointProvider<C>,long Returns : Future<C>} close{ Params :  Returns : void} ,,,,,,Map<K,Endpoint<C>> ,,Map<K,Endpoint<C>> ,ConcurrentHashMap ,endpoint: 
vert.x-master,io.vertx.core.net.impl.pool,ConnectionPool,2,1,0,0,0,true,0 ,0 ,0 ,EVENT_LOOP_CONTEXT_PROVIDER: Function<ContextInternal, EventLoopContext> ,pool{ Params : PoolConnector<C>,int[] Returns : ConnectionPool<C>} pool{ Params : PoolConnector<C>,int[],int Returns : ConnectionPool<C>} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,int,Handler<AsyncResult<Lease<C>>> Returns : void} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int,Handler<AsyncResult<Lease<C>>> Returns : void} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} cancel{ Params : PoolWaiter<C>,Handler<AsyncResult<Boolean>> Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} evict{ Params : Predicate<C>,Handler<AsyncResult<List<C>>> Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} close{ Params : Handler<AsyncResult<List<Future<C>>>> Returns : void} size{ Params :  Returns : int} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} ,,pool pool ,,,,,,,SimpleConnectionPool SimpleConnectionPool ,: 
vert.x-master,io.vertx.core.net.impl.pool,ConnectResult,1,1,0,0,0,false,0 ,0 ,0 ,conn: C concurrency: long capacity: long ,connection{ Params :  Returns : C} concurrency{ Params :  Returns : long} weight{ Params :  Returns : long} capacity{ Params :  Returns : long} ,,,,,,long ,,long ,,: 
vert.x-master,io.vertx.core.net.impl.pool,Endpoint,1,1,1,0,0,false,0 ,0 ,0 ,dispose: Runnable closed: boolean disposed: boolean pendingRequestCount: long refCount: long ,getConnection{ Params : ContextInternal,long Returns : Future<C>} requestConnection{ Params : ContextInternal,long Returns : Future<C>} incRefCount{ Params :  Returns : boolean} decRefCount{ Params :  Returns : boolean} disposeInternal{ Params :  Returns : void} checkDispose{ Params :  Returns : boolean} dispose{ Params :  Returns : void} close{ Params :  Returns : void} ,,,,requestConnection ,,long ,,long ,IllegalStateException ,: 
vert.x-master,io.vertx.core.net.impl.pool,EndpointProvider,2,1,0,0,0,true,0 ,0 ,0 ,,create{ Params : ContextInternal,Runnable Returns : Endpoint<C>} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.net.impl.pool,Executor,2,1,0,0,0,true,0 ,0 ,Action ,,execute{ Params : S Returns : Task} submit{ Params : Action<S> Returns : void} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.net.impl.pool,Action,3,0,0,0,0,true,0 ,0 ,Action ,,execute{ Params : S Returns : Task} submit{ Params : Action<S> Returns : void} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.net.impl.pool,Lease,2,1,0,0,0,true,0 ,0 ,0 ,,get{ Params :  Returns : T} recycle{ Params :  Returns : void} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.net.impl.pool,PoolConnection,2,1,0,0,0,true,0 ,0 ,0 ,,context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.net.impl.pool,PoolConnector,2,1,0,0,0,true,0 ,0 ,Listener ,,connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<C>>} isValid{ Params : C Returns : boolean} onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.net.impl.pool,Listener,3,0,0,0,0,true,0 ,0 ,Listener ,,connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<C>>} isValid{ Params : C Returns : boolean} onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.net.impl.pool,PoolWaiter,1,1,0,0,0,false,0 ,0 ,Listener ,NULL_LISTENER: Listener listener: PoolWaiter.Listener<C> context: ContextInternal capacity: int handler: Promise<Lease<C>> prev: PoolWaiter<C> next: PoolWaiter<C> disposed: boolean queued: boolean ,onEnqueue{ Params : PoolWaiter<C> Returns : void} onConnect{ Params : PoolWaiter<C> Returns : void} context{ Params :  Returns : ContextInternal} ,,,,,,,,,Listener ,: 
vert.x-master,io.vertx.core.net.impl.pool,Listener,3,1,0,0,0,true,0 ,0 ,Listener ,,onEnqueue{ Params : PoolWaiter<C> Returns : void} onConnect{ Params : PoolWaiter<C> Returns : void} context{ Params :  Returns : ContextInternal} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.net.impl.pool,SemaphoreExecutor,1,1,0,0,0,false,0 ,Executor<S> ,0 ,lock: Lock state: S ,submit{ Params : Action<S> Returns : void} ,submit ,,,,Executor ,S ,,S ,ReentrantLock ,post: 
vert.x-master,io.vertx.core.net.impl.pool,SimpleConnectionPool,1,1,0,0,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,POOL_CLOSED: Future SAME_EVENT_LOOP_SELECTOR: BiFunction<PoolWaiter, List<PoolConnection>, PoolConnection> FIRST_AVAILABLE_SELECTOR: BiFunction<PoolWaiter, List<PoolConnection>, PoolConnection> connector: PoolConnector<C> maxWaiters: int maxCapacity: int capacityFactors: int sync: Executor<SimpleConnectionPool<C>> list: ListImpl closed: boolean selector: BiFunction<PoolWaiter<C>, List<PoolConnection<C>>, PoolConnection<C>> contextProvider: Function<ContextInternal, EventLoopContext> fallbackSelector: BiFunction<PoolWaiter<C>, List<PoolConnection<C>>, PoolConnection<C>> slots: Slot<C> size: int capacity: int waiters: Waiters<C> requests: int ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,ConnectionPool ,int ,,int ,ListImpl IllegalArgumentException CombinerExecutor Waiters ConnectSuccess ConnectFailed Task LeaseImpl LeaseImpl Task Task Slot Task LeaseImpl Task SetConcurrency Remove Task ArrayList ArrayList Task Evict Task LeaseImpl Task Slot Task LeaseImpl Task Task Task ConnectionPoolTooBusyException LazyFuture Acquire LazyFuture Acquire Cancel Task LeaseImpl Task IllegalStateException Recycle Task ArrayList Task Close PoolWaiter IllegalStateException IllegalStateException ArrayList Iterator NoSuchElementException ArrayList UnsupportedOperationException UnsupportedOperationException ,promise: 
vert.x-master,io.vertx.core.net.impl.pool,Slot,3,0,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,pool: SimpleConnectionPool<C> context: EventLoopContext result: Promise<C> initiator: PoolWaiter<C> connection: C index: int usage: int concurrency: long capacity: int ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Listener PoolConnection ,int ,,int ,,pool: , this, concurrency
vert.x-master,io.vertx.core.net.impl.pool,ConnectSuccess,3,2,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,slot: Slot<C> result: ConnectResult<C> waiter: PoolWaiter<C> ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Action ,PoolWaiter<C> ,,PoolWaiter<C> ,Task LeaseImpl LeaseImpl Task ,slot.result: , slot.connection
vert.x-master,io.vertx.core.net.impl.pool,ConnectFailed,3,2,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,removed: Slot<C> cause: Throwable waiter: PoolWaiter<C> ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Action ,PoolWaiter<C> ,,PoolWaiter<C> ,Task ,removed.result: , cause
vert.x-master,io.vertx.core.net.impl.pool,Remove,3,2,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,removed: Slot<C> ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Action ,,,,Slot Task ,pool: , slot, waiter
vert.x-master,io.vertx.core.net.impl.pool,SetConcurrency,3,2,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,slot: Slot<C> concurrency: long ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Action ,long ,,long ,LeaseImpl Task ,lease: 
vert.x-master,io.vertx.core.net.impl.pool,Evict,3,2,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,predicate: Predicate<C> handler: Promise<List<C>> ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Action ,Promise<List<C>> ,,Promise<List<C>> ,Task ArrayList ArrayList Task ,Future: , res
vert.x-master,io.vertx.core.net.impl.pool,Acquire,3,2,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Action ,,,,Task LeaseImpl Task Slot Task LeaseImpl Task Task Task ConnectionPoolTooBusyException ,fut: , handler
vert.x-master,io.vertx.core.net.impl.pool,Cancel,3,2,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,waiter: PoolWaiter<C> handler: Promise<Boolean> cancelled: boolean ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Action ,boolean ,,boolean ,Task ,Future: , cancelled
vert.x-master,io.vertx.core.net.impl.pool,LeaseImpl,3,0,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,handler: Handler<AsyncResult<Lease<C>>> slot: Slot<C> connection: C recycled: boolean ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Lease ,boolean ,,boolean ,,fut: , handler
vert.x-master,io.vertx.core.net.impl.pool,Recycle,3,2,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,slot: Slot<C> ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Action ,Slot<C> ,,Slot<C> ,LeaseImpl Task ,lease: 
vert.x-master,io.vertx.core.net.impl.pool,Close,3,2,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,handler: Promise<List<Future<C>>> ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Action ,Promise<List<Future<C>>> ,,Promise<List<Future<C>>> ,Task ArrayList Task ,Future: , list
vert.x-master,io.vertx.core.net.impl.pool,Waiters,3,2,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,head: PoolWaiter<C> size: int ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Iterable ,int ,,int ,PoolWaiter IllegalStateException IllegalStateException ArrayList Iterator NoSuchElementException ,this: , lst::add
vert.x-master,io.vertx.core.net.impl.pool,ListImpl,3,0,0,0,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,,,,,,this: , lst::add
vert.x-master,io.vertx.core.net.impl.pool,LazyFuture,3,0,0,1,0,false,0 ,ConnectionPool<C> ,Slot ConnectSuccess ConnectFailed Remove SetConcurrency Evict Acquire Cancel LeaseImpl Recycle Close Waiters ListImpl LazyFuture ,handlers: List<Handler<AsyncResult<T>>> fut: Future<T> ,onRemove{ Params :  Returns : void} onConcurrencyChange{ Params : long Returns : void} context{ Params :  Returns : ContextInternal} get{ Params :  Returns : C} usage{ Params :  Returns : int} available{ Params :  Returns : long} concurrency{ Params :  Returns : long} connectionSelector{ Params : BiFunction<PoolWaiter<C>,List<PoolConnection<C>>,PoolConnection<C>> Returns : ConnectionPool<C>} contextProvider{ Params : Function<ContextInternal,EventLoopContext> Returns : ConnectionPool<C>} execute{ Params : Executor.Action<SimpleConnectionPool<C>> Returns : void} size{ Params :  Returns : int} connect{ Params : Slot<C>,PoolWaiter<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} setConcurrency{ Params : Slot<C>,long Returns : void} remove{ Params : Slot<C> Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} evict{ Params : Predicate<C> Returns : Future<List<C>>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} acquire{ Params : ContextInternal,int Returns : Future<Lease<C>>} acquire{ Params : ContextInternal,PoolWaiter.Listener<C>,int Returns : Future<Lease<C>>} cancel{ Params : PoolWaiter<C> Returns : Future<Boolean>} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} get{ Params :  Returns : C} recycle{ Params :  Returns : void} emit{ Params :  Returns : void} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} recycle{ Params : LeaseImpl<C> Returns : void} waiters{ Params :  Returns : int} capacity{ Params :  Returns : int} requests{ Params :  Returns : int} execute{ Params : SimpleConnectionPool<C> Returns : Task} run{ Params :  Returns : void} run{ Params :  Returns : void} close{ Params :  Returns : Future<List<Future<C>>>} poll{ Params :  Returns : PoolWaiter<C>} addLast{ Params : PoolWaiter<C> Returns : void} addFirst{ Params : PoolWaiter<C> Returns : void} remove{ Params : PoolWaiter<C> Returns : boolean} clear{ Params :  Returns : List<PoolWaiter<C>>} size{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<PoolWaiter<C>>} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : PoolWaiter<C>} get{ Params : int Returns : PoolConnection<C>} size{ Params :  Returns : int} tryComplete{ Params : T Returns : boolean} tryFail{ Params : Throwable Returns : boolean} future{ Params :  Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} addListener{ Params : Listener<T> Returns : void} ,onRemove onConcurrencyChange context get usage available concurrency connectionSelector contextProvider execute run run run execute run execute run execute run run evict execute run run run run run run acquire acquire cancel execute run run get recycle execute run requests execute run run close iterator hasNext next get size tryComplete tryFail future handle isComplete onComplete result cause succeeded failed addListener ,,,,Promise ,Future<T> ,,Future<T> ,ArrayList UnsupportedOperationException UnsupportedOperationException ,ar: 
vert.x-master,io.vertx.core.net.impl.pool,Task,1,1,1,0,0,false,0 ,0 ,0 ,prev: Task next: Task ,run{ Params :  Returns : void} ,,,,run ,,,,,,ar: 
vert.x-master,io.vertx.core.net.impl,ProxyFilter,2,1,0,0,0,true,0 ,0 ,0 ,DEFAULT_PROXY_FILTER: ProxyFilter ,nonProxyHosts{ Params : List<String> Returns : ProxyFilter} ,,nonProxyHosts ,,,,,,,,filterElt: , host
vert.x-master,io.vertx.core.net.impl,SelfSignedCertificateImpl,1,1,0,0,0,false,0 ,SelfSignedCertificate ,0 ,certificate: io.netty.handler.ssl.util.SelfSignedCertificate ,keyCertOptions{ Params :  Returns : PemKeyCertOptions} trustOptions{ Params :  Returns : PemTrustOptions} privateKeyPath{ Params :  Returns : String} certificatePath{ Params :  Returns : String} delete{ Params :  Returns : void} ,keyCertOptions trustOptions privateKeyPath certificatePath delete ,,,,SelfSignedCertificate ,io.netty.handler.ssl.util.SelfSignedCertificate ,,io.netty.handler.ssl.util.SelfSignedCertificate ,SelfSignedCertificate VertxException SelfSignedCertificate VertxException PemKeyCertOptions PemTrustOptions ,certificate: 
vert.x-master,io.vertx.core.net.impl,ServerChannelLoadBalancer,1,0,0,0,0,false,ChannelInitializer<Channel> ,0 ,WorkerList ,workers: VertxEventLoopGroup workerMap: ConcurrentMap<EventLoop, WorkerList> channelGroup: ChannelGroup hasHandlers: boolean ,workers{ Params :  Returns : VertxEventLoopGroup} hasHandlers{ Params :  Returns : boolean} initChannel{ Params : Channel Returns : void} chooseInitializer{ Params : EventLoop Returns : Handler<Channel>} addWorker{ Params : EventLoop,Handler<Channel> Returns : void} removeWorker{ Params : EventLoop,Handler<Channel> Returns : boolean} chooseHandler{ Params :  Returns : Handler<Channel>} addWorker{ Params : Handler<Channel> Returns : void} removeWorker{ Params : Handler<Channel> Returns : boolean} isEmpty{ Params :  Returns : boolean} checkPos{ Params :  Returns : void} close{ Params :  Returns : void} ,initChannel ,,,,,boolean ,,boolean ,ConcurrentHashMap VertxEventLoopGroup DefaultChannelGroup WorkerList CopyOnWriteArrayList ,channelGroup: 
vert.x-master,io.vertx.core.net.impl,WorkerList,3,2,0,1,1,false,ChannelInitializer<Channel> ,0 ,WorkerList ,pos: int list: List<Handler<Channel>> ,workers{ Params :  Returns : VertxEventLoopGroup} hasHandlers{ Params :  Returns : boolean} initChannel{ Params : Channel Returns : void} chooseInitializer{ Params : EventLoop Returns : Handler<Channel>} addWorker{ Params : EventLoop,Handler<Channel> Returns : void} removeWorker{ Params : EventLoop,Handler<Channel> Returns : boolean} chooseHandler{ Params :  Returns : Handler<Channel>} addWorker{ Params : Handler<Channel> Returns : void} removeWorker{ Params : Handler<Channel> Returns : boolean} isEmpty{ Params :  Returns : boolean} checkPos{ Params :  Returns : void} close{ Params :  Returns : void} ,initChannel ,,,,,List<Handler<Channel>> ,,List<Handler<Channel>> ,CopyOnWriteArrayList ,list: 
vert.x-master,io.vertx.core.net.impl,ServerID,1,1,0,0,0,false,0 ,Serializable ,0 ,port: int host: String ,equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,equals hashCode ,,,,Serializable ,,,,,host: 
vert.x-master,io.vertx.core.net.impl,ShutdownEvent,1,1,0,0,0,false,0 ,0 ,0 ,timeout: long timeoutUnit: TimeUnit ,timeout{ Params :  Returns : long} timeUnit{ Params :  Returns : TimeUnit} ,,,,,,TimeUnit ,,TimeUnit ,IllegalArgumentException IllegalArgumentException ,host: 
vert.x-master,io.vertx.core.net.impl,SocketAddressImpl,1,1,0,0,0,false,0 ,SocketAddress ,0 ,host: String hostName: String ipAddress: InetAddress port: int path: String ,path{ Params :  Returns : String} host{ Params :  Returns : String} hostName{ Params :  Returns : String} hostAddress{ Params :  Returns : String} port{ Params :  Returns : int} isInetSocket{ Params :  Returns : boolean} isDomainSocket{ Params :  Returns : boolean} toString{ Params :  Returns : String} ipAddress{ Params :  Returns : InetAddress} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,path hostName hostAddress isInetSocket isDomainSocket equals hashCode ,,,,SocketAddress ,String ,,String ,IllegalArgumentException VertxException ,Objects: , path
vert.x-master,io.vertx.core.net.impl,SslChannelProvider,1,1,0,0,0,false,0 ,0 ,0 ,sslHandshakeTimeout: long sslHandshakeTimeoutUnit: TimeUnit workerPool: Executor useWorkerPool: boolean sni: boolean useAlpn: boolean trustAll: boolean sslContextProvider: SslContextProvider sslContexts: SslContext sslContextMaps: Map<String, SslContext> ,sslContextProvider{ Params :  Returns : SslContextProvider} sslClientContext{ Params : String,boolean Returns : SslContext} sslClientContext{ Params : String,boolean,boolean Returns : SslContext} sslServerContext{ Params : boolean Returns : SslContext} serverNameMapping{ Params :  Returns : AsyncMapping<? super String,? extends SslContext>} createClientSslHandler{ Params : SocketAddress,String,boolean Returns : SslHandler} createServerHandler{ Params :  Returns : ChannelHandler} createServerSslHandler{ Params : boolean Returns : SslHandler} createSniHandler{ Params :  Returns : SniHandler} idx{ Params : boolean Returns : int} ,,idx ,,,,Map<String,SslContext>[] ,,Map<String,SslContext>[] ,ConcurrentHashMap ConcurrentHashMap VertxSniHandler ,sslHandshakeTimeoutUnit: , sslHandshakeTimeout
vert.x-master,io.vertx.core.net.impl,SslContextProvider,1,1,0,0,0,false,0 ,0 ,0 ,provider: Supplier<SslContextFactory> enabledProtocols: Set<String> crls: List<CRL> clientAuth: ClientAuth enabledCipherSuites: Set<String> applicationProtocols: List<String> endpointIdentificationAlgorithm: String keyManagerFactory: KeyManagerFactory trustManagerFactory: TrustManagerFactory keyManagerFactoryMapper: Function<String, KeyManagerFactory> trustManagerMapper: Function<String, TrustManager[]> ,createClientContext{ Params : String,boolean,boolean Returns : VertxSslContext} initEngine{ Params : SSLEngine Returns : void} createServerContext{ Params : boolean Returns : VertxSslContext} createServerContext{ Params : KeyManagerFactory,TrustManager[],String,boolean Returns : VertxSslContext} initEngine{ Params : SSLEngine Returns : void} loadKeyManagerFactory{ Params : String Returns : KeyManagerFactory} resolveKeyManagerFactory{ Params : String Returns : KeyManagerFactory} loadTrustManagers{ Params : String Returns : TrustManager[]} resolveTrustManagers{ Params : String Returns : TrustManager[]} buildVertxTrustManagerFactory{ Params : TrustManager[] Returns : VertxTrustManagerFactory} createUntrustRevokedCertTrustManager{ Params : TrustManager[],List<CRL> Returns : TrustManager[]} checkClientTrusted{ Params : X509Certificate[],String Returns : void} checkServerTrusted{ Params : X509Certificate[],String Returns : void} checkRevoked{ Params : X509Certificate[] Returns : void} getAcceptedIssuers{ Params :  Returns : X509Certificate[]} createTrustAllTrustManager{ Params :  Returns : TrustManager} checkClientTrusted{ Params : X509Certificate[],String Returns : void} checkServerTrusted{ Params : X509Certificate[],String Returns : void} getAcceptedIssuers{ Params :  Returns : X509Certificate[]} configureEngine{ Params : SSLEngine,Set<String>,String,boolean Returns : void} ,initEngine initEngine checkClientTrusted checkServerTrusted getAcceptedIssuers checkClientTrusted checkServerTrusted getAcceptedIssuers ,createUntrustRevokedCertTrustManager createTrustAllTrustManager ,,,,Function<String,TrustManager[]> ,,Function<String,TrustManager[]> ,HashSet VertxSslContext VertxException VertxSslContext VertxException VertxTrustManagerFactory X509TrustManager CertificateException X509TrustManager LinkedHashSet SNIHostName ,engine: , sslParameters
vert.x-master,io.vertx.core.net.impl,SslHandshakeCompletionHandler,1,1,0,0,0,false,ChannelInboundHandlerAdapter ,0 ,0 ,SERVER_NAME_ATTR: AttributeKey<String> promise: Promise<Void> ,userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} ,userEventTriggered exceptionCaught ,,,,,Promise<Void> ,,Promise<Void> ,,ctx: , evt
vert.x-master,io.vertx.core.net.impl,SSLHelper,1,1,0,0,0,false,0 ,0 ,EngineConfig ,CLIENT_AUTH_MAPPING: EnumMap<ClientAuth, io.netty.handler.ssl.ClientAuth> ssl: boolean sni: boolean trustAll: boolean clientAuth: ClientAuth client: boolean useAlpn: boolean endpointIdentificationAlgorithm: String sslEngineOptions: SSLEngineOptions applicationProtocols: List<String> keyManagerFactory: KeyManagerFactory trustManagerFactory: TrustManagerFactory keyManagerFactoryMapper: Function<String, KeyManagerFactory> trustManagerMapper: Function<String, TrustManager[]> crls: List<CRL> ,resolveEngineOptions{ Params : SSLEngineOptions,boolean Returns : SSLEngineOptions} sslContextProvider{ Params :  Returns : SslContextProvider} buildContextProvider{ Params : SSLOptions,ContextInternal Returns : Future<SslContextProvider>} buildChannelProvider{ Params : SSLOptions,ContextInternal Returns : Future<SslChannelProvider>} build{ Params : SSLOptions,ContextInternal Returns : Future<EngineConfig>} ,,resolveEngineOptions ,,,,List<CRL> ,,List<CRL> ,EnumMap JdkSSLEngineOptions OpenSSLEngineOptions JdkSSLEngineOptions VertxException VertxException VertxException SslContextProvider SSLOptions SSLOptions SslChannelProvider ArrayList ArrayList ByteArrayInputStream EngineConfig EngineConfig DefaultSslContextFactory ,Future: , new EngineConfig(sslOptions, () -> new DefaultSslContextFactory(SslProvider.JDK, false), SSLEngineOptions.DEFAULT_USE_WORKER_POOL)
vert.x-master,io.vertx.core.net.impl,EngineConfig,3,2,0,0,0,false,0 ,0 ,EngineConfig ,sslOptions: SSLOptions supplier: Supplier<SslContextFactory> useWorkerPool: boolean ,resolveEngineOptions{ Params : SSLEngineOptions,boolean Returns : SSLEngineOptions} sslContextProvider{ Params :  Returns : SslContextProvider} buildContextProvider{ Params : SSLOptions,ContextInternal Returns : Future<SslContextProvider>} buildChannelProvider{ Params : SSLOptions,ContextInternal Returns : Future<SslChannelProvider>} build{ Params : SSLOptions,ContextInternal Returns : Future<EngineConfig>} ,,resolveEngineOptions ,,,,boolean ,,boolean ,SslContextProvider ,sslOptions: 
vert.x-master,io.vertx.core.net.impl,TCPServerBase,1,1,1,0,0,false,0 ,Closeable MetricsProvider ,0 ,log: Logger creatingContext: Context vertx: VertxInternal options: NetServerOptions eventLoop: EventLoop childHandler: BiConsumer<Channel, SslChannelProvider> worker: Handler<Channel> listening: boolean listenContext: ContextInternal actualServer: TCPServerBase sslHelper: SSLHelper sslChannelProvider: AtomicReference<SslChannelProvider> channelBalancer: ServerChannelLoadBalancer bindFuture: Future<Channel> servers: Set<TCPServerBase> metrics: TCPMetrics<?> actualPort: int ,sslContextProvider{ Params :  Returns : SslContextProvider} actualPort{ Params :  Returns : int} childHandler{ Params : ContextInternal,SocketAddress Returns : BiConsumer<Channel,SslChannelProvider>} createSSLHelper{ Params :  Returns : SSLHelper} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} bind{ Params : SocketAddress Returns : Future<TCPServerBase>} listen{ Params : SocketAddress,ContextInternal Returns : Future<Channel>} isListening{ Params :  Returns : boolean} createMetrics{ Params : SocketAddress Returns : TCPMetrics<?>} applyConnectionOptions{ Params : boolean,ServerBootstrap Returns : void} isMetricsEnabled{ Params :  Returns : boolean} getMetrics{ Params :  Returns : TCPMetrics<?>} close{ Params : Promise<Void> Returns : void} actualClose{ Params : Promise<Void> Returns : void} close{ Params :  Returns : Future<Void>} resolveAndBind{ Params : ContextInternal,SocketAddress,ServerBootstrap Returns : io.netty.util.concurrent.Future<Channel>} bind{ Params : ServerBootstrap,InetAddress,int,io.netty.util.concurrent.Promise<Channel> Returns : void} ,isMetricsEnabled getMetrics close ,resolveAndBind bind ,,childHandler close ,Closeable MetricsProvider ,int ,,int ,NetServerOptions AtomicReference SSLHelper SSLOptions IllegalStateException ServerID ServerID ServerID HashSet ServerChannelLoadBalancer ServerBootstrap InetSocketAddress ,f: 
vert.x-master,io.vertx.core.net.impl,TrustAllTrustManager,1,1,0,0,0,false,0 ,X509TrustManager ,0 ,INSTANCE: TrustAllTrustManager ,checkClientTrusted{ Params : X509Certificate[],String Returns : void} checkServerTrusted{ Params : X509Certificate[],String Returns : void} getAcceptedIssuers{ Params :  Returns : X509Certificate[]} ,checkClientTrusted checkServerTrusted getAcceptedIssuers ,,,,X509TrustManager ,,,,TrustAllTrustManager ,f: 
vert.x-master,io.vertx.core.net.impl,URIDecoder,1,1,0,0,1,false,0 ,0 ,0 ,,decodeURIComponent{ Params : String Returns : String} indexOfPercentOrPlus{ Params : String Returns : int} decodeURIComponent{ Params : String,boolean Returns : String} decodeAndTransformURIComponent{ Params : String,int,boolean Returns : String} decodeHexNibble{ Params : char Returns : char} ,,decodeURIComponent indexOfPercentOrPlus decodeURIComponent decodeAndTransformURIComponent decodeHexNibble ,,,,,,,RuntimeException IllegalArgumentException IllegalArgumentException IllegalArgumentException String ,s: , i
vert.x-master,io.vertx.core.net.impl,VertxEventLoopGroup,1,1,0,0,1,false,AbstractEventExecutorGroup ,EventLoopGroup ,EventLoopHolder EventLoopIterator ,pos: int workers: List<EventLoopHolder> children: Set<EventExecutor> ,next{ Params :  Returns : EventLoop} iterator{ Params :  Returns : Iterator<EventExecutor>} register{ Params : Channel Returns : ChannelFuture} register{ Params : Channel,ChannelPromise Returns : ChannelFuture} register{ Params : ChannelPromise Returns : ChannelFuture} isShutdown{ Params :  Returns : boolean} isTerminated{ Params :  Returns : boolean} awaitTermination{ Params : long,TimeUnit Returns : boolean} addWorker{ Params : EventLoop Returns : void} shutdown{ Params :  Returns : void} isShuttingDown{ Params :  Returns : boolean} shutdownGracefully{ Params : long,long,TimeUnit Returns : Future<?>} terminationFuture{ Params :  Returns : Future<?>} findHolder{ Params : EventLoop Returns : EventLoopHolder} removeWorker{ Params : EventLoop Returns : void} workerCount{ Params :  Returns : int} checkPos{ Params :  Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<EventExecutor>} size{ Params :  Returns : int} isEmpty{ Params :  Returns : boolean} contains{ Params : Object Returns : boolean} toArray{ Params :  Returns : Object[]} toArray{ Params : T[] Returns : T[]} add{ Params : EventExecutor Returns : boolean} remove{ Params : Object Returns : boolean} containsAll{ Params : Collection<?> Returns : boolean} addAll{ Params : Collection<? extends EventExecutor> Returns : boolean} retainAll{ Params : Collection<?> Returns : boolean} removeAll{ Params : Collection<?> Returns : boolean} clear{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : EventExecutor} remove{ Params :  Returns : void} ,next iterator register register register isShutdown isTerminated awaitTermination isShuttingDown shutdownGracefully terminationFuture equals hashCode iterator size isEmpty contains toArray toArray add remove containsAll addAll retainAll removeAll clear hasNext next remove ,,,,EventLoopGroup ,Set<EventExecutor> ,,Set<EventExecutor> ,ArrayList IllegalStateException EventLoopHolder UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException EventLoopHolder IllegalStateException Set EventLoopIterator UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,workers: 
vert.x-master,io.vertx.core.net.impl,EventLoopHolder,3,2,0,1,0,false,AbstractEventExecutorGroup ,EventLoopGroup ,EventLoopHolder EventLoopIterator ,count: int worker: EventLoop ,next{ Params :  Returns : EventLoop} iterator{ Params :  Returns : Iterator<EventExecutor>} register{ Params : Channel Returns : ChannelFuture} register{ Params : Channel,ChannelPromise Returns : ChannelFuture} register{ Params : ChannelPromise Returns : ChannelFuture} isShutdown{ Params :  Returns : boolean} isTerminated{ Params :  Returns : boolean} awaitTermination{ Params : long,TimeUnit Returns : boolean} addWorker{ Params : EventLoop Returns : void} shutdown{ Params :  Returns : void} isShuttingDown{ Params :  Returns : boolean} shutdownGracefully{ Params : long,long,TimeUnit Returns : Future<?>} terminationFuture{ Params :  Returns : Future<?>} findHolder{ Params : EventLoop Returns : EventLoopHolder} removeWorker{ Params : EventLoop Returns : void} workerCount{ Params :  Returns : int} checkPos{ Params :  Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<EventExecutor>} size{ Params :  Returns : int} isEmpty{ Params :  Returns : boolean} contains{ Params : Object Returns : boolean} toArray{ Params :  Returns : Object[]} toArray{ Params : T[] Returns : T[]} add{ Params : EventExecutor Returns : boolean} remove{ Params : Object Returns : boolean} containsAll{ Params : Collection<?> Returns : boolean} addAll{ Params : Collection<? extends EventExecutor> Returns : boolean} retainAll{ Params : Collection<?> Returns : boolean} removeAll{ Params : Collection<?> Returns : boolean} clear{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : EventExecutor} remove{ Params :  Returns : void} ,next iterator register register register isShutdown isTerminated awaitTermination isShuttingDown shutdownGracefully terminationFuture equals hashCode iterator size isEmpty contains toArray toArray add remove containsAll addAll retainAll removeAll clear hasNext next remove ,,,,,,,,,Objects: , worker
vert.x-master,io.vertx.core.net.impl,EventLoopIterator,3,2,0,1,1,false,AbstractEventExecutorGroup ,EventLoopGroup ,EventLoopHolder EventLoopIterator ,holderIt: Iterator<EventLoopHolder> ,next{ Params :  Returns : EventLoop} iterator{ Params :  Returns : Iterator<EventExecutor>} register{ Params : Channel Returns : ChannelFuture} register{ Params : Channel,ChannelPromise Returns : ChannelFuture} register{ Params : ChannelPromise Returns : ChannelFuture} isShutdown{ Params :  Returns : boolean} isTerminated{ Params :  Returns : boolean} awaitTermination{ Params : long,TimeUnit Returns : boolean} addWorker{ Params : EventLoop Returns : void} shutdown{ Params :  Returns : void} isShuttingDown{ Params :  Returns : boolean} shutdownGracefully{ Params : long,long,TimeUnit Returns : Future<?>} terminationFuture{ Params :  Returns : Future<?>} findHolder{ Params : EventLoop Returns : EventLoopHolder} removeWorker{ Params : EventLoop Returns : void} workerCount{ Params :  Returns : int} checkPos{ Params :  Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} iterator{ Params :  Returns : Iterator<EventExecutor>} size{ Params :  Returns : int} isEmpty{ Params :  Returns : boolean} contains{ Params : Object Returns : boolean} toArray{ Params :  Returns : Object[]} toArray{ Params : T[] Returns : T[]} add{ Params : EventExecutor Returns : boolean} remove{ Params : Object Returns : boolean} containsAll{ Params : Collection<?> Returns : boolean} addAll{ Params : Collection<? extends EventExecutor> Returns : boolean} retainAll{ Params : Collection<?> Returns : boolean} removeAll{ Params : Collection<?> Returns : boolean} clear{ Params :  Returns : void} hasNext{ Params :  Returns : boolean} next{ Params :  Returns : EventExecutor} remove{ Params :  Returns : void} ,next iterator register register register isShutdown isTerminated awaitTermination isShuttingDown shutdownGracefully terminationFuture equals hashCode iterator size isEmpty contains toArray toArray add remove containsAll addAll retainAll removeAll clear hasNext next remove ,,,,Iterator ,Iterator<EventLoopHolder> ,,Iterator<EventLoopHolder> ,UnsupportedOperationException ,holderIt: 
vert.x-master,io.vertx.core.net.impl,VertxHandler,1,1,0,0,1,false,ChannelDuplexHandler ,0 ,0 ,connectionFactory: Function<ChannelHandlerContext, C> conn: C addHandler: Handler<C> removeHandler: Handler<C> ,create{ Params : Function<ChannelHandlerContext,C> Returns : VertxHandler<C>} safeBuffer{ Params : ByteBuf Returns : ByteBuf} setConnection{ Params : C Returns : void} handlerAdded{ Params : ChannelHandlerContext Returns : void} handlerRemoved{ Params : ChannelHandlerContext Returns : void} addHandler{ Params : Handler<C> Returns : VertxHandler<C>} removeHandler{ Params : Handler<C> Returns : VertxHandler<C>} getConnection{ Params :  Returns : C} channelWritabilityChanged{ Params : ChannelHandlerContext Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} channelInactive{ Params : ChannelHandlerContext Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} close{ Params : ChannelHandlerContext,ChannelPromise Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} ,handlerAdded handlerRemoved channelWritabilityChanged exceptionCaught channelInactive channelReadComplete channelRead close userEventTriggered ,create safeBuffer ,,,,Handler<C> ,,Handler<C> ,VertxHandler ,conn: , evt
vert.x-master,io.vertx.core.net.impl,VertxSniHandler,1,0,0,0,0,false,SniHandler ,0 ,0 ,delegatedTaskExec: Executor ,newSslHandler{ Params : SslContext,ByteBufAllocator Returns : SslHandler} ,newSslHandler ,,,,,Executor ,,Executor ,,sslHandler: , handshakeTimeoutMillis, TimeUnit.MILLISECONDS
vert.x-master,io.vertx.core.net.impl,VertxSslContext,1,1,1,0,0,false,DelegatingSslContext ,0 ,0 ,wrapped: SslContext ,unwrap{ Params :  Returns : SslContext} ,,,unwrap ,,,SslContext ,,SslContext ,,sslHandler: , handshakeTimeoutMillis, TimeUnit.MILLISECONDS
vert.x-master,io.vertx.core.net.impl,VertxTrustManagerFactory,1,0,0,0,0,false,TrustManagerFactory ,0 ,0 ,PROVIDER: Provider ,engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} ,engineInit engineInit engineGetTrustManagers ,,,,,,,,Provider TrustManagerFactorySpi ,null
vert.x-master,io.vertx.core.net,JdkSSLEngineOptions,1,1,0,0,0,false,SSLEngineOptions ,0 ,0 ,jdkAlpnAvailable: Boolean ,isAlpnAvailable{ Params :  Returns : boolean} setUseWorkerThread{ Params : boolean Returns : JdkSSLEngineOptions} toJson{ Params :  Returns : JsonObject} copy{ Params :  Returns : JdkSSLEngineOptions} sslContextFactory{ Params :  Returns : SslContextFactory} ,setUseWorkerThread copy sslContextFactory ,isAlpnAvailable ,,,,,,,JsonObject JdkSSLEngineOptions DefaultSslContextFactory ,super: , useWorkerThread
vert.x-master,io.vertx.core.net,JksOptions,1,1,0,0,0,false,KeyStoreOptionsBase ,0 ,0 ,,setPassword{ Params : String Returns : JksOptions} setPath{ Params : String Returns : JksOptions} setValue{ Params : Buffer Returns : JksOptions} setAlias{ Params : String Returns : JksOptions} setAliasPassword{ Params : String Returns : JksOptions} copy{ Params :  Returns : JksOptions} toJson{ Params :  Returns : JsonObject} ,setPassword setPath setValue setAlias setAliasPassword copy ,,,,,,,,JksOptions JsonObject ,JksOptionsConverter: , this, json
vert.x-master,io.vertx.core.net,KeyCertOptions,2,1,0,0,0,true,KeyStoreOptionsBase ,0 ,0 ,,copy{ Params :  Returns : KeyCertOptions} getKeyManagerFactory{ Params : Vertx Returns : KeyManagerFactory} keyManagerFactoryMapper{ Params : Vertx Returns : Function<String,KeyManagerFactory>} wrap{ Params : X509KeyManager Returns : KeyCertOptions} wrap{ Params : KeyManagerFactory Returns : KeyCertOptions} ,,wrap wrap ,,,,,,,KeyManagerFactoryOptions KeyManagerFactoryOptions ,JksOptionsConverter: , this, json
vert.x-master,io.vertx.core.net,KeyManagerFactoryOptions,1,0,0,0,0,false,0 ,KeyCertOptions ,0 ,keyManagerFactory: KeyManagerFactory ,copy{ Params :  Returns : KeyCertOptions} getKeyManagerFactory{ Params : Vertx Returns : KeyManagerFactory} keyManagerFactoryMapper{ Params : Vertx Returns : Function<String,KeyManagerFactory>} ,copy getKeyManagerFactory keyManagerFactoryMapper ,,,,KeyCertOptions ,KeyManagerFactory ,,KeyManagerFactory ,IllegalArgumentException KeyManagerFactoryWrapper KeyManagerFactoryOptions ,JksOptionsConverter: , this, json
vert.x-master,io.vertx.core.net,KeyManagerFactoryWrapper,1,0,0,0,0,false,KeyManagerFactory ,0 ,KeyManagerFactorySpiWrapper ,LOGGER: Logger KEY_MANAGER_FACTORY_ALGORITHM: String PROVIDER: Provider ,engineInit{ Params : KeyStore,char[] Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetKeyManagers{ Params :  Returns : KeyManager[]} ,engineInit engineInit engineGetKeyManagers ,,,,,,,,Provider KeyManagerFactorySpiWrapper ,null
vert.x-master,io.vertx.core.net,KeyManagerFactorySpiWrapper,3,2,0,1,0,false,KeyManagerFactory ,0 ,KeyManagerFactorySpiWrapper ,keyManagers: KeyManager ,engineInit{ Params : KeyStore,char[] Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetKeyManagers{ Params :  Returns : KeyManager[]} ,engineInit engineInit engineGetKeyManagers ,,,,,KeyManager[] ,,KeyManager[] ,,LOGGER: , "Ignoring provided ManagerFactoryParameters"
vert.x-master,io.vertx.core.net,KeyStoreOptions,1,1,0,0,0,false,KeyStoreOptionsBase ,0 ,0 ,,getProvider{ Params :  Returns : String} setProvider{ Params : String Returns : KeyStoreOptions} getType{ Params :  Returns : String} setType{ Params : String Returns : KeyStoreOptions} setPassword{ Params : String Returns : KeyStoreOptions} setPath{ Params : String Returns : KeyStoreOptions} setValue{ Params : Buffer Returns : KeyStoreOptions} setAlias{ Params : String Returns : KeyStoreOptions} setAliasPassword{ Params : String Returns : KeyStoreOptions} copy{ Params :  Returns : KeyStoreOptions} toJson{ Params :  Returns : JsonObject} ,setPassword setPath setValue setAlias setAliasPassword copy ,,,,,,,,KeyStoreOptions JsonObject ,KeyStoreOptionsConverter: , this, json
vert.x-master,io.vertx.core.net,KeyStoreOptionsBase,1,1,1,0,0,false,0 ,KeyCertOptions TrustOptions ,0 ,helper: KeyStoreHelper provider: String type: String password: String path: String value: Buffer alias: String aliasPassword: String ,getType{ Params :  Returns : String} setType{ Params : String Returns : KeyStoreOptionsBase} getProvider{ Params :  Returns : String} setProvider{ Params : String Returns : KeyStoreOptionsBase} getPassword{ Params :  Returns : String} setPassword{ Params : String Returns : KeyStoreOptionsBase} getPath{ Params :  Returns : String} setPath{ Params : String Returns : KeyStoreOptionsBase} getValue{ Params :  Returns : Buffer} setValue{ Params : Buffer Returns : KeyStoreOptionsBase} getAlias{ Params :  Returns : String} setAlias{ Params : String Returns : KeyStoreOptionsBase} getAliasPassword{ Params :  Returns : String} setAliasPassword{ Params : String Returns : KeyStoreOptionsBase} getHelper{ Params : Vertx Returns : KeyStoreHelper} loadKeyStore{ Params : Vertx Returns : KeyStore} getKeyManagerFactory{ Params : Vertx Returns : KeyManagerFactory} keyManagerFactoryMapper{ Params : Vertx Returns : Function<String,KeyManagerFactory>} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} copy{ Params :  Returns : KeyStoreOptionsBase} ,getKeyManagerFactory keyManagerFactoryMapper getTrustManagerFactory trustManagerMapper copy ,,,copy ,KeyCertOptions TrustOptions ,String ,,String ,KeyStoreHelper ,: , vertx
vert.x-master,io.vertx.core.net,NetClient,2,1,0,0,0,true,0 ,KeyCertOptions TrustOptions ,0 ,,connect{ Params : int,String Returns : Future<NetSocket>} connect{ Params : int,String,String Returns : Future<NetSocket>} connect{ Params : SocketAddress Returns : Future<NetSocket>} connect{ Params : SocketAddress,String Returns : Future<NetSocket>} close{ Params :  Returns : Future<Void>} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} ,,,,,,,,,,: , vertx
vert.x-master,io.vertx.core.net,NetClientOptions,1,1,0,0,0,false,ClientOptionsBase ,0 ,0 ,DEFAULT_RECONNECT_ATTEMPTS: int DEFAULT_RECONNECT_INTERVAL: long DEFAULT_HOSTNAME_VERIFICATION_ALGORITHM: String DEFAULT_REGISTER_WRITE_HANDLER: boolean reconnectAttempts: int reconnectInterval: long hostnameVerificationAlgorithm: String applicationLayerProtocols: List<String> registerWriteHandler: boolean ,init{ Params :  Returns : void} setSendBufferSize{ Params : int Returns : NetClientOptions} setReceiveBufferSize{ Params : int Returns : NetClientOptions} setReuseAddress{ Params : boolean Returns : NetClientOptions} setReusePort{ Params : boolean Returns : NetClientOptions} setTrafficClass{ Params : int Returns : NetClientOptions} setTcpNoDelay{ Params : boolean Returns : NetClientOptions} setTcpKeepAlive{ Params : boolean Returns : NetClientOptions} setSoLinger{ Params : int Returns : NetClientOptions} setIdleTimeout{ Params : int Returns : NetClientOptions} setReadIdleTimeout{ Params : int Returns : NetClientOptions} setWriteIdleTimeout{ Params : int Returns : NetClientOptions} setIdleTimeoutUnit{ Params : TimeUnit Returns : NetClientOptions} setSsl{ Params : boolean Returns : NetClientOptions} setKeyCertOptions{ Params : KeyCertOptions Returns : NetClientOptions} setKeyStoreOptions{ Params : JksOptions Returns : NetClientOptions} setPfxKeyCertOptions{ Params : PfxOptions Returns : NetClientOptions} setPemKeyCertOptions{ Params : PemKeyCertOptions Returns : NetClientOptions} setTrustOptions{ Params : TrustOptions Returns : NetClientOptions} setTrustStoreOptions{ Params : JksOptions Returns : NetClientOptions} setPemTrustOptions{ Params : PemTrustOptions Returns : NetClientOptions} setPfxTrustOptions{ Params : PfxOptions Returns : NetClientOptions} addEnabledCipherSuite{ Params : String Returns : NetClientOptions} removeEnabledCipherSuite{ Params : String Returns : NetClientOptions} addEnabledSecureTransportProtocol{ Params : String Returns : NetClientOptions} removeEnabledSecureTransportProtocol{ Params : String Returns : NetClientOptions} setUseAlpn{ Params : boolean Returns : NetClientOptions} setSslEngineOptions{ Params : SSLEngineOptions Returns : NetClientOptions} setJdkSslEngineOptions{ Params : JdkSSLEngineOptions Returns : NetClientOptions} setTcpFastOpen{ Params : boolean Returns : NetClientOptions} setTcpCork{ Params : boolean Returns : NetClientOptions} setTcpQuickAck{ Params : boolean Returns : NetClientOptions} setOpenSslEngineOptions{ Params : OpenSSLEngineOptions Returns : ClientOptionsBase} addCrlPath{ Params : String Returns : NetClientOptions} addCrlValue{ Params : Buffer Returns : NetClientOptions} setTrustAll{ Params : boolean Returns : NetClientOptions} setConnectTimeout{ Params : int Returns : NetClientOptions} setMetricsName{ Params : String Returns : NetClientOptions} setReconnectAttempts{ Params : int Returns : NetClientOptions} getReconnectAttempts{ Params :  Returns : int} setReconnectInterval{ Params : long Returns : NetClientOptions} getHostnameVerificationAlgorithm{ Params :  Returns : String} setHostnameVerificationAlgorithm{ Params : String Returns : NetClientOptions} getApplicationLayerProtocols{ Params :  Returns : List<String>} setApplicationLayerProtocols{ Params : List<String> Returns : NetClientOptions} getReconnectInterval{ Params :  Returns : long} setLogActivity{ Params : boolean Returns : NetClientOptions} setActivityLogDataFormat{ Params : ByteBufFormat Returns : NetClientOptions} setProxyOptions{ Params : ProxyOptions Returns : NetClientOptions} setNonProxyHosts{ Params : List<String> Returns : NetClientOptions} addNonProxyHost{ Params : String Returns : NetClientOptions} setLocalAddress{ Params : String Returns : NetClientOptions} setEnabledSecureTransportProtocols{ Params : Set<String> Returns : NetClientOptions} setSslHandshakeTimeout{ Params : long Returns : NetClientOptions} setSslHandshakeTimeoutUnit{ Params : TimeUnit Returns : NetClientOptions} toJson{ Params :  Returns : JsonObject} isRegisterWriteHandler{ Params :  Returns : boolean} setRegisterWriteHandler{ Params : boolean Returns : NetClientOptions} ,setSendBufferSize setReceiveBufferSize setReuseAddress setReusePort setTrafficClass setTcpNoDelay setTcpKeepAlive setSoLinger setIdleTimeout setReadIdleTimeout setWriteIdleTimeout setIdleTimeoutUnit setSsl setKeyCertOptions setKeyStoreOptions setPfxKeyCertOptions setPemKeyCertOptions setTrustOptions setTrustStoreOptions setPemTrustOptions setPfxTrustOptions addEnabledCipherSuite removeEnabledCipherSuite addEnabledSecureTransportProtocol removeEnabledSecureTransportProtocol setUseAlpn setSslEngineOptions setJdkSslEngineOptions setTcpFastOpen setTcpCork setTcpQuickAck setOpenSslEngineOptions addCrlPath addCrlValue setTrustAll setConnectTimeout setMetricsName setLogActivity setActivityLogDataFormat setNonProxyHosts addNonProxyHost setLocalAddress setEnabledSecureTransportProtocols toJson ,,,,,boolean ,,boolean ,ArrayList IllegalArgumentException IllegalArgumentException ,NetClientOptionsConverter: , this, json
vert.x-master,io.vertx.core.net,NetServer,2,1,0,0,0,true,ClientOptionsBase ,0 ,0 ,,connectHandler{ Params : Handler<NetSocket> Returns : NetServer} connectHandler{ Params :  Returns : Handler<NetSocket>} listen{ Params :  Returns : Future<NetServer>} listen{ Params : int,String Returns : Future<NetServer>} listen{ Params : int Returns : Future<NetServer>} listen{ Params : SocketAddress Returns : Future<NetServer>} exceptionHandler{ Params : Handler<Throwable> Returns : NetServer} close{ Params :  Returns : Future<Void>} actualPort{ Params :  Returns : int} updateSSLOptions{ Params : SSLOptions Returns : Future<Void>} ,,,,,,,,,SocketAddressImpl ,: , port, "0.0.0.0"
vert.x-master,io.vertx.core.net,NetServerOptions,1,1,0,0,0,false,TCPSSLOptions ,0 ,0 ,DEFAULT_PORT: int DEFAULT_HOST: String DEFAULT_ACCEPT_BACKLOG: int DEFAULT_CLIENT_AUTH: ClientAuth DEFAULT_SNI: boolean DEFAULT_USE_PROXY_PROTOCOL: boolean DEFAULT_PROXY_PROTOCOL_TIMEOUT: long DEFAULT_PROXY_PROTOCOL_TIMEOUT_TIME_UNIT: TimeUnit DEFAULT_REGISTER_WRITE_HANDLER: boolean port: int host: String acceptBacklog: int clientAuth: ClientAuth sni: boolean useProxyProtocol: boolean proxyProtocolTimeout: long proxyProtocolTimeoutUnit: TimeUnit registerWriteHandler: boolean ,toJson{ Params :  Returns : JsonObject} setSendBufferSize{ Params : int Returns : NetServerOptions} setReceiveBufferSize{ Params : int Returns : NetServerOptions} setReuseAddress{ Params : boolean Returns : NetServerOptions} setReusePort{ Params : boolean Returns : NetServerOptions} setTrafficClass{ Params : int Returns : NetServerOptions} setTcpNoDelay{ Params : boolean Returns : NetServerOptions} setTcpKeepAlive{ Params : boolean Returns : NetServerOptions} setSoLinger{ Params : int Returns : NetServerOptions} setIdleTimeout{ Params : int Returns : NetServerOptions} setReadIdleTimeout{ Params : int Returns : NetServerOptions} setWriteIdleTimeout{ Params : int Returns : NetServerOptions} setIdleTimeoutUnit{ Params : TimeUnit Returns : NetServerOptions} setSsl{ Params : boolean Returns : NetServerOptions} setUseAlpn{ Params : boolean Returns : NetServerOptions} setSslEngineOptions{ Params : SSLEngineOptions Returns : NetServerOptions} setJdkSslEngineOptions{ Params : JdkSSLEngineOptions Returns : NetServerOptions} setOpenSslEngineOptions{ Params : OpenSSLEngineOptions Returns : NetServerOptions} setKeyCertOptions{ Params : KeyCertOptions Returns : NetServerOptions} setKeyStoreOptions{ Params : JksOptions Returns : NetServerOptions} setPfxKeyCertOptions{ Params : PfxOptions Returns : NetServerOptions} setPemKeyCertOptions{ Params : PemKeyCertOptions Returns : NetServerOptions} setTrustOptions{ Params : TrustOptions Returns : NetServerOptions} setTrustStoreOptions{ Params : JksOptions Returns : NetServerOptions} setPfxTrustOptions{ Params : PfxOptions Returns : NetServerOptions} setPemTrustOptions{ Params : PemTrustOptions Returns : NetServerOptions} addEnabledCipherSuite{ Params : String Returns : NetServerOptions} removeEnabledCipherSuite{ Params : String Returns : NetServerOptions} addEnabledSecureTransportProtocol{ Params : String Returns : NetServerOptions} removeEnabledSecureTransportProtocol{ Params : String Returns : NetServerOptions} setTcpFastOpen{ Params : boolean Returns : NetServerOptions} setTcpCork{ Params : boolean Returns : NetServerOptions} setTcpQuickAck{ Params : boolean Returns : NetServerOptions} addCrlPath{ Params : String Returns : NetServerOptions} addCrlValue{ Params : Buffer Returns : NetServerOptions} setEnabledSecureTransportProtocols{ Params : Set<String> Returns : NetServerOptions} setSslHandshakeTimeout{ Params : long Returns : NetServerOptions} setSslHandshakeTimeoutUnit{ Params : TimeUnit Returns : NetServerOptions} getAcceptBacklog{ Params :  Returns : int} setAcceptBacklog{ Params : int Returns : NetServerOptions} getPort{ Params :  Returns : int} setPort{ Params : int Returns : NetServerOptions} getHost{ Params :  Returns : String} setHost{ Params : String Returns : NetServerOptions} getClientAuth{ Params :  Returns : ClientAuth} setClientAuth{ Params : ClientAuth Returns : NetServerOptions} setLogActivity{ Params : boolean Returns : NetServerOptions} setActivityLogDataFormat{ Params : ByteBufFormat Returns : NetServerOptions} isSni{ Params :  Returns : boolean} setSni{ Params : boolean Returns : NetServerOptions} isUseProxyProtocol{ Params :  Returns : boolean} setUseProxyProtocol{ Params : boolean Returns : NetServerOptions} getProxyProtocolTimeout{ Params :  Returns : long} setProxyProtocolTimeout{ Params : long Returns : NetServerOptions} setProxyProtocolTimeoutUnit{ Params : TimeUnit Returns : NetServerOptions} getProxyProtocolTimeoutUnit{ Params :  Returns : TimeUnit} init{ Params :  Returns : void} isRegisterWriteHandler{ Params :  Returns : boolean} setRegisterWriteHandler{ Params : boolean Returns : NetServerOptions} ,setSendBufferSize setReceiveBufferSize setReuseAddress setReusePort setTrafficClass setTcpNoDelay setTcpKeepAlive setSoLinger setIdleTimeout setReadIdleTimeout setWriteIdleTimeout setIdleTimeoutUnit setSsl setUseAlpn setSslEngineOptions setJdkSslEngineOptions setOpenSslEngineOptions setKeyCertOptions setKeyStoreOptions setPfxKeyCertOptions setPemKeyCertOptions setTrustOptions setTrustStoreOptions setPfxTrustOptions setPemTrustOptions addEnabledCipherSuite removeEnabledCipherSuite addEnabledSecureTransportProtocol removeEnabledSecureTransportProtocol setTcpFastOpen setTcpCork setTcpQuickAck addCrlPath addCrlValue setEnabledSecureTransportProtocols setSslHandshakeTimeout setSslHandshakeTimeoutUnit setLogActivity setActivityLogDataFormat ,,,,,boolean ,,boolean ,IllegalArgumentException IllegalArgumentException ,super: , activityLogDataFormat
vert.x-master,io.vertx.core.net,NetSocket,2,1,0,0,0,true,TCPSSLOptions ,0 ,0 ,,exceptionHandler{ Params : Handler<Throwable> Returns : NetSocket} handler{ Params : Handler<Buffer> Returns : NetSocket} pause{ Params :  Returns : NetSocket} resume{ Params :  Returns : NetSocket} fetch{ Params : long Returns : NetSocket} endHandler{ Params : Handler<Void> Returns : NetSocket} setWriteQueueMaxSize{ Params : int Returns : NetSocket} drainHandler{ Params : Handler<Void> Returns : NetSocket} writeHandlerID{ Params :  Returns : String} write{ Params : String Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} sendFile{ Params : String Returns : Future<Void>} sendFile{ Params : String,long Returns : Future<Void>} sendFile{ Params : String,long,long Returns : Future<Void>} remoteAddress{ Params :  Returns : SocketAddress} remoteAddress{ Params : boolean Returns : SocketAddress} localAddress{ Params :  Returns : SocketAddress} localAddress{ Params : boolean Returns : SocketAddress} end{ Params :  Returns : Future<Void>} close{ Params :  Returns : Future<Void>} closeHandler{ Params : Handler<Void> Returns : NetSocket} upgradeToSsl{ Params :  Returns : Future<Void>} upgradeToSsl{ Params : String Returns : Future<Void>} isSsl{ Params :  Returns : boolean} sslSession{ Params :  Returns : SSLSession} peerCertificateChain{ Params :  Returns : X509Certificate[]} peerCertificates{ Params :  Returns : List<Certificate>} indicatedServerName{ Params :  Returns : String} applicationLayerProtocol{ Params :  Returns : String} ,exceptionHandler handler pause resume fetch endHandler setWriteQueueMaxSize drainHandler end ,,,,,,,,,: , filename, offset, Long.MAX_VALUE
vert.x-master,io.vertx.core.net,NetworkOptions,1,1,1,0,0,false,0 ,0 ,0 ,DEFAULT_SEND_BUFFER_SIZE: int DEFAULT_RECEIVE_BUFFER_SIZE: int DEFAULT_TRAFFIC_CLASS: int DEFAULT_REUSE_ADDRESS: boolean DEFAULT_REUSE_PORT: boolean DEFAULT_LOG_ENABLED: boolean DEFAULT_LOG_ACTIVITY_FORMAT: ByteBufFormat sendBufferSize: int receiveBufferSize: int trafficClass: int reuseAddress: boolean logActivity: boolean activityLogDataFormat: ByteBufFormat reusePort: boolean ,toJson{ Params :  Returns : JsonObject} getSendBufferSize{ Params :  Returns : int} setSendBufferSize{ Params : int Returns : NetworkOptions} getReceiveBufferSize{ Params :  Returns : int} setReceiveBufferSize{ Params : int Returns : NetworkOptions} isReuseAddress{ Params :  Returns : boolean} setReuseAddress{ Params : boolean Returns : NetworkOptions} getTrafficClass{ Params :  Returns : int} setTrafficClass{ Params : int Returns : NetworkOptions} getLogActivity{ Params :  Returns : boolean} getActivityLogDataFormat{ Params :  Returns : ByteBufFormat} setLogActivity{ Params : boolean Returns : NetworkOptions} setActivityLogDataFormat{ Params : ByteBufFormat Returns : NetworkOptions} isReusePort{ Params :  Returns : boolean} setReusePort{ Params : boolean Returns : NetworkOptions} ,,,,,,boolean ,,boolean ,JsonObject ,Arguments: , trafficClass, DEFAULT_TRAFFIC_CLASS, 255, "trafficClass tc must be 0 <= tc <= 255"
vert.x-master,io.vertx.core.net,OpenSSLEngineOptions,1,1,0,0,0,false,SSLEngineOptions ,0 ,0 ,DEFAULT_SESSION_CACHE_ENABLED: boolean sessionCacheEnabled: boolean ,isAvailable{ Params :  Returns : boolean} isAlpnAvailable{ Params :  Returns : boolean} setSessionCacheEnabled{ Params : boolean Returns : OpenSSLEngineOptions} isSessionCacheEnabled{ Params :  Returns : boolean} setUseWorkerThread{ Params : boolean Returns : OpenSSLEngineOptions} toJson{ Params :  Returns : JsonObject} copy{ Params :  Returns : OpenSSLEngineOptions} sslContextFactory{ Params :  Returns : SslContextFactory} ,setUseWorkerThread copy sslContextFactory ,isAvailable isAlpnAvailable ,,,,boolean ,,boolean ,JsonObject OpenSSLEngineOptions DefaultSslContextFactory ,OpenSSLEngineOptionsConverter: , this, json
vert.x-master,io.vertx.core.net,PemKeyCertOptions,1,1,0,0,0,false,0 ,KeyCertOptions ,0 ,helper: KeyStoreHelper keyPaths: List<String> keyValues: List<Buffer> certPaths: List<String> certValues: List<Buffer> ,init{ Params :  Returns : void} toJson{ Params :  Returns : JsonObject} getKeyPath{ Params :  Returns : String} setKeyPath{ Params : String Returns : PemKeyCertOptions} getKeyPaths{ Params :  Returns : List<String>} setKeyPaths{ Params : List<String> Returns : PemKeyCertOptions} addKeyPath{ Params : String Returns : PemKeyCertOptions} getKeyValue{ Params :  Returns : Buffer} setKeyValue{ Params : Buffer Returns : PemKeyCertOptions} getKeyValues{ Params :  Returns : List<Buffer>} setKeyValues{ Params : List<Buffer> Returns : PemKeyCertOptions} addKeyValue{ Params : Buffer Returns : PemKeyCertOptions} getCertPath{ Params :  Returns : String} setCertPath{ Params : String Returns : PemKeyCertOptions} getCertPaths{ Params :  Returns : List<String>} setCertPaths{ Params : List<String> Returns : PemKeyCertOptions} addCertPath{ Params : String Returns : PemKeyCertOptions} getCertValue{ Params :  Returns : Buffer} setCertValue{ Params : Buffer Returns : PemKeyCertOptions} getCertValues{ Params :  Returns : List<Buffer>} setCertValues{ Params : List<Buffer> Returns : PemKeyCertOptions} addCertValue{ Params : Buffer Returns : PemKeyCertOptions} copy{ Params :  Returns : PemKeyCertOptions} getHelper{ Params : Vertx Returns : KeyStoreHelper} loadKeyStore{ Params : Vertx Returns : KeyStore} getKeyManagerFactory{ Params : Vertx Returns : KeyManagerFactory} keyManagerFactoryMapper{ Params : Vertx Returns : Function<String,KeyManagerFactory>} ,copy getKeyManagerFactory keyManagerFactoryMapper ,,,,KeyCertOptions ,List<Buffer> ,,List<Buffer> ,ArrayList ArrayList ArrayList ArrayList ArrayList ArrayList ArrayList ArrayList ArrayList ArrayList ArrayList ArrayList JsonObject PemKeyCertOptions ArrayList ArrayList KeyStoreHelper ,: , vertx
vert.x-master,io.vertx.core.net,PemTrustOptions,1,1,0,0,0,false,0 ,TrustOptions Cloneable ,0 ,helper: KeyStoreHelper certPaths: ArrayList<String> certValues: ArrayList<Buffer> ,toJson{ Params :  Returns : JsonObject} getCertPaths{ Params :  Returns : List<String>} addCertPath{ Params : String Returns : PemTrustOptions} getCertValues{ Params :  Returns : List<Buffer>} addCertValue{ Params : Buffer Returns : PemTrustOptions} loadKeyStore{ Params : Vertx Returns : KeyStore} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} copy{ Params :  Returns : PemTrustOptions} getHelper{ Params : Vertx Returns : KeyStoreHelper} ,getTrustManagerFactory trustManagerMapper copy ,,,,TrustOptions Cloneable ,ArrayList<Buffer> ,,ArrayList<Buffer> ,ArrayList ArrayList ArrayList ArrayList JsonObject PemTrustOptions KeyStoreHelper ,KeyStoreHelper: , certValues
vert.x-master,io.vertx.core.net,PfxOptions,1,1,0,0,0,false,KeyStoreOptionsBase ,0 ,0 ,,setPassword{ Params : String Returns : PfxOptions} setPath{ Params : String Returns : PfxOptions} setValue{ Params : Buffer Returns : PfxOptions} setAlias{ Params : String Returns : PfxOptions} setAliasPassword{ Params : String Returns : PfxOptions} copy{ Params :  Returns : PfxOptions} toJson{ Params :  Returns : JsonObject} ,setAlias setAliasPassword copy ,,,,,,,,PfxOptions JsonObject ,PfxOptionsConverter: , this, json
vert.x-master,io.vertx.core.net,ProxyOptions,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_TYPE: ProxyType DEFAULT_PORT: int DEFAULT_HOST: String host: String port: int username: String password: String type: ProxyType ,toJson{ Params :  Returns : JsonObject} getHost{ Params :  Returns : String} setHost{ Params : String Returns : ProxyOptions} getPort{ Params :  Returns : int} setPort{ Params : int Returns : ProxyOptions} getUsername{ Params :  Returns : String} setUsername{ Params : String Returns : ProxyOptions} getPassword{ Params :  Returns : String} setPassword{ Params : String Returns : ProxyOptions} getType{ Params :  Returns : ProxyType} setType{ Params : ProxyType Returns : ProxyOptions} ,,,,,,ProxyType ,,ProxyType ,JsonObject IllegalArgumentException ,Objects: , type, "Proxy type may not be null"
vert.x-master,io.vertx.core.net,SelfSignedCertificate,2,1,0,0,0,true,0 ,0 ,0 ,,keyCertOptions{ Params :  Returns : PemKeyCertOptions} trustOptions{ Params :  Returns : PemTrustOptions} privateKeyPath{ Params :  Returns : String} certificatePath{ Params :  Returns : String} delete{ Params :  Returns : void} create{ Params :  Returns : SelfSignedCertificate} create{ Params : String Returns : SelfSignedCertificate} ,,create create ,,,,,,,SelfSignedCertificateImpl SelfSignedCertificateImpl ,Objects: , type, "Proxy type may not be null"
vert.x-master,io.vertx.core.net,ServerOptionsBase,1,1,0,0,0,false,TCPSSLOptions ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.net,SocketAddress,2,1,0,0,0,true,TCPSSLOptions ,0 ,0 ,,sharedRandomPort{ Params : int,String Returns : SocketAddress} inetSocketAddress{ Params : int,String Returns : SocketAddress} domainSocketAddress{ Params : String Returns : SocketAddress} inetSocketAddress{ Params : InetSocketAddress Returns : SocketAddress} host{ Params :  Returns : String} hostName{ Params :  Returns : String} hostAddress{ Params :  Returns : String} port{ Params :  Returns : int} path{ Params :  Returns : String} isInetSocket{ Params :  Returns : boolean} isDomainSocket{ Params :  Returns : boolean} ,,sharedRandomPort inetSocketAddress domainSocketAddress inetSocketAddress ,,,,,,,IllegalArgumentException SocketAddressImpl SocketAddressImpl SocketAddressImpl SocketAddressImpl ,Arguments: , port, 0, 65535, "port p must be in range 0 <= p <= 65535"
vert.x-master,io.vertx.core.net,SSLEngineOptions,1,1,1,0,0,false,0 ,0 ,0 ,DEFAULT_USE_WORKER_POOL: boolean useWorkerThread: boolean ,copy{ Params :  Returns : SSLEngineOptions} sslContextFactory{ Params :  Returns : SslContextFactory} getUseWorkerThread{ Params :  Returns : boolean} setUseWorkerThread{ Params : boolean Returns : SSLEngineOptions} ,,,,copy sslContextFactory ,,boolean ,,boolean ,,Arguments: , port, 0, 65535, "port p must be in range 0 <= p <= 65535"
vert.x-master,io.vertx.core.net,SSLOptions,1,1,0,0,0,false,0 ,0 ,0 ,DEFAULT_USE_ALPN: boolean DEFAULT_SSL_HANDSHAKE_TIMEOUT: long DEFAULT_SSL_HANDSHAKE_TIMEOUT_TIME_UNIT: TimeUnit DEFAULT_ENABLED_SECURE_TRANSPORT_PROTOCOLS: List<String> sslHandshakeTimeout: long sslHandshakeTimeoutUnit: TimeUnit keyCertOptions: KeyCertOptions trustOptions: TrustOptions enabledCipherSuites: Set<String> crlPaths: ArrayList<String> crlValues: ArrayList<Buffer> useAlpn: boolean enabledSecureTransportProtocols: Set<String> ,init{ Params :  Returns : void} getKeyCertOptions{ Params :  Returns : KeyCertOptions} setKeyCertOptions{ Params : KeyCertOptions Returns : SSLOptions} getTrustOptions{ Params :  Returns : TrustOptions} setTrustOptions{ Params : TrustOptions Returns : SSLOptions} addEnabledCipherSuite{ Params : String Returns : SSLOptions} removeEnabledCipherSuite{ Params : String Returns : SSLOptions} getEnabledCipherSuites{ Params :  Returns : Set<String>} getCrlPaths{ Params :  Returns : List<String>} addCrlPath{ Params : String Returns : SSLOptions} getCrlValues{ Params :  Returns : List<Buffer>} addCrlValue{ Params : Buffer Returns : SSLOptions} isUseAlpn{ Params :  Returns : boolean} setUseAlpn{ Params : boolean Returns : SSLOptions} getEnabledSecureTransportProtocols{ Params :  Returns : Set<String>} getSslHandshakeTimeout{ Params :  Returns : long} setSslHandshakeTimeout{ Params : long Returns : SSLOptions} setSslHandshakeTimeoutUnit{ Params : TimeUnit Returns : SSLOptions} getSslHandshakeTimeoutUnit{ Params :  Returns : TimeUnit} setEnabledSecureTransportProtocols{ Params : Set<String> Returns : SSLOptions} addEnabledSecureTransportProtocol{ Params : String Returns : SSLOptions} removeEnabledSecureTransportProtocol{ Params : String Returns : SSLOptions} toJson{ Params :  Returns : JsonObject} ,,,,,,Set<String> ,,Set<String> ,LinkedHashSet LinkedHashSet ArrayList ArrayList LinkedHashSet LinkedHashSet LinkedHashSet ArrayList ArrayList LinkedHashSet LinkedHashSet IllegalArgumentException JsonObject ,SSLOptionsConverter: , this, json
vert.x-master,io.vertx.core.net,TCPSSLOptions,1,1,1,0,0,false,NetworkOptions ,0 ,0 ,DEFAULT_TCP_NO_DELAY: boolean DEFAULT_TCP_KEEP_ALIVE: boolean DEFAULT_SO_LINGER: int DEFAULT_SSL: boolean DEFAULT_IDLE_TIMEOUT: int DEFAULT_IDLE_TIMEOUT_TIME_UNIT: TimeUnit DEFAULT_READ_IDLE_TIMEOUT: int DEFAULT_WRITE_IDLE_TIMEOUT: int DEFAULT_USE_ALPN: boolean DEFAULT_SSL_ENGINE: SSLEngineOptions DEFAULT_ENABLED_SECURE_TRANSPORT_PROTOCOLS: List<String> DEFAULT_TCP_FAST_OPEN: boolean DEFAULT_TCP_CORK: boolean DEFAULT_TCP_QUICKACK: boolean DEFAULT_TCP_USER_TIMEOUT: int DEFAULT_SSL_HANDSHAKE_TIMEOUT: long DEFAULT_SSL_HANDSHAKE_TIMEOUT_TIME_UNIT: TimeUnit tcpNoDelay: boolean tcpKeepAlive: boolean soLinger: int idleTimeout: int readIdleTimeout: int writeIdleTimeout: int idleTimeoutUnit: TimeUnit ssl: boolean sslEngineOptions: SSLEngineOptions sslOptions: SSLOptions tcpFastOpen: boolean tcpCork: boolean tcpQuickAck: boolean tcpUserTimeout: int ,toJson{ Params :  Returns : JsonObject} init{ Params :  Returns : void} getSslOptions{ Params :  Returns : SSLOptions} isTcpNoDelay{ Params :  Returns : boolean} setTcpNoDelay{ Params : boolean Returns : TCPSSLOptions} isTcpKeepAlive{ Params :  Returns : boolean} setTcpKeepAlive{ Params : boolean Returns : TCPSSLOptions} getSoLinger{ Params :  Returns : int} setSoLinger{ Params : int Returns : TCPSSLOptions} setIdleTimeout{ Params : int Returns : TCPSSLOptions} getIdleTimeout{ Params :  Returns : int} setReadIdleTimeout{ Params : int Returns : TCPSSLOptions} getReadIdleTimeout{ Params :  Returns : int} setWriteIdleTimeout{ Params : int Returns : TCPSSLOptions} getWriteIdleTimeout{ Params :  Returns : int} setIdleTimeoutUnit{ Params : TimeUnit Returns : TCPSSLOptions} getIdleTimeoutUnit{ Params :  Returns : TimeUnit} isSsl{ Params :  Returns : boolean} setSsl{ Params : boolean Returns : TCPSSLOptions} getKeyCertOptions{ Params :  Returns : KeyCertOptions} setKeyCertOptions{ Params : KeyCertOptions Returns : TCPSSLOptions} getKeyStoreOptions{ Params :  Returns : JksOptions} setKeyStoreOptions{ Params : JksOptions Returns : TCPSSLOptions} getPfxKeyCertOptions{ Params :  Returns : PfxOptions} setPfxKeyCertOptions{ Params : PfxOptions Returns : TCPSSLOptions} getPemKeyCertOptions{ Params :  Returns : PemKeyCertOptions} setPemKeyCertOptions{ Params : PemKeyCertOptions Returns : TCPSSLOptions} getTrustOptions{ Params :  Returns : TrustOptions} setTrustOptions{ Params : TrustOptions Returns : TCPSSLOptions} getTrustStoreOptions{ Params :  Returns : JksOptions} setTrustStoreOptions{ Params : JksOptions Returns : TCPSSLOptions} getPfxTrustOptions{ Params :  Returns : PfxOptions} setPfxTrustOptions{ Params : PfxOptions Returns : TCPSSLOptions} getPemTrustOptions{ Params :  Returns : PemTrustOptions} setPemTrustOptions{ Params : PemTrustOptions Returns : TCPSSLOptions} addEnabledCipherSuite{ Params : String Returns : TCPSSLOptions} removeEnabledCipherSuite{ Params : String Returns : TCPSSLOptions} getEnabledCipherSuites{ Params :  Returns : Set<String>} getCrlPaths{ Params :  Returns : List<String>} addCrlPath{ Params : String Returns : TCPSSLOptions} getCrlValues{ Params :  Returns : List<Buffer>} addCrlValue{ Params : Buffer Returns : TCPSSLOptions} isUseAlpn{ Params :  Returns : boolean} setUseAlpn{ Params : boolean Returns : TCPSSLOptions} getSslEngineOptions{ Params :  Returns : SSLEngineOptions} setSslEngineOptions{ Params : SSLEngineOptions Returns : TCPSSLOptions} getJdkSslEngineOptions{ Params :  Returns : JdkSSLEngineOptions} setJdkSslEngineOptions{ Params : JdkSSLEngineOptions Returns : TCPSSLOptions} getOpenSslEngineOptions{ Params :  Returns : OpenSSLEngineOptions} setOpenSslEngineOptions{ Params : OpenSSLEngineOptions Returns : TCPSSLOptions} setEnabledSecureTransportProtocols{ Params : Set<String> Returns : TCPSSLOptions} addEnabledSecureTransportProtocol{ Params : String Returns : TCPSSLOptions} removeEnabledSecureTransportProtocol{ Params : String Returns : TCPSSLOptions} isTcpFastOpen{ Params :  Returns : boolean} setTcpFastOpen{ Params : boolean Returns : TCPSSLOptions} isTcpCork{ Params :  Returns : boolean} setTcpCork{ Params : boolean Returns : TCPSSLOptions} isTcpQuickAck{ Params :  Returns : boolean} setTcpQuickAck{ Params : boolean Returns : TCPSSLOptions} getTcpUserTimeout{ Params :  Returns : int} setTcpUserTimeout{ Params : int Returns : TCPSSLOptions} getEnabledSecureTransportProtocols{ Params :  Returns : Set<String>} getSslHandshakeTimeout{ Params :  Returns : long} setSslHandshakeTimeout{ Params : long Returns : TCPSSLOptions} setSslHandshakeTimeoutUnit{ Params : TimeUnit Returns : TCPSSLOptions} getSslHandshakeTimeoutUnit{ Params :  Returns : TimeUnit} setLogActivity{ Params : boolean Returns : TCPSSLOptions} setActivityLogDataFormat{ Params : ByteBufFormat Returns : TCPSSLOptions} setSendBufferSize{ Params : int Returns : TCPSSLOptions} setReceiveBufferSize{ Params : int Returns : TCPSSLOptions} setReuseAddress{ Params : boolean Returns : TCPSSLOptions} setTrafficClass{ Params : int Returns : TCPSSLOptions} setReusePort{ Params : boolean Returns : TCPSSLOptions} ,setLogActivity setActivityLogDataFormat setSendBufferSize setReceiveBufferSize setReuseAddress setTrafficClass setReusePort ,,,,,int ,,int ,SSLOptions SSLOptions IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException ,super: , reusePort
vert.x-master,io.vertx.core.net,TrustManagerFactoryOptions,1,0,0,0,0,false,0 ,TrustOptions ,0 ,trustManagerFactory: TrustManagerFactory ,copy{ Params :  Returns : TrustOptions} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} ,copy getTrustManagerFactory trustManagerMapper ,,,,TrustOptions ,TrustManagerFactory ,,TrustManagerFactory ,IllegalArgumentException TrustManagerFactoryWrapper TrustManagerFactoryOptions ,trustManagerFactory: 
vert.x-master,io.vertx.core.net,TrustManagerFactoryWrapper,1,0,0,0,0,false,TrustManagerFactory ,0 ,TrustManagerFactorySpiWrapper ,LOGGER: Logger KEY_MANAGER_FACTORY_ALGORITHM: String PROVIDER: Provider ,engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} ,engineInit engineInit engineGetTrustManagers ,,,,,,,,Provider TrustManagerFactorySpiWrapper ,null
vert.x-master,io.vertx.core.net,TrustManagerFactorySpiWrapper,3,2,0,1,0,false,TrustManagerFactory ,0 ,TrustManagerFactorySpiWrapper ,trustManagers: TrustManager ,engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} ,engineInit engineInit engineGetTrustManagers ,,,,,TrustManager[] ,,TrustManager[] ,,LOGGER: , "Ignoring provided ManagerFactoryParameters"
vert.x-master,io.vertx.core.net,TrustOptions,2,1,0,0,0,true,TrustManagerFactory ,0 ,0 ,,copy{ Params :  Returns : TrustOptions} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} wrap{ Params : TrustManager Returns : TrustOptions} wrap{ Params : TrustManagerFactory Returns : TrustOptions} ,,wrap wrap ,,,,,,,TrustManagerFactoryOptions TrustManagerFactoryOptions ,LOGGER: , "Ignoring provided ManagerFactoryParameters"
vert.x-master,io.vertx.core.parsetools.impl,JsonEventImpl,1,1,0,0,0,false,0 ,JsonEvent ,0 ,token: JsonToken type: JsonEventType field: String value: Object ,token{ Params :  Returns : JsonToken} type{ Params :  Returns : JsonEventType} fieldName{ Params :  Returns : String} value{ Params :  Returns : Object} isNumber{ Params :  Returns : boolean} isBoolean{ Params :  Returns : boolean} isString{ Params :  Returns : boolean} isNull{ Params :  Returns : boolean} isObject{ Params :  Returns : boolean} isArray{ Params :  Returns : boolean} mapTo{ Params : Class<T> Returns : T} mapTo{ Params : TypeReference<T> Returns : T} integerValue{ Params :  Returns : Integer} longValue{ Params :  Returns : Long} floatValue{ Params :  Returns : Float} doubleValue{ Params :  Returns : Double} booleanValue{ Params :  Returns : Boolean} stringValue{ Params :  Returns : String} binaryValue{ Params :  Returns : Buffer} instantValue{ Params :  Returns : Instant} objectValue{ Params :  Returns : JsonObject} arrayValue{ Params :  Returns : JsonArray} ,type fieldName value isNumber isBoolean isString isNull isObject isArray mapTo mapTo integerValue longValue floatValue doubleValue booleanValue stringValue binaryValue instantValue objectValue arrayValue ,,,,JsonEvent ,Object ,,Object ,DecodeException DecodeException ,ISO_INSTANT: , (CharSequence) value
vert.x-master,io.vertx.core.parsetools.impl,JsonParserImpl,1,1,0,0,0,false,0 ,JsonParser ,TokenParser BufferingHandler ,parser: NonBlockingJsonParser tokenHandler: Handler<JsonEventImpl> eventHandler: Handler<JsonEvent> objectValueMode: boolean arrayValueMode: boolean exceptionHandler: Handler<Throwable> currentField: String endHandler: Handler<Void> demand: long ended: boolean stream: ReadStream<Buffer> emitting: boolean pending: Deque<JsonEventImpl> collectedExceptions: List<IOException> ,pause{ Params :  Returns : JsonParser} resume{ Params :  Returns : JsonParser} fetch{ Params : long Returns : JsonParser} endHandler{ Params : Handler<Void> Returns : JsonParser} handler{ Params : Handler<JsonEvent> Returns : JsonParser} handleEvent{ Params : JsonEventImpl Returns : void} handle{ Params : IOException Returns : void} handle{ Params : Buffer Returns : void} end{ Params :  Returns : void} checkTokens{ Params :  Returns : void} checkPending{ Params :  Returns : void} checkExceptions{ Params :  Returns : void} objectEventMode{ Params :  Returns : JsonParser} objectValueMode{ Params :  Returns : JsonParser} arrayEventMode{ Params :  Returns : JsonParser} arrayValueMode{ Params :  Returns : JsonParser} nextToken{ Params :  Returns : JsonToken} getText{ Params :  Returns : String} getTextCharacters{ Params :  Returns : char[]} getTextLength{ Params :  Returns : int} getTextOffset{ Params :  Returns : int} getCodec{ Params :  Returns : ObjectCodec} setCodec{ Params : ObjectCodec Returns : void} _closeInput{ Params :  Returns : void} handle{ Params : JsonEventImpl Returns : void} convert{ Params : Class<T> Returns : T} write{ Params : Buffer Returns : JsonParser} exceptionHandler{ Params : Handler<Throwable> Returns : JsonParser} ,pause resume fetch endHandler handler handle end objectEventMode objectValueMode arrayEventMode arrayValueMode nextToken getText getTextCharacters getTextLength getTextOffset getCodec setCodec _closeInput handle write exceptionHandler ,,,,JsonParser ,List<IOException> ,,List<IOException> ,ArrayDeque JsonFactory VertxException BufferingHandler JsonEventImpl JsonObject JsonEventImpl BufferingHandler JsonEventImpl JsonArray JsonEventImpl ArrayList IllegalStateException JsonEventImpl JsonEventImpl JsonEventImpl JsonEventImpl JsonEventImpl JsonEventImpl JsonEventImpl JsonEventImpl JsonEventImpl JsonEventImpl UnsupportedOperationException DecodeException ArrayDeque UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException JsonFactory TokenParser IOContext UnsupportedOperationException VertxException ,: , buffer
vert.x-master,io.vertx.core.parsetools.impl,TokenParser,3,2,0,1,0,false,0 ,JsonParser ,TokenParser BufferingHandler ,tokens: ArrayDeque<Object> text: String ,pause{ Params :  Returns : JsonParser} resume{ Params :  Returns : JsonParser} fetch{ Params : long Returns : JsonParser} endHandler{ Params : Handler<Void> Returns : JsonParser} handler{ Params : Handler<JsonEvent> Returns : JsonParser} handleEvent{ Params : JsonEventImpl Returns : void} handle{ Params : IOException Returns : void} handle{ Params : Buffer Returns : void} end{ Params :  Returns : void} checkTokens{ Params :  Returns : void} checkPending{ Params :  Returns : void} checkExceptions{ Params :  Returns : void} objectEventMode{ Params :  Returns : JsonParser} objectValueMode{ Params :  Returns : JsonParser} arrayEventMode{ Params :  Returns : JsonParser} arrayValueMode{ Params :  Returns : JsonParser} nextToken{ Params :  Returns : JsonToken} getText{ Params :  Returns : String} getTextCharacters{ Params :  Returns : char[]} getTextLength{ Params :  Returns : int} getTextOffset{ Params :  Returns : int} getCodec{ Params :  Returns : ObjectCodec} setCodec{ Params : ObjectCodec Returns : void} _closeInput{ Params :  Returns : void} handle{ Params : JsonEventImpl Returns : void} convert{ Params : Class<T> Returns : T} write{ Params : Buffer Returns : JsonParser} exceptionHandler{ Params : Handler<Throwable> Returns : JsonParser} ,pause resume fetch endHandler handler handle end objectEventMode objectValueMode arrayEventMode arrayValueMode nextToken getText getTextCharacters getTextLength getTextOffset getCodec setCodec _closeInput handle write exceptionHandler ,,,,,String ,,String ,ArrayDeque UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,tokens: 
vert.x-master,io.vertx.core.parsetools.impl,BufferingHandler,3,2,0,0,0,false,0 ,JsonParser ,TokenParser BufferingHandler ,handler: Handler<Void> depth: int buffer: TokenParser ,pause{ Params :  Returns : JsonParser} resume{ Params :  Returns : JsonParser} fetch{ Params : long Returns : JsonParser} endHandler{ Params : Handler<Void> Returns : JsonParser} handler{ Params : Handler<JsonEvent> Returns : JsonParser} handleEvent{ Params : JsonEventImpl Returns : void} handle{ Params : IOException Returns : void} handle{ Params : Buffer Returns : void} end{ Params :  Returns : void} checkTokens{ Params :  Returns : void} checkPending{ Params :  Returns : void} checkExceptions{ Params :  Returns : void} objectEventMode{ Params :  Returns : JsonParser} objectValueMode{ Params :  Returns : JsonParser} arrayEventMode{ Params :  Returns : JsonParser} arrayValueMode{ Params :  Returns : JsonParser} nextToken{ Params :  Returns : JsonToken} getText{ Params :  Returns : String} getTextCharacters{ Params :  Returns : char[]} getTextLength{ Params :  Returns : int} getTextOffset{ Params :  Returns : int} getCodec{ Params :  Returns : ObjectCodec} setCodec{ Params : ObjectCodec Returns : void} _closeInput{ Params :  Returns : void} handle{ Params : JsonEventImpl Returns : void} convert{ Params : Class<T> Returns : T} write{ Params : Buffer Returns : JsonParser} exceptionHandler{ Params : Handler<Throwable> Returns : JsonParser} ,pause resume fetch endHandler handler handle end objectEventMode objectValueMode arrayEventMode arrayValueMode nextToken getText getTextCharacters getTextLength getTextOffset getCodec setCodec _closeInput handle write exceptionHandler ,,,,Handler ,,,,JsonFactory TokenParser IOContext UnsupportedOperationException VertxException ,JacksonCodec: , buffer, type
vert.x-master,io.vertx.core.parsetools.impl,RecordParserImpl,1,1,0,0,0,false,0 ,RecordParser ,0 ,EMPTY_BUFFER: Buffer buff: Buffer pos: int start: int delimPos: int delimited: boolean delim: byte recordSize: int maxRecordSize: int demand: long eventHandler: Handler<Buffer> endHandler: Handler<Void> exceptionHandler: Handler<Throwable> parsing: boolean streamEnded: boolean stream: ReadStream<Buffer> ,setOutput{ Params : Handler<Buffer> Returns : void} latin1StringToBytes{ Params : String Returns : Buffer} newDelimited{ Params : String,ReadStream<Buffer>,Handler<Buffer> Returns : RecordParser} newDelimited{ Params : Buffer,ReadStream<Buffer>,Handler<Buffer> Returns : RecordParser} newFixed{ Params : int,ReadStream<Buffer>,Handler<Buffer> Returns : RecordParser} delimitedMode{ Params : String Returns : void} delimitedMode{ Params : Buffer Returns : void} fixedSizeMode{ Params : int Returns : void} maxRecordSize{ Params : int Returns : RecordParser} handleParsing{ Params :  Returns : void} parseDelimited{ Params :  Returns : int} parseFixed{ Params :  Returns : int} handle{ Params : Buffer Returns : void} end{ Params :  Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : RecordParser} handler{ Params : Handler<Buffer> Returns : RecordParser} pause{ Params :  Returns : RecordParser} fetch{ Params : long Returns : RecordParser} resume{ Params :  Returns : RecordParser} endHandler{ Params : Handler<Void> Returns : RecordParser} ,exceptionHandler handler pause fetch resume endHandler ,latin1StringToBytes newDelimited newDelimited newFixed ,,,RecordParser ,ReadStream<Buffer> ,,ReadStream<Buffer> ,RecordParserImpl RecordParserImpl IllegalStateException ,: , Long.MAX_VALUE
vert.x-master,io.vertx.core.parsetools,JsonEvent,2,1,0,0,0,true,0 ,RecordParser ,0 ,,type{ Params :  Returns : JsonEventType} fieldName{ Params :  Returns : String} value{ Params :  Returns : Object} isNumber{ Params :  Returns : boolean} integerValue{ Params :  Returns : Integer} longValue{ Params :  Returns : Long} floatValue{ Params :  Returns : Float} doubleValue{ Params :  Returns : Double} isBoolean{ Params :  Returns : boolean} booleanValue{ Params :  Returns : Boolean} isString{ Params :  Returns : boolean} stringValue{ Params :  Returns : String} binaryValue{ Params :  Returns : Buffer} instantValue{ Params :  Returns : Instant} isNull{ Params :  Returns : boolean} isObject{ Params :  Returns : boolean} objectValue{ Params :  Returns : JsonObject} isArray{ Params :  Returns : boolean} arrayValue{ Params :  Returns : JsonArray} mapTo{ Params : Class<T> Returns : T} mapTo{ Params : TypeReference<T> Returns : T} ,,,,,,,,,,: , Long.MAX_VALUE
vert.x-master,io.vertx.core.parsetools,JsonParser,2,1,0,0,0,true,0 ,RecordParser ,0 ,,newParser{ Params :  Returns : JsonParser} newParser{ Params : ReadStream<Buffer> Returns : JsonParser} write{ Params : Buffer Returns : JsonParser} end{ Params :  Returns : void} objectEventMode{ Params :  Returns : JsonParser} objectValueMode{ Params :  Returns : JsonParser} arrayEventMode{ Params :  Returns : JsonParser} arrayValueMode{ Params :  Returns : JsonParser} pause{ Params :  Returns : JsonParser} resume{ Params :  Returns : JsonParser} fetch{ Params : long Returns : JsonParser} endHandler{ Params : Handler<Void> Returns : JsonParser} handler{ Params : Handler<JsonEvent> Returns : JsonParser} exceptionHandler{ Params : Handler<Throwable> Returns : JsonParser} ,pause resume fetch ,newParser newParser ,,,,,,,JsonParserImpl JsonParserImpl ,: , Long.MAX_VALUE
vert.x-master,io.vertx.core.parsetools,RecordParser,2,1,0,0,0,true,0 ,RecordParser ,0 ,,setOutput{ Params : Handler<Buffer> Returns : void} newDelimited{ Params : String,Handler<Buffer> Returns : RecordParser} newDelimited{ Params : String,ReadStream<Buffer> Returns : RecordParser} newDelimited{ Params : String Returns : RecordParser} newDelimited{ Params : Buffer Returns : RecordParser} newDelimited{ Params : Buffer,Handler<Buffer> Returns : RecordParser} newDelimited{ Params : Buffer,ReadStream<Buffer> Returns : RecordParser} newFixed{ Params : int Returns : RecordParser} newFixed{ Params : int,Handler<Buffer> Returns : RecordParser} newFixed{ Params : int,ReadStream<Buffer> Returns : RecordParser} delimitedMode{ Params : String Returns : void} delimitedMode{ Params : Buffer Returns : void} fixedSizeMode{ Params : int Returns : void} maxRecordSize{ Params : int Returns : RecordParser} handle{ Params : Buffer Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : RecordParser} handler{ Params : Handler<Buffer> Returns : RecordParser} pause{ Params :  Returns : RecordParser} fetch{ Params : long Returns : RecordParser} resume{ Params :  Returns : RecordParser} endHandler{ Params : Handler<Void> Returns : RecordParser} ,exceptionHandler handler pause fetch resume endHandler ,newDelimited newDelimited newDelimited newDelimited newDelimited newDelimited newFixed newFixed newFixed ,,,,,,,,RecordParserImpl: , size, stream, null
vert.x-master,io.vertx.core,Promise,2,1,0,0,0,true,0 ,RecordParser ,0 ,,promise{ Params :  Returns : Promise<T>} handle{ Params : AsyncResult<T> Returns : void} complete{ Params : T Returns : void} complete{ Params :  Returns : void} fail{ Params : Throwable Returns : void} fail{ Params : String Returns : void} tryComplete{ Params : T Returns : boolean} tryComplete{ Params :  Returns : boolean} tryFail{ Params : Throwable Returns : boolean} tryFail{ Params : String Returns : boolean} future{ Params :  Returns : Future<T>} ,handle ,promise ,,,,,,,PromiseImpl IllegalStateException IllegalStateException IllegalStateException IllegalStateException NoStackTraceThrowable ,: , new NoStackTraceThrowable(message)
vert.x-master,io.vertx.core,ServiceHelper,1,1,0,0,0,false,0 ,0 ,0 ,,loadFactory{ Params : Class<T> Returns : T} loadFactoryOrNull{ Params : Class<T> Returns : T} loadFactories{ Params : Class<T> Returns : Collection<T>} loadFactories{ Params : Class<T>,ClassLoader Returns : Collection<T>} ,,loadFactory loadFactoryOrNull loadFactories loadFactories ,,,,,,,IllegalStateException ArrayList ,Collections: 
vert.x-master,io.vertx.core.shareddata,AsyncMap,2,1,0,0,0,true,0 ,0 ,0 ,,get{ Params : K Returns : Future<V>} put{ Params : K,V Returns : Future<Void>} put{ Params : K,V,long Returns : Future<Void>} putIfAbsent{ Params : K,V Returns : Future<V>} putIfAbsent{ Params : K,V,long Returns : Future<V>} remove{ Params : K Returns : Future<V>} removeIfPresent{ Params : K,V Returns : Future<Boolean>} replace{ Params : K,V Returns : Future<V>} replace{ Params : K,V,long Returns : Future<V>} replaceIfPresent{ Params : K,V,V Returns : Future<Boolean>} replaceIfPresent{ Params : K,V,V,long Returns : Future<Boolean>} clear{ Params :  Returns : Future<Void>} size{ Params :  Returns : Future<Integer>} keys{ Params :  Returns : Future<Set<K>>} values{ Params :  Returns : Future<List<V>>} entries{ Params :  Returns : Future<Map<K,V>>} ,,,,,,,,,UnsupportedOperationException UnsupportedOperationException ,Future: , new UnsupportedOperationException()
vert.x-master,io.vertx.core.shareddata,ClusterSerializable,2,1,0,0,0,true,0 ,0 ,0 ,,writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} ,writeToBuffer readFromBuffer ,,,,,,,,,Future: , new UnsupportedOperationException()
vert.x-master,io.vertx.core.shareddata,Counter,2,1,0,0,0,true,0 ,0 ,0 ,,get{ Params :  Returns : Future<Long>} incrementAndGet{ Params :  Returns : Future<Long>} getAndIncrement{ Params :  Returns : Future<Long>} decrementAndGet{ Params :  Returns : Future<Long>} addAndGet{ Params : long Returns : Future<Long>} getAndAdd{ Params : long Returns : Future<Long>} compareAndSet{ Params : long,long Returns : Future<Boolean>} ,,,,,,,,,,Future: , new UnsupportedOperationException()
vert.x-master,io.vertx.core.shareddata.impl,AsynchronousCounter,1,1,0,0,0,false,0 ,Counter ,0 ,vertx: VertxInternal counter: AtomicLong ,get{ Params :  Returns : Future<Long>} incrementAndGet{ Params :  Returns : Future<Long>} getAndIncrement{ Params :  Returns : Future<Long>} decrementAndGet{ Params :  Returns : Future<Long>} addAndGet{ Params : long Returns : Future<Long>} getAndAdd{ Params : long Returns : Future<Long>} compareAndSet{ Params : long,long Returns : Future<Boolean>} ,get incrementAndGet getAndIncrement decrementAndGet addAndGet getAndAdd compareAndSet ,,,,Counter ,AtomicLong ,,AtomicLong ,AtomicLong ,promise: 
vert.x-master,io.vertx.core.shareddata.impl,Checker,1,0,0,0,0,false,0 ,0 ,0 ,log: Logger IMMUTABLE_TYPES: Set<Class<?>> ,checkType{ Params : Object Returns : void} copyIfRequired{ Params : T Returns : T} copyByteArray{ Params : byte[] Returns : byte[]} copyClusterSerializable{ Params : ClusterSerializable Returns : ClusterSerializable} logDeveloperInfo{ Params : Object Returns : void} copySerializable{ Params : Object Returns : Object} ,,checkType copyIfRequired copyByteArray copyClusterSerializable logDeveloperInfo copySerializable ,,,,,,,IllegalArgumentException IllegalStateException ,SerializableUtils: , obj
vert.x-master,io.vertx.core.shareddata.impl,ClusterSerializable,2,1,0,0,0,true,0 ,0 ,0 ,,writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} ,,,,,,,,,,SerializableUtils: , obj
vert.x-master,io.vertx.core.shareddata.impl,LocalAsyncLocks,1,1,0,0,0,false,0 ,0 ,LockWaiter AsyncLock ,waitersMap: ConcurrentMap<String, List<LockWaiter>> ,timeout{ Params :  Returns : void} acquireLock{ Params :  Returns : void} release{ Params :  Returns : void} waiters{ Params :  Returns : int} acquire{ Params : ContextInternal,String,long Returns : Future<Lock>} nextWaiter{ Params : String Returns : void} ,release waiters ,,,,,ConcurrentMap<String,List<LockWaiter>> ,,ConcurrentMap<String,List<LockWaiter>> ,ArrayList AsyncLock AtomicBoolean ConcurrentHashMap LockWaiter ArrayList ArrayList ArrayList ,waiters: , 0
vert.x-master,io.vertx.core.shareddata.impl,LockWaiter,3,2,0,0,0,false,0 ,0 ,LockWaiter AsyncLock ,context: ContextInternal lockName: String promise: Promise<Lock> timerId: Long ,timeout{ Params :  Returns : void} acquireLock{ Params :  Returns : void} release{ Params :  Returns : void} waiters{ Params :  Returns : int} acquire{ Params : ContextInternal,String,long Returns : Future<Lock>} nextWaiter{ Params : String Returns : void} ,release waiters ,,,,,,,,ArrayList AsyncLock ,: , lockName
vert.x-master,io.vertx.core.shareddata.impl,AsyncLock,3,2,0,0,0,false,0 ,0 ,LockWaiter AsyncLock ,lockName: String invoked: AtomicBoolean ,timeout{ Params :  Returns : void} acquireLock{ Params :  Returns : void} release{ Params :  Returns : void} waiters{ Params :  Returns : int} acquire{ Params : ContextInternal,String,long Returns : Future<Lock>} nextWaiter{ Params : String Returns : void} ,release waiters ,,,,LockInternal ,,,,AtomicBoolean ,waiters: 
vert.x-master,io.vertx.core.shareddata.impl,LocalAsyncMapImpl,1,1,0,0,0,false,0 ,AsyncMap<K,V> ,Holder ,vertx: VertxInternal map: ConcurrentMap<K, Holder<V>> ,get{ Params : K Returns : Future<V>} put{ Params : K,V Returns : Future<Void>} putIfAbsent{ Params : K,V Returns : Future<V>} put{ Params : K,V,long Returns : Future<Void>} removeIfExpired{ Params : K Returns : void} putIfAbsent{ Params : K,V,long Returns : Future<V>} removeIfPresent{ Params : K,V Returns : Future<Boolean>} replace{ Params : K,V Returns : Future<V>} replace{ Params : K,V,long Returns : Future<V>} replaceIfPresent{ Params : K,V,V Returns : Future<Boolean>} replaceIfPresent{ Params : K,V,V,long Returns : Future<Boolean>} clear{ Params :  Returns : Future<Void>} size{ Params :  Returns : Future<Integer>} keys{ Params :  Returns : Future<Set<K>>} values{ Params :  Returns : Future<List<V>>} entries{ Params :  Returns : Future<Map<K,V>>} remove{ Params : K Returns : Future<V>} expires{ Params :  Returns : boolean} hasNotExpired{ Params :  Returns : boolean} toString{ Params :  Returns : String} ,get put putIfAbsent put putIfAbsent removeIfPresent replace replace replaceIfPresent replaceIfPresent clear size keys values entries remove toString ,,,,AsyncMap ,ConcurrentMap<K,Holder<V>> ,,ConcurrentMap<K,Holder<V>> ,ConcurrentHashMap Holder Holder Holder Holder AtomicBoolean Holder Holder Holder Holder HashSet HashMap IllegalArgumentException ,ctx: 
vert.x-master,io.vertx.core.shareddata.impl,Holder,3,2,0,1,0,false,0 ,AsyncMap<K,V> ,Holder ,value: V timerId: long ttl: long timestamp: long ,get{ Params : K Returns : Future<V>} put{ Params : K,V Returns : Future<Void>} putIfAbsent{ Params : K,V Returns : Future<V>} put{ Params : K,V,long Returns : Future<Void>} removeIfExpired{ Params : K Returns : void} putIfAbsent{ Params : K,V,long Returns : Future<V>} removeIfPresent{ Params : K,V Returns : Future<Boolean>} replace{ Params : K,V Returns : Future<V>} replace{ Params : K,V,long Returns : Future<V>} replaceIfPresent{ Params : K,V,V Returns : Future<Boolean>} replaceIfPresent{ Params : K,V,V,long Returns : Future<Boolean>} clear{ Params :  Returns : Future<Void>} size{ Params :  Returns : Future<Integer>} keys{ Params :  Returns : Future<Set<K>>} values{ Params :  Returns : Future<List<V>>} entries{ Params :  Returns : Future<Map<K,V>>} remove{ Params : K Returns : Future<V>} expires{ Params :  Returns : boolean} hasNotExpired{ Params :  Returns : boolean} toString{ Params :  Returns : String} ,get put putIfAbsent put putIfAbsent removeIfPresent replace replace replaceIfPresent replaceIfPresent clear size keys values entries remove toString ,,,,,,,,IllegalArgumentException ,System: 
vert.x-master,io.vertx.core.shareddata.impl,LocalMapImpl,1,0,0,0,0,false,0 ,LocalMap<K,V> ,0 ,maps: ConcurrentMap<String, LocalMap<?, ?>> name: String map: ConcurrentMap<K, V> ,get{ Params : Object Returns : V} put{ Params : K,V Returns : V} remove{ Params : Object Returns : V} clear{ Params :  Returns : void} size{ Params :  Returns : int} isEmpty{ Params :  Returns : boolean} putIfAbsent{ Params : K,V Returns : V} remove{ Params : Object,Object Returns : boolean} replace{ Params : K,V,V Returns : boolean} removeIfPresent{ Params : K,V Returns : boolean} replaceIfPresent{ Params : K,V,V Returns : boolean} replace{ Params : K,V Returns : V} replaceAll{ Params : BiFunction<? super K,? super V,? extends V> Returns : void} close{ Params :  Returns : void} keySet{ Params :  Returns : Set<K>} values{ Params :  Returns : Collection<V>} typeChecked{ Params : BiFunction<? super K,? super V,? extends V> Returns : BiFunction<? super K,? super V,? extends V>} typeChecked{ Params : Function<? super K,? extends V> Returns : Function<? super K,? extends V>} compute{ Params : K,BiFunction<? super K,? super V,? extends V> Returns : V} computeIfAbsent{ Params : K,Function<? super K,? extends V> Returns : V} computeIfPresent{ Params : K,BiFunction<? super K,? super V,? extends V> Returns : V} containsKey{ Params : Object Returns : boolean} containsValue{ Params : Object Returns : boolean} entrySet{ Params :  Returns : Set<Entry<K,V>>} getKey{ Params :  Returns : K} getValue{ Params :  Returns : V} setValue{ Params : V Returns : V} forEach{ Params : BiConsumer<? super K,? super V> Returns : void} getOrDefault{ Params : Object,V Returns : V} merge{ Params : K,V,BiFunction<? super V,? super V,? extends V> Returns : V} putAll{ Params : Map<? extends K,? extends V> Returns : void} toString{ Params :  Returns : String} ,get put remove clear size isEmpty putIfAbsent remove replace removeIfPresent replaceIfPresent replace replaceAll close keySet values compute computeIfAbsent computeIfPresent containsKey containsValue entrySet getKey getValue setValue forEach getOrDefault merge putAll toString ,,,,LocalMap ,ConcurrentMap<K,V> ,,ConcurrentMap<K,V> ,ConcurrentHashMap HashSet ArrayList HashSet Entry UnsupportedOperationException ,map: 
vert.x-master,io.vertx.core.shareddata.impl,LockInternal,2,1,0,0,0,true,0 ,LocalMap<K,V> ,0 ,,waiters{ Params :  Returns : int} ,,,,,,,,,,map: 
vert.x-master,io.vertx.core.shareddata.impl,SharedDataImpl,1,1,0,0,0,false,0 ,SharedData ,WrappedAsyncMap ,DEFAULT_LOCK_TIMEOUT: long vertx: VertxInternal clusterManager: ClusterManager localAsyncLocks: LocalAsyncLocks localAsyncMaps: ConcurrentMap<String, LocalAsyncMapImpl<?, ?>> localCounters: ConcurrentMap<String, Counter> localMaps: ConcurrentMap<String, LocalMap<?, ?>> ,getClusterWideMap{ Params : String Returns : Future<AsyncMap<K,V>>} getAsyncMap{ Params : String Returns : Future<AsyncMap<K,V>>} getLock{ Params : String Returns : Future<Lock>} getLockWithTimeout{ Params : String,long Returns : Future<Lock>} getLocalLock{ Params : String Returns : Future<Lock>} getLocalLockWithTimeout{ Params : String,long Returns : Future<Lock>} getCounter{ Params : String Returns : Future<Counter>} getLocalMap{ Params : String Returns : LocalMap<K,V>} getLocalAsyncMap{ Params : String Returns : Future<AsyncMap<K,V>>} getLocalCounter{ Params : String Returns : Future<Counter>} checkType{ Params : Object Returns : void} get{ Params : K Returns : Future<V>} put{ Params : K,V Returns : Future<Void>} put{ Params : K,V,long Returns : Future<Void>} putIfAbsent{ Params : K,V Returns : Future<V>} putIfAbsent{ Params : K,V,long Returns : Future<V>} remove{ Params : K Returns : Future<V>} removeIfPresent{ Params : K,V Returns : Future<Boolean>} replace{ Params : K,V Returns : Future<V>} replace{ Params : K,V,long Returns : Future<V>} replaceIfPresent{ Params : K,V,V Returns : Future<Boolean>} replaceIfPresent{ Params : K,V,V,long Returns : Future<Boolean>} clear{ Params :  Returns : Future<Void>} size{ Params :  Returns : Future<Integer>} keys{ Params :  Returns : Future<Set<K>>} values{ Params :  Returns : Future<List<V>>} entries{ Params :  Returns : Future<Map<K,V>>} getDelegate{ Params :  Returns : AsyncMap<K,V>} ,getClusterWideMap getAsyncMap getLock getLockWithTimeout getLocalLock getLocalLockWithTimeout getCounter getLocalMap getLocalAsyncMap getLocalCounter get put put putIfAbsent putIfAbsent remove removeIfPresent replace replace replaceIfPresent replaceIfPresent clear size keys values entries ,checkType ,,,SharedData ,ConcurrentMap<String,LocalMap<?,?>> ,,ConcurrentMap<String,LocalMap<?,?>> ,ConcurrentHashMap ConcurrentHashMap ConcurrentHashMap LocalAsyncLocks IllegalStateException LocalMapImpl LocalAsyncMapImpl WrappedAsyncMap AsynchronousCounter IllegalArgumentException IllegalArgumentException ,obj: 
vert.x-master,io.vertx.core.shareddata.impl,WrappedAsyncMap,3,1,0,1,1,false,0 ,SharedData ,WrappedAsyncMap ,delegate: AsyncMap<K, V> ,getClusterWideMap{ Params : String Returns : Future<AsyncMap<K,V>>} getAsyncMap{ Params : String Returns : Future<AsyncMap<K,V>>} getLock{ Params : String Returns : Future<Lock>} getLockWithTimeout{ Params : String,long Returns : Future<Lock>} getLocalLock{ Params : String Returns : Future<Lock>} getLocalLockWithTimeout{ Params : String,long Returns : Future<Lock>} getCounter{ Params : String Returns : Future<Counter>} getLocalMap{ Params : String Returns : LocalMap<K,V>} getLocalAsyncMap{ Params : String Returns : Future<AsyncMap<K,V>>} getLocalCounter{ Params : String Returns : Future<Counter>} checkType{ Params : Object Returns : void} get{ Params : K Returns : Future<V>} put{ Params : K,V Returns : Future<Void>} put{ Params : K,V,long Returns : Future<Void>} putIfAbsent{ Params : K,V Returns : Future<V>} putIfAbsent{ Params : K,V,long Returns : Future<V>} remove{ Params : K Returns : Future<V>} removeIfPresent{ Params : K,V Returns : Future<Boolean>} replace{ Params : K,V Returns : Future<V>} replace{ Params : K,V,long Returns : Future<V>} replaceIfPresent{ Params : K,V,V Returns : Future<Boolean>} replaceIfPresent{ Params : K,V,V,long Returns : Future<Boolean>} clear{ Params :  Returns : Future<Void>} size{ Params :  Returns : Future<Integer>} keys{ Params :  Returns : Future<Set<K>>} values{ Params :  Returns : Future<List<V>>} entries{ Params :  Returns : Future<Map<K,V>>} getDelegate{ Params :  Returns : AsyncMap<K,V>} ,getClusterWideMap getAsyncMap getLock getLockWithTimeout getLocalLock getLocalLockWithTimeout getCounter getLocalMap getLocalAsyncMap getLocalCounter get put put putIfAbsent putIfAbsent remove removeIfPresent replace replace replaceIfPresent replaceIfPresent clear size keys values entries ,checkType ,,,AsyncMap ,AsyncMap<K,V> ,,AsyncMap<K,V> ,,delegate: 
vert.x-master,io.vertx.core.shareddata,LocalMap,2,1,0,0,0,true,0 ,SharedData ,0 ,,get{ Params : Object Returns : V} put{ Params : K,V Returns : V} remove{ Params : Object Returns : V} clear{ Params :  Returns : void} size{ Params :  Returns : int} isEmpty{ Params :  Returns : boolean} putIfAbsent{ Params : K,V Returns : V} removeIfPresent{ Params : K,V Returns : boolean} replaceIfPresent{ Params : K,V,V Returns : boolean} replace{ Params : K,V Returns : V} close{ Params :  Returns : void} keySet{ Params :  Returns : Set<K>} values{ Params :  Returns : Collection<V>} compute{ Params : K,BiFunction<? super K,? super V,? extends V> Returns : V} computeIfAbsent{ Params : K,Function<? super K,? extends V> Returns : V} computeIfPresent{ Params : K,BiFunction<? super K,? super V,? extends V> Returns : V} containsKey{ Params : Object Returns : boolean} containsValue{ Params : Object Returns : boolean} entrySet{ Params :  Returns : Set<Entry<K,V>>} forEach{ Params : BiConsumer<? super K,? super V> Returns : void} getOrDefault{ Params : Object,V Returns : V} merge{ Params : K,V,BiFunction<? super V,? super V,? extends V> Returns : V} putAll{ Params : Map<? extends K,? extends V> Returns : void} remove{ Params : Object,Object Returns : boolean} replace{ Params : K,V,V Returns : boolean} replaceAll{ Params : BiFunction<? super K,? super V,? extends V> Returns : void} ,compute computeIfAbsent computeIfPresent containsKey containsValue entrySet forEach getOrDefault merge putAll remove replace replaceAll ,,,,,,,,,delegate: 
vert.x-master,io.vertx.core.shareddata,Lock,2,1,0,0,0,true,0 ,SharedData ,0 ,,release{ Params :  Returns : void} ,,,,,,,,,,delegate: 
vert.x-master,io.vertx.core.shareddata,Shareable,2,1,0,0,0,true,0 ,SharedData ,0 ,,copy{ Params :  Returns : Shareable} ,,,,,,,,,,delegate: 
vert.x-master,io.vertx.core.shareddata,SharedData,2,1,0,0,0,true,0 ,SharedData ,0 ,,getClusterWideMap{ Params : String Returns : Future<AsyncMap<K,V>>} getAsyncMap{ Params : String Returns : Future<AsyncMap<K,V>>} getLocalAsyncMap{ Params : String Returns : Future<AsyncMap<K,V>>} getLock{ Params : String Returns : Future<Lock>} getLockWithTimeout{ Params : String,long Returns : Future<Lock>} getLocalLock{ Params : String Returns : Future<Lock>} getLocalLockWithTimeout{ Params : String,long Returns : Future<Lock>} getCounter{ Params : String Returns : Future<Counter>} getLocalCounter{ Params : String Returns : Future<Counter>} getLocalMap{ Params : String Returns : LocalMap<K,V>} ,,,,,,,,,,delegate: 
vert.x-master,io.vertx.core.spi.cluster,ClusterManager,2,1,0,0,0,true,0 ,SharedData ,0 ,,init{ Params : VertxBuilder Returns : void} init{ Params : Vertx,NodeSelector Returns : void} getAsyncMap{ Params : String,Promise<AsyncMap<K,V>> Returns : void} getSyncMap{ Params : String Returns : Map<K,V>} getLockWithTimeout{ Params : String,long,Promise<Lock> Returns : void} getCounter{ Params : String,Promise<Counter> Returns : void} getNodeId{ Params :  Returns : String} getNodes{ Params :  Returns : List<String>} nodeListener{ Params : NodeListener Returns : void} setNodeInfo{ Params : NodeInfo,Promise<Void> Returns : void} getNodeInfo{ Params :  Returns : NodeInfo} getNodeInfo{ Params : String,Promise<NodeInfo> Returns : void} join{ Params : Promise<Void> Returns : void} leave{ Params : Promise<Void> Returns : void} isActive{ Params :  Returns : boolean} addRegistration{ Params : String,RegistrationInfo,Promise<Void> Returns : void} removeRegistration{ Params : String,RegistrationInfo,Promise<Void> Returns : void} getRegistrations{ Params : String,Promise<List<RegistrationInfo>> Returns : void} clusterHost{ Params :  Returns : String} clusterPublicHost{ Params :  Returns : String} ,init ,,,,,,,,,builder: , this
vert.x-master,io.vertx.core.spi.cluster.impl,DefaultNodeSelector,1,1,0,0,0,false,0 ,NodeSelector ,0 ,selectors: Selectors ,init{ Params : Vertx,ClusterManager Returns : void} eventBusStarted{ Params :  Returns : void} selectForSend{ Params : Message<?>,Promise<String> Returns : void} selectForPublish{ Params : Message<?>,Promise<Iterable<String>> Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} registrationsLost{ Params :  Returns : void} wantsUpdatesFor{ Params : String Returns : boolean} ,init eventBusStarted selectForSend selectForPublish registrationsUpdated registrationsLost wantsUpdatesFor ,,,,NodeSelector ,Selectors ,,Selectors ,Selectors ,selectors: , address
vert.x-master,io.vertx.core.spi.cluster.impl.selector,Index,1,0,0,0,0,false,0 ,IntUnaryOperator ,0 ,max: int idx: AtomicInteger ,nextVal{ Params :  Returns : int} applyAsInt{ Params : int Returns : int} ,applyAsInt ,,,,IntUnaryOperator ,AtomicInteger ,,AtomicInteger ,AtomicInteger ,idx: , this
vert.x-master,io.vertx.core.spi.cluster.impl.selector,RoundRobinSelector,2,1,0,0,0,true,0 ,IntUnaryOperator ,0 ,,selectForSend{ Params :  Returns : String} selectForPublish{ Params :  Returns : Iterable<String>} ,,,,,,,,,,idx: , this
vert.x-master,io.vertx.core.spi.cluster.impl.selector,SelectorEntry,1,0,0,0,0,false,0 ,0 ,0 ,selector: RoundRobinSelector selectorPromise: Promise<RoundRobinSelector> counter: int ,increment{ Params :  Returns : SelectorEntry} data{ Params : List<String> Returns : SelectorEntry} computeWeights{ Params : List<String> Returns : Map<String,Weight>} isEvenlyDistributed{ Params : Map<String,Weight> Returns : boolean} shouldInitialize{ Params :  Returns : boolean} isNotReady{ Params :  Returns : boolean} ,,,,,,,,,SelectorEntry SimpleRoundRobinSelector ArrayList WeightedRoundRobinSelector SelectorEntry HashMap Weight ,weight: 
vert.x-master,io.vertx.core.spi.cluster.impl.selector,Selectors,1,1,0,0,0,false,0 ,0 ,0 ,map: ConcurrentMap<String, SelectorEntry> clusterManager: ClusterManager ,withSelector{ Params : Message<?>,Promise<T>,BiConsumer<Promise<T>,RoundRobinSelector> Returns : void} initialize{ Params : String Returns : void} dataReceived{ Params : String,List<RegistrationInfo>,boolean Returns : void} computeAccessible{ Params : List<RegistrationInfo> Returns : List<String>} isAccessible{ Params : RegistrationInfo Returns : boolean} dataLost{ Params :  Returns : void} hasEntryFor{ Params : String Returns : boolean} ,,,,,,ClusterManager ,,ClusterManager ,ConcurrentHashMap SelectorEntry ArrayList ,map: , address
vert.x-master,io.vertx.core.spi.cluster.impl.selector,SimpleRoundRobinSelector,1,0,0,0,0,false,0 ,RoundRobinSelector ,0 ,nodeIds: List<String> index: Index ,selectForSend{ Params :  Returns : String} selectForPublish{ Params :  Returns : Iterable<String>} ,selectForSend selectForPublish ,,,,RoundRobinSelector ,Index ,,Index ,Index ,index: 
vert.x-master,io.vertx.core.spi.cluster.impl.selector,Weight,1,0,0,0,0,false,0 ,Comparable<Weight> ,0 ,value: int ,value{ Params :  Returns : int} increment{ Params :  Returns : Weight} compareTo{ Params : Weight Returns : int} ,compareTo ,,,,Comparable ,int ,,int ,,Integer: , value, other.value
vert.x-master,io.vertx.core.spi.cluster.impl.selector,WeightedRoundRobinSelector,1,0,0,0,0,false,0 ,RoundRobinSelector ,0 ,uniqueIds: List<String> offsets: TreeMap<Integer, Integer> index: Index ,selectForSend{ Params :  Returns : String} selectForPublish{ Params :  Returns : Iterable<String>} ,selectForSend selectForPublish ,,,,RoundRobinSelector ,Index ,,Index ,TreeMap ArrayList ArrayList Index ,uniqueIds: 
vert.x-master,io.vertx.core.spi.cluster,NodeInfo,1,1,0,0,0,false,0 ,ClusterSerializable ,0 ,host: String port: int metadata: JsonObject ,host{ Params :  Returns : String} port{ Params :  Returns : int} metadata{ Params :  Returns : JsonObject} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} ,equals hashCode toString writeToBuffer readFromBuffer ,,,,ClusterSerializable ,JsonObject ,,JsonObject ,JsonObject JsonObject ,buffer: , pos, pos + len
vert.x-master,io.vertx.core.spi.cluster,NodeListener,2,1,0,0,0,true,0 ,ClusterSerializable ,0 ,,nodeAdded{ Params : String Returns : void} nodeLeft{ Params : String Returns : void} ,,,,,,,,,,buffer: , pos, pos + len
vert.x-master,io.vertx.core.spi.cluster,NodeSelector,2,1,0,0,0,true,0 ,ClusterSerializable ,0 ,,init{ Params : VertxBuilder Returns : void} init{ Params : Vertx,ClusterManager Returns : void} eventBusStarted{ Params :  Returns : void} selectForSend{ Params : Message<?>,Promise<String> Returns : void} selectForPublish{ Params : Message<?>,Promise<Iterable<String>> Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} registrationsLost{ Params :  Returns : void} wantsUpdatesFor{ Params : String Returns : boolean} ,init ,,,,,,,,,builder: , this
vert.x-master,io.vertx.core.spi.cluster,RegistrationInfo,1,1,0,0,0,false,0 ,ClusterSerializable ,0 ,nodeId: String seq: long localOnly: boolean ,nodeId{ Params :  Returns : String} seq{ Params :  Returns : long} localOnly{ Params :  Returns : boolean} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} ,equals hashCode toString writeToBuffer readFromBuffer ,,,,ClusterSerializable ,boolean ,,boolean ,,buffer: , pos
vert.x-master,io.vertx.core.spi.cluster,RegistrationUpdateEvent,1,1,0,0,0,false,0 ,0 ,0 ,address: String registrations: List<RegistrationInfo> ,address{ Params :  Returns : String} registrations{ Params :  Returns : List<RegistrationInfo>} toString{ Params :  Returns : String} ,toString ,,,,,List<RegistrationInfo> ,,List<RegistrationInfo> ,,buffer: , pos
vert.x-master,io.vertx.core.spi,ExecutorServiceFactory,2,1,0,0,0,true,0 ,0 ,0 ,INSTANCE: ExecutorServiceFactory ,init{ Params : VertxBuilder Returns : void} createExecutor{ Params : ThreadFactory,Integer,Integer Returns : ExecutorService} ,init ,,,,,,,,,builder: , this
vert.x-master,io.vertx.core.spi.file,FileResolver,2,1,0,0,0,true,0 ,0 ,0 ,,resolveFile{ Params : String Returns : File} close{ Params :  Returns : void} ,,,,,,,,,,builder: , this
vert.x-master,io.vertx.core.spi,FileResolverFactory,2,1,0,0,0,true,0 ,0 ,0 ,,init{ Params : VertxBuilder Returns : void} resolver{ Params : VertxOptions Returns : FileResolver} ,init ,,,,,,,,,builder: , fileResolver
vert.x-master,io.vertx.core.spi.json,JsonCodec,2,1,0,0,0,true,0 ,0 ,0 ,,fromString{ Params : String,Class<T> Returns : T} fromBuffer{ Params : Buffer,Class<T> Returns : T} fromValue{ Params : Object,Class<T> Returns : T} toString{ Params : Object Returns : String} toString{ Params : Object,boolean Returns : String} toBuffer{ Params : Object,boolean Returns : Buffer} toBuffer{ Params : Object Returns : Buffer} ,,,,,,,,,,: , object, false
vert.x-master,io.vertx.core.spi,JsonFactory,2,1,0,0,0,true,0 ,0 ,0 ,,load{ Params :  Returns : JsonFactory} order{ Params :  Returns : int} codec{ Params :  Returns : JsonCodec} ,,load ,,,,,,,,Utils: 
vert.x-master,io.vertx.core.spi.launcher,Command,2,1,0,0,0,true,0 ,0 ,0 ,,setUp{ Params : ExecutionContext Returns : void} run{ Params :  Returns : void} tearDown{ Params :  Returns : void} ,,,,,,,,,,Utils: 
vert.x-master,io.vertx.core.spi.launcher,CommandFactory,2,1,0,0,0,true,0 ,0 ,0 ,,create{ Params : CommandLine Returns : C} define{ Params :  Returns : CLI} ,,,,,,,,,,Utils: 
vert.x-master,io.vertx.core.spi.launcher,CommandFactoryLookup,2,1,0,0,0,true,0 ,0 ,0 ,,lookup{ Params :  Returns : Collection<CommandFactory<?>>} ,,,,,,,,,,Utils: 
vert.x-master,io.vertx.core.spi.launcher,DefaultCommand,1,1,1,0,0,false,0 ,Command ,0 ,cwd: File systemProperties: List<String> executionContext: ExecutionContext out: PrintStream ,getCwd{ Params :  Returns : File} setCwd{ Params : File Returns : void} setSystemProps{ Params : List<String> Returns : void} setUp{ Params : ExecutionContext Returns : void} out{ Params :  Returns : PrintStream} tearDown{ Params :  Returns : void} applySystemProperties{ Params :  Returns : void} ,setUp tearDown ,,,,Command ,,,,File ,System: , key, val
vert.x-master,io.vertx.core.spi.launcher,DefaultCommandFactory,1,1,0,0,0,false,0 ,CommandFactory<C> ,0 ,clazz: Class<C> supplier: Supplier<C> ,create{ Params : CommandLine Returns : C} define{ Params :  Returns : CLI} ,create define ,,,,CommandFactory ,Supplier<C> ,,Supplier<C> ,,CLIConfigurator: , clazz
vert.x-master,io.vertx.core.spi.launcher,ExecutionContext,1,1,0,0,0,false,HashMap<String,Object> ,0 ,0 ,launcher: VertxCommandLauncher command: Command commandLine: CommandLine ,command{ Params :  Returns : Command} launcher{ Params :  Returns : VertxCommandLauncher} cli{ Params :  Returns : CLI} commandLine{ Params :  Returns : CommandLine} execute{ Params : String,String Returns : void} main{ Params :  Returns : Object} getPrintStream{ Params :  Returns : PrintStream} ,,,,,,CommandLine ,,CommandLine ,,launcher: 
vert.x-master,io.vertx.core.spi.logging,LogDelegate,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,isWarnEnabled{ Params :  Returns : boolean} isInfoEnabled{ Params :  Returns : boolean} isDebugEnabled{ Params :  Returns : boolean} isTraceEnabled{ Params :  Returns : boolean} fatal{ Params : Object Returns : void} fatal{ Params : Object,Throwable Returns : void} error{ Params : Object Returns : void} error{ Params : Object,Object Returns : void} error{ Params : Object,Throwable Returns : void} error{ Params : Object,Throwable,Object Returns : void} warn{ Params : Object Returns : void} warn{ Params : Object,Object Returns : void} warn{ Params : Object,Throwable Returns : void} warn{ Params : Object,Throwable,Object Returns : void} info{ Params : Object Returns : void} info{ Params : Object,Object Returns : void} info{ Params : Object,Throwable Returns : void} info{ Params : Object,Throwable,Object Returns : void} debug{ Params : Object Returns : void} debug{ Params : Object,Object Returns : void} debug{ Params : Object,Throwable Returns : void} debug{ Params : Object,Throwable,Object Returns : void} trace{ Params : Object Returns : void} trace{ Params : Object,Object Returns : void} trace{ Params : Object,Throwable Returns : void} trace{ Params : Object,Throwable,Object Returns : void} unwrap{ Params :  Returns : Object} ,,,,,,,,,,launcher: 
vert.x-master,io.vertx.core.spi.logging,LogDelegateFactory,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,isAvailable{ Params :  Returns : boolean} createDelegate{ Params : String Returns : LogDelegate} ,,,,,,,,,,launcher: 
vert.x-master,io.vertx.core.spi.metrics,ClientMetrics,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,enqueueRequest{ Params :  Returns : T} dequeueRequest{ Params : T Returns : void} requestBegin{ Params : String,Req Returns : M} requestEnd{ Params : M Returns : void} requestEnd{ Params : M,long Returns : void} responseBegin{ Params : M,Resp Returns : void} requestReset{ Params : M Returns : void} responseEnd{ Params : M Returns : void} responseEnd{ Params : M,long Returns : void} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.metrics,DatagramSocketMetrics,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,listening{ Params : String,SocketAddress Returns : void} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.metrics,EventBusMetrics,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,handlerRegistered{ Params : String,String Returns : H} handlerUnregistered{ Params : H Returns : void} scheduleMessage{ Params : H,boolean Returns : void} discardMessage{ Params : H,boolean,Message<?> Returns : void} messageDelivered{ Params : H,boolean Returns : void} messageSent{ Params : String,boolean,boolean,boolean Returns : void} messageReceived{ Params : String,boolean,boolean,int Returns : void} messageWritten{ Params : String,int Returns : void} messageRead{ Params : String,int Returns : void} replyFailure{ Params : String,ReplyFailure Returns : void} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.metrics,HttpClientMetrics,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,createEndpointMetrics{ Params : SocketAddress,int Returns : ClientMetrics<R,T,HttpRequest,HttpResponse>} endpointConnected{ Params : ClientMetrics<R,T,?,?> Returns : void} endpointDisconnected{ Params : ClientMetrics<R,T,?,?> Returns : void} connected{ Params : WebSocket Returns : W} disconnected{ Params : W Returns : void} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.metrics,HttpServerMetrics,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,requestBegin{ Params : S,HttpRequest Returns : R} requestEnd{ Params : R,HttpRequest,long Returns : void} requestReset{ Params : R Returns : void} responseBegin{ Params : R,HttpResponse Returns : void} responsePushed{ Params : S,HttpMethod,String,HttpResponse Returns : R} responseEnd{ Params : R,HttpResponse,long Returns : void} connected{ Params : S,R,ServerWebSocket Returns : W} disconnected{ Params : W Returns : void} requestRouted{ Params : R,String Returns : void} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.metrics,Metrics,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,DISABLE_METRICS_PROPERTY_NAME: String METRICS_ENABLED: boolean ,close{ Params :  Returns : void} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.metrics,MetricsProvider,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,getMetrics{ Params :  Returns : Metrics} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.metrics,NetworkMetrics,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,bytesRead{ Params : S,SocketAddress,long Returns : void} bytesWritten{ Params : S,SocketAddress,long Returns : void} exceptionOccurred{ Params : S,SocketAddress,Throwable Returns : void} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.metrics,PoolMetrics,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,submitted{ Params :  Returns : T} begin{ Params : T Returns : T} rejected{ Params : T Returns : void} end{ Params : T,boolean Returns : void} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.metrics,TCPMetrics,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,connected{ Params : SocketAddress,String Returns : S} disconnected{ Params : S,SocketAddress Returns : void} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.metrics,VertxMetrics,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,createEventBusMetrics{ Params :  Returns : EventBusMetrics} createHttpServerMetrics{ Params : HttpServerOptions,SocketAddress Returns : HttpServerMetrics<?,?,?>} createClientMetrics{ Params : SocketAddress,String,String Returns : ClientMetrics<?,?,?,?>} createHttpClientMetrics{ Params : HttpClientOptions Returns : HttpClientMetrics<?,?,?,?>} createNetServerMetrics{ Params : NetServerOptions,SocketAddress Returns : TCPMetrics<?>} createNetClientMetrics{ Params : NetClientOptions Returns : TCPMetrics<?>} createDatagramSocketMetrics{ Params : DatagramSocketOptions Returns : DatagramSocketMetrics} createPoolMetrics{ Params : String,String,int Returns : PoolMetrics<?>} vertxCreated{ Params : Vertx Returns : void} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.observability,HttpRequest,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,id{ Params :  Returns : int} uri{ Params :  Returns : String} absoluteURI{ Params :  Returns : String} method{ Params :  Returns : HttpMethod} headers{ Params :  Returns : MultiMap} remoteAddress{ Params :  Returns : SocketAddress} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.observability,HttpResponse,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,,statusCode{ Params :  Returns : int} headers{ Params :  Returns : MultiMap} ,,,,,,,,,,: , requestMetric, -1L
vert.x-master,io.vertx.core.spi.resolver,ResolverProvider,2,1,0,0,0,true,HashMap<String,Object> ,0 ,0 ,DISABLE_DNS_RESOLVER_PROP_NAME: String ,factory{ Params : Vertx,AddressResolverOptions Returns : ResolverProvider} resolver{ Params : AddressResolverOptions Returns : AddressResolverGroup<InetSocketAddress>} close{ Params :  Returns : Future<Void>} ,,factory ,,,,,,,DnsResolverProvider DefaultResolverProvider ,logger: , "Using the default address resolver as the dns resolver could not be loaded"
vert.x-master,io.vertx.core.spi.tls,DefaultJDKCipherSuite,1,0,0,0,0,false,0 ,0 ,0 ,DEFAULT_JDK_CIPHER_SUITE: List<String> ,get{ Params :  Returns : List<String>} ,,get ,,,,,,,ArrayList ,logger: , "Using the default address resolver as the dns resolver could not be loaded"
vert.x-master,io.vertx.core.spi.tls,DefaultSslContextFactory,1,1,0,0,0,false,0 ,SslContextFactory ,0 ,sslProvider: SslProvider sslSessionCacheEnabled: boolean enabledCipherSuites: Set<String> applicationProtocols: List<String> useAlpn: boolean clientAuth: ClientAuth forClient: boolean kmf: KeyManagerFactory tmf: TrustManagerFactory ,useAlpn{ Params : boolean Returns : SslContextFactory} clientAuth{ Params : ClientAuth Returns : SslContextFactory} forClient{ Params : boolean Returns : SslContextFactory} keyMananagerFactory{ Params : KeyManagerFactory Returns : SslContextFactory} trustManagerFactory{ Params : TrustManagerFactory Returns : SslContextFactory} create{ Params :  Returns : SslContext} enabledCipherSuites{ Params : Set<String> Returns : SslContextFactory} applicationProtocols{ Params : List<String> Returns : SslContextFactory} createContext{ Params : boolean,boolean,KeyManagerFactory,TrustManagerFactory Returns : SslContext} ,useAlpn clientAuth forClient keyMananagerFactory trustManagerFactory create enabledCipherSuites applicationProtocols ,,,,SslContextFactory ,TrustManagerFactory ,,TrustManagerFactory ,UnsupportedOperationException ApplicationProtocolConfig ,((OpenSslServerSessionContext) sslSessionContext): , sslSessionCacheEnabled
vert.x-master,io.vertx.core.spi.tls,SslContextFactory,2,1,0,0,0,true,0 ,SslContextFactory ,0 ,,useAlpn{ Params : boolean Returns : SslContextFactory} clientAuth{ Params : ClientAuth Returns : SslContextFactory} forClient{ Params : boolean Returns : SslContextFactory} keyMananagerFactory{ Params : KeyManagerFactory Returns : SslContextFactory} trustManagerFactory{ Params : TrustManagerFactory Returns : SslContextFactory} enabledCipherSuites{ Params : Set<String> Returns : SslContextFactory} applicationProtocols{ Params : List<String> Returns : SslContextFactory} serverName{ Params : String Returns : SslContextFactory} create{ Params :  Returns : SslContext} ,,,,,,,,,,((OpenSslServerSessionContext) sslSessionContext): , sslSessionCacheEnabled
vert.x-master,io.vertx.core.spi.tracing,Extractors,1,0,0,0,0,false,0 ,0 ,0 ,EMPTY: TagExtractor ,,,,,,,,,,TagExtractor ,null
vert.x-master,io.vertx.core.spi.tracing,TagExtractor,2,1,0,0,0,true,0 ,0 ,0 ,,empty{ Params :  Returns : TagExtractor<T>} len{ Params : T Returns : int} name{ Params : T,int Returns : String} value{ Params : T,int Returns : String} extract{ Params : T Returns : Map<String,String>} extractTo{ Params : T,Map<String,String> Returns : void} extractTo{ Params : T,BiConsumer<String,String> Returns : void} ,,empty ,,,,,,,IndexOutOfBoundsException IndexOutOfBoundsException HashMap ,: , obj, idx
vert.x-master,io.vertx.core.spi.tracing,VertxTracer,2,1,0,0,0,true,0 ,0 ,0 ,NOOP: VertxTracer ,receiveRequest{ Params : Context,SpanKind,TracingPolicy,R,String,Iterable<Map.Entry<String,String>>,TagExtractor<R> Returns : I} sendResponse{ Params : Context,R,I,Throwable,TagExtractor<R> Returns : void} sendRequest{ Params : Context,SpanKind,TracingPolicy,R,String,BiConsumer<String,String>,TagExtractor<R> Returns : O} receiveResponse{ Params : Context,R,O,Throwable,TagExtractor<R> Returns : void} close{ Params :  Returns : void} ,,,,,,,,,VertxTracer ,: , obj, idx
vert.x-master,io.vertx.core.spi.transport,Transport,2,1,0,0,0,true,0 ,0 ,0 ,ACCEPTOR_EVENT_LOOP_GROUP: int IO_EVENT_LOOP_GROUP: int ,supportsDomainSockets{ Params :  Returns : boolean} supportFileRegion{ Params :  Returns : boolean} isAvailable{ Params :  Returns : boolean} unavailabilityCause{ Params :  Returns : Throwable} convert{ Params : io.vertx.core.net.SocketAddress Returns : SocketAddress} convert{ Params : SocketAddress Returns : io.vertx.core.net.SocketAddress} eventLoopGroup{ Params : int,int,ThreadFactory,int Returns : EventLoopGroup} datagramChannel{ Params :  Returns : DatagramChannel} datagramChannel{ Params : InternetProtocolFamily Returns : DatagramChannel} channelFactory{ Params : boolean Returns : ChannelFactory<? extends Channel>} serverChannelFactory{ Params : boolean Returns : ChannelFactory<? extends ServerChannel>} configure{ Params : DatagramChannel,DatagramSocketOptions Returns : void} configure{ Params : ClientOptionsBase,boolean,Bootstrap Returns : void} configure{ Params : NetServerOptions,boolean,ServerBootstrap Returns : void} ,,,,,,,,,IllegalArgumentException InetSocketAddress FixedRecvByteBufAllocator IllegalArgumentException FixedRecvByteBufAllocator FixedRecvByteBufAllocator ,options: 
vert.x-master,io.vertx.core.spi,Utils,1,0,0,0,0,false,0 ,0 ,0 ,,load{ Params :  Returns : io.vertx.core.spi.JsonFactory} ,,load ,,,,,,,ArrayList ,factories: 
vert.x-master,io.vertx.core.spi,VerticleFactory,2,1,0,0,0,true,0 ,0 ,0 ,,removePrefix{ Params : String Returns : String} order{ Params :  Returns : int} init{ Params : Vertx Returns : void} close{ Params :  Returns : void} prefix{ Params :  Returns : String} createVerticle{ Params : String,ClassLoader,Promise<Callable<Verticle>> Returns : void} ,,removePrefix ,,,,,,,IllegalArgumentException ,identifer: , pos + 1
vert.x-master,io.vertx.core.spi,VertxMetricsFactory,2,1,0,0,0,true,0 ,0 ,0 ,,init{ Params : VertxBuilder Returns : void} metrics{ Params : VertxOptions Returns : VertxMetrics} newOptions{ Params :  Returns : MetricsOptions} newOptions{ Params : MetricsOptions Returns : MetricsOptions} newOptions{ Params : JsonObject Returns : MetricsOptions} ,init ,,,,,,,,MetricsOptions MetricsOptions ,options: 
vert.x-master,io.vertx.core.spi,VertxServiceProvider,2,1,0,0,0,true,0 ,0 ,0 ,,init{ Params : VertxBuilder Returns : void} ,,,,,,,,,,options: 
vert.x-master,io.vertx.core.spi,VertxThreadFactory,2,1,0,0,0,true,0 ,0 ,0 ,INSTANCE: VertxThreadFactory ,init{ Params : VertxBuilder Returns : void} newVertxThread{ Params : Runnable,String,boolean,long,TimeUnit Returns : VertxThread} ,init ,,,,,,,,VertxThreadFactory VertxThread ,builder: , this
vert.x-master,io.vertx.core.spi,VertxTracerFactory,2,1,0,0,0,true,0 ,0 ,0 ,NOOP: VertxTracerFactory ,init{ Params : VertxBuilder Returns : void} tracer{ Params : TracingOptions Returns : VertxTracer} newOptions{ Params :  Returns : TracingOptions} newOptions{ Params : JsonObject Returns : TracingOptions} ,init ,,,,,,,,TracingOptions TracingOptions ,: , options
vert.x-master,io.vertx.core.streams.impl,InboundBuffer,1,1,0,0,0,false,0 ,0 ,0 ,END_SENTINEL: Object context: ContextInternal pending: ArrayDeque<E> highWaterMark: long demand: long handler: Handler<E> overflow: boolean drainHandler: Handler<Void> emptyHandler: Handler<Void> exceptionHandler: Handler<Throwable> emitting: boolean ,checkThread{ Params :  Returns : void} write{ Params : E Returns : boolean} checkWritable{ Params :  Returns : boolean} write{ Params : Iterable<E> Returns : boolean} emitPending{ Params :  Returns : boolean} drain{ Params :  Returns : void} handleEvent{ Params : Handler<T>,T Returns : void} handleException{ Params : Throwable Returns : void} fetch{ Params : long Returns : boolean} read{ Params :  Returns : E} clear{ Params :  Returns : InboundBuffer<E>} pause{ Params :  Returns : InboundBuffer<E>} resume{ Params :  Returns : boolean} handler{ Params : Handler<E> Returns : InboundBuffer<E>} drainHandler{ Params : Handler<Void> Returns : InboundBuffer<E>} emptyHandler{ Params : Handler<Void> Returns : InboundBuffer<E>} exceptionHandler{ Params : Handler<Throwable> Returns : InboundBuffer<E>} isEmpty{ Params :  Returns : boolean} isWritable{ Params :  Returns : boolean} isPaused{ Params :  Returns : boolean} size{ Params :  Returns : int} ,,,,,,boolean ,,boolean ,Object NullPointerException IllegalArgumentException IllegalStateException ArrayDeque ArrayDeque IllegalArgumentException ,pending: 
vert.x-master,io.vertx.core.streams.impl,PipeImpl,1,1,0,0,0,false,0 ,Pipe<T> ,WriteException ,result: Promise<Void> src: ReadStream<T> endOnSuccess: boolean endOnFailure: boolean dst: WriteStream<T> ,endOnFailure{ Params : boolean Returns : Pipe<T>} endOnSuccess{ Params : boolean Returns : Pipe<T>} endOnComplete{ Params : boolean Returns : Pipe<T>} handleWriteResult{ Params : AsyncResult<Void> Returns : void} to{ Params : WriteStream<T> Returns : Future<Void>} handleSuccess{ Params : Promise<Void> Returns : void} handleFailure{ Params : Throwable,Promise<Void> Returns : void} close{ Params :  Returns : void} ,endOnFailure endOnSuccess endOnComplete to ,,,,Pipe ,WriteStream<T> ,,WriteStream<T> ,WriteException NullPointerException IllegalStateException VertxException ,src: 
vert.x-master,io.vertx.core.streams.impl,WriteException,3,2,0,1,0,false,0 ,Pipe<T> ,WriteException ,,endOnFailure{ Params : boolean Returns : Pipe<T>} endOnSuccess{ Params : boolean Returns : Pipe<T>} endOnComplete{ Params : boolean Returns : Pipe<T>} handleWriteResult{ Params : AsyncResult<Void> Returns : void} to{ Params : WriteStream<T> Returns : Future<Void>} handleSuccess{ Params : Promise<Void> Returns : void} handleFailure{ Params : Throwable,Promise<Void> Returns : void} close{ Params :  Returns : void} ,endOnFailure endOnSuccess endOnComplete to ,,,,,,,,,null
vert.x-master,io.vertx.core.streams.impl,PumpImpl,1,1,0,0,0,false,0 ,Pump ,0 ,readStream: ReadStream<T> writeStream: WriteStream<T> dataHandler: Handler<T> drainHandler: Handler<Void> pumped: int ,setWriteQueueMaxSize{ Params : int Returns : PumpImpl} start{ Params :  Returns : PumpImpl} stop{ Params :  Returns : PumpImpl} numberPumped{ Params :  Returns : int} incPumped{ Params :  Returns : void} ,setWriteQueueMaxSize start stop numberPumped ,,,,Pump ,int ,,int ,,readStream: , null
vert.x-master,io.vertx.core.streams,Pipe,2,1,0,0,0,true,0 ,Pump ,0 ,,endOnFailure{ Params : boolean Returns : Pipe<T>} endOnSuccess{ Params : boolean Returns : Pipe<T>} endOnComplete{ Params : boolean Returns : Pipe<T>} to{ Params : WriteStream<T> Returns : Future<Void>} close{ Params :  Returns : void} ,,,,,,,,,,readStream: , null
vert.x-master,io.vertx.core.streams,Pump,2,1,0,0,0,true,0 ,Pump ,0 ,,pump{ Params : ReadStream<T>,WriteStream<T> Returns : Pump} pump{ Params : ReadStream<T>,WriteStream<T>,int Returns : Pump} setWriteQueueMaxSize{ Params : int Returns : Pump} start{ Params :  Returns : Pump} stop{ Params :  Returns : Pump} numberPumped{ Params :  Returns : int} ,,pump pump ,,,,,,,PumpImpl PumpImpl ,readStream: , null
vert.x-master,io.vertx.core.streams,ReadStream,2,1,0,0,0,true,0 ,Pump ,0 ,,exceptionHandler{ Params : Handler<Throwable> Returns : ReadStream<T>} handler{ Params : Handler<T> Returns : ReadStream<T>} pause{ Params :  Returns : ReadStream<T>} resume{ Params :  Returns : ReadStream<T>} fetch{ Params : long Returns : ReadStream<T>} endHandler{ Params : Handler<Void> Returns : ReadStream<T>} pipe{ Params :  Returns : Pipe<T>} pipeTo{ Params : WriteStream<T> Returns : Future<Void>} ,,,,,,,,,PipeImpl PipeImpl ,new PipeImpl<>(this): , dst
vert.x-master,io.vertx.core.streams,StreamBase,2,1,0,0,0,true,0 ,Pump ,0 ,,exceptionHandler{ Params : Handler<Throwable> Returns : StreamBase} ,,,,,,,,,,new PipeImpl<>(this): , dst
vert.x-master,io.vertx.core.streams,WriteStream,2,1,0,0,0,true,0 ,Pump ,0 ,,exceptionHandler{ Params : Handler<Throwable> Returns : WriteStream<T>} write{ Params : T Returns : Future<Void>} end{ Params :  Returns : Future<Void>} end{ Params : T Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : WriteStream<T>} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : WriteStream<T>} ,exceptionHandler ,,,,,,,,,: 
vert.x-master,io.vertx.core.tracing,TracingOptions,1,1,0,0,0,false,0 ,0 ,0 ,json: JsonObject factory: VertxTracerFactory ,getFactory{ Params :  Returns : VertxTracerFactory} setFactory{ Params : VertxTracerFactory Returns : TracingOptions} copy{ Params :  Returns : TracingOptions} toJson{ Params :  Returns : JsonObject} toString{ Params :  Returns : String} ,toString ,,,,,VertxTracerFactory ,,VertxTracerFactory ,TracingOptions JsonObject ,json: 
vert.x-master,io.vertx.core,Verticle,2,1,0,0,0,true,0 ,0 ,0 ,,getVertx{ Params :  Returns : Vertx} init{ Params : Vertx,Context Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,,,,,,,,,,json: 
vert.x-master,io.vertx.core,Vertx,2,1,0,0,0,true,0 ,0 ,0 ,,vertx{ Params :  Returns : Vertx} vertx{ Params : VertxOptions Returns : Vertx} clusteredVertx{ Params : VertxOptions Returns : Future<Vertx>} currentContext{ Params :  Returns : Context} getOrCreateContext{ Params :  Returns : Context} createNetServer{ Params : NetServerOptions Returns : NetServer} createNetServer{ Params :  Returns : NetServer} createNetClient{ Params : NetClientOptions Returns : NetClient} createNetClient{ Params :  Returns : NetClient} createHttpServer{ Params : HttpServerOptions Returns : HttpServer} createHttpServer{ Params :  Returns : HttpServer} createHttpClient{ Params : HttpClientOptions Returns : HttpClient} createHttpClient{ Params :  Returns : HttpClient} createDatagramSocket{ Params : DatagramSocketOptions Returns : DatagramSocket} createDatagramSocket{ Params :  Returns : DatagramSocket} fileSystem{ Params :  Returns : FileSystem} eventBus{ Params :  Returns : EventBus} createDnsClient{ Params : int,String Returns : DnsClient} createDnsClient{ Params :  Returns : DnsClient} createDnsClient{ Params : DnsClientOptions Returns : DnsClient} sharedData{ Params :  Returns : SharedData} setTimer{ Params : long,Handler<Long> Returns : long} setPeriodic{ Params : long,Handler<Long> Returns : long} setPeriodic{ Params : long,long,Handler<Long> Returns : long} cancelTimer{ Params : long Returns : boolean} runOnContext{ Params : Handler<Void> Returns : void} close{ Params :  Returns : Future<Void>} deployVerticle{ Params : Verticle Returns : Future<String>} deployVerticle{ Params : Verticle,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Class<? extends Verticle>,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : Supplier<Verticle>,DeploymentOptions Returns : Future<String>} deployVerticle{ Params : String Returns : Future<String>} deployVerticle{ Params : String,DeploymentOptions Returns : Future<String>} undeploy{ Params : String Returns : Future<Void>} deploymentIDs{ Params :  Returns : Set<String>} registerVerticleFactory{ Params : VerticleFactory Returns : void} unregisterVerticleFactory{ Params : VerticleFactory Returns : void} verticleFactories{ Params :  Returns : Set<VerticleFactory>} isClustered{ Params :  Returns : boolean} executeBlocking{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} executeBlocking{ Params : Handler<Promise<T>> Returns : Future<T>} nettyEventLoopGroup{ Params :  Returns : EventLoopGroup} createSharedWorkerExecutor{ Params : String Returns : WorkerExecutor} createSharedWorkerExecutor{ Params : String,int Returns : WorkerExecutor} createSharedWorkerExecutor{ Params : String,int,long Returns : WorkerExecutor} createSharedWorkerExecutor{ Params : String,int,long,TimeUnit Returns : WorkerExecutor} isNativeTransportEnabled{ Params :  Returns : boolean} unavailableNativeTransportCause{ Params :  Returns : Throwable} exceptionHandler{ Params : Handler<Throwable> Returns : Vertx} exceptionHandler{ Params :  Returns : Handler<Throwable>} ,,vertx vertx clusteredVertx currentContext ,,,,,,,VertxOptions VertxBuilder VertxBuilder NetServerOptions NetClientOptions HttpServerOptions HttpClientOptions DatagramSocketOptions DeploymentOptions DeploymentOptions ,: , blockingCodeHandler, true
vert.x-master,io.vertx.core,VertxException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core,VertxOptions,1,1,0,0,0,false,0 ,0 ,0 ,DISABLE_TCCL_PROP_NAME: String DEFAULT_EVENT_LOOP_POOL_SIZE: int DEFAULT_WORKER_POOL_SIZE: int DEFAULT_INTERNAL_BLOCKING_POOL_SIZE: int DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL: long DEFAULT_BLOCKED_THREAD_CHECK_INTERVAL_UNIT: TimeUnit DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME: long DEFAULT_MAX_EVENT_LOOP_EXECUTE_TIME_UNIT: TimeUnit DEFAULT_MAX_WORKER_EXECUTE_TIME: long DEFAULT_MAX_WORKER_EXECUTE_TIME_UNIT: TimeUnit DEFAULT_QUORUM_SIZE: int DEFAULT_HA_GROUP: String DEFAULT_HA_ENABLED: boolean DEFAULT_PREFER_NATIVE_TRANSPORT: boolean DEFAULT_WARNING_EXCEPTION_TIME: long DEFAULT_WARNING_EXCEPTION_TIME_UNIT: TimeUnit DEFAULT_DISABLE_TCCL: boolean DEFAULT_USE_DAEMON_THREAD: boolean eventLoopPoolSize: int workerPoolSize: int internalBlockingPoolSize: int blockedThreadCheckInterval: long maxEventLoopExecuteTime: long maxWorkerExecuteTime: long clusterManager: ClusterManager haEnabled: boolean quorumSize: int haGroup: String metricsOptions: MetricsOptions tracingOptions: TracingOptions fileSystemOptions: FileSystemOptions warningExceptionTime: long eventBusOptions: EventBusOptions addressResolverOptions: AddressResolverOptions preferNativeTransport: boolean maxEventLoopExecuteTimeUnit: TimeUnit maxWorkerExecuteTimeUnit: TimeUnit warningExceptionTimeUnit: TimeUnit blockedThreadCheckIntervalUnit: TimeUnit disableTCCL: boolean useDaemonThread: Boolean ,getEventLoopPoolSize{ Params :  Returns : int} setEventLoopPoolSize{ Params : int Returns : VertxOptions} getWorkerPoolSize{ Params :  Returns : int} setWorkerPoolSize{ Params : int Returns : VertxOptions} getBlockedThreadCheckInterval{ Params :  Returns : long} setBlockedThreadCheckInterval{ Params : long Returns : VertxOptions} getMaxEventLoopExecuteTime{ Params :  Returns : long} setMaxEventLoopExecuteTime{ Params : long Returns : VertxOptions} getMaxWorkerExecuteTime{ Params :  Returns : long} setMaxWorkerExecuteTime{ Params : long Returns : VertxOptions} getClusterManager{ Params :  Returns : ClusterManager} setClusterManager{ Params : ClusterManager Returns : VertxOptions} getInternalBlockingPoolSize{ Params :  Returns : int} setInternalBlockingPoolSize{ Params : int Returns : VertxOptions} isHAEnabled{ Params :  Returns : boolean} setHAEnabled{ Params : boolean Returns : VertxOptions} getQuorumSize{ Params :  Returns : int} setQuorumSize{ Params : int Returns : VertxOptions} getHAGroup{ Params :  Returns : String} setHAGroup{ Params : String Returns : VertxOptions} getMetricsOptions{ Params :  Returns : MetricsOptions} getFileSystemOptions{ Params :  Returns : FileSystemOptions} setMetricsOptions{ Params : MetricsOptions Returns : VertxOptions} setFileSystemOptions{ Params : FileSystemOptions Returns : VertxOptions} getWarningExceptionTime{ Params :  Returns : long} setWarningExceptionTime{ Params : long Returns : VertxOptions} getEventBusOptions{ Params :  Returns : EventBusOptions} setEventBusOptions{ Params : EventBusOptions Returns : VertxOptions} getAddressResolverOptions{ Params :  Returns : AddressResolverOptions} setAddressResolverOptions{ Params : AddressResolverOptions Returns : VertxOptions} getPreferNativeTransport{ Params :  Returns : boolean} setPreferNativeTransport{ Params : boolean Returns : VertxOptions} getMaxEventLoopExecuteTimeUnit{ Params :  Returns : TimeUnit} setMaxEventLoopExecuteTimeUnit{ Params : TimeUnit Returns : VertxOptions} getMaxWorkerExecuteTimeUnit{ Params :  Returns : TimeUnit} setMaxWorkerExecuteTimeUnit{ Params : TimeUnit Returns : VertxOptions} getWarningExceptionTimeUnit{ Params :  Returns : TimeUnit} setWarningExceptionTimeUnit{ Params : TimeUnit Returns : VertxOptions} getBlockedThreadCheckIntervalUnit{ Params :  Returns : TimeUnit} setBlockedThreadCheckIntervalUnit{ Params : TimeUnit Returns : VertxOptions} getTracingOptions{ Params :  Returns : TracingOptions} setTracingOptions{ Params : TracingOptions Returns : VertxOptions} getDisableTCCL{ Params :  Returns : boolean} setDisableTCCL{ Params : boolean Returns : VertxOptions} getUseDaemonThread{ Params :  Returns : Boolean} setUseDaemonThread{ Params : Boolean Returns : VertxOptions} toJson{ Params :  Returns : JsonObject} toString{ Params :  Returns : String} ,toString ,,,,,Boolean ,,Boolean ,MetricsOptions FileSystemOptions EventBusOptions AddressResolverOptions MetricsOptions FileSystemOptions EventBusOptions AddressResolverOptions IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException JsonObject ,eventBusOptions: 
vert.x-master,io.vertx.core,WorkerExecutor,2,1,0,0,0,true,0 ,0 ,0 ,,executeBlocking{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} executeBlocking{ Params : Handler<Promise<T>> Returns : Future<T>} close{ Params :  Returns : Future<Void>} ,,,,,,,,,,: , blockingCodeHandler, true
vert.x-master,io.vertx.benchmarks,BenchmarkBase,1,1,1,0,0,false,0 ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.benchmarks,CombinerExecutorBenchmark,1,1,0,0,0,false,BenchmarkBase ,0 ,0 ,exec: Executor<Object> action: Executor.Action<Object> latch: CountDownLatch ,setup{ Params :  Returns : void} tearDown{ Params :  Returns : void} impl{ Params :  Returns : void} ,,,,,,CountDownLatch ,,CountDownLatch ,CountDownLatch CombinerExecutor Object CountDownLatch Thread ,exec: , action
vert.x-master,io.vertx.benchmarks,ConcurrentCyclicSequenceBenchmark,1,1,0,0,0,false,BenchmarkBase ,0 ,0 ,seq1: ConcurrentCyclicSequence<String> seq2: ConcurrentCyclicSequence<String> seq4: ConcurrentCyclicSequence<String> seq8: ConcurrentCyclicSequence<String> seq16: ConcurrentCyclicSequence<String> ,gen{ Params : int Returns : ConcurrentCyclicSequence<String>} setup{ Params :  Returns : void} size1{ Params :  Returns : String} size2{ Params :  Returns : String} size4{ Params :  Returns : String} size8{ Params :  Returns : String} size16{ Params :  Returns : String} ,,gen ,,,,ConcurrentCyclicSequence<String> ,,ConcurrentCyclicSequence<String> ,ConcurrentCyclicSequence ,seq16: 
vert.x-master,io.vertx.benchmarks,ContextBenchmark,1,1,0,0,0,false,BenchmarkBase ,0 ,BaselineState ,,consume{ Params : String Returns : void} setup{ Params :  Returns : void} runOnContext{ Params : BaselineState Returns : void} runOnContextNoChecks{ Params : BaselineState Returns : void} ,,consume ,,,,,,,,state.context: , state.task
vert.x-master,io.vertx.benchmarks,BaselineState,3,1,0,1,0,false,BenchmarkBase ,0 ,BaselineState ,vertx: Vertx context: BenchmarkContext task: Handler<Void> ,consume{ Params : String Returns : void} setup{ Params :  Returns : void} runOnContext{ Params : BaselineState Returns : void} runOnContextNoChecks{ Params : BaselineState Returns : void} ,,consume ,,,,,,,,: , "the-string"
vert.x-master,io.vertx.benchmarks,HeadersContainsBenchmark,1,1,0,0,0,false,BenchmarkBase ,0 ,0 ,nettySmallHeaders: HttpHeaders vertxSmallHeaders: HeadersMultiMap ,setup{ Params :  Returns : void} nettySmallMatch{ Params :  Returns : boolean} nettySmallMiss{ Params :  Returns : boolean} nettySmallExactMatch{ Params :  Returns : boolean} nettySmallExactMiss{ Params :  Returns : boolean} vertxSmallMatch{ Params :  Returns : boolean} vertxSmallMiss{ Params :  Returns : boolean} vertxSmallExactMatch{ Params :  Returns : boolean} vertxSmallExactMiss{ Params :  Returns : boolean} ,,,,,,HeadersMultiMap ,,HeadersMultiMap ,DefaultHttpHeaders ,vertxSmallHeaders: , io.vertx.core.http.HttpHeaders.CLOSE
vert.x-master,io.vertx.benchmarks,HeadersEncodeBenchmark,1,1,0,0,0,false,BenchmarkBase ,0 ,PublicEncoder ,asciiNames: boolean asciiValues: boolean encoder: PublicEncoder byteBuf: ByteBuf emptyHeaders: HttpHeaders nettySmallHeaders: HttpHeaders vertxSmallHeaders: HttpHeaders ,consume{ Params : ByteBuf Returns : void} encodeHeaders{ Params : HttpHeaders,ByteBuf Returns : void} setup{ Params :  Returns : void} baseline{ Params :  Returns : void} nettySmall{ Params :  Returns : void} vertxSmall{ Params :  Returns : void} ,encodeHeaders ,consume ,,,,HttpHeaders ,,HttpHeaders ,PublicEncoder DefaultHttpHeaders ,: , byteBuf
vert.x-master,io.vertx.benchmarks,PublicEncoder,3,0,0,1,0,false,BenchmarkBase ,0 ,PublicEncoder ,,consume{ Params : ByteBuf Returns : void} encodeHeaders{ Params : HttpHeaders,ByteBuf Returns : void} setup{ Params :  Returns : void} baseline{ Params :  Returns : void} nettySmall{ Params :  Returns : void} vertxSmall{ Params :  Returns : void} ,encodeHeaders ,consume ,,,,,,,,super: , headers, buf
vert.x-master,io.vertx.benchmarks,HeadersSetBenchmark,1,1,0,0,0,false,BenchmarkBase ,0 ,0 ,validate: boolean asciiNames: boolean nettySmallHeaders: HttpHeaders vertxSmallHeaders: HeadersMultiMap ,consume{ Params : HttpHeaders Returns : void} setup{ Params :  Returns : void} nettySmall{ Params :  Returns : void} vertxSmall{ Params :  Returns : void} ,,consume ,,,,HeadersMultiMap ,,HeadersMultiMap ,DefaultHttpHeaders HeadersMultiMap ,: , vertxSmallHeaders
vert.x-master,io.vertx.benchmarks,HeadersUtils,1,1,1,0,0,false,0 ,0 ,0 ,DATE_FORMAT: DateFormat VERTX_HEADER: CharSequence TEXT_PLAIN_HEADER: CharSequence CONTENT_LENGTH_HEADER: CharSequence DATE_HEADER: CharSequence ,setBaseHeaders{ Params : HttpHeaders,boolean,boolean Returns : void} toString{ Params : CharSequence,boolean Returns : CharSequence} ,,setBaseHeaders toString ,,,,,,,SimpleDateFormat Date ,chars: 
vert.x-master,io.vertx.benchmarks,JsonDecodeBenchmark,1,1,0,0,0,false,BenchmarkBase ,0 ,0 ,small: Buffer wide: Buffer deep: Buffer smallString: String wideString: String deepString: String jacksonCodec: JsonCodec databindCodec: JsonCodec ,setup{ Params :  Returns : void} loadJsonAsBuffer{ Params : String Returns : Buffer} smallStringJackson{ Params : Blackhole Returns : void} smallStringDatabind{ Params : Blackhole Returns : void} wideStringJackson{ Params : Blackhole Returns : void} wideStringDatabind{ Params : Blackhole Returns : void} deepStringJackson{ Params : Blackhole Returns : void} deepStringDatabind{ Params : Blackhole Returns : void} stringJackson{ Params : String,Blackhole Returns : void} stringDatabind{ Params : String,Blackhole Returns : void} smallBufferJackson{ Params : Blackhole Returns : void} smallBufferDatabind{ Params : Blackhole Returns : void} wideBufferJackson{ Params : Blackhole Returns : void} wideBufferDatabind{ Params : Blackhole Returns : void} deepBufferJackson{ Params : Blackhole Returns : void} deepBufferDatabind{ Params : Blackhole Returns : void} bufferJackson{ Params : Buffer,Blackhole Returns : void} bufferDatabind{ Params : Buffer,Blackhole Returns : void} ,,,,,,JsonCodec ,,JsonCodec ,JacksonCodec DatabindCodec BufferedReader InputStreamReader RuntimeException JsonObject JsonObject ,jacksonCodec: , buffer, JsonObject.class
vert.x-master,io.vertx.benchmarks,JsonEncodeBenchmark,1,1,0,0,0,false,BenchmarkBase ,0 ,0 ,small: JsonObject wide: JsonObject deep: JsonObject jacksonCodec: JsonCodec databindCodec: JsonCodec ,setup{ Params :  Returns : void} loadJson{ Params : URL Returns : JsonObject} smallStringJackson{ Params : Blackhole Returns : void} smallStringDatabind{ Params : Blackhole Returns : void} wideStringJackson{ Params : Blackhole Returns : void} wideStringDatabind{ Params : Blackhole Returns : void} deepStringJackson{ Params : Blackhole Returns : void} deepStringDatabind{ Params : Blackhole Returns : void} stringJackson{ Params : JsonObject,Blackhole Returns : void} stringDatabind{ Params : JsonObject,Blackhole Returns : void} smallBufferJackson{ Params : Blackhole Returns : void} smallBufferDatabind{ Params : Blackhole Returns : void} deepBufferJackson{ Params : Blackhole Returns : void} deepBufferDatabind{ Params : Blackhole Returns : void} wideBufferJackson{ Params : Blackhole Returns : void} wideBufferDatabind{ Params : Blackhole Returns : void} bufferJackson{ Params : JsonObject,Blackhole Returns : void} bufferDatabind{ Params : JsonObject,Blackhole Returns : void} ,,,,,,JsonCodec ,,JsonCodec ,JacksonCodec DatabindCodec JsonObject ObjectMapper RuntimeException ,jacksonCodec: , jsonObject
vert.x-master,io.vertx.core.http.impl,HttpServerHandlerBenchmark,1,1,0,0,0,false,BenchmarkBase ,0 ,Alloc ,GET: ByteBuf readerIndex: int writeIndex: int vertx: VertxInternal vertxChannel: EmbeddedChannel nettyChannel: EmbeddedChannel RESPONSE_TYPE_PLAIN: CharSequence HELLO_WORLD: String HELLO_WORLD_BUFFER: Buffer HEADER_SERVER: CharSequence HEADER_DATE: CharSequence HEADER_CONTENT_TYPE: CharSequence HEADER_CONTENT_LENGTH: CharSequence HELLO_WORLD_LENGTH: CharSequence SERVER: CharSequence DATE_STRING: CharSequence ,consume{ Params : ByteBuf Returns : void} buffer{ Params :  Returns : ByteBuf} buffer{ Params : int Returns : ByteBuf} buffer{ Params : int,int Returns : ByteBuf} ioBuffer{ Params :  Returns : ByteBuf} ioBuffer{ Params : int Returns : ByteBuf} ioBuffer{ Params : int,int Returns : ByteBuf} heapBuffer{ Params :  Returns : ByteBuf} heapBuffer{ Params : int Returns : ByteBuf} heapBuffer{ Params : int,int Returns : ByteBuf} directBuffer{ Params :  Returns : ByteBuf} directBuffer{ Params : int Returns : ByteBuf} directBuffer{ Params : int,int Returns : ByteBuf} compositeBuffer{ Params :  Returns : CompositeByteBuf} compositeBuffer{ Params : int Returns : CompositeByteBuf} compositeHeapBuffer{ Params :  Returns : CompositeByteBuf} compositeHeapBuffer{ Params : int Returns : CompositeByteBuf} compositeDirectBuffer{ Params :  Returns : CompositeByteBuf} compositeDirectBuffer{ Params : int Returns : CompositeByteBuf} isDirectBufferPooled{ Params :  Returns : boolean} calculateNewCapacity{ Params : int,int Returns : int} setup{ Params :  Returns : void} isContentAlwaysEmpty{ Params : HttpMessage Returns : boolean} acceptOutboundMessage{ Params : Object Returns : boolean} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} writeResponse{ Params : ChannelHandlerContext,HttpRequest,ByteBuf,CharSequence,CharSequence Returns : void} vertx{ Params :  Returns : Object} vertxOpt{ Params :  Returns : Object} vertxOptMetricsOn{ Params :  Returns : Object} netty{ Params :  Returns : Object} ,buffer buffer buffer ioBuffer ioBuffer ioBuffer heapBuffer heapBuffer heapBuffer directBuffer directBuffer directBuffer compositeBuffer compositeBuffer compositeHeapBuffer compositeHeapBuffer compositeDirectBuffer compositeDirectBuffer isDirectBufferPooled calculateNewCapacity isContentAlwaysEmpty acceptOutboundMessage channelRead channelReadComplete ,consume ,,,,,,,IllegalArgumentException IllegalArgumentException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException HttpServerOptions EmbeddedChannel VertxHttpRequestDecoder VertxHttpResponseEncoder Alloc Http1xServerConnection HttpServerOptions EmbeddedChannel HttpRequestDecoder HttpResponseEncoder ChannelInboundHandlerAdapter AsciiString AsciiString AsciiString SimpleDateFormat AsciiString Date DefaultFullHttpResponse Alloc ,nettyChannel: 
vert.x-master,io.vertx.core.http.impl,Alloc,3,0,0,1,0,false,BenchmarkBase ,0 ,Alloc ,buf: ByteBuf capacity: int ,consume{ Params : ByteBuf Returns : void} buffer{ Params :  Returns : ByteBuf} buffer{ Params : int Returns : ByteBuf} buffer{ Params : int,int Returns : ByteBuf} ioBuffer{ Params :  Returns : ByteBuf} ioBuffer{ Params : int Returns : ByteBuf} ioBuffer{ Params : int,int Returns : ByteBuf} heapBuffer{ Params :  Returns : ByteBuf} heapBuffer{ Params : int Returns : ByteBuf} heapBuffer{ Params : int,int Returns : ByteBuf} directBuffer{ Params :  Returns : ByteBuf} directBuffer{ Params : int Returns : ByteBuf} directBuffer{ Params : int,int Returns : ByteBuf} compositeBuffer{ Params :  Returns : CompositeByteBuf} compositeBuffer{ Params : int Returns : CompositeByteBuf} compositeHeapBuffer{ Params :  Returns : CompositeByteBuf} compositeHeapBuffer{ Params : int Returns : CompositeByteBuf} compositeDirectBuffer{ Params :  Returns : CompositeByteBuf} compositeDirectBuffer{ Params : int Returns : CompositeByteBuf} isDirectBufferPooled{ Params :  Returns : boolean} calculateNewCapacity{ Params : int,int Returns : int} setup{ Params :  Returns : void} isContentAlwaysEmpty{ Params : HttpMessage Returns : boolean} acceptOutboundMessage{ Params : Object Returns : boolean} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} writeResponse{ Params : ChannelHandlerContext,HttpRequest,ByteBuf,CharSequence,CharSequence Returns : void} vertx{ Params :  Returns : Object} vertxOpt{ Params :  Returns : Object} vertxOptMetricsOn{ Params :  Returns : Object} netty{ Params :  Returns : Object} ,buffer buffer buffer ioBuffer ioBuffer ioBuffer heapBuffer heapBuffer heapBuffer directBuffer directBuffer directBuffer compositeBuffer compositeBuffer compositeHeapBuffer compositeHeapBuffer compositeDirectBuffer compositeDirectBuffer isDirectBufferPooled calculateNewCapacity isContentAlwaysEmpty acceptOutboundMessage channelRead channelReadComplete ,consume ,,,ByteBufAllocator ,int ,,int ,IllegalArgumentException IllegalArgumentException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,: 
vert.x-master,io.vertx.core.impl,BenchmarkContext,1,1,0,0,0,false,ContextBase ,0 ,0 ,,create{ Params : Vertx Returns : BenchmarkContext} executor{ Params :  Returns : Executor} inThread{ Params :  Returns : boolean} emit{ Params : ContextInternal,T,Handler<T> Returns : void} runOnContext{ Params : ContextInternal,Handler<Void> Returns : void} execute{ Params : ContextInternal,T,Handler<T> Returns : void} execute{ Params : ContextInternal,Runnable Returns : void} execute{ Params : Runnable Returns : void} isEventLoopContext{ Params :  Returns : boolean} isWorkerContext{ Params :  Returns : boolean} ,executor inThread emit runOnContext execute execute execute isEventLoopContext isWorkerContext ,create ,,,,,,,BenchmarkContext UnsupportedOperationException UnsupportedOperationException ,task: 
vert.x-master,io.vertx.core.impl,VertxExecutorService,1,1,0,0,0,false,ThreadPoolExecutor ,0 ,0 ,,,,,,,,,,,LinkedBlockingQueue ,null
vert.x-master,io.vertx.core.externals,SomeFactoryImplA,1,1,0,0,0,false,0 ,SomeFactory ,0 ,,name{ Params :  Returns : String} classloader{ Params :  Returns : ClassLoader} ,name classloader ,,,,SomeFactory ,,,,,this: 
vert.x-master,io.vertx.core.externals,MyVerticle,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,,start{ Params :  Returns : void} ,start ,,,,,,,,,vertx: , "io.vertx.core.impl.launcher.commands.HttpTestVerticle"
vert.x-master,io.vertx.core,AbstractVerticleTest,1,1,0,0,0,false,VertxTestBase ,0 ,MyAbstractVerticle ,verticle: MyAbstractVerticle ,testFieldsSet{ Params :  Returns : void} start{ Params :  Returns : void} getDeploymentID{ Params :  Returns : String} getConfig{ Params :  Returns : JsonObject} ,,,,,,,,,MyAbstractVerticle JsonObject DeploymentOptions ,: 
vert.x-master,io.vertx.core,MyAbstractVerticle,3,0,0,0,0,false,VertxTestBase ,0 ,MyAbstractVerticle ,,testFieldsSet{ Params :  Returns : void} start{ Params :  Returns : void} getDeploymentID{ Params :  Returns : String} getConfig{ Params :  Returns : JsonObject} ,,,,,,,,,,: 
vert.x-master,io.vertx.core,AccessEventBusFromInitVerticleFactory,1,1,0,0,0,false,0 ,VerticleFactory ,0 ,,init{ Params : Vertx Returns : void} prefix{ Params :  Returns : String} createVerticle{ Params : String,ClassLoader,Promise<Callable<Verticle>> Returns : void} close{ Params :  Returns : void} ,init prefix createVerticle close ,,,,VerticleFactory ,,,,IllegalStateException IllegalStateException ,promise: 
vert.x-master,io.vertx.core,AccessEventBusFromInitVerticleFactoryTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testLoadFactoryThatCheckEventBusAndSharedDataForNull{ Params :  Returns : void} ,,,,,,,,,,: , found
vert.x-master,io.vertx.core,BlockedThreadCheckerTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,events: List<BlockedThreadEvent> ,expectMessage{ Params : String,long,TimeUnit Returns : void} catchBlockedThreadEvents{ Params : Vertx Returns : void} setUp{ Params :  Returns : void} testBlockCheckDefault{ Params :  Returns : void} start{ Params :  Returns : void} testBlockCheckExceptionTimeLimit{ Params :  Returns : void} start{ Params :  Returns : void} testBlockCheckWorker{ Params :  Returns : void} start{ Params :  Returns : void} testBlockCheckExecuteBlocking{ Params :  Returns : void} start{ Params :  Returns : void} testNamedWorkerPoolMaxExecuteWorkerTime{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testCustomThreadBlockedHandler{ Params :  Returns : void} start{ Params :  Returns : void} ,setUp start start start start start start ,,,,,List<BlockedThreadEvent> ,,List<BlockedThreadEvent> ,ArrayList AbstractVerticle AbstractVerticle VertxOptions AbstractVerticle VertxOptions DeploymentOptions AbstractVerticle VertxOptions DeploymentOptions AbstractVerticle AbstractVerticle VertxOptions DeploymentOptions ,: 
vert.x-master,io.vertx.core.buffer,BufferTest,1,1,0,0,0,false,0 ,0 ,0 ,MEDIUM_MAX_VALUE: int PADDED_BUFFER_FACTORY: Function<byte[], Buffer> numSets: int ,paddedByteBuf{ Params : int,byte[] Returns : ByteBuf} testConstructorArguments{ Params :  Returns : void} testSetGetInt{ Params :  Returns : void} testAppendBuff{ Params :  Returns : void} testAppendBuff2{ Params :  Returns : void} testAppendBuff{ Params : Function<byte[],Buffer> Returns : void} testAppendBytes{ Params :  Returns : void} testAppendBytesWithOffsetAndLen{ Params :  Returns : void} testAppendBufferWithOffsetAndLen{ Params :  Returns : void} testAppendBufferWithOffsetAndLen2{ Params :  Returns : void} testAppendBufferWithOffsetAndLen{ Params : Function<byte[],Buffer> Returns : void} testAppendByte{ Params :  Returns : void} testAppendByte2{ Params :  Returns : void} testAppendUnsignedByte{ Params :  Returns : void} testAppendShort{ Params :  Returns : void} testAppendUnsignedShort{ Params :  Returns : void} testAppendInt{ Params :  Returns : void} testAppendUnsignedInt{ Params :  Returns : void} testAppendMedium{ Params :  Returns : void} testAppendLong{ Params :  Returns : void} testAppendString1{ Params :  Returns : void} testAppendString2{ Params :  Returns : void} testLE{ Params :  Returns : void} checkBEAndLE{ Params : int,Buffer,Buffer Returns : void} testGetOutOfBounds{ Params :  Returns : void} testSetOutOfBounds{ Params :  Returns : void} testGetByte{ Params :  Returns : void} testGetUnsignedByte{ Params :  Returns : void} testGetSetInt{ Params : boolean Returns : void} testGetInt{ Params :  Returns : void} testGetIntLE{ Params :  Returns : void} testGetSetUnsignedInt{ Params : boolean Returns : void} testGetUnsignedInt{ Params :  Returns : void} testGetUnsignedIntLE{ Params :  Returns : void} testGetSetMedium{ Params : boolean Returns : void} testGetMedium{ Params :  Returns : void} testGetMediumLE{ Params :  Returns : void} testGetSetUnsignedMedium{ Params : boolean Returns : void} testGetUnsignedMedium{ Params :  Returns : void} testGetUnsignedMediumLE{ Params :  Returns : void} testGetSetLong{ Params : boolean Returns : void} testGetLong{ Params :  Returns : void} testGetLongLE{ Params :  Returns : void} testGetFloat{ Params :  Returns : void} testGetDouble{ Params :  Returns : void} testGetSetShort{ Params : boolean Returns : void} testGetShort{ Params :  Returns : void} testGetShortLE{ Params :  Returns : void} testGetSetUnsignedShort{ Params : boolean Returns : void} testGetUnsignedShort{ Params :  Returns : void} testGetUnsignedShortLE{ Params :  Returns : void} testGetString{ Params :  Returns : void} testGetBytes{ Params :  Returns : void} testGetBytes2{ Params :  Returns : void} testGetBytesWithByteArray{ Params :  Returns : void} testGetBytesWithTooSmallByteArray{ Params :  Returns : void} testGetBytesWithByteArrayFull{ Params :  Returns : void} testGetBytesWithBadOffset{ Params :  Returns : void} testSetInt{ Params :  Returns : void} testSetIntExpandBuffer{ Params :  Returns : void} testSetInt{ Params : Buffer Returns : void} testSetUnsignedInt{ Params :  Returns : void} testSetUnsignedIntExpandBuffer{ Params :  Returns : void} testSetUnsignedInt{ Params : Buffer Returns : void} testSetLong{ Params :  Returns : void} testSetLongExpandBuffer{ Params :  Returns : void} testSetLong{ Params : Buffer Returns : void} testSetByte{ Params :  Returns : void} testSetByteExpandBuffer{ Params :  Returns : void} testSetByte{ Params : Buffer Returns : void} testSetUnsignedByte{ Params :  Returns : void} testSetUnsignedByteExpandBuffer{ Params :  Returns : void} testSetUnsignedByte{ Params : Buffer Returns : void} testSetFloat{ Params :  Returns : void} testSetFloatExpandBuffer{ Params :  Returns : void} testSetFloat{ Params : Buffer Returns : void} testSetDouble{ Params :  Returns : void} testSetDoubleExpandBuffer{ Params :  Returns : void} testSetDouble{ Params : Buffer Returns : void} testSetShort{ Params :  Returns : void} testSetShortExpandBuffer{ Params :  Returns : void} testSetShort{ Params : Buffer Returns : void} testSetUnsignedShort{ Params :  Returns : void} testSetUnsignedShortExpandBuffer{ Params :  Returns : void} testSetUnsignedShort{ Params : Buffer Returns : void} testSetBytesBuffer{ Params :  Returns : void} testSetBytesBuffer2{ Params :  Returns : void} testSetBytesBuffer{ Params : Buffer,Function<byte[],Buffer> Returns : void} testSetBytesBufferExpandBuffer{ Params :  Returns : void} testSetBytesWithOffsetAndLen{ Params :  Returns : void} testSetBufferWithOffsetAndLen{ Params :  Returns : void} testSetBufferWithOffsetAndLen2{ Params :  Returns : void} testSetBufferWithOffsetAndLen{ Params : Function<byte[],Buffer> Returns : void} testSetBytesString{ Params :  Returns : void} testSetBytesStringExpandBuffer{ Params :  Returns : void} testSetBytesString{ Params : Buffer Returns : void} testToString{ Params :  Returns : void} testCopy{ Params :  Returns : void} testCreateBuffers{ Params :  Returns : void} testSlice1{ Params :  Returns : void} testSlice2{ Params :  Returns : void} testToJsonObject{ Params :  Returns : void} testToJsonArray{ Params :  Returns : void} testLength{ Params :  Returns : void} testLength2{ Params :  Returns : void} testAppendDoesNotModifyByteBufIndex{ Params :  Returns : void} testAppendExpandsBufferWhenMaxCapacityReached{ Params :  Returns : void} testWriteExpandsBufferWhenMaxCapacityReached{ Params :  Returns : void} testSetByteAfterCurrentWriterIndexWithoutExpandingCapacity{ Params :  Returns : void} testGetByteBuf{ Params :  Returns : void} testGetXXXUpperBound{ Params :  Returns : void} checkGetXXXUpperBound{ Params : BiFunction<Buffer,Integer,T>,int Returns : void} testReadOnlyByteBuf{ Params :  Returns : void} ,,paddedByteBuf ,,,,int ,,int ,String JsonObject JsonArray ,buff: 
vert.x-master,io.vertx.core.buffer.impl,VertxBufferTest,1,1,0,0,0,false,0 ,0 ,0 ,,testAllocateVertxBuffer{ Params :  Returns : void} testUnreleasable{ Params :  Returns : void} testDuplicate{ Params :  Returns : void} ,,,,,,,,,BufferImpl BufferImpl BufferImpl ,byteBuf: 
vert.x-master,io.vertx.core,ClasspathVerticleFactory,1,1,0,0,0,false,0 ,VerticleFactory ,0 ,,init{ Params : Vertx Returns : void} prefix{ Params :  Returns : String} createVerticle{ Params : String,ClassLoader,Promise<Callable<Verticle>> Returns : void} close{ Params :  Returns : void} ,init prefix createVerticle close ,,,,VerticleFactory ,,,,,promise: 
vert.x-master,io.vertx.core,ClasspathVerticleFactoryTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testLoadedFromClasspath{ Params :  Returns : void} ,,,,,,,,,,: , found
vert.x-master,io.vertx.core.cli,AmbiguousOptionExceptionTest,1,1,0,0,0,false,0 ,0 ,0 ,,testCreation{ Params :  Returns : void} ,,,,,,,,,AmbiguousOptionException Option Option ,exception: 
vert.x-master,io.vertx.core.cli.converters,BooleanConverterTest,1,1,0,0,0,false,0 ,0 ,0 ,converter: BooleanConverter ,testYesNo{ Params :  Returns : void} testOnOff{ Params :  Returns : void} testTrueFalse{ Params :  Returns : void} testNumbers{ Params :  Returns : void} testWithNullAndEmptyString{ Params :  Returns : void} testWithRandomString{ Params :  Returns : void} ,,,,,,BooleanConverter ,,BooleanConverter ,,converter: , "true welcome"
vert.x-master,io.vertx.core.cli.converters,CharacterConverterTest,1,1,0,0,0,false,0 ,0 ,0 ,converter: CharacterConverter ,testFromString{ Params :  Returns : void} testWithNull{ Params :  Returns : void} testWithEmptyString{ Params :  Returns : void} testWithLongString{ Params :  Returns : void} ,,,,,,,,,,converter: , "ab"
vert.x-master,io.vertx.core.cli.converters,ConstructorBasedConverterTest,1,1,0,0,0,false,0 ,0 ,0 ,,testGetIfEligible{ Params :  Returns : void} testFromString{ Params :  Returns : void} ,,,,,,,,,,ConstructorBasedConverter: , Person.class
vert.x-master,io.vertx.core.cli.converters,ConvertersTest,1,1,0,0,0,false,0 ,0 ,0 ,,testCreatingSingleValueUsingValueOfOnEnumeration{ Params :  Returns : void} testWithString{ Params :  Returns : void} testWithPrimitives{ Params :  Returns : void} testUsingFrom{ Params :  Returns : void} testUsingFromString{ Params :  Returns : void} testMissingConvertion{ Params :  Returns : void} testWithURL{ Params :  Returns : void} testWithFile{ Params :  Returns : void} ,,,,,,,,,,: , file
vert.x-master,io.vertx.core.cli.converters,CustomConverterTest,1,1,0,0,0,false,0 ,0 ,0 ,,testCreation{ Params :  Returns : void} testConvertion{ Params :  Returns : void} ,,,,,,,,,Person4Converter Person4Converter Person4Converter ,: , p4.last
vert.x-master,io.vertx.core.cli.converters,Person,1,1,0,0,0,false,0 ,0 ,0 ,name: String ,,,,,,,,,,,null
vert.x-master,io.vertx.core.cli.converters,Person2,1,1,0,0,0,false,0 ,0 ,0 ,name: String ,from{ Params : String Returns : Person2} ,,from ,,,,,,,Person2 ,: , p4.last
vert.x-master,io.vertx.core.cli.converters,Person3,1,1,0,0,0,false,0 ,0 ,0 ,name: String ,fromString{ Params : String Returns : Person3} ,,fromString ,,,,,,,Person3 ,: , p4.last
vert.x-master,io.vertx.core.cli.converters,Person4,1,1,0,0,0,false,0 ,0 ,0 ,first: String last: String ,,,,,,,,,,,null
vert.x-master,io.vertx.core.cli.converters,Person4Converter,1,1,0,0,0,false,0 ,Converter<Person4> ,0 ,,fromString{ Params : String Returns : Person4} ,fromString ,,,,Converter ,,,,Person4 ,strings[1]: 
vert.x-master,io.vertx.core.cli.impl,CLIConfiguratorTest,1,1,0,0,0,false,0 ,0 ,CommandForDefaultValueTest CommandForDescriptionTest CommandForParsedAsList CommandForTypeExtractTest CommandForArgumentInjectionTest CommandForConvertedValueTest CommandForMultipleArgumentTest CommandWithDefaultValueOnArgument CLIWithSingleValue CLIWithMultipleValues ,,testHelloCLIFromClass{ Params :  Returns : void} testUsage{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDefaultValue{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDescription{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} testOptionsParsedAsList{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} setFoo{ Params : Set<Character> Returns : void} setFoo{ Params : Collection<Integer> Returns : void} setFoo{ Params : TreeSet<String> Returns : void} setFoo{ Params : ArrayList<String> Returns : void} setFoo{ Params : int[] Returns : void} testTypeExtraction{ Params :  Returns : void} testInjectionOfString{ Params :  Returns : void} parse{ Params : CLI,String Returns : CommandLine} testSingleValueInjection{ Params :  Returns : void} testMultiValuesInjection{ Params :  Returns : void} setX{ Params : String Returns : void} testArgumentInjection{ Params :  Returns : void} setX{ Params : Person4 Returns : void} testArgumentInjectionWithConvertedByAndDefaultValue{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentInjectionWithSeveralArguments{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentWithDefaultValue{ Params :  Returns : void} find{ Params : List<Option>,String Returns : Option} setaBoolean{ Params : boolean Returns : void} setAcceptValueBoolean{ Params : boolean Returns : void} setaByte{ Params : byte Returns : void} setaChar{ Params : char Returns : void} setaDouble{ Params : double Returns : void} setaFloat{ Params : float Returns : void} setaLong{ Params : long Returns : void} setAnInt{ Params : int Returns : void} setAnotherBoolean{ Params : Boolean Returns : void} setAnotherByte{ Params : Byte Returns : void} setAnotherChar{ Params : Character Returns : void} setAnotherDouble{ Params : Double Returns : void} setAnotherFloat{ Params : Float Returns : void} setAnotherInt{ Params : Integer Returns : void} setAnotherLong{ Params : Long Returns : void} setAnotherPerson{ Params : Person2 Returns : void} setAnotherShort{ Params : Short Returns : void} setaPerson{ Params : Person Returns : void} setAFourthPerson{ Params : Person4 Returns : void} setaShort{ Params : short Returns : void} setaState{ Params : Thread.State Returns : void} setaString{ Params : String Returns : void} setaThirdPerson{ Params : Person3 Returns : void} setDoubles{ Params : double[] Returns : void} setInts{ Params : Collection<Integer> Returns : void} setPersons2{ Params : List<Person> Returns : void} setPersons3{ Params : List<Person> Returns : void} setPersons4{ Params : List<Person> Returns : void} setPersons{ Params : List<Person> Returns : void} setShorts{ Params : List<Short> Returns : void} setStates{ Params : Set<Thread.State> Returns : void} setStrings{ Params : Set<String> Returns : void} ,,,,,,,,,StringBuilder HelloClI CLIWithSingleValue CLIWithMultipleValues AtomicReference CommandForArgumentInjectionTest AtomicReference CommandForConvertedValueTest AtomicReference AtomicReference CommandForMultipleArgumentTest AtomicReference AtomicReference CommandWithDefaultValueOnArgument ,match: , 0
vert.x-master,io.vertx.core.cli.impl,CommandForDefaultValueTest,3,1,0,1,0,false,0 ,0 ,CommandForDefaultValueTest CommandForDescriptionTest CommandForParsedAsList CommandForTypeExtractTest CommandForArgumentInjectionTest CommandForConvertedValueTest CommandForMultipleArgumentTest CommandWithDefaultValueOnArgument CLIWithSingleValue CLIWithMultipleValues ,,testHelloCLIFromClass{ Params :  Returns : void} testUsage{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDefaultValue{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDescription{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} testOptionsParsedAsList{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} setFoo{ Params : Set<Character> Returns : void} setFoo{ Params : Collection<Integer> Returns : void} setFoo{ Params : TreeSet<String> Returns : void} setFoo{ Params : ArrayList<String> Returns : void} setFoo{ Params : int[] Returns : void} testTypeExtraction{ Params :  Returns : void} testInjectionOfString{ Params :  Returns : void} parse{ Params : CLI,String Returns : CommandLine} testSingleValueInjection{ Params :  Returns : void} testMultiValuesInjection{ Params :  Returns : void} setX{ Params : String Returns : void} testArgumentInjection{ Params :  Returns : void} setX{ Params : Person4 Returns : void} testArgumentInjectionWithConvertedByAndDefaultValue{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentInjectionWithSeveralArguments{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentWithDefaultValue{ Params :  Returns : void} find{ Params : List<Option>,String Returns : Option} setaBoolean{ Params : boolean Returns : void} setAcceptValueBoolean{ Params : boolean Returns : void} setaByte{ Params : byte Returns : void} setaChar{ Params : char Returns : void} setaDouble{ Params : double Returns : void} setaFloat{ Params : float Returns : void} setaLong{ Params : long Returns : void} setAnInt{ Params : int Returns : void} setAnotherBoolean{ Params : Boolean Returns : void} setAnotherByte{ Params : Byte Returns : void} setAnotherChar{ Params : Character Returns : void} setAnotherDouble{ Params : Double Returns : void} setAnotherFloat{ Params : Float Returns : void} setAnotherInt{ Params : Integer Returns : void} setAnotherLong{ Params : Long Returns : void} setAnotherPerson{ Params : Person2 Returns : void} setAnotherShort{ Params : Short Returns : void} setaPerson{ Params : Person Returns : void} setAFourthPerson{ Params : Person4 Returns : void} setaShort{ Params : short Returns : void} setaState{ Params : Thread.State Returns : void} setaString{ Params : String Returns : void} setaThirdPerson{ Params : Person3 Returns : void} setDoubles{ Params : double[] Returns : void} setInts{ Params : Collection<Integer> Returns : void} setPersons2{ Params : List<Person> Returns : void} setPersons3{ Params : List<Person> Returns : void} setPersons4{ Params : List<Person> Returns : void} setPersons{ Params : List<Person> Returns : void} setShorts{ Params : List<Short> Returns : void} setStates{ Params : Set<Thread.State> Returns : void} setStrings{ Params : Set<String> Returns : void} ,,,,,,,,,,match: , 0
vert.x-master,io.vertx.core.cli.impl,CommandForDescriptionTest,3,1,0,1,0,false,0 ,0 ,CommandForDefaultValueTest CommandForDescriptionTest CommandForParsedAsList CommandForTypeExtractTest CommandForArgumentInjectionTest CommandForConvertedValueTest CommandForMultipleArgumentTest CommandWithDefaultValueOnArgument CLIWithSingleValue CLIWithMultipleValues ,,testHelloCLIFromClass{ Params :  Returns : void} testUsage{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDefaultValue{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDescription{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} testOptionsParsedAsList{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} setFoo{ Params : Set<Character> Returns : void} setFoo{ Params : Collection<Integer> Returns : void} setFoo{ Params : TreeSet<String> Returns : void} setFoo{ Params : ArrayList<String> Returns : void} setFoo{ Params : int[] Returns : void} testTypeExtraction{ Params :  Returns : void} testInjectionOfString{ Params :  Returns : void} parse{ Params : CLI,String Returns : CommandLine} testSingleValueInjection{ Params :  Returns : void} testMultiValuesInjection{ Params :  Returns : void} setX{ Params : String Returns : void} testArgumentInjection{ Params :  Returns : void} setX{ Params : Person4 Returns : void} testArgumentInjectionWithConvertedByAndDefaultValue{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentInjectionWithSeveralArguments{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentWithDefaultValue{ Params :  Returns : void} find{ Params : List<Option>,String Returns : Option} setaBoolean{ Params : boolean Returns : void} setAcceptValueBoolean{ Params : boolean Returns : void} setaByte{ Params : byte Returns : void} setaChar{ Params : char Returns : void} setaDouble{ Params : double Returns : void} setaFloat{ Params : float Returns : void} setaLong{ Params : long Returns : void} setAnInt{ Params : int Returns : void} setAnotherBoolean{ Params : Boolean Returns : void} setAnotherByte{ Params : Byte Returns : void} setAnotherChar{ Params : Character Returns : void} setAnotherDouble{ Params : Double Returns : void} setAnotherFloat{ Params : Float Returns : void} setAnotherInt{ Params : Integer Returns : void} setAnotherLong{ Params : Long Returns : void} setAnotherPerson{ Params : Person2 Returns : void} setAnotherShort{ Params : Short Returns : void} setaPerson{ Params : Person Returns : void} setAFourthPerson{ Params : Person4 Returns : void} setaShort{ Params : short Returns : void} setaState{ Params : Thread.State Returns : void} setaString{ Params : String Returns : void} setaThirdPerson{ Params : Person3 Returns : void} setDoubles{ Params : double[] Returns : void} setInts{ Params : Collection<Integer> Returns : void} setPersons2{ Params : List<Person> Returns : void} setPersons3{ Params : List<Person> Returns : void} setPersons4{ Params : List<Person> Returns : void} setPersons{ Params : List<Person> Returns : void} setShorts{ Params : List<Short> Returns : void} setStates{ Params : Set<Thread.State> Returns : void} setStrings{ Params : Set<String> Returns : void} ,,,,,,,,,,match: , 0
vert.x-master,io.vertx.core.cli.impl,CommandForParsedAsList,3,1,0,1,0,false,0 ,0 ,CommandForDefaultValueTest CommandForDescriptionTest CommandForParsedAsList CommandForTypeExtractTest CommandForArgumentInjectionTest CommandForConvertedValueTest CommandForMultipleArgumentTest CommandWithDefaultValueOnArgument CLIWithSingleValue CLIWithMultipleValues ,,testHelloCLIFromClass{ Params :  Returns : void} testUsage{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDefaultValue{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDescription{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} testOptionsParsedAsList{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} setFoo{ Params : Set<Character> Returns : void} setFoo{ Params : Collection<Integer> Returns : void} setFoo{ Params : TreeSet<String> Returns : void} setFoo{ Params : ArrayList<String> Returns : void} setFoo{ Params : int[] Returns : void} testTypeExtraction{ Params :  Returns : void} testInjectionOfString{ Params :  Returns : void} parse{ Params : CLI,String Returns : CommandLine} testSingleValueInjection{ Params :  Returns : void} testMultiValuesInjection{ Params :  Returns : void} setX{ Params : String Returns : void} testArgumentInjection{ Params :  Returns : void} setX{ Params : Person4 Returns : void} testArgumentInjectionWithConvertedByAndDefaultValue{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentInjectionWithSeveralArguments{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentWithDefaultValue{ Params :  Returns : void} find{ Params : List<Option>,String Returns : Option} setaBoolean{ Params : boolean Returns : void} setAcceptValueBoolean{ Params : boolean Returns : void} setaByte{ Params : byte Returns : void} setaChar{ Params : char Returns : void} setaDouble{ Params : double Returns : void} setaFloat{ Params : float Returns : void} setaLong{ Params : long Returns : void} setAnInt{ Params : int Returns : void} setAnotherBoolean{ Params : Boolean Returns : void} setAnotherByte{ Params : Byte Returns : void} setAnotherChar{ Params : Character Returns : void} setAnotherDouble{ Params : Double Returns : void} setAnotherFloat{ Params : Float Returns : void} setAnotherInt{ Params : Integer Returns : void} setAnotherLong{ Params : Long Returns : void} setAnotherPerson{ Params : Person2 Returns : void} setAnotherShort{ Params : Short Returns : void} setaPerson{ Params : Person Returns : void} setAFourthPerson{ Params : Person4 Returns : void} setaShort{ Params : short Returns : void} setaState{ Params : Thread.State Returns : void} setaString{ Params : String Returns : void} setaThirdPerson{ Params : Person3 Returns : void} setDoubles{ Params : double[] Returns : void} setInts{ Params : Collection<Integer> Returns : void} setPersons2{ Params : List<Person> Returns : void} setPersons3{ Params : List<Person> Returns : void} setPersons4{ Params : List<Person> Returns : void} setPersons{ Params : List<Person> Returns : void} setShorts{ Params : List<Short> Returns : void} setStates{ Params : Set<Thread.State> Returns : void} setStrings{ Params : Set<String> Returns : void} ,,,,,,,,,,match: , 0
vert.x-master,io.vertx.core.cli.impl,CommandForTypeExtractTest,3,1,0,1,0,false,0 ,0 ,CommandForDefaultValueTest CommandForDescriptionTest CommandForParsedAsList CommandForTypeExtractTest CommandForArgumentInjectionTest CommandForConvertedValueTest CommandForMultipleArgumentTest CommandWithDefaultValueOnArgument CLIWithSingleValue CLIWithMultipleValues ,,testHelloCLIFromClass{ Params :  Returns : void} testUsage{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDefaultValue{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDescription{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} testOptionsParsedAsList{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} setFoo{ Params : Set<Character> Returns : void} setFoo{ Params : Collection<Integer> Returns : void} setFoo{ Params : TreeSet<String> Returns : void} setFoo{ Params : ArrayList<String> Returns : void} setFoo{ Params : int[] Returns : void} testTypeExtraction{ Params :  Returns : void} testInjectionOfString{ Params :  Returns : void} parse{ Params : CLI,String Returns : CommandLine} testSingleValueInjection{ Params :  Returns : void} testMultiValuesInjection{ Params :  Returns : void} setX{ Params : String Returns : void} testArgumentInjection{ Params :  Returns : void} setX{ Params : Person4 Returns : void} testArgumentInjectionWithConvertedByAndDefaultValue{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentInjectionWithSeveralArguments{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentWithDefaultValue{ Params :  Returns : void} find{ Params : List<Option>,String Returns : Option} setaBoolean{ Params : boolean Returns : void} setAcceptValueBoolean{ Params : boolean Returns : void} setaByte{ Params : byte Returns : void} setaChar{ Params : char Returns : void} setaDouble{ Params : double Returns : void} setaFloat{ Params : float Returns : void} setaLong{ Params : long Returns : void} setAnInt{ Params : int Returns : void} setAnotherBoolean{ Params : Boolean Returns : void} setAnotherByte{ Params : Byte Returns : void} setAnotherChar{ Params : Character Returns : void} setAnotherDouble{ Params : Double Returns : void} setAnotherFloat{ Params : Float Returns : void} setAnotherInt{ Params : Integer Returns : void} setAnotherLong{ Params : Long Returns : void} setAnotherPerson{ Params : Person2 Returns : void} setAnotherShort{ Params : Short Returns : void} setaPerson{ Params : Person Returns : void} setAFourthPerson{ Params : Person4 Returns : void} setaShort{ Params : short Returns : void} setaState{ Params : Thread.State Returns : void} setaString{ Params : String Returns : void} setaThirdPerson{ Params : Person3 Returns : void} setDoubles{ Params : double[] Returns : void} setInts{ Params : Collection<Integer> Returns : void} setPersons2{ Params : List<Person> Returns : void} setPersons3{ Params : List<Person> Returns : void} setPersons4{ Params : List<Person> Returns : void} setPersons{ Params : List<Person> Returns : void} setShorts{ Params : List<Short> Returns : void} setStates{ Params : Set<Thread.State> Returns : void} setStrings{ Params : Set<String> Returns : void} ,,,,,,,,,,match: , 0
vert.x-master,io.vertx.core.cli.impl,CommandForArgumentInjectionTest,3,1,0,1,0,false,0 ,0 ,CommandForDefaultValueTest CommandForDescriptionTest CommandForParsedAsList CommandForTypeExtractTest CommandForArgumentInjectionTest CommandForConvertedValueTest CommandForMultipleArgumentTest CommandWithDefaultValueOnArgument CLIWithSingleValue CLIWithMultipleValues ,reference: AtomicReference<String> ,testHelloCLIFromClass{ Params :  Returns : void} testUsage{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDefaultValue{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDescription{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} testOptionsParsedAsList{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} setFoo{ Params : Set<Character> Returns : void} setFoo{ Params : Collection<Integer> Returns : void} setFoo{ Params : TreeSet<String> Returns : void} setFoo{ Params : ArrayList<String> Returns : void} setFoo{ Params : int[] Returns : void} testTypeExtraction{ Params :  Returns : void} testInjectionOfString{ Params :  Returns : void} parse{ Params : CLI,String Returns : CommandLine} testSingleValueInjection{ Params :  Returns : void} testMultiValuesInjection{ Params :  Returns : void} setX{ Params : String Returns : void} testArgumentInjection{ Params :  Returns : void} setX{ Params : Person4 Returns : void} testArgumentInjectionWithConvertedByAndDefaultValue{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentInjectionWithSeveralArguments{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentWithDefaultValue{ Params :  Returns : void} find{ Params : List<Option>,String Returns : Option} setaBoolean{ Params : boolean Returns : void} setAcceptValueBoolean{ Params : boolean Returns : void} setaByte{ Params : byte Returns : void} setaChar{ Params : char Returns : void} setaDouble{ Params : double Returns : void} setaFloat{ Params : float Returns : void} setaLong{ Params : long Returns : void} setAnInt{ Params : int Returns : void} setAnotherBoolean{ Params : Boolean Returns : void} setAnotherByte{ Params : Byte Returns : void} setAnotherChar{ Params : Character Returns : void} setAnotherDouble{ Params : Double Returns : void} setAnotherFloat{ Params : Float Returns : void} setAnotherInt{ Params : Integer Returns : void} setAnotherLong{ Params : Long Returns : void} setAnotherPerson{ Params : Person2 Returns : void} setAnotherShort{ Params : Short Returns : void} setaPerson{ Params : Person Returns : void} setAFourthPerson{ Params : Person4 Returns : void} setaShort{ Params : short Returns : void} setaState{ Params : Thread.State Returns : void} setaString{ Params : String Returns : void} setaThirdPerson{ Params : Person3 Returns : void} setDoubles{ Params : double[] Returns : void} setInts{ Params : Collection<Integer> Returns : void} setPersons2{ Params : List<Person> Returns : void} setPersons3{ Params : List<Person> Returns : void} setPersons4{ Params : List<Person> Returns : void} setPersons{ Params : List<Person> Returns : void} setShorts{ Params : List<Short> Returns : void} setStates{ Params : Set<Thread.State> Returns : void} setStrings{ Params : Set<String> Returns : void} ,,,,,,,,,AtomicReference ,reference: , s
vert.x-master,io.vertx.core.cli.impl,CommandForConvertedValueTest,3,1,0,0,0,false,0 ,0 ,CommandForDefaultValueTest CommandForDescriptionTest CommandForParsedAsList CommandForTypeExtractTest CommandForArgumentInjectionTest CommandForConvertedValueTest CommandForMultipleArgumentTest CommandWithDefaultValueOnArgument CLIWithSingleValue CLIWithMultipleValues ,reference: AtomicReference<Person4> ,testHelloCLIFromClass{ Params :  Returns : void} testUsage{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDefaultValue{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDescription{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} testOptionsParsedAsList{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} setFoo{ Params : Set<Character> Returns : void} setFoo{ Params : Collection<Integer> Returns : void} setFoo{ Params : TreeSet<String> Returns : void} setFoo{ Params : ArrayList<String> Returns : void} setFoo{ Params : int[] Returns : void} testTypeExtraction{ Params :  Returns : void} testInjectionOfString{ Params :  Returns : void} parse{ Params : CLI,String Returns : CommandLine} testSingleValueInjection{ Params :  Returns : void} testMultiValuesInjection{ Params :  Returns : void} setX{ Params : String Returns : void} testArgumentInjection{ Params :  Returns : void} setX{ Params : Person4 Returns : void} testArgumentInjectionWithConvertedByAndDefaultValue{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentInjectionWithSeveralArguments{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentWithDefaultValue{ Params :  Returns : void} find{ Params : List<Option>,String Returns : Option} setaBoolean{ Params : boolean Returns : void} setAcceptValueBoolean{ Params : boolean Returns : void} setaByte{ Params : byte Returns : void} setaChar{ Params : char Returns : void} setaDouble{ Params : double Returns : void} setaFloat{ Params : float Returns : void} setaLong{ Params : long Returns : void} setAnInt{ Params : int Returns : void} setAnotherBoolean{ Params : Boolean Returns : void} setAnotherByte{ Params : Byte Returns : void} setAnotherChar{ Params : Character Returns : void} setAnotherDouble{ Params : Double Returns : void} setAnotherFloat{ Params : Float Returns : void} setAnotherInt{ Params : Integer Returns : void} setAnotherLong{ Params : Long Returns : void} setAnotherPerson{ Params : Person2 Returns : void} setAnotherShort{ Params : Short Returns : void} setaPerson{ Params : Person Returns : void} setAFourthPerson{ Params : Person4 Returns : void} setaShort{ Params : short Returns : void} setaState{ Params : Thread.State Returns : void} setaString{ Params : String Returns : void} setaThirdPerson{ Params : Person3 Returns : void} setDoubles{ Params : double[] Returns : void} setInts{ Params : Collection<Integer> Returns : void} setPersons2{ Params : List<Person> Returns : void} setPersons3{ Params : List<Person> Returns : void} setPersons4{ Params : List<Person> Returns : void} setPersons{ Params : List<Person> Returns : void} setShorts{ Params : List<Short> Returns : void} setStates{ Params : Set<Thread.State> Returns : void} setStrings{ Params : Set<String> Returns : void} ,,,,,,,,,AtomicReference ,reference: , s
vert.x-master,io.vertx.core.cli.impl,CommandForMultipleArgumentTest,3,1,0,1,0,false,0 ,0 ,CommandForDefaultValueTest CommandForDescriptionTest CommandForParsedAsList CommandForTypeExtractTest CommandForArgumentInjectionTest CommandForConvertedValueTest CommandForMultipleArgumentTest CommandWithDefaultValueOnArgument CLIWithSingleValue CLIWithMultipleValues ,x: AtomicReference<String> y: AtomicReference<Integer> ,testHelloCLIFromClass{ Params :  Returns : void} testUsage{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDefaultValue{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDescription{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} testOptionsParsedAsList{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} setFoo{ Params : Set<Character> Returns : void} setFoo{ Params : Collection<Integer> Returns : void} setFoo{ Params : TreeSet<String> Returns : void} setFoo{ Params : ArrayList<String> Returns : void} setFoo{ Params : int[] Returns : void} testTypeExtraction{ Params :  Returns : void} testInjectionOfString{ Params :  Returns : void} parse{ Params : CLI,String Returns : CommandLine} testSingleValueInjection{ Params :  Returns : void} testMultiValuesInjection{ Params :  Returns : void} setX{ Params : String Returns : void} testArgumentInjection{ Params :  Returns : void} setX{ Params : Person4 Returns : void} testArgumentInjectionWithConvertedByAndDefaultValue{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentInjectionWithSeveralArguments{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentWithDefaultValue{ Params :  Returns : void} find{ Params : List<Option>,String Returns : Option} setaBoolean{ Params : boolean Returns : void} setAcceptValueBoolean{ Params : boolean Returns : void} setaByte{ Params : byte Returns : void} setaChar{ Params : char Returns : void} setaDouble{ Params : double Returns : void} setaFloat{ Params : float Returns : void} setaLong{ Params : long Returns : void} setAnInt{ Params : int Returns : void} setAnotherBoolean{ Params : Boolean Returns : void} setAnotherByte{ Params : Byte Returns : void} setAnotherChar{ Params : Character Returns : void} setAnotherDouble{ Params : Double Returns : void} setAnotherFloat{ Params : Float Returns : void} setAnotherInt{ Params : Integer Returns : void} setAnotherLong{ Params : Long Returns : void} setAnotherPerson{ Params : Person2 Returns : void} setAnotherShort{ Params : Short Returns : void} setaPerson{ Params : Person Returns : void} setAFourthPerson{ Params : Person4 Returns : void} setaShort{ Params : short Returns : void} setaState{ Params : Thread.State Returns : void} setaString{ Params : String Returns : void} setaThirdPerson{ Params : Person3 Returns : void} setDoubles{ Params : double[] Returns : void} setInts{ Params : Collection<Integer> Returns : void} setPersons2{ Params : List<Person> Returns : void} setPersons3{ Params : List<Person> Returns : void} setPersons4{ Params : List<Person> Returns : void} setPersons{ Params : List<Person> Returns : void} setShorts{ Params : List<Short> Returns : void} setStates{ Params : Set<Thread.State> Returns : void} setStrings{ Params : Set<String> Returns : void} ,,,,,,,,,AtomicReference AtomicReference ,y: , s
vert.x-master,io.vertx.core.cli.impl,CommandWithDefaultValueOnArgument,3,1,0,1,0,false,0 ,0 ,CommandForDefaultValueTest CommandForDescriptionTest CommandForParsedAsList CommandForTypeExtractTest CommandForArgumentInjectionTest CommandForConvertedValueTest CommandForMultipleArgumentTest CommandWithDefaultValueOnArgument CLIWithSingleValue CLIWithMultipleValues ,x: AtomicReference<String> y: AtomicReference<Integer> ,testHelloCLIFromClass{ Params :  Returns : void} testUsage{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDefaultValue{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDescription{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} testOptionsParsedAsList{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} setFoo{ Params : Set<Character> Returns : void} setFoo{ Params : Collection<Integer> Returns : void} setFoo{ Params : TreeSet<String> Returns : void} setFoo{ Params : ArrayList<String> Returns : void} setFoo{ Params : int[] Returns : void} testTypeExtraction{ Params :  Returns : void} testInjectionOfString{ Params :  Returns : void} parse{ Params : CLI,String Returns : CommandLine} testSingleValueInjection{ Params :  Returns : void} testMultiValuesInjection{ Params :  Returns : void} setX{ Params : String Returns : void} testArgumentInjection{ Params :  Returns : void} setX{ Params : Person4 Returns : void} testArgumentInjectionWithConvertedByAndDefaultValue{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentInjectionWithSeveralArguments{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentWithDefaultValue{ Params :  Returns : void} find{ Params : List<Option>,String Returns : Option} setaBoolean{ Params : boolean Returns : void} setAcceptValueBoolean{ Params : boolean Returns : void} setaByte{ Params : byte Returns : void} setaChar{ Params : char Returns : void} setaDouble{ Params : double Returns : void} setaFloat{ Params : float Returns : void} setaLong{ Params : long Returns : void} setAnInt{ Params : int Returns : void} setAnotherBoolean{ Params : Boolean Returns : void} setAnotherByte{ Params : Byte Returns : void} setAnotherChar{ Params : Character Returns : void} setAnotherDouble{ Params : Double Returns : void} setAnotherFloat{ Params : Float Returns : void} setAnotherInt{ Params : Integer Returns : void} setAnotherLong{ Params : Long Returns : void} setAnotherPerson{ Params : Person2 Returns : void} setAnotherShort{ Params : Short Returns : void} setaPerson{ Params : Person Returns : void} setAFourthPerson{ Params : Person4 Returns : void} setaShort{ Params : short Returns : void} setaState{ Params : Thread.State Returns : void} setaString{ Params : String Returns : void} setaThirdPerson{ Params : Person3 Returns : void} setDoubles{ Params : double[] Returns : void} setInts{ Params : Collection<Integer> Returns : void} setPersons2{ Params : List<Person> Returns : void} setPersons3{ Params : List<Person> Returns : void} setPersons4{ Params : List<Person> Returns : void} setPersons{ Params : List<Person> Returns : void} setShorts{ Params : List<Short> Returns : void} setStates{ Params : Set<Thread.State> Returns : void} setStrings{ Params : Set<String> Returns : void} ,,,,,,,,,AtomicReference AtomicReference ,y: , s
vert.x-master,io.vertx.core.cli.impl,CLIWithSingleValue,3,2,0,0,0,false,0 ,0 ,CommandForDefaultValueTest CommandForDescriptionTest CommandForParsedAsList CommandForTypeExtractTest CommandForArgumentInjectionTest CommandForConvertedValueTest CommandForMultipleArgumentTest CommandWithDefaultValueOnArgument CLIWithSingleValue CLIWithMultipleValues ,aString: String aState: Thread.State aBoolean: boolean acceptValueBoolean: boolean anotherBoolean: Boolean aByte: byte anotherByte: Byte aChar: char anotherChar: Character aDouble: double anotherDouble: Double aFloat: float anotherFloat: Float anInt: int anotherInt: Integer aLong: long anotherLong: Long aShort: short anotherShort: Short aPerson: Person anotherPerson: Person2 aThirdPerson: Person3 aFourthPerson: Person4 ,testHelloCLIFromClass{ Params :  Returns : void} testUsage{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDefaultValue{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDescription{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} testOptionsParsedAsList{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} setFoo{ Params : Set<Character> Returns : void} setFoo{ Params : Collection<Integer> Returns : void} setFoo{ Params : TreeSet<String> Returns : void} setFoo{ Params : ArrayList<String> Returns : void} setFoo{ Params : int[] Returns : void} testTypeExtraction{ Params :  Returns : void} testInjectionOfString{ Params :  Returns : void} parse{ Params : CLI,String Returns : CommandLine} testSingleValueInjection{ Params :  Returns : void} testMultiValuesInjection{ Params :  Returns : void} setX{ Params : String Returns : void} testArgumentInjection{ Params :  Returns : void} setX{ Params : Person4 Returns : void} testArgumentInjectionWithConvertedByAndDefaultValue{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentInjectionWithSeveralArguments{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentWithDefaultValue{ Params :  Returns : void} find{ Params : List<Option>,String Returns : Option} setaBoolean{ Params : boolean Returns : void} setAcceptValueBoolean{ Params : boolean Returns : void} setaByte{ Params : byte Returns : void} setaChar{ Params : char Returns : void} setaDouble{ Params : double Returns : void} setaFloat{ Params : float Returns : void} setaLong{ Params : long Returns : void} setAnInt{ Params : int Returns : void} setAnotherBoolean{ Params : Boolean Returns : void} setAnotherByte{ Params : Byte Returns : void} setAnotherChar{ Params : Character Returns : void} setAnotherDouble{ Params : Double Returns : void} setAnotherFloat{ Params : Float Returns : void} setAnotherInt{ Params : Integer Returns : void} setAnotherLong{ Params : Long Returns : void} setAnotherPerson{ Params : Person2 Returns : void} setAnotherShort{ Params : Short Returns : void} setaPerson{ Params : Person Returns : void} setAFourthPerson{ Params : Person4 Returns : void} setaShort{ Params : short Returns : void} setaState{ Params : Thread.State Returns : void} setaString{ Params : String Returns : void} setaThirdPerson{ Params : Person3 Returns : void} setDoubles{ Params : double[] Returns : void} setInts{ Params : Collection<Integer> Returns : void} setPersons2{ Params : List<Person> Returns : void} setPersons3{ Params : List<Person> Returns : void} setPersons4{ Params : List<Person> Returns : void} setPersons{ Params : List<Person> Returns : void} setShorts{ Params : List<Short> Returns : void} setStates{ Params : Set<Thread.State> Returns : void} setStrings{ Params : Set<String> Returns : void} ,,,,,,,,,,y: , s
vert.x-master,io.vertx.core.cli.impl,CLIWithMultipleValues,3,2,0,0,0,false,0 ,0 ,CommandForDefaultValueTest CommandForDescriptionTest CommandForParsedAsList CommandForTypeExtractTest CommandForArgumentInjectionTest CommandForConvertedValueTest CommandForMultipleArgumentTest CommandWithDefaultValueOnArgument CLIWithSingleValue CLIWithMultipleValues ,persons: List<Person> persons2: List<Person> persons3: List<Person> states: Set<Thread.State> ints: Collection<Integer> strings: Set<String> shorts: List<Short> doubles: double persons4: List<Person> ,testHelloCLIFromClass{ Params :  Returns : void} testUsage{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDefaultValue{ Params :  Returns : void} setFoo{ Params : String Returns : void} testOptionsWithDescription{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} testOptionsParsedAsList{ Params :  Returns : void} setFoo{ Params : List<String> Returns : void} setFoo{ Params : Set<Character> Returns : void} setFoo{ Params : Collection<Integer> Returns : void} setFoo{ Params : TreeSet<String> Returns : void} setFoo{ Params : ArrayList<String> Returns : void} setFoo{ Params : int[] Returns : void} testTypeExtraction{ Params :  Returns : void} testInjectionOfString{ Params :  Returns : void} parse{ Params : CLI,String Returns : CommandLine} testSingleValueInjection{ Params :  Returns : void} testMultiValuesInjection{ Params :  Returns : void} setX{ Params : String Returns : void} testArgumentInjection{ Params :  Returns : void} setX{ Params : Person4 Returns : void} testArgumentInjectionWithConvertedByAndDefaultValue{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentInjectionWithSeveralArguments{ Params :  Returns : void} setX{ Params : String Returns : void} setY{ Params : int Returns : void} testArgumentWithDefaultValue{ Params :  Returns : void} find{ Params : List<Option>,String Returns : Option} setaBoolean{ Params : boolean Returns : void} setAcceptValueBoolean{ Params : boolean Returns : void} setaByte{ Params : byte Returns : void} setaChar{ Params : char Returns : void} setaDouble{ Params : double Returns : void} setaFloat{ Params : float Returns : void} setaLong{ Params : long Returns : void} setAnInt{ Params : int Returns : void} setAnotherBoolean{ Params : Boolean Returns : void} setAnotherByte{ Params : Byte Returns : void} setAnotherChar{ Params : Character Returns : void} setAnotherDouble{ Params : Double Returns : void} setAnotherFloat{ Params : Float Returns : void} setAnotherInt{ Params : Integer Returns : void} setAnotherLong{ Params : Long Returns : void} setAnotherPerson{ Params : Person2 Returns : void} setAnotherShort{ Params : Short Returns : void} setaPerson{ Params : Person Returns : void} setAFourthPerson{ Params : Person4 Returns : void} setaShort{ Params : short Returns : void} setaState{ Params : Thread.State Returns : void} setaString{ Params : String Returns : void} setaThirdPerson{ Params : Person3 Returns : void} setDoubles{ Params : double[] Returns : void} setInts{ Params : Collection<Integer> Returns : void} setPersons2{ Params : List<Person> Returns : void} setPersons3{ Params : List<Person> Returns : void} setPersons4{ Params : List<Person> Returns : void} setPersons{ Params : List<Person> Returns : void} setShorts{ Params : List<Short> Returns : void} setStates{ Params : Set<Thread.State> Returns : void} setStrings{ Params : Set<String> Returns : void} ,,,,,,,,,,y: , s
vert.x-master,io.vertx.core.cli.impl,DefaultCLITest,1,1,0,0,0,false,0 ,0 ,0 ,,testFlag{ Params :  Returns : void} testMissingFlag{ Params :  Returns : void} testUsageComputationWhenUsingOnlyFlagShortOption{ Params :  Returns : void} testUsageWhenNoArgsAndOptions{ Params :  Returns : void} testUsageComputationWhenUsingOnlyFlagLongOption{ Params :  Returns : void} testUsageComputationWhenUsingShortAndLongFlagOption{ Params :  Returns : void} testUsageComputationWhenUsingShortAndLongOption{ Params :  Returns : void} testUsageComputationWhenUsingOnlyShortOption{ Params :  Returns : void} testUsageComputationWhenUsingOnlyLongOption{ Params :  Returns : void} testUsageComputationWhenUsingRequiredOptionAndArgument{ Params :  Returns : void} testUsageComputationWithSeveralArguments{ Params :  Returns : void} testUsageComputationWithHiddenArguments{ Params :  Returns : void} testUsageComputationWhenUsingNotRequiredArgument{ Params :  Returns : void} testCommandLineValidationWhenValid{ Params :  Returns : void} testCommandLineValidationWhenInvalid{ Params :  Returns : void} testCommandLineValidationWhenInvalidWithValidationDisabled{ Params :  Returns : void} ,,,,,,,,,Option Option Option Option Option StringBuilder StringBuilder Option StringBuilder Option StringBuilder Option StringBuilder Option StringBuilder Option StringBuilder Option Argument StringBuilder Option Argument Argument Argument StringBuilder Option Argument Argument Argument StringBuilder Argument StringBuilder Argument Argument Argument ,commandLine: 
vert.x-master,io.vertx.core.cli.impl,DefaultParserTest,1,1,0,0,0,false,0 ,0 ,CLIUsingAHelpOption CLIUsingAEnumOption CLIUsingMultipleArgument ,cli: CLI ,setUp{ Params :  Returns : void} testWithOneLongOption{ Params :  Returns : void} testWithOneLongOptionUsingSpace{ Params :  Returns : void} testWithOneShortOption{ Params :  Returns : void} testWithOneShortOptionUsingSpace{ Params :  Returns : void} testTheDifferentFormatForLongOption{ Params :  Returns : void} testTheDifferentFormatForShortOption{ Params :  Returns : void} testWithMultipleValues{ Params :  Returns : void} testWithList{ Params :  Returns : void} testWithFlag{ Params :  Returns : void} testArguments{ Params :  Returns : void} testUnknownOption{ Params :  Returns : void} testNotFulfilledRequiredOptions{ Params :  Returns : void} testRequiredOptions{ Params :  Returns : void} testQuotedValues{ Params :  Returns : void} testNegativeNumbers{ Params :  Returns : void} testMissingValue{ Params :  Returns : void} testVertxRun{ Params :  Returns : void} testWithDashD{ Params :  Returns : void} testConcatenatedOptions{ Params :  Returns : void} testThatNonUniqueArgumentIndexAreDetected{ Params :  Returns : void} testThatOnlyTheLastArgumentCanBeMultivalued{ Params :  Returns : void} testThatOnlyOneArgumentCanBeMultivalued{ Params :  Returns : void} testWhenThereAreNoDeclaredArguments{ Params :  Returns : void} testWithArgumentReceivingMultipleValues{ Params :  Returns : void} testAnnotatedClassWithArgumentReceivingMultipleValues{ Params :  Returns : void} testWithMultipleArgumentReceivingSingleValues{ Params :  Returns : void} testWithMultipleRequiredArgument{ Params :  Returns : void} testThatArgumentIndexCanBeGenerated{ Params :  Returns : void} testThatArgumentIndexCanBeGeneratedWithPartiallyNumberedArguments{ Params :  Returns : void} testHelpOption{ Params :  Returns : void} testHelpOptionUsingAnnotation{ Params :  Returns : void} testOptionsWithChoices{ Params :  Returns : void} testOptionsWithChoicesAndDefault{ Params :  Returns : void} testOptionsWithChoicesUsingEnum{ Params :  Returns : void} testOptionsWithChoicesUsingAnnotations{ Params :  Returns : void} setHelp{ Params : boolean Returns : void} setFoo{ Params : String Returns : void} setRetention{ Params : RetentionPolicy Returns : void} setFoo{ Params : String Returns : void} setList{ Params : List<String> Returns : void} setOpts{ Params : List<String> Returns : void} testGetOptionValueWithCaseSensitivityConflict{ Params :  Returns : void} testGetOptionValueWithoutCaseSensitivityConflict{ Params :  Returns : void} ,,,,,,CLI ,,CLI ,DefaultCLI Option StringBuilder Option StringBuilder Option Option Option Option Option DefaultCLI TypedOption DefaultCLI TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption Option DefaultCLI TypedOption Option DefaultCLI TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedArgument DefaultCLI TypedOption TypedOption DefaultCLI TypedOption TypedOption TypedOption DefaultCLI Argument Argument Argument DefaultCLI Argument Argument Argument DefaultCLI Argument Argument Argument DefaultCLI DefaultCLI Argument Argument StringBuilder CLIUsingMultipleArgument DefaultCLI Argument Argument DefaultCLI Argument Argument DefaultCLI Argument Argument Argument DefaultCLI Argument Argument Argument DefaultCLI Option Option DefaultCLI Option StringBuilder DefaultCLI Option StringBuilder DefaultCLI TypedOption StringBuilder StringBuilder IllegalArgumentException IllegalArgumentException Option Option Option ,commandLine: , "LOWERCASE"
vert.x-master,io.vertx.core.cli.impl,CLIUsingAHelpOption,3,2,0,0,0,false,0 ,0 ,CLIUsingAHelpOption CLIUsingAEnumOption CLIUsingMultipleArgument ,,setUp{ Params :  Returns : void} testWithOneLongOption{ Params :  Returns : void} testWithOneLongOptionUsingSpace{ Params :  Returns : void} testWithOneShortOption{ Params :  Returns : void} testWithOneShortOptionUsingSpace{ Params :  Returns : void} testTheDifferentFormatForLongOption{ Params :  Returns : void} testTheDifferentFormatForShortOption{ Params :  Returns : void} testWithMultipleValues{ Params :  Returns : void} testWithList{ Params :  Returns : void} testWithFlag{ Params :  Returns : void} testArguments{ Params :  Returns : void} testUnknownOption{ Params :  Returns : void} testNotFulfilledRequiredOptions{ Params :  Returns : void} testRequiredOptions{ Params :  Returns : void} testQuotedValues{ Params :  Returns : void} testNegativeNumbers{ Params :  Returns : void} testMissingValue{ Params :  Returns : void} testVertxRun{ Params :  Returns : void} testWithDashD{ Params :  Returns : void} testConcatenatedOptions{ Params :  Returns : void} testThatNonUniqueArgumentIndexAreDetected{ Params :  Returns : void} testThatOnlyTheLastArgumentCanBeMultivalued{ Params :  Returns : void} testThatOnlyOneArgumentCanBeMultivalued{ Params :  Returns : void} testWhenThereAreNoDeclaredArguments{ Params :  Returns : void} testWithArgumentReceivingMultipleValues{ Params :  Returns : void} testAnnotatedClassWithArgumentReceivingMultipleValues{ Params :  Returns : void} testWithMultipleArgumentReceivingSingleValues{ Params :  Returns : void} testWithMultipleRequiredArgument{ Params :  Returns : void} testThatArgumentIndexCanBeGenerated{ Params :  Returns : void} testThatArgumentIndexCanBeGeneratedWithPartiallyNumberedArguments{ Params :  Returns : void} testHelpOption{ Params :  Returns : void} testHelpOptionUsingAnnotation{ Params :  Returns : void} testOptionsWithChoices{ Params :  Returns : void} testOptionsWithChoicesAndDefault{ Params :  Returns : void} testOptionsWithChoicesUsingEnum{ Params :  Returns : void} testOptionsWithChoicesUsingAnnotations{ Params :  Returns : void} setHelp{ Params : boolean Returns : void} setFoo{ Params : String Returns : void} setRetention{ Params : RetentionPolicy Returns : void} setFoo{ Params : String Returns : void} setList{ Params : List<String> Returns : void} setOpts{ Params : List<String> Returns : void} testGetOptionValueWithCaseSensitivityConflict{ Params :  Returns : void} testGetOptionValueWithoutCaseSensitivityConflict{ Params :  Returns : void} ,,,,,,,,,,commandLine: , "LOWERCASE"
vert.x-master,io.vertx.core.cli.impl,CLIUsingAEnumOption,3,2,0,0,0,false,0 ,0 ,CLIUsingAHelpOption CLIUsingAEnumOption CLIUsingMultipleArgument ,,setUp{ Params :  Returns : void} testWithOneLongOption{ Params :  Returns : void} testWithOneLongOptionUsingSpace{ Params :  Returns : void} testWithOneShortOption{ Params :  Returns : void} testWithOneShortOptionUsingSpace{ Params :  Returns : void} testTheDifferentFormatForLongOption{ Params :  Returns : void} testTheDifferentFormatForShortOption{ Params :  Returns : void} testWithMultipleValues{ Params :  Returns : void} testWithList{ Params :  Returns : void} testWithFlag{ Params :  Returns : void} testArguments{ Params :  Returns : void} testUnknownOption{ Params :  Returns : void} testNotFulfilledRequiredOptions{ Params :  Returns : void} testRequiredOptions{ Params :  Returns : void} testQuotedValues{ Params :  Returns : void} testNegativeNumbers{ Params :  Returns : void} testMissingValue{ Params :  Returns : void} testVertxRun{ Params :  Returns : void} testWithDashD{ Params :  Returns : void} testConcatenatedOptions{ Params :  Returns : void} testThatNonUniqueArgumentIndexAreDetected{ Params :  Returns : void} testThatOnlyTheLastArgumentCanBeMultivalued{ Params :  Returns : void} testThatOnlyOneArgumentCanBeMultivalued{ Params :  Returns : void} testWhenThereAreNoDeclaredArguments{ Params :  Returns : void} testWithArgumentReceivingMultipleValues{ Params :  Returns : void} testAnnotatedClassWithArgumentReceivingMultipleValues{ Params :  Returns : void} testWithMultipleArgumentReceivingSingleValues{ Params :  Returns : void} testWithMultipleRequiredArgument{ Params :  Returns : void} testThatArgumentIndexCanBeGenerated{ Params :  Returns : void} testThatArgumentIndexCanBeGeneratedWithPartiallyNumberedArguments{ Params :  Returns : void} testHelpOption{ Params :  Returns : void} testHelpOptionUsingAnnotation{ Params :  Returns : void} testOptionsWithChoices{ Params :  Returns : void} testOptionsWithChoicesAndDefault{ Params :  Returns : void} testOptionsWithChoicesUsingEnum{ Params :  Returns : void} testOptionsWithChoicesUsingAnnotations{ Params :  Returns : void} setHelp{ Params : boolean Returns : void} setFoo{ Params : String Returns : void} setRetention{ Params : RetentionPolicy Returns : void} setFoo{ Params : String Returns : void} setList{ Params : List<String> Returns : void} setOpts{ Params : List<String> Returns : void} testGetOptionValueWithCaseSensitivityConflict{ Params :  Returns : void} testGetOptionValueWithoutCaseSensitivityConflict{ Params :  Returns : void} ,,,,,,,,,,commandLine: , "LOWERCASE"
vert.x-master,io.vertx.core.cli.impl,CLIUsingMultipleArgument,3,2,0,0,0,false,0 ,0 ,CLIUsingAHelpOption CLIUsingAEnumOption CLIUsingMultipleArgument ,,setUp{ Params :  Returns : void} testWithOneLongOption{ Params :  Returns : void} testWithOneLongOptionUsingSpace{ Params :  Returns : void} testWithOneShortOption{ Params :  Returns : void} testWithOneShortOptionUsingSpace{ Params :  Returns : void} testTheDifferentFormatForLongOption{ Params :  Returns : void} testTheDifferentFormatForShortOption{ Params :  Returns : void} testWithMultipleValues{ Params :  Returns : void} testWithList{ Params :  Returns : void} testWithFlag{ Params :  Returns : void} testArguments{ Params :  Returns : void} testUnknownOption{ Params :  Returns : void} testNotFulfilledRequiredOptions{ Params :  Returns : void} testRequiredOptions{ Params :  Returns : void} testQuotedValues{ Params :  Returns : void} testNegativeNumbers{ Params :  Returns : void} testMissingValue{ Params :  Returns : void} testVertxRun{ Params :  Returns : void} testWithDashD{ Params :  Returns : void} testConcatenatedOptions{ Params :  Returns : void} testThatNonUniqueArgumentIndexAreDetected{ Params :  Returns : void} testThatOnlyTheLastArgumentCanBeMultivalued{ Params :  Returns : void} testThatOnlyOneArgumentCanBeMultivalued{ Params :  Returns : void} testWhenThereAreNoDeclaredArguments{ Params :  Returns : void} testWithArgumentReceivingMultipleValues{ Params :  Returns : void} testAnnotatedClassWithArgumentReceivingMultipleValues{ Params :  Returns : void} testWithMultipleArgumentReceivingSingleValues{ Params :  Returns : void} testWithMultipleRequiredArgument{ Params :  Returns : void} testThatArgumentIndexCanBeGenerated{ Params :  Returns : void} testThatArgumentIndexCanBeGeneratedWithPartiallyNumberedArguments{ Params :  Returns : void} testHelpOption{ Params :  Returns : void} testHelpOptionUsingAnnotation{ Params :  Returns : void} testOptionsWithChoices{ Params :  Returns : void} testOptionsWithChoicesAndDefault{ Params :  Returns : void} testOptionsWithChoicesUsingEnum{ Params :  Returns : void} testOptionsWithChoicesUsingAnnotations{ Params :  Returns : void} setHelp{ Params : boolean Returns : void} setFoo{ Params : String Returns : void} setRetention{ Params : RetentionPolicy Returns : void} setFoo{ Params : String Returns : void} setList{ Params : List<String> Returns : void} setOpts{ Params : List<String> Returns : void} testGetOptionValueWithCaseSensitivityConflict{ Params :  Returns : void} testGetOptionValueWithoutCaseSensitivityConflict{ Params :  Returns : void} ,,,,,,,,,IllegalArgumentException IllegalArgumentException ,s: 
vert.x-master,io.vertx.core.cli.impl,HelloClI,1,1,0,0,0,false,0 ,0 ,0 ,called: boolean name: String ,setTheName{ Params : String Returns : void} run{ Params :  Returns : String} ,,,,,,,,,,s: 
vert.x-master,io.vertx.core.cli.impl,IntensiveDefaultParserTest,1,1,0,0,0,false,0 ,0 ,0 ,cli: DefaultCLI ,setUp{ Params :  Returns : void} getBooleanOption{ Params : CommandLine,String Returns : boolean} getStringOption{ Params : CommandLine,String Returns : String} testSimpleShort{ Params :  Returns : void} testSimpleLong{ Params :  Returns : void} testArgumentsInTheMiddle{ Params :  Returns : void} testUnrecognizedOption{ Params :  Returns : void} testMissingValue{ Params :  Returns : void} testDoubleDash1{ Params :  Returns : void} testMissingValueBecauseOfDoubleDash{ Params :  Returns : void} testSingleDash{ Params :  Returns : void} testNegativeArgument{ Params :  Returns : void} testNegativeOption{ Params :  Returns : void} testArgumentStartingWithHyphen{ Params :  Returns : void} testShortWithEqual{ Params :  Returns : void} testShortWithoutEqual{ Params :  Returns : void} testLongWithEqualDoubleDash{ Params :  Returns : void} testLongWithEqualSingleDash{ Params :  Returns : void} testLongWithoutEqualSingleDash{ Params :  Returns : void} testAmbiguousLongWithoutEqualSingleDash{ Params :  Returns : void} testLongWithoutEqualDoubleDash{ Params :  Returns : void} testLongWithUnexpectedArgument1{ Params :  Returns : void} testLongWithUnexpectedArgument2{ Params :  Returns : void} testShortWithUnexpectedArgument{ Params :  Returns : void} testPropertiesOption1{ Params :  Returns : void} testUnambiguousPartialLongOption1{ Params :  Returns : void} testUnambiguousPartialLongOption2{ Params :  Returns : void} testUnambiguousPartialLongOption3{ Params :  Returns : void} testUnambiguousPartialLongOption4{ Params :  Returns : void} testAmbiguousPartialLongOption1{ Params :  Returns : void} testAmbiguousPartialLongOption2{ Params :  Returns : void} testAmbiguousPartialLongOption3{ Params :  Returns : void} testAmbiguousPartialLongOption4{ Params :  Returns : void} testPartialLongOptionSingleDash{ Params :  Returns : void} testWithRequiredOption{ Params :  Returns : void} testOptionAndRequiredOption{ Params :  Returns : void} testMissingRequiredOption{ Params :  Returns : void} testMissingRequiredOptions{ Params :  Returns : void} testBursting{ Params :  Returns : void} testUnrecognizedOptionWithBursting{ Params :  Returns : void} testMissingArgWithBursting{ Params :  Returns : void} testMultiValues{ Params :  Returns : void} ,,,,,,DefaultCLI ,,DefaultCLI ,DefaultCLI TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption TypedOption ,evaluated: , "f"
vert.x-master,io.vertx.core.cli.impl,TypedArgumentTest,1,1,0,0,0,false,0 ,0 ,0 ,cli: CLI evaluated: CommandLine ,setUp{ Params :  Returns : void} testThatArgumentWithTheSameIndexAreDetected{ Params :  Returns : void} testThatMissingArgumentsAreDetected{ Params :  Returns : void} testMixedOfRequiredAnOptionalArguments{ Params :  Returns : void} testThatArgumentsAreOrdered{ Params :  Returns : void} testThatDefaultValuesAreHandled{ Params :  Returns : void} testThatInvalidValuesAreReported{ Params :  Returns : void} testThatInvalidValuesAsDefaultValueAreReported{ Params :  Returns : void} testThatConvertersAreHandled{ Params :  Returns : void} ,,,,,,CommandLine ,,CommandLine ,DefaultCLI TypedArgument TypedArgument TypedArgument TypedArgument TypedArgument TypedArgument TypedArgument TypedArgument TypedArgument TypedArgument TypedArgument TypedArgument TypedArgument ,: , person.last
vert.x-master,io.vertx.core.cli,OptionTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,createAndCopy{ Params :  Returns : void} ,,,,,,,,,Option Option Option ,option: 
vert.x-master,io.vertx.core,ComplexHATest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,random: Random maxVerticlesPerNode: int deploymentSnapshots: Set<Deployment> totDeployed: int killedNode: int aliveNodes: List<Integer> ,getClusterManager{ Params :  Returns : ClusterManager} setUp{ Params :  Returns : void} testComplexFailover{ Params :  Returns : void} deployRandomVerticles{ Params : Runnable Returns : void} undeployRandomVerticles{ Params : Runnable Returns : void} eventLoopWaitUntil{ Params : BooleanSupplier,Runnable Returns : void} takeDeploymentSnapshots{ Params :  Returns : void} takeDeploymentSnapshot{ Params : int Returns : Set<Deployment>} kill{ Params : int Returns : void} createNodes{ Params : int Returns : void} failedOverOnto{ Params : int Returns : void} checkDeployments{ Params :  Returns : void} checkHasDeployments{ Params : int,int Returns : int} killRandom{ Params :  Returns : void} ,,,,,,,,,FakeClusterManager Random AtomicInteger ArrayList JsonObject DeploymentOptions AtomicInteger ArrayList Thread ConcurrentHashSet VertxOptions CopyOnWriteArrayList ,: , pos
vert.x-master,io.vertx.core,CompositeFutureTest,1,1,0,0,0,false,FutureTestBase ,0 ,0 ,NUM_THREADS: int MIXED: BiConsumer<Integer, Promise<String>> SUCCESS: BiConsumer<Integer, Promise<String>> FAILURE: BiConsumer<Integer, Promise<String>> ,testConcurrentAllSuccess{ Params :  Returns : void} testConcurrentAllFailure{ Params :  Returns : void} testConcurrentAllMixed{ Params :  Returns : void} testConcurrentAnySuccess{ Params :  Returns : void} testConcurrentAnyFailure{ Params :  Returns : void} testConcurrentAnyMixed{ Params :  Returns : void} tesConcurrenttJoinSuccess{ Params :  Returns : void} testConcurrentJoinFailure{ Params :  Returns : void} testConcurrentJoinMixed{ Params :  Returns : void} testConcurrentCompletion{ Params : BiConsumer<Integer,Promise<String>>,Function<List<Future<?>>,CompositeFuture>,Consumer<CompositeFuture> Returns : void} testAllSucceeded{ Params :  Returns : void} testAllSucceededWithList{ Params :  Returns : void} testAllSucceeded{ Params : BiFunction<Future<String>,Future<Integer>,CompositeFuture> Returns : void} testAllWithEmptyList{ Params :  Returns : void} testAllFailed{ Params :  Returns : void} testAllFailedWithList{ Params :  Returns : void} testAllFailed{ Params : BiFunction<Future<String>,Future<Integer>,CompositeFuture> Returns : void} testAllLargeList{ Params :  Returns : void} testAllLargeList{ Params : int Returns : void} testAnySucceeded1{ Params :  Returns : void} testAnySucceeded1WithList{ Params :  Returns : void} testAnySucceeded1{ Params : BiFunction<Future<String>,Future<Integer>,CompositeFuture> Returns : void} testAnyWithEmptyList{ Params :  Returns : void} testAnySucceeded2{ Params :  Returns : void} testAnySucceeded2WithList{ Params :  Returns : void} testAnySucceeded2{ Params : BiFunction<Future<String>,Future<Integer>,CompositeFuture> Returns : void} testAnyFailed{ Params :  Returns : void} testAnyFailedWithList{ Params :  Returns : void} testAnyFailed{ Params : BiFunction<Future<String>,Future<Integer>,CompositeFuture> Returns : void} testAnyLargeList{ Params :  Returns : void} testAnyLargeList{ Params : int Returns : void} testJoinSucceeded{ Params :  Returns : void} testJoinSucceededWithList{ Params :  Returns : void} testJoinSucceeded{ Params : BiFunction<Future<String>,Future<Integer>,CompositeFuture> Returns : void} testJoinFailed1{ Params :  Returns : void} testJoinFailed1WithList{ Params :  Returns : void} testJoinFailed1{ Params : BiFunction<Future<String>,Future<Integer>,CompositeFuture> Returns : void} testJoinFailed2{ Params :  Returns : void} testJoinFailed2WithList{ Params :  Returns : void} testJoinFailed2{ Params : BiFunction<Future<String>,Future<Integer>,CompositeFuture> Returns : void} testJoinFailed3{ Params :  Returns : void} testJoinFailed3WithList{ Params :  Returns : void} testJoinFailed3{ Params : BiFunction<Future<String>,Future<Integer>,CompositeFuture> Returns : void} testJoinWithEmptyList{ Params :  Returns : void} testCompositeFutureToList{ Params :  Returns : void} testCompositeFutureCauses{ Params :  Returns : void} testCompositeFutureMulti{ Params :  Returns : void} testIndexOutOfBounds{ Params : ThrowingCallable Returns : void} testIndexOutOfBounds{ Params :  Returns : void} testToString{ Params :  Returns : void} ,,,,,,,,,CyclicBarrier Checker Checker Exception ArrayList Checker Exception Checker Checker Checker Checker Exception ArrayList Exception Checker RuntimeException Checker Checker Checker Throwable Checker Throwable Checker Throwable Throwable AtomicInteger ,Future: , false
vert.x-master,io.vertx.core,ContextTaskTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,workerExecutor: ExecutorService ,exec{ Params : ContextInternal,Handler<Void> Returns : void} exec{ Params : ContextInternal,Handler<Void> Returns : void} exec{ Params : ContextInternal,Handler<Void> Returns : void} setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} createEventLoopContext{ Params :  Returns : ContextInternal} createWorkerContext{ Params :  Returns : ContextInternal} testEventLoopDispatchFromSameContext{ Params :  Returns : void} testEventLoopScheduleFromSameContext{ Params :  Returns : void} testWorkerDispatchFromSameContext{ Params :  Returns : void} testWorkerScheduleFromSameContext{ Params :  Returns : void} testOpFromSameContext{ Params : Op,Supplier<ContextInternal> Returns : void} testEventLoopDispatchFromSameEventLoop{ Params :  Returns : void} testEventLoopScheduleFromSameEventLoop{ Params :  Returns : void} testWorkerDispatchFromSameEventLoop{ Params :  Returns : void} testWorkerScheduleFromSameEventLoop{ Params :  Returns : void} testWorkerEmitFromSameEventLoop{ Params :  Returns : void} testOpFromSameEventLoop{ Params : Op,Supplier<ContextInternal> Returns : void} testEventLoopDispatchFromAnotherEventLoop{ Params :  Returns : void} testEventLoopScheduleFromAnotherEventLoop{ Params :  Returns : void} testWorkerDispatchFromAnotherEventLoop{ Params :  Returns : void} testWorkerScheduleFromAnotherEventLoop{ Params :  Returns : void} testOpFromAnotherEventLoop{ Params : BiConsumer<ContextInternal,Handler<Void>>,Supplier<ContextInternal>,boolean Returns : void} testEventLoopDispatchFromSchedule{ Params :  Returns : void} testEventLoopScheduleFromSchedule{ Params :  Returns : void} testWorkerDispatchFromSchedule{ Params :  Returns : void} testWorkerScheduleFromSchedule{ Params :  Returns : void} testOpFromSameSchedule{ Params : Op,Supplier<ContextInternal> Returns : void} testEventLoopDispatchFromAnotherThread{ Params :  Returns : void} testEventLoopScheduleFromAnotherThread{ Params :  Returns : void} testWorkerDispatchFromAnotherThread{ Params :  Returns : void} testWorkerScheduleFromAnotherThread{ Params :  Returns : void} testOpFromAnotherThread{ Params : BiConsumer<ContextInternal,Handler<Void>>,Supplier<ContextInternal>,boolean Returns : void} ,exec exec setUp tearDown ,,,exec ,,ExecutorService ,,ExecutorService ,VertxThread WorkerPool AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean ,: 
vert.x-master,io.vertx.core,ContextTest,1,1,0,0,0,false,VertxTestBase ,0 ,SomeObject ,workerExecutor: ExecutorService ,createWorkerContext{ Params :  Returns : ContextInternal} setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testRunOnContext{ Params :  Returns : void} run{ Params :  Returns : void} testNoContext{ Params :  Returns : void} testPutGetRemoveData{ Params :  Returns : void} testGettingContextContextUnderContextAnotherInstanceShouldReturnDifferentContext{ Params :  Returns : void} testExecuteOrderedBlocking{ Params :  Returns : void} testExecuteUnorderedBlocking{ Params :  Returns : void} testExecuteBlockingThreadSyncComplete{ Params :  Returns : void} testExecuteBlockingThreadAsyncComplete{ Params :  Returns : void} testContextExceptionHandler{ Params :  Returns : void} testContextExceptionHandlerFailing{ Params :  Returns : void} testDefaultContextExceptionHandler{ Params :  Returns : void} testExceptionHandlerOnDeploymentAsyncResultHandlerFailure{ Params :  Returns : void} start{ Params :  Returns : void} testExceptionHandlerOnAsyncDeploymentAsyncResultHandlerFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testVerticleUseDifferentExecuteBlockingOrderedExecutor{ Params :  Returns : void} testWorkerVerticleUseDifferentExecuteBlockingOrderedExecutor{ Params :  Returns : void} testVerticleUseDifferentOrderedExecutor{ Params : boolean Returns : void} start{ Params :  Returns : void} start{ Params :  Returns : void} testInternalExecuteBlockingWithQueue{ Params :  Returns : void} testInternalExecuteBlockingWithQueue{ Params : List<Consumer<Handler<Promise<Object>>>> Returns : void} testEventLoopContextDispatchReportsFailure{ Params :  Returns : void} testWorkerContextDispatchReportsFailure{ Params :  Returns : void} testReportExceptionToContext{ Params :  Returns : void} testDuplicate{ Params :  Returns : void} testDuplicateWorker{ Params :  Returns : void} testDuplicateTwice{ Params :  Returns : void} checkDuplicate{ Params : ContextInternal,ContextInternal Returns : void} testDuplicateWorkerConcurrency{ Params :  Returns : void} testDuplicateWorkerConcurrency{ Params : BiConsumer<ContextInternal,Runnable> Returns : void} testEventLoopExecuteBlockingOrdered{ Params :  Returns : void} testWorkerExecuteBlockingOrdered{ Params :  Returns : void} testEventLoopExecuteBlockingUnordered{ Params :  Returns : void} testWorkerExecuteBlockingUnordered{ Params :  Returns : void} testDuplicateEventLoopExecuteBlockingOrdered{ Params :  Returns : void} testDuplicateWorkerExecuteBlockingOrdered{ Params :  Returns : void} testDuplicateEventLoopExecuteBlockingUnordered{ Params :  Returns : void} testDuplicateWorkerExecuteBlockingUnordered{ Params :  Returns : void} testDuplicateExecuteBlocking{ Params : Supplier<ContextInternal>,boolean Returns : void} testReentrantDispatch{ Params :  Returns : void} testEventLoopContextPromiseReentrantSuccess{ Params :  Returns : void} testEventLoopContextPromiseReentrantCompletion{ Params : Consumer<Promise<String>> Returns : void} testEventLoopContextPromiseReentrantFailingSuccess{ Params :  Returns : void} testEventLoopContextPromiseReentrantFailingFailure{ Params :  Returns : void} testEventLoopContextPromiseReentrantFailingCompletion{ Params : Consumer<Promise<String>> Returns : void} testEventLoopContextPromiseSucceededByAnotherEventLoopThread{ Params :  Returns : void} testEventLoopContextPromiseFailedByAnotherEventLoopThread{ Params :  Returns : void} testEventLoopContextPromiseCompletedByAnotherEventLoopThread{ Params : Consumer<Promise<String>> Returns : void} testEventLoopContextPromiseSucceededByWorkerThread{ Params :  Returns : void} testEventLoopContextPromiseFailedByWorkerThread{ Params :  Returns : void} testEventLoopContextPromiseCompletedByWorkerThread{ Params : Consumer<Promise<String>> Returns : void} testEventLoopContextPromiseSucceededByNonVertxThread{ Params :  Returns : void} testEventLoopContextPromiseFailedByNonVertxThread{ Params :  Returns : void} testEventLoopContextPromiseCompletedByNonVertxThread{ Params : Consumer<Promise<String>> Returns : void} testEventLoopContextPromiseListenerSuccess{ Params :  Returns : void} testEventLoopContextPromiseListenerFailure{ Params :  Returns : void} testEventLoopContextPromiseListenerCompletion{ Params : Consumer<io.netty.util.concurrent.Promise<String>> Returns : void} testComposeContextPropagation1{ Params :  Returns : void} testComposeContextPropagation2{ Params :  Returns : void} testComposeContextPropagation3{ Params :  Returns : void} testSucceededFutureContextPropagation1{ Params :  Returns : void} testSucceededFutureContextPropagation2{ Params :  Returns : void} testFailedFutureContextPropagation1{ Params :  Returns : void} testFailedFutureContextPropagation2{ Params :  Returns : void} testSticky{ Params :  Returns : void} testUnwrapPromiseWithoutContext{ Params :  Returns : void} testTopLevelContextClassLoader{ Params :  Returns : void} testIsDuplicatedContext{ Params :  Returns : void} testIsDuplicatedContextFromWorkerContext{ Params :  Returns : void} testDispatchContextOnAnyThread{ Params :  Returns : void} ,setUp tearDown start start start start ,,,,,ExecutorService ,,ExecutorService ,CloseFuture WorkerPool VertxThread Thread SomeObject Thread RuntimeException RuntimeException AtomicInteger RuntimeException RuntimeException RuntimeException RuntimeException AbstractVerticle RuntimeException AbstractVerticle CountDownLatch CountDownLatch AbstractVerticle DeploymentOptions CountDownLatch AbstractVerticle DeploymentOptions ArrayList TaskQueue AtomicReference CyclicBarrier CountDownLatch RuntimeException AtomicReference Object RuntimeException AtomicReference Object RuntimeException AtomicReference Object Object CountDownLatch CountDownLatch Throwable CountDownLatch CountDownLatch AtomicBoolean CountDownLatch AtomicInteger URLClassLoader Exception ArrayList RuntimeException Exception Exception Exception Thread Exception ArrayList Object URLClassLoader URLClassLoader URLClassLoader FakeContext FakeContext AtomicInteger ,exec: 
vert.x-master,io.vertx.core,SomeObject,3,0,0,0,0,false,VertxTestBase ,0 ,SomeObject ,,createWorkerContext{ Params :  Returns : ContextInternal} setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testRunOnContext{ Params :  Returns : void} run{ Params :  Returns : void} testNoContext{ Params :  Returns : void} testPutGetRemoveData{ Params :  Returns : void} testGettingContextContextUnderContextAnotherInstanceShouldReturnDifferentContext{ Params :  Returns : void} testExecuteOrderedBlocking{ Params :  Returns : void} testExecuteUnorderedBlocking{ Params :  Returns : void} testExecuteBlockingThreadSyncComplete{ Params :  Returns : void} testExecuteBlockingThreadAsyncComplete{ Params :  Returns : void} testContextExceptionHandler{ Params :  Returns : void} testContextExceptionHandlerFailing{ Params :  Returns : void} testDefaultContextExceptionHandler{ Params :  Returns : void} testExceptionHandlerOnDeploymentAsyncResultHandlerFailure{ Params :  Returns : void} start{ Params :  Returns : void} testExceptionHandlerOnAsyncDeploymentAsyncResultHandlerFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testVerticleUseDifferentExecuteBlockingOrderedExecutor{ Params :  Returns : void} testWorkerVerticleUseDifferentExecuteBlockingOrderedExecutor{ Params :  Returns : void} testVerticleUseDifferentOrderedExecutor{ Params : boolean Returns : void} start{ Params :  Returns : void} start{ Params :  Returns : void} testInternalExecuteBlockingWithQueue{ Params :  Returns : void} testInternalExecuteBlockingWithQueue{ Params : List<Consumer<Handler<Promise<Object>>>> Returns : void} testEventLoopContextDispatchReportsFailure{ Params :  Returns : void} testWorkerContextDispatchReportsFailure{ Params :  Returns : void} testReportExceptionToContext{ Params :  Returns : void} testDuplicate{ Params :  Returns : void} testDuplicateWorker{ Params :  Returns : void} testDuplicateTwice{ Params :  Returns : void} checkDuplicate{ Params : ContextInternal,ContextInternal Returns : void} testDuplicateWorkerConcurrency{ Params :  Returns : void} testDuplicateWorkerConcurrency{ Params : BiConsumer<ContextInternal,Runnable> Returns : void} testEventLoopExecuteBlockingOrdered{ Params :  Returns : void} testWorkerExecuteBlockingOrdered{ Params :  Returns : void} testEventLoopExecuteBlockingUnordered{ Params :  Returns : void} testWorkerExecuteBlockingUnordered{ Params :  Returns : void} testDuplicateEventLoopExecuteBlockingOrdered{ Params :  Returns : void} testDuplicateWorkerExecuteBlockingOrdered{ Params :  Returns : void} testDuplicateEventLoopExecuteBlockingUnordered{ Params :  Returns : void} testDuplicateWorkerExecuteBlockingUnordered{ Params :  Returns : void} testDuplicateExecuteBlocking{ Params : Supplier<ContextInternal>,boolean Returns : void} testReentrantDispatch{ Params :  Returns : void} testEventLoopContextPromiseReentrantSuccess{ Params :  Returns : void} testEventLoopContextPromiseReentrantCompletion{ Params : Consumer<Promise<String>> Returns : void} testEventLoopContextPromiseReentrantFailingSuccess{ Params :  Returns : void} testEventLoopContextPromiseReentrantFailingFailure{ Params :  Returns : void} testEventLoopContextPromiseReentrantFailingCompletion{ Params : Consumer<Promise<String>> Returns : void} testEventLoopContextPromiseSucceededByAnotherEventLoopThread{ Params :  Returns : void} testEventLoopContextPromiseFailedByAnotherEventLoopThread{ Params :  Returns : void} testEventLoopContextPromiseCompletedByAnotherEventLoopThread{ Params : Consumer<Promise<String>> Returns : void} testEventLoopContextPromiseSucceededByWorkerThread{ Params :  Returns : void} testEventLoopContextPromiseFailedByWorkerThread{ Params :  Returns : void} testEventLoopContextPromiseCompletedByWorkerThread{ Params : Consumer<Promise<String>> Returns : void} testEventLoopContextPromiseSucceededByNonVertxThread{ Params :  Returns : void} testEventLoopContextPromiseFailedByNonVertxThread{ Params :  Returns : void} testEventLoopContextPromiseCompletedByNonVertxThread{ Params : Consumer<Promise<String>> Returns : void} testEventLoopContextPromiseListenerSuccess{ Params :  Returns : void} testEventLoopContextPromiseListenerFailure{ Params :  Returns : void} testEventLoopContextPromiseListenerCompletion{ Params : Consumer<io.netty.util.concurrent.Promise<String>> Returns : void} testComposeContextPropagation1{ Params :  Returns : void} testComposeContextPropagation2{ Params :  Returns : void} testComposeContextPropagation3{ Params :  Returns : void} testSucceededFutureContextPropagation1{ Params :  Returns : void} testSucceededFutureContextPropagation2{ Params :  Returns : void} testFailedFutureContextPropagation1{ Params :  Returns : void} testFailedFutureContextPropagation2{ Params :  Returns : void} testSticky{ Params :  Returns : void} testUnwrapPromiseWithoutContext{ Params :  Returns : void} testTopLevelContextClassLoader{ Params :  Returns : void} testIsDuplicatedContext{ Params :  Returns : void} testIsDuplicatedContextFromWorkerContext{ Params :  Returns : void} testDispatchContextOnAnyThread{ Params :  Returns : void} ,setUp tearDown start start start start ,,,,,,,,,null
vert.x-master,io.vertx.core,ConversionHelperTest,1,1,0,0,0,false,0 ,0 ,0 ,,testToJsonObject{ Params :  Returns : void} testToJsonArray{ Params :  Returns : void} testToString{ Params :  Returns : void} testToObject{ Params :  Returns : void} testFromJsonObject{ Params :  Returns : void} testFromJsonArray{ Params :  Returns : void} testWrapObject{ Params :  Returns : void} ,,,,,,,,,HashMap AsciiString BigInteger String JsonObject JsonArray ArrayList AsciiString BigInteger String JsonObject JsonArray AsciiString Object JsonObject JsonObject JsonArray String JsonArray JsonObject JsonArray String JsonObject JsonObject JsonArray JsonObject ,theList: , 0
vert.x-master,io.vertx.core,CreateVertxTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testCreateSimpleVertx{ Params :  Returns : void} testCreateVertxWithOptions{ Params :  Returns : void} testCreateClusteredVertxAsync{ Params :  Returns : void} testCreateClusteredVertxAsyncDetectJoinFailure{ Params :  Returns : void} join{ Params : Promise<Void> Returns : void} ,join ,,,,,,,,VertxOptions VertxOptions VertxOptions FakeClusterManager ,: 
vert.x-master,io.vertx.core,CustomerLauncherLowMemoryTest,1,1,0,0,0,false,0 ,0 ,Launcher Verticle ,MSG_HOOK: String process: Process output: File ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testCloseHookInvoked{ Params :  Returns : void} startExternalProcess{ Params :  Returns : void} stopExternalProcess{ Params :  Returns : void} outputContains{ Params : String Returns : boolean} main{ Params : String[] Returns : void} beforeStoppingVertx{ Params : Vertx Returns : void} start{ Params :  Returns : void} ,beforeStoppingVertx start ,main ,,,,File ,,File ,ArrayList ProcessBuilder AtomicBoolean Thread RuntimeException Launcher ArrayList ,output: 
vert.x-master,io.vertx.core,Launcher,3,1,0,1,0,false,0 ,0 ,Launcher Verticle ,,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testCloseHookInvoked{ Params :  Returns : void} startExternalProcess{ Params :  Returns : void} stopExternalProcess{ Params :  Returns : void} outputContains{ Params : String Returns : boolean} main{ Params : String[] Returns : void} beforeStoppingVertx{ Params : Vertx Returns : void} start{ Params :  Returns : void} ,beforeStoppingVertx start ,main ,,,,,,,Launcher ,System.out: , MSG_HOOK
vert.x-master,io.vertx.core,Verticle,3,1,0,1,0,false,0 ,0 ,Launcher Verticle ,runtime: Runtime arrays: List<byte[]> ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testCloseHookInvoked{ Params :  Returns : void} startExternalProcess{ Params :  Returns : void} stopExternalProcess{ Params :  Returns : void} outputContains{ Params : String Returns : boolean} main{ Params : String[] Returns : void} beforeStoppingVertx{ Params : Vertx Returns : void} start{ Params :  Returns : void} ,beforeStoppingVertx start ,main ,,,,List<byte[]> ,,List<byte[]> ,ArrayList ,ar1: 
vert.x-master,io.vertx.core,CustomMetricsFactory,1,1,0,0,0,false,0 ,VertxMetricsFactory ,0 ,,metrics{ Params : VertxOptions Returns : VertxMetrics} newOptions{ Params :  Returns : MetricsOptions} newOptions{ Params : JsonObject Returns : MetricsOptions} ,metrics newOptions newOptions ,,,,VertxMetricsFactory ,,,,CustomMetricsOptions CustomMetricsOptions ,ar1: 
vert.x-master,io.vertx.core,CustomMetricsOptions,1,1,0,0,0,false,MetricsOptions ,0 ,0 ,value: String nestedOptions: NestedMetricsOptions ,getCustomProperty{ Params :  Returns : String} setCustomProperty{ Params : String Returns : void} getNestedOptions{ Params :  Returns : NestedMetricsOptions} setNestedOptions{ Params : NestedMetricsOptions Returns : void} ,,,,,,NestedMetricsOptions ,,NestedMetricsOptions ,NestedMetricsOptions ,ar1: 
vert.x-master,io.vertx.core.datagram,DatagramTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,peer1: DatagramSocket peer2: DatagramSocket ,tearDown{ Params :  Returns : void} testDatagramSocket{ Params :  Returns : void} testSendReceive{ Params :  Returns : void} testSendReceiveLargePacket{ Params :  Returns : void} testSender{ Params :  Returns : void} testListenHostPort{ Params :  Returns : void} testListenPort{ Params :  Returns : void} testListenInetSocketAddress{ Params :  Returns : void} testListenSamePortMultipleTimes{ Params :  Returns : void} testEcho{ Params :  Returns : void} testSendAfterCloseFails{ Params :  Returns : void} testBroadcast{ Params :  Returns : void} testBroadcastFailsIfNotConfigured{ Params :  Returns : void} testPause{ Params :  Returns : void} testMulticastJoinLeave{ Params :  Returns : void} testMulticastJoinLeaveReuseMulticastNetworkInterface{ Params :  Returns : void} testMulticastJoinLeaveBindOnMulticastGroup{ Params :  Returns : void} testMulticastJoinLeave{ Params : String,DatagramSocketOptions,DatagramSocketOptions,BiConsumer<String,Handler<AsyncResult<Void>>>,BiConsumer<String,Handler<AsyncResult<Void>>> Returns : void} testMulticastJoinWithoutNetworkInterface{ Params :  Returns : void} testMulticastLeaveWithoutNetworkInterface{ Params :  Returns : void} testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testCopyOptionsJson{ Params :  Returns : void} testOptionsCopied{ Params :  Returns : void} testNoLogging{ Params :  Returns : void} testSendLogging{ Params :  Returns : void} testListenLogging{ Params :  Returns : void} testLogging{ Params : DatagramSocketOptions,DatagramSocketOptions Returns : TestLoggerFactory} testWorker{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} ,start ,,,,,DatagramSocket ,,DatagramSocket ,CountDownLatch DatagramSocketOptions CountDownLatch DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions AtomicBoolean AtomicBoolean DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions Random DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions JsonObject Random JsonObject DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions DatagramSocketOptions AbstractVerticle DatagramSocketOptions DeploymentOptions DatagramSocketOptions ,: 
vert.x-master,io.vertx.core,DeploymentTest,1,1,0,0,0,false,VertxTestBase ,0 ,ParentVerticle ChildVerticle MyVerticle ReferenceSavingMyVerticle MyAsyncVerticle ,,setUp{ Params :  Returns : void} testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} testToJson{ Params :  Returns : void} testDeployFromTestThread{ Params :  Returns : void} testDeployFromTestThreadNoHandler{ Params :  Returns : void} testDeployWithConfig{ Params :  Returns : void} testDeployFromContext{ Params :  Returns : void} testDeployWorkerFromTestThread{ Params :  Returns : void} testDeployWorkerWithConfig{ Params :  Returns : void} testWorkerRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testStandardRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testDeployFromContextExceptionInStart{ Params :  Returns : void} testDeployFromContextErrorInStart{ Params :  Returns : void} testDeployFromThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testDeployFromContextExceptionInStop{ Params :  Returns : void} testDeployFromContextErrorInStop{ Params :  Returns : void} testDeployFromContextThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testUndeploy{ Params :  Returns : void} testUndeployNoHandler{ Params :  Returns : void} testUndeployTwice{ Params :  Returns : void} testUndeployInvalidID{ Params :  Returns : void} testDeployExceptionInStart{ Params :  Returns : void} testDeployErrorInStart{ Params :  Returns : void} testDeployThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testUndeployExceptionInStop{ Params :  Returns : void} testUndeployErrorInStop{ Params :  Returns : void} testUndeployThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testDeployUndeployMultiple{ Params :  Returns : void} testDeployInstanceSetInstances{ Params :  Returns : void} testDeployUsingClassName{ Params :  Returns : void} testDeployUsingClassAndConfig{ Params :  Returns : void} testDeployUsingClassFails{ Params :  Returns : void} testDeployUndeployMultipleInstancesUsingClassName{ Params :  Returns : void} testDeployClassNotFound1{ Params :  Returns : void} testDeployClassNotFound2{ Params :  Returns : void} testDeployClassNotFound{ Params : String Returns : void} testDeployAsSource{ Params :  Returns : void} testSimpleChildDeployment{ Params :  Returns : void} testSimpleChildUndeploymentOrder{ Params :  Returns : void} testSimpleChildUndeploymentOnParentAsyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentOnParentSyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentDeployedAfterParentFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} testAsyncDeployCalledSynchronously{ Params :  Returns : void} testAsyncDeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncDeploy{ Params :  Returns : void} testAsyncDeployFailure{ Params :  Returns : void} testAsyncUndeployCalledSynchronously{ Params :  Returns : void} testAsyncUndeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncUndeploy{ Params :  Returns : void} testAsyncUndeployFailure{ Params :  Returns : void} testAsyncUndeployFailsAfterSuccess{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testChildUndeployedDirectly{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testCloseHooksCalled{ Params :  Returns : void} testDeployWhenClosedShouldFail{ Params :  Returns : void} createClassOutsideClasspath{ Params : String Returns : String} start{ Params : Promise<Void> Returns : void} testUndeployAll{ Params :  Returns : void} testDeployChildOnParentUndeploy{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testUndeployAllFailureInUndeploy{ Params :  Returns : void} testUndeployAllNoDeployments{ Params :  Returns : void} testGetInstanceCount{ Params :  Returns : void} start{ Params :  Returns : void} testGetInstanceCountMultipleVerticles{ Params :  Returns : void} testFailedVerticleStopNotCalled{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testDeploySupplier{ Params :  Returns : void} testDeploySupplierNull{ Params :  Returns : void} testDeploySupplierDuplicate{ Params :  Returns : void} testDeploySupplierThrowsException{ Params :  Returns : void} testDeployClass{ Params :  Returns : void} testDeployClassNoDefaultPublicConstructor{ Params :  Returns : void} testFailedDeployRunsContextShutdownHook{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleFailedDeploys{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testUndeployParentDuringChildDeployment{ Params :  Returns : void} testContextClassLoader{ Params :  Returns : void} getResource{ Params : String Returns : URL} start{ Params :  Returns : void} assertDeployment{ Params : int,MyVerticle,JsonObject,AsyncResult<String> Returns : void} generateJSONObject{ Params :  Returns : JsonObject} start{ Params :  Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,start stop start stop start start stop start start stop start start stop stop start start start stop start start stop start start start getResource start start stop start stop ,,,,,,,,DeploymentOptions JsonObject JsonObject DeploymentOptions JsonObject Random DeploymentOptions DeploymentOptions DeploymentOptions JsonObject JsonObject Random JsonObject DeploymentOptions DeploymentOptions JsonObject Random DeploymentOptions MyVerticle MyVerticle MyVerticle DeploymentOptions MyVerticle MyVerticle MyVerticle DeploymentOptions MyVerticle DeploymentOptions AbstractVerticle DeploymentOptions AbstractVerticle MyVerticle MyVerticle MyVerticle MyVerticle MyVerticle MyVerticle MyVerticle MyVerticle MyVerticle CountDownLatch MyVerticle CountDownLatch MyVerticle DeploymentOptions DeploymentOptions DeploymentOptions AtomicInteger AtomicInteger AtomicInteger AtomicInteger CountDownLatch CountDownLatch MyAsyncVerticle MyAsyncVerticle AtomicBoolean AtomicBoolean AtomicReference AtomicReference CountDownLatch MyAsyncVerticle MyAsyncVerticle AtomicInteger AtomicInteger AbstractVerticle AbstractVerticle AtomicInteger AtomicInteger AbstractVerticle CountDownLatch AbstractVerticle RuntimeException AtomicInteger AbstractVerticle AbstractVerticle RuntimeException MyAsyncVerticle MyAsyncVerticle Exception MyAsyncVerticle MyAsyncVerticle Exception MyAsyncVerticle MyAsyncVerticle Exception MyAsyncVerticle MyAsyncVerticle Exception AbstractVerticle Exception AbstractVerticle AbstractVerticle AtomicInteger MyAsyncVerticle CountDownLatch AbstractVerticle File URLClassLoader CompilingClassLoader File ArrayList CountDownLatch MyVerticle ParentVerticle ArrayList CountDownLatch MyVerticle MultiInstanceVerticle AtomicInteger AtomicInteger DeploymentOptions CountDownLatch AbstractVerticle AbstractVerticle HashSet MyVerticle DeploymentOptions DeploymentOptions MyVerticle DeploymentOptions RuntimeException DeploymentOptions DeploymentOptions DeploymentOptions AtomicBoolean AbstractVerticle DeploymentOptions AtomicBoolean AbstractVerticle CountDownLatch CountDownLatch MyAsyncVerticle MyAsyncVerticle AtomicReference AtomicBoolean ClassLoader AbstractVerticle DeploymentOptions JsonObject JsonObject Exception Error Exception Error HashSet ,new JsonObject(): , "quux", "flip"
vert.x-master,io.vertx.core,ParentVerticle,3,1,0,1,0,false,VertxTestBase ,0 ,ParentVerticle ChildVerticle MyVerticle ReferenceSavingMyVerticle MyAsyncVerticle ,,setUp{ Params :  Returns : void} testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} testToJson{ Params :  Returns : void} testDeployFromTestThread{ Params :  Returns : void} testDeployFromTestThreadNoHandler{ Params :  Returns : void} testDeployWithConfig{ Params :  Returns : void} testDeployFromContext{ Params :  Returns : void} testDeployWorkerFromTestThread{ Params :  Returns : void} testDeployWorkerWithConfig{ Params :  Returns : void} testWorkerRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testStandardRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testDeployFromContextExceptionInStart{ Params :  Returns : void} testDeployFromContextErrorInStart{ Params :  Returns : void} testDeployFromThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testDeployFromContextExceptionInStop{ Params :  Returns : void} testDeployFromContextErrorInStop{ Params :  Returns : void} testDeployFromContextThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testUndeploy{ Params :  Returns : void} testUndeployNoHandler{ Params :  Returns : void} testUndeployTwice{ Params :  Returns : void} testUndeployInvalidID{ Params :  Returns : void} testDeployExceptionInStart{ Params :  Returns : void} testDeployErrorInStart{ Params :  Returns : void} testDeployThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testUndeployExceptionInStop{ Params :  Returns : void} testUndeployErrorInStop{ Params :  Returns : void} testUndeployThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testDeployUndeployMultiple{ Params :  Returns : void} testDeployInstanceSetInstances{ Params :  Returns : void} testDeployUsingClassName{ Params :  Returns : void} testDeployUsingClassAndConfig{ Params :  Returns : void} testDeployUsingClassFails{ Params :  Returns : void} testDeployUndeployMultipleInstancesUsingClassName{ Params :  Returns : void} testDeployClassNotFound1{ Params :  Returns : void} testDeployClassNotFound2{ Params :  Returns : void} testDeployClassNotFound{ Params : String Returns : void} testDeployAsSource{ Params :  Returns : void} testSimpleChildDeployment{ Params :  Returns : void} testSimpleChildUndeploymentOrder{ Params :  Returns : void} testSimpleChildUndeploymentOnParentAsyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentOnParentSyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentDeployedAfterParentFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} testAsyncDeployCalledSynchronously{ Params :  Returns : void} testAsyncDeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncDeploy{ Params :  Returns : void} testAsyncDeployFailure{ Params :  Returns : void} testAsyncUndeployCalledSynchronously{ Params :  Returns : void} testAsyncUndeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncUndeploy{ Params :  Returns : void} testAsyncUndeployFailure{ Params :  Returns : void} testAsyncUndeployFailsAfterSuccess{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testChildUndeployedDirectly{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testCloseHooksCalled{ Params :  Returns : void} testDeployWhenClosedShouldFail{ Params :  Returns : void} createClassOutsideClasspath{ Params : String Returns : String} start{ Params : Promise<Void> Returns : void} testUndeployAll{ Params :  Returns : void} testDeployChildOnParentUndeploy{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testUndeployAllFailureInUndeploy{ Params :  Returns : void} testUndeployAllNoDeployments{ Params :  Returns : void} testGetInstanceCount{ Params :  Returns : void} start{ Params :  Returns : void} testGetInstanceCountMultipleVerticles{ Params :  Returns : void} testFailedVerticleStopNotCalled{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testDeploySupplier{ Params :  Returns : void} testDeploySupplierNull{ Params :  Returns : void} testDeploySupplierDuplicate{ Params :  Returns : void} testDeploySupplierThrowsException{ Params :  Returns : void} testDeployClass{ Params :  Returns : void} testDeployClassNoDefaultPublicConstructor{ Params :  Returns : void} testFailedDeployRunsContextShutdownHook{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleFailedDeploys{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testUndeployParentDuringChildDeployment{ Params :  Returns : void} testContextClassLoader{ Params :  Returns : void} getResource{ Params : String Returns : URL} start{ Params :  Returns : void} assertDeployment{ Params : int,MyVerticle,JsonObject,AsyncResult<String> Returns : void} generateJSONObject{ Params :  Returns : JsonObject} start{ Params :  Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,start stop start stop start start stop start start stop start start stop stop start start start stop start start stop start start start getResource start start stop start stop ,,,,,,,,,ar: 
vert.x-master,io.vertx.core,ChildVerticle,3,1,0,1,0,false,VertxTestBase ,0 ,ParentVerticle ChildVerticle MyVerticle ReferenceSavingMyVerticle MyAsyncVerticle ,,setUp{ Params :  Returns : void} testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} testToJson{ Params :  Returns : void} testDeployFromTestThread{ Params :  Returns : void} testDeployFromTestThreadNoHandler{ Params :  Returns : void} testDeployWithConfig{ Params :  Returns : void} testDeployFromContext{ Params :  Returns : void} testDeployWorkerFromTestThread{ Params :  Returns : void} testDeployWorkerWithConfig{ Params :  Returns : void} testWorkerRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testStandardRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testDeployFromContextExceptionInStart{ Params :  Returns : void} testDeployFromContextErrorInStart{ Params :  Returns : void} testDeployFromThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testDeployFromContextExceptionInStop{ Params :  Returns : void} testDeployFromContextErrorInStop{ Params :  Returns : void} testDeployFromContextThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testUndeploy{ Params :  Returns : void} testUndeployNoHandler{ Params :  Returns : void} testUndeployTwice{ Params :  Returns : void} testUndeployInvalidID{ Params :  Returns : void} testDeployExceptionInStart{ Params :  Returns : void} testDeployErrorInStart{ Params :  Returns : void} testDeployThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testUndeployExceptionInStop{ Params :  Returns : void} testUndeployErrorInStop{ Params :  Returns : void} testUndeployThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testDeployUndeployMultiple{ Params :  Returns : void} testDeployInstanceSetInstances{ Params :  Returns : void} testDeployUsingClassName{ Params :  Returns : void} testDeployUsingClassAndConfig{ Params :  Returns : void} testDeployUsingClassFails{ Params :  Returns : void} testDeployUndeployMultipleInstancesUsingClassName{ Params :  Returns : void} testDeployClassNotFound1{ Params :  Returns : void} testDeployClassNotFound2{ Params :  Returns : void} testDeployClassNotFound{ Params : String Returns : void} testDeployAsSource{ Params :  Returns : void} testSimpleChildDeployment{ Params :  Returns : void} testSimpleChildUndeploymentOrder{ Params :  Returns : void} testSimpleChildUndeploymentOnParentAsyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentOnParentSyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentDeployedAfterParentFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} testAsyncDeployCalledSynchronously{ Params :  Returns : void} testAsyncDeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncDeploy{ Params :  Returns : void} testAsyncDeployFailure{ Params :  Returns : void} testAsyncUndeployCalledSynchronously{ Params :  Returns : void} testAsyncUndeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncUndeploy{ Params :  Returns : void} testAsyncUndeployFailure{ Params :  Returns : void} testAsyncUndeployFailsAfterSuccess{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testChildUndeployedDirectly{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testCloseHooksCalled{ Params :  Returns : void} testDeployWhenClosedShouldFail{ Params :  Returns : void} createClassOutsideClasspath{ Params : String Returns : String} start{ Params : Promise<Void> Returns : void} testUndeployAll{ Params :  Returns : void} testDeployChildOnParentUndeploy{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testUndeployAllFailureInUndeploy{ Params :  Returns : void} testUndeployAllNoDeployments{ Params :  Returns : void} testGetInstanceCount{ Params :  Returns : void} start{ Params :  Returns : void} testGetInstanceCountMultipleVerticles{ Params :  Returns : void} testFailedVerticleStopNotCalled{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testDeploySupplier{ Params :  Returns : void} testDeploySupplierNull{ Params :  Returns : void} testDeploySupplierDuplicate{ Params :  Returns : void} testDeploySupplierThrowsException{ Params :  Returns : void} testDeployClass{ Params :  Returns : void} testDeployClassNoDefaultPublicConstructor{ Params :  Returns : void} testFailedDeployRunsContextShutdownHook{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleFailedDeploys{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testUndeployParentDuringChildDeployment{ Params :  Returns : void} testContextClassLoader{ Params :  Returns : void} getResource{ Params : String Returns : URL} start{ Params :  Returns : void} assertDeployment{ Params : int,MyVerticle,JsonObject,AsyncResult<String> Returns : void} generateJSONObject{ Params :  Returns : JsonObject} start{ Params :  Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,start stop start stop start start stop start start stop start start stop stop start start start stop start start stop start start start getResource start start stop start stop ,,,,,,,,,null
vert.x-master,io.vertx.core,ParentVerticle,1,0,0,0,0,false,VertxTestBase ,0 ,ParentVerticle ChildVerticle MyVerticle ReferenceSavingMyVerticle MyAsyncVerticle ,,setUp{ Params :  Returns : void} testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} testToJson{ Params :  Returns : void} testDeployFromTestThread{ Params :  Returns : void} testDeployFromTestThreadNoHandler{ Params :  Returns : void} testDeployWithConfig{ Params :  Returns : void} testDeployFromContext{ Params :  Returns : void} testDeployWorkerFromTestThread{ Params :  Returns : void} testDeployWorkerWithConfig{ Params :  Returns : void} testWorkerRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testStandardRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testDeployFromContextExceptionInStart{ Params :  Returns : void} testDeployFromContextErrorInStart{ Params :  Returns : void} testDeployFromThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testDeployFromContextExceptionInStop{ Params :  Returns : void} testDeployFromContextErrorInStop{ Params :  Returns : void} testDeployFromContextThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testUndeploy{ Params :  Returns : void} testUndeployNoHandler{ Params :  Returns : void} testUndeployTwice{ Params :  Returns : void} testUndeployInvalidID{ Params :  Returns : void} testDeployExceptionInStart{ Params :  Returns : void} testDeployErrorInStart{ Params :  Returns : void} testDeployThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testUndeployExceptionInStop{ Params :  Returns : void} testUndeployErrorInStop{ Params :  Returns : void} testUndeployThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testDeployUndeployMultiple{ Params :  Returns : void} testDeployInstanceSetInstances{ Params :  Returns : void} testDeployUsingClassName{ Params :  Returns : void} testDeployUsingClassAndConfig{ Params :  Returns : void} testDeployUsingClassFails{ Params :  Returns : void} testDeployUndeployMultipleInstancesUsingClassName{ Params :  Returns : void} testDeployClassNotFound1{ Params :  Returns : void} testDeployClassNotFound2{ Params :  Returns : void} testDeployClassNotFound{ Params : String Returns : void} testDeployAsSource{ Params :  Returns : void} testSimpleChildDeployment{ Params :  Returns : void} testSimpleChildUndeploymentOrder{ Params :  Returns : void} testSimpleChildUndeploymentOnParentAsyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentOnParentSyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentDeployedAfterParentFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} testAsyncDeployCalledSynchronously{ Params :  Returns : void} testAsyncDeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncDeploy{ Params :  Returns : void} testAsyncDeployFailure{ Params :  Returns : void} testAsyncUndeployCalledSynchronously{ Params :  Returns : void} testAsyncUndeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncUndeploy{ Params :  Returns : void} testAsyncUndeployFailure{ Params :  Returns : void} testAsyncUndeployFailsAfterSuccess{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testChildUndeployedDirectly{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testCloseHooksCalled{ Params :  Returns : void} testDeployWhenClosedShouldFail{ Params :  Returns : void} createClassOutsideClasspath{ Params : String Returns : String} start{ Params : Promise<Void> Returns : void} testUndeployAll{ Params :  Returns : void} testDeployChildOnParentUndeploy{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testUndeployAllFailureInUndeploy{ Params :  Returns : void} testUndeployAllNoDeployments{ Params :  Returns : void} testGetInstanceCount{ Params :  Returns : void} start{ Params :  Returns : void} testGetInstanceCountMultipleVerticles{ Params :  Returns : void} testFailedVerticleStopNotCalled{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testDeploySupplier{ Params :  Returns : void} testDeploySupplierNull{ Params :  Returns : void} testDeploySupplierDuplicate{ Params :  Returns : void} testDeploySupplierThrowsException{ Params :  Returns : void} testDeployClass{ Params :  Returns : void} testDeployClassNoDefaultPublicConstructor{ Params :  Returns : void} testFailedDeployRunsContextShutdownHook{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleFailedDeploys{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testUndeployParentDuringChildDeployment{ Params :  Returns : void} testContextClassLoader{ Params :  Returns : void} getResource{ Params : String Returns : URL} start{ Params :  Returns : void} assertDeployment{ Params : int,MyVerticle,JsonObject,AsyncResult<String> Returns : void} generateJSONObject{ Params :  Returns : JsonObject} start{ Params :  Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,start stop start stop start start stop start start stop start start stop stop start start start stop start start stop start start start getResource start start stop start stop ,,,,,,,,,ChildVerticle.class: 
vert.x-master,io.vertx.core,MultiInstanceVerticle,1,0,0,0,0,false,VertxTestBase ,0 ,ParentVerticle ChildVerticle MyVerticle ReferenceSavingMyVerticle MyAsyncVerticle ,,setUp{ Params :  Returns : void} testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} testToJson{ Params :  Returns : void} testDeployFromTestThread{ Params :  Returns : void} testDeployFromTestThreadNoHandler{ Params :  Returns : void} testDeployWithConfig{ Params :  Returns : void} testDeployFromContext{ Params :  Returns : void} testDeployWorkerFromTestThread{ Params :  Returns : void} testDeployWorkerWithConfig{ Params :  Returns : void} testWorkerRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testStandardRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testDeployFromContextExceptionInStart{ Params :  Returns : void} testDeployFromContextErrorInStart{ Params :  Returns : void} testDeployFromThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testDeployFromContextExceptionInStop{ Params :  Returns : void} testDeployFromContextErrorInStop{ Params :  Returns : void} testDeployFromContextThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testUndeploy{ Params :  Returns : void} testUndeployNoHandler{ Params :  Returns : void} testUndeployTwice{ Params :  Returns : void} testUndeployInvalidID{ Params :  Returns : void} testDeployExceptionInStart{ Params :  Returns : void} testDeployErrorInStart{ Params :  Returns : void} testDeployThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testUndeployExceptionInStop{ Params :  Returns : void} testUndeployErrorInStop{ Params :  Returns : void} testUndeployThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testDeployUndeployMultiple{ Params :  Returns : void} testDeployInstanceSetInstances{ Params :  Returns : void} testDeployUsingClassName{ Params :  Returns : void} testDeployUsingClassAndConfig{ Params :  Returns : void} testDeployUsingClassFails{ Params :  Returns : void} testDeployUndeployMultipleInstancesUsingClassName{ Params :  Returns : void} testDeployClassNotFound1{ Params :  Returns : void} testDeployClassNotFound2{ Params :  Returns : void} testDeployClassNotFound{ Params : String Returns : void} testDeployAsSource{ Params :  Returns : void} testSimpleChildDeployment{ Params :  Returns : void} testSimpleChildUndeploymentOrder{ Params :  Returns : void} testSimpleChildUndeploymentOnParentAsyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentOnParentSyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentDeployedAfterParentFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} testAsyncDeployCalledSynchronously{ Params :  Returns : void} testAsyncDeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncDeploy{ Params :  Returns : void} testAsyncDeployFailure{ Params :  Returns : void} testAsyncUndeployCalledSynchronously{ Params :  Returns : void} testAsyncUndeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncUndeploy{ Params :  Returns : void} testAsyncUndeployFailure{ Params :  Returns : void} testAsyncUndeployFailsAfterSuccess{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testChildUndeployedDirectly{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testCloseHooksCalled{ Params :  Returns : void} testDeployWhenClosedShouldFail{ Params :  Returns : void} createClassOutsideClasspath{ Params : String Returns : String} start{ Params : Promise<Void> Returns : void} testUndeployAll{ Params :  Returns : void} testDeployChildOnParentUndeploy{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testUndeployAllFailureInUndeploy{ Params :  Returns : void} testUndeployAllNoDeployments{ Params :  Returns : void} testGetInstanceCount{ Params :  Returns : void} start{ Params :  Returns : void} testGetInstanceCountMultipleVerticles{ Params :  Returns : void} testFailedVerticleStopNotCalled{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testDeploySupplier{ Params :  Returns : void} testDeploySupplierNull{ Params :  Returns : void} testDeploySupplierDuplicate{ Params :  Returns : void} testDeploySupplierThrowsException{ Params :  Returns : void} testDeployClass{ Params :  Returns : void} testDeployClassNoDefaultPublicConstructor{ Params :  Returns : void} testFailedDeployRunsContextShutdownHook{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleFailedDeploys{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testUndeployParentDuringChildDeployment{ Params :  Returns : void} testContextClassLoader{ Params :  Returns : void} getResource{ Params : String Returns : URL} start{ Params :  Returns : void} assertDeployment{ Params : int,MyVerticle,JsonObject,AsyncResult<String> Returns : void} generateJSONObject{ Params :  Returns : JsonObject} start{ Params :  Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,start stop start stop start start stop start start stop start start stop stop start start start stop start start stop start start start getResource start start stop start stop ,,,,,,,,,vertx: 
vert.x-master,io.vertx.core,NoDefaultPublicConstructorVerticle,1,0,0,0,0,false,VertxTestBase ,0 ,ParentVerticle ChildVerticle MyVerticle ReferenceSavingMyVerticle MyAsyncVerticle ,,setUp{ Params :  Returns : void} testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} testToJson{ Params :  Returns : void} testDeployFromTestThread{ Params :  Returns : void} testDeployFromTestThreadNoHandler{ Params :  Returns : void} testDeployWithConfig{ Params :  Returns : void} testDeployFromContext{ Params :  Returns : void} testDeployWorkerFromTestThread{ Params :  Returns : void} testDeployWorkerWithConfig{ Params :  Returns : void} testWorkerRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testStandardRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testDeployFromContextExceptionInStart{ Params :  Returns : void} testDeployFromContextErrorInStart{ Params :  Returns : void} testDeployFromThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testDeployFromContextExceptionInStop{ Params :  Returns : void} testDeployFromContextErrorInStop{ Params :  Returns : void} testDeployFromContextThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testUndeploy{ Params :  Returns : void} testUndeployNoHandler{ Params :  Returns : void} testUndeployTwice{ Params :  Returns : void} testUndeployInvalidID{ Params :  Returns : void} testDeployExceptionInStart{ Params :  Returns : void} testDeployErrorInStart{ Params :  Returns : void} testDeployThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testUndeployExceptionInStop{ Params :  Returns : void} testUndeployErrorInStop{ Params :  Returns : void} testUndeployThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testDeployUndeployMultiple{ Params :  Returns : void} testDeployInstanceSetInstances{ Params :  Returns : void} testDeployUsingClassName{ Params :  Returns : void} testDeployUsingClassAndConfig{ Params :  Returns : void} testDeployUsingClassFails{ Params :  Returns : void} testDeployUndeployMultipleInstancesUsingClassName{ Params :  Returns : void} testDeployClassNotFound1{ Params :  Returns : void} testDeployClassNotFound2{ Params :  Returns : void} testDeployClassNotFound{ Params : String Returns : void} testDeployAsSource{ Params :  Returns : void} testSimpleChildDeployment{ Params :  Returns : void} testSimpleChildUndeploymentOrder{ Params :  Returns : void} testSimpleChildUndeploymentOnParentAsyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentOnParentSyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentDeployedAfterParentFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} testAsyncDeployCalledSynchronously{ Params :  Returns : void} testAsyncDeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncDeploy{ Params :  Returns : void} testAsyncDeployFailure{ Params :  Returns : void} testAsyncUndeployCalledSynchronously{ Params :  Returns : void} testAsyncUndeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncUndeploy{ Params :  Returns : void} testAsyncUndeployFailure{ Params :  Returns : void} testAsyncUndeployFailsAfterSuccess{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testChildUndeployedDirectly{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testCloseHooksCalled{ Params :  Returns : void} testDeployWhenClosedShouldFail{ Params :  Returns : void} createClassOutsideClasspath{ Params : String Returns : String} start{ Params : Promise<Void> Returns : void} testUndeployAll{ Params :  Returns : void} testDeployChildOnParentUndeploy{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testUndeployAllFailureInUndeploy{ Params :  Returns : void} testUndeployAllNoDeployments{ Params :  Returns : void} testGetInstanceCount{ Params :  Returns : void} start{ Params :  Returns : void} testGetInstanceCountMultipleVerticles{ Params :  Returns : void} testFailedVerticleStopNotCalled{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testDeploySupplier{ Params :  Returns : void} testDeploySupplierNull{ Params :  Returns : void} testDeploySupplierDuplicate{ Params :  Returns : void} testDeploySupplierThrowsException{ Params :  Returns : void} testDeployClass{ Params :  Returns : void} testDeployClassNoDefaultPublicConstructor{ Params :  Returns : void} testFailedDeployRunsContextShutdownHook{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleFailedDeploys{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testUndeployParentDuringChildDeployment{ Params :  Returns : void} testContextClassLoader{ Params :  Returns : void} getResource{ Params : String Returns : URL} start{ Params :  Returns : void} assertDeployment{ Params : int,MyVerticle,JsonObject,AsyncResult<String> Returns : void} generateJSONObject{ Params :  Returns : JsonObject} start{ Params :  Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,start stop start stop start start stop start start stop start start stop stop start start start stop start start stop start start start getResource start start stop start stop ,,,,,,,,,null
vert.x-master,io.vertx.core,MyVerticle,3,1,0,1,0,false,VertxTestBase ,0 ,ParentVerticle ChildVerticle MyVerticle ReferenceSavingMyVerticle MyAsyncVerticle ,NOOP: int startCalled: boolean stopCalled: boolean startContext: Context stopContext: Context startAction: int stopAction: int deploymentID: String config: JsonObject ,setUp{ Params :  Returns : void} testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} testToJson{ Params :  Returns : void} testDeployFromTestThread{ Params :  Returns : void} testDeployFromTestThreadNoHandler{ Params :  Returns : void} testDeployWithConfig{ Params :  Returns : void} testDeployFromContext{ Params :  Returns : void} testDeployWorkerFromTestThread{ Params :  Returns : void} testDeployWorkerWithConfig{ Params :  Returns : void} testWorkerRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testStandardRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testDeployFromContextExceptionInStart{ Params :  Returns : void} testDeployFromContextErrorInStart{ Params :  Returns : void} testDeployFromThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testDeployFromContextExceptionInStop{ Params :  Returns : void} testDeployFromContextErrorInStop{ Params :  Returns : void} testDeployFromContextThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testUndeploy{ Params :  Returns : void} testUndeployNoHandler{ Params :  Returns : void} testUndeployTwice{ Params :  Returns : void} testUndeployInvalidID{ Params :  Returns : void} testDeployExceptionInStart{ Params :  Returns : void} testDeployErrorInStart{ Params :  Returns : void} testDeployThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testUndeployExceptionInStop{ Params :  Returns : void} testUndeployErrorInStop{ Params :  Returns : void} testUndeployThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testDeployUndeployMultiple{ Params :  Returns : void} testDeployInstanceSetInstances{ Params :  Returns : void} testDeployUsingClassName{ Params :  Returns : void} testDeployUsingClassAndConfig{ Params :  Returns : void} testDeployUsingClassFails{ Params :  Returns : void} testDeployUndeployMultipleInstancesUsingClassName{ Params :  Returns : void} testDeployClassNotFound1{ Params :  Returns : void} testDeployClassNotFound2{ Params :  Returns : void} testDeployClassNotFound{ Params : String Returns : void} testDeployAsSource{ Params :  Returns : void} testSimpleChildDeployment{ Params :  Returns : void} testSimpleChildUndeploymentOrder{ Params :  Returns : void} testSimpleChildUndeploymentOnParentAsyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentOnParentSyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentDeployedAfterParentFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} testAsyncDeployCalledSynchronously{ Params :  Returns : void} testAsyncDeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncDeploy{ Params :  Returns : void} testAsyncDeployFailure{ Params :  Returns : void} testAsyncUndeployCalledSynchronously{ Params :  Returns : void} testAsyncUndeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncUndeploy{ Params :  Returns : void} testAsyncUndeployFailure{ Params :  Returns : void} testAsyncUndeployFailsAfterSuccess{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testChildUndeployedDirectly{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testCloseHooksCalled{ Params :  Returns : void} testDeployWhenClosedShouldFail{ Params :  Returns : void} createClassOutsideClasspath{ Params : String Returns : String} start{ Params : Promise<Void> Returns : void} testUndeployAll{ Params :  Returns : void} testDeployChildOnParentUndeploy{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testUndeployAllFailureInUndeploy{ Params :  Returns : void} testUndeployAllNoDeployments{ Params :  Returns : void} testGetInstanceCount{ Params :  Returns : void} start{ Params :  Returns : void} testGetInstanceCountMultipleVerticles{ Params :  Returns : void} testFailedVerticleStopNotCalled{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testDeploySupplier{ Params :  Returns : void} testDeploySupplierNull{ Params :  Returns : void} testDeploySupplierDuplicate{ Params :  Returns : void} testDeploySupplierThrowsException{ Params :  Returns : void} testDeployClass{ Params :  Returns : void} testDeployClassNoDefaultPublicConstructor{ Params :  Returns : void} testFailedDeployRunsContextShutdownHook{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleFailedDeploys{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testUndeployParentDuringChildDeployment{ Params :  Returns : void} testContextClassLoader{ Params :  Returns : void} getResource{ Params : String Returns : URL} start{ Params :  Returns : void} assertDeployment{ Params : int,MyVerticle,JsonObject,AsyncResult<String> Returns : void} generateJSONObject{ Params :  Returns : JsonObject} start{ Params :  Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,start stop start stop start start stop start start stop start start stop stop start start start stop start start stop start start start getResource start start stop start stop ,,,,,,,,Exception Error Exception Error ,Vertx: 
vert.x-master,io.vertx.core,ReferenceSavingMyVerticle,3,1,0,1,0,false,VertxTestBase ,0 ,ParentVerticle ChildVerticle MyVerticle ReferenceSavingMyVerticle MyAsyncVerticle ,myVerticles: Set<MyVerticle> ,setUp{ Params :  Returns : void} testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} testToJson{ Params :  Returns : void} testDeployFromTestThread{ Params :  Returns : void} testDeployFromTestThreadNoHandler{ Params :  Returns : void} testDeployWithConfig{ Params :  Returns : void} testDeployFromContext{ Params :  Returns : void} testDeployWorkerFromTestThread{ Params :  Returns : void} testDeployWorkerWithConfig{ Params :  Returns : void} testWorkerRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testStandardRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testDeployFromContextExceptionInStart{ Params :  Returns : void} testDeployFromContextErrorInStart{ Params :  Returns : void} testDeployFromThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testDeployFromContextExceptionInStop{ Params :  Returns : void} testDeployFromContextErrorInStop{ Params :  Returns : void} testDeployFromContextThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testUndeploy{ Params :  Returns : void} testUndeployNoHandler{ Params :  Returns : void} testUndeployTwice{ Params :  Returns : void} testUndeployInvalidID{ Params :  Returns : void} testDeployExceptionInStart{ Params :  Returns : void} testDeployErrorInStart{ Params :  Returns : void} testDeployThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testUndeployExceptionInStop{ Params :  Returns : void} testUndeployErrorInStop{ Params :  Returns : void} testUndeployThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testDeployUndeployMultiple{ Params :  Returns : void} testDeployInstanceSetInstances{ Params :  Returns : void} testDeployUsingClassName{ Params :  Returns : void} testDeployUsingClassAndConfig{ Params :  Returns : void} testDeployUsingClassFails{ Params :  Returns : void} testDeployUndeployMultipleInstancesUsingClassName{ Params :  Returns : void} testDeployClassNotFound1{ Params :  Returns : void} testDeployClassNotFound2{ Params :  Returns : void} testDeployClassNotFound{ Params : String Returns : void} testDeployAsSource{ Params :  Returns : void} testSimpleChildDeployment{ Params :  Returns : void} testSimpleChildUndeploymentOrder{ Params :  Returns : void} testSimpleChildUndeploymentOnParentAsyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentOnParentSyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentDeployedAfterParentFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} testAsyncDeployCalledSynchronously{ Params :  Returns : void} testAsyncDeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncDeploy{ Params :  Returns : void} testAsyncDeployFailure{ Params :  Returns : void} testAsyncUndeployCalledSynchronously{ Params :  Returns : void} testAsyncUndeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncUndeploy{ Params :  Returns : void} testAsyncUndeployFailure{ Params :  Returns : void} testAsyncUndeployFailsAfterSuccess{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testChildUndeployedDirectly{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testCloseHooksCalled{ Params :  Returns : void} testDeployWhenClosedShouldFail{ Params :  Returns : void} createClassOutsideClasspath{ Params : String Returns : String} start{ Params : Promise<Void> Returns : void} testUndeployAll{ Params :  Returns : void} testDeployChildOnParentUndeploy{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testUndeployAllFailureInUndeploy{ Params :  Returns : void} testUndeployAllNoDeployments{ Params :  Returns : void} testGetInstanceCount{ Params :  Returns : void} start{ Params :  Returns : void} testGetInstanceCountMultipleVerticles{ Params :  Returns : void} testFailedVerticleStopNotCalled{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testDeploySupplier{ Params :  Returns : void} testDeploySupplierNull{ Params :  Returns : void} testDeploySupplierDuplicate{ Params :  Returns : void} testDeploySupplierThrowsException{ Params :  Returns : void} testDeployClass{ Params :  Returns : void} testDeployClassNoDefaultPublicConstructor{ Params :  Returns : void} testFailedDeployRunsContextShutdownHook{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleFailedDeploys{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testUndeployParentDuringChildDeployment{ Params :  Returns : void} testContextClassLoader{ Params :  Returns : void} getResource{ Params : String Returns : URL} start{ Params :  Returns : void} assertDeployment{ Params : int,MyVerticle,JsonObject,AsyncResult<String> Returns : void} generateJSONObject{ Params :  Returns : JsonObject} start{ Params :  Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,start stop start stop start start stop start start stop start start stop stop start start start stop start start stop start start start getResource start start stop start stop ,,,,,,,,HashSet ,null
vert.x-master,io.vertx.core,MyAsyncVerticle,3,1,0,0,0,false,VertxTestBase ,0 ,ParentVerticle ChildVerticle MyVerticle ReferenceSavingMyVerticle MyAsyncVerticle ,startConsumer: Consumer<Promise<Void>> stopConsumer: Consumer<Promise<Void>> ,setUp{ Params :  Returns : void} testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} testToJson{ Params :  Returns : void} testDeployFromTestThread{ Params :  Returns : void} testDeployFromTestThreadNoHandler{ Params :  Returns : void} testDeployWithConfig{ Params :  Returns : void} testDeployFromContext{ Params :  Returns : void} testDeployWorkerFromTestThread{ Params :  Returns : void} testDeployWorkerWithConfig{ Params :  Returns : void} testWorkerRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testStandardRightThread{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testDeployFromContextExceptionInStart{ Params :  Returns : void} testDeployFromContextErrorInStart{ Params :  Returns : void} testDeployFromThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testDeployFromContextExceptionInStop{ Params :  Returns : void} testDeployFromContextErrorInStop{ Params :  Returns : void} testDeployFromContextThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testUndeploy{ Params :  Returns : void} testUndeployNoHandler{ Params :  Returns : void} testUndeployTwice{ Params :  Returns : void} testUndeployInvalidID{ Params :  Returns : void} testDeployExceptionInStart{ Params :  Returns : void} testDeployErrorInStart{ Params :  Returns : void} testDeployThrowableInStart{ Params : int,Class<? extends Throwable> Returns : void} testUndeployExceptionInStop{ Params :  Returns : void} testUndeployErrorInStop{ Params :  Returns : void} testUndeployThrowableInStop{ Params : int,Class<? extends Throwable> Returns : void} testDeployUndeployMultiple{ Params :  Returns : void} testDeployInstanceSetInstances{ Params :  Returns : void} testDeployUsingClassName{ Params :  Returns : void} testDeployUsingClassAndConfig{ Params :  Returns : void} testDeployUsingClassFails{ Params :  Returns : void} testDeployUndeployMultipleInstancesUsingClassName{ Params :  Returns : void} testDeployClassNotFound1{ Params :  Returns : void} testDeployClassNotFound2{ Params :  Returns : void} testDeployClassNotFound{ Params : String Returns : void} testDeployAsSource{ Params :  Returns : void} testSimpleChildDeployment{ Params :  Returns : void} testSimpleChildUndeploymentOrder{ Params :  Returns : void} testSimpleChildUndeploymentOnParentAsyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentOnParentSyncFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testSimpleChildUndeploymentDeployedAfterParentFailure{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} testAsyncDeployCalledSynchronously{ Params :  Returns : void} testAsyncDeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncDeploy{ Params :  Returns : void} testAsyncDeployFailure{ Params :  Returns : void} testAsyncUndeployCalledSynchronously{ Params :  Returns : void} testAsyncUndeployFailureCalledSynchronously{ Params :  Returns : void} testAsyncUndeploy{ Params :  Returns : void} testAsyncUndeployFailure{ Params :  Returns : void} testAsyncUndeployFailsAfterSuccess{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testChildUndeployedDirectly{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testCloseHooksCalled{ Params :  Returns : void} testDeployWhenClosedShouldFail{ Params :  Returns : void} createClassOutsideClasspath{ Params : String Returns : String} start{ Params : Promise<Void> Returns : void} testUndeployAll{ Params :  Returns : void} testDeployChildOnParentUndeploy{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} testUndeployAllFailureInUndeploy{ Params :  Returns : void} testUndeployAllNoDeployments{ Params :  Returns : void} testGetInstanceCount{ Params :  Returns : void} start{ Params :  Returns : void} testGetInstanceCountMultipleVerticles{ Params :  Returns : void} testFailedVerticleStopNotCalled{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testDeploySupplier{ Params :  Returns : void} testDeploySupplierNull{ Params :  Returns : void} testDeploySupplierDuplicate{ Params :  Returns : void} testDeploySupplierThrowsException{ Params :  Returns : void} testDeployClass{ Params :  Returns : void} testDeployClassNoDefaultPublicConstructor{ Params :  Returns : void} testFailedDeployRunsContextShutdownHook{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleFailedDeploys{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testUndeployParentDuringChildDeployment{ Params :  Returns : void} testContextClassLoader{ Params :  Returns : void} getResource{ Params : String Returns : URL} start{ Params :  Returns : void} assertDeployment{ Params : int,MyVerticle,JsonObject,AsyncResult<String> Returns : void} generateJSONObject{ Params :  Returns : JsonObject} start{ Params :  Returns : void} stop{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,start stop start stop start start stop start start stop start start stop stop start start start stop start start stop start start start getResource start start stop start stop ,,,,,Consumer<Promise<Void>> ,,Consumer<Promise<Void>> ,,stopConsumer: , stopPromise
vert.x-master,io.vertx.core.dns,DNSTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,dnsServer: FakeDNSServer ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testIllegalArguments{ Params :  Returns : void} testDefaultDnsClient{ Params :  Returns : void} testDefaultDnsClientWithOptions{ Params :  Returns : void} testDefaultDnsClient{ Params : Function<Vertx,DnsClient> Returns : void} testResolveA{ Params :  Returns : void} testUnresolvedDnsServer{ Params :  Returns : void} testResolveAIpV6{ Params :  Returns : void} testResolveAAAA{ Params :  Returns : void} testResolveMX{ Params :  Returns : void} testResolveTXT{ Params :  Returns : void} testResolveNS{ Params :  Returns : void} testResolveCNAME{ Params :  Returns : void} testResolvePTR{ Params :  Returns : void} testResolveSRV{ Params :  Returns : void} testLookup4{ Params :  Returns : void} testLookup6{ Params :  Returns : void} testLookup{ Params :  Returns : void} testTimeout{ Params :  Returns : void} testLookupNonExisting{ Params :  Returns : void} testReverseLookupIpv4{ Params :  Returns : void} testReverseLookupIpv6{ Params :  Returns : void} testLookup4CNAME{ Params :  Returns : void} testLogging{ Params : DnsClientOptions Returns : TestLoggerFactory} testLogActivity{ Params :  Returns : void} testDoNotLogActivity{ Params :  Returns : void} testRecursionDesired{ Params :  Returns : void} testRecursionNotDesired{ Params :  Returns : void} prepareDns{ Params :  Returns : DnsClient} prepareDns{ Params : DnsClientOptions Returns : DnsClient} ,setUp tearDown ,,,,,FakeDNSServer ,,FakeDNSServer ,FakeDNSServer DnsClientOptions VertxOptions DnsClientOptions DnsClientOptions DnsClientOptions DnsClientOptions DnsClientOptions DnsClientOptions DnsClientOptions DnsClientOptions ,addr: 
vert.x-master,io.vertx.core.dns,HostnameResolutionTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,dnsServer: FakeDNSServer dnsServerAddress: InetSocketAddress ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} getOptions{ Params :  Returns : VertxOptions} getAddressResolverOptions{ Params :  Returns : AddressResolverOptions} testAsyncResolve{ Params :  Returns : void} testAsyncResolveTruncated{ Params :  Returns : void} testAsyncResolveFail{ Params :  Returns : void} testNet{ Params :  Returns : void} testNet{ Params : String Returns : void} testHttp{ Params :  Returns : void} testOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testAsyncResolveConnectIsNotifiedOnChannelEventLoop{ Params :  Returns : void} initChannel{ Params : Channel Returns : void} testInvalidHostsConfig{ Params :  Returns : void} testResolveFromClasspath{ Params :  Returns : void} testResolveFromFile{ Params :  Returns : void} testResolveFromBuffer{ Params :  Returns : void} testCaseInsensitiveResolveFromHosts{ Params :  Returns : void} testTrailingDotResolveFromHosts{ Params :  Returns : void} testResolveMissingLocalhost{ Params :  Returns : void} testSearchDomain{ Params :  Returns : void} testMultipleSearchDomain{ Params :  Returns : void} testSearchDomainWithNdots2{ Params :  Returns : void} testSearchDomainWithNdots0{ Params :  Returns : void} testNetSearchDomain{ Params :  Returns : void} testParseResolvConf{ Params :  Returns : void} testResolveLocalhost{ Params :  Returns : void} testResolveAll{ Params :  Returns : void} testRotationalServerSelection{ Params :  Returns : void} testRotationalServerSelectionWithCache{ Params :  Returns : void} testFirstServerSelection{ Params :  Returns : void} testServerSelection{ Params : boolean,boolean Returns : void} testAddressSelectionDefault{ Params :  Returns : void} testAddressSelectionWithRoundRobin{ Params :  Returns : void} testAddressSelectionWithoutRoundRobin{ Params :  Returns : void} addRecordsToStore{ Params : FakeDNSServer,String,String Returns : void} testAddressSelection{ Params : AddressResolverOptions,int Returns : void} testServerFailover{ Params :  Returns : void} ,setUp tearDown getOptions initChannel ,,,,,InetSocketAddress ,,InetSocketAddress ,FakeDNSServer AddressResolverOptions VertxResourceRecord CountDownLatch CountDownLatch AddressResolverOptions ArrayList ArrayList AddressResolverOptions AddressResolverOptions AddressResolverOptions JsonObject CountDownLatch AtomicReference CountDownLatch Bootstrap ChannelInitializer AddressResolverOptions VertxOptions VertxOptions AddressResolverOptions File File File File VertxOptions AddressResolverOptions VertxOptions AddressResolverOptions VertxOptions AddressResolverOptions VertxOptions AddressResolverOptions VertxOptions AddressResolverOptions CompletableFuture AssertionError CompletableFuture AssertionError CompletableFuture NetServerOptions CompletableFuture HashMap VertxOptions AddressResolverOptions CountDownLatch CountDownLatch CountDownLatch CountDownLatch CountDownLatch CountDownLatch CountDownLatch CountDownLatch CountDownLatch HashMap VertxOptions AddressResolverOptions CountDownLatch CountDownLatch CountDownLatch HashMap VertxOptions AddressResolverOptions CountDownLatch CountDownLatch HashMap VertxOptions AddressResolverOptions CountDownLatch CountDownLatch HashMap VertxOptions AddressResolverOptions AddressResolver AddressResolverOptions AddressResolver ArrayList FakeDNSServer AddressResolverOptions AddressResolver CompletableFuture LinkedHashSet VertxResourceRecord AddressResolver HashSet CountDownLatch FakeDNSServer AddressResolverOptions AddressResolver CompletableFuture ,server: 
vert.x-master,io.vertx.core.eventbus,ClusteredEventBusTest,1,1,0,0,0,false,ClusteredEventBusTestBase ,0 ,0 ,,testLocalHandlerNotVisibleRemotely{ Params :  Returns : void} testLocalHandlerClusteredSend{ Params :  Returns : void} testLocalHandlerClusteredPublish{ Params :  Returns : void} testDecoderSendAsymmetric{ Params :  Returns : void} testDecoderReplyAsymmetric{ Params :  Returns : void} testDecoderSendSymmetric{ Params :  Returns : void} testDecoderReplySymmetric{ Params :  Returns : void} testDefaultDecoderSendAsymmetric{ Params :  Returns : void} testDefaultDecoderReplyAsymmetric{ Params :  Returns : void} testDefaultDecoderSendSymetric{ Params :  Returns : void} testDefaultDecoderReplySymetric{ Params :  Returns : void} testDefaultCodecReplyExceptionSubclass{ Params :  Returns : void} testClusteredPong{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously1{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously2{ Params :  Returns : void} testSubsRemovedForClosedNode{ Params :  Returns : void} testSubsRemovedForKilledNode{ Params :  Returns : void} testSubsRemoved{ Params : Consumer<CountDownLatch> Returns : void} sendNoContext{ Params :  Returns : void} testSendLocalOnly{ Params :  Returns : void} testPublishLocalOnly{ Params :  Returns : void} testDeliveryOptionsLocalOnly{ Params : boolean Returns : void} testLocalOnlyDoesNotApplyToReplies{ Params :  Returns : void} testImmediateUnregistration{ Params :  Returns : void} testSendWriteHandler{ Params :  Returns : void} init{ Params : Vertx,NodeSelector Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} wantsUpdatesFor{ Params : String Returns : boolean} testSendWriteHandlerNoConsumer{ Params :  Returns : void} testPublishWriteHandler{ Params :  Returns : void} testPublishWriteHandlerNoConsumer{ Params :  Returns : void} testWriteHandlerConnectFailure{ Params :  Returns : void} testSelectorWantsUpdates{ Params :  Returns : void} init{ Params : Vertx,NodeSelector Returns : void} testSelectorDoesNotWantUpdates{ Params :  Returns : void} init{ Params : Vertx,NodeSelector Returns : void} testLocalConsumerNeverGetsMessagePublishedFromRemote{ Params :  Returns : void} testLocalConsumerNeverGetsMessageSentFromRemote{ Params :  Returns : void} handle{ Params : Message<Object> Returns : void} testRejectedClusterSerializableNotSent{ Params :  Returns : void} testRejectedClusterSerializableImplNotSent{ Params :  Returns : void} testRejectedSerializableNotSent{ Params :  Returns : void} testRejectedNotSent{ Params : Class<T>,T Returns : void} testRejectedClusterSerializableNotReceived{ Params :  Returns : void} testRejectedClusterSerializableImplNotReceived{ Params :  Returns : void} testRejectedSerializableNotReceived{ Params :  Returns : void} testRejectedNotReceived{ Params : Class<T>,T Returns : void} testMultiHeaders{ Params :  Returns : void} ,init registrationsUpdated wantsUpdatesFor init init handle ,,,,,,,,MyPOJOEncoder1 MyPOJO DeliveryOptions MyPOJOEncoder1 MyPOJO DeliveryOptions MyPOJOEncoder2 MyPOJO DeliveryOptions MyPOJOEncoder2 MyPOJO DeliveryOptions MyPOJOEncoder1 MyPOJO MyPOJOEncoder1 MyPOJO MyPOJOEncoder2 MyPOJO MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec VertxOptions AtomicBoolean ThreadLocal ThreadLocal CountDownLatch AtomicInteger CountDownLatch ConcurrentLinkedDeque CountDownLatch ArrayList AtomicLong AtomicLong DeliveryOptions DeliveryOptions DeliveryOptions DeliveryOptions AtomicInteger CountDownLatch WrappedClusterManager WrappedNodeSelector AtomicReference WrappedClusterManager AtomicReference WrappedClusterManager CountDownLatch AtomicInteger CountDownLatch CountingHandler CountingHandler SomeClusterSerializableObject SomeClusterSerializableImplObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject SomeSerializableObject DeliveryOptions ,: 
vert.x-master,io.vertx.core.eventbus,CountingHandler,1,0,0,0,0,false,ClusteredEventBusTestBase ,0 ,0 ,counter: AtomicInteger ,testLocalHandlerNotVisibleRemotely{ Params :  Returns : void} testLocalHandlerClusteredSend{ Params :  Returns : void} testLocalHandlerClusteredPublish{ Params :  Returns : void} testDecoderSendAsymmetric{ Params :  Returns : void} testDecoderReplyAsymmetric{ Params :  Returns : void} testDecoderSendSymmetric{ Params :  Returns : void} testDecoderReplySymmetric{ Params :  Returns : void} testDefaultDecoderSendAsymmetric{ Params :  Returns : void} testDefaultDecoderReplyAsymmetric{ Params :  Returns : void} testDefaultDecoderSendSymetric{ Params :  Returns : void} testDefaultDecoderReplySymetric{ Params :  Returns : void} testDefaultCodecReplyExceptionSubclass{ Params :  Returns : void} testClusteredPong{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously1{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously2{ Params :  Returns : void} testSubsRemovedForClosedNode{ Params :  Returns : void} testSubsRemovedForKilledNode{ Params :  Returns : void} testSubsRemoved{ Params : Consumer<CountDownLatch> Returns : void} sendNoContext{ Params :  Returns : void} testSendLocalOnly{ Params :  Returns : void} testPublishLocalOnly{ Params :  Returns : void} testDeliveryOptionsLocalOnly{ Params : boolean Returns : void} testLocalOnlyDoesNotApplyToReplies{ Params :  Returns : void} testImmediateUnregistration{ Params :  Returns : void} testSendWriteHandler{ Params :  Returns : void} init{ Params : Vertx,NodeSelector Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} wantsUpdatesFor{ Params : String Returns : boolean} testSendWriteHandlerNoConsumer{ Params :  Returns : void} testPublishWriteHandler{ Params :  Returns : void} testPublishWriteHandlerNoConsumer{ Params :  Returns : void} testWriteHandlerConnectFailure{ Params :  Returns : void} testSelectorWantsUpdates{ Params :  Returns : void} init{ Params : Vertx,NodeSelector Returns : void} testSelectorDoesNotWantUpdates{ Params :  Returns : void} init{ Params : Vertx,NodeSelector Returns : void} testLocalConsumerNeverGetsMessagePublishedFromRemote{ Params :  Returns : void} testLocalConsumerNeverGetsMessageSentFromRemote{ Params :  Returns : void} handle{ Params : Message<Object> Returns : void} testRejectedClusterSerializableNotSent{ Params :  Returns : void} testRejectedClusterSerializableImplNotSent{ Params :  Returns : void} testRejectedSerializableNotSent{ Params :  Returns : void} testRejectedNotSent{ Params : Class<T>,T Returns : void} testRejectedClusterSerializableNotReceived{ Params :  Returns : void} testRejectedClusterSerializableImplNotReceived{ Params :  Returns : void} testRejectedSerializableNotReceived{ Params :  Returns : void} testRejectedNotReceived{ Params : Class<T>,T Returns : void} testMultiHeaders{ Params :  Returns : void} ,init registrationsUpdated wantsUpdatesFor init init handle ,,,,Handler ,,,,AtomicInteger ,: 
vert.x-master,io.vertx.core.eventbus,ClusteredEventBusTestBase,1,1,0,0,0,false,EventBusTestBase ,0 ,0 ,ADDRESS1: String ,getClusterManager{ Params :  Returns : ClusterManager} clusteredVertx{ Params : VertxOptions,Handler<AsyncResult<Vertx>> Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testRegisterRemote1{ Params :  Returns : void} testRegisterRemote2{ Params :  Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} handle{ Params : Message<T> Returns : void} handle{ Params : AsyncResult<Void> Returns : void} testMessageBodyInterceptor{ Params :  Returns : void} testClusteredUnregistration{ Params :  Returns : void} init{ Params : Vertx,NodeSelector Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} testMessagingInStopMethod{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,clusteredVertx shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish handle handle init registrationsUpdated start stop ,,,,,,,,FakeClusterManager ImmutableObjectCodec AtomicInteger AtomicInteger MyHandler MyRegisterHandler MyHandler MyRegisterHandler CountDownLatch StringLengthCodec StringLengthCodec DeliveryOptions CountDownLatch WrappedClusterManager WrappedNodeSelector AtomicInteger MyVerticle MyVerticle ,: 
vert.x-master,io.vertx.core.eventbus,MyHandler,1,0,0,0,0,false,EventBusTestBase ,0 ,0 ,,getClusterManager{ Params :  Returns : ClusterManager} clusteredVertx{ Params : VertxOptions,Handler<AsyncResult<Vertx>> Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testRegisterRemote1{ Params :  Returns : void} testRegisterRemote2{ Params :  Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} handle{ Params : Message<T> Returns : void} handle{ Params : AsyncResult<Void> Returns : void} testMessageBodyInterceptor{ Params :  Returns : void} testClusteredUnregistration{ Params :  Returns : void} init{ Params : Vertx,NodeSelector Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} testMessagingInStopMethod{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,clusteredVertx shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish handle handle init registrationsUpdated start stop ,,,,Handler ,,,,,: 
vert.x-master,io.vertx.core.eventbus,MyRegisterHandler,1,0,0,0,0,false,EventBusTestBase ,0 ,0 ,,getClusterManager{ Params :  Returns : ClusterManager} clusteredVertx{ Params : VertxOptions,Handler<AsyncResult<Vertx>> Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testRegisterRemote1{ Params :  Returns : void} testRegisterRemote2{ Params :  Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} handle{ Params : Message<T> Returns : void} handle{ Params : AsyncResult<Void> Returns : void} testMessageBodyInterceptor{ Params :  Returns : void} testClusteredUnregistration{ Params :  Returns : void} init{ Params : Vertx,NodeSelector Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} testMessagingInStopMethod{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,clusteredVertx shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish handle handle init registrationsUpdated start stop ,,,,Handler ,,,,,vertices[0]: 
vert.x-master,io.vertx.core.eventbus,MyVerticle,1,0,0,0,0,false,EventBusTestBase ,0 ,0 ,pingServerAddress: String pingClientAddress: String ,getClusterManager{ Params :  Returns : ClusterManager} clusteredVertx{ Params : VertxOptions,Handler<AsyncResult<Vertx>> Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testRegisterRemote1{ Params :  Returns : void} testRegisterRemote2{ Params :  Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} handle{ Params : Message<T> Returns : void} handle{ Params : AsyncResult<Void> Returns : void} testMessageBodyInterceptor{ Params :  Returns : void} testClusteredUnregistration{ Params :  Returns : void} init{ Params : Vertx,NodeSelector Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} testMessagingInStopMethod{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} stop{ Params : Promise<Void> Returns : void} ,clusteredVertx shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish handle handle init registrationsUpdated start stop ,,,,,,,,,stopPromise: 
vert.x-master,io.vertx.core.eventbus,ClusteredEventBusWithSSLTest,1,1,0,0,0,false,ClusteredEventBusTestBase ,0 ,0 ,options: EventBusOptions ,startNodes{ Params : int Returns : void} ,startNodes ,,,,,EventBusOptions ,,EventBusOptions ,EventBusOptions VertxOptions ,new VertxOptions(): , options
vert.x-master,io.vertx.core.eventbus,ClusterHostTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,setUp{ Params :  Returns : void} testClusterHostHintFromClusterManager{ Params :  Returns : void} clusterHost{ Params :  Returns : String} testClusterPublicHostHintFromClusterManager{ Params :  Returns : void} clusterHost{ Params :  Returns : String} clusterPublicHost{ Params :  Returns : String} testUserSuppliedHostPrecedence{ Params :  Returns : void} clusterHost{ Params :  Returns : String} clusterPublicHost{ Params :  Returns : String} ,setUp clusterHost clusterHost clusterPublicHost clusterHost clusterPublicHost ,,,,,,,,FakeClusterManager VertxOptions FakeClusterManager VertxOptions FakeClusterManager VertxOptions ,clusterManager: 
vert.x-master,io.vertx.core.eventbus,CustomNodeSelectorTest,1,1,0,0,0,false,VertxTestBase ,0 ,CustomNodeSelector ,vertices: List<Vertx> ,test{ Params :  Returns : void} tearDown{ Params :  Returns : void} init{ Params : Vertx,ClusterManager Returns : void} eventBusStarted{ Params :  Returns : void} selectForSend{ Params : Message<?>,Promise<String> Returns : void} selectForPublish{ Params : Message<?>,Promise<Iterable<String>> Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} registrationsLost{ Params :  Returns : void} ,tearDown init eventBusStarted selectForSend selectForPublish registrationsUpdated registrationsLost ,,,,,List<Vertx> ,,List<Vertx> ,JsonObject VertxBuilder CustomNodeSelector CountDownLatch ConcurrentHashMap CountDownLatch HashMap ArrayList ,super: 
vert.x-master,io.vertx.core.eventbus,CustomNodeSelector,3,2,0,1,0,false,VertxTestBase ,0 ,CustomNodeSelector ,clusterManager: ClusterManager rack: String ,test{ Params :  Returns : void} tearDown{ Params :  Returns : void} init{ Params : Vertx,ClusterManager Returns : void} eventBusStarted{ Params :  Returns : void} selectForSend{ Params : Message<?>,Promise<String> Returns : void} selectForPublish{ Params : Message<?>,Promise<Iterable<String>> Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} registrationsLost{ Params :  Returns : void} ,tearDown init eventBusStarted selectForSend selectForPublish registrationsUpdated registrationsLost ,,,,NodeSelector ,String ,,String ,ArrayList ,nodes: , i
vert.x-master,io.vertx.core.eventbus,DeliveryOptionsTest,1,1,0,0,0,false,0 ,0 ,0 ,,toJson{ Params :  Returns : void} ensureClonedHeaders{ Params :  Returns : void} ,,,,,,,,,JsonObject DeliveryOptions JsonObject JsonObject DeliveryOptions DeliveryOptions DeliveryOptions DeliveryOptions ,original: 
vert.x-master,io.vertx.core.eventbus,EventBusInterceptorTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,eb: EventBus ,testOutboundInterceptorOnSend{ Params :  Returns : void} testInterceptorsOnSend{ Params :  Returns : void} testOutboundInterceptorOnPublish{ Params :  Returns : void} testInterceptorsOnPublish{ Params :  Returns : void} testOutboundInterceptorNoNext{ Params :  Returns : void} testInboundInterceptorNoNext{ Params :  Returns : void} testMultipleOutboundInterceptors{ Params :  Returns : void} testRemoveInterceptor{ Params :  Returns : void} testOutboundInterceptorOnReply{ Params :  Returns : void} testInboundInterceptorOnReply{ Params :  Returns : void} testExceptionInOutboundInterceptor{ Params :  Returns : void} testExceptionInInboundInterceptor{ Params :  Returns : void} testInboundInterceptorContextOnSend{ Params :  Returns : void} testInboundInterceptorContextOnReply{ Params :  Returns : void} testInboundInterceptorContextOnReplyFailure{ Params :  Returns : void} testInboundInterceptorContext{ Params : boolean,boolean Returns : void} setUp{ Params :  Returns : void} ,setUp ,,,,,,,,AtomicInteger AtomicInteger AtomicInteger AtomicInteger AtomicInteger AtomicInteger AtomicInteger RuntimeException AtomicInteger RuntimeException AtomicReference AtomicReference ,vertx: 
vert.x-master,io.vertx.core.eventbus,EventBusRegistrationRaceTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,NUM_MSG: int TEST_ADDR: String count: AtomicInteger ,getOptions{ Params :  Returns : VertxOptions} metrics{ Params : VertxOptions Returns : VertxMetrics} createEventBusMetrics{ Params :  Returns : EventBusMetrics<Void>} scheduleMessage{ Params : Void,boolean Returns : void} messageDelivered{ Params : Void,boolean Returns : void} discardMessage{ Params : Void,boolean,Message<?> Returns : void} theTest{ Params :  Returns : void} threadA{ Params : AtomicInteger Returns : void} threadB{ Params : AtomicInteger Returns : void} ,getOptions metrics createEventBusMetrics scheduleMessage messageDelivered discardMessage ,,,,,AtomicInteger ,,AtomicInteger ,AtomicInteger MetricsOptions VertxMetricsFactory VertxMetrics EventBusMetrics AtomicInteger Thread Thread ,eventBus: , TEST_ADDR, count
vert.x-master,io.vertx.core.eventbus,EventBusTestBase,1,1,1,0,0,false,VertxTestBase ,0 ,MySystemDecoder NullNameCodec MyPOJOEncoder1 MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec StringLengthCodec ImmutableObject ImmutableObjectCodec ,ADDRESS1: String ADDRESS2: String ,testSendNull{ Params :  Returns : void} testReplyNull{ Params :  Returns : void} testPublishNull{ Params :  Returns : void} testSendString{ Params :  Returns : void} testReplyString{ Params :  Returns : void} testPublishString{ Params :  Returns : void} testSendBooleanTrue{ Params :  Returns : void} testSendBooleanFalse{ Params :  Returns : void} testReplyBooleanTrue{ Params :  Returns : void} testReplyBooleanFalse{ Params :  Returns : void} testPublishBooleanTrue{ Params :  Returns : void} testPublishBooleanFalse{ Params :  Returns : void} testSendBuffer{ Params :  Returns : void} testReplyBuffer{ Params :  Returns : void} testPublishBuffer{ Params :  Returns : void} testSendByte{ Params :  Returns : void} testReplyByte{ Params :  Returns : void} testPublishByte{ Params :  Returns : void} testSendByteArray{ Params :  Returns : void} testReplyByteArray{ Params :  Returns : void} testPublishByteArray{ Params :  Returns : void} testSendCharacter{ Params :  Returns : void} testReplyCharacter{ Params :  Returns : void} testPublishCharacter{ Params :  Returns : void} testSendDouble{ Params :  Returns : void} testReplyDouble{ Params :  Returns : void} testPublishDouble{ Params :  Returns : void} testSendFloat{ Params :  Returns : void} testReplyFloat{ Params :  Returns : void} testPublishFloat{ Params :  Returns : void} testSendInteger{ Params :  Returns : void} testReplyInteger{ Params :  Returns : void} testPublishInteger{ Params :  Returns : void} testSendLong{ Params :  Returns : void} testReplyLong{ Params :  Returns : void} testPublishLong{ Params :  Returns : void} testSendShort{ Params :  Returns : void} testReplyShort{ Params :  Returns : void} testPublishShort{ Params :  Returns : void} testSendBigInteger{ Params :  Returns : void} testReplyBigInteger{ Params :  Returns : void} testPublishBigInteger{ Params :  Returns : void} testSendBigDecimal{ Params :  Returns : void} testReplyBigDecimal{ Params :  Returns : void} testPublishBigDecimal{ Params :  Returns : void} testSendJsonArray{ Params :  Returns : void} testReplyJsonArray{ Params :  Returns : void} testPublishJsonArray{ Params :  Returns : void} testSendJsonObject{ Params :  Returns : void} testReplyJsonObject{ Params :  Returns : void} testPublishJsonObject{ Params :  Returns : void} testSendClusterSerializable{ Params :  Returns : void} testReplyClusterSerializable{ Params :  Returns : void} testPublishClusterSerializable{ Params :  Returns : void} testSendClusterSerializableImpl{ Params :  Returns : void} testReplyClusterSerializableImpl{ Params :  Returns : void} testPublishClusterSerializableImpl{ Params :  Returns : void} testSendSerializable{ Params :  Returns : void} testReplySerializable{ Params :  Returns : void} testPublishSerializable{ Params :  Returns : void} testSendWithCodecFromSelector{ Params :  Returns : void} testReplyWithCodecFromSelector{ Params :  Returns : void} testPublishWithCodecFromSelector{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSendWithHeaders{ Params :  Returns : void} testSendWithDeliveryOptionsButNoHeaders{ Params :  Returns : void} testReplyWithHeaders{ Params :  Returns : void} testReplyFromWorker{ Params :  Returns : void} start{ Params :  Returns : void} testSendFromExecuteBlocking{ Params :  Returns : void} testNoHandlersCallbackContext{ Params :  Returns : void} start{ Params :  Returns : void} testSend{ Params : T Returns : void} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyPOJO} transform{ Params : MyPOJO Returns : MyPOJO} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} getStr{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,MyReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyReplyException} transform{ Params : MyReplyException Returns : MyReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : String Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,ImmutableObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : ImmutableObject} transform{ Params : ImmutableObject Returns : ImmutableObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,start start encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID ,,,shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish ,,,,,JsonArray JsonArray JsonArray JsonObject JsonObject JsonObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject SomeSerializableObject SomeSerializableObject SomeSerializableObject ImmutableObject ImmutableObject ImmutableObject DeliveryOptions DeliveryOptions DeliveryOptions CountDownLatch AbstractVerticle DeploymentOptions CountDownLatch AbstractVerticle DeploymentOptions String String MyPOJO MyPOJO String MyReplyException ImmutableObject ,: , val, null
vert.x-master,io.vertx.core.eventbus,MySystemDecoder,3,1,0,1,0,false,VertxTestBase ,0 ,MySystemDecoder NullNameCodec MyPOJOEncoder1 MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec StringLengthCodec ImmutableObject ImmutableObjectCodec ,,testSendNull{ Params :  Returns : void} testReplyNull{ Params :  Returns : void} testPublishNull{ Params :  Returns : void} testSendString{ Params :  Returns : void} testReplyString{ Params :  Returns : void} testPublishString{ Params :  Returns : void} testSendBooleanTrue{ Params :  Returns : void} testSendBooleanFalse{ Params :  Returns : void} testReplyBooleanTrue{ Params :  Returns : void} testReplyBooleanFalse{ Params :  Returns : void} testPublishBooleanTrue{ Params :  Returns : void} testPublishBooleanFalse{ Params :  Returns : void} testSendBuffer{ Params :  Returns : void} testReplyBuffer{ Params :  Returns : void} testPublishBuffer{ Params :  Returns : void} testSendByte{ Params :  Returns : void} testReplyByte{ Params :  Returns : void} testPublishByte{ Params :  Returns : void} testSendByteArray{ Params :  Returns : void} testReplyByteArray{ Params :  Returns : void} testPublishByteArray{ Params :  Returns : void} testSendCharacter{ Params :  Returns : void} testReplyCharacter{ Params :  Returns : void} testPublishCharacter{ Params :  Returns : void} testSendDouble{ Params :  Returns : void} testReplyDouble{ Params :  Returns : void} testPublishDouble{ Params :  Returns : void} testSendFloat{ Params :  Returns : void} testReplyFloat{ Params :  Returns : void} testPublishFloat{ Params :  Returns : void} testSendInteger{ Params :  Returns : void} testReplyInteger{ Params :  Returns : void} testPublishInteger{ Params :  Returns : void} testSendLong{ Params :  Returns : void} testReplyLong{ Params :  Returns : void} testPublishLong{ Params :  Returns : void} testSendShort{ Params :  Returns : void} testReplyShort{ Params :  Returns : void} testPublishShort{ Params :  Returns : void} testSendBigInteger{ Params :  Returns : void} testReplyBigInteger{ Params :  Returns : void} testPublishBigInteger{ Params :  Returns : void} testSendBigDecimal{ Params :  Returns : void} testReplyBigDecimal{ Params :  Returns : void} testPublishBigDecimal{ Params :  Returns : void} testSendJsonArray{ Params :  Returns : void} testReplyJsonArray{ Params :  Returns : void} testPublishJsonArray{ Params :  Returns : void} testSendJsonObject{ Params :  Returns : void} testReplyJsonObject{ Params :  Returns : void} testPublishJsonObject{ Params :  Returns : void} testSendClusterSerializable{ Params :  Returns : void} testReplyClusterSerializable{ Params :  Returns : void} testPublishClusterSerializable{ Params :  Returns : void} testSendClusterSerializableImpl{ Params :  Returns : void} testReplyClusterSerializableImpl{ Params :  Returns : void} testPublishClusterSerializableImpl{ Params :  Returns : void} testSendSerializable{ Params :  Returns : void} testReplySerializable{ Params :  Returns : void} testPublishSerializable{ Params :  Returns : void} testSendWithCodecFromSelector{ Params :  Returns : void} testReplyWithCodecFromSelector{ Params :  Returns : void} testPublishWithCodecFromSelector{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSendWithHeaders{ Params :  Returns : void} testSendWithDeliveryOptionsButNoHeaders{ Params :  Returns : void} testReplyWithHeaders{ Params :  Returns : void} testReplyFromWorker{ Params :  Returns : void} start{ Params :  Returns : void} testSendFromExecuteBlocking{ Params :  Returns : void} testNoHandlersCallbackContext{ Params :  Returns : void} start{ Params :  Returns : void} testSend{ Params : T Returns : void} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyPOJO} transform{ Params : MyPOJO Returns : MyPOJO} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} getStr{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,MyReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyReplyException} transform{ Params : MyReplyException Returns : MyReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : String Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,ImmutableObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : ImmutableObject} transform{ Params : ImmutableObject Returns : ImmutableObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,start start encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID ,,,shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish ,MessageCodec ,,,,,: , val, null
vert.x-master,io.vertx.core.eventbus,NullNameCodec,3,1,0,1,0,false,VertxTestBase ,0 ,MySystemDecoder NullNameCodec MyPOJOEncoder1 MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec StringLengthCodec ImmutableObject ImmutableObjectCodec ,,testSendNull{ Params :  Returns : void} testReplyNull{ Params :  Returns : void} testPublishNull{ Params :  Returns : void} testSendString{ Params :  Returns : void} testReplyString{ Params :  Returns : void} testPublishString{ Params :  Returns : void} testSendBooleanTrue{ Params :  Returns : void} testSendBooleanFalse{ Params :  Returns : void} testReplyBooleanTrue{ Params :  Returns : void} testReplyBooleanFalse{ Params :  Returns : void} testPublishBooleanTrue{ Params :  Returns : void} testPublishBooleanFalse{ Params :  Returns : void} testSendBuffer{ Params :  Returns : void} testReplyBuffer{ Params :  Returns : void} testPublishBuffer{ Params :  Returns : void} testSendByte{ Params :  Returns : void} testReplyByte{ Params :  Returns : void} testPublishByte{ Params :  Returns : void} testSendByteArray{ Params :  Returns : void} testReplyByteArray{ Params :  Returns : void} testPublishByteArray{ Params :  Returns : void} testSendCharacter{ Params :  Returns : void} testReplyCharacter{ Params :  Returns : void} testPublishCharacter{ Params :  Returns : void} testSendDouble{ Params :  Returns : void} testReplyDouble{ Params :  Returns : void} testPublishDouble{ Params :  Returns : void} testSendFloat{ Params :  Returns : void} testReplyFloat{ Params :  Returns : void} testPublishFloat{ Params :  Returns : void} testSendInteger{ Params :  Returns : void} testReplyInteger{ Params :  Returns : void} testPublishInteger{ Params :  Returns : void} testSendLong{ Params :  Returns : void} testReplyLong{ Params :  Returns : void} testPublishLong{ Params :  Returns : void} testSendShort{ Params :  Returns : void} testReplyShort{ Params :  Returns : void} testPublishShort{ Params :  Returns : void} testSendBigInteger{ Params :  Returns : void} testReplyBigInteger{ Params :  Returns : void} testPublishBigInteger{ Params :  Returns : void} testSendBigDecimal{ Params :  Returns : void} testReplyBigDecimal{ Params :  Returns : void} testPublishBigDecimal{ Params :  Returns : void} testSendJsonArray{ Params :  Returns : void} testReplyJsonArray{ Params :  Returns : void} testPublishJsonArray{ Params :  Returns : void} testSendJsonObject{ Params :  Returns : void} testReplyJsonObject{ Params :  Returns : void} testPublishJsonObject{ Params :  Returns : void} testSendClusterSerializable{ Params :  Returns : void} testReplyClusterSerializable{ Params :  Returns : void} testPublishClusterSerializable{ Params :  Returns : void} testSendClusterSerializableImpl{ Params :  Returns : void} testReplyClusterSerializableImpl{ Params :  Returns : void} testPublishClusterSerializableImpl{ Params :  Returns : void} testSendSerializable{ Params :  Returns : void} testReplySerializable{ Params :  Returns : void} testPublishSerializable{ Params :  Returns : void} testSendWithCodecFromSelector{ Params :  Returns : void} testReplyWithCodecFromSelector{ Params :  Returns : void} testPublishWithCodecFromSelector{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSendWithHeaders{ Params :  Returns : void} testSendWithDeliveryOptionsButNoHeaders{ Params :  Returns : void} testReplyWithHeaders{ Params :  Returns : void} testReplyFromWorker{ Params :  Returns : void} start{ Params :  Returns : void} testSendFromExecuteBlocking{ Params :  Returns : void} testNoHandlersCallbackContext{ Params :  Returns : void} start{ Params :  Returns : void} testSend{ Params : T Returns : void} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyPOJO} transform{ Params : MyPOJO Returns : MyPOJO} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} getStr{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,MyReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyReplyException} transform{ Params : MyReplyException Returns : MyReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : String Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,ImmutableObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : ImmutableObject} transform{ Params : ImmutableObject Returns : ImmutableObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,start start encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID ,,,shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish ,MessageCodec ,,,,,: , val, null
vert.x-master,io.vertx.core.eventbus,MyPOJOEncoder1,3,1,0,1,0,false,VertxTestBase ,0 ,MySystemDecoder NullNameCodec MyPOJOEncoder1 MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec StringLengthCodec ImmutableObject ImmutableObjectCodec ,,testSendNull{ Params :  Returns : void} testReplyNull{ Params :  Returns : void} testPublishNull{ Params :  Returns : void} testSendString{ Params :  Returns : void} testReplyString{ Params :  Returns : void} testPublishString{ Params :  Returns : void} testSendBooleanTrue{ Params :  Returns : void} testSendBooleanFalse{ Params :  Returns : void} testReplyBooleanTrue{ Params :  Returns : void} testReplyBooleanFalse{ Params :  Returns : void} testPublishBooleanTrue{ Params :  Returns : void} testPublishBooleanFalse{ Params :  Returns : void} testSendBuffer{ Params :  Returns : void} testReplyBuffer{ Params :  Returns : void} testPublishBuffer{ Params :  Returns : void} testSendByte{ Params :  Returns : void} testReplyByte{ Params :  Returns : void} testPublishByte{ Params :  Returns : void} testSendByteArray{ Params :  Returns : void} testReplyByteArray{ Params :  Returns : void} testPublishByteArray{ Params :  Returns : void} testSendCharacter{ Params :  Returns : void} testReplyCharacter{ Params :  Returns : void} testPublishCharacter{ Params :  Returns : void} testSendDouble{ Params :  Returns : void} testReplyDouble{ Params :  Returns : void} testPublishDouble{ Params :  Returns : void} testSendFloat{ Params :  Returns : void} testReplyFloat{ Params :  Returns : void} testPublishFloat{ Params :  Returns : void} testSendInteger{ Params :  Returns : void} testReplyInteger{ Params :  Returns : void} testPublishInteger{ Params :  Returns : void} testSendLong{ Params :  Returns : void} testReplyLong{ Params :  Returns : void} testPublishLong{ Params :  Returns : void} testSendShort{ Params :  Returns : void} testReplyShort{ Params :  Returns : void} testPublishShort{ Params :  Returns : void} testSendBigInteger{ Params :  Returns : void} testReplyBigInteger{ Params :  Returns : void} testPublishBigInteger{ Params :  Returns : void} testSendBigDecimal{ Params :  Returns : void} testReplyBigDecimal{ Params :  Returns : void} testPublishBigDecimal{ Params :  Returns : void} testSendJsonArray{ Params :  Returns : void} testReplyJsonArray{ Params :  Returns : void} testPublishJsonArray{ Params :  Returns : void} testSendJsonObject{ Params :  Returns : void} testReplyJsonObject{ Params :  Returns : void} testPublishJsonObject{ Params :  Returns : void} testSendClusterSerializable{ Params :  Returns : void} testReplyClusterSerializable{ Params :  Returns : void} testPublishClusterSerializable{ Params :  Returns : void} testSendClusterSerializableImpl{ Params :  Returns : void} testReplyClusterSerializableImpl{ Params :  Returns : void} testPublishClusterSerializableImpl{ Params :  Returns : void} testSendSerializable{ Params :  Returns : void} testReplySerializable{ Params :  Returns : void} testPublishSerializable{ Params :  Returns : void} testSendWithCodecFromSelector{ Params :  Returns : void} testReplyWithCodecFromSelector{ Params :  Returns : void} testPublishWithCodecFromSelector{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSendWithHeaders{ Params :  Returns : void} testSendWithDeliveryOptionsButNoHeaders{ Params :  Returns : void} testReplyWithHeaders{ Params :  Returns : void} testReplyFromWorker{ Params :  Returns : void} start{ Params :  Returns : void} testSendFromExecuteBlocking{ Params :  Returns : void} testNoHandlersCallbackContext{ Params :  Returns : void} start{ Params :  Returns : void} testSend{ Params : T Returns : void} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyPOJO} transform{ Params : MyPOJO Returns : MyPOJO} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} getStr{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,MyReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyReplyException} transform{ Params : MyReplyException Returns : MyReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : String Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,ImmutableObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : ImmutableObject} transform{ Params : ImmutableObject Returns : ImmutableObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,start start encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID ,,,shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish ,MessageCodec ,,,,String ,myPOJO: 
vert.x-master,io.vertx.core.eventbus,MyPOJOEncoder2,3,1,0,1,0,false,VertxTestBase ,0 ,MySystemDecoder NullNameCodec MyPOJOEncoder1 MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec StringLengthCodec ImmutableObject ImmutableObjectCodec ,,testSendNull{ Params :  Returns : void} testReplyNull{ Params :  Returns : void} testPublishNull{ Params :  Returns : void} testSendString{ Params :  Returns : void} testReplyString{ Params :  Returns : void} testPublishString{ Params :  Returns : void} testSendBooleanTrue{ Params :  Returns : void} testSendBooleanFalse{ Params :  Returns : void} testReplyBooleanTrue{ Params :  Returns : void} testReplyBooleanFalse{ Params :  Returns : void} testPublishBooleanTrue{ Params :  Returns : void} testPublishBooleanFalse{ Params :  Returns : void} testSendBuffer{ Params :  Returns : void} testReplyBuffer{ Params :  Returns : void} testPublishBuffer{ Params :  Returns : void} testSendByte{ Params :  Returns : void} testReplyByte{ Params :  Returns : void} testPublishByte{ Params :  Returns : void} testSendByteArray{ Params :  Returns : void} testReplyByteArray{ Params :  Returns : void} testPublishByteArray{ Params :  Returns : void} testSendCharacter{ Params :  Returns : void} testReplyCharacter{ Params :  Returns : void} testPublishCharacter{ Params :  Returns : void} testSendDouble{ Params :  Returns : void} testReplyDouble{ Params :  Returns : void} testPublishDouble{ Params :  Returns : void} testSendFloat{ Params :  Returns : void} testReplyFloat{ Params :  Returns : void} testPublishFloat{ Params :  Returns : void} testSendInteger{ Params :  Returns : void} testReplyInteger{ Params :  Returns : void} testPublishInteger{ Params :  Returns : void} testSendLong{ Params :  Returns : void} testReplyLong{ Params :  Returns : void} testPublishLong{ Params :  Returns : void} testSendShort{ Params :  Returns : void} testReplyShort{ Params :  Returns : void} testPublishShort{ Params :  Returns : void} testSendBigInteger{ Params :  Returns : void} testReplyBigInteger{ Params :  Returns : void} testPublishBigInteger{ Params :  Returns : void} testSendBigDecimal{ Params :  Returns : void} testReplyBigDecimal{ Params :  Returns : void} testPublishBigDecimal{ Params :  Returns : void} testSendJsonArray{ Params :  Returns : void} testReplyJsonArray{ Params :  Returns : void} testPublishJsonArray{ Params :  Returns : void} testSendJsonObject{ Params :  Returns : void} testReplyJsonObject{ Params :  Returns : void} testPublishJsonObject{ Params :  Returns : void} testSendClusterSerializable{ Params :  Returns : void} testReplyClusterSerializable{ Params :  Returns : void} testPublishClusterSerializable{ Params :  Returns : void} testSendClusterSerializableImpl{ Params :  Returns : void} testReplyClusterSerializableImpl{ Params :  Returns : void} testPublishClusterSerializableImpl{ Params :  Returns : void} testSendSerializable{ Params :  Returns : void} testReplySerializable{ Params :  Returns : void} testPublishSerializable{ Params :  Returns : void} testSendWithCodecFromSelector{ Params :  Returns : void} testReplyWithCodecFromSelector{ Params :  Returns : void} testPublishWithCodecFromSelector{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSendWithHeaders{ Params :  Returns : void} testSendWithDeliveryOptionsButNoHeaders{ Params :  Returns : void} testReplyWithHeaders{ Params :  Returns : void} testReplyFromWorker{ Params :  Returns : void} start{ Params :  Returns : void} testSendFromExecuteBlocking{ Params :  Returns : void} testNoHandlersCallbackContext{ Params :  Returns : void} start{ Params :  Returns : void} testSend{ Params : T Returns : void} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyPOJO} transform{ Params : MyPOJO Returns : MyPOJO} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} getStr{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,MyReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyReplyException} transform{ Params : MyReplyException Returns : MyReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : String Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,ImmutableObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : ImmutableObject} transform{ Params : ImmutableObject Returns : ImmutableObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,start start encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID ,,,shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish ,MessageCodec ,,,,String MyPOJO MyPOJO ,myPOJO: 
vert.x-master,io.vertx.core.eventbus,MyPOJO,3,1,0,1,0,false,VertxTestBase ,0 ,MySystemDecoder NullNameCodec MyPOJOEncoder1 MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec StringLengthCodec ImmutableObject ImmutableObjectCodec ,str: String ,testSendNull{ Params :  Returns : void} testReplyNull{ Params :  Returns : void} testPublishNull{ Params :  Returns : void} testSendString{ Params :  Returns : void} testReplyString{ Params :  Returns : void} testPublishString{ Params :  Returns : void} testSendBooleanTrue{ Params :  Returns : void} testSendBooleanFalse{ Params :  Returns : void} testReplyBooleanTrue{ Params :  Returns : void} testReplyBooleanFalse{ Params :  Returns : void} testPublishBooleanTrue{ Params :  Returns : void} testPublishBooleanFalse{ Params :  Returns : void} testSendBuffer{ Params :  Returns : void} testReplyBuffer{ Params :  Returns : void} testPublishBuffer{ Params :  Returns : void} testSendByte{ Params :  Returns : void} testReplyByte{ Params :  Returns : void} testPublishByte{ Params :  Returns : void} testSendByteArray{ Params :  Returns : void} testReplyByteArray{ Params :  Returns : void} testPublishByteArray{ Params :  Returns : void} testSendCharacter{ Params :  Returns : void} testReplyCharacter{ Params :  Returns : void} testPublishCharacter{ Params :  Returns : void} testSendDouble{ Params :  Returns : void} testReplyDouble{ Params :  Returns : void} testPublishDouble{ Params :  Returns : void} testSendFloat{ Params :  Returns : void} testReplyFloat{ Params :  Returns : void} testPublishFloat{ Params :  Returns : void} testSendInteger{ Params :  Returns : void} testReplyInteger{ Params :  Returns : void} testPublishInteger{ Params :  Returns : void} testSendLong{ Params :  Returns : void} testReplyLong{ Params :  Returns : void} testPublishLong{ Params :  Returns : void} testSendShort{ Params :  Returns : void} testReplyShort{ Params :  Returns : void} testPublishShort{ Params :  Returns : void} testSendBigInteger{ Params :  Returns : void} testReplyBigInteger{ Params :  Returns : void} testPublishBigInteger{ Params :  Returns : void} testSendBigDecimal{ Params :  Returns : void} testReplyBigDecimal{ Params :  Returns : void} testPublishBigDecimal{ Params :  Returns : void} testSendJsonArray{ Params :  Returns : void} testReplyJsonArray{ Params :  Returns : void} testPublishJsonArray{ Params :  Returns : void} testSendJsonObject{ Params :  Returns : void} testReplyJsonObject{ Params :  Returns : void} testPublishJsonObject{ Params :  Returns : void} testSendClusterSerializable{ Params :  Returns : void} testReplyClusterSerializable{ Params :  Returns : void} testPublishClusterSerializable{ Params :  Returns : void} testSendClusterSerializableImpl{ Params :  Returns : void} testReplyClusterSerializableImpl{ Params :  Returns : void} testPublishClusterSerializableImpl{ Params :  Returns : void} testSendSerializable{ Params :  Returns : void} testReplySerializable{ Params :  Returns : void} testPublishSerializable{ Params :  Returns : void} testSendWithCodecFromSelector{ Params :  Returns : void} testReplyWithCodecFromSelector{ Params :  Returns : void} testPublishWithCodecFromSelector{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSendWithHeaders{ Params :  Returns : void} testSendWithDeliveryOptionsButNoHeaders{ Params :  Returns : void} testReplyWithHeaders{ Params :  Returns : void} testReplyFromWorker{ Params :  Returns : void} start{ Params :  Returns : void} testSendFromExecuteBlocking{ Params :  Returns : void} testNoHandlersCallbackContext{ Params :  Returns : void} start{ Params :  Returns : void} testSend{ Params : T Returns : void} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyPOJO} transform{ Params : MyPOJO Returns : MyPOJO} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} getStr{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,MyReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyReplyException} transform{ Params : MyReplyException Returns : MyReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : String Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,ImmutableObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : ImmutableObject} transform{ Params : ImmutableObject Returns : ImmutableObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,start start encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID ,,,shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish ,,String ,,String ,,str: 
vert.x-master,io.vertx.core.eventbus,MyReplyException,3,1,0,1,0,false,VertxTestBase ,0 ,MySystemDecoder NullNameCodec MyPOJOEncoder1 MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec StringLengthCodec ImmutableObject ImmutableObjectCodec ,,testSendNull{ Params :  Returns : void} testReplyNull{ Params :  Returns : void} testPublishNull{ Params :  Returns : void} testSendString{ Params :  Returns : void} testReplyString{ Params :  Returns : void} testPublishString{ Params :  Returns : void} testSendBooleanTrue{ Params :  Returns : void} testSendBooleanFalse{ Params :  Returns : void} testReplyBooleanTrue{ Params :  Returns : void} testReplyBooleanFalse{ Params :  Returns : void} testPublishBooleanTrue{ Params :  Returns : void} testPublishBooleanFalse{ Params :  Returns : void} testSendBuffer{ Params :  Returns : void} testReplyBuffer{ Params :  Returns : void} testPublishBuffer{ Params :  Returns : void} testSendByte{ Params :  Returns : void} testReplyByte{ Params :  Returns : void} testPublishByte{ Params :  Returns : void} testSendByteArray{ Params :  Returns : void} testReplyByteArray{ Params :  Returns : void} testPublishByteArray{ Params :  Returns : void} testSendCharacter{ Params :  Returns : void} testReplyCharacter{ Params :  Returns : void} testPublishCharacter{ Params :  Returns : void} testSendDouble{ Params :  Returns : void} testReplyDouble{ Params :  Returns : void} testPublishDouble{ Params :  Returns : void} testSendFloat{ Params :  Returns : void} testReplyFloat{ Params :  Returns : void} testPublishFloat{ Params :  Returns : void} testSendInteger{ Params :  Returns : void} testReplyInteger{ Params :  Returns : void} testPublishInteger{ Params :  Returns : void} testSendLong{ Params :  Returns : void} testReplyLong{ Params :  Returns : void} testPublishLong{ Params :  Returns : void} testSendShort{ Params :  Returns : void} testReplyShort{ Params :  Returns : void} testPublishShort{ Params :  Returns : void} testSendBigInteger{ Params :  Returns : void} testReplyBigInteger{ Params :  Returns : void} testPublishBigInteger{ Params :  Returns : void} testSendBigDecimal{ Params :  Returns : void} testReplyBigDecimal{ Params :  Returns : void} testPublishBigDecimal{ Params :  Returns : void} testSendJsonArray{ Params :  Returns : void} testReplyJsonArray{ Params :  Returns : void} testPublishJsonArray{ Params :  Returns : void} testSendJsonObject{ Params :  Returns : void} testReplyJsonObject{ Params :  Returns : void} testPublishJsonObject{ Params :  Returns : void} testSendClusterSerializable{ Params :  Returns : void} testReplyClusterSerializable{ Params :  Returns : void} testPublishClusterSerializable{ Params :  Returns : void} testSendClusterSerializableImpl{ Params :  Returns : void} testReplyClusterSerializableImpl{ Params :  Returns : void} testPublishClusterSerializableImpl{ Params :  Returns : void} testSendSerializable{ Params :  Returns : void} testReplySerializable{ Params :  Returns : void} testPublishSerializable{ Params :  Returns : void} testSendWithCodecFromSelector{ Params :  Returns : void} testReplyWithCodecFromSelector{ Params :  Returns : void} testPublishWithCodecFromSelector{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSendWithHeaders{ Params :  Returns : void} testSendWithDeliveryOptionsButNoHeaders{ Params :  Returns : void} testReplyWithHeaders{ Params :  Returns : void} testReplyFromWorker{ Params :  Returns : void} start{ Params :  Returns : void} testSendFromExecuteBlocking{ Params :  Returns : void} testNoHandlersCallbackContext{ Params :  Returns : void} start{ Params :  Returns : void} testSend{ Params : T Returns : void} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyPOJO} transform{ Params : MyPOJO Returns : MyPOJO} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} getStr{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,MyReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyReplyException} transform{ Params : MyReplyException Returns : MyReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : String Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,ImmutableObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : ImmutableObject} transform{ Params : ImmutableObject Returns : ImmutableObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,start start encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID ,,,shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish ,,,,,,null
vert.x-master,io.vertx.core.eventbus,MyReplyExceptionMessageCodec,3,1,0,1,0,false,VertxTestBase ,0 ,MySystemDecoder NullNameCodec MyPOJOEncoder1 MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec StringLengthCodec ImmutableObject ImmutableObjectCodec ,,testSendNull{ Params :  Returns : void} testReplyNull{ Params :  Returns : void} testPublishNull{ Params :  Returns : void} testSendString{ Params :  Returns : void} testReplyString{ Params :  Returns : void} testPublishString{ Params :  Returns : void} testSendBooleanTrue{ Params :  Returns : void} testSendBooleanFalse{ Params :  Returns : void} testReplyBooleanTrue{ Params :  Returns : void} testReplyBooleanFalse{ Params :  Returns : void} testPublishBooleanTrue{ Params :  Returns : void} testPublishBooleanFalse{ Params :  Returns : void} testSendBuffer{ Params :  Returns : void} testReplyBuffer{ Params :  Returns : void} testPublishBuffer{ Params :  Returns : void} testSendByte{ Params :  Returns : void} testReplyByte{ Params :  Returns : void} testPublishByte{ Params :  Returns : void} testSendByteArray{ Params :  Returns : void} testReplyByteArray{ Params :  Returns : void} testPublishByteArray{ Params :  Returns : void} testSendCharacter{ Params :  Returns : void} testReplyCharacter{ Params :  Returns : void} testPublishCharacter{ Params :  Returns : void} testSendDouble{ Params :  Returns : void} testReplyDouble{ Params :  Returns : void} testPublishDouble{ Params :  Returns : void} testSendFloat{ Params :  Returns : void} testReplyFloat{ Params :  Returns : void} testPublishFloat{ Params :  Returns : void} testSendInteger{ Params :  Returns : void} testReplyInteger{ Params :  Returns : void} testPublishInteger{ Params :  Returns : void} testSendLong{ Params :  Returns : void} testReplyLong{ Params :  Returns : void} testPublishLong{ Params :  Returns : void} testSendShort{ Params :  Returns : void} testReplyShort{ Params :  Returns : void} testPublishShort{ Params :  Returns : void} testSendBigInteger{ Params :  Returns : void} testReplyBigInteger{ Params :  Returns : void} testPublishBigInteger{ Params :  Returns : void} testSendBigDecimal{ Params :  Returns : void} testReplyBigDecimal{ Params :  Returns : void} testPublishBigDecimal{ Params :  Returns : void} testSendJsonArray{ Params :  Returns : void} testReplyJsonArray{ Params :  Returns : void} testPublishJsonArray{ Params :  Returns : void} testSendJsonObject{ Params :  Returns : void} testReplyJsonObject{ Params :  Returns : void} testPublishJsonObject{ Params :  Returns : void} testSendClusterSerializable{ Params :  Returns : void} testReplyClusterSerializable{ Params :  Returns : void} testPublishClusterSerializable{ Params :  Returns : void} testSendClusterSerializableImpl{ Params :  Returns : void} testReplyClusterSerializableImpl{ Params :  Returns : void} testPublishClusterSerializableImpl{ Params :  Returns : void} testSendSerializable{ Params :  Returns : void} testReplySerializable{ Params :  Returns : void} testPublishSerializable{ Params :  Returns : void} testSendWithCodecFromSelector{ Params :  Returns : void} testReplyWithCodecFromSelector{ Params :  Returns : void} testPublishWithCodecFromSelector{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSendWithHeaders{ Params :  Returns : void} testSendWithDeliveryOptionsButNoHeaders{ Params :  Returns : void} testReplyWithHeaders{ Params :  Returns : void} testReplyFromWorker{ Params :  Returns : void} start{ Params :  Returns : void} testSendFromExecuteBlocking{ Params :  Returns : void} testNoHandlersCallbackContext{ Params :  Returns : void} start{ Params :  Returns : void} testSend{ Params : T Returns : void} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyPOJO} transform{ Params : MyPOJO Returns : MyPOJO} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} getStr{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,MyReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyReplyException} transform{ Params : MyReplyException Returns : MyReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : String Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,ImmutableObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : ImmutableObject} transform{ Params : ImmutableObject Returns : ImmutableObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,start start encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID ,,,shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish ,MessageCodec ,,,,String MyReplyException ,buffer: , pos, pos + strLength
vert.x-master,io.vertx.core.eventbus,StringLengthCodec,3,1,0,1,0,false,VertxTestBase ,0 ,MySystemDecoder NullNameCodec MyPOJOEncoder1 MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec StringLengthCodec ImmutableObject ImmutableObjectCodec ,,testSendNull{ Params :  Returns : void} testReplyNull{ Params :  Returns : void} testPublishNull{ Params :  Returns : void} testSendString{ Params :  Returns : void} testReplyString{ Params :  Returns : void} testPublishString{ Params :  Returns : void} testSendBooleanTrue{ Params :  Returns : void} testSendBooleanFalse{ Params :  Returns : void} testReplyBooleanTrue{ Params :  Returns : void} testReplyBooleanFalse{ Params :  Returns : void} testPublishBooleanTrue{ Params :  Returns : void} testPublishBooleanFalse{ Params :  Returns : void} testSendBuffer{ Params :  Returns : void} testReplyBuffer{ Params :  Returns : void} testPublishBuffer{ Params :  Returns : void} testSendByte{ Params :  Returns : void} testReplyByte{ Params :  Returns : void} testPublishByte{ Params :  Returns : void} testSendByteArray{ Params :  Returns : void} testReplyByteArray{ Params :  Returns : void} testPublishByteArray{ Params :  Returns : void} testSendCharacter{ Params :  Returns : void} testReplyCharacter{ Params :  Returns : void} testPublishCharacter{ Params :  Returns : void} testSendDouble{ Params :  Returns : void} testReplyDouble{ Params :  Returns : void} testPublishDouble{ Params :  Returns : void} testSendFloat{ Params :  Returns : void} testReplyFloat{ Params :  Returns : void} testPublishFloat{ Params :  Returns : void} testSendInteger{ Params :  Returns : void} testReplyInteger{ Params :  Returns : void} testPublishInteger{ Params :  Returns : void} testSendLong{ Params :  Returns : void} testReplyLong{ Params :  Returns : void} testPublishLong{ Params :  Returns : void} testSendShort{ Params :  Returns : void} testReplyShort{ Params :  Returns : void} testPublishShort{ Params :  Returns : void} testSendBigInteger{ Params :  Returns : void} testReplyBigInteger{ Params :  Returns : void} testPublishBigInteger{ Params :  Returns : void} testSendBigDecimal{ Params :  Returns : void} testReplyBigDecimal{ Params :  Returns : void} testPublishBigDecimal{ Params :  Returns : void} testSendJsonArray{ Params :  Returns : void} testReplyJsonArray{ Params :  Returns : void} testPublishJsonArray{ Params :  Returns : void} testSendJsonObject{ Params :  Returns : void} testReplyJsonObject{ Params :  Returns : void} testPublishJsonObject{ Params :  Returns : void} testSendClusterSerializable{ Params :  Returns : void} testReplyClusterSerializable{ Params :  Returns : void} testPublishClusterSerializable{ Params :  Returns : void} testSendClusterSerializableImpl{ Params :  Returns : void} testReplyClusterSerializableImpl{ Params :  Returns : void} testPublishClusterSerializableImpl{ Params :  Returns : void} testSendSerializable{ Params :  Returns : void} testReplySerializable{ Params :  Returns : void} testPublishSerializable{ Params :  Returns : void} testSendWithCodecFromSelector{ Params :  Returns : void} testReplyWithCodecFromSelector{ Params :  Returns : void} testPublishWithCodecFromSelector{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSendWithHeaders{ Params :  Returns : void} testSendWithDeliveryOptionsButNoHeaders{ Params :  Returns : void} testReplyWithHeaders{ Params :  Returns : void} testReplyFromWorker{ Params :  Returns : void} start{ Params :  Returns : void} testSendFromExecuteBlocking{ Params :  Returns : void} testNoHandlersCallbackContext{ Params :  Returns : void} start{ Params :  Returns : void} testSend{ Params : T Returns : void} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyPOJO} transform{ Params : MyPOJO Returns : MyPOJO} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} getStr{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,MyReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyReplyException} transform{ Params : MyReplyException Returns : MyReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : String Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,ImmutableObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : ImmutableObject} transform{ Params : ImmutableObject Returns : ImmutableObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,start start encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID ,,,shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish ,MessageCodec ,,,,,: 
vert.x-master,io.vertx.core.eventbus,ImmutableObject,3,1,0,1,0,false,VertxTestBase ,0 ,MySystemDecoder NullNameCodec MyPOJOEncoder1 MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec StringLengthCodec ImmutableObject ImmutableObjectCodec ,str: String ,testSendNull{ Params :  Returns : void} testReplyNull{ Params :  Returns : void} testPublishNull{ Params :  Returns : void} testSendString{ Params :  Returns : void} testReplyString{ Params :  Returns : void} testPublishString{ Params :  Returns : void} testSendBooleanTrue{ Params :  Returns : void} testSendBooleanFalse{ Params :  Returns : void} testReplyBooleanTrue{ Params :  Returns : void} testReplyBooleanFalse{ Params :  Returns : void} testPublishBooleanTrue{ Params :  Returns : void} testPublishBooleanFalse{ Params :  Returns : void} testSendBuffer{ Params :  Returns : void} testReplyBuffer{ Params :  Returns : void} testPublishBuffer{ Params :  Returns : void} testSendByte{ Params :  Returns : void} testReplyByte{ Params :  Returns : void} testPublishByte{ Params :  Returns : void} testSendByteArray{ Params :  Returns : void} testReplyByteArray{ Params :  Returns : void} testPublishByteArray{ Params :  Returns : void} testSendCharacter{ Params :  Returns : void} testReplyCharacter{ Params :  Returns : void} testPublishCharacter{ Params :  Returns : void} testSendDouble{ Params :  Returns : void} testReplyDouble{ Params :  Returns : void} testPublishDouble{ Params :  Returns : void} testSendFloat{ Params :  Returns : void} testReplyFloat{ Params :  Returns : void} testPublishFloat{ Params :  Returns : void} testSendInteger{ Params :  Returns : void} testReplyInteger{ Params :  Returns : void} testPublishInteger{ Params :  Returns : void} testSendLong{ Params :  Returns : void} testReplyLong{ Params :  Returns : void} testPublishLong{ Params :  Returns : void} testSendShort{ Params :  Returns : void} testReplyShort{ Params :  Returns : void} testPublishShort{ Params :  Returns : void} testSendBigInteger{ Params :  Returns : void} testReplyBigInteger{ Params :  Returns : void} testPublishBigInteger{ Params :  Returns : void} testSendBigDecimal{ Params :  Returns : void} testReplyBigDecimal{ Params :  Returns : void} testPublishBigDecimal{ Params :  Returns : void} testSendJsonArray{ Params :  Returns : void} testReplyJsonArray{ Params :  Returns : void} testPublishJsonArray{ Params :  Returns : void} testSendJsonObject{ Params :  Returns : void} testReplyJsonObject{ Params :  Returns : void} testPublishJsonObject{ Params :  Returns : void} testSendClusterSerializable{ Params :  Returns : void} testReplyClusterSerializable{ Params :  Returns : void} testPublishClusterSerializable{ Params :  Returns : void} testSendClusterSerializableImpl{ Params :  Returns : void} testReplyClusterSerializableImpl{ Params :  Returns : void} testPublishClusterSerializableImpl{ Params :  Returns : void} testSendSerializable{ Params :  Returns : void} testReplySerializable{ Params :  Returns : void} testPublishSerializable{ Params :  Returns : void} testSendWithCodecFromSelector{ Params :  Returns : void} testReplyWithCodecFromSelector{ Params :  Returns : void} testPublishWithCodecFromSelector{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSendWithHeaders{ Params :  Returns : void} testSendWithDeliveryOptionsButNoHeaders{ Params :  Returns : void} testReplyWithHeaders{ Params :  Returns : void} testReplyFromWorker{ Params :  Returns : void} start{ Params :  Returns : void} testSendFromExecuteBlocking{ Params :  Returns : void} testNoHandlersCallbackContext{ Params :  Returns : void} start{ Params :  Returns : void} testSend{ Params : T Returns : void} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyPOJO} transform{ Params : MyPOJO Returns : MyPOJO} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} getStr{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,MyReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyReplyException} transform{ Params : MyReplyException Returns : MyReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : String Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,ImmutableObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : ImmutableObject} transform{ Params : ImmutableObject Returns : ImmutableObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,start start encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID ,,,shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish ,,,,,,str: 
vert.x-master,io.vertx.core.eventbus,ImmutableObjectCodec,3,1,0,1,0,false,VertxTestBase ,0 ,MySystemDecoder NullNameCodec MyPOJOEncoder1 MyPOJOEncoder2 MyPOJO MyReplyException MyReplyExceptionMessageCodec StringLengthCodec ImmutableObject ImmutableObjectCodec ,,testSendNull{ Params :  Returns : void} testReplyNull{ Params :  Returns : void} testPublishNull{ Params :  Returns : void} testSendString{ Params :  Returns : void} testReplyString{ Params :  Returns : void} testPublishString{ Params :  Returns : void} testSendBooleanTrue{ Params :  Returns : void} testSendBooleanFalse{ Params :  Returns : void} testReplyBooleanTrue{ Params :  Returns : void} testReplyBooleanFalse{ Params :  Returns : void} testPublishBooleanTrue{ Params :  Returns : void} testPublishBooleanFalse{ Params :  Returns : void} testSendBuffer{ Params :  Returns : void} testReplyBuffer{ Params :  Returns : void} testPublishBuffer{ Params :  Returns : void} testSendByte{ Params :  Returns : void} testReplyByte{ Params :  Returns : void} testPublishByte{ Params :  Returns : void} testSendByteArray{ Params :  Returns : void} testReplyByteArray{ Params :  Returns : void} testPublishByteArray{ Params :  Returns : void} testSendCharacter{ Params :  Returns : void} testReplyCharacter{ Params :  Returns : void} testPublishCharacter{ Params :  Returns : void} testSendDouble{ Params :  Returns : void} testReplyDouble{ Params :  Returns : void} testPublishDouble{ Params :  Returns : void} testSendFloat{ Params :  Returns : void} testReplyFloat{ Params :  Returns : void} testPublishFloat{ Params :  Returns : void} testSendInteger{ Params :  Returns : void} testReplyInteger{ Params :  Returns : void} testPublishInteger{ Params :  Returns : void} testSendLong{ Params :  Returns : void} testReplyLong{ Params :  Returns : void} testPublishLong{ Params :  Returns : void} testSendShort{ Params :  Returns : void} testReplyShort{ Params :  Returns : void} testPublishShort{ Params :  Returns : void} testSendBigInteger{ Params :  Returns : void} testReplyBigInteger{ Params :  Returns : void} testPublishBigInteger{ Params :  Returns : void} testSendBigDecimal{ Params :  Returns : void} testReplyBigDecimal{ Params :  Returns : void} testPublishBigDecimal{ Params :  Returns : void} testSendJsonArray{ Params :  Returns : void} testReplyJsonArray{ Params :  Returns : void} testPublishJsonArray{ Params :  Returns : void} testSendJsonObject{ Params :  Returns : void} testReplyJsonObject{ Params :  Returns : void} testPublishJsonObject{ Params :  Returns : void} testSendClusterSerializable{ Params :  Returns : void} testReplyClusterSerializable{ Params :  Returns : void} testPublishClusterSerializable{ Params :  Returns : void} testSendClusterSerializableImpl{ Params :  Returns : void} testReplyClusterSerializableImpl{ Params :  Returns : void} testPublishClusterSerializableImpl{ Params :  Returns : void} testSendSerializable{ Params :  Returns : void} testReplySerializable{ Params :  Returns : void} testPublishSerializable{ Params :  Returns : void} testSendWithCodecFromSelector{ Params :  Returns : void} testReplyWithCodecFromSelector{ Params :  Returns : void} testPublishWithCodecFromSelector{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSendWithHeaders{ Params :  Returns : void} testSendWithDeliveryOptionsButNoHeaders{ Params :  Returns : void} testReplyWithHeaders{ Params :  Returns : void} testReplyFromWorker{ Params :  Returns : void} start{ Params :  Returns : void} testSendFromExecuteBlocking{ Params :  Returns : void} testNoHandlersCallbackContext{ Params :  Returns : void} start{ Params :  Returns : void} testSend{ Params : T Returns : void} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : String Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : String} transform{ Params : MyPOJO Returns : String} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,MyPOJO Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyPOJO} transform{ Params : MyPOJO Returns : MyPOJO} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} getStr{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,MyReplyException Returns : void} decodeFromWire{ Params : int,Buffer Returns : MyReplyException} transform{ Params : MyReplyException Returns : MyReplyException} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} encodeToWire{ Params : Buffer,String Returns : void} decodeFromWire{ Params : int,Buffer Returns : Integer} transform{ Params : String Returns : Integer} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} encodeToWire{ Params : Buffer,ImmutableObject Returns : void} decodeFromWire{ Params : int,Buffer Returns : ImmutableObject} transform{ Params : ImmutableObject Returns : ImmutableObject} name{ Params :  Returns : String} systemCodecID{ Params :  Returns : byte} ,start start encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID encodeToWire decodeFromWire transform name systemCodecID equals hashCode encodeToWire decodeFromWire transform name systemCodecID ,,,shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish ,MessageCodec ,,,,ImmutableObject ,STRING_MESSAGE_CODEC: , pos, buffer
vert.x-master,io.vertx.core.eventbus,FaultToleranceTest,1,1,1,0,0,false,VertxTestBase ,0 ,0 ,NODE_COUNT: int ADDRESSES_COUNT: int externalNodes: List<Process> externalNodesStarted: AtomicLong pongsReceived: AtomicLong noHandlersErrors: AtomicLong timeoutMs: long vertx: VertxInternal ,testFaultTolerance{ Params :  Returns : void} afterNodeStarted{ Params : int,Process Returns : void} afterNodesStarted{ Params :  Returns : void} afterNodeKilled{ Params : int,Process Returns : void} afterNodesKilled{ Params :  Returns : void} startExternalNode{ Params : int Returns : Process} getExternalNodeSystemProperties{ Params :  Returns : List<String>} assertEqualsEventually{ Params : String,Object,Supplier<Object> Returns : void} tearDown{ Params :  Returns : void} ,tearDown ,,,,,,,,ArrayList AtomicLong AtomicLong AtomicLong JsonArray JsonArray JsonArray ArrayList JsonObject ProcessBuilder ,super: 
vert.x-master,io.vertx.core.eventbus,JsonEventBusTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,eb: EventBus ,setUp{ Params :  Returns : void} testChangesNotVisibleObject1{ Params :  Returns : void} testChangesNotVisibleObject2{ Params :  Returns : void} testChangesNotVisibleObject3{ Params :  Returns : void} testChangesNotVisibleArray1{ Params :  Returns : void} testChangesNotVisibleArray2{ Params :  Returns : void} testChangesNotVisibleArray3{ Params :  Returns : void} ,,,,,,EventBus ,,EventBus ,JsonObject JsonObject HashMap JsonObject JsonArray JsonArray ArrayList JsonArray ,: 
vert.x-master,io.vertx.core.eventbus,LocalEventBusTest,1,1,0,0,0,false,EventBusTestBase ,0 ,0 ,eb: EventBusInternal running: boolean ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} closeVertx{ Params :  Returns : void} testDeliveryOptions{ Params :  Returns : void} testArgumentValidation{ Params :  Returns : void} testRegisterUnregister{ Params :  Returns : void} testUnregisterTwice{ Params :  Returns : void} testMessageConsumerCloseHookIsClosedCorrectly{ Params :  Returns : void} start{ Params :  Returns : void} testRegisterLocal1{ Params :  Returns : void} testRegisterLocal2{ Params :  Returns : void} testRegisterWithCompletionHandler{ Params :  Returns : void} testSendRoundRobin{ Params :  Returns : void} testSendRegisterSomeUnregisterOne{ Params :  Returns : void} testSendRegisterSameHandlerMultipleTimes{ Params :  Returns : void} testSendWithNoHandler{ Params :  Returns : void} testSendMultipleAddresses{ Params :  Returns : void} testSendWithTimeoutNoTimeoutNoReply{ Params :  Returns : void} testSendWithReply{ Params :  Returns : void} testReplyToReply{ Params :  Returns : void} testSendReplyWithTimeout{ Params :  Returns : void} testSendReplyWithTimeoutNoTimeout{ Params :  Returns : void} testSendWithTimeoutNoTimeoutReply{ Params :  Returns : void} testSendWithTimeoutNoReply{ Params :  Returns : void} testSendWithTimeoutNoHandlers{ Params :  Returns : void} testSendWithTimeoutRecipientFailure{ Params :  Returns : void} testSendWithTimeoutReplyAfterTimeout{ Params :  Returns : void} testSendWithTimeoutNoTimeoutAfterReply{ Params :  Returns : void} testReplyToSendWithNoReplyHandler{ Params :  Returns : void} testReplyToPublish{ Params :  Returns : void} testFailAfterSend{ Params :  Returns : void} testFailAfterPublish{ Params :  Returns : void} testPublish{ Params :  Returns : void} testPublishMultipleHandlers{ Params :  Returns : void} testPublishSameHandlerRegisteredTwice{ Params :  Returns : void} testPublishMultipleHandlersUnregisterOne{ Params :  Returns : void} testPublishMultipleHandlersDifferentAddresses{ Params :  Returns : void} testNonRegisteredCodecType{ Params :  Returns : void} testCloseEventBus{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} testInWorkerVerticle{ Params :  Returns : void} testInVerticle{ Params : boolean Returns : void} start{ Params :  Returns : void} testContextsSend{ Params :  Returns : void} testContextsPublish{ Params :  Returns : void} testHeadersCopiedAfterSend{ Params :  Returns : void} testDecoderSendAsymmetric{ Params :  Returns : void} testDecoderReplyAsymmetric{ Params :  Returns : void} testDecoderSendSymmetric{ Params :  Returns : void} testDecoderReplySymmetric{ Params :  Returns : void} testNoRegisteredDecoder{ Params :  Returns : void} testRegisterSystemDecoder{ Params :  Returns : void} testUnregisterDecoder{ Params :  Returns : void} testRegisterTwice{ Params :  Returns : void} testCodecNullName{ Params :  Returns : void} testDefaultDecoderSendAsymmetric{ Params :  Returns : void} testDefaultDecoderReplyAsymmetric{ Params :  Returns : void} testDefaultDecoderSendSymetric{ Params :  Returns : void} testDefaultDecoderReplySymetric{ Params :  Returns : void} testNoRegisteredDefaultDecoder{ Params :  Returns : void} testRegisterDefaultSystemDecoder{ Params :  Returns : void} testUnregisterDefaultDecoder{ Params :  Returns : void} testRegisterDefaultTwice{ Params :  Returns : void} testDefaultCodecNullName{ Params :  Returns : void} testDefaultCodecReplyExceptionSubclass{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} handle{ Params : Message<T> Returns : void} testPauseResumeMessageStream{ Params :  Returns : void} testPauseResumeBodyStream{ Params :  Returns : void} testPauseResume{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testPauseFetchMessageStream{ Params :  Returns : void} testPauseFetchBodyStream{ Params :  Returns : void} testPauseFetch{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testSetMaxBufferedMessageDropsMessages{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessageWithMessageStream{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessageWithBodyStream{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessage{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandlerWithMessageStream{ Params :  Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandlerWithBodyStream{ Params :  Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandler{ Params : MessageConsumer<String>,ReadStream<?> Returns : void} testUnregisterThenUnsetEndHandler{ Params :  Returns : void} testUnregistrationWhenSettingNullHandlerWithConsumer{ Params :  Returns : void} testUnregistrationWhenSettingNullHandlerWithBodyStream{ Params :  Returns : void} testUnregistrationWhenSettingNullHandler{ Params : MessageConsumer<String>,ReadStream<?> Returns : void} testSender{ Params :  Returns : void} testSenderWithOptions{ Params :  Returns : void} testPublisher{ Params :  Returns : void} testPublisherWithOptions{ Params :  Returns : void} testCloseSender1{ Params :  Returns : void} testClosePublisher1{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously2{ Params :  Returns : void} testUpdateDeliveryOptionsOnProducer{ Params :  Returns : void} testCloseCallsEndHandlerWithRegistrationContext{ Params :  Returns : void} testConsumerUnregisterDoesNotCancelTimer0{ Params :  Returns : void} testUnregisterConsumerDiscardPendingMessages{ Params :  Returns : void} testImmediateUnregistration{ Params :  Returns : void} testSendWriteHandler{ Params :  Returns : void} testSendWriteHandlerNoConsumer{ Params :  Returns : void} testPublishWriteHandler{ Params :  Returns : void} testPublishWriteHandlerNoConsumer{ Params :  Returns : void} testClosePublisher{ Params :  Returns : void} testCloseSender{ Params :  Returns : void} testEarlyTimeoutWhenSetMaxBufferedMessages{ Params :  Returns : void} testEarlyTimeoutOfBufferedMessagesOnHandlerUnregistration{ Params :  Returns : void} testEarlyTimeoutOfBufferedMessages{ Params : Consumer<MessageConsumer<?>>,Consumer<MessageConsumer<?>> Returns : void} testEarlyTimeoutWhenMaxBufferedMessagesExceeded{ Params :  Returns : void} testEarlyTimeoutOnHandlerUnregistration{ Params :  Returns : void} ,start start shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish handle ,,,,,boolean ,,boolean ,ImmutableObjectCodec CountDownLatch DeliveryOptions DeliveryOptions DeliveryOptions DeliveryOptions DeliveryOptions MyPOJOEncoder1 AbstractVerticle ConcurrentHashMap AtomicInteger AtomicInteger AtomicInteger AtomicInteger DeliveryOptions DeliveryOptions DeliveryOptions DeliveryOptions DeliveryOptions DeliveryOptions DeliveryOptions DeliveryOptions AtomicBoolean DeliveryOptions AtomicInteger AtomicInteger Boom MyVerticle DeploymentOptions ConcurrentHashSet CountDownLatch ConcurrentHashSet AtomicInteger DeliveryOptions MyPOJOEncoder1 MyPOJO DeliveryOptions MyPOJOEncoder1 MyPOJO DeliveryOptions MyPOJOEncoder2 MyPOJO DeliveryOptions MyPOJOEncoder2 MyPOJO DeliveryOptions DeliveryOptions MySystemDecoder MyPOJOEncoder1 MyPOJO DeliveryOptions MyPOJOEncoder1 NullNameCodec MyPOJOEncoder1 MyPOJO MyPOJOEncoder1 MyPOJO MyPOJOEncoder2 MyPOJO MyPOJOEncoder2 MyPOJO MyPOJO MySystemDecoder MyPOJOEncoder1 MyPOJO MyPOJOEncoder1 NullNameCodec MyReplyException MyReplyExceptionMessageCodec AtomicInteger MyHandler MyHandler HashSet ArrayList ArrayList CountDownLatch ArrayList CountDownLatch AtomicInteger HashSet RuntimeException DeliveryOptions AtomicInteger DeliveryOptions AtomicInteger ThreadLocal ThreadLocal DeliveryOptions CountDownLatch AtomicInteger DeliveryOptions DeliveryOptions DeliveryOptions ,: 
vert.x-master,io.vertx.core.eventbus,Boom,1,0,0,0,0,false,EventBusTestBase ,0 ,0 ,,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} closeVertx{ Params :  Returns : void} testDeliveryOptions{ Params :  Returns : void} testArgumentValidation{ Params :  Returns : void} testRegisterUnregister{ Params :  Returns : void} testUnregisterTwice{ Params :  Returns : void} testMessageConsumerCloseHookIsClosedCorrectly{ Params :  Returns : void} start{ Params :  Returns : void} testRegisterLocal1{ Params :  Returns : void} testRegisterLocal2{ Params :  Returns : void} testRegisterWithCompletionHandler{ Params :  Returns : void} testSendRoundRobin{ Params :  Returns : void} testSendRegisterSomeUnregisterOne{ Params :  Returns : void} testSendRegisterSameHandlerMultipleTimes{ Params :  Returns : void} testSendWithNoHandler{ Params :  Returns : void} testSendMultipleAddresses{ Params :  Returns : void} testSendWithTimeoutNoTimeoutNoReply{ Params :  Returns : void} testSendWithReply{ Params :  Returns : void} testReplyToReply{ Params :  Returns : void} testSendReplyWithTimeout{ Params :  Returns : void} testSendReplyWithTimeoutNoTimeout{ Params :  Returns : void} testSendWithTimeoutNoTimeoutReply{ Params :  Returns : void} testSendWithTimeoutNoReply{ Params :  Returns : void} testSendWithTimeoutNoHandlers{ Params :  Returns : void} testSendWithTimeoutRecipientFailure{ Params :  Returns : void} testSendWithTimeoutReplyAfterTimeout{ Params :  Returns : void} testSendWithTimeoutNoTimeoutAfterReply{ Params :  Returns : void} testReplyToSendWithNoReplyHandler{ Params :  Returns : void} testReplyToPublish{ Params :  Returns : void} testFailAfterSend{ Params :  Returns : void} testFailAfterPublish{ Params :  Returns : void} testPublish{ Params :  Returns : void} testPublishMultipleHandlers{ Params :  Returns : void} testPublishSameHandlerRegisteredTwice{ Params :  Returns : void} testPublishMultipleHandlersUnregisterOne{ Params :  Returns : void} testPublishMultipleHandlersDifferentAddresses{ Params :  Returns : void} testNonRegisteredCodecType{ Params :  Returns : void} testCloseEventBus{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} testInWorkerVerticle{ Params :  Returns : void} testInVerticle{ Params : boolean Returns : void} start{ Params :  Returns : void} testContextsSend{ Params :  Returns : void} testContextsPublish{ Params :  Returns : void} testHeadersCopiedAfterSend{ Params :  Returns : void} testDecoderSendAsymmetric{ Params :  Returns : void} testDecoderReplyAsymmetric{ Params :  Returns : void} testDecoderSendSymmetric{ Params :  Returns : void} testDecoderReplySymmetric{ Params :  Returns : void} testNoRegisteredDecoder{ Params :  Returns : void} testRegisterSystemDecoder{ Params :  Returns : void} testUnregisterDecoder{ Params :  Returns : void} testRegisterTwice{ Params :  Returns : void} testCodecNullName{ Params :  Returns : void} testDefaultDecoderSendAsymmetric{ Params :  Returns : void} testDefaultDecoderReplyAsymmetric{ Params :  Returns : void} testDefaultDecoderSendSymetric{ Params :  Returns : void} testDefaultDecoderReplySymetric{ Params :  Returns : void} testNoRegisteredDefaultDecoder{ Params :  Returns : void} testRegisterDefaultSystemDecoder{ Params :  Returns : void} testUnregisterDefaultDecoder{ Params :  Returns : void} testRegisterDefaultTwice{ Params :  Returns : void} testDefaultCodecNullName{ Params :  Returns : void} testDefaultCodecReplyExceptionSubclass{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} handle{ Params : Message<T> Returns : void} testPauseResumeMessageStream{ Params :  Returns : void} testPauseResumeBodyStream{ Params :  Returns : void} testPauseResume{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testPauseFetchMessageStream{ Params :  Returns : void} testPauseFetchBodyStream{ Params :  Returns : void} testPauseFetch{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testSetMaxBufferedMessageDropsMessages{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessageWithMessageStream{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessageWithBodyStream{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessage{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandlerWithMessageStream{ Params :  Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandlerWithBodyStream{ Params :  Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandler{ Params : MessageConsumer<String>,ReadStream<?> Returns : void} testUnregisterThenUnsetEndHandler{ Params :  Returns : void} testUnregistrationWhenSettingNullHandlerWithConsumer{ Params :  Returns : void} testUnregistrationWhenSettingNullHandlerWithBodyStream{ Params :  Returns : void} testUnregistrationWhenSettingNullHandler{ Params : MessageConsumer<String>,ReadStream<?> Returns : void} testSender{ Params :  Returns : void} testSenderWithOptions{ Params :  Returns : void} testPublisher{ Params :  Returns : void} testPublisherWithOptions{ Params :  Returns : void} testCloseSender1{ Params :  Returns : void} testClosePublisher1{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously2{ Params :  Returns : void} testUpdateDeliveryOptionsOnProducer{ Params :  Returns : void} testCloseCallsEndHandlerWithRegistrationContext{ Params :  Returns : void} testConsumerUnregisterDoesNotCancelTimer0{ Params :  Returns : void} testUnregisterConsumerDiscardPendingMessages{ Params :  Returns : void} testImmediateUnregistration{ Params :  Returns : void} testSendWriteHandler{ Params :  Returns : void} testSendWriteHandlerNoConsumer{ Params :  Returns : void} testPublishWriteHandler{ Params :  Returns : void} testPublishWriteHandlerNoConsumer{ Params :  Returns : void} testClosePublisher{ Params :  Returns : void} testCloseSender{ Params :  Returns : void} testEarlyTimeoutWhenSetMaxBufferedMessages{ Params :  Returns : void} testEarlyTimeoutOfBufferedMessagesOnHandlerUnregistration{ Params :  Returns : void} testEarlyTimeoutOfBufferedMessages{ Params : Consumer<MessageConsumer<?>>,Consumer<MessageConsumer<?>> Returns : void} testEarlyTimeoutWhenMaxBufferedMessagesExceeded{ Params :  Returns : void} testEarlyTimeoutOnHandlerUnregistration{ Params :  Returns : void} ,start start shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish handle ,,,,,,,,,null
vert.x-master,io.vertx.core.eventbus,MyVerticle,1,0,0,0,0,false,EventBusTestBase ,0 ,0 ,ctx: Context ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} closeVertx{ Params :  Returns : void} testDeliveryOptions{ Params :  Returns : void} testArgumentValidation{ Params :  Returns : void} testRegisterUnregister{ Params :  Returns : void} testUnregisterTwice{ Params :  Returns : void} testMessageConsumerCloseHookIsClosedCorrectly{ Params :  Returns : void} start{ Params :  Returns : void} testRegisterLocal1{ Params :  Returns : void} testRegisterLocal2{ Params :  Returns : void} testRegisterWithCompletionHandler{ Params :  Returns : void} testSendRoundRobin{ Params :  Returns : void} testSendRegisterSomeUnregisterOne{ Params :  Returns : void} testSendRegisterSameHandlerMultipleTimes{ Params :  Returns : void} testSendWithNoHandler{ Params :  Returns : void} testSendMultipleAddresses{ Params :  Returns : void} testSendWithTimeoutNoTimeoutNoReply{ Params :  Returns : void} testSendWithReply{ Params :  Returns : void} testReplyToReply{ Params :  Returns : void} testSendReplyWithTimeout{ Params :  Returns : void} testSendReplyWithTimeoutNoTimeout{ Params :  Returns : void} testSendWithTimeoutNoTimeoutReply{ Params :  Returns : void} testSendWithTimeoutNoReply{ Params :  Returns : void} testSendWithTimeoutNoHandlers{ Params :  Returns : void} testSendWithTimeoutRecipientFailure{ Params :  Returns : void} testSendWithTimeoutReplyAfterTimeout{ Params :  Returns : void} testSendWithTimeoutNoTimeoutAfterReply{ Params :  Returns : void} testReplyToSendWithNoReplyHandler{ Params :  Returns : void} testReplyToPublish{ Params :  Returns : void} testFailAfterSend{ Params :  Returns : void} testFailAfterPublish{ Params :  Returns : void} testPublish{ Params :  Returns : void} testPublishMultipleHandlers{ Params :  Returns : void} testPublishSameHandlerRegisteredTwice{ Params :  Returns : void} testPublishMultipleHandlersUnregisterOne{ Params :  Returns : void} testPublishMultipleHandlersDifferentAddresses{ Params :  Returns : void} testNonRegisteredCodecType{ Params :  Returns : void} testCloseEventBus{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} testInWorkerVerticle{ Params :  Returns : void} testInVerticle{ Params : boolean Returns : void} start{ Params :  Returns : void} testContextsSend{ Params :  Returns : void} testContextsPublish{ Params :  Returns : void} testHeadersCopiedAfterSend{ Params :  Returns : void} testDecoderSendAsymmetric{ Params :  Returns : void} testDecoderReplyAsymmetric{ Params :  Returns : void} testDecoderSendSymmetric{ Params :  Returns : void} testDecoderReplySymmetric{ Params :  Returns : void} testNoRegisteredDecoder{ Params :  Returns : void} testRegisterSystemDecoder{ Params :  Returns : void} testUnregisterDecoder{ Params :  Returns : void} testRegisterTwice{ Params :  Returns : void} testCodecNullName{ Params :  Returns : void} testDefaultDecoderSendAsymmetric{ Params :  Returns : void} testDefaultDecoderReplyAsymmetric{ Params :  Returns : void} testDefaultDecoderSendSymetric{ Params :  Returns : void} testDefaultDecoderReplySymetric{ Params :  Returns : void} testNoRegisteredDefaultDecoder{ Params :  Returns : void} testRegisterDefaultSystemDecoder{ Params :  Returns : void} testUnregisterDefaultDecoder{ Params :  Returns : void} testRegisterDefaultTwice{ Params :  Returns : void} testDefaultCodecNullName{ Params :  Returns : void} testDefaultCodecReplyExceptionSubclass{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} handle{ Params : Message<T> Returns : void} testPauseResumeMessageStream{ Params :  Returns : void} testPauseResumeBodyStream{ Params :  Returns : void} testPauseResume{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testPauseFetchMessageStream{ Params :  Returns : void} testPauseFetchBodyStream{ Params :  Returns : void} testPauseFetch{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testSetMaxBufferedMessageDropsMessages{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessageWithMessageStream{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessageWithBodyStream{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessage{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandlerWithMessageStream{ Params :  Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandlerWithBodyStream{ Params :  Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandler{ Params : MessageConsumer<String>,ReadStream<?> Returns : void} testUnregisterThenUnsetEndHandler{ Params :  Returns : void} testUnregistrationWhenSettingNullHandlerWithConsumer{ Params :  Returns : void} testUnregistrationWhenSettingNullHandlerWithBodyStream{ Params :  Returns : void} testUnregistrationWhenSettingNullHandler{ Params : MessageConsumer<String>,ReadStream<?> Returns : void} testSender{ Params :  Returns : void} testSenderWithOptions{ Params :  Returns : void} testPublisher{ Params :  Returns : void} testPublisherWithOptions{ Params :  Returns : void} testCloseSender1{ Params :  Returns : void} testClosePublisher1{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously2{ Params :  Returns : void} testUpdateDeliveryOptionsOnProducer{ Params :  Returns : void} testCloseCallsEndHandlerWithRegistrationContext{ Params :  Returns : void} testConsumerUnregisterDoesNotCancelTimer0{ Params :  Returns : void} testUnregisterConsumerDiscardPendingMessages{ Params :  Returns : void} testImmediateUnregistration{ Params :  Returns : void} testSendWriteHandler{ Params :  Returns : void} testSendWriteHandlerNoConsumer{ Params :  Returns : void} testPublishWriteHandler{ Params :  Returns : void} testPublishWriteHandlerNoConsumer{ Params :  Returns : void} testClosePublisher{ Params :  Returns : void} testCloseSender{ Params :  Returns : void} testEarlyTimeoutWhenSetMaxBufferedMessages{ Params :  Returns : void} testEarlyTimeoutOfBufferedMessagesOnHandlerUnregistration{ Params :  Returns : void} testEarlyTimeoutOfBufferedMessages{ Params : Consumer<MessageConsumer<?>>,Consumer<MessageConsumer<?>> Returns : void} testEarlyTimeoutWhenMaxBufferedMessagesExceeded{ Params :  Returns : void} testEarlyTimeoutOnHandlerUnregistration{ Params :  Returns : void} ,start start shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish handle ,,,,,,,,,: 
vert.x-master,io.vertx.core.eventbus,MyHandler,1,0,0,0,0,false,EventBusTestBase ,0 ,0 ,,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} closeVertx{ Params :  Returns : void} testDeliveryOptions{ Params :  Returns : void} testArgumentValidation{ Params :  Returns : void} testRegisterUnregister{ Params :  Returns : void} testUnregisterTwice{ Params :  Returns : void} testMessageConsumerCloseHookIsClosedCorrectly{ Params :  Returns : void} start{ Params :  Returns : void} testRegisterLocal1{ Params :  Returns : void} testRegisterLocal2{ Params :  Returns : void} testRegisterWithCompletionHandler{ Params :  Returns : void} testSendRoundRobin{ Params :  Returns : void} testSendRegisterSomeUnregisterOne{ Params :  Returns : void} testSendRegisterSameHandlerMultipleTimes{ Params :  Returns : void} testSendWithNoHandler{ Params :  Returns : void} testSendMultipleAddresses{ Params :  Returns : void} testSendWithTimeoutNoTimeoutNoReply{ Params :  Returns : void} testSendWithReply{ Params :  Returns : void} testReplyToReply{ Params :  Returns : void} testSendReplyWithTimeout{ Params :  Returns : void} testSendReplyWithTimeoutNoTimeout{ Params :  Returns : void} testSendWithTimeoutNoTimeoutReply{ Params :  Returns : void} testSendWithTimeoutNoReply{ Params :  Returns : void} testSendWithTimeoutNoHandlers{ Params :  Returns : void} testSendWithTimeoutRecipientFailure{ Params :  Returns : void} testSendWithTimeoutReplyAfterTimeout{ Params :  Returns : void} testSendWithTimeoutNoTimeoutAfterReply{ Params :  Returns : void} testReplyToSendWithNoReplyHandler{ Params :  Returns : void} testReplyToPublish{ Params :  Returns : void} testFailAfterSend{ Params :  Returns : void} testFailAfterPublish{ Params :  Returns : void} testPublish{ Params :  Returns : void} testPublishMultipleHandlers{ Params :  Returns : void} testPublishSameHandlerRegisteredTwice{ Params :  Returns : void} testPublishMultipleHandlersUnregisterOne{ Params :  Returns : void} testPublishMultipleHandlersDifferentAddresses{ Params :  Returns : void} testNonRegisteredCodecType{ Params :  Returns : void} testCloseEventBus{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} testInWorkerVerticle{ Params :  Returns : void} testInVerticle{ Params : boolean Returns : void} start{ Params :  Returns : void} testContextsSend{ Params :  Returns : void} testContextsPublish{ Params :  Returns : void} testHeadersCopiedAfterSend{ Params :  Returns : void} testDecoderSendAsymmetric{ Params :  Returns : void} testDecoderReplyAsymmetric{ Params :  Returns : void} testDecoderSendSymmetric{ Params :  Returns : void} testDecoderReplySymmetric{ Params :  Returns : void} testNoRegisteredDecoder{ Params :  Returns : void} testRegisterSystemDecoder{ Params :  Returns : void} testUnregisterDecoder{ Params :  Returns : void} testRegisterTwice{ Params :  Returns : void} testCodecNullName{ Params :  Returns : void} testDefaultDecoderSendAsymmetric{ Params :  Returns : void} testDefaultDecoderReplyAsymmetric{ Params :  Returns : void} testDefaultDecoderSendSymetric{ Params :  Returns : void} testDefaultDecoderReplySymetric{ Params :  Returns : void} testNoRegisteredDefaultDecoder{ Params :  Returns : void} testRegisterDefaultSystemDecoder{ Params :  Returns : void} testUnregisterDefaultDecoder{ Params :  Returns : void} testRegisterDefaultTwice{ Params :  Returns : void} testDefaultCodecNullName{ Params :  Returns : void} testDefaultCodecReplyExceptionSubclass{ Params :  Returns : void} shouldImmutableObjectBeCopied{ Params :  Returns : boolean} testSend{ Params : T,R,Consumer<T>,DeliveryOptions Returns : void} testSend{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,Consumer<T> Returns : void} testReply{ Params : T,R,Consumer<R>,DeliveryOptions Returns : void} testPublish{ Params : T,Consumer<T> Returns : void} handle{ Params : Message<T> Returns : void} testPauseResumeMessageStream{ Params :  Returns : void} testPauseResumeBodyStream{ Params :  Returns : void} testPauseResume{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testPauseFetchMessageStream{ Params :  Returns : void} testPauseFetchBodyStream{ Params :  Returns : void} testPauseFetch{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testSetMaxBufferedMessageDropsMessages{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessageWithMessageStream{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessageWithBodyStream{ Params :  Returns : void} testExceptionWhenDeliveringBufferedMessage{ Params : BiFunction<MessageConsumer<String>,Handler<String>,ReadStream<?>> Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandlerWithMessageStream{ Params :  Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandlerWithBodyStream{ Params :  Returns : void} testUnregisterationOfRegisteredConsumerCallsEndHandler{ Params : MessageConsumer<String>,ReadStream<?> Returns : void} testUnregisterThenUnsetEndHandler{ Params :  Returns : void} testUnregistrationWhenSettingNullHandlerWithConsumer{ Params :  Returns : void} testUnregistrationWhenSettingNullHandlerWithBodyStream{ Params :  Returns : void} testUnregistrationWhenSettingNullHandler{ Params : MessageConsumer<String>,ReadStream<?> Returns : void} testSender{ Params :  Returns : void} testSenderWithOptions{ Params :  Returns : void} testPublisher{ Params :  Returns : void} testPublisherWithOptions{ Params :  Returns : void} testCloseSender1{ Params :  Returns : void} testClosePublisher1{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously{ Params :  Returns : void} testConsumerHandlesCompletionAsynchronously2{ Params :  Returns : void} testUpdateDeliveryOptionsOnProducer{ Params :  Returns : void} testCloseCallsEndHandlerWithRegistrationContext{ Params :  Returns : void} testConsumerUnregisterDoesNotCancelTimer0{ Params :  Returns : void} testUnregisterConsumerDiscardPendingMessages{ Params :  Returns : void} testImmediateUnregistration{ Params :  Returns : void} testSendWriteHandler{ Params :  Returns : void} testSendWriteHandlerNoConsumer{ Params :  Returns : void} testPublishWriteHandler{ Params :  Returns : void} testPublishWriteHandlerNoConsumer{ Params :  Returns : void} testClosePublisher{ Params :  Returns : void} testCloseSender{ Params :  Returns : void} testEarlyTimeoutWhenSetMaxBufferedMessages{ Params :  Returns : void} testEarlyTimeoutOfBufferedMessagesOnHandlerUnregistration{ Params :  Returns : void} testEarlyTimeoutOfBufferedMessages{ Params : Consumer<MessageConsumer<?>>,Consumer<MessageConsumer<?>> Returns : void} testEarlyTimeoutWhenMaxBufferedMessagesExceeded{ Params :  Returns : void} testEarlyTimeoutOnHandlerUnregistration{ Params :  Returns : void} ,start start shouldImmutableObjectBeCopied testSend testSend testReply testReply testPublish handle ,,,,Handler ,,,,,: 
vert.x-master,io.vertx.core.eventbus,MessageQueueOnWorkerThreadTest,1,1,0,0,0,false,VertxTestBase ,0 ,CustomNodeSelector SenderVerticle ,vertx: Vertx ,setUp{ Params :  Returns : void} testWorkerContext{ Params :  Returns : void} testExecuteBlocking{ Params :  Returns : void} test{ Params : boolean Returns : void} tearDown{ Params :  Returns : void} init{ Params : Vertx,ClusterManager Returns : void} eventBusStarted{ Params :  Returns : void} selectForSend{ Params : Message<?>,Promise<String> Returns : void} selectForPublish{ Params : Message<?>,Promise<Iterable<String>> Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} registrationsLost{ Params :  Returns : void} start{ Params :  Returns : void} sendMessage{ Params :  Returns : void} ,setUp tearDown init eventBusStarted selectForSend selectForPublish registrationsUpdated registrationsLost start ,,,,,Vertx ,,Vertx ,CustomNodeSelector VertxBuilder DeploymentOptions SenderVerticle UnsupportedOperationException ,super: 
vert.x-master,io.vertx.core.eventbus,CustomNodeSelector,3,2,0,1,0,false,VertxTestBase ,0 ,CustomNodeSelector SenderVerticle ,clusterManager: ClusterManager nodeId: String ,setUp{ Params :  Returns : void} testWorkerContext{ Params :  Returns : void} testExecuteBlocking{ Params :  Returns : void} test{ Params : boolean Returns : void} tearDown{ Params :  Returns : void} init{ Params : Vertx,ClusterManager Returns : void} eventBusStarted{ Params :  Returns : void} selectForSend{ Params : Message<?>,Promise<String> Returns : void} selectForPublish{ Params : Message<?>,Promise<Iterable<String>> Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} registrationsLost{ Params :  Returns : void} start{ Params :  Returns : void} sendMessage{ Params :  Returns : void} ,setUp tearDown init eventBusStarted selectForSend selectForPublish registrationsUpdated registrationsLost start ,,,,NodeSelector ,,,,UnsupportedOperationException ,promise: , nodeId
vert.x-master,io.vertx.core.eventbus,SenderVerticle,3,2,0,1,0,false,VertxTestBase ,0 ,CustomNodeSelector SenderVerticle ,worker: boolean count: int ,setUp{ Params :  Returns : void} testWorkerContext{ Params :  Returns : void} testExecuteBlocking{ Params :  Returns : void} test{ Params : boolean Returns : void} tearDown{ Params :  Returns : void} init{ Params : Vertx,ClusterManager Returns : void} eventBusStarted{ Params :  Returns : void} selectForSend{ Params : Message<?>,Promise<String> Returns : void} selectForPublish{ Params : Message<?>,Promise<Iterable<String>> Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} registrationsLost{ Params :  Returns : void} start{ Params :  Returns : void} sendMessage{ Params :  Returns : void} ,setUp tearDown init eventBusStarted selectForSend selectForPublish registrationsUpdated registrationsLost start ,,,,,,,,,: 
vert.x-master,io.vertx.core.eventbus,NodeInfoTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,getClusterManager{ Params :  Returns : ClusterManager} testFailedFutureForUnknownNode{ Params :  Returns : void} ,getClusterManager ,,,,,,,,FakeClusterManager ,: 
vert.x-master,io.vertx.core.eventbus,ReplyFailureErrorTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,setUp{ Params :  Returns : void} testUnknownCodec{ Params :  Returns : void} ,setUp ,,,,,,,,MyPOJOEncoder2 DeliveryOptions MyPOJO ,: 
vert.x-master,io.vertx.core.eventbus,WriteHandlerLookupFailureTest,1,1,0,0,1,false,VertxTestBase ,0 ,0 ,vertx: Vertx ,test{ Params :  Returns : void} selectForSend{ Params : Message<?>,Promise<String> Returns : void} selectForPublish{ Params : Message<?>,Promise<Iterable<String>> Returns : void} tearDown{ Params :  Returns : void} ,selectForSend selectForPublish tearDown ,,,,,Vertx ,,Vertx ,Throwable VertxOptions DefaultNodeSelector VertxBuilder ,super: 
vert.x-master,io.vertx.core,EventLoopGroupTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testGetEventLoopGroup{ Params :  Returns : void} ,,,,,,,,,,: , elp
vert.x-master,io.vertx.core,ExecuteBlockingTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testExecuteBlockingSuccess{ Params :  Returns : void} testExecuteBlockingFailed{ Params :  Returns : void} testExecuteBlockingThrowsRTE{ Params :  Returns : void} testExecuteBlockingContext{ Params :  Returns : void} testExecuteBlockingTTCL{ Params :  Returns : void} testExecuteBlockingParallel{ Params :  Returns : void} ,,,,,,,,,RuntimeException CountDownLatch AtomicReference CountDownLatch ,: , now - start < pause + leeway
vert.x-master,io.vertx.core,FakeContext,1,0,0,0,0,false,0 ,ContextInternal ,0 ,impl: VertxImpl tccl: ClassLoader ,executor{ Params :  Returns : Executor} runOnContext{ Params : Handler<Void> Returns : void} inThread{ Params :  Returns : boolean} executeBlocking{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} deploymentID{ Params :  Returns : String} config{ Params :  Returns : JsonObject} getInstanceCount{ Params :  Returns : int} exceptionHandler{ Params : Handler<Throwable> Returns : Context} exceptionHandler{ Params :  Returns : Handler<Throwable>} isEventLoopContext{ Params :  Returns : boolean} isWorkerContext{ Params :  Returns : boolean} nettyEventLoop{ Params :  Returns : EventLoop} executeBlocking{ Params : Handler<Promise<T>>,TaskQueue Returns : Future<T>} executeBlockingInternal{ Params : Handler<Promise<T>> Returns : Future<T>} executeBlockingInternal{ Params : Handler<Promise<T>>,boolean Returns : Future<T>} getDeployment{ Params :  Returns : Deployment} owner{ Params :  Returns : VertxInternal} emit{ Params : T,Handler<T> Returns : void} execute{ Params : Runnable Returns : void} execute{ Params : T,Handler<T> Returns : void} reportException{ Params : Throwable Returns : void} contextData{ Params :  Returns : ConcurrentMap<Object,Object>} localContextData{ Params :  Returns : ConcurrentMap<Object,Object>} classLoader{ Params :  Returns : ClassLoader} workerPool{ Params :  Returns : WorkerPool} tracer{ Params :  Returns : VertxTracer} duplicate{ Params :  Returns : ContextInternal} isDeployment{ Params :  Returns : boolean} closeFuture{ Params :  Returns : CloseFuture} ,executor runOnContext inThread executeBlocking deploymentID config getInstanceCount exceptionHandler exceptionHandler isEventLoopContext isWorkerContext nettyEventLoop executeBlocking executeBlockingInternal executeBlockingInternal getDeployment owner emit execute execute reportException contextData localContextData classLoader workerPool tracer duplicate isDeployment closeFuture ,,,,ContextInternal ,ClassLoader ,,ClassLoader ,,: , now - start < pause + leeway
vert.x-master,io.vertx.core,FakeFactoryImplA,1,1,0,0,0,false,0 ,FakeFactory ,0 ,,name{ Params :  Returns : String} classloader{ Params :  Returns : ClassLoader} ,name classloader ,,,,FakeFactory ,,,,,this: 
vert.x-master,io.vertx.core,FakeFactoryImplB,1,1,0,0,0,false,0 ,FakeFactory ,0 ,,name{ Params :  Returns : String} classloader{ Params :  Returns : ClassLoader} ,name classloader ,,,,FakeFactory ,,,,,this: 
vert.x-master,io.vertx.core.file,FileResolverTestBase,1,1,1,0,0,false,VertxTestBase ,0 ,0 ,cacheBaseDir: String resolver: FileResolverImpl testCL: ClassLoader ,setUp{ Params :  Returns : void} resourcesLoader{ Params : File Returns : ClassLoader} tearDown{ Params :  Returns : void} testReadFileInDirThenReadDir{ Params :  Returns : void} testResolveNotExistFile{ Params :  Returns : void} testResolveNotExistDirectory{ Params :  Returns : void} testResolveNotExistFileInDirectory{ Params :  Returns : void} testResolveFileFromClasspath{ Params :  Returns : void} testResolveFileFromClasspathDisableCaching{ Params :  Returns : void} testResolveFileWithSpacesFromClasspath{ Params :  Returns : void} testResolveFileWithSpaceAtEndFromClasspath{ Params :  Returns : void} testCacheDirIsPosix0700{ Params :  Returns : void} testResolveDirectoryFromClasspath{ Params :  Returns : void} testResolveFileInDirectoryFromClasspath{ Params :  Returns : void} testResolveSubDirectoryFromClasspath{ Params :  Returns : void} testResolveFileInSubDirectoryFromClasspath{ Params :  Returns : void} testRecursivelyUnpack{ Params :  Returns : void} testRecursivelyUnpack2{ Params :  Returns : void} testDeleteCacheDir{ Params :  Returns : void} testCacheDirDeletedOnVertxClose{ Params :  Returns : void} testFileSystemReadFile{ Params :  Returns : void} testFileSystemReadDirectory{ Params :  Returns : void} testSendFileFromClasspath{ Params :  Returns : void} testResolveFileFromDifferentThreads{ Params :  Returns : void} testEnableCaching{ Params :  Returns : void} testDisableCaching{ Params :  Returns : void} testCaching{ Params : boolean Returns : void} getResource{ Params : String Returns : URL} readFile{ Params : File Returns : String} testResolveAfterCloseThrowsISE{ Params :  Returns : void} testResolveRelativeFileInDirectoryFromClasspath{ Params :  Returns : void} testDoNotResolveAbsoluteFileInDirectoryFromClasspath{ Params :  Returns : void} testResolveCacheDir{ Params :  Returns : void} testReadFileInDirThenReadDirMultipleLevels{ Params :  Returns : void} testReadFileInDirThenReadDirMultipleLevelsMissingResource{ Params :  Returns : void} testGetTheCacheDirWithoutHacks{ Params :  Returns : void} ,setUp tearDown getResource ,,,,,ClassLoader ,,ClassLoader ,File IllegalStateException File File File File FileResolverImpl HashSet VertxOptions FileSystemOptions File File File FileResolverImpl HttpServerOptions HttpClientOptions Random File CountDownLatch CountDownLatch ArrayList Thread VertxOptions FileSystemOptions ClassLoader String String String FileResolverImpl File File HashSet HashSet ,: , "Expected a UUID"
vert.x-master,io.vertx.core.file,FileSystemFileResolverTest,1,1,0,0,0,false,FileResolverTestBase ,0 ,0 ,,resourcesLoader{ Params : File Returns : ClassLoader} testResolvePlusSignsOnName{ Params :  Returns : void} testResolveInvalidFileName{ Params :  Returns : void} getResource{ Params : String Returns : URL} testResolveFileWithSpaceAtEndFromClasspath{ Params :  Returns : void} ,resourcesLoader getResource testResolveFileWithSpaceAtEndFromClasspath ,,,,,,,,URLClassLoader File URLClassLoader ,thread: , prev
vert.x-master,io.vertx.core.file,FileSystemOptionsTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testDefaults{ Params :  Returns : void} testCopy{ Params :  Returns : void} testEmptyJsonOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} ,,,,,,,,,FileSystemOptions FileSystemOptions Random FileSystemOptions FileSystemOptions JsonObject Random FileSystemOptions JsonObject ,options: 
vert.x-master,io.vertx.core.file,FileSystemTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,DEFAULT_DIR_PERMS: String DEFAULT_FILE_PERMS: String pathSep: String testDir: String testFolder: TemporaryFolder ,setUp{ Params :  Returns : void} testIllegalArguments{ Params :  Returns : void} testSimpleCopy{ Params :  Returns : void} testSimpleCopyFileAlreadyExists{ Params :  Returns : void} testCopyIntoDir{ Params :  Returns : void} testCopyEmptyDir{ Params :  Returns : void} testCopyNonEmptyDir{ Params :  Returns : void} testFailCopyDirAlreadyExists{ Params :  Returns : void} testRecursiveCopy{ Params :  Returns : void} testCopy{ Params : String,String,boolean,boolean,Handler<Void> Returns : void} testSimpleMove{ Params :  Returns : void} testSimpleMoveFileAlreadyExists{ Params :  Returns : void} testMoveEmptyDir{ Params :  Returns : void} testMoveEmptyDirTargetExists{ Params :  Returns : void} testMoveNonEmptyDir{ Params :  Returns : void} testMove{ Params : String,String,boolean,Handler<Void> Returns : void} testTruncate{ Params :  Returns : void} testTruncateExtendsFile{ Params :  Returns : void} testTruncateFileDoesNotExist{ Params :  Returns : void} testTruncate{ Params : String,long,boolean,Handler<Void> Returns : void} testChmodNonRecursive1{ Params :  Returns : void} testChmodNonRecursive2{ Params :  Returns : void} testChmodNonRecursive3{ Params :  Returns : void} testChmodNonRecursive4{ Params :  Returns : void} testChmodNonRecursive5{ Params :  Returns : void} testChmodNonRecursive6{ Params :  Returns : void} testChmodNonRecursive{ Params : String Returns : void} assertPerms{ Params : String,String Returns : void} testChmodRecursive1{ Params :  Returns : void} testChmodRecursive2{ Params :  Returns : void} testChmodRecursive3{ Params :  Returns : void} testChmodRecursive4{ Params :  Returns : void} testChmodRecursive5{ Params :  Returns : void} testChmodRecursive6{ Params :  Returns : void} testChmodRecursive{ Params : String,String Returns : void} testChownToRootFails{ Params :  Returns : void} testChownToNotExistingUserFails{ Params :  Returns : void} testChownFails{ Params : String Returns : void} testChownToOwnUser{ Params :  Returns : void} testChownToOwnGroup{ Params :  Returns : void} testChmod{ Params : String,String,String,boolean,Handler<Void> Returns : void} testProps{ Params :  Returns : void} testPropsFileDoesNotExist{ Params :  Returns : void} testPropsFollowLink{ Params :  Returns : void} testPropsDontFollowLink{ Params :  Returns : void} testProps{ Params : String,boolean,boolean,Handler<FileProps> Returns : void} testLink{ Params :  Returns : void} testSymLink{ Params :  Returns : void} testLink{ Params : String,String,boolean,boolean,Handler<Void> Returns : void} testUnlink{ Params :  Returns : void} testReadSymLink{ Params :  Returns : void} testSimpleDelete{ Params :  Returns : void} testDeleteEmptyDir{ Params :  Returns : void} testDeleteNonExistent{ Params :  Returns : void} testDeleteNonEmptyFails{ Params :  Returns : void} testDeleteRecursive{ Params :  Returns : void} testDelete{ Params : String,boolean,boolean,Handler<Void> Returns : void} testMkdirSimple{ Params :  Returns : void} testMkdirWithParentsFails{ Params :  Returns : void} testMkdirWithPerms{ Params :  Returns : void} testMkdirAlreadyExist{ Params :  Returns : void} testMkdirCreateParents{ Params :  Returns : void} testMkdirCreateParentsWithPerms{ Params :  Returns : void} testMkdirCreateParentsDirExist{ Params :  Returns : void} testMkdirCreateParentsFileExist{ Params :  Returns : void} testMkdir{ Params : String,String,boolean,boolean,Handler<Void> Returns : void} testReadDirSimple{ Params :  Returns : void} testReadDirWithFilter{ Params :  Returns : void} testReadDir{ Params : String,String,boolean,Handler<List<String>> Returns : void} testReadFile{ Params :  Returns : void} testWriteFile{ Params :  Returns : void} testWriteAsync{ Params :  Returns : void} testCloseFileAfterFailure{ Params :  Returns : void} testWriteEmptyAsync{ Params :  Returns : void} testReadAsync{ Params :  Returns : void} testWriteStream{ Params :  Returns : void} testWriteStreamAppend{ Params :  Returns : void} testWriteStreamWithCompositeBuffer{ Params :  Returns : void} init{ Params : ReadStream<Buffer> Returns : void} handle{ Params : ReadStream<Buffer> Returns : Future<Void>} init{ Params : ReadStream<Buffer> Returns : void} handle{ Params : ReadStream<Buffer> Returns : Future<Void>} init{ Params : ReadStream<Buffer> Returns : void} handle{ Params : ReadStream<Buffer> Returns : Future<Void>} init{ Params : ReadStream<Buffer> Returns : void} handle{ Params : ReadStream<Buffer> Returns : Future<Void>} testReadStream{ Params :  Returns : void} testReadStreamFlowing{ Params :  Returns : void} testReadStreamFetch{ Params :  Returns : void} testReadStream{ Params : ReadStrategy Returns : void} testReadStreamWithBufferSize{ Params :  Returns : void} testReadStreamSetReadPos{ Params :  Returns : void} testReadStreamSetReadLength{ Params :  Returns : void} testReadStreamSetReadPosReadLengthBufferSize{ Params :  Returns : void} testReadStreamNoLock{ Params :  Returns : void} testPumpFileStreams{ Params :  Returns : void} testCreateFileNoPerms{ Params :  Returns : void} testCreateFileWithPerms{ Params :  Returns : void} testCreateFileAlreadyExists{ Params :  Returns : void} testCreateFile{ Params : String,boolean Returns : void} testExists{ Params :  Returns : void} testNotExists{ Params :  Returns : void} testExists{ Params : boolean Returns : void} testFSProps{ Params :  Returns : void} testFSProps{ Params : String,Handler<FileSystemProps> Returns : void} testOpenOptions{ Params :  Returns : void} testDefaultOptionOptions{ Params :  Returns : void} testAsyncFileCloseHandlerIsAsync{ Params :  Returns : void} testDrainNotCalledAfterClose{ Params :  Returns : void} testDrainSetOnce{ Params :  Returns : void} testResumeFileInEndHandler{ Params :  Returns : void} testPausedEnd{ Params :  Returns : void} createHandler{ Params : boolean,Handler<Void> Returns : Handler<AsyncResult<Void>>} fileExists{ Params : String Returns : boolean} createFileWithJunk{ Params : String,long Returns : void} createFile{ Params : String,byte[] Returns : void} deleteDir{ Params : File Returns : void} deleteDir{ Params : String Returns : void} mkDir{ Params : String Returns : void} fileLength{ Params : String Returns : long} setPerms{ Params : Path,String Returns : void} getPerms{ Params : String Returns : String} deleteFile{ Params : String Returns : void} testAsyncFileConcurrency{ Params :  Returns : void} testAtomicMove{ Params :  Returns : void} testCopyReplaceExisting{ Params :  Returns : void} testCopyNoReplaceExisting{ Params :  Returns : void} testCopyFileAttributes{ Params :  Returns : void} testCopyNoFollowLinks{ Params :  Returns : void} testCreateTempDirectory{ Params :  Returns : void} testCreateTempDirectoryBlocking{ Params :  Returns : void} testCreateTempDirectoryWithPerms{ Params :  Returns : void} testCreateTempDirectoryWithPermsBlocking{ Params :  Returns : void} testCreateTempDirectoryWithDirectory{ Params :  Returns : void} testCreateTempDirectoryWithDirectoryBlocking{ Params :  Returns : void} testCreateTempFile{ Params :  Returns : void} testCreateTempFileBlocking{ Params :  Returns : void} testCreateTempFileWithDirectory{ Params :  Returns : void} testCreateTempFileWithDirectoryBlocking{ Params :  Returns : void} testCreateTempFileWithPerms{ Params :  Returns : void} testCreateTempFileWithPermsBlocking{ Params :  Returns : void} testFileSize{ Params :  Returns : void} testFileSizeBlocking{ Params :  Returns : void} testFileLocking{ Params :  Returns : void} ,init handle init handle init handle ,,,init handle ,,,,,TemporaryFolder OpenOptions OpenOptions OpenOptions HashSet File HashSet File AtomicInteger OpenOptions AssumptionViolatedException OpenOptions OpenOptions AtomicInteger OpenOptions OpenOptions OpenOptions OpenOptions AtomicBoolean AtomicBoolean OpenOptions AtomicInteger AtomicBoolean OpenOptions OpenOptions OpenOptions OpenOptions OpenOptions OpenOptions OpenOptions OpenOptions OpenOptions OpenOptions JsonObject OpenOptions ThreadLocal OpenOptions AtomicBoolean OpenOptions AtomicInteger OpenOptions AtomicBoolean OpenOptions File File File File File RuntimeException RuntimeException File AtomicReference CountDownLatch OpenOptions File File AssumptionViolatedException CopyOptions CopyOptions CopyOptions File AssumptionViolatedException CopyOptions File File File AssumptionViolatedException CopyOptions OpenOptions OpenOptions OpenOptions OpenOptions ,file2: 
vert.x-master,io.vertx.core.file.impl,FileCacheTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testMutateCacheContentOnly{ Params :  Returns : void} ,,,,,,,,,File FileCache File ByteArrayInputStream String ,other: 
vert.x-master,io.vertx.core.file.impl,FileSystemImplTest,1,1,0,0,0,false,0 ,0 ,0 ,,shouldDefaultToJdkDefault{ Params :  Returns : void} ,,,,,,,,,CopyOptions ,FileSystemImpl: , new CopyOptions()
vert.x-master,io.vertx.core.file.impl,URLBundleFileResolverTest,1,1,0,0,0,false,JarFileResolverTest ,0 ,0 ,,testResolveURLBundle{ Params :  Returns : void} ,,,,,,,,,,resolver: 
vert.x-master,io.vertx.core.file,JarFileResolverTest,1,1,0,0,0,false,FileResolverTestBase ,0 ,0 ,,getFiles{ Params : File Returns : File} resourcesLoader{ Params : File Returns : ClassLoader} ,resourcesLoader ,getFiles ,,,,,,,JarOutputStream AssertionError URLClassLoader ,Thread: 
vert.x-master,io.vertx.core.file,JarFileResolverWithSpacesTest,1,1,0,0,0,false,FileResolverTestBase ,0 ,0 ,,resourcesLoader{ Params : File Returns : ClassLoader} ,resourcesLoader ,,,,,,,,File JarOutputStream AssertionError URLClassLoader ,Thread: 
vert.x-master,io.vertx.core.file,NestedJarFileResolverTest,1,1,0,0,0,false,FileResolverTestBase ,0 ,0 ,,resourcesLoader{ Params : File Returns : ClassLoader} getResource{ Params : String Returns : URL} ,resourcesLoader getResource ,,,,,,,,JarOutputStream FileOutputStream JarEntry JarEntry ClassLoader URL URL URL URL URL AssertionError ,super: , name
vert.x-master,io.vertx.core.file,NestedRootJarResolverTest,1,1,0,0,0,false,FileResolverTestBase ,0 ,0 ,,resourcesLoader{ Params : File Returns : ClassLoader} getResource{ Params : String Returns : URL} ,resourcesLoader getResource ,,,,,,,,ZipEntry ClassLoader URL URL AssertionError ,super: , name
vert.x-master,io.vertx.core.file,NestedZipFileResolverTest,1,1,0,0,0,false,FileResolverTestBase ,0 ,0 ,,resourcesLoader{ Params : File Returns : ClassLoader} getResource{ Params : String Returns : URL} ,resourcesLoader getResource ,,,,,,,,JarOutputStream FileOutputStream JarEntry JarEntry ClassLoader URL URL URL URL URL AssertionError ,super: , name
vert.x-master,io.vertx.core.file,ZipFileResolverTest,1,1,0,0,0,false,FileResolverTestBase ,0 ,0 ,,getFiles{ Params : File Returns : File} getFiles{ Params : File,File,Function<OutputStream,ZipOutputStream>,Function<String,ZipEntry> Returns : File} visitFile{ Params : Path,BasicFileAttributes Returns : FileVisitResult} preVisitDirectory{ Params : Path,BasicFileAttributes Returns : FileVisitResult} resourcesLoader{ Params : File Returns : ClassLoader} ,visitFile preVisitDirectory resourcesLoader ,getFiles getFiles ,,,,,,,FileOutputStream File SimpleFileVisitor URLClassLoader ,Thread: 
vert.x-master,io.vertx.core,FutureOperatorsTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testIssue_1{ Params :  Returns : void} testIssue_2{ Params :  Returns : void} ,,,,,,,,,,promise: , "Value"
vert.x-master,io.vertx.core,FutureTest,1,1,0,0,0,false,FutureTestBase ,0 ,0 ,failure: RuntimeException ,testCreateWithHandler{ Params :  Returns : void} testStateAfterCompletion{ Params :  Returns : void} testCallSetHandlerBeforeCompletion{ Params :  Returns : void} testCallSetHandlerAfterCompletion{ Params :  Returns : void} testResolveFutureToHandler{ Params :  Returns : void} testFailFutureToHandler{ Params :  Returns : void} testCreateFailedWithNullFailure{ Params :  Returns : void} testFailureFutureWithNullFailure{ Params :  Returns : void} testCompleteCause{ Params :  Returns : void} testComposeSuccessToSuccess{ Params :  Returns : void} testComposeSuccessToFailure{ Params :  Returns : void} testComposeFailure{ Params :  Returns : void} testComposeFails{ Params :  Returns : void} testComposeWithNullFunction{ Params :  Returns : void} testTransformSuccessToSuccess{ Params :  Returns : void} testTransformFailureToSuccess{ Params :  Returns : void} testTransformToSuccess{ Params : Consumer<Promise<String>> Returns : void} testTransformSuccessToFailure{ Params :  Returns : void} testTransformFailureToFailure{ Params :  Returns : void} testTransformToFailure{ Params : Consumer<Promise<String>> Returns : void} testTransformFails{ Params :  Returns : void} testTransformWithNullFunction{ Params :  Returns : void} testEventuallySuccessToSuccess{ Params :  Returns : void} testEventuallySuccessToFailure{ Params :  Returns : void} testEventuallySuccessTo{ Params : Consumer<Promise<Integer>> Returns : void} testEventuallyFailureToSuccess{ Params :  Returns : void} testEventuallyFailureToFailure{ Params :  Returns : void} testEventuallyFailureTo{ Params : Consumer<Promise<Integer>> Returns : void} testMapSuccess{ Params :  Returns : void} testMapValueSuccess{ Params :  Returns : void} testMapValueAlreadySuccess{ Params :  Returns : void} testMapFailure{ Params :  Returns : void} testMapAlreadyFailure{ Params :  Returns : void} testMapValueFailure{ Params :  Returns : void} testMapValueAlreadyFailure{ Params :  Returns : void} testMapFails{ Params :  Returns : void} testMapWithNullFunction{ Params :  Returns : void} testMapEmpty{ Params :  Returns : void} testRecoverSuccessWithSuccess{ Params :  Returns : void} testRecoverFailureWithSuccess{ Params :  Returns : void} testRecoverFailureWithFailure{ Params :  Returns : void} testRecoverFailureFails{ Params :  Returns : void} testRecoverWithNullFunction{ Params :  Returns : void} testOtherwiseSuccessWithSuccess{ Params :  Returns : void} testOtherwiseAlreadySuccessWithSuccess{ Params :  Returns : void} testOtherwiseValueSuccessWithSuccess{ Params :  Returns : void} testOtherwiseValueAlreadySuccessWithSuccess{ Params :  Returns : void} testOtherwiseFailureWithSuccess{ Params :  Returns : void} testOtherwiseValueFailureWithSuccess{ Params :  Returns : void} testOtherwiseValueAlreadyFailureWithSuccess{ Params :  Returns : void} testOtherwiseFails{ Params :  Returns : void} testHandlerFailureWithContext{ Params :  Returns : void} testHandlerFailureWithoutContext{ Params :  Returns : void} testDefaultCompleter{ Params :  Returns : void} result{ Params :  Returns : Object} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} map{ Params : Function<Object,U> Returns : AsyncResult<U>} map{ Params : V Returns : AsyncResult<V>} result{ Params :  Returns : Object} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} map{ Params : Function<Object,U> Returns : AsyncResult<U>} map{ Params : V Returns : AsyncResult<V>} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} complete{ Params : T Returns : void} complete{ Params :  Returns : void} fail{ Params : Throwable Returns : void} fail{ Params : String Returns : void} tryComplete{ Params : T Returns : boolean} tryComplete{ Params :  Returns : boolean} tryFail{ Params : Throwable Returns : boolean} tryFail{ Params : String Returns : boolean} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} compose{ Params : Function<T,Future<U>>,Function<Throwable,Future<U>> Returns : Future<U>} transform{ Params : Function<AsyncResult<T>,Future<U>> Returns : Future<U>} eventually{ Params : Function<Void,Future<U>> Returns : Future<T>} map{ Params : Function<T,U> Returns : Future<U>} map{ Params : V Returns : Future<V>} otherwise{ Params : Function<Throwable,T> Returns : Future<T>} otherwise{ Params : T Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} testUncompletedAsyncResultMap{ Params :  Returns : void} testSucceededAsyncResultMap{ Params :  Returns : void} testFailedAsyncResultMap{ Params :  Returns : void} testAsyncResultMapEmpty{ Params :  Returns : void} testSucceededFutureRecover{ Params :  Returns : void} testFailedFutureRecover{ Params :  Returns : void} testFailedMapperFutureRecover{ Params :  Returns : void} testUncompletedAsyncResultOtherwise{ Params :  Returns : void} testUncompletedFutureOtherwise{ Params :  Returns : void} testUncompletedAsyncResultOtherwise{ Params : AsyncResult<String> Returns : void} testUncompletedAsyncResultOtherwiseApplyFunction{ Params :  Returns : void} testUncompletedFutureOtherwiseApplyFunction{ Params :  Returns : void} testUncompletedOtherwiseApplyFunction{ Params : AsyncResult<String> Returns : void} testSucceededAsyncResultOtherwise{ Params :  Returns : void} testSucceededFutureOtherwise{ Params :  Returns : void} testSucceededOtherwise{ Params : AsyncResult<String>,Promise<String> Returns : void} testSucceededAsyncResultOtherwiseApplyFunction{ Params :  Returns : void} testSucceededFutureOtherwiseApplyFunction{ Params :  Returns : void} testSucceededOtherwiseApplyFunction{ Params : AsyncResult<String>,Promise<String> Returns : void} testFailedAsyncResultOtherwise{ Params :  Returns : void} testFailedFutureOtherwise{ Params :  Returns : void} testFailedOtherwise{ Params : AsyncResult<String>,Promise<String> Returns : void} testFailedAsyncResultOtherwiseApplyFunction{ Params :  Returns : void} testFailedFutureOtherwiseApplyFunction{ Params :  Returns : void} testFailedOtherwiseApplyFunction{ Params : AsyncResult<String>,Promise<String> Returns : void} testOtherwiseWithNullFunction{ Params :  Returns : void} testAsyncResultOtherwiseEmpty{ Params :  Returns : void} testFutureOtherwiseEmpty{ Params :  Returns : void} testToString{ Params :  Returns : void} testReleaseListenerAfterCompletion{ Params :  Returns : void} testSetNullHandler{ Params :  Returns : void} testSucceedOnContext{ Params :  Returns : void} testOtherwiseEmpty{ Params : AsyncResult<String>,Promise<String> Returns : void} asyncResult{ Params : Future<T> Returns : AsyncResult<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} testSeveralHandlers1{ Params :  Returns : void} testSeveralHandlers2{ Params :  Returns : void} testSeveralHandlers3{ Params :  Returns : void} testSuccessNotification{ Params :  Returns : void} testFailureNotification{ Params :  Returns : void} testVoidFuture{ Params :  Returns : void} testPromiseUsedAsHandler{ Params :  Returns : void} testToCompletionStageTrampolining{ Params :  Returns : void} testToCompletionStageDelayedCompletion{ Params :  Returns : void} testFromCompletionStageTrampolining{ Params :  Returns : void} testFromCompletionStageWithContext{ Params :  Returns : void} testCompletedFuturesContext{ Params :  Returns : void} testOnXXXReportsFailureOnContext{ Params :  Returns : void} testListenersReportFailureOnContext{ Params : BiConsumer<ContextInternal,Runnable>,BiConsumer<Future<String>,Runnable>,Consumer<Promise<?>> Returns : void} testListenersReportFailureOnContext{ Params : BiConsumer<ContextInternal,Runnable>,BiConsumer<Future<String>,Runnable>,Consumer<Promise<?>>,int Returns : void} testCompletedFutureOnXXXReportsFailureOnContext{ Params :  Returns : void} testListenersReportFailureOnContextAfterCompletion{ Params : Function<ContextInternal,Future<String>>,BiConsumer<ContextInternal,Runnable>,BiConsumer<Future<String>,Runnable> Returns : void} testAndThenComplete{ Params :  Returns : void} testAndThenCompleteContextual{ Params :  Returns : void} testAndThen{ Params : Future<Void>,ContextInternal,Throwable Returns : void} testAndThenCompleteHandlerWithError{ Params :  Returns : void} ,result cause succeeded failed ,,,,,RuntimeException ,,RuntimeException ,AtomicInteger AtomicReference Checker Checker RuntimeException Checker Object Exception AtomicBoolean Object Exception AtomicBoolean Object Exception Throwable Checker Checker RuntimeException AtomicReference AtomicReference Checker AtomicReference Checker Throwable AtomicReference Checker Exception Checker RuntimeException Checker AtomicInteger Checker Throwable AtomicInteger Checker RuntimeException Checker AtomicInteger Checker AtomicInteger Checker RuntimeException Checker Checker Checker Throwable Checker Throwable Checker Throwable Checker Throwable Checker RuntimeException Checker Checker AtomicBoolean AssertionError Checker Checker Throwable Checker RuntimeException Checker AtomicBoolean AssertionError Checker AtomicBoolean AssertionError Checker AtomicBoolean Checker AtomicBoolean Checker Checker Checker Checker RuntimeException Checker RuntimeException RuntimeException AsyncResult Object UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException AsyncResult Throwable UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException IllegalStateException IllegalStateException IllegalStateException IllegalStateException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException DefaultCompleterTestFuture DefaultCompleterTestFuture Throwable RuntimeException Throwable Throwable Object CompletableFuture CountDownLatch Throwable AsyncResult Throwable RuntimeException Thread Thread RuntimeException AtomicReference CompletableFuture AtomicReference CompletableFuture RuntimeException AtomicReference CompletableFuture AtomicReference CompletableFuture RuntimeException CompletableFuture Exception Exception RuntimeException Thread Thread Thread Thread Thread ArrayList Thread Thread Thread Thread Thread Thread Thread Thread Thread Thread ArrayList NoStackTraceThrowable NoStackTraceThrowable AtomicBoolean RuntimeException Throwable Throwable ,: 
vert.x-master,io.vertx.core,DefaultCompleterTestFuture,1,0,0,0,0,false,FutureTestBase ,0 ,0 ,succeeded: boolean failed: boolean result: T cause: Throwable ,testCreateWithHandler{ Params :  Returns : void} testStateAfterCompletion{ Params :  Returns : void} testCallSetHandlerBeforeCompletion{ Params :  Returns : void} testCallSetHandlerAfterCompletion{ Params :  Returns : void} testResolveFutureToHandler{ Params :  Returns : void} testFailFutureToHandler{ Params :  Returns : void} testCreateFailedWithNullFailure{ Params :  Returns : void} testFailureFutureWithNullFailure{ Params :  Returns : void} testCompleteCause{ Params :  Returns : void} testComposeSuccessToSuccess{ Params :  Returns : void} testComposeSuccessToFailure{ Params :  Returns : void} testComposeFailure{ Params :  Returns : void} testComposeFails{ Params :  Returns : void} testComposeWithNullFunction{ Params :  Returns : void} testTransformSuccessToSuccess{ Params :  Returns : void} testTransformFailureToSuccess{ Params :  Returns : void} testTransformToSuccess{ Params : Consumer<Promise<String>> Returns : void} testTransformSuccessToFailure{ Params :  Returns : void} testTransformFailureToFailure{ Params :  Returns : void} testTransformToFailure{ Params : Consumer<Promise<String>> Returns : void} testTransformFails{ Params :  Returns : void} testTransformWithNullFunction{ Params :  Returns : void} testEventuallySuccessToSuccess{ Params :  Returns : void} testEventuallySuccessToFailure{ Params :  Returns : void} testEventuallySuccessTo{ Params : Consumer<Promise<Integer>> Returns : void} testEventuallyFailureToSuccess{ Params :  Returns : void} testEventuallyFailureToFailure{ Params :  Returns : void} testEventuallyFailureTo{ Params : Consumer<Promise<Integer>> Returns : void} testMapSuccess{ Params :  Returns : void} testMapValueSuccess{ Params :  Returns : void} testMapValueAlreadySuccess{ Params :  Returns : void} testMapFailure{ Params :  Returns : void} testMapAlreadyFailure{ Params :  Returns : void} testMapValueFailure{ Params :  Returns : void} testMapValueAlreadyFailure{ Params :  Returns : void} testMapFails{ Params :  Returns : void} testMapWithNullFunction{ Params :  Returns : void} testMapEmpty{ Params :  Returns : void} testRecoverSuccessWithSuccess{ Params :  Returns : void} testRecoverFailureWithSuccess{ Params :  Returns : void} testRecoverFailureWithFailure{ Params :  Returns : void} testRecoverFailureFails{ Params :  Returns : void} testRecoverWithNullFunction{ Params :  Returns : void} testOtherwiseSuccessWithSuccess{ Params :  Returns : void} testOtherwiseAlreadySuccessWithSuccess{ Params :  Returns : void} testOtherwiseValueSuccessWithSuccess{ Params :  Returns : void} testOtherwiseValueAlreadySuccessWithSuccess{ Params :  Returns : void} testOtherwiseFailureWithSuccess{ Params :  Returns : void} testOtherwiseValueFailureWithSuccess{ Params :  Returns : void} testOtherwiseValueAlreadyFailureWithSuccess{ Params :  Returns : void} testOtherwiseFails{ Params :  Returns : void} testHandlerFailureWithContext{ Params :  Returns : void} testHandlerFailureWithoutContext{ Params :  Returns : void} testDefaultCompleter{ Params :  Returns : void} result{ Params :  Returns : Object} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} map{ Params : Function<Object,U> Returns : AsyncResult<U>} map{ Params : V Returns : AsyncResult<V>} result{ Params :  Returns : Object} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} map{ Params : Function<Object,U> Returns : AsyncResult<U>} map{ Params : V Returns : AsyncResult<V>} isComplete{ Params :  Returns : boolean} onComplete{ Params : Handler<AsyncResult<T>> Returns : Future<T>} complete{ Params : T Returns : void} complete{ Params :  Returns : void} fail{ Params : Throwable Returns : void} fail{ Params : String Returns : void} tryComplete{ Params : T Returns : boolean} tryComplete{ Params :  Returns : boolean} tryFail{ Params : Throwable Returns : boolean} tryFail{ Params : String Returns : boolean} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} compose{ Params : Function<T,Future<U>>,Function<Throwable,Future<U>> Returns : Future<U>} transform{ Params : Function<AsyncResult<T>,Future<U>> Returns : Future<U>} eventually{ Params : Function<Void,Future<U>> Returns : Future<T>} map{ Params : Function<T,U> Returns : Future<U>} map{ Params : V Returns : Future<V>} otherwise{ Params : Function<Throwable,T> Returns : Future<T>} otherwise{ Params : T Returns : Future<T>} handle{ Params : AsyncResult<T> Returns : void} testUncompletedAsyncResultMap{ Params :  Returns : void} testSucceededAsyncResultMap{ Params :  Returns : void} testFailedAsyncResultMap{ Params :  Returns : void} testAsyncResultMapEmpty{ Params :  Returns : void} testSucceededFutureRecover{ Params :  Returns : void} testFailedFutureRecover{ Params :  Returns : void} testFailedMapperFutureRecover{ Params :  Returns : void} testUncompletedAsyncResultOtherwise{ Params :  Returns : void} testUncompletedFutureOtherwise{ Params :  Returns : void} testUncompletedAsyncResultOtherwise{ Params : AsyncResult<String> Returns : void} testUncompletedAsyncResultOtherwiseApplyFunction{ Params :  Returns : void} testUncompletedFutureOtherwiseApplyFunction{ Params :  Returns : void} testUncompletedOtherwiseApplyFunction{ Params : AsyncResult<String> Returns : void} testSucceededAsyncResultOtherwise{ Params :  Returns : void} testSucceededFutureOtherwise{ Params :  Returns : void} testSucceededOtherwise{ Params : AsyncResult<String>,Promise<String> Returns : void} testSucceededAsyncResultOtherwiseApplyFunction{ Params :  Returns : void} testSucceededFutureOtherwiseApplyFunction{ Params :  Returns : void} testSucceededOtherwiseApplyFunction{ Params : AsyncResult<String>,Promise<String> Returns : void} testFailedAsyncResultOtherwise{ Params :  Returns : void} testFailedFutureOtherwise{ Params :  Returns : void} testFailedOtherwise{ Params : AsyncResult<String>,Promise<String> Returns : void} testFailedAsyncResultOtherwiseApplyFunction{ Params :  Returns : void} testFailedFutureOtherwiseApplyFunction{ Params :  Returns : void} testFailedOtherwiseApplyFunction{ Params : AsyncResult<String>,Promise<String> Returns : void} testOtherwiseWithNullFunction{ Params :  Returns : void} testAsyncResultOtherwiseEmpty{ Params :  Returns : void} testFutureOtherwiseEmpty{ Params :  Returns : void} testToString{ Params :  Returns : void} testReleaseListenerAfterCompletion{ Params :  Returns : void} testSetNullHandler{ Params :  Returns : void} testSucceedOnContext{ Params :  Returns : void} testOtherwiseEmpty{ Params : AsyncResult<String>,Promise<String> Returns : void} asyncResult{ Params : Future<T> Returns : AsyncResult<T>} result{ Params :  Returns : T} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} testSeveralHandlers1{ Params :  Returns : void} testSeveralHandlers2{ Params :  Returns : void} testSeveralHandlers3{ Params :  Returns : void} testSuccessNotification{ Params :  Returns : void} testFailureNotification{ Params :  Returns : void} testVoidFuture{ Params :  Returns : void} testPromiseUsedAsHandler{ Params :  Returns : void} testToCompletionStageTrampolining{ Params :  Returns : void} testToCompletionStageDelayedCompletion{ Params :  Returns : void} testFromCompletionStageTrampolining{ Params :  Returns : void} testFromCompletionStageWithContext{ Params :  Returns : void} testCompletedFuturesContext{ Params :  Returns : void} testOnXXXReportsFailureOnContext{ Params :  Returns : void} testListenersReportFailureOnContext{ Params : BiConsumer<ContextInternal,Runnable>,BiConsumer<Future<String>,Runnable>,Consumer<Promise<?>> Returns : void} testListenersReportFailureOnContext{ Params : BiConsumer<ContextInternal,Runnable>,BiConsumer<Future<String>,Runnable>,Consumer<Promise<?>>,int Returns : void} testCompletedFutureOnXXXReportsFailureOnContext{ Params :  Returns : void} testListenersReportFailureOnContextAfterCompletion{ Params : Function<ContextInternal,Future<String>>,BiConsumer<ContextInternal,Runnable>,BiConsumer<Future<String>,Runnable> Returns : void} testAndThenComplete{ Params :  Returns : void} testAndThenCompleteContextual{ Params :  Returns : void} testAndThen{ Params : Future<Void>,ContextInternal,Throwable Returns : void} testAndThenCompleteHandlerWithError{ Params :  Returns : void} ,result cause succeeded failed ,,,,Future ,,,,UnsupportedOperationException UnsupportedOperationException IllegalStateException IllegalStateException IllegalStateException IllegalStateException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,asyncResult: 
vert.x-master,io.vertx.core,FutureTestBase,1,1,0,0,0,false,VertxTestBase ,0 ,Checker ,,assertNotCompleted{ Params :  Returns : void} assertSucceeded{ Params : T Returns : void} assertFailed{ Params : Throwable Returns : void} assertFailed{ Params :  Returns : Throwable} ,,,,,,,,,AtomicReference AtomicInteger ,null
vert.x-master,io.vertx.core,Checker,3,0,0,0,0,false,VertxTestBase ,0 ,Checker ,future: Future<T> result: AtomicReference<AsyncResult<T>> count: AtomicInteger ,assertNotCompleted{ Params :  Returns : void} assertSucceeded{ Params : T Returns : void} assertFailed{ Params : Throwable Returns : void} assertFailed{ Params :  Returns : Throwable} ,,,,,,AtomicInteger ,,AtomicInteger ,AtomicReference AtomicInteger ,future: 
vert.x-master,io.vertx.core,HATest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,vertx1: Vertx ,getClusterManager{ Params :  Returns : ClusterManager} tearDown{ Params :  Returns : void} testSimpleFailover{ Params :  Returns : void} testQuorum{ Params :  Returns : void} testQuorumLost{ Params :  Returns : void} testCleanCloseNoFailover{ Params :  Returns : void} testFailureInFailover{ Params :  Returns : void} testHaGroups{ Params :  Returns : void} testNoFailoverToNonHANode{ Params :  Returns : void} testNonHADeployments{ Params :  Returns : void} testCloseRemovesFromCluster{ Params :  Returns : void} testQuorumWithHaGroups{ Params :  Returns : void} startVertx{ Params :  Returns : Vertx} startVertx{ Params : int Returns : Vertx} startVertx{ Params : String,int Returns : Vertx} startVertx{ Params : String,int,boolean Returns : Vertx} checkDeploymentExists{ Params : int,String,DeploymentOptions Returns : void} kill{ Params : int Returns : void} closeVertices{ Params : Vertx Returns : void} ,tearDown ,,,,,,,,FakeClusterManager VertxOptions DeploymentOptions JsonObject CountDownLatch DeploymentOptions JsonObject DeploymentOptions JsonObject CountDownLatch DeploymentOptions JsonObject CountDownLatch CountDownLatch DeploymentOptions CountDownLatch CountDownLatch CountDownLatch DeploymentOptions DeploymentOptions CountDownLatch CountDownLatch CountDownLatch DeploymentOptions CountDownLatch DeploymentOptions DeploymentOptions CountDownLatch CountDownLatch DeploymentOptions CountDownLatch DeploymentOptions DeploymentOptions CountDownLatch CountDownLatch VertxOptions CountDownLatch AtomicReference CountDownLatch ,: , latch, 2, TimeUnit.MINUTES
vert.x-master,io.vertx.core.http,GzipHttpCompressionTestBase,1,1,1,0,0,false,HttpCompressionTestBase ,0 ,0 ,compressionLevel: int ,data{ Params :  Returns : Collection<Object[]>} encoding{ Params :  Returns : String} encoder{ Params :  Returns : MessageToByteEncoder<ByteBuf>} configureServerCompression{ Params : HttpServerOptions Returns : void} ,encoding configureServerCompression ,data ,,,,int ,,int ,JdkZlibEncoder ,options: , true
vert.x-master,io.vertx.core.http.headers,CaseInsensitiveHeadersTest,1,1,0,0,0,false,VertxHttpHeadersTest ,0 ,0 ,,newMultiMap{ Params :  Returns : HeadersMultiMap} checkNameCollision{ Params :  Returns : void} hash{ Params : String Returns : int} index{ Params : int Returns : int} testHashMININT{ Params :  Returns : void} ,,hash index ,,,,,,,HeadersMultiMap ,mm: , name1
vert.x-master,io.vertx.core.http.headers,HeadersTestBase,1,1,1,0,0,false,0 ,0 ,0 ,,newMultiMap{ Params :  Returns : MultiMap} testCaseInsensitiveHeaders{ Params :  Returns : void} testAddAll1{ Params :  Returns : void} testAddAll2{ Params :  Returns : void} testAddAllEmptyMap{ Params :  Returns : void} testAddAllEmptyMultiMap{ Params :  Returns : void} testAddCharSequenceNameCharSequenceValue{ Params :  Returns : void} testAddCharSequenceNameIterableCharSequenceValue{ Params :  Returns : void} testAddStringNameStringValue{ Params :  Returns : void} testAddStringNameEmptyStringValue{ Params :  Returns : void} testAddNullStringValueTest{ Params :  Returns : void} testAddNullCharSequenceValueTest{ Params :  Returns : void} testAddNullIterableStringValueTest{ Params :  Returns : void} testAddStringNameIterableStringValue{ Params :  Returns : void} testAddAllMultiMap{ Params :  Returns : void} testClearTest1{ Params :  Returns : void} testContainsCharSequence{ Params :  Returns : void} testContainsEmptyString{ Params :  Returns : void} testContainsEmptyValue{ Params :  Returns : void} testEntriesEmpty{ Params :  Returns : void} testGetMissingCharSequenceName{ Params :  Returns : void} testGetMissingStringName{ Params :  Returns : void} testGetStringName{ Params :  Returns : void} testGetNullStringName{ Params :  Returns : void} testGetAllTestMissingName{ Params :  Returns : void} testGetAll{ Params :  Returns : void} testGetAllNullName{ Params :  Returns : void} testIsEmptyEmpty{ Params :  Returns : void} testIsEmptyNonEmpty{ Params :  Returns : void} testIteratorEmpty{ Params :  Returns : void} testIterator{ Params :  Returns : void} testNamesEmpty{ Params :  Returns : void} testRemoveMissingName{ Params :  Returns : void} testRemoveNullName{ Params :  Returns : void} testRemove{ Params :  Returns : void} testSetAll{ Params :  Returns : void} testSetAllEmptyMap{ Params :  Returns : void} testSetAllEmptyMultiMap{ Params :  Returns : void} testSetCharSequenceNameCharSequenceValue{ Params :  Returns : void} testSetCharSequenceNameIterableCharSequenceValue{ Params :  Returns : void} testSetStringNameStringValue{ Params :  Returns : void} testSetStringNameEmptyStringValue{ Params :  Returns : void} testSetNullCharSequenceValue{ Params :  Returns : void} testSetNullStringValue{ Params :  Returns : void} testSetNullIterableStringValue{ Params :  Returns : void} testSetNullIterableCharSequenceValue{ Params :  Returns : void} testSetEmptyIterableStringValue{ Params :  Returns : void} testSetEmptyIterableCharSequenceValue{ Params :  Returns : void} testSetIterableStringValue{ Params :  Returns : void} testSize{ Params :  Returns : void} sortByLine{ Params : String Returns : String} testToString{ Params :  Returns : void} testMapEntrySetValue{ Params :  Returns : void} testMapEntryToString{ Params :  Returns : void} testMapEntrySetValueNull{ Params :  Returns : void} testContainsValueString{ Params :  Returns : void} testContainsValueStringIgnoreCase{ Params :  Returns : void} testContainsValueCharSequence{ Params :  Returns : void} testContainsValueCharSequenceIgnoreCase{ Params :  Returns : void} testGetShouldReturnAddedEntriesInOrder{ Params :  Returns : void} testGetShouldReturnEntriesFromListInOrder{ Params :  Returns : void} testIterableArgument{ Params :  Returns : void} testSetAllOnExistingMapUsingMultiMapHttp1{ Params :  Returns : void} testSetAllOnExistingMapUsingHashMapHttp1{ Params :  Returns : void} testSetAllOnExistingMapUsingMultiMapHttp2{ Params :  Returns : void} testSetAllOnExistingMapUsingHashMapHttp2{ Params :  Returns : void} testForEach{ Params :  Returns : void} ,,,,newMultiMap ,,,,,HashMap HashMap HashMap ArrayList ArrayList Object Object Object HashMap HashMap ArrayList ArrayList ArrayList ArrayList StringBuilder HeadersAdaptor HeadersAdaptor HashMap Http2HeadersAdaptor DefaultHttp2Headers Http2HeadersAdaptor DefaultHttp2Headers HashMap HashMap ,: , "content-type", "application/xml"
vert.x-master,io.vertx.core.http.headers,Http2HeadersAdaptorsTest,1,1,0,0,0,false,HeadersTestBase ,0 ,0 ,headers: DefaultHttp2Headers map: MultiMap ,setUp{ Params :  Returns : void} newMultiMap{ Params :  Returns : MultiMap} testGetConvertUpperCase{ Params :  Returns : void} testGetAllConvertUpperCase{ Params :  Returns : void} testContainsConvertUpperCase{ Params :  Returns : void} testSetConvertUpperCase{ Params :  Returns : void} testAddConvertUpperCase{ Params :  Returns : void} testRemoveConvertUpperCase{ Params :  Returns : void} testEntries{ Params :  Returns : void} assertHeaderNames{ Params : String Returns : void} ,newMultiMap ,,,,,,,,DefaultHttp2Headers Http2HeadersAdaptor Http2HeadersAdaptor DefaultHttp2Headers HashSet ,Collectors: 
vert.x-master,io.vertx.core.http.headers,HttpHeadersAdaptorTest,1,1,0,0,0,false,HeadersTestBase ,0 ,0 ,,newMultiMap{ Params :  Returns : MultiMap} ,newMultiMap ,,,,,,,,HeadersAdaptor DefaultHttpHeaders ,Collectors: 
vert.x-master,io.vertx.core.http.headers,VertxHttpHeadersTest,1,1,0,0,0,false,HeadersTestBase ,0 ,0 ,sameHash1: String sameHash2: String sameBucket1: String sameBucket2: String ,newMultiMap{ Params :  Returns : HeadersMultiMap} checkNameCollision{ Params :  Returns : void} testAddEmptyStringNameIterableStringValue{ Params :  Returns : void} testAddEmptyStringNameEmptyStringValue{ Params :  Returns : void} testAddEmptyStringName{ Params :  Returns : void} testSetAllEmptyStringNameAndEmptyValue{ Params :  Returns : void} testSetEmptyStringNameAndEmptyValue{ Params :  Returns : void} testSetEmptyStringName{ Params :  Returns : void} testSetAll{ Params :  Returns : void} testSetEmptyStringNameIterableStringValue{ Params :  Returns : void} testGetHashColl{ Params :  Returns : void} testGetAllHashColl{ Params :  Returns : void} testRemoveHashColl{ Params :  Returns : void} testRemovalNext{ Params :  Returns : void} testNonCharSequenceValue{ Params :  Returns : void} testContainsValue1{ Params :  Returns : void} testContainsValue2{ Params :  Returns : void} testContainsValue3{ Params :  Returns : void} testContainsValue4{ Params :  Returns : void} testInvalidChars{ Params :  Returns : void} testInvalidChars{ Params : Consumer<CharSequence>,Function<byte[],CharSequence> Returns : void} ,newMultiMap ,,,,,,,,ArrayList HashMap HashMap ArrayList ,consumer: , val
vert.x-master,io.vertx.core.http,Http1xBrotliCompressionTest,1,1,0,0,0,false,HttpCompressionTestBase ,0 ,0 ,,createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} encoder{ Params :  Returns : MessageToByteEncoder<ByteBuf>} encoding{ Params :  Returns : String} configureServerCompression{ Params : HttpServerOptions Returns : void} ,createBaseServerOptions createBaseClientOptions encoder encoding configureServerCompression ,,,,,,,,HttpServerOptions HttpClientOptions BrotliEncoder ,StandardCompressionOptions: 
vert.x-master,io.vertx.core.http,Http1xClientConnectionTest,1,1,0,0,0,false,HttpClientConnectionTest ,0 ,0 ,,testResetStreamBeforeSend{ Params :  Returns : void} testResetStreamRequestSent{ Params :  Returns : void} testServerConnectionClose{ Params :  Returns : void} ,,,,,,,,,AtomicInteger Exception AtomicInteger Exception HttpRequestHead StreamPriority AtomicInteger HttpRequestHead StreamPriority ,: 
vert.x-master,io.vertx.core.http,Http1xCompressionTest,1,1,0,0,0,false,GzipHttpCompressionTestBase ,0 ,0 ,,createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} ,createBaseServerOptions createBaseClientOptions ,,,,,,,,HttpServerOptions HttpClientOptions ,new HttpClientOptions(): , DEFAULT_HTTP_PORT
vert.x-master,io.vertx.core.http,Http1xMetricsTest,1,1,0,0,0,false,HttpMetricsTestBase ,0 ,0 ,,testAllocatedStreamResetShouldNotCallMetricsLifecycle{ Params :  Returns : void} ,,,,,,,,,CountDownLatch ,: , latch
vert.x-master,io.vertx.core.http,Http1xProxyTest,1,1,0,0,0,false,HttpTestBase ,0 ,0 ,,getOptions{ Params :  Returns : VertxOptions} testHttpProxyRequest{ Params :  Returns : void} testHttpProxyRequest2{ Params :  Returns : void} testAcceptFilter{ Params :  Returns : void} testRejectFilter{ Params :  Returns : void} testFilter{ Params : boolean Returns : void} testNonProxyHosts1{ Params :  Returns : void} testNonProxyHosts2{ Params :  Returns : void} testNonProxyHosts3{ Params :  Returns : void} testNonProxyHosts4{ Params :  Returns : void} testNonProxyHosts{ Params : List<String>,String,boolean Returns : void} testHttpProxyRequestOverrideClientSsl{ Params :  Returns : void} assertProxiedRequest{ Params : String Returns : void} testHttpProxyRequest{ Params : Supplier<Future<HttpClientResponse>> Returns : Future<Void>} testHttpProxyRequestAuth{ Params :  Returns : void} testHttpProxyFtpRequest{ Params :  Returns : void} testHttpSocksProxyRequest{ Params :  Returns : void} testHttpSocksProxyRequestAuth{ Params :  Returns : void} testHttpProxyPooling{ Params :  Returns : void} testHttpProxyPooling2{ Params :  Returns : void} testHttpProxyAuthPooling1{ Params :  Returns : void} testHttpProxyAuthPooling2{ Params :  Returns : void} testSocksProxyPooling1{ Params :  Returns : void} testSocksProxyPooling2{ Params :  Returns : void} testSocksProxyAuthPooling1{ Params :  Returns : void} testSocksProxyAuthPooling2{ Params :  Returns : void} testPooling{ Params : ProxyOptions,ProxyOptions,TestProxyBase Returns : List<String>} testWssHttpProxy{ Params :  Returns : void} testWsHttpProxy{ Params :  Returns : void} testWssSocks5Proxy{ Params :  Returns : void} testWsSocks5Proxy{ Params :  Returns : void} testWsNonProxyHosts{ Params :  Returns : void} testWebSocket{ Params : HttpServerOptions,HttpClientOptions,boolean Returns : void} ,getOptions ,,,,,,,,HttpClientOptions ProxyOptions RequestOptions RequestOptions ProxyOptions HttpClientOptions ProxyOptions HashSet RequestOptions HttpClientOptions ProxyOptions RequestOptions HttpClientOptions ProxyOptions RequestOptions HttpClientOptions ProxyOptions RequestOptions HttpClientOptions ProxyOptions RequestOptions HttpClientOptions ProxyOptions RequestOptions HttpClientOptions ProxyOptions RequestOptions HttpProxy HttpProxy ProxyOptions ProxyOptions HttpProxy ProxyOptions HttpProxy ProxyOptions ProxyOptions HttpProxy ProxyOptions ProxyOptions SocksProxy SocksProxy ProxyOptions ProxyOptions SocksProxy ProxyOptions SocksProxy ProxyOptions ProxyOptions SocksProxy ProxyOptions ProxyOptions HttpClientOptions CompletableFuture RequestOptions RequestOptions RequestOptions HttpClientOptions ProxyOptions HttpClientOptions ProxyOptions HttpClientOptions ProxyOptions HttpClientOptions ProxyOptions HttpClientOptions ProxyOptions ,: 
vert.x-master,io.vertx.core.http,Http1xServerFileUploadTest,1,1,0,0,0,false,HttpServerFileUploadTest ,0 ,0 ,,testBrokenFormUploadLargeFile{ Params :  Returns : void} testBrokenFormUploadLargeFileStreamToDisk{ Params :  Returns : void} ,testBrokenFormUploadLargeFile testBrokenFormUploadLargeFileStreamToDisk ,,,,,,,,,super: 
vert.x-master,io.vertx.core.http,Http1xTest,1,1,0,0,0,false,HttpTest ,0 ,0 ,,getOptions{ Params :  Returns : VertxOptions} testClientOptions{ Params :  Returns : void} testServerOptions{ Params :  Returns : void} testCopyClientOptions{ Params :  Returns : void} checkCopyHttpClientOptions{ Params : HttpClientOptions,HttpClientOptions Returns : void} testDefaultClientOptionsJson{ Params :  Returns : void} testClientOptionsJson{ Params :  Returns : void} testCopyServerOptions{ Params :  Returns : void} checkCopyHttpServerOptions{ Params : HttpServerOptions,HttpServerOptions Returns : void} testDefaultServerOptionsJson{ Params :  Returns : void} testServerOptionsJson{ Params :  Returns : void} testCloseHandlerNotCalledWhenConnectionClosedAfterEnd{ Params :  Returns : void} testTimedOutWaiterDoesNotConnect{ Params :  Returns : void} testPipeliningOrder{ Params :  Returns : void} testPipeliningLimit{ Params :  Returns : void} testCloseServerConnectionWithPendingMessages{ Params :  Returns : void} testPipeliningFailure{ Params :  Returns : void} testPipelineStress{ Params :  Returns : void} close{ Params :  Returns : void} receiveChunk{ Params : Buffer Returns : void} send{ Params :  Returns : void} run{ Params :  Returns : void} testPipeliningPauseRequest{ Params :  Returns : void} testServerPipeliningConnectionConcurrency{ Params :  Returns : void} testKeepAlive{ Params :  Returns : void} testNoKeepAlive{ Params :  Returns : void} testKeepAlive{ Params : boolean,int,int,int Returns : void} testPoolingKeepAliveAndPipelining{ Params :  Returns : void} testPoolingKeepAliveNoPipelining{ Params :  Returns : void} testPoolingNoKeepAliveNoPipelining{ Params :  Returns : void} testPooling{ Params : boolean,boolean Returns : void} testPoolingNoKeepAliveAndPipelining{ Params :  Returns : void} testMaxWaitQueueSizeIsRespected{ Params :  Returns : void} testRequestTimeoutExtendedWhenResponseChunksReceived{ Params :  Returns : void} testServerWebSocketIdleTimeout{ Params :  Returns : void} testClientWebSocketIdleTimeout{ Params :  Returns : void} testSharedServersRoundRobin{ Params :  Returns : void} testSharedServersRoundRobinWithOtherServerRunningOnDifferentPort{ Params :  Returns : void} testSharedServersRoundRobinButFirstStartAndStopServer{ Params :  Returns : void} testDefaultHttpVersion{ Params :  Returns : void} testIncorrectHttpVersion{ Params :  Returns : void} testHttp11PersistentConnectionNotClosed{ Params :  Returns : void} testHttp11NonPersistentConnectionClosed{ Params :  Returns : void} testHttp10KeepAliveConnectionNotClosed{ Params :  Returns : void} testHttp10RequestNonKeepAliveConnectionClosed{ Params :  Returns : void} testHttp10ResponseNonKeepAliveConnectionClosed{ Params :  Returns : void} requestAbsNoPort{ Params :  Returns : void} testRequestsTimeoutInQueue{ Params :  Returns : void} testServerOptionsCopiedBeforeUse{ Params :  Returns : void} testClientOptionsCopiedBeforeUse{ Params :  Returns : void} testRequestExceptionHandlerContext{ Params :  Returns : void} fill{ Params : Buffer,WriteStream<Buffer>,LongConsumer Returns : void} fill{ Params : long,Buffer,WriteStream<Buffer>,LongConsumer Returns : void} testContexts{ Params :  Returns : void} testRequestHandlerNotCalledInvalidRequest{ Params :  Returns : void} testTwoServersSameAddressDifferentContext{ Params :  Returns : void} testPauseResumeClientResponse{ Params :  Returns : void} testPauseResumeServerRequestFromAnotherThread{ Params :  Returns : void} send{ Params : HttpClientRequest,Buffer,int,int Returns : void} testEndServerResponseResumeTheConnection{ Params :  Returns : void} testEndServerRequestResumeTheConnection{ Params :  Returns : void} testMultipleRecursiveCallsAndPipelining{ Params :  Returns : void} recursiveCall{ Params : HttpClient,AtomicInteger,int Returns : void} testUnsupportedHttpVersion{ Params :  Returns : void} testUnsupported{ Params : String,boolean Returns : void} testTwoServersDifferentEventLoopsCloseOne{ Params :  Returns : void} testSetWriteQueueMaxSize{ Params :  Returns : void} testServerMaxInitialLineLength{ Params :  Returns : void} testServerMaxInitialLineLengthOption{ Params :  Returns : void} testServerMaxInitialLineLength{ Params : int Returns : void} testServerInvalidHttpMessage{ Params :  Returns : void} testClientMaxInitialLineLengthOption{ Params :  Returns : void} testClientMaxHeaderSizeOption{ Params :  Returns : void} testServerMaxHeaderSize{ Params :  Returns : void} testServerMaxHeaderSizeOption{ Params :  Returns : void} testServerMaxHeaderSize{ Params : int Returns : void} testPipelinedInvalidHttpResponse{ Params :  Returns : void} testConnectionCloseHttp_1_0_NoClose{ Params :  Returns : void} testConnectionCloseHttp_1_0_Close{ Params :  Returns : void} testConnectionCloseHttp_1_1_NoClose{ Params :  Returns : void} testConnectionCloseHttp_1_1_Close{ Params :  Returns : void} testConnectionClose{ Params : Handler<HttpClientRequest>,Handler<NetSocket> Returns : void} testDoNotReuseConnectionWhenResponseEndsBeforeRequest{ Params :  Returns : void} testRecyclePipelinedConnection{ Params :  Returns : void} testClientConnectionExceptionHandler{ Params :  Returns : void} testServerConnectionExceptionHandler{ Params :  Returns : void} testServerExceptionHandler{ Params :  Returns : void} testRandomPorts{ Params :  Returns : void} testContentDecompression{ Params :  Returns : void} testResetClientRequestNotYetSent{ Params :  Returns : void} testResetKeepAliveClientRequestNotYetSent{ Params :  Returns : void} testResetPipelinedClientRequestNotYetSent{ Params :  Returns : void} testResetClientRequestNotYetSent{ Params : boolean,boolean Returns : void} testResetKeepAliveClientRequest{ Params :  Returns : void} testResetPipelinedClientRequest{ Params :  Returns : void} testCloseTheConnectionAfterResetKeepAliveClientRequest{ Params :  Returns : void} testCloseTheConnectionAfterResetPipelinedClientRequest{ Params :  Returns : void} testCloseTheConnectionAfterResetPersistentClientRequest{ Params : boolean Returns : void} testCloseTheConnectionAfterResetKeepAliveClientResponse{ Params :  Returns : void} testCloseTheConnectionAfterResetPipelinedClientResponse{ Params :  Returns : void} testCloseTheConnectionAfterResetPersistentClientResponse{ Params : boolean Returns : void} testCloseTheConnectionAfterResetBeforePipelinedResponseReceived{ Params :  Returns : void} testCloseTheConnectionAfterResetBeforeKeepAliveResponseReceived{ Params :  Returns : void} testCloseTheConnectionAfterResetBeforeResponseReceived{ Params : boolean Returns : void} testTooLongContentInHttpServerRequest{ Params :  Returns : void} testInvalidTrailerInHttpServerRequest{ Params :  Returns : void} testInvalidChunkInHttpServerRequest{ Params :  Returns : void} testHttpServerRequestDecodeError{ Params : Handler<NetSocket>,Handler<List<Throwable>> Returns : void} testInvalidChunkInHttpClientResponse{ Params :  Returns : void} testInvalidTrailersInHttpClientResponse{ Params :  Returns : void} testHttpClientResponseDecodeError{ Params : Handler<Void>,Handler<Throwable> Returns : void} testEmptyHttpVersion{ Params :  Returns : void} testReceiveResponseWithNoRequestInProgress{ Params :  Returns : void} testRequestTimeoutIsNotDelayedAfterResponseIsReceived{ Params :  Returns : void} start{ Params :  Returns : void} testPerHostPooling{ Params :  Returns : void} testPerPeerPooling{ Params :  Returns : void} testPerPeerPoolingWithProxy{ Params :  Returns : void} testPerXXXPooling{ Params : Function<Integer,Future<HttpClientRequest>>,Function<HttpServerRequest,String> Returns : void} testSendFileFailsWhenClientClosesConnection{ Params :  Returns : void} checkEmptyHttpResponse{ Params : HttpMethod,int,MultiMap Returns : MultiMap} testUnknownContentLengthIsSetToZeroWithHTTP_1_0{ Params :  Returns : void} testPartialH2CAmbiguousRequest{ Params :  Returns : void} testIdleTimeoutWithPartialH2CRequest{ Params :  Returns : void} testTLSDisablesH2CHandlers{ Params :  Returns : void} testIdleTimeoutInfiniteSkipOfControlCharactersState{ Params :  Returns : void} testCompressedResponseWithConnectionCloseAndNoCompressionHeader{ Params :  Returns : void} testKeepAliveTimeoutHeader{ Params :  Returns : void} testKeepAliveTimeoutHeaderReusePrevious{ Params :  Returns : void} testKeepAliveTimeoutHeaderOverwritePrevious{ Params :  Returns : void} testPausedHttpServerRequestPauseTheConnectionAtRequestEnd{ Params :  Returns : void} testPausedHttpClientResponseUnpauseTheConnectionAtRequestEnd{ Params :  Returns : void} testHttpClientResponsePauseIsIgnoredAtRequestEnd{ Params :  Returns : void} testHttpClientResponsePause{ Params : Handler<HttpClientResponse> Returns : void} testPoolLIFOPolicy{ Params :  Returns : void} testHttpClientResponseThrowsExceptionInResponseHandler{ Params :  Returns : void} testHttpClientResponseThrowsExceptionInChunkHandler{ Params :  Returns : void} testHttpClientResponseThrowsExceptionInEndHandler{ Params :  Returns : void} testHttpClientResponseThrowsExceptionInHandler{ Params : String,BiConsumer<HttpClientResponse,RuntimeException> Returns : void} testConnectionCloseDuringShouldCallHandleExceptionOnlyOnce{ Params :  Returns : void} testDeferredRequestEnd{ Params :  Returns : void} testPipelinedWithResponseSent{ Params :  Returns : void} testPipelinedWithPendingResponse{ Params :  Returns : void} testPipelinedPostRequestStartedByResponseSent{ Params :  Returns : void} testBeginPipelinedRequestByResponseSentOnRequestCompletion{ Params :  Returns : void} testBeginPipelinedRequestByResponseSentBeforeRequestCompletion{ Params :  Returns : void} testPipeliningQueueDelayed{ Params :  Returns : void} testHttpClientResponseBufferedWithPausedEnd{ Params :  Returns : void} testHttpClientResumeConnectionOnResponseOnLastMessage{ Params :  Returns : void} testSetChunkedToFalse{ Params :  Returns : void} testHttpServerRequestShouldCallExceptionHandlerWhenTheClosedHandlerIsCalled{ Params :  Returns : void} testHttpClientRequestShouldCallExceptionHandlerWhenTheClosedHandlerIsCalled{ Params :  Returns : void} testHeaderNameValidation{ Params :  Returns : void} invalidCharsForHeaders{ Params :  Returns : List<String>} testHeaderValueValidation{ Params :  Returns : void} testHeaderNameStartsOrEndsWithControlChars{ Params :  Returns : void} testInvalidHttpRequestHeaderResponse{ Params :  Returns : void} testInvalidHttpResponseHeader{ Params :  Returns : void} testChunkedServerResponse{ Params :  Returns : void} testChunkedClientRequest{ Params :  Returns : void} testClosingVertxCloseSharedServers{ Params :  Returns : void} testRandomSharedPortInVerticle{ Params :  Returns : void} testRandomSharedPortsInVerticle{ Params :  Returns : void} testRandomPortsInVerticle1{ Params :  Returns : void} testRandomPortsInVerticle2{ Params :  Returns : void} testRandomPortInVerticle{ Params : int,int[],int Returns : void} start{ Params : Promise<Void> Returns : void} testHttpServerWithIdleTimeoutSendChunkedFile{ Params :  Returns : void} testSendFilePipelined{ Params :  Returns : void} testSendFileWithConnectionCloseHeader{ Params :  Returns : void} testResponseEndHandlersConnectionClose{ Params :  Returns : void} testUnsolicitedHttpResponse{ Params :  Returns : void} testClientConnectionGracefulShutdown{ Params :  Returns : void} testClientConnectionGracefulShutdownWhenRequestCompletedAfterResponse{ Params :  Returns : void} testClientConnectionShutdownTimedOut{ Params :  Returns : void} testClientConnectionShutdownNow{ Params :  Returns : void} testClientNetSocketPooling{ Params :  Returns : void} testHttpUpgrade{ Params :  Returns : void} testServerResponseReset{ Params :  Returns : void} testNetSocketUpgradeSuccess{ Params :  Returns : void} testNetSocketUpgradeSuccessWithPayload{ Params :  Returns : void} testNetSocketUpgradeSuccess{ Params : Buffer Returns : void} testClientEventLoopSize{ Params :  Returns : void} testServerResponseChunkedSend{ Params :  Returns : void} testClientCloseWaiters{ Params :  Returns : void} testShutdown{ Params :  Returns : void} ,getOptions testCloseHandlerNotCalledWhenConnectionClosedAfterEnd start start ,invalidCharsForHeaders ,,,,,,,HttpClientOptions JksOptions JksOptions Http2Settings JdkSSLEngineOptions HttpServerOptions JksOptions JksOptions HttpServerOptions JdkSSLEngineOptions Http2Settings HttpClientOptions Random JdkSSLEngineOptions OpenSSLEngineOptions HttpClientOptions HttpClientOptions HttpClientOptions HttpClientOptions JsonObject Random JksOptions JksOptions JsonObject JsonArray JsonArray JsonObject JsonObject JsonObject JsonObject JsonArray HttpClientOptions JsonObject JsonObject HttpClientOptions JsonObject JsonObject HttpClientOptions HttpClientOptions HttpServerOptions Random JdkSSLEngineOptions OpenSSLEngineOptions HttpServerOptions HttpServerOptions HttpServerOptions HttpServerOptions JsonObject Random JksOptions JksOptions JsonObject JsonArray JsonArray JsonObject JsonObject JsonArray JsonObject JsonObject JsonArray HttpServerOptions JsonObject JsonObject HttpServerOptions JsonObject JsonObject HttpServerOptions CountDownLatch AtomicInteger AtomicBoolean CountDownLatch RequestOptions AtomicInteger RequestOptions HttpClientOptions AtomicInteger NetServerOptions StringBuilder AtomicInteger RequestOptions AtomicBoolean HttpClientOptions AtomicBoolean CompletableFuture AtomicInteger CopyOnWriteArrayList RequestOptions StringBuilder NetClientOptions Client HttpClientOptions AtomicBoolean AtomicInteger RequestOptions CountDownLatch CountDownLatch ConcurrentHashSet HttpServerOptions CountDownLatch CountDownLatch AtomicInteger RequestOptions HttpClientOptions RequestOptions RequestOptions AtomicInteger RequestOptions HttpClientOptions ArrayList ConcurrentHashMap ConcurrentHashMap CountDownLatch CountDownLatch ConcurrentHashSet HttpServerOptions AtomicReference CountDownLatch ArrayList CountDownLatch CountDownLatch HttpServerOptions CountDownLatch HttpServerOptions CountDownLatch CountDownLatch AtomicBoolean StringBuilder RequestOptions HttpClientOptions RequestOptions RequestOptions HttpServerOptions HttpClientOptions AtomicInteger CountDownLatch ArrayList HashMap HashMap CompletableFuture CountDownLatch HashSet CompletableFuture ConcurrentHashSet CompletableFuture RequestOptions HashSet Thread NetClientOptions DeploymentOptions Random HttpClientOptions RequestOptions AtomicInteger CountDownLatch AtomicInteger AtomicInteger CountDownLatch CountDownLatch CountDownLatch RequestOptions RequestOptions HttpClientOptions RequestOptions HttpClientOptions HttpClientOptions AtomicInteger StringBuilder AtomicBoolean RequestOptions AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean NetServerOptions CountDownLatch HttpClientOptions AtomicInteger HttpClientOptions AtomicBoolean RequestOptions RequestOptions CountDownLatch ArrayList AtomicInteger CountDownLatch RequestOptions RequestOptions CountDownLatch HashSet AtomicInteger RequestOptions HttpServerOptions RequestOptions AtomicInteger StringBuilder CountDownLatch RequestOptions RequestOptions AtomicInteger CountDownLatch HttpClientOptions AtomicInteger RequestOptions CompletableFuture AtomicInteger CountDownLatch RequestOptions RequestOptions AtomicInteger AtomicBoolean CountDownLatch HttpClientOptions RequestOptions RequestOptions AtomicInteger AtomicBoolean CountDownLatch RequestOptions RequestOptions RequestOptions RequestOptions CompletableFuture CompletableFuture AtomicInteger AtomicBoolean CountDownLatch RequestOptions RequestOptions RequestOptions AtomicReference ArrayList CountDownLatch CompletableFuture AtomicInteger CountDownLatch CompletableFuture AtomicInteger CountDownLatch AtomicBoolean AbstractVerticle HttpClientOptions AtomicBoolean DeploymentOptions HttpClientOptions RequestOptions HttpClientOptions RequestOptions HttpClientOptions ProxyOptions RequestOptions HashMap AtomicInteger AtomicInteger CompletableFuture LinkedList Exception HttpClientOptions HttpServerOptions HttpClientOptions AtomicBoolean HttpClientOptions AtomicBoolean HttpClientOptions AtomicBoolean HttpClientOptions RequestOptions ArrayList ArrayList CountDownLatch RuntimeException CompletableFuture AtomicInteger CountDownLatch RequestOptions RequestOptions AtomicInteger AtomicInteger RequestOptions AtomicInteger AtomicInteger RequestOptions AtomicInteger HttpClientOptions CountDownLatch RequestOptions RequestOptions RequestOptions RequestOptions AtomicInteger HttpClientOptions HttpClientOptions HttpServerOptions CheckingSender HttpServerOptions RequestOptions CheckingSender AtomicBoolean AtomicBoolean ArrayList AtomicInteger ArrayList CountDownLatch CountDownLatch AtomicBoolean CountDownLatch RequestOptions ArrayList CountDownLatch HashSet AbstractVerticle ArrayList DeploymentOptions RequestOptions AtomicBoolean CountDownLatch AtomicBoolean AtomicReference AtomicInteger AtomicInteger RequestOptions AtomicBoolean AtomicReference AtomicReference AtomicInteger RequestOptions RequestOptions RequestOptions ArrayList HttpClientOptions ArrayList ArrayList HashSet CountDownLatch AtomicReference CountDownLatch ,: , shutdown
vert.x-master,io.vertx.core.http,Client,1,0,0,0,0,false,HttpTest ,0 ,0 ,so: NetSocket received: StringBuilder curr: int count: int closed: boolean ,getOptions{ Params :  Returns : VertxOptions} testClientOptions{ Params :  Returns : void} testServerOptions{ Params :  Returns : void} testCopyClientOptions{ Params :  Returns : void} checkCopyHttpClientOptions{ Params : HttpClientOptions,HttpClientOptions Returns : void} testDefaultClientOptionsJson{ Params :  Returns : void} testClientOptionsJson{ Params :  Returns : void} testCopyServerOptions{ Params :  Returns : void} checkCopyHttpServerOptions{ Params : HttpServerOptions,HttpServerOptions Returns : void} testDefaultServerOptionsJson{ Params :  Returns : void} testServerOptionsJson{ Params :  Returns : void} testCloseHandlerNotCalledWhenConnectionClosedAfterEnd{ Params :  Returns : void} testTimedOutWaiterDoesNotConnect{ Params :  Returns : void} testPipeliningOrder{ Params :  Returns : void} testPipeliningLimit{ Params :  Returns : void} testCloseServerConnectionWithPendingMessages{ Params :  Returns : void} testPipeliningFailure{ Params :  Returns : void} testPipelineStress{ Params :  Returns : void} close{ Params :  Returns : void} receiveChunk{ Params : Buffer Returns : void} send{ Params :  Returns : void} run{ Params :  Returns : void} testPipeliningPauseRequest{ Params :  Returns : void} testServerPipeliningConnectionConcurrency{ Params :  Returns : void} testKeepAlive{ Params :  Returns : void} testNoKeepAlive{ Params :  Returns : void} testKeepAlive{ Params : boolean,int,int,int Returns : void} testPoolingKeepAliveAndPipelining{ Params :  Returns : void} testPoolingKeepAliveNoPipelining{ Params :  Returns : void} testPoolingNoKeepAliveNoPipelining{ Params :  Returns : void} testPooling{ Params : boolean,boolean Returns : void} testPoolingNoKeepAliveAndPipelining{ Params :  Returns : void} testMaxWaitQueueSizeIsRespected{ Params :  Returns : void} testRequestTimeoutExtendedWhenResponseChunksReceived{ Params :  Returns : void} testServerWebSocketIdleTimeout{ Params :  Returns : void} testClientWebSocketIdleTimeout{ Params :  Returns : void} testSharedServersRoundRobin{ Params :  Returns : void} testSharedServersRoundRobinWithOtherServerRunningOnDifferentPort{ Params :  Returns : void} testSharedServersRoundRobinButFirstStartAndStopServer{ Params :  Returns : void} testDefaultHttpVersion{ Params :  Returns : void} testIncorrectHttpVersion{ Params :  Returns : void} testHttp11PersistentConnectionNotClosed{ Params :  Returns : void} testHttp11NonPersistentConnectionClosed{ Params :  Returns : void} testHttp10KeepAliveConnectionNotClosed{ Params :  Returns : void} testHttp10RequestNonKeepAliveConnectionClosed{ Params :  Returns : void} testHttp10ResponseNonKeepAliveConnectionClosed{ Params :  Returns : void} requestAbsNoPort{ Params :  Returns : void} testRequestsTimeoutInQueue{ Params :  Returns : void} testServerOptionsCopiedBeforeUse{ Params :  Returns : void} testClientOptionsCopiedBeforeUse{ Params :  Returns : void} testRequestExceptionHandlerContext{ Params :  Returns : void} fill{ Params : Buffer,WriteStream<Buffer>,LongConsumer Returns : void} fill{ Params : long,Buffer,WriteStream<Buffer>,LongConsumer Returns : void} testContexts{ Params :  Returns : void} testRequestHandlerNotCalledInvalidRequest{ Params :  Returns : void} testTwoServersSameAddressDifferentContext{ Params :  Returns : void} testPauseResumeClientResponse{ Params :  Returns : void} testPauseResumeServerRequestFromAnotherThread{ Params :  Returns : void} send{ Params : HttpClientRequest,Buffer,int,int Returns : void} testEndServerResponseResumeTheConnection{ Params :  Returns : void} testEndServerRequestResumeTheConnection{ Params :  Returns : void} testMultipleRecursiveCallsAndPipelining{ Params :  Returns : void} recursiveCall{ Params : HttpClient,AtomicInteger,int Returns : void} testUnsupportedHttpVersion{ Params :  Returns : void} testUnsupported{ Params : String,boolean Returns : void} testTwoServersDifferentEventLoopsCloseOne{ Params :  Returns : void} testSetWriteQueueMaxSize{ Params :  Returns : void} testServerMaxInitialLineLength{ Params :  Returns : void} testServerMaxInitialLineLengthOption{ Params :  Returns : void} testServerMaxInitialLineLength{ Params : int Returns : void} testServerInvalidHttpMessage{ Params :  Returns : void} testClientMaxInitialLineLengthOption{ Params :  Returns : void} testClientMaxHeaderSizeOption{ Params :  Returns : void} testServerMaxHeaderSize{ Params :  Returns : void} testServerMaxHeaderSizeOption{ Params :  Returns : void} testServerMaxHeaderSize{ Params : int Returns : void} testPipelinedInvalidHttpResponse{ Params :  Returns : void} testConnectionCloseHttp_1_0_NoClose{ Params :  Returns : void} testConnectionCloseHttp_1_0_Close{ Params :  Returns : void} testConnectionCloseHttp_1_1_NoClose{ Params :  Returns : void} testConnectionCloseHttp_1_1_Close{ Params :  Returns : void} testConnectionClose{ Params : Handler<HttpClientRequest>,Handler<NetSocket> Returns : void} testDoNotReuseConnectionWhenResponseEndsBeforeRequest{ Params :  Returns : void} testRecyclePipelinedConnection{ Params :  Returns : void} testClientConnectionExceptionHandler{ Params :  Returns : void} testServerConnectionExceptionHandler{ Params :  Returns : void} testServerExceptionHandler{ Params :  Returns : void} testRandomPorts{ Params :  Returns : void} testContentDecompression{ Params :  Returns : void} testResetClientRequestNotYetSent{ Params :  Returns : void} testResetKeepAliveClientRequestNotYetSent{ Params :  Returns : void} testResetPipelinedClientRequestNotYetSent{ Params :  Returns : void} testResetClientRequestNotYetSent{ Params : boolean,boolean Returns : void} testResetKeepAliveClientRequest{ Params :  Returns : void} testResetPipelinedClientRequest{ Params :  Returns : void} testCloseTheConnectionAfterResetKeepAliveClientRequest{ Params :  Returns : void} testCloseTheConnectionAfterResetPipelinedClientRequest{ Params :  Returns : void} testCloseTheConnectionAfterResetPersistentClientRequest{ Params : boolean Returns : void} testCloseTheConnectionAfterResetKeepAliveClientResponse{ Params :  Returns : void} testCloseTheConnectionAfterResetPipelinedClientResponse{ Params :  Returns : void} testCloseTheConnectionAfterResetPersistentClientResponse{ Params : boolean Returns : void} testCloseTheConnectionAfterResetBeforePipelinedResponseReceived{ Params :  Returns : void} testCloseTheConnectionAfterResetBeforeKeepAliveResponseReceived{ Params :  Returns : void} testCloseTheConnectionAfterResetBeforeResponseReceived{ Params : boolean Returns : void} testTooLongContentInHttpServerRequest{ Params :  Returns : void} testInvalidTrailerInHttpServerRequest{ Params :  Returns : void} testInvalidChunkInHttpServerRequest{ Params :  Returns : void} testHttpServerRequestDecodeError{ Params : Handler<NetSocket>,Handler<List<Throwable>> Returns : void} testInvalidChunkInHttpClientResponse{ Params :  Returns : void} testInvalidTrailersInHttpClientResponse{ Params :  Returns : void} testHttpClientResponseDecodeError{ Params : Handler<Void>,Handler<Throwable> Returns : void} testEmptyHttpVersion{ Params :  Returns : void} testReceiveResponseWithNoRequestInProgress{ Params :  Returns : void} testRequestTimeoutIsNotDelayedAfterResponseIsReceived{ Params :  Returns : void} start{ Params :  Returns : void} testPerHostPooling{ Params :  Returns : void} testPerPeerPooling{ Params :  Returns : void} testPerPeerPoolingWithProxy{ Params :  Returns : void} testPerXXXPooling{ Params : Function<Integer,Future<HttpClientRequest>>,Function<HttpServerRequest,String> Returns : void} testSendFileFailsWhenClientClosesConnection{ Params :  Returns : void} checkEmptyHttpResponse{ Params : HttpMethod,int,MultiMap Returns : MultiMap} testUnknownContentLengthIsSetToZeroWithHTTP_1_0{ Params :  Returns : void} testPartialH2CAmbiguousRequest{ Params :  Returns : void} testIdleTimeoutWithPartialH2CRequest{ Params :  Returns : void} testTLSDisablesH2CHandlers{ Params :  Returns : void} testIdleTimeoutInfiniteSkipOfControlCharactersState{ Params :  Returns : void} testCompressedResponseWithConnectionCloseAndNoCompressionHeader{ Params :  Returns : void} testKeepAliveTimeoutHeader{ Params :  Returns : void} testKeepAliveTimeoutHeaderReusePrevious{ Params :  Returns : void} testKeepAliveTimeoutHeaderOverwritePrevious{ Params :  Returns : void} testPausedHttpServerRequestPauseTheConnectionAtRequestEnd{ Params :  Returns : void} testPausedHttpClientResponseUnpauseTheConnectionAtRequestEnd{ Params :  Returns : void} testHttpClientResponsePauseIsIgnoredAtRequestEnd{ Params :  Returns : void} testHttpClientResponsePause{ Params : Handler<HttpClientResponse> Returns : void} testPoolLIFOPolicy{ Params :  Returns : void} testHttpClientResponseThrowsExceptionInResponseHandler{ Params :  Returns : void} testHttpClientResponseThrowsExceptionInChunkHandler{ Params :  Returns : void} testHttpClientResponseThrowsExceptionInEndHandler{ Params :  Returns : void} testHttpClientResponseThrowsExceptionInHandler{ Params : String,BiConsumer<HttpClientResponse,RuntimeException> Returns : void} testConnectionCloseDuringShouldCallHandleExceptionOnlyOnce{ Params :  Returns : void} testDeferredRequestEnd{ Params :  Returns : void} testPipelinedWithResponseSent{ Params :  Returns : void} testPipelinedWithPendingResponse{ Params :  Returns : void} testPipelinedPostRequestStartedByResponseSent{ Params :  Returns : void} testBeginPipelinedRequestByResponseSentOnRequestCompletion{ Params :  Returns : void} testBeginPipelinedRequestByResponseSentBeforeRequestCompletion{ Params :  Returns : void} testPipeliningQueueDelayed{ Params :  Returns : void} testHttpClientResponseBufferedWithPausedEnd{ Params :  Returns : void} testHttpClientResumeConnectionOnResponseOnLastMessage{ Params :  Returns : void} testSetChunkedToFalse{ Params :  Returns : void} testHttpServerRequestShouldCallExceptionHandlerWhenTheClosedHandlerIsCalled{ Params :  Returns : void} testHttpClientRequestShouldCallExceptionHandlerWhenTheClosedHandlerIsCalled{ Params :  Returns : void} testHeaderNameValidation{ Params :  Returns : void} invalidCharsForHeaders{ Params :  Returns : List<String>} testHeaderValueValidation{ Params :  Returns : void} testHeaderNameStartsOrEndsWithControlChars{ Params :  Returns : void} testInvalidHttpRequestHeaderResponse{ Params :  Returns : void} testInvalidHttpResponseHeader{ Params :  Returns : void} testChunkedServerResponse{ Params :  Returns : void} testChunkedClientRequest{ Params :  Returns : void} testClosingVertxCloseSharedServers{ Params :  Returns : void} testRandomSharedPortInVerticle{ Params :  Returns : void} testRandomSharedPortsInVerticle{ Params :  Returns : void} testRandomPortsInVerticle1{ Params :  Returns : void} testRandomPortsInVerticle2{ Params :  Returns : void} testRandomPortInVerticle{ Params : int,int[],int Returns : void} start{ Params : Promise<Void> Returns : void} testHttpServerWithIdleTimeoutSendChunkedFile{ Params :  Returns : void} testSendFilePipelined{ Params :  Returns : void} testSendFileWithConnectionCloseHeader{ Params :  Returns : void} testResponseEndHandlersConnectionClose{ Params :  Returns : void} testUnsolicitedHttpResponse{ Params :  Returns : void} testClientConnectionGracefulShutdown{ Params :  Returns : void} testClientConnectionGracefulShutdownWhenRequestCompletedAfterResponse{ Params :  Returns : void} testClientConnectionShutdownTimedOut{ Params :  Returns : void} testClientConnectionShutdownNow{ Params :  Returns : void} testClientNetSocketPooling{ Params :  Returns : void} testHttpUpgrade{ Params :  Returns : void} testServerResponseReset{ Params :  Returns : void} testNetSocketUpgradeSuccess{ Params :  Returns : void} testNetSocketUpgradeSuccessWithPayload{ Params :  Returns : void} testNetSocketUpgradeSuccess{ Params : Buffer Returns : void} testClientEventLoopSize{ Params :  Returns : void} testServerResponseChunkedSend{ Params :  Returns : void} testClientCloseWaiters{ Params :  Returns : void} testShutdown{ Params :  Returns : void} ,getOptions testCloseHandlerNotCalledWhenConnectionClosedAfterEnd start start ,invalidCharsForHeaders ,,,,boolean ,,boolean ,StringBuilder ,so: 
vert.x-master,io.vertx.core.http,Http1xTLSTest,1,1,0,0,0,false,HttpTLSTest ,0 ,0 ,,createHttpServer{ Params : HttpServerOptions Returns : HttpServer} createHttpClient{ Params : HttpClientOptions Returns : HttpClient} testAlpn{ Params :  Returns : void} testClearClientRequestOptionsSetSSL{ Params :  Returns : void} testSSLClientRequestOptionsSetSSL{ Params :  Returns : void} testClearClientRequestOptionsSetClear{ Params :  Returns : void} testSSLClientRequestOptionsSetClear{ Params :  Returns : void} testClearClientRequestAbsSetSSL{ Params :  Returns : void} testSSLClientRequestAbsSetSSL{ Params :  Returns : void} testClearClientRequestAbsSetClear{ Params :  Returns : void} testSSLClientRequestAbsSetClear{ Params :  Returns : void} testRedirectToSSL{ Params :  Returns : void} testRedirectFromSSL{ Params :  Returns : void} testAppendToHttpChunks{ Params :  Returns : void} testSharedServer{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} ,createHttpServer createHttpClient start ,,,,,,,,RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions HttpServerOptions RequestOptions HttpServerOptions RequestOptions HttpServerOptions HttpClientOptions ArrayList HttpClientOptions AtomicInteger ArrayList CountDownLatch AbstractVerticle HttpServerOptions DeploymentOptions CountDownLatch HashSet ,new HashSet<>(sessionIds): 
vert.x-master,io.vertx.core.http,Http2BrotliCompressionTest,1,1,0,0,0,false,HttpCompressionTestBase ,0 ,0 ,,createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} encoder{ Params :  Returns : MessageToByteEncoder<ByteBuf>} encoding{ Params :  Returns : String} configureServerCompression{ Params : HttpServerOptions Returns : void} ,createBaseServerOptions createBaseClientOptions encoder encoding configureServerCompression ,,,,,,,,BrotliEncoder ,StandardCompressionOptions: 
vert.x-master,io.vertx.core.http,Http2ClientConnectionTest,1,1,0,0,0,false,HttpClientConnectionTest ,0 ,0 ,,createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} ,createBaseServerOptions createBaseClientOptions ,,,,,,,,,Http2TestBase: 
vert.x-master,io.vertx.core.http,Http2ClientTest,1,1,0,0,0,false,Http2TestBase ,0 ,0 ,,testClientSettings{ Params :  Returns : void} testInvalidSettings{ Params :  Returns : void} testServerSettings{ Params :  Returns : void} testReduceMaxConcurrentStreams{ Params :  Returns : void} testGet{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testHeaders{ Params :  Returns : void} testResponseBody{ Params :  Returns : void} testEmptyResponseBody{ Params :  Returns : void} testResponseBody{ Params : String Returns : void} testOverrideAuthority{ Params :  Returns : void} testTrailers{ Params :  Returns : void} testBodyEndHandler{ Params :  Returns : void} testPost{ Params :  Returns : void} testEmptyPost{ Params :  Returns : void} testPost{ Params : String Returns : void} testClientRequestWriteability{ Params :  Returns : void} testClientResponsePauseResume{ Params :  Returns : void} testQueueingRequests{ Params :  Returns : void} testQueueingRequestsMaxConcurrentStream{ Params :  Returns : void} testQueueingRequests{ Params : int,Long Returns : void} testReuseConnection{ Params :  Returns : void} testConnectionFailed{ Params :  Returns : void} testFallbackOnHttp1{ Params :  Returns : void} testServerResetClientStreamDuringRequest{ Params :  Returns : void} testServerResetClientStreamDuringResponse{ Params :  Returns : void} testClientResetServerStream1{ Params :  Returns : void} testClientResetServerStream2{ Params :  Returns : void} testClientResetServerStream3{ Params :  Returns : void} testClientResetServerStream{ Params : boolean,boolean Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testPushPromise{ Params :  Returns : void} testResetActivePushPromise{ Params :  Returns : void} testResetPendingPushPromise{ Params :  Returns : void} testResetPushPromiseNoHandler{ Params :  Returns : void} testConnectionHandler{ Params :  Returns : void} testConnectionShutdownInConnectionHandler{ Params :  Returns : void} testServerShutdownConnection{ Params :  Returns : void} testReceivingGoAwayDiscardsTheConnection{ Params :  Returns : void} testSendingGoAwayDiscardsTheConnection{ Params :  Returns : void} createHttpConnectionHandler{ Params : BiFunction<Http2ConnectionDecoder,Http2ConnectionEncoder,Http2FrameListener> Returns : Http2ConnectionHandler} build{ Params : Http2ConnectionDecoder,Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2Settings Returns : Handler} build{ Params :  Returns : Handler} createH2Server{ Params : BiFunction<Http2ConnectionDecoder,Http2ConnectionEncoder,Http2FrameListener> Returns : ServerBootstrap} initChannel{ Params : Channel Returns : void} configurePipeline{ Params : ChannelHandlerContext,String Returns : void} createH2CServer{ Params : BiFunction<Http2ConnectionDecoder,Http2ConnectionEncoder,Http2FrameListener>,Handler<HttpServerUpgradeHandler.UpgradeEvent>,boolean Returns : ServerBootstrap} initChannel{ Params : Channel Returns : void} onSettingsRead{ Params : ChannelHandlerContext,io.netty.handler.codec.http2.Http2Settings Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} testStreamError{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testConnectionDecodeError{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testInvalidServerResponse{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testResponseCompressionEnabled{ Params :  Returns : void} testResponseCompressionDisabled{ Params :  Returns : void} testResponseCompression{ Params : boolean Returns : void} test100Continue{ Params :  Returns : void} testNetSocketConnect{ Params :  Returns : void} testServerCloseNetSocket{ Params :  Returns : void} testSendHeadersCompletionHandler{ Params :  Returns : void} testUnknownFrame{ Params :  Returns : void} testClearTextUpgrade{ Params :  Returns : void} testClearTextUpgradeWithPreflightRequest{ Params :  Returns : void} testClearTextWithPriorKnowledge{ Params :  Returns : void} testClearText{ Params : boolean,boolean Returns : List<String>} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testRejectClearTextUpgrade{ Params :  Returns : void} testRejectClearTextDirect{ Params :  Returns : void} testIdleTimeout{ Params :  Returns : void} testIdleTimeoutClearTextUpgrade{ Params :  Returns : void} testIdleTimeoutClearTextDirect{ Params :  Returns : void} testIdleTimeout{ Params : HttpServerOptions,HttpClientOptions Returns : void} testIdleTimoutNoConnections{ Params :  Returns : void} testDisableIdleTimeoutClearTextUpgrade{ Params :  Returns : void} testSendPing{ Params :  Returns : void} testReceivePing{ Params :  Returns : void} testMaxConcurrencySingleConnection{ Params :  Returns : void} testMaxConcurrencyMultipleConnections{ Params :  Returns : void} testMaxConcurrency{ Params : int,int Returns : void} testConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testUpdateConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testStreamPriority{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testStreamPriorityChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testClientStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testServerStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} testClearTestDirectServerCloseBeforeSettingsRead{ Params :  Returns : void} ,onHeadersRead onGoAwayRead onHeadersRead onDataRead onRstStreamRead build build initChannel configurePipeline initChannel onSettingsRead userEventTriggered onHeadersRead onHeadersRead onHeadersRead onHeadersRead onWindowUpdateRead onWindowUpdateRead onHeadersRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead ,,,,,,,,AtomicInteger Http2Settings AtomicInteger Http2Settings ArrayList AtomicBoolean Http2Settings Http2EventAdapter DefaultHttp2Headers AtomicInteger HashSet HashSet RequestOptions HashSet HashSet AtomicInteger RequestOptions AtomicInteger RequestOptions CompletableFuture AtomicBoolean AtomicInteger RequestOptions AtomicInteger AtomicInteger AtomicInteger AtomicBoolean Http2Settings CountDownLatch ArrayList CountDownLatch RequestOptions RequestOptions RequestOptions Http2EventAdapter DefaultHttp2Headers AtomicReference Http2Settings AtomicLong AtomicReference AtomicInteger AtomicInteger AtomicInteger AtomicInteger HashSet RequestOptions AtomicInteger RequestOptions Handler Builder ServerBootstrap NioEventLoopGroup ChannelInitializer ApplicationProtocolConfig ApplicationProtocolNegotiationHandler IllegalStateException ServerBootstrap NioEventLoopGroup ChannelInitializer HttpServerCodec Http2FrameListenerDecorator DefaultHttp2Headers Http2ServerUpgradeCodec HttpServerUpgradeHandler ChannelInboundHandlerAdapter Http2EventAdapter DefaultHttp2Headers RequestOptions Http2EventAdapter DefaultHttp2Headers RequestOptions Http2EventAdapter DefaultHttp2Headers ByteArrayOutputStream GZIPOutputStream AtomicInteger AtomicInteger RequestOptions StringBuilder AtomicInteger AtomicInteger RequestOptions AtomicInteger AtomicInteger AtomicInteger ArrayList Http2EventAdapter DefaultHttp2Headers AtomicBoolean HttpServerOptions HttpServerOptions AtomicLong HttpServerOptions HttpClientOptions HashSet ArrayList HttpClientOptions AtomicInteger HashSet Http2EventAdapter HttpClientOptions Http2EventAdapter StreamPriority StreamPriority Http2EventAdapter DefaultHttp2Headers StreamPriority StreamPriority StreamPriority StreamPriority Http2EventAdapter DefaultHttp2Headers RequestOptions StreamPriority Http2EventAdapter DefaultHttp2Headers RequestOptions StreamPriority Http2EventAdapter DefaultHttp2Headers HttpClientOptions ,: 
vert.x-master,io.vertx.core.http,Handler,1,0,0,0,0,false,Http2TestBase ,0 ,0 ,,testClientSettings{ Params :  Returns : void} testInvalidSettings{ Params :  Returns : void} testServerSettings{ Params :  Returns : void} testReduceMaxConcurrentStreams{ Params :  Returns : void} testGet{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testHeaders{ Params :  Returns : void} testResponseBody{ Params :  Returns : void} testEmptyResponseBody{ Params :  Returns : void} testResponseBody{ Params : String Returns : void} testOverrideAuthority{ Params :  Returns : void} testTrailers{ Params :  Returns : void} testBodyEndHandler{ Params :  Returns : void} testPost{ Params :  Returns : void} testEmptyPost{ Params :  Returns : void} testPost{ Params : String Returns : void} testClientRequestWriteability{ Params :  Returns : void} testClientResponsePauseResume{ Params :  Returns : void} testQueueingRequests{ Params :  Returns : void} testQueueingRequestsMaxConcurrentStream{ Params :  Returns : void} testQueueingRequests{ Params : int,Long Returns : void} testReuseConnection{ Params :  Returns : void} testConnectionFailed{ Params :  Returns : void} testFallbackOnHttp1{ Params :  Returns : void} testServerResetClientStreamDuringRequest{ Params :  Returns : void} testServerResetClientStreamDuringResponse{ Params :  Returns : void} testClientResetServerStream1{ Params :  Returns : void} testClientResetServerStream2{ Params :  Returns : void} testClientResetServerStream3{ Params :  Returns : void} testClientResetServerStream{ Params : boolean,boolean Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testPushPromise{ Params :  Returns : void} testResetActivePushPromise{ Params :  Returns : void} testResetPendingPushPromise{ Params :  Returns : void} testResetPushPromiseNoHandler{ Params :  Returns : void} testConnectionHandler{ Params :  Returns : void} testConnectionShutdownInConnectionHandler{ Params :  Returns : void} testServerShutdownConnection{ Params :  Returns : void} testReceivingGoAwayDiscardsTheConnection{ Params :  Returns : void} testSendingGoAwayDiscardsTheConnection{ Params :  Returns : void} createHttpConnectionHandler{ Params : BiFunction<Http2ConnectionDecoder,Http2ConnectionEncoder,Http2FrameListener> Returns : Http2ConnectionHandler} build{ Params : Http2ConnectionDecoder,Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2Settings Returns : Handler} build{ Params :  Returns : Handler} createH2Server{ Params : BiFunction<Http2ConnectionDecoder,Http2ConnectionEncoder,Http2FrameListener> Returns : ServerBootstrap} initChannel{ Params : Channel Returns : void} configurePipeline{ Params : ChannelHandlerContext,String Returns : void} createH2CServer{ Params : BiFunction<Http2ConnectionDecoder,Http2ConnectionEncoder,Http2FrameListener>,Handler<HttpServerUpgradeHandler.UpgradeEvent>,boolean Returns : ServerBootstrap} initChannel{ Params : Channel Returns : void} onSettingsRead{ Params : ChannelHandlerContext,io.netty.handler.codec.http2.Http2Settings Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} testStreamError{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testConnectionDecodeError{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testInvalidServerResponse{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testResponseCompressionEnabled{ Params :  Returns : void} testResponseCompressionDisabled{ Params :  Returns : void} testResponseCompression{ Params : boolean Returns : void} test100Continue{ Params :  Returns : void} testNetSocketConnect{ Params :  Returns : void} testServerCloseNetSocket{ Params :  Returns : void} testSendHeadersCompletionHandler{ Params :  Returns : void} testUnknownFrame{ Params :  Returns : void} testClearTextUpgrade{ Params :  Returns : void} testClearTextUpgradeWithPreflightRequest{ Params :  Returns : void} testClearTextWithPriorKnowledge{ Params :  Returns : void} testClearText{ Params : boolean,boolean Returns : List<String>} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testRejectClearTextUpgrade{ Params :  Returns : void} testRejectClearTextDirect{ Params :  Returns : void} testIdleTimeout{ Params :  Returns : void} testIdleTimeoutClearTextUpgrade{ Params :  Returns : void} testIdleTimeoutClearTextDirect{ Params :  Returns : void} testIdleTimeout{ Params : HttpServerOptions,HttpClientOptions Returns : void} testIdleTimoutNoConnections{ Params :  Returns : void} testDisableIdleTimeoutClearTextUpgrade{ Params :  Returns : void} testSendPing{ Params :  Returns : void} testReceivePing{ Params :  Returns : void} testMaxConcurrencySingleConnection{ Params :  Returns : void} testMaxConcurrencyMultipleConnections{ Params :  Returns : void} testMaxConcurrency{ Params : int,int Returns : void} testConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testUpdateConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testStreamPriority{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testStreamPriorityChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testClientStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testServerStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} testClearTestDirectServerCloseBeforeSettingsRead{ Params :  Returns : void} ,onHeadersRead onGoAwayRead onHeadersRead onDataRead onRstStreamRead build build initChannel configurePipeline initChannel onSettingsRead userEventTriggered onHeadersRead onHeadersRead onHeadersRead onHeadersRead onWindowUpdateRead onWindowUpdateRead onHeadersRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead ,,,,,,,,,null
vert.x-master,io.vertx.core.http,Builder,1,0,0,0,0,false,Http2TestBase ,0 ,0 ,,testClientSettings{ Params :  Returns : void} testInvalidSettings{ Params :  Returns : void} testServerSettings{ Params :  Returns : void} testReduceMaxConcurrentStreams{ Params :  Returns : void} testGet{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testHeaders{ Params :  Returns : void} testResponseBody{ Params :  Returns : void} testEmptyResponseBody{ Params :  Returns : void} testResponseBody{ Params : String Returns : void} testOverrideAuthority{ Params :  Returns : void} testTrailers{ Params :  Returns : void} testBodyEndHandler{ Params :  Returns : void} testPost{ Params :  Returns : void} testEmptyPost{ Params :  Returns : void} testPost{ Params : String Returns : void} testClientRequestWriteability{ Params :  Returns : void} testClientResponsePauseResume{ Params :  Returns : void} testQueueingRequests{ Params :  Returns : void} testQueueingRequestsMaxConcurrentStream{ Params :  Returns : void} testQueueingRequests{ Params : int,Long Returns : void} testReuseConnection{ Params :  Returns : void} testConnectionFailed{ Params :  Returns : void} testFallbackOnHttp1{ Params :  Returns : void} testServerResetClientStreamDuringRequest{ Params :  Returns : void} testServerResetClientStreamDuringResponse{ Params :  Returns : void} testClientResetServerStream1{ Params :  Returns : void} testClientResetServerStream2{ Params :  Returns : void} testClientResetServerStream3{ Params :  Returns : void} testClientResetServerStream{ Params : boolean,boolean Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testPushPromise{ Params :  Returns : void} testResetActivePushPromise{ Params :  Returns : void} testResetPendingPushPromise{ Params :  Returns : void} testResetPushPromiseNoHandler{ Params :  Returns : void} testConnectionHandler{ Params :  Returns : void} testConnectionShutdownInConnectionHandler{ Params :  Returns : void} testServerShutdownConnection{ Params :  Returns : void} testReceivingGoAwayDiscardsTheConnection{ Params :  Returns : void} testSendingGoAwayDiscardsTheConnection{ Params :  Returns : void} createHttpConnectionHandler{ Params : BiFunction<Http2ConnectionDecoder,Http2ConnectionEncoder,Http2FrameListener> Returns : Http2ConnectionHandler} build{ Params : Http2ConnectionDecoder,Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2Settings Returns : Handler} build{ Params :  Returns : Handler} createH2Server{ Params : BiFunction<Http2ConnectionDecoder,Http2ConnectionEncoder,Http2FrameListener> Returns : ServerBootstrap} initChannel{ Params : Channel Returns : void} configurePipeline{ Params : ChannelHandlerContext,String Returns : void} createH2CServer{ Params : BiFunction<Http2ConnectionDecoder,Http2ConnectionEncoder,Http2FrameListener>,Handler<HttpServerUpgradeHandler.UpgradeEvent>,boolean Returns : ServerBootstrap} initChannel{ Params : Channel Returns : void} onSettingsRead{ Params : ChannelHandlerContext,io.netty.handler.codec.http2.Http2Settings Returns : void} userEventTriggered{ Params : ChannelHandlerContext,Object Returns : void} testStreamError{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testConnectionDecodeError{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testInvalidServerResponse{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testResponseCompressionEnabled{ Params :  Returns : void} testResponseCompressionDisabled{ Params :  Returns : void} testResponseCompression{ Params : boolean Returns : void} test100Continue{ Params :  Returns : void} testNetSocketConnect{ Params :  Returns : void} testServerCloseNetSocket{ Params :  Returns : void} testSendHeadersCompletionHandler{ Params :  Returns : void} testUnknownFrame{ Params :  Returns : void} testClearTextUpgrade{ Params :  Returns : void} testClearTextUpgradeWithPreflightRequest{ Params :  Returns : void} testClearTextWithPriorKnowledge{ Params :  Returns : void} testClearText{ Params : boolean,boolean Returns : List<String>} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testRejectClearTextUpgrade{ Params :  Returns : void} testRejectClearTextDirect{ Params :  Returns : void} testIdleTimeout{ Params :  Returns : void} testIdleTimeoutClearTextUpgrade{ Params :  Returns : void} testIdleTimeoutClearTextDirect{ Params :  Returns : void} testIdleTimeout{ Params : HttpServerOptions,HttpClientOptions Returns : void} testIdleTimoutNoConnections{ Params :  Returns : void} testDisableIdleTimeoutClearTextUpgrade{ Params :  Returns : void} testSendPing{ Params :  Returns : void} testReceivePing{ Params :  Returns : void} testMaxConcurrencySingleConnection{ Params :  Returns : void} testMaxConcurrencyMultipleConnections{ Params :  Returns : void} testMaxConcurrency{ Params : int,int Returns : void} testConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testUpdateConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testStreamPriority{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testStreamPriorityChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testClientStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testServerStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} testClearTestDirectServerCloseBeforeSettingsRead{ Params :  Returns : void} ,onHeadersRead onGoAwayRead onHeadersRead onDataRead onRstStreamRead build build initChannel configurePipeline initChannel onSettingsRead userEventTriggered onHeadersRead onHeadersRead onHeadersRead onHeadersRead onWindowUpdateRead onWindowUpdateRead onHeadersRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead ,,,,,,,,Handler ,super: 
vert.x-master,io.vertx.core.http,Http2CompressionTest,1,1,0,0,0,false,GzipHttpCompressionTestBase ,0 ,0 ,,createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} ,createBaseServerOptions createBaseClientOptions ,,,,,,,,,Http2TestBase: 
vert.x-master,io.vertx.core.http,Http2MetricsTest,1,1,0,0,0,false,HttpMetricsTestBase ,0 ,0 ,clientOptions: HttpClientOptions serverOptions: HttpServerOptions ,params{ Params :  Returns : Collection<Object[]>} createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} testPushPromise{ Params :  Returns : void} ,createBaseServerOptions createBaseClientOptions ,params ,,,,HttpServerOptions ,,HttpServerOptions ,ArrayList HttpClientOptions HttpServerOptions HttpClientOptions HttpServerOptions AtomicInteger ,: 
vert.x-master,io.vertx.core.http,Http2ServerFileUploadTest,1,1,0,0,0,false,HttpServerFileUploadTest ,0 ,0 ,,createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} ,createBaseServerOptions createBaseClientOptions ,,,,,,,,,Http2TestBase: 
vert.x-master,io.vertx.core.http,Http2ServerTest,1,1,0,0,0,false,Http2TestBase ,0 ,TestClient Connection TestClientHandler TestClientHandlerBuilder TestHttp1xOrH2CHandler ,HTTP_1_1_POST: ByteBuf ,headers{ Params : String,String,String Returns : Http2Headers} GET{ Params : String,String Returns : Http2Headers} GET{ Params : String Returns : Http2Headers} POST{ Params : String Returns : Http2Headers} nextStreamId{ Params :  Returns : int} handlerAdded{ Params : ChannelHandlerContext Returns : void} channelActive{ Params : ChannelHandlerContext Returns : void} checkHandle{ Params : ChannelHandlerContext Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} build{ Params : Http2ConnectionDecoder,Http2ConnectionEncoder,Http2Settings Returns : TestClientHandler} build{ Params : Http2Connection Returns : TestClientHandler} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} configurePipeline{ Params : ChannelHandlerContext,String Returns : void} connect{ Params : int,String,Consumer<Connection> Returns : ChannelFuture} testConnectionHandler{ Params :  Returns : void} testServerInitialSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testServerSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testClientSettings{ Params :  Returns : void} testGet{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStatusMessage{ Params :  Returns : void} testURI{ Params :  Returns : void} testHeadersEndHandler{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testBodyEndHandler{ Params :  Returns : void} testPost{ Params :  Returns : void} testPostFileUpload{ Params :  Returns : void} testConnect{ Params :  Returns : void} testServerRequestPauseResume{ Params :  Returns : void} testStreamPauseResume{ Params : Function<HttpServerRequest,Future<ReadStream<Buffer>>> Returns : void} send{ Params :  Returns : void} testServerResponseWritability{ Params :  Returns : void} testStreamWritability{ Params : Function<HttpServerRequest,Future<WriteStream<Buffer>>> Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testTrailers{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testServerResetClientStream1{ Params :  Returns : void} testServerResetClientStream2{ Params :  Returns : void} testServerResetClientStream3{ Params :  Returns : void} testServerResetClientStream{ Params : LongConsumer,boolean Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testClientResetServerStream{ Params :  Returns : void} testConnectionClose{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testPushPromise{ Params :  Returns : void} testPushPromiseHeaders{ Params :  Returns : void} testPushPromiseNoAuthority{ Params :  Returns : void} testPushPromiseOverrideAuthority{ Params :  Returns : void} testPushPromise{ Params : Http2Headers,BiConsumer<HttpServerResponse,Handler<AsyncResult<HttpServerResponse>>>,Consumer<Http2Headers> Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetActivePushPromise{ Params :  Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testQueuePushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetPendingPushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testMissingMethodPseudoHeader{ Params :  Returns : void} testMissingSchemePseudoHeader{ Params :  Returns : void} testMissingPathPseudoHeader{ Params :  Returns : void} testInvalidAuthority{ Params :  Returns : void} testConnectInvalidPath{ Params :  Returns : void} testConnectInvalidScheme{ Params :  Returns : void} testConnectInvalidAuthority{ Params :  Returns : void} testMalformedRequestHeaders{ Params : Http2Headers Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testRequestHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailureWithData{ Params :  Returns : void} testRequestDataHandlerFailure{ Params :  Returns : void} testHandlerFailure{ Params : boolean,BiConsumer<RuntimeException,HttpServer> Returns : void} createTempFile{ Params : Buffer Returns : File} testSendFile{ Params :  Returns : void} testSendFileRange{ Params :  Returns : void} testSendEmptyFile{ Params :  Returns : void} testSendFile{ Params : Buffer,String,long,long Returns : void} endStream{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamError{ Params :  Returns : void} testPromiseStreamError{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testConnectionDecodeError{ Params :  Returns : void} testServerSendGoAwayNoError{ Params :  Returns : void} testServerSendGoAwayInteralError{ Params :  Returns : void} testShutdownWithTimeout{ Params :  Returns : void} testShutdown{ Params :  Returns : void} testServerSendGoAway{ Params : Handler<HttpServerRequest>,int Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testServerClose{ Params :  Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testClientSendGoAwayNoError{ Params :  Returns : void} testClientSendGoAwayInternalError{ Params :  Returns : void} testShutdownOverride{ Params :  Returns : void} testRequestResponseLifecycle{ Params :  Returns : void} testResponseCompressionDisabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResponseCompressionEnabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testRequestCompressionEnabled{ Params :  Returns : void} test100ContinueHandledManually{ Params :  Returns : void} test100ContinueHandledAutomatically{ Params :  Returns : void} test100Continue{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} test100ContinueRejectedManually{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketConnect{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketSendFile{ Params :  Returns : void} testNetSocketSendFileRange{ Params :  Returns : void} testNetSocketSendFile{ Params : Buffer,String,long,long Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testServerCloseNetSocket{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketHandleReset{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketPauseResume{ Params :  Returns : void} testNetSocketWritability{ Params :  Returns : void} testUnknownFrame{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onUnknownFrame{ Params : ChannelHandlerContext,byte,int,Http2Flags,ByteBuf Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testUpgradeToClearTextGet{ Params :  Returns : void} testUpgradeToClearTextPut{ Params :  Returns : void} testUpgradeToClearTextWithCompression{ Params :  Returns : void} testUpgradeToClearText{ Params : HttpMethod,Buffer,Handler<HttpServerOptions> Returns : void} doRequest{ Params : HttpMethod,Buffer,Handler<HttpConnection>,Promise<HttpClientResponse> Returns : void} testPushPromiseClearText{ Params :  Returns : void} testUpgradeToClearTextInvalidConnectionHeader{ Params :  Returns : void} testUpgradeToClearTextMalformedSettings{ Params :  Returns : void} testUpgradeToClearTextInvalidSettings{ Params :  Returns : void} testUpgradeToClearTextMissingSettings{ Params :  Returns : void} testUpgradeToClearTextWorkerContext{ Params :  Returns : void} testUpgradeFailure{ Params : Context,BiConsumer<HttpClient,Handler<AsyncResult<HttpClientResponse>>> Returns : void} testUpgradeToClearTextPartialFailure{ Params :  Returns : void} testIdleTimeout{ Params :  Returns : void} testSendPing{ Params :  Returns : void} onPingRead{ Params : ChannelHandlerContext,long Returns : void} testReceivePing{ Params :  Returns : void} testPriorKnowledge{ Params :  Returns : void} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testUpdateConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} configure{ Params : ChannelHandlerContext,boolean Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} testHttp1xOrH2CHandlerHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerHttp2Request{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp2Request{ Params :  Returns : void} testStreamPriority{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} ,handlerAdded channelActive exceptionCaught build onDataRead initChannel configurePipeline onSettingsRead onSettingsRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onRstStreamRead onHeadersRead onPushPromiseRead onDataRead onDataRead onPushPromiseRead onDataRead onPushPromiseRead onRstStreamRead onHeadersRead onDataRead onPushPromiseRead onGoAwayRead onGoAwayRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onUnknownFrame onDataRead onPingRead channelInitializer initChannel onHeadersRead onWindowUpdateRead onWindowUpdateRead configure channelRead channelReadComplete channelRead channelReadComplete onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead ,headers GET GET POST createTempFile ,,,,,,,DefaultHttp2Headers Http2Settings Connection TestClientHandler Http2EventAdapter ChannelInitializer ApplicationProtocolConfig ApplicationProtocolNegotiationHandler DefaultHttp2Connection TestClientHandlerBuilder IllegalStateException Bootstrap NioEventLoopGroup InetSocketAddress TestClient TestClient Http2FrameAdapter TestClient Http2FrameAdapter AtomicInteger AtomicInteger TestClient AtomicBoolean AtomicInteger TestClient Http2EventAdapter TestClient TestClient DefaultHttp2Headers TestClient Http2EventAdapter AtomicInteger TestClient TestClient TestClient TestClient DefaultHttp2Headers AtomicBoolean AtomicBoolean TestClient Anonymous StringBuilder AtomicBoolean TestClient AtomicInteger Http2FrameAdapter StringBuilder TestClient Http2EventAdapter TestClient Http2EventAdapter AtomicInteger TestClient TestClient Http2FrameAdapter TestClient HashMap Http2FrameAdapter AtomicInteger TestClient Http2FrameAdapter HashSet TestClient Http2FrameAdapter HashSet TestClient Http2FrameAdapter DefaultHttp2Headers DefaultHttp2Headers DefaultHttp2Headers DefaultHttp2Headers DefaultHttp2Headers DefaultHttp2Headers DefaultHttp2Headers TestClient Http2FrameAdapter RuntimeException TestClient FileOutputStream TestClient Http2EventAdapter AtomicInteger AtomicInteger TestClient AtomicInteger TestClient Http2EventAdapter AtomicInteger AtomicInteger AtomicInteger TestClient AtomicReference AtomicInteger AtomicInteger AtomicBoolean AtomicReference AtomicInteger AtomicInteger AtomicInteger AtomicReference AtomicInteger AtomicReference AtomicInteger TestClient Http2EventAdapter AtomicInteger TestClient Http2EventAdapter AtomicInteger AtomicBoolean TestClient AtomicInteger TestClient AtomicLong TestClient TestClient TestClient Http2EventAdapter TestClient Http2EventAdapter GZIPInputStream ByteArrayInputStream ByteArrayOutputStream StringBuilder TestClient TestClient Http2EventAdapter TestClient Http2EventAdapter AtomicInteger TestClient Http2EventAdapter StringBuilder DefaultHttp2Headers TestClient Http2EventAdapter AtomicInteger AtomicInteger TestClient Http2EventAdapter StringBuilder AtomicInteger TestClient Http2EventAdapter TestClient Http2EventAdapter Http2Flags AtomicInteger Http2Settings AtomicInteger Http2Settings RequestOptions RequestOptions RequestOptions String RequestOptions RequestOptions RequestOptions Http2Settings CompletableFuture AtomicBoolean RequestOptions Http2Settings TestClient Http2EventAdapter TestClient Http2EventAdapter TestClient HttpServerOptions TestClient ChannelInitializer DefaultHttp2Connection TestClientHandlerBuilder Http2EventAdapter TestClient Http2EventAdapter TestClient Http2EventAdapter ChannelDuplexHandler HttpServerCodec ChannelDuplexHandler EmbeddedChannel TestHttp1xOrH2CHandler EmbeddedChannel TestHttp1xOrH2CHandler EmbeddedChannel TestHttp1xOrH2CHandler EmbeddedChannel TestHttp1xOrH2CHandler StreamPriority StreamPriority TestClient Http2FrameAdapter StreamPriority StreamPriority StreamPriority StreamPriority TestClient Http2FrameAdapter StreamPriority StreamPriority TestClient Http2FrameAdapter ,: 
vert.x-master,io.vertx.core.http,TestClient,3,0,0,0,0,false,Http2TestBase ,0 ,TestClient Connection TestClientHandler TestClientHandlerBuilder TestHttp1xOrH2CHandler ,settings: Http2Settings ,headers{ Params : String,String,String Returns : Http2Headers} GET{ Params : String,String Returns : Http2Headers} GET{ Params : String Returns : Http2Headers} POST{ Params : String Returns : Http2Headers} nextStreamId{ Params :  Returns : int} handlerAdded{ Params : ChannelHandlerContext Returns : void} channelActive{ Params : ChannelHandlerContext Returns : void} checkHandle{ Params : ChannelHandlerContext Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} build{ Params : Http2ConnectionDecoder,Http2ConnectionEncoder,Http2Settings Returns : TestClientHandler} build{ Params : Http2Connection Returns : TestClientHandler} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} configurePipeline{ Params : ChannelHandlerContext,String Returns : void} connect{ Params : int,String,Consumer<Connection> Returns : ChannelFuture} testConnectionHandler{ Params :  Returns : void} testServerInitialSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testServerSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testClientSettings{ Params :  Returns : void} testGet{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStatusMessage{ Params :  Returns : void} testURI{ Params :  Returns : void} testHeadersEndHandler{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testBodyEndHandler{ Params :  Returns : void} testPost{ Params :  Returns : void} testPostFileUpload{ Params :  Returns : void} testConnect{ Params :  Returns : void} testServerRequestPauseResume{ Params :  Returns : void} testStreamPauseResume{ Params : Function<HttpServerRequest,Future<ReadStream<Buffer>>> Returns : void} send{ Params :  Returns : void} testServerResponseWritability{ Params :  Returns : void} testStreamWritability{ Params : Function<HttpServerRequest,Future<WriteStream<Buffer>>> Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testTrailers{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testServerResetClientStream1{ Params :  Returns : void} testServerResetClientStream2{ Params :  Returns : void} testServerResetClientStream3{ Params :  Returns : void} testServerResetClientStream{ Params : LongConsumer,boolean Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testClientResetServerStream{ Params :  Returns : void} testConnectionClose{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testPushPromise{ Params :  Returns : void} testPushPromiseHeaders{ Params :  Returns : void} testPushPromiseNoAuthority{ Params :  Returns : void} testPushPromiseOverrideAuthority{ Params :  Returns : void} testPushPromise{ Params : Http2Headers,BiConsumer<HttpServerResponse,Handler<AsyncResult<HttpServerResponse>>>,Consumer<Http2Headers> Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetActivePushPromise{ Params :  Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testQueuePushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetPendingPushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testMissingMethodPseudoHeader{ Params :  Returns : void} testMissingSchemePseudoHeader{ Params :  Returns : void} testMissingPathPseudoHeader{ Params :  Returns : void} testInvalidAuthority{ Params :  Returns : void} testConnectInvalidPath{ Params :  Returns : void} testConnectInvalidScheme{ Params :  Returns : void} testConnectInvalidAuthority{ Params :  Returns : void} testMalformedRequestHeaders{ Params : Http2Headers Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testRequestHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailureWithData{ Params :  Returns : void} testRequestDataHandlerFailure{ Params :  Returns : void} testHandlerFailure{ Params : boolean,BiConsumer<RuntimeException,HttpServer> Returns : void} createTempFile{ Params : Buffer Returns : File} testSendFile{ Params :  Returns : void} testSendFileRange{ Params :  Returns : void} testSendEmptyFile{ Params :  Returns : void} testSendFile{ Params : Buffer,String,long,long Returns : void} endStream{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamError{ Params :  Returns : void} testPromiseStreamError{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testConnectionDecodeError{ Params :  Returns : void} testServerSendGoAwayNoError{ Params :  Returns : void} testServerSendGoAwayInteralError{ Params :  Returns : void} testShutdownWithTimeout{ Params :  Returns : void} testShutdown{ Params :  Returns : void} testServerSendGoAway{ Params : Handler<HttpServerRequest>,int Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testServerClose{ Params :  Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testClientSendGoAwayNoError{ Params :  Returns : void} testClientSendGoAwayInternalError{ Params :  Returns : void} testShutdownOverride{ Params :  Returns : void} testRequestResponseLifecycle{ Params :  Returns : void} testResponseCompressionDisabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResponseCompressionEnabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testRequestCompressionEnabled{ Params :  Returns : void} test100ContinueHandledManually{ Params :  Returns : void} test100ContinueHandledAutomatically{ Params :  Returns : void} test100Continue{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} test100ContinueRejectedManually{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketConnect{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketSendFile{ Params :  Returns : void} testNetSocketSendFileRange{ Params :  Returns : void} testNetSocketSendFile{ Params : Buffer,String,long,long Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testServerCloseNetSocket{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketHandleReset{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketPauseResume{ Params :  Returns : void} testNetSocketWritability{ Params :  Returns : void} testUnknownFrame{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onUnknownFrame{ Params : ChannelHandlerContext,byte,int,Http2Flags,ByteBuf Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testUpgradeToClearTextGet{ Params :  Returns : void} testUpgradeToClearTextPut{ Params :  Returns : void} testUpgradeToClearTextWithCompression{ Params :  Returns : void} testUpgradeToClearText{ Params : HttpMethod,Buffer,Handler<HttpServerOptions> Returns : void} doRequest{ Params : HttpMethod,Buffer,Handler<HttpConnection>,Promise<HttpClientResponse> Returns : void} testPushPromiseClearText{ Params :  Returns : void} testUpgradeToClearTextInvalidConnectionHeader{ Params :  Returns : void} testUpgradeToClearTextMalformedSettings{ Params :  Returns : void} testUpgradeToClearTextInvalidSettings{ Params :  Returns : void} testUpgradeToClearTextMissingSettings{ Params :  Returns : void} testUpgradeToClearTextWorkerContext{ Params :  Returns : void} testUpgradeFailure{ Params : Context,BiConsumer<HttpClient,Handler<AsyncResult<HttpClientResponse>>> Returns : void} testUpgradeToClearTextPartialFailure{ Params :  Returns : void} testIdleTimeout{ Params :  Returns : void} testSendPing{ Params :  Returns : void} onPingRead{ Params : ChannelHandlerContext,long Returns : void} testReceivePing{ Params :  Returns : void} testPriorKnowledge{ Params :  Returns : void} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testUpdateConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} configure{ Params : ChannelHandlerContext,boolean Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} testHttp1xOrH2CHandlerHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerHttp2Request{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp2Request{ Params :  Returns : void} testStreamPriority{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} ,handlerAdded channelActive exceptionCaught build onDataRead initChannel configurePipeline onSettingsRead onSettingsRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onRstStreamRead onHeadersRead onPushPromiseRead onDataRead onDataRead onPushPromiseRead onDataRead onPushPromiseRead onRstStreamRead onHeadersRead onDataRead onPushPromiseRead onGoAwayRead onGoAwayRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onUnknownFrame onDataRead onPingRead channelInitializer initChannel onHeadersRead onWindowUpdateRead onWindowUpdateRead configure channelRead channelReadComplete channelRead channelReadComplete onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead ,headers GET GET POST createTempFile ,,,,,,,Http2Settings Connection TestClientHandler Http2EventAdapter ChannelInitializer ApplicationProtocolConfig ApplicationProtocolNegotiationHandler DefaultHttp2Connection TestClientHandlerBuilder IllegalStateException Bootstrap NioEventLoopGroup InetSocketAddress ,bootstrap: , new InetSocketAddress(host, port)
vert.x-master,io.vertx.core.http,Connection,3,1,0,0,0,false,Http2TestBase ,0 ,TestClient Connection TestClientHandler TestClientHandlerBuilder TestHttp1xOrH2CHandler ,channel: Channel context: ChannelHandlerContext connection: Http2Connection encoder: Http2ConnectionEncoder decoder: Http2ConnectionDecoder ,headers{ Params : String,String,String Returns : Http2Headers} GET{ Params : String,String Returns : Http2Headers} GET{ Params : String Returns : Http2Headers} POST{ Params : String Returns : Http2Headers} nextStreamId{ Params :  Returns : int} handlerAdded{ Params : ChannelHandlerContext Returns : void} channelActive{ Params : ChannelHandlerContext Returns : void} checkHandle{ Params : ChannelHandlerContext Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} build{ Params : Http2ConnectionDecoder,Http2ConnectionEncoder,Http2Settings Returns : TestClientHandler} build{ Params : Http2Connection Returns : TestClientHandler} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} configurePipeline{ Params : ChannelHandlerContext,String Returns : void} connect{ Params : int,String,Consumer<Connection> Returns : ChannelFuture} testConnectionHandler{ Params :  Returns : void} testServerInitialSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testServerSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testClientSettings{ Params :  Returns : void} testGet{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStatusMessage{ Params :  Returns : void} testURI{ Params :  Returns : void} testHeadersEndHandler{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testBodyEndHandler{ Params :  Returns : void} testPost{ Params :  Returns : void} testPostFileUpload{ Params :  Returns : void} testConnect{ Params :  Returns : void} testServerRequestPauseResume{ Params :  Returns : void} testStreamPauseResume{ Params : Function<HttpServerRequest,Future<ReadStream<Buffer>>> Returns : void} send{ Params :  Returns : void} testServerResponseWritability{ Params :  Returns : void} testStreamWritability{ Params : Function<HttpServerRequest,Future<WriteStream<Buffer>>> Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testTrailers{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testServerResetClientStream1{ Params :  Returns : void} testServerResetClientStream2{ Params :  Returns : void} testServerResetClientStream3{ Params :  Returns : void} testServerResetClientStream{ Params : LongConsumer,boolean Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testClientResetServerStream{ Params :  Returns : void} testConnectionClose{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testPushPromise{ Params :  Returns : void} testPushPromiseHeaders{ Params :  Returns : void} testPushPromiseNoAuthority{ Params :  Returns : void} testPushPromiseOverrideAuthority{ Params :  Returns : void} testPushPromise{ Params : Http2Headers,BiConsumer<HttpServerResponse,Handler<AsyncResult<HttpServerResponse>>>,Consumer<Http2Headers> Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetActivePushPromise{ Params :  Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testQueuePushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetPendingPushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testMissingMethodPseudoHeader{ Params :  Returns : void} testMissingSchemePseudoHeader{ Params :  Returns : void} testMissingPathPseudoHeader{ Params :  Returns : void} testInvalidAuthority{ Params :  Returns : void} testConnectInvalidPath{ Params :  Returns : void} testConnectInvalidScheme{ Params :  Returns : void} testConnectInvalidAuthority{ Params :  Returns : void} testMalformedRequestHeaders{ Params : Http2Headers Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testRequestHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailureWithData{ Params :  Returns : void} testRequestDataHandlerFailure{ Params :  Returns : void} testHandlerFailure{ Params : boolean,BiConsumer<RuntimeException,HttpServer> Returns : void} createTempFile{ Params : Buffer Returns : File} testSendFile{ Params :  Returns : void} testSendFileRange{ Params :  Returns : void} testSendEmptyFile{ Params :  Returns : void} testSendFile{ Params : Buffer,String,long,long Returns : void} endStream{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamError{ Params :  Returns : void} testPromiseStreamError{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testConnectionDecodeError{ Params :  Returns : void} testServerSendGoAwayNoError{ Params :  Returns : void} testServerSendGoAwayInteralError{ Params :  Returns : void} testShutdownWithTimeout{ Params :  Returns : void} testShutdown{ Params :  Returns : void} testServerSendGoAway{ Params : Handler<HttpServerRequest>,int Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testServerClose{ Params :  Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testClientSendGoAwayNoError{ Params :  Returns : void} testClientSendGoAwayInternalError{ Params :  Returns : void} testShutdownOverride{ Params :  Returns : void} testRequestResponseLifecycle{ Params :  Returns : void} testResponseCompressionDisabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResponseCompressionEnabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testRequestCompressionEnabled{ Params :  Returns : void} test100ContinueHandledManually{ Params :  Returns : void} test100ContinueHandledAutomatically{ Params :  Returns : void} test100Continue{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} test100ContinueRejectedManually{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketConnect{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketSendFile{ Params :  Returns : void} testNetSocketSendFileRange{ Params :  Returns : void} testNetSocketSendFile{ Params : Buffer,String,long,long Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testServerCloseNetSocket{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketHandleReset{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketPauseResume{ Params :  Returns : void} testNetSocketWritability{ Params :  Returns : void} testUnknownFrame{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onUnknownFrame{ Params : ChannelHandlerContext,byte,int,Http2Flags,ByteBuf Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testUpgradeToClearTextGet{ Params :  Returns : void} testUpgradeToClearTextPut{ Params :  Returns : void} testUpgradeToClearTextWithCompression{ Params :  Returns : void} testUpgradeToClearText{ Params : HttpMethod,Buffer,Handler<HttpServerOptions> Returns : void} doRequest{ Params : HttpMethod,Buffer,Handler<HttpConnection>,Promise<HttpClientResponse> Returns : void} testPushPromiseClearText{ Params :  Returns : void} testUpgradeToClearTextInvalidConnectionHeader{ Params :  Returns : void} testUpgradeToClearTextMalformedSettings{ Params :  Returns : void} testUpgradeToClearTextInvalidSettings{ Params :  Returns : void} testUpgradeToClearTextMissingSettings{ Params :  Returns : void} testUpgradeToClearTextWorkerContext{ Params :  Returns : void} testUpgradeFailure{ Params : Context,BiConsumer<HttpClient,Handler<AsyncResult<HttpClientResponse>>> Returns : void} testUpgradeToClearTextPartialFailure{ Params :  Returns : void} testIdleTimeout{ Params :  Returns : void} testSendPing{ Params :  Returns : void} onPingRead{ Params : ChannelHandlerContext,long Returns : void} testReceivePing{ Params :  Returns : void} testPriorKnowledge{ Params :  Returns : void} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testUpdateConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} configure{ Params : ChannelHandlerContext,boolean Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} testHttp1xOrH2CHandlerHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerHttp2Request{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp2Request{ Params :  Returns : void} testStreamPriority{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} ,handlerAdded channelActive exceptionCaught build onDataRead initChannel configurePipeline onSettingsRead onSettingsRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onRstStreamRead onHeadersRead onPushPromiseRead onDataRead onDataRead onPushPromiseRead onDataRead onPushPromiseRead onRstStreamRead onHeadersRead onDataRead onPushPromiseRead onGoAwayRead onGoAwayRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onUnknownFrame onDataRead onPingRead channelInitializer initChannel onHeadersRead onWindowUpdateRead onWindowUpdateRead configure channelRead channelReadComplete channelRead channelReadComplete onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead ,headers GET GET POST createTempFile ,,,,,,,,connection: 
vert.x-master,io.vertx.core.http,TestClientHandler,3,0,0,0,0,false,Http2TestBase ,0 ,TestClient Connection TestClientHandler TestClientHandlerBuilder TestHttp1xOrH2CHandler ,requestHandler: Consumer<Connection> handled: boolean ,headers{ Params : String,String,String Returns : Http2Headers} GET{ Params : String,String Returns : Http2Headers} GET{ Params : String Returns : Http2Headers} POST{ Params : String Returns : Http2Headers} nextStreamId{ Params :  Returns : int} handlerAdded{ Params : ChannelHandlerContext Returns : void} channelActive{ Params : ChannelHandlerContext Returns : void} checkHandle{ Params : ChannelHandlerContext Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} build{ Params : Http2ConnectionDecoder,Http2ConnectionEncoder,Http2Settings Returns : TestClientHandler} build{ Params : Http2Connection Returns : TestClientHandler} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} configurePipeline{ Params : ChannelHandlerContext,String Returns : void} connect{ Params : int,String,Consumer<Connection> Returns : ChannelFuture} testConnectionHandler{ Params :  Returns : void} testServerInitialSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testServerSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testClientSettings{ Params :  Returns : void} testGet{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStatusMessage{ Params :  Returns : void} testURI{ Params :  Returns : void} testHeadersEndHandler{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testBodyEndHandler{ Params :  Returns : void} testPost{ Params :  Returns : void} testPostFileUpload{ Params :  Returns : void} testConnect{ Params :  Returns : void} testServerRequestPauseResume{ Params :  Returns : void} testStreamPauseResume{ Params : Function<HttpServerRequest,Future<ReadStream<Buffer>>> Returns : void} send{ Params :  Returns : void} testServerResponseWritability{ Params :  Returns : void} testStreamWritability{ Params : Function<HttpServerRequest,Future<WriteStream<Buffer>>> Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testTrailers{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testServerResetClientStream1{ Params :  Returns : void} testServerResetClientStream2{ Params :  Returns : void} testServerResetClientStream3{ Params :  Returns : void} testServerResetClientStream{ Params : LongConsumer,boolean Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testClientResetServerStream{ Params :  Returns : void} testConnectionClose{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testPushPromise{ Params :  Returns : void} testPushPromiseHeaders{ Params :  Returns : void} testPushPromiseNoAuthority{ Params :  Returns : void} testPushPromiseOverrideAuthority{ Params :  Returns : void} testPushPromise{ Params : Http2Headers,BiConsumer<HttpServerResponse,Handler<AsyncResult<HttpServerResponse>>>,Consumer<Http2Headers> Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetActivePushPromise{ Params :  Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testQueuePushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetPendingPushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testMissingMethodPseudoHeader{ Params :  Returns : void} testMissingSchemePseudoHeader{ Params :  Returns : void} testMissingPathPseudoHeader{ Params :  Returns : void} testInvalidAuthority{ Params :  Returns : void} testConnectInvalidPath{ Params :  Returns : void} testConnectInvalidScheme{ Params :  Returns : void} testConnectInvalidAuthority{ Params :  Returns : void} testMalformedRequestHeaders{ Params : Http2Headers Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testRequestHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailureWithData{ Params :  Returns : void} testRequestDataHandlerFailure{ Params :  Returns : void} testHandlerFailure{ Params : boolean,BiConsumer<RuntimeException,HttpServer> Returns : void} createTempFile{ Params : Buffer Returns : File} testSendFile{ Params :  Returns : void} testSendFileRange{ Params :  Returns : void} testSendEmptyFile{ Params :  Returns : void} testSendFile{ Params : Buffer,String,long,long Returns : void} endStream{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamError{ Params :  Returns : void} testPromiseStreamError{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testConnectionDecodeError{ Params :  Returns : void} testServerSendGoAwayNoError{ Params :  Returns : void} testServerSendGoAwayInteralError{ Params :  Returns : void} testShutdownWithTimeout{ Params :  Returns : void} testShutdown{ Params :  Returns : void} testServerSendGoAway{ Params : Handler<HttpServerRequest>,int Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testServerClose{ Params :  Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testClientSendGoAwayNoError{ Params :  Returns : void} testClientSendGoAwayInternalError{ Params :  Returns : void} testShutdownOverride{ Params :  Returns : void} testRequestResponseLifecycle{ Params :  Returns : void} testResponseCompressionDisabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResponseCompressionEnabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testRequestCompressionEnabled{ Params :  Returns : void} test100ContinueHandledManually{ Params :  Returns : void} test100ContinueHandledAutomatically{ Params :  Returns : void} test100Continue{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} test100ContinueRejectedManually{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketConnect{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketSendFile{ Params :  Returns : void} testNetSocketSendFileRange{ Params :  Returns : void} testNetSocketSendFile{ Params : Buffer,String,long,long Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testServerCloseNetSocket{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketHandleReset{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketPauseResume{ Params :  Returns : void} testNetSocketWritability{ Params :  Returns : void} testUnknownFrame{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onUnknownFrame{ Params : ChannelHandlerContext,byte,int,Http2Flags,ByteBuf Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testUpgradeToClearTextGet{ Params :  Returns : void} testUpgradeToClearTextPut{ Params :  Returns : void} testUpgradeToClearTextWithCompression{ Params :  Returns : void} testUpgradeToClearText{ Params : HttpMethod,Buffer,Handler<HttpServerOptions> Returns : void} doRequest{ Params : HttpMethod,Buffer,Handler<HttpConnection>,Promise<HttpClientResponse> Returns : void} testPushPromiseClearText{ Params :  Returns : void} testUpgradeToClearTextInvalidConnectionHeader{ Params :  Returns : void} testUpgradeToClearTextMalformedSettings{ Params :  Returns : void} testUpgradeToClearTextInvalidSettings{ Params :  Returns : void} testUpgradeToClearTextMissingSettings{ Params :  Returns : void} testUpgradeToClearTextWorkerContext{ Params :  Returns : void} testUpgradeFailure{ Params : Context,BiConsumer<HttpClient,Handler<AsyncResult<HttpClientResponse>>> Returns : void} testUpgradeToClearTextPartialFailure{ Params :  Returns : void} testIdleTimeout{ Params :  Returns : void} testSendPing{ Params :  Returns : void} onPingRead{ Params : ChannelHandlerContext,long Returns : void} testReceivePing{ Params :  Returns : void} testPriorKnowledge{ Params :  Returns : void} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testUpdateConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} configure{ Params : ChannelHandlerContext,boolean Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} testHttp1xOrH2CHandlerHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerHttp2Request{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp2Request{ Params :  Returns : void} testStreamPriority{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} ,handlerAdded channelActive exceptionCaught build onDataRead initChannel configurePipeline onSettingsRead onSettingsRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onRstStreamRead onHeadersRead onPushPromiseRead onDataRead onDataRead onPushPromiseRead onDataRead onPushPromiseRead onRstStreamRead onHeadersRead onDataRead onPushPromiseRead onGoAwayRead onGoAwayRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onUnknownFrame onDataRead onPingRead channelInitializer initChannel onHeadersRead onWindowUpdateRead onWindowUpdateRead configure channelRead channelReadComplete channelRead channelReadComplete onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead ,headers GET GET POST createTempFile ,,,,boolean ,,boolean ,Connection ,requestHandler: , conn
vert.x-master,io.vertx.core.http,TestClientHandlerBuilder,3,0,0,0,0,false,Http2TestBase ,0 ,TestClient Connection TestClientHandler TestClientHandlerBuilder TestHttp1xOrH2CHandler ,requestHandler: Consumer<Connection> ,headers{ Params : String,String,String Returns : Http2Headers} GET{ Params : String,String Returns : Http2Headers} GET{ Params : String Returns : Http2Headers} POST{ Params : String Returns : Http2Headers} nextStreamId{ Params :  Returns : int} handlerAdded{ Params : ChannelHandlerContext Returns : void} channelActive{ Params : ChannelHandlerContext Returns : void} checkHandle{ Params : ChannelHandlerContext Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} build{ Params : Http2ConnectionDecoder,Http2ConnectionEncoder,Http2Settings Returns : TestClientHandler} build{ Params : Http2Connection Returns : TestClientHandler} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} configurePipeline{ Params : ChannelHandlerContext,String Returns : void} connect{ Params : int,String,Consumer<Connection> Returns : ChannelFuture} testConnectionHandler{ Params :  Returns : void} testServerInitialSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testServerSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testClientSettings{ Params :  Returns : void} testGet{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStatusMessage{ Params :  Returns : void} testURI{ Params :  Returns : void} testHeadersEndHandler{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testBodyEndHandler{ Params :  Returns : void} testPost{ Params :  Returns : void} testPostFileUpload{ Params :  Returns : void} testConnect{ Params :  Returns : void} testServerRequestPauseResume{ Params :  Returns : void} testStreamPauseResume{ Params : Function<HttpServerRequest,Future<ReadStream<Buffer>>> Returns : void} send{ Params :  Returns : void} testServerResponseWritability{ Params :  Returns : void} testStreamWritability{ Params : Function<HttpServerRequest,Future<WriteStream<Buffer>>> Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testTrailers{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testServerResetClientStream1{ Params :  Returns : void} testServerResetClientStream2{ Params :  Returns : void} testServerResetClientStream3{ Params :  Returns : void} testServerResetClientStream{ Params : LongConsumer,boolean Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testClientResetServerStream{ Params :  Returns : void} testConnectionClose{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testPushPromise{ Params :  Returns : void} testPushPromiseHeaders{ Params :  Returns : void} testPushPromiseNoAuthority{ Params :  Returns : void} testPushPromiseOverrideAuthority{ Params :  Returns : void} testPushPromise{ Params : Http2Headers,BiConsumer<HttpServerResponse,Handler<AsyncResult<HttpServerResponse>>>,Consumer<Http2Headers> Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetActivePushPromise{ Params :  Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testQueuePushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetPendingPushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testMissingMethodPseudoHeader{ Params :  Returns : void} testMissingSchemePseudoHeader{ Params :  Returns : void} testMissingPathPseudoHeader{ Params :  Returns : void} testInvalidAuthority{ Params :  Returns : void} testConnectInvalidPath{ Params :  Returns : void} testConnectInvalidScheme{ Params :  Returns : void} testConnectInvalidAuthority{ Params :  Returns : void} testMalformedRequestHeaders{ Params : Http2Headers Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testRequestHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailureWithData{ Params :  Returns : void} testRequestDataHandlerFailure{ Params :  Returns : void} testHandlerFailure{ Params : boolean,BiConsumer<RuntimeException,HttpServer> Returns : void} createTempFile{ Params : Buffer Returns : File} testSendFile{ Params :  Returns : void} testSendFileRange{ Params :  Returns : void} testSendEmptyFile{ Params :  Returns : void} testSendFile{ Params : Buffer,String,long,long Returns : void} endStream{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamError{ Params :  Returns : void} testPromiseStreamError{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testConnectionDecodeError{ Params :  Returns : void} testServerSendGoAwayNoError{ Params :  Returns : void} testServerSendGoAwayInteralError{ Params :  Returns : void} testShutdownWithTimeout{ Params :  Returns : void} testShutdown{ Params :  Returns : void} testServerSendGoAway{ Params : Handler<HttpServerRequest>,int Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testServerClose{ Params :  Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testClientSendGoAwayNoError{ Params :  Returns : void} testClientSendGoAwayInternalError{ Params :  Returns : void} testShutdownOverride{ Params :  Returns : void} testRequestResponseLifecycle{ Params :  Returns : void} testResponseCompressionDisabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResponseCompressionEnabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testRequestCompressionEnabled{ Params :  Returns : void} test100ContinueHandledManually{ Params :  Returns : void} test100ContinueHandledAutomatically{ Params :  Returns : void} test100Continue{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} test100ContinueRejectedManually{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketConnect{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketSendFile{ Params :  Returns : void} testNetSocketSendFileRange{ Params :  Returns : void} testNetSocketSendFile{ Params : Buffer,String,long,long Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testServerCloseNetSocket{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketHandleReset{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketPauseResume{ Params :  Returns : void} testNetSocketWritability{ Params :  Returns : void} testUnknownFrame{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onUnknownFrame{ Params : ChannelHandlerContext,byte,int,Http2Flags,ByteBuf Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testUpgradeToClearTextGet{ Params :  Returns : void} testUpgradeToClearTextPut{ Params :  Returns : void} testUpgradeToClearTextWithCompression{ Params :  Returns : void} testUpgradeToClearText{ Params : HttpMethod,Buffer,Handler<HttpServerOptions> Returns : void} doRequest{ Params : HttpMethod,Buffer,Handler<HttpConnection>,Promise<HttpClientResponse> Returns : void} testPushPromiseClearText{ Params :  Returns : void} testUpgradeToClearTextInvalidConnectionHeader{ Params :  Returns : void} testUpgradeToClearTextMalformedSettings{ Params :  Returns : void} testUpgradeToClearTextInvalidSettings{ Params :  Returns : void} testUpgradeToClearTextMissingSettings{ Params :  Returns : void} testUpgradeToClearTextWorkerContext{ Params :  Returns : void} testUpgradeFailure{ Params : Context,BiConsumer<HttpClient,Handler<AsyncResult<HttpClientResponse>>> Returns : void} testUpgradeToClearTextPartialFailure{ Params :  Returns : void} testIdleTimeout{ Params :  Returns : void} testSendPing{ Params :  Returns : void} onPingRead{ Params : ChannelHandlerContext,long Returns : void} testReceivePing{ Params :  Returns : void} testPriorKnowledge{ Params :  Returns : void} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testUpdateConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} configure{ Params : ChannelHandlerContext,boolean Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} testHttp1xOrH2CHandlerHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerHttp2Request{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp2Request{ Params :  Returns : void} testStreamPriority{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} ,handlerAdded channelActive exceptionCaught build onDataRead initChannel configurePipeline onSettingsRead onSettingsRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onRstStreamRead onHeadersRead onPushPromiseRead onDataRead onDataRead onPushPromiseRead onDataRead onPushPromiseRead onRstStreamRead onHeadersRead onDataRead onPushPromiseRead onGoAwayRead onGoAwayRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onUnknownFrame onDataRead onPingRead channelInitializer initChannel onHeadersRead onWindowUpdateRead onWindowUpdateRead configure channelRead channelReadComplete channelRead channelReadComplete onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead ,headers GET GET POST createTempFile ,,,,Consumer<Connection> ,,Consumer<Connection> ,TestClientHandler Http2EventAdapter ,super: 
vert.x-master,io.vertx.core.http,Anonymous,1,0,0,0,0,false,Http2TestBase ,0 ,TestClient Connection TestClientHandler TestClientHandlerBuilder TestHttp1xOrH2CHandler ,,headers{ Params : String,String,String Returns : Http2Headers} GET{ Params : String,String Returns : Http2Headers} GET{ Params : String Returns : Http2Headers} POST{ Params : String Returns : Http2Headers} nextStreamId{ Params :  Returns : int} handlerAdded{ Params : ChannelHandlerContext Returns : void} channelActive{ Params : ChannelHandlerContext Returns : void} checkHandle{ Params : ChannelHandlerContext Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} build{ Params : Http2ConnectionDecoder,Http2ConnectionEncoder,Http2Settings Returns : TestClientHandler} build{ Params : Http2Connection Returns : TestClientHandler} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} configurePipeline{ Params : ChannelHandlerContext,String Returns : void} connect{ Params : int,String,Consumer<Connection> Returns : ChannelFuture} testConnectionHandler{ Params :  Returns : void} testServerInitialSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testServerSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testClientSettings{ Params :  Returns : void} testGet{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStatusMessage{ Params :  Returns : void} testURI{ Params :  Returns : void} testHeadersEndHandler{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testBodyEndHandler{ Params :  Returns : void} testPost{ Params :  Returns : void} testPostFileUpload{ Params :  Returns : void} testConnect{ Params :  Returns : void} testServerRequestPauseResume{ Params :  Returns : void} testStreamPauseResume{ Params : Function<HttpServerRequest,Future<ReadStream<Buffer>>> Returns : void} send{ Params :  Returns : void} testServerResponseWritability{ Params :  Returns : void} testStreamWritability{ Params : Function<HttpServerRequest,Future<WriteStream<Buffer>>> Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testTrailers{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testServerResetClientStream1{ Params :  Returns : void} testServerResetClientStream2{ Params :  Returns : void} testServerResetClientStream3{ Params :  Returns : void} testServerResetClientStream{ Params : LongConsumer,boolean Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testClientResetServerStream{ Params :  Returns : void} testConnectionClose{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testPushPromise{ Params :  Returns : void} testPushPromiseHeaders{ Params :  Returns : void} testPushPromiseNoAuthority{ Params :  Returns : void} testPushPromiseOverrideAuthority{ Params :  Returns : void} testPushPromise{ Params : Http2Headers,BiConsumer<HttpServerResponse,Handler<AsyncResult<HttpServerResponse>>>,Consumer<Http2Headers> Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetActivePushPromise{ Params :  Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testQueuePushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetPendingPushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testMissingMethodPseudoHeader{ Params :  Returns : void} testMissingSchemePseudoHeader{ Params :  Returns : void} testMissingPathPseudoHeader{ Params :  Returns : void} testInvalidAuthority{ Params :  Returns : void} testConnectInvalidPath{ Params :  Returns : void} testConnectInvalidScheme{ Params :  Returns : void} testConnectInvalidAuthority{ Params :  Returns : void} testMalformedRequestHeaders{ Params : Http2Headers Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testRequestHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailureWithData{ Params :  Returns : void} testRequestDataHandlerFailure{ Params :  Returns : void} testHandlerFailure{ Params : boolean,BiConsumer<RuntimeException,HttpServer> Returns : void} createTempFile{ Params : Buffer Returns : File} testSendFile{ Params :  Returns : void} testSendFileRange{ Params :  Returns : void} testSendEmptyFile{ Params :  Returns : void} testSendFile{ Params : Buffer,String,long,long Returns : void} endStream{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamError{ Params :  Returns : void} testPromiseStreamError{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testConnectionDecodeError{ Params :  Returns : void} testServerSendGoAwayNoError{ Params :  Returns : void} testServerSendGoAwayInteralError{ Params :  Returns : void} testShutdownWithTimeout{ Params :  Returns : void} testShutdown{ Params :  Returns : void} testServerSendGoAway{ Params : Handler<HttpServerRequest>,int Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testServerClose{ Params :  Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testClientSendGoAwayNoError{ Params :  Returns : void} testClientSendGoAwayInternalError{ Params :  Returns : void} testShutdownOverride{ Params :  Returns : void} testRequestResponseLifecycle{ Params :  Returns : void} testResponseCompressionDisabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResponseCompressionEnabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testRequestCompressionEnabled{ Params :  Returns : void} test100ContinueHandledManually{ Params :  Returns : void} test100ContinueHandledAutomatically{ Params :  Returns : void} test100Continue{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} test100ContinueRejectedManually{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketConnect{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketSendFile{ Params :  Returns : void} testNetSocketSendFileRange{ Params :  Returns : void} testNetSocketSendFile{ Params : Buffer,String,long,long Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testServerCloseNetSocket{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketHandleReset{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketPauseResume{ Params :  Returns : void} testNetSocketWritability{ Params :  Returns : void} testUnknownFrame{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onUnknownFrame{ Params : ChannelHandlerContext,byte,int,Http2Flags,ByteBuf Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testUpgradeToClearTextGet{ Params :  Returns : void} testUpgradeToClearTextPut{ Params :  Returns : void} testUpgradeToClearTextWithCompression{ Params :  Returns : void} testUpgradeToClearText{ Params : HttpMethod,Buffer,Handler<HttpServerOptions> Returns : void} doRequest{ Params : HttpMethod,Buffer,Handler<HttpConnection>,Promise<HttpClientResponse> Returns : void} testPushPromiseClearText{ Params :  Returns : void} testUpgradeToClearTextInvalidConnectionHeader{ Params :  Returns : void} testUpgradeToClearTextMalformedSettings{ Params :  Returns : void} testUpgradeToClearTextInvalidSettings{ Params :  Returns : void} testUpgradeToClearTextMissingSettings{ Params :  Returns : void} testUpgradeToClearTextWorkerContext{ Params :  Returns : void} testUpgradeFailure{ Params : Context,BiConsumer<HttpClient,Handler<AsyncResult<HttpClientResponse>>> Returns : void} testUpgradeToClearTextPartialFailure{ Params :  Returns : void} testIdleTimeout{ Params :  Returns : void} testSendPing{ Params :  Returns : void} onPingRead{ Params : ChannelHandlerContext,long Returns : void} testReceivePing{ Params :  Returns : void} testPriorKnowledge{ Params :  Returns : void} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testUpdateConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} configure{ Params : ChannelHandlerContext,boolean Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} testHttp1xOrH2CHandlerHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerHttp2Request{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp2Request{ Params :  Returns : void} testStreamPriority{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} ,handlerAdded channelActive exceptionCaught build onDataRead initChannel configurePipeline onSettingsRead onSettingsRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onRstStreamRead onHeadersRead onPushPromiseRead onDataRead onDataRead onPushPromiseRead onDataRead onPushPromiseRead onRstStreamRead onHeadersRead onDataRead onPushPromiseRead onGoAwayRead onGoAwayRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onUnknownFrame onDataRead onPingRead channelInitializer initChannel onHeadersRead onWindowUpdateRead onWindowUpdateRead configure channelRead channelReadComplete channelRead channelReadComplete onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead ,headers GET GET POST createTempFile ,,,,,,,,paused: , true
vert.x-master,io.vertx.core.http,TestHttp1xOrH2CHandler,3,0,0,0,0,false,Http2TestBase ,0 ,TestClient Connection TestClientHandler TestClientHandlerBuilder TestHttp1xOrH2CHandler ,,headers{ Params : String,String,String Returns : Http2Headers} GET{ Params : String,String Returns : Http2Headers} GET{ Params : String Returns : Http2Headers} POST{ Params : String Returns : Http2Headers} nextStreamId{ Params :  Returns : int} handlerAdded{ Params : ChannelHandlerContext Returns : void} channelActive{ Params : ChannelHandlerContext Returns : void} checkHandle{ Params : ChannelHandlerContext Returns : void} exceptionCaught{ Params : ChannelHandlerContext,Throwable Returns : void} build{ Params : Http2ConnectionDecoder,Http2ConnectionEncoder,Http2Settings Returns : TestClientHandler} build{ Params : Http2Connection Returns : TestClientHandler} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} configurePipeline{ Params : ChannelHandlerContext,String Returns : void} connect{ Params : int,String,Consumer<Connection> Returns : ChannelFuture} testConnectionHandler{ Params :  Returns : void} testServerInitialSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testServerSettings{ Params :  Returns : void} onSettingsRead{ Params : ChannelHandlerContext,Http2Settings Returns : void} testClientSettings{ Params :  Returns : void} testGet{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStatusMessage{ Params :  Returns : void} testURI{ Params :  Returns : void} testHeadersEndHandler{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testBodyEndHandler{ Params :  Returns : void} testPost{ Params :  Returns : void} testPostFileUpload{ Params :  Returns : void} testConnect{ Params :  Returns : void} testServerRequestPauseResume{ Params :  Returns : void} testStreamPauseResume{ Params : Function<HttpServerRequest,Future<ReadStream<Buffer>>> Returns : void} send{ Params :  Returns : void} testServerResponseWritability{ Params :  Returns : void} testStreamWritability{ Params : Function<HttpServerRequest,Future<WriteStream<Buffer>>> Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testTrailers{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testServerResetClientStream1{ Params :  Returns : void} testServerResetClientStream2{ Params :  Returns : void} testServerResetClientStream3{ Params :  Returns : void} testServerResetClientStream{ Params : LongConsumer,boolean Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testClientResetServerStream{ Params :  Returns : void} testConnectionClose{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testPushPromise{ Params :  Returns : void} testPushPromiseHeaders{ Params :  Returns : void} testPushPromiseNoAuthority{ Params :  Returns : void} testPushPromiseOverrideAuthority{ Params :  Returns : void} testPushPromise{ Params : Http2Headers,BiConsumer<HttpServerResponse,Handler<AsyncResult<HttpServerResponse>>>,Consumer<Http2Headers> Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetActivePushPromise{ Params :  Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testQueuePushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResetPendingPushPromise{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testMissingMethodPseudoHeader{ Params :  Returns : void} testMissingSchemePseudoHeader{ Params :  Returns : void} testMissingPathPseudoHeader{ Params :  Returns : void} testInvalidAuthority{ Params :  Returns : void} testConnectInvalidPath{ Params :  Returns : void} testConnectInvalidScheme{ Params :  Returns : void} testConnectInvalidAuthority{ Params :  Returns : void} testMalformedRequestHeaders{ Params : Http2Headers Returns : void} onRstStreamRead{ Params : ChannelHandlerContext,int,long Returns : void} testRequestHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailure{ Params :  Returns : void} testRequestEndHandlerFailureWithData{ Params :  Returns : void} testRequestDataHandlerFailure{ Params :  Returns : void} testHandlerFailure{ Params : boolean,BiConsumer<RuntimeException,HttpServer> Returns : void} createTempFile{ Params : Buffer Returns : File} testSendFile{ Params :  Returns : void} testSendFileRange{ Params :  Returns : void} testSendEmptyFile{ Params :  Returns : void} testSendFile{ Params : Buffer,String,long,long Returns : void} endStream{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamError{ Params :  Returns : void} testPromiseStreamError{ Params :  Returns : void} onPushPromiseRead{ Params : ChannelHandlerContext,int,int,Http2Headers,int Returns : void} testConnectionDecodeError{ Params :  Returns : void} testServerSendGoAwayNoError{ Params :  Returns : void} testServerSendGoAwayInteralError{ Params :  Returns : void} testShutdownWithTimeout{ Params :  Returns : void} testShutdown{ Params :  Returns : void} testServerSendGoAway{ Params : Handler<HttpServerRequest>,int Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testServerClose{ Params :  Returns : void} onGoAwayRead{ Params : ChannelHandlerContext,int,long,ByteBuf Returns : void} testClientSendGoAwayNoError{ Params :  Returns : void} testClientSendGoAwayInternalError{ Params :  Returns : void} testShutdownOverride{ Params :  Returns : void} testRequestResponseLifecycle{ Params :  Returns : void} testResponseCompressionDisabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testResponseCompressionEnabled{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testRequestCompressionEnabled{ Params :  Returns : void} test100ContinueHandledManually{ Params :  Returns : void} test100ContinueHandledAutomatically{ Params :  Returns : void} test100Continue{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} test100ContinueRejectedManually{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketConnect{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketSendFile{ Params :  Returns : void} testNetSocketSendFileRange{ Params :  Returns : void} testNetSocketSendFile{ Params : Buffer,String,long,long Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testServerCloseNetSocket{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testNetSocketHandleReset{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testNetSocketPauseResume{ Params :  Returns : void} testNetSocketWritability{ Params :  Returns : void} testUnknownFrame{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onUnknownFrame{ Params : ChannelHandlerContext,byte,int,Http2Flags,ByteBuf Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testUpgradeToClearTextGet{ Params :  Returns : void} testUpgradeToClearTextPut{ Params :  Returns : void} testUpgradeToClearTextWithCompression{ Params :  Returns : void} testUpgradeToClearText{ Params : HttpMethod,Buffer,Handler<HttpServerOptions> Returns : void} doRequest{ Params : HttpMethod,Buffer,Handler<HttpConnection>,Promise<HttpClientResponse> Returns : void} testPushPromiseClearText{ Params :  Returns : void} testUpgradeToClearTextInvalidConnectionHeader{ Params :  Returns : void} testUpgradeToClearTextMalformedSettings{ Params :  Returns : void} testUpgradeToClearTextInvalidSettings{ Params :  Returns : void} testUpgradeToClearTextMissingSettings{ Params :  Returns : void} testUpgradeToClearTextWorkerContext{ Params :  Returns : void} testUpgradeFailure{ Params : Context,BiConsumer<HttpClient,Handler<AsyncResult<HttpClientResponse>>> Returns : void} testUpgradeToClearTextPartialFailure{ Params :  Returns : void} testIdleTimeout{ Params :  Returns : void} testSendPing{ Params :  Returns : void} onPingRead{ Params : ChannelHandlerContext,long Returns : void} testReceivePing{ Params :  Returns : void} testPriorKnowledge{ Params :  Returns : void} channelInitializer{ Params : int,String,Consumer<Connection> Returns : ChannelInitializer} initChannel{ Params : Channel Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} testConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} testUpdateConnectionWindowSize{ Params :  Returns : void} onWindowUpdateRead{ Params : ChannelHandlerContext,int,int Returns : void} configure{ Params : ChannelHandlerContext,boolean Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} channelReadComplete{ Params : ChannelHandlerContext Returns : void} testHttp1xOrH2CHandlerHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp1xRequest{ Params :  Returns : void} testHttp1xOrH2CHandlerHttp2Request{ Params :  Returns : void} testHttp1xOrH2CHandlerFragmentedHttp2Request{ Params :  Returns : void} testStreamPriority{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} testStreamPriorityNoChange{ Params :  Returns : void} onHeadersRead{ Params : ChannelHandlerContext,int,Http2Headers,int,short,boolean,int,boolean Returns : void} onPriorityRead{ Params : ChannelHandlerContext,int,int,short,boolean Returns : void} onDataRead{ Params : ChannelHandlerContext,int,ByteBuf,int,boolean Returns : int} ,handlerAdded channelActive exceptionCaught build onDataRead initChannel configurePipeline onSettingsRead onSettingsRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onRstStreamRead onHeadersRead onPushPromiseRead onDataRead onDataRead onPushPromiseRead onDataRead onPushPromiseRead onRstStreamRead onHeadersRead onDataRead onPushPromiseRead onGoAwayRead onGoAwayRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onDataRead onHeadersRead onHeadersRead onUnknownFrame onDataRead onPingRead channelInitializer initChannel onHeadersRead onWindowUpdateRead onWindowUpdateRead configure channelRead channelReadComplete channelRead channelReadComplete onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead onHeadersRead onPriorityRead onDataRead ,headers GET GET POST createTempFile ,,,,,,,ChannelDuplexHandler HttpServerCodec ChannelDuplexHandler ,ctx: 
vert.x-master,io.vertx.core.http,Http2SettingsTest,1,1,0,0,0,false,0 ,0 ,0 ,min: long max: long ,testSettingsMin{ Params :  Returns : void} testSettinsMax{ Params :  Returns : void} toNettySettings{ Params :  Returns : void} testSettings{ Params :  Returns : void} testEqualsHashCode{ Params :  Returns : void} ,,,,,,,,,Http2Settings Http2Settings Http2Settings Http2Settings Http2Settings Http2Settings HashMap Http2Settings Http2Settings Http2Settings Http2Settings Http2Settings ,s4: 
vert.x-master,io.vertx.core.http,Http2Test,1,1,0,0,0,false,HttpTest ,0 ,0 ,,createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} testCloseHandlerNotCalledWhenConnectionClosedAfterEnd{ Params :  Returns : void} testServerResponseWriteBufferFromOtherThread{ Params :  Returns : void} testServerResponseEndFromOtherThread{ Params :  Returns : void} testServerResponseEndWithTrailersFromOtherThread{ Params :  Returns : void} testServerResponseResetFromOtherThread{ Params :  Returns : void} runAsync{ Params : Runnable Returns : void} testClientRequestWriteFromOtherThread{ Params :  Returns : void} testServerOpenSSL{ Params :  Returns : void} testServerStreamPausedWhenConnectionIsPaused{ Params :  Returns : void} testClientStreamPausedWhenConnectionIsPaused{ Params :  Returns : void} testResetClientRequestNotYetSent{ Params :  Returns : void} testDiscardConnectionWhenChannelBecomesInactive{ Params :  Returns : void} testClientDoesNotSupportAlpn{ Params :  Returns : void} testServerDoesNotSupportAlpn{ Params :  Returns : void} testClientMakeRequestHttp2WithSSLWithoutAlpn{ Params :  Returns : void} testServePendingRequests{ Params :  Returns : void} testInitialMaxConcurrentStreamZero{ Params :  Returns : void} testMaxHaderListSize{ Params :  Returns : void} testContentLengthNotRequired{ Params :  Returns : void} testStreamWeightAndDependency{ Params :  Returns : void} testStreamWeightAndDependencyChange{ Params :  Returns : void} testServerStreamPriorityNoChange{ Params :  Returns : void} testClientStreamPriorityNoChange{ Params :  Returns : void} testStreamWeightAndDependencyInheritance{ Params :  Returns : void} testDefaultStreamWeightAndDependency{ Params :  Returns : void} testStreamWeightAndDependencyPushPromise{ Params :  Returns : void} testStreamWeightAndDependencyInheritancePushPromise{ Params :  Returns : void} testClearTextUpgradeWithBody{ Params :  Returns : void} testClearTextUpgradeWithBodyTooLongFrameResponse{ Params :  Returns : void} testSslHandshakeTimeout{ Params :  Returns : void} testAppendToHttpChunks{ Params :  Returns : void} testNonUpgradedH2CConnectionIsEvictedFromThePool{ Params :  Returns : void} testConnectionCloseEvictsConnectionFromThePoolBeforeStreamsAreClosed{ Params :  Returns : void} ,createBaseServerOptions createBaseClientOptions testCloseHandlerNotCalledWhenConnectionClosedAfterEnd ,,,,,,,,Thread CountDownLatch CountDownLatch Thread HttpServerOptions OpenSSLEngineOptions CountDownLatch CompletableFuture RequestOptions RequestOptions CompletableFuture RequestOptions RequestOptions Http2Settings AtomicInteger AtomicInteger LinkedList HashSet Http2Settings Http2Settings RequestOptions Http2Settings RequestOptions StreamPriority StreamPriority StreamPriority StreamPriority StreamPriority StreamPriority StreamPriority StreamPriority StreamPriority StreamPriority StreamPriority StreamPriority StreamPriority HttpClientOptions RequestOptions HttpClientOptions RequestOptions ArrayList HttpClientOptions AtomicBoolean HashSet RequestOptions RequestOptions RequestOptions ,: 
vert.x-master,io.vertx.core.http,Http2TestBase,1,1,0,0,0,false,HttpTestBase ,0 ,0 ,serverOptions: HttpServerOptions clientOptions: HttpClientOptions eventLoopGroups: List<EventLoopGroup> ,createHttp2ServerOptions{ Params : int,String Returns : HttpServerOptions} createHttp2ClientOptions{ Params :  Returns : HttpClientOptions} setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} ,setUp tearDown createBaseServerOptions createBaseClientOptions ,createHttp2ServerOptions createHttp2ClientOptions ,,,,,,,HttpServerOptions JdkSSLEngineOptions HttpClientOptions JdkSSLEngineOptions ArrayList ,eventLoopGroup: , 0, 10, TimeUnit.SECONDS
vert.x-master,io.vertx.core.http,Http2TLSTest,1,1,0,0,0,false,HttpTLSTest ,0 ,0 ,,createHttpServer{ Params : HttpServerOptions Returns : HttpServer} createHttpClient{ Params : HttpClientOptions Returns : HttpClient} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?> Returns : TLSTest} ,createHttpServer createHttpClient testTLS ,,,,,,,,,super: , clientCert, clientTrust, serverCert, serverTrust
vert.x-master,io.vertx.core.http,HttpClientConnectionTest,1,1,1,0,0,false,HttpTestBase ,0 ,0 ,peerAddress: SocketAddress tmp: File client: HttpClientImpl ,setUp{ Params :  Returns : void} testGet{ Params :  Returns : void} testConnectionClose{ Params :  Returns : void} ,setUp ,,,,,,,,HttpRequestHead StreamPriority AtomicInteger HttpRequestHead StreamPriority ,: 
vert.x-master,io.vertx.core.http,HttpCompressionTestBase,1,1,1,0,0,false,HttpTestBase ,0 ,0 ,COMPRESS_TEST_STRING: String compressedTestString: Buffer ,encoding{ Params :  Returns : String} encoder{ Params :  Returns : MessageToByteEncoder<ByteBuf>} configureServerCompression{ Params : HttpServerOptions Returns : void} compress{ Params : Buffer Returns : Buffer} setUp{ Params :  Returns : void} testSkipEncoding{ Params :  Returns : void} testServerStandardCompression{ Params :  Returns : void} testServerDecompression{ Params :  Returns : void} testClientDecompression{ Params :  Returns : void} testClientAcceptEncoding{ Params :  Returns : void} ,setUp ,,,encoding encoder ,,Buffer ,,Buffer ,EmbeddedChannel RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions ,: 
vert.x-master,io.vertx.core.http,HttpConnectionEarlyResetTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,httpServer: HttpServer caught: AtomicReference<Throwable> resetLatch: CountDownLatch ,setUp{ Params :  Returns : void} testExceptionCaught{ Params :  Returns : void} tearDown{ Params :  Returns : void} ,setUp tearDown ,,,,,CountDownLatch ,,CountDownLatch ,AtomicReference CountDownLatch CountDownLatch NetClientOptions CountDownLatch ,super: 
vert.x-master,io.vertx.core.http,HttpMethodTest,1,1,0,0,0,false,0 ,0 ,0 ,,testConstantNames{ Params :  Returns : void} testConstants{ Params :  Returns : void} testInvalidValueOf{ Params :  Returns : void} testValueOf{ Params :  Returns : void} testCaseSensitive{ Params :  Returns : void} testNettyInterop{ Params :  Returns : void} testValues{ Params :  Returns : void} ,,,,,,,,,,list: , Assert::assertNotNull
vert.x-master,io.vertx.core.http,HttpMetricsTestBase,1,1,1,0,0,false,HttpTestBase ,0 ,0 ,protocol: HttpVersion ,tearDown{ Params :  Returns : void} getOptions{ Params :  Returns : VertxOptions} testHttpMetricsLifecycle{ Params :  Returns : void} testHttpClientLifecycle{ Params :  Returns : void} testClientConnectionClosed{ Params :  Returns : void} testServerConnectionClosed{ Params :  Returns : void} testRouteMetrics{ Params :  Returns : void} testRouteMetricsIgnoredAfterResponseEnd{ Params :  Returns : void} testResetImmediately{ Params :  Returns : void} ,tearDown getOptions ,,,,,HttpVersion ,,HttpVersion ,MetricsOptions FakeMetricsFactory AtomicReference AtomicInteger CountDownLatch AtomicReference AtomicReference RequestOptions CountDownLatch CountDownLatch CountDownLatch CompletableFuture CompletableFuture CountDownLatch CountDownLatch CountDownLatch RequestOptions RequestOptions RequestOptions RequestOptions ,: 
vert.x-master,io.vertx.core.http,HttpServerChannelInitializerTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testHttpServer{ Params :  Returns : void} ,,,,,,,,,,: 
vert.x-master,io.vertx.core.http,HttpServerCloseHookTest,1,1,0,0,0,false,VertxTestBase ,0 ,TestVerticle ,,deployHandlerShouldGetException{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} ,start ,,,,,,,,TestVerticle HttpServerOptions PfxOptions ,: 
vert.x-master,io.vertx.core.http,TestVerticle,3,2,0,1,0,false,VertxTestBase ,0 ,TestVerticle ,,deployHandlerShouldGetException{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} ,start ,,,,,,,,HttpServerOptions PfxOptions ,ar: 
vert.x-master,io.vertx.core.http,HttpServerFileUploadTest,1,1,1,0,0,false,HttpTestBase ,0 ,0 ,testFolder: TemporaryFolder testDir: File tmp: File ,setUp{ Params :  Returns : void} testFormUploadEmptyFile{ Params :  Returns : void} testFormUploadEmptyFileWithContentLength{ Params :  Returns : void} testFormUploadSmallFile{ Params :  Returns : void} testFormUploadSmallFileWithContentLength{ Params :  Returns : void} testFormUploadMediumFile{ Params :  Returns : void} testFormUploadMediumFileWithContentLength{ Params :  Returns : void} testFormUploadLargeFile{ Params :  Returns : void} testFormUploadLargeFileWithContentLength{ Params :  Returns : void} testFormUploadEmptyFileStreamToDisk{ Params :  Returns : void} testFormUploadSmallFileStreamToDisk{ Params :  Returns : void} testFormUploadMediumFileStreamToDisk{ Params :  Returns : void} testFormUploadLargeFileStreamToDisk{ Params :  Returns : void} testFormUploadWithExtFilename{ Params :  Returns : void} testBrokenFormUploadEmptyFile{ Params :  Returns : void} testBrokenFormUploadSmallFile{ Params :  Returns : void} testBrokenFormUploadMediumFile{ Params :  Returns : void} testBrokenFormUploadLargeFile{ Params :  Returns : void} testBrokenFormUploadEmptyFileStreamToDisk{ Params :  Returns : void} testBrokenFormUploadSmallFileStreamToDisk{ Params :  Returns : void} testBrokenFormUploadMediumFileStreamToDisk{ Params :  Returns : void} testBrokenFormUploadLargeFileStreamToDisk{ Params :  Returns : void} testCancelFormUploadEmptyFileStreamToDisk{ Params :  Returns : void} testCancelFormUploadSmallFileStreamToDisk{ Params :  Returns : void} testCancelFormUploadMediumFileStreamToDisk{ Params :  Returns : void} testCancelFormUploadLargeFileStreamToDisk{ Params :  Returns : void} testFormUploadFile{ Params : String,boolean,boolean,boolean,boolean Returns : void} testFormUploadFile{ Params : String,String,String,boolean,boolean,boolean,boolean Returns : void} testFormUploadAttributes{ Params :  Returns : void} testFormUploadAttributes2{ Params :  Returns : void} testAttributeSizeOverflow{ Params :  Returns : void} testInvalidPostFileUpload{ Params :  Returns : void} ,setUp ,,,,,File ,,File ,TemporaryFolder AtomicInteger AtomicReference AtomicReference File File File RequestOptions AtomicInteger RequestOptions AtomicInteger RequestOptions AtomicReference RequestOptions AtomicInteger RequestOptions ,: 
vert.x-master,io.vertx.core.http,HttpTest,1,1,1,0,0,false,HttpTestBase ,0 ,0 ,testFolder: TemporaryFolder testDir: File tmp: File ,setUp{ Params :  Returns : void} testClientRequestArguments{ Params :  Returns : void} testListenSocketAddress{ Params :  Returns : void} testListenDomainSocketAddress{ Params :  Returns : void} testLowerCaseHeaders{ Params :  Returns : void} testServerActualPortWhenSet{ Params :  Returns : void} testServerActualPortWhenZero{ Params :  Returns : void} testServerActualPortWhenZeroPassedInListen{ Params :  Returns : void} testClientRequestOptionsSocketAddressOnly{ Params :  Returns : void} testInvalidAbsoluteURI{ Params :  Returns : void} testPutHeadersOnRequest{ Params :  Returns : void} testPutHeaderReplacesPreviousHeaders{ Params :  Returns : void} testSimpleGET{ Params :  Returns : void} testSimplePUT{ Params :  Returns : void} testSimplePOST{ Params :  Returns : void} testSimpleDELETE{ Params :  Returns : void} testSimpleHEAD{ Params :  Returns : void} testSimpleTRACE{ Params :  Returns : void} testSimpleCONNECT{ Params :  Returns : void} testSimpleOPTIONS{ Params :  Returns : void} testSimplePATCH{ Params :  Returns : void} testSimpleGETAbsolute{ Params :  Returns : void} testEmptyPathGETAbsolute{ Params :  Returns : void} testNoPathButQueryGETAbsolute{ Params :  Returns : void} testSimplePUTAbsolute{ Params :  Returns : void} testSimplePOSTAbsolute{ Params :  Returns : void} testSimpleDELETEAbsolute{ Params :  Returns : void} testSimpleHEADAbsolute{ Params :  Returns : void} testSimpleTRACEAbsolute{ Params :  Returns : void} testSimpleCONNECTAbsolute{ Params :  Returns : void} testSimpleOPTIONSAbsolute{ Params :  Returns : void} testSimplePATCHAbsolute{ Params :  Returns : void} testSimpleRequest{ Params : String,HttpMethod,Handler<HttpClientResponse> Returns : void} testSimpleRequest{ Params : String,HttpMethod,boolean,Handler<HttpClientResponse> Returns : void} testSimpleRequest{ Params : String,HttpMethod,RequestOptions,boolean,Handler<HttpClientResponse> Returns : void} testServerChaining{ Params :  Returns : void} testResponseEndHandlers1{ Params :  Returns : void} testResponseEndHandlers2{ Params :  Returns : void} testResponseEndHandlersChunkedResponse{ Params :  Returns : void} testResponseEndHandlersSendFile{ Params :  Returns : void} testAbsoluteURI{ Params :  Returns : void} testRelativeURI{ Params :  Returns : void} testAbsoluteURIWithHttpSchemaInQuery{ Params :  Returns : void} testRelativeURIWithHttpSchemaInQuery{ Params :  Returns : void} testAbsoluteURIEmptyPath{ Params :  Returns : void} testEmptyURI{ Params :  Returns : void} testURIAndPath{ Params : String,String,String Returns : void} testParamUmlauteDecoding{ Params :  Returns : void} testParamPlusDecoding{ Params :  Returns : void} testParamPercentDecoding{ Params :  Returns : void} testParamSpaceDecoding{ Params :  Returns : void} testParamNormalDecoding{ Params :  Returns : void} testParamAltogetherDecoding{ Params :  Returns : void} testParamDecoding{ Params : String Returns : void} testParamsAmpersand{ Params :  Returns : void} testParamsSemiColon{ Params :  Returns : void} testParams{ Params : char Returns : void} testNoParams{ Params :  Returns : void} testOverrideParamsCharset{ Params :  Returns : void} testGetParamDefaultValue{ Params :  Returns : void} testMissingContentTypeMultipartRequest{ Params :  Returns : void} testInvalidContentTypeMultipartRequest{ Params :  Returns : void} testInvalidMethodMultipartRequest{ Params :  Returns : void} testInvalidMultipartRequest{ Params : String,HttpMethod Returns : void} testDefaultRequestHeaders{ Params :  Returns : void} sendAndAwait{ Params : RequestOptions Returns : void} sendAndAwait{ Params : RequestOptions,Handler<HttpClientRequest> Returns : void} testRequestHeadersWithCharSequence{ Params :  Returns : void} testRequestHeadersPutAll{ Params :  Returns : void} testRequestHeadersIndividually{ Params :  Returns : void} testRequestHeaders{ Params : boolean Returns : void} testResponseHeadersPutAll{ Params :  Returns : void} testResponseHeadersIndividually{ Params :  Returns : void} testResponseHeaders{ Params : boolean Returns : void} testResponseHeadersWithCharSequence{ Params :  Returns : void} testResponseMultipleSetCookieInHeader{ Params :  Returns : void} testResponseMultipleSetCookieInTrailer{ Params :  Returns : void} testResponseMultipleSetCookieInHeaderAndTrailer{ Params :  Returns : void} testResponseMultipleSetCookie{ Params : boolean,boolean Returns : void} testUseRequestAfterComplete{ Params :  Returns : void} testRequestBodyBufferAtEnd{ Params :  Returns : void} testRequestBodyStringDefaultEncodingAtEnd{ Params :  Returns : void} testRequestBodyStringUTF8AtEnd{ Params :  Returns : void} testRequestBodyStringUTF16AtEnd{ Params :  Returns : void} testRequestBodyStringAtEnd{ Params : String Returns : void} testRequestBodyWriteChunked{ Params :  Returns : void} testRequestBodyWriteNonChunked{ Params :  Returns : void} testRequestBodyWrite{ Params : boolean Returns : void} testRequestBodyWriteStringChunkedDefaultEncoding{ Params :  Returns : void} testRequestBodyWriteStringChunkedUTF8{ Params :  Returns : void} testRequestBodyWriteStringChunkedUTF16{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedDefaultEncoding{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedUTF8{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedUTF16{ Params :  Returns : void} testRequestBodyWriteString{ Params : boolean,String Returns : void} testRequestWrite{ Params :  Returns : void} testClientExceptionHandlerCalledWhenServerTerminatesConnection{ Params :  Returns : void} testClientExceptionHandlerCalledWhenServerTerminatesConnectionAfterPartialResponse{ Params :  Returns : void} testContextExceptionHandlerCalledWhenExceptionOnDataHandler{ Params :  Returns : void} testClientExceptionHandlerCalledWhenExceptionOnBodyHandler{ Params :  Returns : void} testNoExceptionHandlerCalledWhenResponseEnded{ Params :  Returns : void} testServerExceptionHandlerOnClose{ Params :  Returns : void} testClientRequestExceptionHandlerCalledWhenConnectionClosed{ Params :  Returns : void} testClientResponseExceptionHandlerCalledWhenConnectionClosed{ Params :  Returns : void} testClientRequestExceptionHandlerCalledWhenRequestEnded{ Params :  Returns : void} testDefaultStatus{ Params :  Returns : void} testDefaultOther{ Params :  Returns : void} testOverrideStatusMessage{ Params :  Returns : void} testOverrideDefaultStatusMessage{ Params :  Returns : void} testStatusCode{ Params : int,String Returns : void} testResponseTrailersPutAll{ Params :  Returns : void} testResponseTrailersPutIndividually{ Params :  Returns : void} testResponseTrailers{ Params : boolean Returns : void} testResponseNoTrailers{ Params :  Returns : void} testUseAfterServerResponseHeadSent{ Params :  Returns : void} testUseAfterServerResponseSent{ Params :  Returns : void} testSetInvalidStatusMessage{ Params :  Returns : void} testResponseBodyBufferAtEnd{ Params :  Returns : void} testResponseBodyWriteChunked{ Params :  Returns : void} testResponseBodyWriteNonChunked{ Params :  Returns : void} testResponseBodyWrite{ Params : boolean Returns : void} testResponseBodyWriteStringChunkedDefaultEncoding{ Params :  Returns : void} testResponseBodyWriteStringChunkedUTF8{ Params :  Returns : void} testResponseBodyWriteStringChunkedUTF16{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedDefaultEncoding{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedUTF8{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedUTF16{ Params :  Returns : void} testResponseBodyWriteString{ Params : boolean,String Returns : void} testResponseWrite{ Params :  Returns : void} testSendFile{ Params :  Returns : void} testSendFileWithHandler{ Params :  Returns : void} sendFile{ Params : String,String,boolean,Supplier<Future<HttpClientRequest>> Returns : void} testSendNonExistingFile{ Params :  Returns : void} testSendFileOverrideHeaders{ Params :  Returns : void} testSendFileNotFound{ Params :  Returns : void} testSendFileDirectoryWithHandler{ Params :  Returns : void} testSendOpenRangeFileFromClasspath{ Params :  Returns : void} testSendRangeFileFromClasspath{ Params :  Returns : void} test100ContinueHandledAutomatically{ Params :  Returns : void} test100ContinueHandledManually{ Params :  Returns : void} test100ContinueRejectedManually{ Params :  Returns : void} test100ContinueTimeout{ Params :  Returns : void} test103EarlyHints{ Params :  Returns : void} testClientDrainHandler{ Params :  Returns : void} pausingServer{ Params : Consumer<Promise<Void>> Returns : void} testServerDrainHandler{ Params :  Returns : void} drainingServer{ Params : Consumer<Future<Void>> Returns : void} testRequestTimesOutWhenIndicatedPeriodExpiresWithoutAResponseFromRemoteServer{ Params :  Returns : void} testRequestTimeoutCanceledWhenRequestHasAnOtherError{ Params :  Returns : void} testRequestTimeoutCanceledWhenRequestEndsNormally{ Params :  Returns : void} testHttpClientRequestTimeoutResetsTheConnection{ Params :  Returns : void} testConnectInvalidPort{ Params :  Returns : void} testConnectInvalidHost{ Params :  Returns : void} testSetHandlersAfterListening{ Params :  Returns : void} testListenNoHandlers{ Params :  Returns : void} testListenTwice{ Params :  Returns : void} testHeadCanSetContentLength{ Params :  Returns : void} testHeadDoesNotSetAutomaticallySetContentLengthHeader{ Params :  Returns : void} testHeadAllowsContentLengthHeader{ Params :  Returns : void} testHeadRemovesTransferEncodingHeader{ Params :  Returns : void} testNoContentRemovesContentLengthHeader{ Params :  Returns : void} testNoContentRemovesTransferEncodingHeader{ Params :  Returns : void} testResetContentSetsContentLengthHeader{ Params :  Returns : void} testResetContentRemovesTransferEncodingHeader{ Params :  Returns : void} testNotModifiedDoesNotSetAutomaticallySetContentLengthHeader{ Params :  Returns : void} testNotModifiedAllowsContentLengthHeader{ Params :  Returns : void} testNotModifiedRemovesTransferEncodingHeader{ Params :  Returns : void} test1xxRemovesContentLengthHeader{ Params :  Returns : void} test1xxRemovesTransferEncodingHeader{ Params :  Returns : void} checkEmptyHttpResponse{ Params : HttpMethod,int,MultiMap Returns : MultiMap} testHeadHasNoContentLengthByDefault{ Params :  Returns : void} testHeadButCanSetContentLength{ Params :  Returns : void} testRemoteAddress{ Params :  Returns : void} testGetAbsoluteURI{ Params :  Returns : void} testListenInvalidPort{ Params :  Returns : void} testListenInvalidHost{ Params :  Returns : void} testPauseResumeClientResponseWontCallEndHandlePrematurely{ Params :  Returns : void} testPauseClientResponse{ Params :  Returns : void} testDeliverPausedBufferWhenResume{ Params :  Returns : void} testDeliverPausedBufferWhenResumeOnOtherThread{ Params :  Returns : void} testDeliverPausedBufferWhenResume{ Params : Consumer<Runnable> Returns : void} testClearPausedBuffersWhenResponseEnds{ Params :  Returns : void} testPausedHttpServerRequest{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk1{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk2{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk{ Params : boolean Returns : void} testHttpClientResponsePausedDuringLastChunk1{ Params :  Returns : void} testHttpClientResponsePausedDuringLastChunk2{ Params :  Returns : void} testHttpClientResponsePausedDuringLastChunk{ Params : boolean Returns : void} testHostHeaderOverridePossible{ Params :  Returns : void} testResponseBodyWriteFixedString{ Params :  Returns : void} testResponseDataTimeout{ Params :  Returns : void} testClientMultiThreaded{ Params :  Returns : void} run{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} testInVerticle{ Params : boolean Returns : void} start{ Params :  Returns : void} testWorkerServer{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testInWorker{ Params :  Returns : void} start{ Params :  Returns : void} testClientReadStreamInWorker{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testServerReadStreamInWorker{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleServerClose{ Params :  Returns : void} testRequestEnded{ Params :  Returns : void} testRequestEndedNoEndHandler{ Params :  Returns : void} testAbsoluteURIServer{ Params :  Returns : void} testDumpManyRequestsOnQueue{ Params :  Returns : void} testOtherMethodRequest{ Params :  Returns : void} testClientGlobalConnectionHandler{ Params :  Returns : void} testServerConnectionHandler{ Params :  Returns : void} testServerConnectionHandlerClose{ Params :  Returns : void} testClientConnectionClose{ Params :  Returns : void} testServerConnectionClose{ Params :  Returns : void} testNoLogging{ Params :  Returns : void} testServerLogging{ Params :  Returns : void} testClientLogging{ Params :  Returns : void} testClientLocalAddress{ Params :  Returns : void} testFollowRedirectGetOn301{ Params :  Returns : void} testFollowRedirectPostOn301{ Params :  Returns : void} testFollowRedirectPutOn301{ Params :  Returns : void} testFollowRedirectGetOn302{ Params :  Returns : void} testFollowRedirectPostOn302{ Params :  Returns : void} testFollowRedirectPutOn302{ Params :  Returns : void} testFollowRedirectGetOn303{ Params :  Returns : void} testFollowRedirectPostOn303{ Params :  Returns : void} testFollowRedirectPutOn303{ Params :  Returns : void} testFollowRedirectNotOn304{ Params :  Returns : void} testFollowRedirectGetOn307{ Params :  Returns : void} testFollowRedirectPostOn307{ Params :  Returns : void} testFollowRedirectPutOn307{ Params :  Returns : void} testFollowRedirectWithRelativeLocation{ Params :  Returns : void} testFollowRedirectGetOn308{ Params :  Returns : void} testFollowRedirectPostOn308{ Params :  Returns : void} testFollowRedirectPutOn308{ Params :  Returns : void} testFollowRedirect{ Params : HttpMethod,HttpMethod,int,int,int,String,String Returns : void} testFollowRedirectWithBody{ Params :  Returns : void} testFollowRedirectWithPaddedBody{ Params :  Returns : void} testFollowRedirectWithBody{ Params : Function<Buffer,Buffer> Returns : void} testFollowRedirectHappensAfterResponseIsReceived{ Params :  Returns : void} testFollowRedirectWithChunkedBody{ Params :  Returns : void} testFollowRedirectWithRequestNotEnded{ Params :  Returns : void} testFollowRedirectWithRequestNotEndedFailing{ Params :  Returns : void} testFollowRedirectWithRequestNotEnded{ Params : boolean Returns : void} testFollowRedirectSendHeadThenBody{ Params :  Returns : void} testFollowRedirectLimit{ Params :  Returns : void} testFollowRedirectPropagatesTimeout{ Params :  Returns : void} testFollowRedirectHost{ Params :  Returns : void} testFollowRedirectWithCustomHandler{ Params :  Returns : void} testDefaultRedirectHandler{ Params :  Returns : void} testFoo{ Params : String,String Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientRequest} write{ Params : Buffer Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : HttpClientRequest} drainHandler{ Params : Handler<Void> Returns : HttpClientRequest} setFollowRedirects{ Params : boolean Returns : HttpClientRequest} setMaxRedirects{ Params : int Returns : HttpClientRequest} setChunked{ Params : boolean Returns : HttpClientRequest} isChunked{ Params :  Returns : boolean} getMethod{ Params :  Returns : HttpMethod} absoluteURI{ Params :  Returns : String} version{ Params :  Returns : HttpVersion} getURI{ Params :  Returns : String} setURI{ Params : String Returns : HttpClientRequest} path{ Params :  Returns : String} query{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} putHeader{ Params : String,String Returns : HttpClientRequest} putHeader{ Params : CharSequence,CharSequence Returns : HttpClientRequest} putHeader{ Params : String,Iterable<String> Returns : HttpClientRequest} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : HttpClientRequest} write{ Params : String Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} write{ Params : Buffer,Handler<AsyncResult<Void>> Returns : void} write{ Params : String,Handler<AsyncResult<Void>> Returns : void} write{ Params : String,String,Handler<AsyncResult<Void>> Returns : void} continueHandler{ Params : Handler<Void> Returns : HttpClientRequest} earlyHintsHandler{ Params : Handler<MultiMap> Returns : HttpClientRequest} sendHead{ Params :  Returns : Future<Void>} sendHead{ Params : Handler<AsyncResult<Void>> Returns : HttpClientRequest} connect{ Params :  Returns : Future<HttpClientResponse>} connect{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : void} end{ Params : String Returns : Future<Void>} end{ Params : String,String Returns : Future<Void>} end{ Params : String,Handler<AsyncResult<Void>> Returns : void} end{ Params : String,String,Handler<AsyncResult<Void>> Returns : void} end{ Params : Handler<AsyncResult<Void>> Returns : void} end{ Params :  Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params : Buffer,Handler<AsyncResult<Void>> Returns : void} setTimeout{ Params : long Returns : HttpClientRequest} pushHandler{ Params : Handler<HttpClientRequest> Returns : HttpClientRequest} reset{ Params : long Returns : boolean} reset{ Params : long,Throwable Returns : boolean} connection{ Params :  Returns : HttpConnection} writeCustomFrame{ Params : int,int,Buffer Returns : HttpClientRequest} writeQueueFull{ Params :  Returns : boolean} getStreamPriority{ Params :  Returns : StreamPriority} onComplete{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : HttpClientRequest} isComplete{ Params :  Returns : boolean} result{ Params :  Returns : HttpClientResponse} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} compose{ Params : Function<HttpClientResponse,Future<U>>,Function<Throwable,Future<U>> Returns : Future<U>} map{ Params : Function<HttpClientResponse,U> Returns : Future<U>} map{ Params : V Returns : Future<V>} otherwise{ Params : Function<Throwable,HttpClientResponse> Returns : Future<HttpClientResponse>} otherwise{ Params : HttpClientResponse Returns : Future<HttpClientResponse>} setHost{ Params : String Returns : HttpClientRequest} getHost{ Params :  Returns : String} setPort{ Params : int Returns : HttpClientRequest} getPort{ Params :  Returns : int} setMethod{ Params : HttpMethod Returns : HttpClientRequest} response{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : HttpClientRequest} response{ Params :  Returns : Future<HttpClientResponse>} resume{ Params :  Returns : HttpClientResponse} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientResponse} handler{ Params : Handler<Buffer> Returns : HttpClientResponse} pause{ Params :  Returns : HttpClientResponse} fetch{ Params : long Returns : HttpClientResponse} endHandler{ Params : Handler<Void> Returns : HttpClientResponse} version{ Params :  Returns : HttpVersion} statusCode{ Params :  Returns : int} statusMessage{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} getHeader{ Params : String Returns : String} getHeader{ Params : CharSequence Returns : String} getTrailer{ Params : String Returns : String} trailers{ Params :  Returns : MultiMap} cookies{ Params :  Returns : List<String>} customFrameHandler{ Params : Handler<HttpFrame> Returns : HttpClientResponse} netSocket{ Params :  Returns : NetSocket} request{ Params :  Returns : HttpClientRequest} streamPriorityHandler{ Params : Handler<StreamPriority> Returns : HttpClientResponse} body{ Params :  Returns : Future<Buffer>} end{ Params :  Returns : Future<Void>} testFollowRedirectEncodedParams{ Params :  Returns : void} testEventHandlersNotHoldingLock{ Params :  Returns : void} testEventHandlersNotHoldingLockOnClose{ Params :  Returns : void} testCloseHandlerWhenConnectionEnds{ Params :  Returns : void} testUseResponseAfterClose{ Params :  Returns : void} testSendFileAfterServerResponseClose{ Params :  Returns : void} testSendFileAsyncAfterServerResponseClose{ Params :  Returns : void} testAfterServerResponseClose{ Params : Handler<HttpServerResponse> Returns : void} testCloseHandlerNotCalledWhenConnectionClosedAfterEnd{ Params :  Returns : void} testCloseHandlerNotCalledWhenConnectionClosedAfterEnd{ Params : int Returns : void} testLogging{ Params :  Returns : TestLoggerFactory} testClientDecompressionError{ Params :  Returns : void} testContainsValueString{ Params :  Returns : void} testContainsValueStringIgnoreCase{ Params :  Returns : void} testContainsValueCharSequence{ Params :  Returns : void} testContainsValueCharSequenceIgnoreCase{ Params :  Returns : void} testBytesReadRequest{ Params :  Returns : void} testClientSynchronousConnectFailures{ Params :  Returns : void} testClientConnectInvalidPort{ Params :  Returns : void} setupFile{ Params : String,String Returns : File} generateQueryString{ Params : MultiMap,char Returns : String} testHttpClientRequestHeadersDontContainCROrLF{ Params :  Returns : void} testHttpServerResponseHeadersDontContainCROrLF{ Params :  Returns : void} testDisableIdleTimeoutInPool{ Params :  Returns : void} testKeepAliveTimeout{ Params :  Returns : void} testKeepAliveTimeout{ Params : HttpClientOptions,int Returns : void} testPoolNotExpiring1{ Params :  Returns : void} testPoolNotExpiring2{ Params :  Returns : void} testPoolNotExpiring{ Params : HttpClientOptions Returns : void} testHttpConnect{ Params :  Returns : void} testHttpConnect{ Params : RequestOptions,int Returns : void} testNetSocketConnectSuccessClientInitiatesCloseImmediately{ Params :  Returns : void} testNetSocketConnectSuccessServerInitiatesCloseImmediately{ Params :  Returns : void} testNetSocketConnectSuccessServerInitiatesCloseOnReply{ Params :  Returns : void} testNetSocketConnectSuccessClientInitiatesCloseOnReply{ Params :  Returns : void} testNetSocketConnectSuccess{ Params : Handler<NetSocket>,Handler<NetSocket> Returns : void} testClientNetSocketConnectReject{ Params :  Returns : void} testClientNetSocketConnectFailure{ Params :  Returns : void} testAccessNetSocketPendingResponseDataPaused{ Params :  Returns : void} testAccessNetSocketPendingResponseDataNotPaused{ Params :  Returns : void} testAccessNetSocketPendingResponseData{ Params : boolean Returns : void} testServerNetSocketCloseWithHandler{ Params :  Returns : void} testClientNetSocketCloseWithHandler{ Params :  Returns : void} testHttpInvalidConnectResponseEnded{ Params :  Returns : void} testHttpInvalidConnectResponseChunked{ Params :  Returns : void} testUpgradeTunnelNoSwitch{ Params :  Returns : void} testEndFromAnotherThread{ Params :  Returns : void} testServerResponseWriteSuccess{ Params :  Returns : void} testServerResponseEndSuccess{ Params :  Returns : void} testServerResponseWriteSuccess{ Params : BiConsumer<HttpServerResponse,Handler<AsyncResult<Void>>> Returns : void} testServerResponseWriteFailure{ Params :  Returns : void} testClientRequestWriteSuccess{ Params :  Returns : void} testClientRequestEnd1Success{ Params :  Returns : void} testClientRequestEnd2Success{ Params :  Returns : void} testClientRequestWriteSuccess{ Params : BiConsumer<HttpClientRequest,Handler<AsyncResult<Void>>> Returns : void} testClientRequestLazyWriteSuccess{ Params :  Returns : void} testClientRequestLazyEndSuccess{ Params :  Returns : void} testClientRequestLazyWriteSuccess{ Params : BiConsumer<HttpClientRequest,Handler<AsyncResult<Void>>> Returns : void} testClientResponseWriteFailure{ Params :  Returns : void} testServerRequestBodyFuture{ Params :  Returns : void} testServerRequestBodyFutureFail{ Params :  Returns : void} testResetClientRequestBeforeActualSend{ Params :  Returns : void} testResetFromNonVertxThread{ Params :  Returns : void} testResetClientRequestInProgress{ Params :  Returns : void} testResetClientRequestAwaitingResponse{ Params :  Returns : void} testResetClientRequestResponseInProgress{ Params :  Returns : void} testSimpleCookie{ Params :  Returns : void} testGetCookies{ Params :  Returns : void} testGetCookiesSameIdentity{ Params :  Returns : void} testGetCookiesSameIdentityRemoveOne{ Params :  Returns : void} testGetCookiesSameIdentityRemoveAll{ Params :  Returns : void} testGetCookiesSameIdentityReplace{ Params :  Returns : void} testCookiesChanged{ Params :  Returns : void} testCookieFields{ Params :  Returns : void} testCookieSameSiteFieldEncoding{ Params :  Returns : void} testCookieSameSiteFieldValidation{ Params :  Returns : void} testRemoveCookies{ Params :  Returns : void} testNoCookiesRemoveCookie{ Params :  Returns : void} testNoCookiesCookieCount{ Params :  Returns : void} testNoCookiesGetCookie{ Params :  Returns : void} testNoCookiesAddCookie{ Params :  Returns : void} testReplaceCookie{ Params :  Returns : void} testCookies{ Params : String,Consumer<HttpServerRequest>,Consumer<HttpClientResponse> Returns : void} testClientRequestFutureSetHandlerFromAnotherThread{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunks{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksChunked{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksWithHandler{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksChunkedWithHandler{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunks{ Params : boolean,BiFunction<HttpClientRequest,ReadStream<Buffer>,Future<HttpClientResponse>> Returns : void} testClientRequestFlowControlDifferentEventLoops{ Params :  Returns : void} testHAProxyProtocolIdleTimeout{ Params :  Returns : void} testHAProxyProtocolIdleTimeoutNotHappened{ Params :  Returns : void} testHAProxyProtocolVersion1TCP4{ Params :  Returns : void} testHAProxyProtocolVersion1TCP6{ Params :  Returns : void} testHAProxyProtocolVersion1Unknown{ Params :  Returns : void} testHAProxyProtocolVersion2TCP4{ Params :  Returns : void} testHAProxyProtocolVersion2TCP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixSocket{ Params :  Returns : void} testHAProxyProtocolVersion2Unknown{ Params :  Returns : void} testHAProxyProtocolAccepted{ Params : Buffer,SocketAddress,SocketAddress Returns : void} testHAProxyProtocolVersion2UDP4{ Params :  Returns : void} testHAProxyProtocolVersion2UDP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixDataGram{ Params :  Returns : void} testHAProxyProtocolRejected{ Params : Buffer Returns : void} testHAProxyProtocolEmptyHeader{ Params :  Returns : void} testHAProxyProtocolIllegalHeader{ Params :  Returns : void} testClientClose{ Params :  Returns : void} testHAProxyProtocolIllegal{ Params : Buffer Returns : void} assertAddresses{ Params : SocketAddress,SocketAddress Returns : void} testStickyContext{ Params :  Returns : void} testRetrySameHostOnCallbackFailure{ Params :  Returns : void} testHttpServerEndHandlerSuccess{ Params :  Returns : void} testHttpServerEndHandlerError{ Params :  Returns : void} testHttpClientEndHandlerSuccess{ Params :  Returns : void} testHttpClientEndHandlerFailure{ Params :  Returns : void} testServerResponseSend{ Params :  Returns : void} testServerResponseSend{ Params : boolean Returns : void} testConnectTimeout{ Params :  Returns : void} testResponseEndFutureCompletes_WithoutBody{ Params :  Returns : void} testResponseEndFutureCompletes_WithBody{ Params :  Returns : void} testResponseEndFutureCompletes_ChunkedWithoutBody{ Params :  Returns : void} testResponseEndFutureCompletes_ChunkedWithBody{ Params :  Returns : void} testResponseEndFutureCompletes{ Params : Function<HttpServerResponse,Future<Void>> Returns : void} shouldThrowISEIfSendingResponseFromHeadersEndHandler{ Params :  Returns : void} testInvalidPort{ Params :  Returns : void} ,setUp start start start start start start start ,generateQueryString ,,testCloseHandlerNotCalledWhenConnectionClosedAfterEnd ,,File ,,File ,VertxOptions ArrayList RequestOptions RequestOptions RequestOptions HttpServerOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions AtomicInteger AtomicInteger AtomicInteger StringBuilder AtomicInteger RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions HashMap HashMap ArrayList ArrayList ArrayList RequestOptions RequestOptions RequestOptions RequestOptions RuntimeException RuntimeException AtomicInteger AtomicInteger AtomicInteger RequestOptions RequestOptions AtomicReference AtomicBoolean RequestOptions RequestOptions RequestOptions RequestOptions AtomicBoolean RequestOptions AtomicBoolean RequestOptions AtomicReference RequestOptions AtomicReference AtomicBoolean AtomicBoolean RequestOptions RequestOptions Exception RequestOptions RequestOptions RequestOptions ServerSocket HttpServerOptions HttpServerOptions AtomicBoolean ArrayList CompletableFuture RequestOptions CompletableFuture AtomicBoolean RequestOptions AtomicBoolean AtomicBoolean RequestOptions AtomicBoolean AtomicBoolean RequestOptions AtomicInteger AtomicInteger CountDownLatch Thread HttpServerOptions HttpClientOptions MyVerticle DeploymentOptions AtomicBoolean CountDownLatch AtomicInteger AbstractVerticle DeploymentOptions AbstractVerticle RequestOptions DeploymentOptions AbstractVerticle AbstractVerticle DeploymentOptions AbstractVerticle DeploymentOptions AbstractVerticle HttpServerOptions ThreadLocal RequestOptions AtomicInteger RequestOptions AtomicInteger AtomicReference AtomicInteger RequestOptions AtomicInteger RequestOptions AtomicBoolean RequestOptions AtomicBoolean AtomicBoolean RequestOptions AtomicBoolean RequestOptions AtomicBoolean AtomicBoolean RequestOptions AtomicBoolean RequestOptions AtomicInteger AtomicInteger AtomicBoolean RequestOptions AtomicInteger AtomicInteger RequestOptions RequestOptions UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException MockReq UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException MockResp RequestOptions StringBuilder RequestOptions AtomicBoolean RequestOptions AtomicBoolean RequestOptions AtomicReference AtomicInteger AtomicInteger RuntimeException RequestOptions VertxOptions AddressResolverOptions HttpClientOptions AtomicInteger AtomicBoolean RequestOptions RequestOptions File BufferedWriter OutputStreamWriter FileOutputStream StringBuilder AtomicBoolean AtomicInteger AtomicLong RequestOptions CompletableFuture NetServerOptions NetClientOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions ArrayList Thread CompletableFuture RequestOptions RequestOptions RequestOptions CompletableFuture Thread CompletableFuture SimpleDateFormat CompletableFuture StringBuilder FakeStream RequestOptions Thread HAProxy HAProxy HAProxy RequestOptions HAProxy RequestOptions AtomicInteger ArrayList RequestOptions CountDownLatch HAProxy RequestOptions HashSet CountDownLatch RequestOptions ArrayList FakeStream ArrayList RequestOptions AtomicBoolean ,: 
vert.x-master,io.vertx.core.http,MyVerticle,1,0,0,0,0,false,HttpTestBase ,0 ,0 ,ctx: Context ,setUp{ Params :  Returns : void} testClientRequestArguments{ Params :  Returns : void} testListenSocketAddress{ Params :  Returns : void} testListenDomainSocketAddress{ Params :  Returns : void} testLowerCaseHeaders{ Params :  Returns : void} testServerActualPortWhenSet{ Params :  Returns : void} testServerActualPortWhenZero{ Params :  Returns : void} testServerActualPortWhenZeroPassedInListen{ Params :  Returns : void} testClientRequestOptionsSocketAddressOnly{ Params :  Returns : void} testInvalidAbsoluteURI{ Params :  Returns : void} testPutHeadersOnRequest{ Params :  Returns : void} testPutHeaderReplacesPreviousHeaders{ Params :  Returns : void} testSimpleGET{ Params :  Returns : void} testSimplePUT{ Params :  Returns : void} testSimplePOST{ Params :  Returns : void} testSimpleDELETE{ Params :  Returns : void} testSimpleHEAD{ Params :  Returns : void} testSimpleTRACE{ Params :  Returns : void} testSimpleCONNECT{ Params :  Returns : void} testSimpleOPTIONS{ Params :  Returns : void} testSimplePATCH{ Params :  Returns : void} testSimpleGETAbsolute{ Params :  Returns : void} testEmptyPathGETAbsolute{ Params :  Returns : void} testNoPathButQueryGETAbsolute{ Params :  Returns : void} testSimplePUTAbsolute{ Params :  Returns : void} testSimplePOSTAbsolute{ Params :  Returns : void} testSimpleDELETEAbsolute{ Params :  Returns : void} testSimpleHEADAbsolute{ Params :  Returns : void} testSimpleTRACEAbsolute{ Params :  Returns : void} testSimpleCONNECTAbsolute{ Params :  Returns : void} testSimpleOPTIONSAbsolute{ Params :  Returns : void} testSimplePATCHAbsolute{ Params :  Returns : void} testSimpleRequest{ Params : String,HttpMethod,Handler<HttpClientResponse> Returns : void} testSimpleRequest{ Params : String,HttpMethod,boolean,Handler<HttpClientResponse> Returns : void} testSimpleRequest{ Params : String,HttpMethod,RequestOptions,boolean,Handler<HttpClientResponse> Returns : void} testServerChaining{ Params :  Returns : void} testResponseEndHandlers1{ Params :  Returns : void} testResponseEndHandlers2{ Params :  Returns : void} testResponseEndHandlersChunkedResponse{ Params :  Returns : void} testResponseEndHandlersSendFile{ Params :  Returns : void} testAbsoluteURI{ Params :  Returns : void} testRelativeURI{ Params :  Returns : void} testAbsoluteURIWithHttpSchemaInQuery{ Params :  Returns : void} testRelativeURIWithHttpSchemaInQuery{ Params :  Returns : void} testAbsoluteURIEmptyPath{ Params :  Returns : void} testEmptyURI{ Params :  Returns : void} testURIAndPath{ Params : String,String,String Returns : void} testParamUmlauteDecoding{ Params :  Returns : void} testParamPlusDecoding{ Params :  Returns : void} testParamPercentDecoding{ Params :  Returns : void} testParamSpaceDecoding{ Params :  Returns : void} testParamNormalDecoding{ Params :  Returns : void} testParamAltogetherDecoding{ Params :  Returns : void} testParamDecoding{ Params : String Returns : void} testParamsAmpersand{ Params :  Returns : void} testParamsSemiColon{ Params :  Returns : void} testParams{ Params : char Returns : void} testNoParams{ Params :  Returns : void} testOverrideParamsCharset{ Params :  Returns : void} testGetParamDefaultValue{ Params :  Returns : void} testMissingContentTypeMultipartRequest{ Params :  Returns : void} testInvalidContentTypeMultipartRequest{ Params :  Returns : void} testInvalidMethodMultipartRequest{ Params :  Returns : void} testInvalidMultipartRequest{ Params : String,HttpMethod Returns : void} testDefaultRequestHeaders{ Params :  Returns : void} sendAndAwait{ Params : RequestOptions Returns : void} sendAndAwait{ Params : RequestOptions,Handler<HttpClientRequest> Returns : void} testRequestHeadersWithCharSequence{ Params :  Returns : void} testRequestHeadersPutAll{ Params :  Returns : void} testRequestHeadersIndividually{ Params :  Returns : void} testRequestHeaders{ Params : boolean Returns : void} testResponseHeadersPutAll{ Params :  Returns : void} testResponseHeadersIndividually{ Params :  Returns : void} testResponseHeaders{ Params : boolean Returns : void} testResponseHeadersWithCharSequence{ Params :  Returns : void} testResponseMultipleSetCookieInHeader{ Params :  Returns : void} testResponseMultipleSetCookieInTrailer{ Params :  Returns : void} testResponseMultipleSetCookieInHeaderAndTrailer{ Params :  Returns : void} testResponseMultipleSetCookie{ Params : boolean,boolean Returns : void} testUseRequestAfterComplete{ Params :  Returns : void} testRequestBodyBufferAtEnd{ Params :  Returns : void} testRequestBodyStringDefaultEncodingAtEnd{ Params :  Returns : void} testRequestBodyStringUTF8AtEnd{ Params :  Returns : void} testRequestBodyStringUTF16AtEnd{ Params :  Returns : void} testRequestBodyStringAtEnd{ Params : String Returns : void} testRequestBodyWriteChunked{ Params :  Returns : void} testRequestBodyWriteNonChunked{ Params :  Returns : void} testRequestBodyWrite{ Params : boolean Returns : void} testRequestBodyWriteStringChunkedDefaultEncoding{ Params :  Returns : void} testRequestBodyWriteStringChunkedUTF8{ Params :  Returns : void} testRequestBodyWriteStringChunkedUTF16{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedDefaultEncoding{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedUTF8{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedUTF16{ Params :  Returns : void} testRequestBodyWriteString{ Params : boolean,String Returns : void} testRequestWrite{ Params :  Returns : void} testClientExceptionHandlerCalledWhenServerTerminatesConnection{ Params :  Returns : void} testClientExceptionHandlerCalledWhenServerTerminatesConnectionAfterPartialResponse{ Params :  Returns : void} testContextExceptionHandlerCalledWhenExceptionOnDataHandler{ Params :  Returns : void} testClientExceptionHandlerCalledWhenExceptionOnBodyHandler{ Params :  Returns : void} testNoExceptionHandlerCalledWhenResponseEnded{ Params :  Returns : void} testServerExceptionHandlerOnClose{ Params :  Returns : void} testClientRequestExceptionHandlerCalledWhenConnectionClosed{ Params :  Returns : void} testClientResponseExceptionHandlerCalledWhenConnectionClosed{ Params :  Returns : void} testClientRequestExceptionHandlerCalledWhenRequestEnded{ Params :  Returns : void} testDefaultStatus{ Params :  Returns : void} testDefaultOther{ Params :  Returns : void} testOverrideStatusMessage{ Params :  Returns : void} testOverrideDefaultStatusMessage{ Params :  Returns : void} testStatusCode{ Params : int,String Returns : void} testResponseTrailersPutAll{ Params :  Returns : void} testResponseTrailersPutIndividually{ Params :  Returns : void} testResponseTrailers{ Params : boolean Returns : void} testResponseNoTrailers{ Params :  Returns : void} testUseAfterServerResponseHeadSent{ Params :  Returns : void} testUseAfterServerResponseSent{ Params :  Returns : void} testSetInvalidStatusMessage{ Params :  Returns : void} testResponseBodyBufferAtEnd{ Params :  Returns : void} testResponseBodyWriteChunked{ Params :  Returns : void} testResponseBodyWriteNonChunked{ Params :  Returns : void} testResponseBodyWrite{ Params : boolean Returns : void} testResponseBodyWriteStringChunkedDefaultEncoding{ Params :  Returns : void} testResponseBodyWriteStringChunkedUTF8{ Params :  Returns : void} testResponseBodyWriteStringChunkedUTF16{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedDefaultEncoding{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedUTF8{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedUTF16{ Params :  Returns : void} testResponseBodyWriteString{ Params : boolean,String Returns : void} testResponseWrite{ Params :  Returns : void} testSendFile{ Params :  Returns : void} testSendFileWithHandler{ Params :  Returns : void} sendFile{ Params : String,String,boolean,Supplier<Future<HttpClientRequest>> Returns : void} testSendNonExistingFile{ Params :  Returns : void} testSendFileOverrideHeaders{ Params :  Returns : void} testSendFileNotFound{ Params :  Returns : void} testSendFileDirectoryWithHandler{ Params :  Returns : void} testSendOpenRangeFileFromClasspath{ Params :  Returns : void} testSendRangeFileFromClasspath{ Params :  Returns : void} test100ContinueHandledAutomatically{ Params :  Returns : void} test100ContinueHandledManually{ Params :  Returns : void} test100ContinueRejectedManually{ Params :  Returns : void} test100ContinueTimeout{ Params :  Returns : void} test103EarlyHints{ Params :  Returns : void} testClientDrainHandler{ Params :  Returns : void} pausingServer{ Params : Consumer<Promise<Void>> Returns : void} testServerDrainHandler{ Params :  Returns : void} drainingServer{ Params : Consumer<Future<Void>> Returns : void} testRequestTimesOutWhenIndicatedPeriodExpiresWithoutAResponseFromRemoteServer{ Params :  Returns : void} testRequestTimeoutCanceledWhenRequestHasAnOtherError{ Params :  Returns : void} testRequestTimeoutCanceledWhenRequestEndsNormally{ Params :  Returns : void} testHttpClientRequestTimeoutResetsTheConnection{ Params :  Returns : void} testConnectInvalidPort{ Params :  Returns : void} testConnectInvalidHost{ Params :  Returns : void} testSetHandlersAfterListening{ Params :  Returns : void} testListenNoHandlers{ Params :  Returns : void} testListenTwice{ Params :  Returns : void} testHeadCanSetContentLength{ Params :  Returns : void} testHeadDoesNotSetAutomaticallySetContentLengthHeader{ Params :  Returns : void} testHeadAllowsContentLengthHeader{ Params :  Returns : void} testHeadRemovesTransferEncodingHeader{ Params :  Returns : void} testNoContentRemovesContentLengthHeader{ Params :  Returns : void} testNoContentRemovesTransferEncodingHeader{ Params :  Returns : void} testResetContentSetsContentLengthHeader{ Params :  Returns : void} testResetContentRemovesTransferEncodingHeader{ Params :  Returns : void} testNotModifiedDoesNotSetAutomaticallySetContentLengthHeader{ Params :  Returns : void} testNotModifiedAllowsContentLengthHeader{ Params :  Returns : void} testNotModifiedRemovesTransferEncodingHeader{ Params :  Returns : void} test1xxRemovesContentLengthHeader{ Params :  Returns : void} test1xxRemovesTransferEncodingHeader{ Params :  Returns : void} checkEmptyHttpResponse{ Params : HttpMethod,int,MultiMap Returns : MultiMap} testHeadHasNoContentLengthByDefault{ Params :  Returns : void} testHeadButCanSetContentLength{ Params :  Returns : void} testRemoteAddress{ Params :  Returns : void} testGetAbsoluteURI{ Params :  Returns : void} testListenInvalidPort{ Params :  Returns : void} testListenInvalidHost{ Params :  Returns : void} testPauseResumeClientResponseWontCallEndHandlePrematurely{ Params :  Returns : void} testPauseClientResponse{ Params :  Returns : void} testDeliverPausedBufferWhenResume{ Params :  Returns : void} testDeliverPausedBufferWhenResumeOnOtherThread{ Params :  Returns : void} testDeliverPausedBufferWhenResume{ Params : Consumer<Runnable> Returns : void} testClearPausedBuffersWhenResponseEnds{ Params :  Returns : void} testPausedHttpServerRequest{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk1{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk2{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk{ Params : boolean Returns : void} testHttpClientResponsePausedDuringLastChunk1{ Params :  Returns : void} testHttpClientResponsePausedDuringLastChunk2{ Params :  Returns : void} testHttpClientResponsePausedDuringLastChunk{ Params : boolean Returns : void} testHostHeaderOverridePossible{ Params :  Returns : void} testResponseBodyWriteFixedString{ Params :  Returns : void} testResponseDataTimeout{ Params :  Returns : void} testClientMultiThreaded{ Params :  Returns : void} run{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} testInVerticle{ Params : boolean Returns : void} start{ Params :  Returns : void} testWorkerServer{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testInWorker{ Params :  Returns : void} start{ Params :  Returns : void} testClientReadStreamInWorker{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testServerReadStreamInWorker{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleServerClose{ Params :  Returns : void} testRequestEnded{ Params :  Returns : void} testRequestEndedNoEndHandler{ Params :  Returns : void} testAbsoluteURIServer{ Params :  Returns : void} testDumpManyRequestsOnQueue{ Params :  Returns : void} testOtherMethodRequest{ Params :  Returns : void} testClientGlobalConnectionHandler{ Params :  Returns : void} testServerConnectionHandler{ Params :  Returns : void} testServerConnectionHandlerClose{ Params :  Returns : void} testClientConnectionClose{ Params :  Returns : void} testServerConnectionClose{ Params :  Returns : void} testNoLogging{ Params :  Returns : void} testServerLogging{ Params :  Returns : void} testClientLogging{ Params :  Returns : void} testClientLocalAddress{ Params :  Returns : void} testFollowRedirectGetOn301{ Params :  Returns : void} testFollowRedirectPostOn301{ Params :  Returns : void} testFollowRedirectPutOn301{ Params :  Returns : void} testFollowRedirectGetOn302{ Params :  Returns : void} testFollowRedirectPostOn302{ Params :  Returns : void} testFollowRedirectPutOn302{ Params :  Returns : void} testFollowRedirectGetOn303{ Params :  Returns : void} testFollowRedirectPostOn303{ Params :  Returns : void} testFollowRedirectPutOn303{ Params :  Returns : void} testFollowRedirectNotOn304{ Params :  Returns : void} testFollowRedirectGetOn307{ Params :  Returns : void} testFollowRedirectPostOn307{ Params :  Returns : void} testFollowRedirectPutOn307{ Params :  Returns : void} testFollowRedirectWithRelativeLocation{ Params :  Returns : void} testFollowRedirectGetOn308{ Params :  Returns : void} testFollowRedirectPostOn308{ Params :  Returns : void} testFollowRedirectPutOn308{ Params :  Returns : void} testFollowRedirect{ Params : HttpMethod,HttpMethod,int,int,int,String,String Returns : void} testFollowRedirectWithBody{ Params :  Returns : void} testFollowRedirectWithPaddedBody{ Params :  Returns : void} testFollowRedirectWithBody{ Params : Function<Buffer,Buffer> Returns : void} testFollowRedirectHappensAfterResponseIsReceived{ Params :  Returns : void} testFollowRedirectWithChunkedBody{ Params :  Returns : void} testFollowRedirectWithRequestNotEnded{ Params :  Returns : void} testFollowRedirectWithRequestNotEndedFailing{ Params :  Returns : void} testFollowRedirectWithRequestNotEnded{ Params : boolean Returns : void} testFollowRedirectSendHeadThenBody{ Params :  Returns : void} testFollowRedirectLimit{ Params :  Returns : void} testFollowRedirectPropagatesTimeout{ Params :  Returns : void} testFollowRedirectHost{ Params :  Returns : void} testFollowRedirectWithCustomHandler{ Params :  Returns : void} testDefaultRedirectHandler{ Params :  Returns : void} testFoo{ Params : String,String Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientRequest} write{ Params : Buffer Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : HttpClientRequest} drainHandler{ Params : Handler<Void> Returns : HttpClientRequest} setFollowRedirects{ Params : boolean Returns : HttpClientRequest} setMaxRedirects{ Params : int Returns : HttpClientRequest} setChunked{ Params : boolean Returns : HttpClientRequest} isChunked{ Params :  Returns : boolean} getMethod{ Params :  Returns : HttpMethod} absoluteURI{ Params :  Returns : String} version{ Params :  Returns : HttpVersion} getURI{ Params :  Returns : String} setURI{ Params : String Returns : HttpClientRequest} path{ Params :  Returns : String} query{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} putHeader{ Params : String,String Returns : HttpClientRequest} putHeader{ Params : CharSequence,CharSequence Returns : HttpClientRequest} putHeader{ Params : String,Iterable<String> Returns : HttpClientRequest} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : HttpClientRequest} write{ Params : String Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} write{ Params : Buffer,Handler<AsyncResult<Void>> Returns : void} write{ Params : String,Handler<AsyncResult<Void>> Returns : void} write{ Params : String,String,Handler<AsyncResult<Void>> Returns : void} continueHandler{ Params : Handler<Void> Returns : HttpClientRequest} earlyHintsHandler{ Params : Handler<MultiMap> Returns : HttpClientRequest} sendHead{ Params :  Returns : Future<Void>} sendHead{ Params : Handler<AsyncResult<Void>> Returns : HttpClientRequest} connect{ Params :  Returns : Future<HttpClientResponse>} connect{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : void} end{ Params : String Returns : Future<Void>} end{ Params : String,String Returns : Future<Void>} end{ Params : String,Handler<AsyncResult<Void>> Returns : void} end{ Params : String,String,Handler<AsyncResult<Void>> Returns : void} end{ Params : Handler<AsyncResult<Void>> Returns : void} end{ Params :  Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params : Buffer,Handler<AsyncResult<Void>> Returns : void} setTimeout{ Params : long Returns : HttpClientRequest} pushHandler{ Params : Handler<HttpClientRequest> Returns : HttpClientRequest} reset{ Params : long Returns : boolean} reset{ Params : long,Throwable Returns : boolean} connection{ Params :  Returns : HttpConnection} writeCustomFrame{ Params : int,int,Buffer Returns : HttpClientRequest} writeQueueFull{ Params :  Returns : boolean} getStreamPriority{ Params :  Returns : StreamPriority} onComplete{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : HttpClientRequest} isComplete{ Params :  Returns : boolean} result{ Params :  Returns : HttpClientResponse} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} compose{ Params : Function<HttpClientResponse,Future<U>>,Function<Throwable,Future<U>> Returns : Future<U>} map{ Params : Function<HttpClientResponse,U> Returns : Future<U>} map{ Params : V Returns : Future<V>} otherwise{ Params : Function<Throwable,HttpClientResponse> Returns : Future<HttpClientResponse>} otherwise{ Params : HttpClientResponse Returns : Future<HttpClientResponse>} setHost{ Params : String Returns : HttpClientRequest} getHost{ Params :  Returns : String} setPort{ Params : int Returns : HttpClientRequest} getPort{ Params :  Returns : int} setMethod{ Params : HttpMethod Returns : HttpClientRequest} response{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : HttpClientRequest} response{ Params :  Returns : Future<HttpClientResponse>} resume{ Params :  Returns : HttpClientResponse} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientResponse} handler{ Params : Handler<Buffer> Returns : HttpClientResponse} pause{ Params :  Returns : HttpClientResponse} fetch{ Params : long Returns : HttpClientResponse} endHandler{ Params : Handler<Void> Returns : HttpClientResponse} version{ Params :  Returns : HttpVersion} statusCode{ Params :  Returns : int} statusMessage{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} getHeader{ Params : String Returns : String} getHeader{ Params : CharSequence Returns : String} getTrailer{ Params : String Returns : String} trailers{ Params :  Returns : MultiMap} cookies{ Params :  Returns : List<String>} customFrameHandler{ Params : Handler<HttpFrame> Returns : HttpClientResponse} netSocket{ Params :  Returns : NetSocket} request{ Params :  Returns : HttpClientRequest} streamPriorityHandler{ Params : Handler<StreamPriority> Returns : HttpClientResponse} body{ Params :  Returns : Future<Buffer>} end{ Params :  Returns : Future<Void>} testFollowRedirectEncodedParams{ Params :  Returns : void} testEventHandlersNotHoldingLock{ Params :  Returns : void} testEventHandlersNotHoldingLockOnClose{ Params :  Returns : void} testCloseHandlerWhenConnectionEnds{ Params :  Returns : void} testUseResponseAfterClose{ Params :  Returns : void} testSendFileAfterServerResponseClose{ Params :  Returns : void} testSendFileAsyncAfterServerResponseClose{ Params :  Returns : void} testAfterServerResponseClose{ Params : Handler<HttpServerResponse> Returns : void} testCloseHandlerNotCalledWhenConnectionClosedAfterEnd{ Params :  Returns : void} testCloseHandlerNotCalledWhenConnectionClosedAfterEnd{ Params : int Returns : void} testLogging{ Params :  Returns : TestLoggerFactory} testClientDecompressionError{ Params :  Returns : void} testContainsValueString{ Params :  Returns : void} testContainsValueStringIgnoreCase{ Params :  Returns : void} testContainsValueCharSequence{ Params :  Returns : void} testContainsValueCharSequenceIgnoreCase{ Params :  Returns : void} testBytesReadRequest{ Params :  Returns : void} testClientSynchronousConnectFailures{ Params :  Returns : void} testClientConnectInvalidPort{ Params :  Returns : void} setupFile{ Params : String,String Returns : File} generateQueryString{ Params : MultiMap,char Returns : String} testHttpClientRequestHeadersDontContainCROrLF{ Params :  Returns : void} testHttpServerResponseHeadersDontContainCROrLF{ Params :  Returns : void} testDisableIdleTimeoutInPool{ Params :  Returns : void} testKeepAliveTimeout{ Params :  Returns : void} testKeepAliveTimeout{ Params : HttpClientOptions,int Returns : void} testPoolNotExpiring1{ Params :  Returns : void} testPoolNotExpiring2{ Params :  Returns : void} testPoolNotExpiring{ Params : HttpClientOptions Returns : void} testHttpConnect{ Params :  Returns : void} testHttpConnect{ Params : RequestOptions,int Returns : void} testNetSocketConnectSuccessClientInitiatesCloseImmediately{ Params :  Returns : void} testNetSocketConnectSuccessServerInitiatesCloseImmediately{ Params :  Returns : void} testNetSocketConnectSuccessServerInitiatesCloseOnReply{ Params :  Returns : void} testNetSocketConnectSuccessClientInitiatesCloseOnReply{ Params :  Returns : void} testNetSocketConnectSuccess{ Params : Handler<NetSocket>,Handler<NetSocket> Returns : void} testClientNetSocketConnectReject{ Params :  Returns : void} testClientNetSocketConnectFailure{ Params :  Returns : void} testAccessNetSocketPendingResponseDataPaused{ Params :  Returns : void} testAccessNetSocketPendingResponseDataNotPaused{ Params :  Returns : void} testAccessNetSocketPendingResponseData{ Params : boolean Returns : void} testServerNetSocketCloseWithHandler{ Params :  Returns : void} testClientNetSocketCloseWithHandler{ Params :  Returns : void} testHttpInvalidConnectResponseEnded{ Params :  Returns : void} testHttpInvalidConnectResponseChunked{ Params :  Returns : void} testUpgradeTunnelNoSwitch{ Params :  Returns : void} testEndFromAnotherThread{ Params :  Returns : void} testServerResponseWriteSuccess{ Params :  Returns : void} testServerResponseEndSuccess{ Params :  Returns : void} testServerResponseWriteSuccess{ Params : BiConsumer<HttpServerResponse,Handler<AsyncResult<Void>>> Returns : void} testServerResponseWriteFailure{ Params :  Returns : void} testClientRequestWriteSuccess{ Params :  Returns : void} testClientRequestEnd1Success{ Params :  Returns : void} testClientRequestEnd2Success{ Params :  Returns : void} testClientRequestWriteSuccess{ Params : BiConsumer<HttpClientRequest,Handler<AsyncResult<Void>>> Returns : void} testClientRequestLazyWriteSuccess{ Params :  Returns : void} testClientRequestLazyEndSuccess{ Params :  Returns : void} testClientRequestLazyWriteSuccess{ Params : BiConsumer<HttpClientRequest,Handler<AsyncResult<Void>>> Returns : void} testClientResponseWriteFailure{ Params :  Returns : void} testServerRequestBodyFuture{ Params :  Returns : void} testServerRequestBodyFutureFail{ Params :  Returns : void} testResetClientRequestBeforeActualSend{ Params :  Returns : void} testResetFromNonVertxThread{ Params :  Returns : void} testResetClientRequestInProgress{ Params :  Returns : void} testResetClientRequestAwaitingResponse{ Params :  Returns : void} testResetClientRequestResponseInProgress{ Params :  Returns : void} testSimpleCookie{ Params :  Returns : void} testGetCookies{ Params :  Returns : void} testGetCookiesSameIdentity{ Params :  Returns : void} testGetCookiesSameIdentityRemoveOne{ Params :  Returns : void} testGetCookiesSameIdentityRemoveAll{ Params :  Returns : void} testGetCookiesSameIdentityReplace{ Params :  Returns : void} testCookiesChanged{ Params :  Returns : void} testCookieFields{ Params :  Returns : void} testCookieSameSiteFieldEncoding{ Params :  Returns : void} testCookieSameSiteFieldValidation{ Params :  Returns : void} testRemoveCookies{ Params :  Returns : void} testNoCookiesRemoveCookie{ Params :  Returns : void} testNoCookiesCookieCount{ Params :  Returns : void} testNoCookiesGetCookie{ Params :  Returns : void} testNoCookiesAddCookie{ Params :  Returns : void} testReplaceCookie{ Params :  Returns : void} testCookies{ Params : String,Consumer<HttpServerRequest>,Consumer<HttpClientResponse> Returns : void} testClientRequestFutureSetHandlerFromAnotherThread{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunks{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksChunked{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksWithHandler{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksChunkedWithHandler{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunks{ Params : boolean,BiFunction<HttpClientRequest,ReadStream<Buffer>,Future<HttpClientResponse>> Returns : void} testClientRequestFlowControlDifferentEventLoops{ Params :  Returns : void} testHAProxyProtocolIdleTimeout{ Params :  Returns : void} testHAProxyProtocolIdleTimeoutNotHappened{ Params :  Returns : void} testHAProxyProtocolVersion1TCP4{ Params :  Returns : void} testHAProxyProtocolVersion1TCP6{ Params :  Returns : void} testHAProxyProtocolVersion1Unknown{ Params :  Returns : void} testHAProxyProtocolVersion2TCP4{ Params :  Returns : void} testHAProxyProtocolVersion2TCP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixSocket{ Params :  Returns : void} testHAProxyProtocolVersion2Unknown{ Params :  Returns : void} testHAProxyProtocolAccepted{ Params : Buffer,SocketAddress,SocketAddress Returns : void} testHAProxyProtocolVersion2UDP4{ Params :  Returns : void} testHAProxyProtocolVersion2UDP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixDataGram{ Params :  Returns : void} testHAProxyProtocolRejected{ Params : Buffer Returns : void} testHAProxyProtocolEmptyHeader{ Params :  Returns : void} testHAProxyProtocolIllegalHeader{ Params :  Returns : void} testClientClose{ Params :  Returns : void} testHAProxyProtocolIllegal{ Params : Buffer Returns : void} assertAddresses{ Params : SocketAddress,SocketAddress Returns : void} testStickyContext{ Params :  Returns : void} testRetrySameHostOnCallbackFailure{ Params :  Returns : void} testHttpServerEndHandlerSuccess{ Params :  Returns : void} testHttpServerEndHandlerError{ Params :  Returns : void} testHttpClientEndHandlerSuccess{ Params :  Returns : void} testHttpClientEndHandlerFailure{ Params :  Returns : void} testServerResponseSend{ Params :  Returns : void} testServerResponseSend{ Params : boolean Returns : void} testConnectTimeout{ Params :  Returns : void} testResponseEndFutureCompletes_WithoutBody{ Params :  Returns : void} testResponseEndFutureCompletes_WithBody{ Params :  Returns : void} testResponseEndFutureCompletes_ChunkedWithoutBody{ Params :  Returns : void} testResponseEndFutureCompletes_ChunkedWithBody{ Params :  Returns : void} testResponseEndFutureCompletes{ Params : Function<HttpServerResponse,Future<Void>> Returns : void} shouldThrowISEIfSendingResponseFromHeadersEndHandler{ Params :  Returns : void} testInvalidPort{ Params :  Returns : void} ,setUp start start start start start start start ,generateQueryString ,,testCloseHandlerNotCalledWhenConnectionClosedAfterEnd ,,,,,HttpServerOptions HttpClientOptions ,: 
vert.x-master,io.vertx.core.http,MockReq,1,0,0,0,0,false,HttpTestBase ,0 ,0 ,,setUp{ Params :  Returns : void} testClientRequestArguments{ Params :  Returns : void} testListenSocketAddress{ Params :  Returns : void} testListenDomainSocketAddress{ Params :  Returns : void} testLowerCaseHeaders{ Params :  Returns : void} testServerActualPortWhenSet{ Params :  Returns : void} testServerActualPortWhenZero{ Params :  Returns : void} testServerActualPortWhenZeroPassedInListen{ Params :  Returns : void} testClientRequestOptionsSocketAddressOnly{ Params :  Returns : void} testInvalidAbsoluteURI{ Params :  Returns : void} testPutHeadersOnRequest{ Params :  Returns : void} testPutHeaderReplacesPreviousHeaders{ Params :  Returns : void} testSimpleGET{ Params :  Returns : void} testSimplePUT{ Params :  Returns : void} testSimplePOST{ Params :  Returns : void} testSimpleDELETE{ Params :  Returns : void} testSimpleHEAD{ Params :  Returns : void} testSimpleTRACE{ Params :  Returns : void} testSimpleCONNECT{ Params :  Returns : void} testSimpleOPTIONS{ Params :  Returns : void} testSimplePATCH{ Params :  Returns : void} testSimpleGETAbsolute{ Params :  Returns : void} testEmptyPathGETAbsolute{ Params :  Returns : void} testNoPathButQueryGETAbsolute{ Params :  Returns : void} testSimplePUTAbsolute{ Params :  Returns : void} testSimplePOSTAbsolute{ Params :  Returns : void} testSimpleDELETEAbsolute{ Params :  Returns : void} testSimpleHEADAbsolute{ Params :  Returns : void} testSimpleTRACEAbsolute{ Params :  Returns : void} testSimpleCONNECTAbsolute{ Params :  Returns : void} testSimpleOPTIONSAbsolute{ Params :  Returns : void} testSimplePATCHAbsolute{ Params :  Returns : void} testSimpleRequest{ Params : String,HttpMethod,Handler<HttpClientResponse> Returns : void} testSimpleRequest{ Params : String,HttpMethod,boolean,Handler<HttpClientResponse> Returns : void} testSimpleRequest{ Params : String,HttpMethod,RequestOptions,boolean,Handler<HttpClientResponse> Returns : void} testServerChaining{ Params :  Returns : void} testResponseEndHandlers1{ Params :  Returns : void} testResponseEndHandlers2{ Params :  Returns : void} testResponseEndHandlersChunkedResponse{ Params :  Returns : void} testResponseEndHandlersSendFile{ Params :  Returns : void} testAbsoluteURI{ Params :  Returns : void} testRelativeURI{ Params :  Returns : void} testAbsoluteURIWithHttpSchemaInQuery{ Params :  Returns : void} testRelativeURIWithHttpSchemaInQuery{ Params :  Returns : void} testAbsoluteURIEmptyPath{ Params :  Returns : void} testEmptyURI{ Params :  Returns : void} testURIAndPath{ Params : String,String,String Returns : void} testParamUmlauteDecoding{ Params :  Returns : void} testParamPlusDecoding{ Params :  Returns : void} testParamPercentDecoding{ Params :  Returns : void} testParamSpaceDecoding{ Params :  Returns : void} testParamNormalDecoding{ Params :  Returns : void} testParamAltogetherDecoding{ Params :  Returns : void} testParamDecoding{ Params : String Returns : void} testParamsAmpersand{ Params :  Returns : void} testParamsSemiColon{ Params :  Returns : void} testParams{ Params : char Returns : void} testNoParams{ Params :  Returns : void} testOverrideParamsCharset{ Params :  Returns : void} testGetParamDefaultValue{ Params :  Returns : void} testMissingContentTypeMultipartRequest{ Params :  Returns : void} testInvalidContentTypeMultipartRequest{ Params :  Returns : void} testInvalidMethodMultipartRequest{ Params :  Returns : void} testInvalidMultipartRequest{ Params : String,HttpMethod Returns : void} testDefaultRequestHeaders{ Params :  Returns : void} sendAndAwait{ Params : RequestOptions Returns : void} sendAndAwait{ Params : RequestOptions,Handler<HttpClientRequest> Returns : void} testRequestHeadersWithCharSequence{ Params :  Returns : void} testRequestHeadersPutAll{ Params :  Returns : void} testRequestHeadersIndividually{ Params :  Returns : void} testRequestHeaders{ Params : boolean Returns : void} testResponseHeadersPutAll{ Params :  Returns : void} testResponseHeadersIndividually{ Params :  Returns : void} testResponseHeaders{ Params : boolean Returns : void} testResponseHeadersWithCharSequence{ Params :  Returns : void} testResponseMultipleSetCookieInHeader{ Params :  Returns : void} testResponseMultipleSetCookieInTrailer{ Params :  Returns : void} testResponseMultipleSetCookieInHeaderAndTrailer{ Params :  Returns : void} testResponseMultipleSetCookie{ Params : boolean,boolean Returns : void} testUseRequestAfterComplete{ Params :  Returns : void} testRequestBodyBufferAtEnd{ Params :  Returns : void} testRequestBodyStringDefaultEncodingAtEnd{ Params :  Returns : void} testRequestBodyStringUTF8AtEnd{ Params :  Returns : void} testRequestBodyStringUTF16AtEnd{ Params :  Returns : void} testRequestBodyStringAtEnd{ Params : String Returns : void} testRequestBodyWriteChunked{ Params :  Returns : void} testRequestBodyWriteNonChunked{ Params :  Returns : void} testRequestBodyWrite{ Params : boolean Returns : void} testRequestBodyWriteStringChunkedDefaultEncoding{ Params :  Returns : void} testRequestBodyWriteStringChunkedUTF8{ Params :  Returns : void} testRequestBodyWriteStringChunkedUTF16{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedDefaultEncoding{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedUTF8{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedUTF16{ Params :  Returns : void} testRequestBodyWriteString{ Params : boolean,String Returns : void} testRequestWrite{ Params :  Returns : void} testClientExceptionHandlerCalledWhenServerTerminatesConnection{ Params :  Returns : void} testClientExceptionHandlerCalledWhenServerTerminatesConnectionAfterPartialResponse{ Params :  Returns : void} testContextExceptionHandlerCalledWhenExceptionOnDataHandler{ Params :  Returns : void} testClientExceptionHandlerCalledWhenExceptionOnBodyHandler{ Params :  Returns : void} testNoExceptionHandlerCalledWhenResponseEnded{ Params :  Returns : void} testServerExceptionHandlerOnClose{ Params :  Returns : void} testClientRequestExceptionHandlerCalledWhenConnectionClosed{ Params :  Returns : void} testClientResponseExceptionHandlerCalledWhenConnectionClosed{ Params :  Returns : void} testClientRequestExceptionHandlerCalledWhenRequestEnded{ Params :  Returns : void} testDefaultStatus{ Params :  Returns : void} testDefaultOther{ Params :  Returns : void} testOverrideStatusMessage{ Params :  Returns : void} testOverrideDefaultStatusMessage{ Params :  Returns : void} testStatusCode{ Params : int,String Returns : void} testResponseTrailersPutAll{ Params :  Returns : void} testResponseTrailersPutIndividually{ Params :  Returns : void} testResponseTrailers{ Params : boolean Returns : void} testResponseNoTrailers{ Params :  Returns : void} testUseAfterServerResponseHeadSent{ Params :  Returns : void} testUseAfterServerResponseSent{ Params :  Returns : void} testSetInvalidStatusMessage{ Params :  Returns : void} testResponseBodyBufferAtEnd{ Params :  Returns : void} testResponseBodyWriteChunked{ Params :  Returns : void} testResponseBodyWriteNonChunked{ Params :  Returns : void} testResponseBodyWrite{ Params : boolean Returns : void} testResponseBodyWriteStringChunkedDefaultEncoding{ Params :  Returns : void} testResponseBodyWriteStringChunkedUTF8{ Params :  Returns : void} testResponseBodyWriteStringChunkedUTF16{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedDefaultEncoding{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedUTF8{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedUTF16{ Params :  Returns : void} testResponseBodyWriteString{ Params : boolean,String Returns : void} testResponseWrite{ Params :  Returns : void} testSendFile{ Params :  Returns : void} testSendFileWithHandler{ Params :  Returns : void} sendFile{ Params : String,String,boolean,Supplier<Future<HttpClientRequest>> Returns : void} testSendNonExistingFile{ Params :  Returns : void} testSendFileOverrideHeaders{ Params :  Returns : void} testSendFileNotFound{ Params :  Returns : void} testSendFileDirectoryWithHandler{ Params :  Returns : void} testSendOpenRangeFileFromClasspath{ Params :  Returns : void} testSendRangeFileFromClasspath{ Params :  Returns : void} test100ContinueHandledAutomatically{ Params :  Returns : void} test100ContinueHandledManually{ Params :  Returns : void} test100ContinueRejectedManually{ Params :  Returns : void} test100ContinueTimeout{ Params :  Returns : void} test103EarlyHints{ Params :  Returns : void} testClientDrainHandler{ Params :  Returns : void} pausingServer{ Params : Consumer<Promise<Void>> Returns : void} testServerDrainHandler{ Params :  Returns : void} drainingServer{ Params : Consumer<Future<Void>> Returns : void} testRequestTimesOutWhenIndicatedPeriodExpiresWithoutAResponseFromRemoteServer{ Params :  Returns : void} testRequestTimeoutCanceledWhenRequestHasAnOtherError{ Params :  Returns : void} testRequestTimeoutCanceledWhenRequestEndsNormally{ Params :  Returns : void} testHttpClientRequestTimeoutResetsTheConnection{ Params :  Returns : void} testConnectInvalidPort{ Params :  Returns : void} testConnectInvalidHost{ Params :  Returns : void} testSetHandlersAfterListening{ Params :  Returns : void} testListenNoHandlers{ Params :  Returns : void} testListenTwice{ Params :  Returns : void} testHeadCanSetContentLength{ Params :  Returns : void} testHeadDoesNotSetAutomaticallySetContentLengthHeader{ Params :  Returns : void} testHeadAllowsContentLengthHeader{ Params :  Returns : void} testHeadRemovesTransferEncodingHeader{ Params :  Returns : void} testNoContentRemovesContentLengthHeader{ Params :  Returns : void} testNoContentRemovesTransferEncodingHeader{ Params :  Returns : void} testResetContentSetsContentLengthHeader{ Params :  Returns : void} testResetContentRemovesTransferEncodingHeader{ Params :  Returns : void} testNotModifiedDoesNotSetAutomaticallySetContentLengthHeader{ Params :  Returns : void} testNotModifiedAllowsContentLengthHeader{ Params :  Returns : void} testNotModifiedRemovesTransferEncodingHeader{ Params :  Returns : void} test1xxRemovesContentLengthHeader{ Params :  Returns : void} test1xxRemovesTransferEncodingHeader{ Params :  Returns : void} checkEmptyHttpResponse{ Params : HttpMethod,int,MultiMap Returns : MultiMap} testHeadHasNoContentLengthByDefault{ Params :  Returns : void} testHeadButCanSetContentLength{ Params :  Returns : void} testRemoteAddress{ Params :  Returns : void} testGetAbsoluteURI{ Params :  Returns : void} testListenInvalidPort{ Params :  Returns : void} testListenInvalidHost{ Params :  Returns : void} testPauseResumeClientResponseWontCallEndHandlePrematurely{ Params :  Returns : void} testPauseClientResponse{ Params :  Returns : void} testDeliverPausedBufferWhenResume{ Params :  Returns : void} testDeliverPausedBufferWhenResumeOnOtherThread{ Params :  Returns : void} testDeliverPausedBufferWhenResume{ Params : Consumer<Runnable> Returns : void} testClearPausedBuffersWhenResponseEnds{ Params :  Returns : void} testPausedHttpServerRequest{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk1{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk2{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk{ Params : boolean Returns : void} testHttpClientResponsePausedDuringLastChunk1{ Params :  Returns : void} testHttpClientResponsePausedDuringLastChunk2{ Params :  Returns : void} testHttpClientResponsePausedDuringLastChunk{ Params : boolean Returns : void} testHostHeaderOverridePossible{ Params :  Returns : void} testResponseBodyWriteFixedString{ Params :  Returns : void} testResponseDataTimeout{ Params :  Returns : void} testClientMultiThreaded{ Params :  Returns : void} run{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} testInVerticle{ Params : boolean Returns : void} start{ Params :  Returns : void} testWorkerServer{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testInWorker{ Params :  Returns : void} start{ Params :  Returns : void} testClientReadStreamInWorker{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testServerReadStreamInWorker{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleServerClose{ Params :  Returns : void} testRequestEnded{ Params :  Returns : void} testRequestEndedNoEndHandler{ Params :  Returns : void} testAbsoluteURIServer{ Params :  Returns : void} testDumpManyRequestsOnQueue{ Params :  Returns : void} testOtherMethodRequest{ Params :  Returns : void} testClientGlobalConnectionHandler{ Params :  Returns : void} testServerConnectionHandler{ Params :  Returns : void} testServerConnectionHandlerClose{ Params :  Returns : void} testClientConnectionClose{ Params :  Returns : void} testServerConnectionClose{ Params :  Returns : void} testNoLogging{ Params :  Returns : void} testServerLogging{ Params :  Returns : void} testClientLogging{ Params :  Returns : void} testClientLocalAddress{ Params :  Returns : void} testFollowRedirectGetOn301{ Params :  Returns : void} testFollowRedirectPostOn301{ Params :  Returns : void} testFollowRedirectPutOn301{ Params :  Returns : void} testFollowRedirectGetOn302{ Params :  Returns : void} testFollowRedirectPostOn302{ Params :  Returns : void} testFollowRedirectPutOn302{ Params :  Returns : void} testFollowRedirectGetOn303{ Params :  Returns : void} testFollowRedirectPostOn303{ Params :  Returns : void} testFollowRedirectPutOn303{ Params :  Returns : void} testFollowRedirectNotOn304{ Params :  Returns : void} testFollowRedirectGetOn307{ Params :  Returns : void} testFollowRedirectPostOn307{ Params :  Returns : void} testFollowRedirectPutOn307{ Params :  Returns : void} testFollowRedirectWithRelativeLocation{ Params :  Returns : void} testFollowRedirectGetOn308{ Params :  Returns : void} testFollowRedirectPostOn308{ Params :  Returns : void} testFollowRedirectPutOn308{ Params :  Returns : void} testFollowRedirect{ Params : HttpMethod,HttpMethod,int,int,int,String,String Returns : void} testFollowRedirectWithBody{ Params :  Returns : void} testFollowRedirectWithPaddedBody{ Params :  Returns : void} testFollowRedirectWithBody{ Params : Function<Buffer,Buffer> Returns : void} testFollowRedirectHappensAfterResponseIsReceived{ Params :  Returns : void} testFollowRedirectWithChunkedBody{ Params :  Returns : void} testFollowRedirectWithRequestNotEnded{ Params :  Returns : void} testFollowRedirectWithRequestNotEndedFailing{ Params :  Returns : void} testFollowRedirectWithRequestNotEnded{ Params : boolean Returns : void} testFollowRedirectSendHeadThenBody{ Params :  Returns : void} testFollowRedirectLimit{ Params :  Returns : void} testFollowRedirectPropagatesTimeout{ Params :  Returns : void} testFollowRedirectHost{ Params :  Returns : void} testFollowRedirectWithCustomHandler{ Params :  Returns : void} testDefaultRedirectHandler{ Params :  Returns : void} testFoo{ Params : String,String Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientRequest} write{ Params : Buffer Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : HttpClientRequest} drainHandler{ Params : Handler<Void> Returns : HttpClientRequest} setFollowRedirects{ Params : boolean Returns : HttpClientRequest} setMaxRedirects{ Params : int Returns : HttpClientRequest} setChunked{ Params : boolean Returns : HttpClientRequest} isChunked{ Params :  Returns : boolean} getMethod{ Params :  Returns : HttpMethod} absoluteURI{ Params :  Returns : String} version{ Params :  Returns : HttpVersion} getURI{ Params :  Returns : String} setURI{ Params : String Returns : HttpClientRequest} path{ Params :  Returns : String} query{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} putHeader{ Params : String,String Returns : HttpClientRequest} putHeader{ Params : CharSequence,CharSequence Returns : HttpClientRequest} putHeader{ Params : String,Iterable<String> Returns : HttpClientRequest} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : HttpClientRequest} write{ Params : String Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} write{ Params : Buffer,Handler<AsyncResult<Void>> Returns : void} write{ Params : String,Handler<AsyncResult<Void>> Returns : void} write{ Params : String,String,Handler<AsyncResult<Void>> Returns : void} continueHandler{ Params : Handler<Void> Returns : HttpClientRequest} earlyHintsHandler{ Params : Handler<MultiMap> Returns : HttpClientRequest} sendHead{ Params :  Returns : Future<Void>} sendHead{ Params : Handler<AsyncResult<Void>> Returns : HttpClientRequest} connect{ Params :  Returns : Future<HttpClientResponse>} connect{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : void} end{ Params : String Returns : Future<Void>} end{ Params : String,String Returns : Future<Void>} end{ Params : String,Handler<AsyncResult<Void>> Returns : void} end{ Params : String,String,Handler<AsyncResult<Void>> Returns : void} end{ Params : Handler<AsyncResult<Void>> Returns : void} end{ Params :  Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params : Buffer,Handler<AsyncResult<Void>> Returns : void} setTimeout{ Params : long Returns : HttpClientRequest} pushHandler{ Params : Handler<HttpClientRequest> Returns : HttpClientRequest} reset{ Params : long Returns : boolean} reset{ Params : long,Throwable Returns : boolean} connection{ Params :  Returns : HttpConnection} writeCustomFrame{ Params : int,int,Buffer Returns : HttpClientRequest} writeQueueFull{ Params :  Returns : boolean} getStreamPriority{ Params :  Returns : StreamPriority} onComplete{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : HttpClientRequest} isComplete{ Params :  Returns : boolean} result{ Params :  Returns : HttpClientResponse} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} compose{ Params : Function<HttpClientResponse,Future<U>>,Function<Throwable,Future<U>> Returns : Future<U>} map{ Params : Function<HttpClientResponse,U> Returns : Future<U>} map{ Params : V Returns : Future<V>} otherwise{ Params : Function<Throwable,HttpClientResponse> Returns : Future<HttpClientResponse>} otherwise{ Params : HttpClientResponse Returns : Future<HttpClientResponse>} setHost{ Params : String Returns : HttpClientRequest} getHost{ Params :  Returns : String} setPort{ Params : int Returns : HttpClientRequest} getPort{ Params :  Returns : int} setMethod{ Params : HttpMethod Returns : HttpClientRequest} response{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : HttpClientRequest} response{ Params :  Returns : Future<HttpClientResponse>} resume{ Params :  Returns : HttpClientResponse} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientResponse} handler{ Params : Handler<Buffer> Returns : HttpClientResponse} pause{ Params :  Returns : HttpClientResponse} fetch{ Params : long Returns : HttpClientResponse} endHandler{ Params : Handler<Void> Returns : HttpClientResponse} version{ Params :  Returns : HttpVersion} statusCode{ Params :  Returns : int} statusMessage{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} getHeader{ Params : String Returns : String} getHeader{ Params : CharSequence Returns : String} getTrailer{ Params : String Returns : String} trailers{ Params :  Returns : MultiMap} cookies{ Params :  Returns : List<String>} customFrameHandler{ Params : Handler<HttpFrame> Returns : HttpClientResponse} netSocket{ Params :  Returns : NetSocket} request{ Params :  Returns : HttpClientRequest} streamPriorityHandler{ Params : Handler<StreamPriority> Returns : HttpClientResponse} body{ Params :  Returns : Future<Buffer>} end{ Params :  Returns : Future<Void>} testFollowRedirectEncodedParams{ Params :  Returns : void} testEventHandlersNotHoldingLock{ Params :  Returns : void} testEventHandlersNotHoldingLockOnClose{ Params :  Returns : void} testCloseHandlerWhenConnectionEnds{ Params :  Returns : void} testUseResponseAfterClose{ Params :  Returns : void} testSendFileAfterServerResponseClose{ Params :  Returns : void} testSendFileAsyncAfterServerResponseClose{ Params :  Returns : void} testAfterServerResponseClose{ Params : Handler<HttpServerResponse> Returns : void} testCloseHandlerNotCalledWhenConnectionClosedAfterEnd{ Params :  Returns : void} testCloseHandlerNotCalledWhenConnectionClosedAfterEnd{ Params : int Returns : void} testLogging{ Params :  Returns : TestLoggerFactory} testClientDecompressionError{ Params :  Returns : void} testContainsValueString{ Params :  Returns : void} testContainsValueStringIgnoreCase{ Params :  Returns : void} testContainsValueCharSequence{ Params :  Returns : void} testContainsValueCharSequenceIgnoreCase{ Params :  Returns : void} testBytesReadRequest{ Params :  Returns : void} testClientSynchronousConnectFailures{ Params :  Returns : void} testClientConnectInvalidPort{ Params :  Returns : void} setupFile{ Params : String,String Returns : File} generateQueryString{ Params : MultiMap,char Returns : String} testHttpClientRequestHeadersDontContainCROrLF{ Params :  Returns : void} testHttpServerResponseHeadersDontContainCROrLF{ Params :  Returns : void} testDisableIdleTimeoutInPool{ Params :  Returns : void} testKeepAliveTimeout{ Params :  Returns : void} testKeepAliveTimeout{ Params : HttpClientOptions,int Returns : void} testPoolNotExpiring1{ Params :  Returns : void} testPoolNotExpiring2{ Params :  Returns : void} testPoolNotExpiring{ Params : HttpClientOptions Returns : void} testHttpConnect{ Params :  Returns : void} testHttpConnect{ Params : RequestOptions,int Returns : void} testNetSocketConnectSuccessClientInitiatesCloseImmediately{ Params :  Returns : void} testNetSocketConnectSuccessServerInitiatesCloseImmediately{ Params :  Returns : void} testNetSocketConnectSuccessServerInitiatesCloseOnReply{ Params :  Returns : void} testNetSocketConnectSuccessClientInitiatesCloseOnReply{ Params :  Returns : void} testNetSocketConnectSuccess{ Params : Handler<NetSocket>,Handler<NetSocket> Returns : void} testClientNetSocketConnectReject{ Params :  Returns : void} testClientNetSocketConnectFailure{ Params :  Returns : void} testAccessNetSocketPendingResponseDataPaused{ Params :  Returns : void} testAccessNetSocketPendingResponseDataNotPaused{ Params :  Returns : void} testAccessNetSocketPendingResponseData{ Params : boolean Returns : void} testServerNetSocketCloseWithHandler{ Params :  Returns : void} testClientNetSocketCloseWithHandler{ Params :  Returns : void} testHttpInvalidConnectResponseEnded{ Params :  Returns : void} testHttpInvalidConnectResponseChunked{ Params :  Returns : void} testUpgradeTunnelNoSwitch{ Params :  Returns : void} testEndFromAnotherThread{ Params :  Returns : void} testServerResponseWriteSuccess{ Params :  Returns : void} testServerResponseEndSuccess{ Params :  Returns : void} testServerResponseWriteSuccess{ Params : BiConsumer<HttpServerResponse,Handler<AsyncResult<Void>>> Returns : void} testServerResponseWriteFailure{ Params :  Returns : void} testClientRequestWriteSuccess{ Params :  Returns : void} testClientRequestEnd1Success{ Params :  Returns : void} testClientRequestEnd2Success{ Params :  Returns : void} testClientRequestWriteSuccess{ Params : BiConsumer<HttpClientRequest,Handler<AsyncResult<Void>>> Returns : void} testClientRequestLazyWriteSuccess{ Params :  Returns : void} testClientRequestLazyEndSuccess{ Params :  Returns : void} testClientRequestLazyWriteSuccess{ Params : BiConsumer<HttpClientRequest,Handler<AsyncResult<Void>>> Returns : void} testClientResponseWriteFailure{ Params :  Returns : void} testServerRequestBodyFuture{ Params :  Returns : void} testServerRequestBodyFutureFail{ Params :  Returns : void} testResetClientRequestBeforeActualSend{ Params :  Returns : void} testResetFromNonVertxThread{ Params :  Returns : void} testResetClientRequestInProgress{ Params :  Returns : void} testResetClientRequestAwaitingResponse{ Params :  Returns : void} testResetClientRequestResponseInProgress{ Params :  Returns : void} testSimpleCookie{ Params :  Returns : void} testGetCookies{ Params :  Returns : void} testGetCookiesSameIdentity{ Params :  Returns : void} testGetCookiesSameIdentityRemoveOne{ Params :  Returns : void} testGetCookiesSameIdentityRemoveAll{ Params :  Returns : void} testGetCookiesSameIdentityReplace{ Params :  Returns : void} testCookiesChanged{ Params :  Returns : void} testCookieFields{ Params :  Returns : void} testCookieSameSiteFieldEncoding{ Params :  Returns : void} testCookieSameSiteFieldValidation{ Params :  Returns : void} testRemoveCookies{ Params :  Returns : void} testNoCookiesRemoveCookie{ Params :  Returns : void} testNoCookiesCookieCount{ Params :  Returns : void} testNoCookiesGetCookie{ Params :  Returns : void} testNoCookiesAddCookie{ Params :  Returns : void} testReplaceCookie{ Params :  Returns : void} testCookies{ Params : String,Consumer<HttpServerRequest>,Consumer<HttpClientResponse> Returns : void} testClientRequestFutureSetHandlerFromAnotherThread{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunks{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksChunked{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksWithHandler{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksChunkedWithHandler{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunks{ Params : boolean,BiFunction<HttpClientRequest,ReadStream<Buffer>,Future<HttpClientResponse>> Returns : void} testClientRequestFlowControlDifferentEventLoops{ Params :  Returns : void} testHAProxyProtocolIdleTimeout{ Params :  Returns : void} testHAProxyProtocolIdleTimeoutNotHappened{ Params :  Returns : void} testHAProxyProtocolVersion1TCP4{ Params :  Returns : void} testHAProxyProtocolVersion1TCP6{ Params :  Returns : void} testHAProxyProtocolVersion1Unknown{ Params :  Returns : void} testHAProxyProtocolVersion2TCP4{ Params :  Returns : void} testHAProxyProtocolVersion2TCP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixSocket{ Params :  Returns : void} testHAProxyProtocolVersion2Unknown{ Params :  Returns : void} testHAProxyProtocolAccepted{ Params : Buffer,SocketAddress,SocketAddress Returns : void} testHAProxyProtocolVersion2UDP4{ Params :  Returns : void} testHAProxyProtocolVersion2UDP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixDataGram{ Params :  Returns : void} testHAProxyProtocolRejected{ Params : Buffer Returns : void} testHAProxyProtocolEmptyHeader{ Params :  Returns : void} testHAProxyProtocolIllegalHeader{ Params :  Returns : void} testClientClose{ Params :  Returns : void} testHAProxyProtocolIllegal{ Params : Buffer Returns : void} assertAddresses{ Params : SocketAddress,SocketAddress Returns : void} testStickyContext{ Params :  Returns : void} testRetrySameHostOnCallbackFailure{ Params :  Returns : void} testHttpServerEndHandlerSuccess{ Params :  Returns : void} testHttpServerEndHandlerError{ Params :  Returns : void} testHttpClientEndHandlerSuccess{ Params :  Returns : void} testHttpClientEndHandlerFailure{ Params :  Returns : void} testServerResponseSend{ Params :  Returns : void} testServerResponseSend{ Params : boolean Returns : void} testConnectTimeout{ Params :  Returns : void} testResponseEndFutureCompletes_WithoutBody{ Params :  Returns : void} testResponseEndFutureCompletes_WithBody{ Params :  Returns : void} testResponseEndFutureCompletes_ChunkedWithoutBody{ Params :  Returns : void} testResponseEndFutureCompletes_ChunkedWithBody{ Params :  Returns : void} testResponseEndFutureCompletes{ Params : Function<HttpServerResponse,Future<Void>> Returns : void} shouldThrowISEIfSendingResponseFromHeadersEndHandler{ Params :  Returns : void} testInvalidPort{ Params :  Returns : void} ,setUp start start start start start start start ,generateQueryString ,,testCloseHandlerNotCalledWhenConnectionClosedAfterEnd ,HttpClientRequest ,,,,UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,: 
vert.x-master,io.vertx.core.http,MockResp,1,0,0,0,0,false,HttpTestBase ,0 ,0 ,,setUp{ Params :  Returns : void} testClientRequestArguments{ Params :  Returns : void} testListenSocketAddress{ Params :  Returns : void} testListenDomainSocketAddress{ Params :  Returns : void} testLowerCaseHeaders{ Params :  Returns : void} testServerActualPortWhenSet{ Params :  Returns : void} testServerActualPortWhenZero{ Params :  Returns : void} testServerActualPortWhenZeroPassedInListen{ Params :  Returns : void} testClientRequestOptionsSocketAddressOnly{ Params :  Returns : void} testInvalidAbsoluteURI{ Params :  Returns : void} testPutHeadersOnRequest{ Params :  Returns : void} testPutHeaderReplacesPreviousHeaders{ Params :  Returns : void} testSimpleGET{ Params :  Returns : void} testSimplePUT{ Params :  Returns : void} testSimplePOST{ Params :  Returns : void} testSimpleDELETE{ Params :  Returns : void} testSimpleHEAD{ Params :  Returns : void} testSimpleTRACE{ Params :  Returns : void} testSimpleCONNECT{ Params :  Returns : void} testSimpleOPTIONS{ Params :  Returns : void} testSimplePATCH{ Params :  Returns : void} testSimpleGETAbsolute{ Params :  Returns : void} testEmptyPathGETAbsolute{ Params :  Returns : void} testNoPathButQueryGETAbsolute{ Params :  Returns : void} testSimplePUTAbsolute{ Params :  Returns : void} testSimplePOSTAbsolute{ Params :  Returns : void} testSimpleDELETEAbsolute{ Params :  Returns : void} testSimpleHEADAbsolute{ Params :  Returns : void} testSimpleTRACEAbsolute{ Params :  Returns : void} testSimpleCONNECTAbsolute{ Params :  Returns : void} testSimpleOPTIONSAbsolute{ Params :  Returns : void} testSimplePATCHAbsolute{ Params :  Returns : void} testSimpleRequest{ Params : String,HttpMethod,Handler<HttpClientResponse> Returns : void} testSimpleRequest{ Params : String,HttpMethod,boolean,Handler<HttpClientResponse> Returns : void} testSimpleRequest{ Params : String,HttpMethod,RequestOptions,boolean,Handler<HttpClientResponse> Returns : void} testServerChaining{ Params :  Returns : void} testResponseEndHandlers1{ Params :  Returns : void} testResponseEndHandlers2{ Params :  Returns : void} testResponseEndHandlersChunkedResponse{ Params :  Returns : void} testResponseEndHandlersSendFile{ Params :  Returns : void} testAbsoluteURI{ Params :  Returns : void} testRelativeURI{ Params :  Returns : void} testAbsoluteURIWithHttpSchemaInQuery{ Params :  Returns : void} testRelativeURIWithHttpSchemaInQuery{ Params :  Returns : void} testAbsoluteURIEmptyPath{ Params :  Returns : void} testEmptyURI{ Params :  Returns : void} testURIAndPath{ Params : String,String,String Returns : void} testParamUmlauteDecoding{ Params :  Returns : void} testParamPlusDecoding{ Params :  Returns : void} testParamPercentDecoding{ Params :  Returns : void} testParamSpaceDecoding{ Params :  Returns : void} testParamNormalDecoding{ Params :  Returns : void} testParamAltogetherDecoding{ Params :  Returns : void} testParamDecoding{ Params : String Returns : void} testParamsAmpersand{ Params :  Returns : void} testParamsSemiColon{ Params :  Returns : void} testParams{ Params : char Returns : void} testNoParams{ Params :  Returns : void} testOverrideParamsCharset{ Params :  Returns : void} testGetParamDefaultValue{ Params :  Returns : void} testMissingContentTypeMultipartRequest{ Params :  Returns : void} testInvalidContentTypeMultipartRequest{ Params :  Returns : void} testInvalidMethodMultipartRequest{ Params :  Returns : void} testInvalidMultipartRequest{ Params : String,HttpMethod Returns : void} testDefaultRequestHeaders{ Params :  Returns : void} sendAndAwait{ Params : RequestOptions Returns : void} sendAndAwait{ Params : RequestOptions,Handler<HttpClientRequest> Returns : void} testRequestHeadersWithCharSequence{ Params :  Returns : void} testRequestHeadersPutAll{ Params :  Returns : void} testRequestHeadersIndividually{ Params :  Returns : void} testRequestHeaders{ Params : boolean Returns : void} testResponseHeadersPutAll{ Params :  Returns : void} testResponseHeadersIndividually{ Params :  Returns : void} testResponseHeaders{ Params : boolean Returns : void} testResponseHeadersWithCharSequence{ Params :  Returns : void} testResponseMultipleSetCookieInHeader{ Params :  Returns : void} testResponseMultipleSetCookieInTrailer{ Params :  Returns : void} testResponseMultipleSetCookieInHeaderAndTrailer{ Params :  Returns : void} testResponseMultipleSetCookie{ Params : boolean,boolean Returns : void} testUseRequestAfterComplete{ Params :  Returns : void} testRequestBodyBufferAtEnd{ Params :  Returns : void} testRequestBodyStringDefaultEncodingAtEnd{ Params :  Returns : void} testRequestBodyStringUTF8AtEnd{ Params :  Returns : void} testRequestBodyStringUTF16AtEnd{ Params :  Returns : void} testRequestBodyStringAtEnd{ Params : String Returns : void} testRequestBodyWriteChunked{ Params :  Returns : void} testRequestBodyWriteNonChunked{ Params :  Returns : void} testRequestBodyWrite{ Params : boolean Returns : void} testRequestBodyWriteStringChunkedDefaultEncoding{ Params :  Returns : void} testRequestBodyWriteStringChunkedUTF8{ Params :  Returns : void} testRequestBodyWriteStringChunkedUTF16{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedDefaultEncoding{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedUTF8{ Params :  Returns : void} testRequestBodyWriteStringNonChunkedUTF16{ Params :  Returns : void} testRequestBodyWriteString{ Params : boolean,String Returns : void} testRequestWrite{ Params :  Returns : void} testClientExceptionHandlerCalledWhenServerTerminatesConnection{ Params :  Returns : void} testClientExceptionHandlerCalledWhenServerTerminatesConnectionAfterPartialResponse{ Params :  Returns : void} testContextExceptionHandlerCalledWhenExceptionOnDataHandler{ Params :  Returns : void} testClientExceptionHandlerCalledWhenExceptionOnBodyHandler{ Params :  Returns : void} testNoExceptionHandlerCalledWhenResponseEnded{ Params :  Returns : void} testServerExceptionHandlerOnClose{ Params :  Returns : void} testClientRequestExceptionHandlerCalledWhenConnectionClosed{ Params :  Returns : void} testClientResponseExceptionHandlerCalledWhenConnectionClosed{ Params :  Returns : void} testClientRequestExceptionHandlerCalledWhenRequestEnded{ Params :  Returns : void} testDefaultStatus{ Params :  Returns : void} testDefaultOther{ Params :  Returns : void} testOverrideStatusMessage{ Params :  Returns : void} testOverrideDefaultStatusMessage{ Params :  Returns : void} testStatusCode{ Params : int,String Returns : void} testResponseTrailersPutAll{ Params :  Returns : void} testResponseTrailersPutIndividually{ Params :  Returns : void} testResponseTrailers{ Params : boolean Returns : void} testResponseNoTrailers{ Params :  Returns : void} testUseAfterServerResponseHeadSent{ Params :  Returns : void} testUseAfterServerResponseSent{ Params :  Returns : void} testSetInvalidStatusMessage{ Params :  Returns : void} testResponseBodyBufferAtEnd{ Params :  Returns : void} testResponseBodyWriteChunked{ Params :  Returns : void} testResponseBodyWriteNonChunked{ Params :  Returns : void} testResponseBodyWrite{ Params : boolean Returns : void} testResponseBodyWriteStringChunkedDefaultEncoding{ Params :  Returns : void} testResponseBodyWriteStringChunkedUTF8{ Params :  Returns : void} testResponseBodyWriteStringChunkedUTF16{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedDefaultEncoding{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedUTF8{ Params :  Returns : void} testResponseBodyWriteStringNonChunkedUTF16{ Params :  Returns : void} testResponseBodyWriteString{ Params : boolean,String Returns : void} testResponseWrite{ Params :  Returns : void} testSendFile{ Params :  Returns : void} testSendFileWithHandler{ Params :  Returns : void} sendFile{ Params : String,String,boolean,Supplier<Future<HttpClientRequest>> Returns : void} testSendNonExistingFile{ Params :  Returns : void} testSendFileOverrideHeaders{ Params :  Returns : void} testSendFileNotFound{ Params :  Returns : void} testSendFileDirectoryWithHandler{ Params :  Returns : void} testSendOpenRangeFileFromClasspath{ Params :  Returns : void} testSendRangeFileFromClasspath{ Params :  Returns : void} test100ContinueHandledAutomatically{ Params :  Returns : void} test100ContinueHandledManually{ Params :  Returns : void} test100ContinueRejectedManually{ Params :  Returns : void} test100ContinueTimeout{ Params :  Returns : void} test103EarlyHints{ Params :  Returns : void} testClientDrainHandler{ Params :  Returns : void} pausingServer{ Params : Consumer<Promise<Void>> Returns : void} testServerDrainHandler{ Params :  Returns : void} drainingServer{ Params : Consumer<Future<Void>> Returns : void} testRequestTimesOutWhenIndicatedPeriodExpiresWithoutAResponseFromRemoteServer{ Params :  Returns : void} testRequestTimeoutCanceledWhenRequestHasAnOtherError{ Params :  Returns : void} testRequestTimeoutCanceledWhenRequestEndsNormally{ Params :  Returns : void} testHttpClientRequestTimeoutResetsTheConnection{ Params :  Returns : void} testConnectInvalidPort{ Params :  Returns : void} testConnectInvalidHost{ Params :  Returns : void} testSetHandlersAfterListening{ Params :  Returns : void} testListenNoHandlers{ Params :  Returns : void} testListenTwice{ Params :  Returns : void} testHeadCanSetContentLength{ Params :  Returns : void} testHeadDoesNotSetAutomaticallySetContentLengthHeader{ Params :  Returns : void} testHeadAllowsContentLengthHeader{ Params :  Returns : void} testHeadRemovesTransferEncodingHeader{ Params :  Returns : void} testNoContentRemovesContentLengthHeader{ Params :  Returns : void} testNoContentRemovesTransferEncodingHeader{ Params :  Returns : void} testResetContentSetsContentLengthHeader{ Params :  Returns : void} testResetContentRemovesTransferEncodingHeader{ Params :  Returns : void} testNotModifiedDoesNotSetAutomaticallySetContentLengthHeader{ Params :  Returns : void} testNotModifiedAllowsContentLengthHeader{ Params :  Returns : void} testNotModifiedRemovesTransferEncodingHeader{ Params :  Returns : void} test1xxRemovesContentLengthHeader{ Params :  Returns : void} test1xxRemovesTransferEncodingHeader{ Params :  Returns : void} checkEmptyHttpResponse{ Params : HttpMethod,int,MultiMap Returns : MultiMap} testHeadHasNoContentLengthByDefault{ Params :  Returns : void} testHeadButCanSetContentLength{ Params :  Returns : void} testRemoteAddress{ Params :  Returns : void} testGetAbsoluteURI{ Params :  Returns : void} testListenInvalidPort{ Params :  Returns : void} testListenInvalidHost{ Params :  Returns : void} testPauseResumeClientResponseWontCallEndHandlePrematurely{ Params :  Returns : void} testPauseClientResponse{ Params :  Returns : void} testDeliverPausedBufferWhenResume{ Params :  Returns : void} testDeliverPausedBufferWhenResumeOnOtherThread{ Params :  Returns : void} testDeliverPausedBufferWhenResume{ Params : Consumer<Runnable> Returns : void} testClearPausedBuffersWhenResponseEnds{ Params :  Returns : void} testPausedHttpServerRequest{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk1{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk2{ Params :  Returns : void} testHttpServerRequestPausedDuringLastChunk{ Params : boolean Returns : void} testHttpClientResponsePausedDuringLastChunk1{ Params :  Returns : void} testHttpClientResponsePausedDuringLastChunk2{ Params :  Returns : void} testHttpClientResponsePausedDuringLastChunk{ Params : boolean Returns : void} testHostHeaderOverridePossible{ Params :  Returns : void} testResponseBodyWriteFixedString{ Params :  Returns : void} testResponseDataTimeout{ Params :  Returns : void} testClientMultiThreaded{ Params :  Returns : void} run{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} testInVerticle{ Params : boolean Returns : void} start{ Params :  Returns : void} testWorkerServer{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testInWorker{ Params :  Returns : void} start{ Params :  Returns : void} testClientReadStreamInWorker{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testServerReadStreamInWorker{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} testMultipleServerClose{ Params :  Returns : void} testRequestEnded{ Params :  Returns : void} testRequestEndedNoEndHandler{ Params :  Returns : void} testAbsoluteURIServer{ Params :  Returns : void} testDumpManyRequestsOnQueue{ Params :  Returns : void} testOtherMethodRequest{ Params :  Returns : void} testClientGlobalConnectionHandler{ Params :  Returns : void} testServerConnectionHandler{ Params :  Returns : void} testServerConnectionHandlerClose{ Params :  Returns : void} testClientConnectionClose{ Params :  Returns : void} testServerConnectionClose{ Params :  Returns : void} testNoLogging{ Params :  Returns : void} testServerLogging{ Params :  Returns : void} testClientLogging{ Params :  Returns : void} testClientLocalAddress{ Params :  Returns : void} testFollowRedirectGetOn301{ Params :  Returns : void} testFollowRedirectPostOn301{ Params :  Returns : void} testFollowRedirectPutOn301{ Params :  Returns : void} testFollowRedirectGetOn302{ Params :  Returns : void} testFollowRedirectPostOn302{ Params :  Returns : void} testFollowRedirectPutOn302{ Params :  Returns : void} testFollowRedirectGetOn303{ Params :  Returns : void} testFollowRedirectPostOn303{ Params :  Returns : void} testFollowRedirectPutOn303{ Params :  Returns : void} testFollowRedirectNotOn304{ Params :  Returns : void} testFollowRedirectGetOn307{ Params :  Returns : void} testFollowRedirectPostOn307{ Params :  Returns : void} testFollowRedirectPutOn307{ Params :  Returns : void} testFollowRedirectWithRelativeLocation{ Params :  Returns : void} testFollowRedirectGetOn308{ Params :  Returns : void} testFollowRedirectPostOn308{ Params :  Returns : void} testFollowRedirectPutOn308{ Params :  Returns : void} testFollowRedirect{ Params : HttpMethod,HttpMethod,int,int,int,String,String Returns : void} testFollowRedirectWithBody{ Params :  Returns : void} testFollowRedirectWithPaddedBody{ Params :  Returns : void} testFollowRedirectWithBody{ Params : Function<Buffer,Buffer> Returns : void} testFollowRedirectHappensAfterResponseIsReceived{ Params :  Returns : void} testFollowRedirectWithChunkedBody{ Params :  Returns : void} testFollowRedirectWithRequestNotEnded{ Params :  Returns : void} testFollowRedirectWithRequestNotEndedFailing{ Params :  Returns : void} testFollowRedirectWithRequestNotEnded{ Params : boolean Returns : void} testFollowRedirectSendHeadThenBody{ Params :  Returns : void} testFollowRedirectLimit{ Params :  Returns : void} testFollowRedirectPropagatesTimeout{ Params :  Returns : void} testFollowRedirectHost{ Params :  Returns : void} testFollowRedirectWithCustomHandler{ Params :  Returns : void} testDefaultRedirectHandler{ Params :  Returns : void} testFoo{ Params : String,String Returns : void} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientRequest} write{ Params : Buffer Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : HttpClientRequest} drainHandler{ Params : Handler<Void> Returns : HttpClientRequest} setFollowRedirects{ Params : boolean Returns : HttpClientRequest} setMaxRedirects{ Params : int Returns : HttpClientRequest} setChunked{ Params : boolean Returns : HttpClientRequest} isChunked{ Params :  Returns : boolean} getMethod{ Params :  Returns : HttpMethod} absoluteURI{ Params :  Returns : String} version{ Params :  Returns : HttpVersion} getURI{ Params :  Returns : String} setURI{ Params : String Returns : HttpClientRequest} path{ Params :  Returns : String} query{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} putHeader{ Params : String,String Returns : HttpClientRequest} putHeader{ Params : CharSequence,CharSequence Returns : HttpClientRequest} putHeader{ Params : String,Iterable<String> Returns : HttpClientRequest} putHeader{ Params : CharSequence,Iterable<CharSequence> Returns : HttpClientRequest} write{ Params : String Returns : Future<Void>} write{ Params : String,String Returns : Future<Void>} write{ Params : Buffer,Handler<AsyncResult<Void>> Returns : void} write{ Params : String,Handler<AsyncResult<Void>> Returns : void} write{ Params : String,String,Handler<AsyncResult<Void>> Returns : void} continueHandler{ Params : Handler<Void> Returns : HttpClientRequest} earlyHintsHandler{ Params : Handler<MultiMap> Returns : HttpClientRequest} sendHead{ Params :  Returns : Future<Void>} sendHead{ Params : Handler<AsyncResult<Void>> Returns : HttpClientRequest} connect{ Params :  Returns : Future<HttpClientResponse>} connect{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : void} end{ Params : String Returns : Future<Void>} end{ Params : String,String Returns : Future<Void>} end{ Params : String,Handler<AsyncResult<Void>> Returns : void} end{ Params : String,String,Handler<AsyncResult<Void>> Returns : void} end{ Params : Handler<AsyncResult<Void>> Returns : void} end{ Params :  Returns : Future<Void>} end{ Params : Buffer Returns : Future<Void>} end{ Params : Buffer,Handler<AsyncResult<Void>> Returns : void} setTimeout{ Params : long Returns : HttpClientRequest} pushHandler{ Params : Handler<HttpClientRequest> Returns : HttpClientRequest} reset{ Params : long Returns : boolean} reset{ Params : long,Throwable Returns : boolean} connection{ Params :  Returns : HttpConnection} writeCustomFrame{ Params : int,int,Buffer Returns : HttpClientRequest} writeQueueFull{ Params :  Returns : boolean} getStreamPriority{ Params :  Returns : StreamPriority} onComplete{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : HttpClientRequest} isComplete{ Params :  Returns : boolean} result{ Params :  Returns : HttpClientResponse} cause{ Params :  Returns : Throwable} succeeded{ Params :  Returns : boolean} failed{ Params :  Returns : boolean} compose{ Params : Function<HttpClientResponse,Future<U>>,Function<Throwable,Future<U>> Returns : Future<U>} map{ Params : Function<HttpClientResponse,U> Returns : Future<U>} map{ Params : V Returns : Future<V>} otherwise{ Params : Function<Throwable,HttpClientResponse> Returns : Future<HttpClientResponse>} otherwise{ Params : HttpClientResponse Returns : Future<HttpClientResponse>} setHost{ Params : String Returns : HttpClientRequest} getHost{ Params :  Returns : String} setPort{ Params : int Returns : HttpClientRequest} getPort{ Params :  Returns : int} setMethod{ Params : HttpMethod Returns : HttpClientRequest} response{ Params : Handler<AsyncResult<HttpClientResponse>> Returns : HttpClientRequest} response{ Params :  Returns : Future<HttpClientResponse>} resume{ Params :  Returns : HttpClientResponse} exceptionHandler{ Params : Handler<Throwable> Returns : HttpClientResponse} handler{ Params : Handler<Buffer> Returns : HttpClientResponse} pause{ Params :  Returns : HttpClientResponse} fetch{ Params : long Returns : HttpClientResponse} endHandler{ Params : Handler<Void> Returns : HttpClientResponse} version{ Params :  Returns : HttpVersion} statusCode{ Params :  Returns : int} statusMessage{ Params :  Returns : String} headers{ Params :  Returns : MultiMap} getHeader{ Params : String Returns : String} getHeader{ Params : CharSequence Returns : String} getTrailer{ Params : String Returns : String} trailers{ Params :  Returns : MultiMap} cookies{ Params :  Returns : List<String>} customFrameHandler{ Params : Handler<HttpFrame> Returns : HttpClientResponse} netSocket{ Params :  Returns : NetSocket} request{ Params :  Returns : HttpClientRequest} streamPriorityHandler{ Params : Handler<StreamPriority> Returns : HttpClientResponse} body{ Params :  Returns : Future<Buffer>} end{ Params :  Returns : Future<Void>} testFollowRedirectEncodedParams{ Params :  Returns : void} testEventHandlersNotHoldingLock{ Params :  Returns : void} testEventHandlersNotHoldingLockOnClose{ Params :  Returns : void} testCloseHandlerWhenConnectionEnds{ Params :  Returns : void} testUseResponseAfterClose{ Params :  Returns : void} testSendFileAfterServerResponseClose{ Params :  Returns : void} testSendFileAsyncAfterServerResponseClose{ Params :  Returns : void} testAfterServerResponseClose{ Params : Handler<HttpServerResponse> Returns : void} testCloseHandlerNotCalledWhenConnectionClosedAfterEnd{ Params :  Returns : void} testCloseHandlerNotCalledWhenConnectionClosedAfterEnd{ Params : int Returns : void} testLogging{ Params :  Returns : TestLoggerFactory} testClientDecompressionError{ Params :  Returns : void} testContainsValueString{ Params :  Returns : void} testContainsValueStringIgnoreCase{ Params :  Returns : void} testContainsValueCharSequence{ Params :  Returns : void} testContainsValueCharSequenceIgnoreCase{ Params :  Returns : void} testBytesReadRequest{ Params :  Returns : void} testClientSynchronousConnectFailures{ Params :  Returns : void} testClientConnectInvalidPort{ Params :  Returns : void} setupFile{ Params : String,String Returns : File} generateQueryString{ Params : MultiMap,char Returns : String} testHttpClientRequestHeadersDontContainCROrLF{ Params :  Returns : void} testHttpServerResponseHeadersDontContainCROrLF{ Params :  Returns : void} testDisableIdleTimeoutInPool{ Params :  Returns : void} testKeepAliveTimeout{ Params :  Returns : void} testKeepAliveTimeout{ Params : HttpClientOptions,int Returns : void} testPoolNotExpiring1{ Params :  Returns : void} testPoolNotExpiring2{ Params :  Returns : void} testPoolNotExpiring{ Params : HttpClientOptions Returns : void} testHttpConnect{ Params :  Returns : void} testHttpConnect{ Params : RequestOptions,int Returns : void} testNetSocketConnectSuccessClientInitiatesCloseImmediately{ Params :  Returns : void} testNetSocketConnectSuccessServerInitiatesCloseImmediately{ Params :  Returns : void} testNetSocketConnectSuccessServerInitiatesCloseOnReply{ Params :  Returns : void} testNetSocketConnectSuccessClientInitiatesCloseOnReply{ Params :  Returns : void} testNetSocketConnectSuccess{ Params : Handler<NetSocket>,Handler<NetSocket> Returns : void} testClientNetSocketConnectReject{ Params :  Returns : void} testClientNetSocketConnectFailure{ Params :  Returns : void} testAccessNetSocketPendingResponseDataPaused{ Params :  Returns : void} testAccessNetSocketPendingResponseDataNotPaused{ Params :  Returns : void} testAccessNetSocketPendingResponseData{ Params : boolean Returns : void} testServerNetSocketCloseWithHandler{ Params :  Returns : void} testClientNetSocketCloseWithHandler{ Params :  Returns : void} testHttpInvalidConnectResponseEnded{ Params :  Returns : void} testHttpInvalidConnectResponseChunked{ Params :  Returns : void} testUpgradeTunnelNoSwitch{ Params :  Returns : void} testEndFromAnotherThread{ Params :  Returns : void} testServerResponseWriteSuccess{ Params :  Returns : void} testServerResponseEndSuccess{ Params :  Returns : void} testServerResponseWriteSuccess{ Params : BiConsumer<HttpServerResponse,Handler<AsyncResult<Void>>> Returns : void} testServerResponseWriteFailure{ Params :  Returns : void} testClientRequestWriteSuccess{ Params :  Returns : void} testClientRequestEnd1Success{ Params :  Returns : void} testClientRequestEnd2Success{ Params :  Returns : void} testClientRequestWriteSuccess{ Params : BiConsumer<HttpClientRequest,Handler<AsyncResult<Void>>> Returns : void} testClientRequestLazyWriteSuccess{ Params :  Returns : void} testClientRequestLazyEndSuccess{ Params :  Returns : void} testClientRequestLazyWriteSuccess{ Params : BiConsumer<HttpClientRequest,Handler<AsyncResult<Void>>> Returns : void} testClientResponseWriteFailure{ Params :  Returns : void} testServerRequestBodyFuture{ Params :  Returns : void} testServerRequestBodyFutureFail{ Params :  Returns : void} testResetClientRequestBeforeActualSend{ Params :  Returns : void} testResetFromNonVertxThread{ Params :  Returns : void} testResetClientRequestInProgress{ Params :  Returns : void} testResetClientRequestAwaitingResponse{ Params :  Returns : void} testResetClientRequestResponseInProgress{ Params :  Returns : void} testSimpleCookie{ Params :  Returns : void} testGetCookies{ Params :  Returns : void} testGetCookiesSameIdentity{ Params :  Returns : void} testGetCookiesSameIdentityRemoveOne{ Params :  Returns : void} testGetCookiesSameIdentityRemoveAll{ Params :  Returns : void} testGetCookiesSameIdentityReplace{ Params :  Returns : void} testCookiesChanged{ Params :  Returns : void} testCookieFields{ Params :  Returns : void} testCookieSameSiteFieldEncoding{ Params :  Returns : void} testCookieSameSiteFieldValidation{ Params :  Returns : void} testRemoveCookies{ Params :  Returns : void} testNoCookiesRemoveCookie{ Params :  Returns : void} testNoCookiesCookieCount{ Params :  Returns : void} testNoCookiesGetCookie{ Params :  Returns : void} testNoCookiesAddCookie{ Params :  Returns : void} testReplaceCookie{ Params :  Returns : void} testCookies{ Params : String,Consumer<HttpServerRequest>,Consumer<HttpClientResponse> Returns : void} testClientRequestFutureSetHandlerFromAnotherThread{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunks{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksChunked{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksWithHandler{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunksChunkedWithHandler{ Params :  Returns : void} testClientRequestWithLargeBodyInSmallChunks{ Params : boolean,BiFunction<HttpClientRequest,ReadStream<Buffer>,Future<HttpClientResponse>> Returns : void} testClientRequestFlowControlDifferentEventLoops{ Params :  Returns : void} testHAProxyProtocolIdleTimeout{ Params :  Returns : void} testHAProxyProtocolIdleTimeoutNotHappened{ Params :  Returns : void} testHAProxyProtocolVersion1TCP4{ Params :  Returns : void} testHAProxyProtocolVersion1TCP6{ Params :  Returns : void} testHAProxyProtocolVersion1Unknown{ Params :  Returns : void} testHAProxyProtocolVersion2TCP4{ Params :  Returns : void} testHAProxyProtocolVersion2TCP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixSocket{ Params :  Returns : void} testHAProxyProtocolVersion2Unknown{ Params :  Returns : void} testHAProxyProtocolAccepted{ Params : Buffer,SocketAddress,SocketAddress Returns : void} testHAProxyProtocolVersion2UDP4{ Params :  Returns : void} testHAProxyProtocolVersion2UDP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixDataGram{ Params :  Returns : void} testHAProxyProtocolRejected{ Params : Buffer Returns : void} testHAProxyProtocolEmptyHeader{ Params :  Returns : void} testHAProxyProtocolIllegalHeader{ Params :  Returns : void} testClientClose{ Params :  Returns : void} testHAProxyProtocolIllegal{ Params : Buffer Returns : void} assertAddresses{ Params : SocketAddress,SocketAddress Returns : void} testStickyContext{ Params :  Returns : void} testRetrySameHostOnCallbackFailure{ Params :  Returns : void} testHttpServerEndHandlerSuccess{ Params :  Returns : void} testHttpServerEndHandlerError{ Params :  Returns : void} testHttpClientEndHandlerSuccess{ Params :  Returns : void} testHttpClientEndHandlerFailure{ Params :  Returns : void} testServerResponseSend{ Params :  Returns : void} testServerResponseSend{ Params : boolean Returns : void} testConnectTimeout{ Params :  Returns : void} testResponseEndFutureCompletes_WithoutBody{ Params :  Returns : void} testResponseEndFutureCompletes_WithBody{ Params :  Returns : void} testResponseEndFutureCompletes_ChunkedWithoutBody{ Params :  Returns : void} testResponseEndFutureCompletes_ChunkedWithBody{ Params :  Returns : void} testResponseEndFutureCompletes{ Params : Function<HttpServerResponse,Future<Void>> Returns : void} shouldThrowISEIfSendingResponseFromHeadersEndHandler{ Params :  Returns : void} testInvalidPort{ Params :  Returns : void} ,setUp start start start start start start start ,generateQueryString ,,testCloseHandlerNotCalledWhenConnectionClosedAfterEnd ,HttpClientResponse ,,,,UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,headerName: 
vert.x-master,io.vertx.core.http,HttpTestBase,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,DEFAULT_HTTP_HOST: String DEFAULT_HTTP_PORT: int DEFAULT_HTTPS_HOST: String DEFAULT_HTTPS_PORT: int DEFAULT_HTTPS_HOST_AND_PORT: String DEFAULT_TEST_URI: String server: HttpServer client: HttpClient proxy: TestProxyBase testAddress: SocketAddress requestOptions: RequestOptions noOp: Handler ,createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} noOpHandler{ Params :  Returns : Handler<E>} startServer{ Params :  Returns : void} startServer{ Params : SocketAddress Returns : void} startServer{ Params : HttpServer Returns : void} startServer{ Params : SocketAddress,HttpServer Returns : void} startServer{ Params : Context Returns : void} startServer{ Params : SocketAddress,Context Returns : void} startServer{ Params : Context,HttpServer Returns : void} startServer{ Params : SocketAddress,Context,HttpServer Returns : void} startProxy{ Params : String,ProxyType Returns : void} ,,,,,,,,,HttpServerOptions HttpClientOptions RequestOptions CompletableFuture HttpProxy SocksProxy ,proxy: , vertx
vert.x-master,io.vertx.core.http,HttpTLSTest,1,1,1,0,0,false,HttpTestBase ,0 ,TLSTest ,testFolder: TemporaryFolder ,getOptions{ Params :  Returns : VertxOptions} tearDown{ Params :  Returns : void} testTLSClientTrustAll{ Params :  Returns : void} testTLSClientTrustServerCert{ Params :  Returns : void} testTLSClientTrustServerCertKeyStore{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12{ Params :  Returns : void} testTLSClientTrustServerCertPEM{ Params :  Returns : void} testTLSClientTrustServerCertJKSRootCAWithJKSRootCA{ Params :  Returns : void} testTLSClientTrustServerCertJKSRootCAWithPKCS12RootCA{ Params :  Returns : void} testTLSClientTrustServerCertJKSRootRootCAWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12RootCAWithJKSRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12RootCAWithPKCS12RootCA{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12RootCAWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithJKSRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithPKCS12RootCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertMultiPemWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertMultiPemWithPEMOtherCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithPEMCAChain{ Params :  Returns : void} testTLSClientUntrustedServerCertPEMRootCAWithPEMCA{ Params :  Returns : void} testTLSClientTrustPKCS12ServerCert{ Params :  Returns : void} testTLSClientTrustPEMServerCert{ Params :  Returns : void} testTLSClientUntrustedServer{ Params :  Returns : void} testTLSClientUntrustedServerPEM{ Params :  Returns : void} testTLSClientCertNotRequired{ Params :  Returns : void} testTLSClientCertNotRequiredPEM{ Params :  Returns : void} testTLSClientCertRequired{ Params :  Returns : void} testTLSClientCertRequiredPKCS12{ Params :  Returns : void} testTLSClientCertRequiredPEM{ Params :  Returns : void} testTLSClientCertPKCS12Required{ Params :  Returns : void} testTLSClientCertPEMRequired{ Params :  Returns : void} testTLSClientCertPEM_CARequired{ Params :  Returns : void} testTLSClientCertRequiredNoClientCert{ Params :  Returns : void} testTLSClientCertClientNotTrusted{ Params :  Returns : void} testTLSClientRevokedServerCert{ Params :  Returns : void} testTLSRevokedClientCertServer{ Params :  Returns : void} testTLSMatchingCipherSuites{ Params :  Returns : void} testTLSNonMatchingCipherSuites{ Params :  Returns : void} testTLSMatchingProtocolVersions{ Params :  Returns : void} testTLSTrailingDotHost{ Params :  Returns : void} testTLSInvalidProtocolVersion{ Params :  Returns : void} testTLSNonMatchingProtocolVersions{ Params :  Returns : void} testTLSVerifyMatchingHost{ Params :  Returns : void} testTLSVerifyNonMatchingHost{ Params :  Returns : void} testTLSVerifyMatchingHostOpenSSL{ Params :  Returns : void} testTLSVerifyNonMatchingHostOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertJKSOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12OpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertPEMOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertWithJKSOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertWithPKCS12OpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertWithPEMOpenSSL{ Params :  Returns : void} testTLSClientCertRequiredOpenSSL{ Params :  Returns : void} testTLSClientCertPKCS12RequiredOpenSSL{ Params :  Returns : void} testTLSClientCertPEMRequiredOpenSSL{ Params :  Returns : void} testTLSv1_3{ Params :  Returns : void} testTLSv1_3OpenSSL{ Params :  Returns : void} testSNITrust{ Params :  Returns : void} testSNITrustPKCS12{ Params :  Returns : void} testSNITrustPEM{ Params :  Returns : void} testSNIServerIgnoresExtension1{ Params :  Returns : void} testSNIServerIgnoresExtension2{ Params :  Returns : void} testSNIUnknownServerName1{ Params :  Returns : void} testSNIUnknownServerName2{ Params :  Returns : void} testSNIWildcardMatch{ Params :  Returns : void} testSNIWildcardMatchPKCS12{ Params :  Returns : void} testSNIWildcardMatchPEM{ Params :  Returns : void} testSNISubjectAlternativeNameMatch1{ Params :  Returns : void} testSNISubjectAlternativeNameMatch1PKCS12{ Params :  Returns : void} testSNISubjectAlternativeNameMatch1PEM{ Params :  Returns : void} testSNISubjectAlternativeNameMatch2{ Params :  Returns : void} testSNISubjectAlternativeNameMatch2PKCS12{ Params :  Returns : void} testSNISubjectAlternativeNameMatch2PEM{ Params :  Returns : void} testSNISubjectAlternativeNameWildcardMatch{ Params :  Returns : void} testSNISubjectAlternativeNameWildcardMatchPKCS12{ Params :  Returns : void} testSNISubjectAlternativeNameWildcardMatchPEM{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch1{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch1PKCS12{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch1PEM{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch2{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch2PKCS12{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch2PEM{ Params :  Returns : void} testSNIWithALPN{ Params :  Returns : void} testSNIWithHostHeader{ Params :  Returns : void} testSNIWithOpenSSL{ Params :  Returns : void} testSNIDontSendServerNameForShortnames1{ Params :  Returns : void} testSNIDontSendServerNameForShortnames2{ Params :  Returns : void} testSNIForceSend{ Params :  Returns : void} testSNIWithServerNameTrust{ Params :  Returns : void} testSNIWithServerNameTrustFallback{ Params :  Returns : void} testSNIWithServerNameTrustFallbackFail{ Params :  Returns : void} testSNIWithServerNameTrustFail{ Params :  Returns : void} testSNICustomTrustManagerFactoryMapper{ Params :  Returns : void} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} copy{ Params :  Returns : TrustOptions} testSNICustomTrustManagerFactoryMapper2{ Params :  Returns : void} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} copy{ Params :  Returns : TrustOptions} testSniWithTrailingDotHost{ Params :  Returns : void} testCustomTrustManagerFactory{ Params :  Returns : void} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} copy{ Params :  Returns : TrustOptions} version{ Params : HttpVersion Returns : TLSTest} requiresClientAuth{ Params :  Returns : TLSTest} serverUsesCrl{ Params :  Returns : TLSTest} serverOpenSSL{ Params :  Returns : TLSTest} clientOpenSSL{ Params :  Returns : TLSTest} clientUsesCrl{ Params :  Returns : TLSTest} clientTrustAll{ Params :  Returns : TLSTest} clientVerifyHost{ Params :  Returns : TLSTest} clientVerifyHost{ Params : boolean Returns : TLSTest} clientEnabledCipherSuites{ Params : String[] Returns : TLSTest} serverEnabledCipherSuites{ Params : String[] Returns : TLSTest} clientEnabledSecureTransportProtocol{ Params : String[] Returns : TLSTest} serverEnabledSecureTransportProtocol{ Params : String[] Returns : TLSTest} serverSni{ Params :  Returns : TLSTest} clientForceSni{ Params :  Returns : TLSTest} clientUsesAlpn{ Params :  Returns : TLSTest} serverUsesAlpn{ Params :  Returns : TLSTest} useProxy{ Params : ProxyType Returns : TLSTest} useProxyAuth{ Params :  Returns : TLSTest} serverUsesProxyProtocol{ Params :  Returns : TLSTest} connectHostname{ Params : String Returns : TLSTest} connectPort{ Params : int Returns : TLSTest} requestOptions{ Params : RequestOptions Returns : TLSTest} requestProvider{ Params : Function<HttpClient,Future<HttpClientRequest>> Returns : TLSTest} clientSSL{ Params : boolean Returns : TLSTest} serverSSL{ Params : boolean Returns : TLSTest} followRedirects{ Params : boolean Returns : TLSTest} clientPeerCert{ Params :  Returns : Certificate} pass{ Params :  Returns : TLSTest} fail{ Params :  Returns : TLSTest} run{ Params : boolean Returns : TLSTest} createHttpServer{ Params : HttpServerOptions Returns : HttpServer} createHttpClient{ Params : HttpClientOptions Returns : HttpClient} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?> Returns : TLSTest} testJKSInvalidPath{ Params :  Returns : void} testJKSMissingPassword{ Params :  Returns : void} testJKSInvalidPassword{ Params :  Returns : void} testPKCS12InvalidPath{ Params :  Returns : void} testPKCS12MissingPassword{ Params :  Returns : void} testPKCS12InvalidPassword{ Params :  Returns : void} testKeyCertMissingKeyPath{ Params :  Returns : void} testKeyCertInvalidKeyPath{ Params :  Returns : void} testKeyCertMissingCertPath{ Params :  Returns : void} testKeyCertInvalidCertPath{ Params :  Returns : void} testKeyCertInvalidPem{ Params :  Returns : void} testNoKeyCert{ Params :  Returns : void} testCaInvalidPath{ Params :  Returns : void} testCaInvalidPem{ Params :  Returns : void} testInvalidKeyStore{ Params : KeyCertOptions,String,String Returns : void} testInvalidKeyStore{ Params : KeyCertOptions,List<String>,String Returns : void} testInvalidTrustStore{ Params : TrustOptions,String,String Returns : void} testStore{ Params : HttpServerOptions,List<String>,String Returns : void} testCrlInvalidPath{ Params :  Returns : void} testHttpsProxy{ Params :  Returns : void} testProxy{ Params : ProxyType Returns : void} testHttpsProxyWithSNI{ Params :  Returns : void} testProxyWithSNI{ Params : ProxyType Returns : void} testHttpsProxyAuthFail{ Params :  Returns : void} testHttpsProxyAuth{ Params :  Returns : void} testHttpsProxyUnknownHost{ Params :  Returns : void} testHttpsSocks{ Params :  Returns : void} testHttpsSocksWithSNI{ Params :  Returns : void} testHttpsSocksAuth{ Params :  Returns : void} testSocksProxyUnknownHost{ Params :  Returns : void} testHAProxy{ Params :  Returns : void} testReloadSSLOptions{ Params :  Returns : void} testEngineUseEventLoopThread{ Params :  Returns : void} testEngineUseWorkerThreads{ Params :  Returns : void} testSniEngineUseEventLoopThread{ Params :  Returns : void} testSniEngineUseWorkerThreads{ Params :  Returns : void} testUseThreadPool{ Params : boolean,boolean Returns : void} engineGetKey{ Params : String,char[] Returns : Key} addThread{ Params :  Returns : void} getPrivateExponent{ Params :  Returns : BigInteger} getAlgorithm{ Params :  Returns : String} getFormat{ Params :  Returns : String} getEncoded{ Params :  Returns : byte[]} getModulus{ Params :  Returns : BigInteger} engineGetCertificateChain{ Params : String Returns : Certificate[]} engineGetCertificate{ Params : String Returns : Certificate} engineGetCreationDate{ Params : String Returns : Date} engineSetKeyEntry{ Params : String,Key,char[],Certificate[] Returns : void} engineSetKeyEntry{ Params : String,byte[],Certificate[] Returns : void} engineSetCertificateEntry{ Params : String,Certificate Returns : void} engineDeleteEntry{ Params : String Returns : void} engineAliases{ Params :  Returns : Enumeration<String>} engineContainsAlias{ Params : String Returns : boolean} engineSize{ Params :  Returns : int} engineIsKeyEntry{ Params : String Returns : boolean} engineIsCertificateEntry{ Params : String Returns : boolean} engineGetCertificateAlias{ Params : Certificate Returns : String} engineStore{ Params : OutputStream,char[] Returns : void} engineLoad{ Params : InputStream,char[] Returns : void} copy{ Params :  Returns : KeyCertOptions} getKeyManagerFactory{ Params : Vertx Returns : KeyManagerFactory} keyManagerFactoryMapper{ Params : Vertx Returns : Function<String,KeyManagerFactory>} getClientAliases{ Params : String,Principal[] Returns : String[]} chooseClientAlias{ Params : String[],Principal[],Socket Returns : String} getServerAliases{ Params : String,Principal[] Returns : String[]} chooseServerAlias{ Params : String,Principal[],Socket Returns : String} getCertificateChain{ Params : String Returns : X509Certificate[]} getPrivateKey{ Params : String Returns : PrivateKey} ,getOptions tearDown trustManagerMapper getTrustManagerFactory engineInit engineInit engineGetTrustManagers copy trustManagerMapper getTrustManagerFactory engineInit engineInit engineGetTrustManagers copy trustManagerMapper getTrustManagerFactory engineInit engineInit engineGetTrustManagers copy engineGetKey getPrivateExponent getAlgorithm getFormat getEncoded getModulus engineGetCertificateChain engineGetCertificate engineGetCreationDate engineSetKeyEntry engineSetKeyEntry engineSetCertificateEntry engineDeleteEntry engineAliases engineContainsAlias engineSize engineIsKeyEntry engineIsCertificateEntry engineGetCertificateAlias engineStore engineLoad copy getKeyManagerFactory keyManagerFactoryMapper getClientAliases chooseClientAlias getServerAliases chooseServerAlias getCertificateChain getPrivateKey ,,,createHttpServer createHttpClient ,,,,,TemporaryFolder KeyStoreOptions KeyStoreOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions TrustOptions TrustManagerFactory TrustManagerFactorySpi RequestOptions TrustOptions TrustManagerFactory TrustManagerFactorySpi RequestOptions RequestOptions TrustOptions TrustManagerFactory TrustManagerFactorySpi RequestOptions HttpClientOptions OpenSSLEngineOptions JdkSSLEngineOptions ProxyOptions ProxyOptions HttpServerOptions OpenSSLEngineOptions AtomicInteger TLSTest PemTrustOptions PemTrustOptions HttpServerOptions HttpServerOptions HttpServerOptions AtomicReference HttpClientOptions RequestOptions HAProxy HttpClientOptions SSLOptions SSLOptions ByteArrayInputStream HashSet RSAPrivateKey UndeclaredThrowableException UndeclaredThrowableException UndeclaredThrowableException UndeclaredThrowableException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UndeclaredThrowableException UndeclaredThrowableException UndeclaredThrowableException UndeclaredThrowableException UndeclaredThrowableException UnsupportedOperationException UnsupportedOperationException KeyStore TestKeyStoreSpi ByteArrayInputStream KeyCertOptions KeyStoreHelper X509KeyManager UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException JdkSSLEngineOptions RequestOptions CountDownLatch HttpClientOptions ,: , numWorkers > 0
vert.x-master,io.vertx.core.http,TLSTest,3,0,0,0,0,false,HttpTestBase ,0 ,TLSTest ,version: HttpVersion clientCert: KeyCertOptions clientTrust: TrustOptions clientTrustAll: boolean clientUsesCrl: boolean clientUsesAlpn: boolean clientOpenSSL: boolean clientVerifyHost: boolean clientSSL: boolean requiresClientAuth: boolean serverCert: KeyCertOptions serverTrust: TrustOptions serverUsesCrl: boolean serverOpenSSL: boolean serverUsesAlpn: boolean serverSSL: boolean serverUsesProxyProtocol: boolean proxyType: ProxyType useProxyAuth: boolean clientEnabledCipherSuites: String serverEnabledCipherSuites: String clientEnabledSecureTransportProtocol: String serverEnabledSecureTransportProtocol: String connectHostname: String connectPort: Integer followRedirects: boolean serverSNI: boolean clientForceSNI: boolean requestProvider: Function<HttpClient, Future<HttpClientRequest>> clientPeerCert: Certificate indicatedServerName: String ,getOptions{ Params :  Returns : VertxOptions} tearDown{ Params :  Returns : void} testTLSClientTrustAll{ Params :  Returns : void} testTLSClientTrustServerCert{ Params :  Returns : void} testTLSClientTrustServerCertKeyStore{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12{ Params :  Returns : void} testTLSClientTrustServerCertPEM{ Params :  Returns : void} testTLSClientTrustServerCertJKSRootCAWithJKSRootCA{ Params :  Returns : void} testTLSClientTrustServerCertJKSRootCAWithPKCS12RootCA{ Params :  Returns : void} testTLSClientTrustServerCertJKSRootRootCAWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12RootCAWithJKSRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12RootCAWithPKCS12RootCA{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12RootCAWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithJKSRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithPKCS12RootCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertMultiPemWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertMultiPemWithPEMOtherCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithPEMCAChain{ Params :  Returns : void} testTLSClientUntrustedServerCertPEMRootCAWithPEMCA{ Params :  Returns : void} testTLSClientTrustPKCS12ServerCert{ Params :  Returns : void} testTLSClientTrustPEMServerCert{ Params :  Returns : void} testTLSClientUntrustedServer{ Params :  Returns : void} testTLSClientUntrustedServerPEM{ Params :  Returns : void} testTLSClientCertNotRequired{ Params :  Returns : void} testTLSClientCertNotRequiredPEM{ Params :  Returns : void} testTLSClientCertRequired{ Params :  Returns : void} testTLSClientCertRequiredPKCS12{ Params :  Returns : void} testTLSClientCertRequiredPEM{ Params :  Returns : void} testTLSClientCertPKCS12Required{ Params :  Returns : void} testTLSClientCertPEMRequired{ Params :  Returns : void} testTLSClientCertPEM_CARequired{ Params :  Returns : void} testTLSClientCertRequiredNoClientCert{ Params :  Returns : void} testTLSClientCertClientNotTrusted{ Params :  Returns : void} testTLSClientRevokedServerCert{ Params :  Returns : void} testTLSRevokedClientCertServer{ Params :  Returns : void} testTLSMatchingCipherSuites{ Params :  Returns : void} testTLSNonMatchingCipherSuites{ Params :  Returns : void} testTLSMatchingProtocolVersions{ Params :  Returns : void} testTLSTrailingDotHost{ Params :  Returns : void} testTLSInvalidProtocolVersion{ Params :  Returns : void} testTLSNonMatchingProtocolVersions{ Params :  Returns : void} testTLSVerifyMatchingHost{ Params :  Returns : void} testTLSVerifyNonMatchingHost{ Params :  Returns : void} testTLSVerifyMatchingHostOpenSSL{ Params :  Returns : void} testTLSVerifyNonMatchingHostOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertJKSOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12OpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertPEMOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertWithJKSOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertWithPKCS12OpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertWithPEMOpenSSL{ Params :  Returns : void} testTLSClientCertRequiredOpenSSL{ Params :  Returns : void} testTLSClientCertPKCS12RequiredOpenSSL{ Params :  Returns : void} testTLSClientCertPEMRequiredOpenSSL{ Params :  Returns : void} testTLSv1_3{ Params :  Returns : void} testTLSv1_3OpenSSL{ Params :  Returns : void} testSNITrust{ Params :  Returns : void} testSNITrustPKCS12{ Params :  Returns : void} testSNITrustPEM{ Params :  Returns : void} testSNIServerIgnoresExtension1{ Params :  Returns : void} testSNIServerIgnoresExtension2{ Params :  Returns : void} testSNIUnknownServerName1{ Params :  Returns : void} testSNIUnknownServerName2{ Params :  Returns : void} testSNIWildcardMatch{ Params :  Returns : void} testSNIWildcardMatchPKCS12{ Params :  Returns : void} testSNIWildcardMatchPEM{ Params :  Returns : void} testSNISubjectAlternativeNameMatch1{ Params :  Returns : void} testSNISubjectAlternativeNameMatch1PKCS12{ Params :  Returns : void} testSNISubjectAlternativeNameMatch1PEM{ Params :  Returns : void} testSNISubjectAlternativeNameMatch2{ Params :  Returns : void} testSNISubjectAlternativeNameMatch2PKCS12{ Params :  Returns : void} testSNISubjectAlternativeNameMatch2PEM{ Params :  Returns : void} testSNISubjectAlternativeNameWildcardMatch{ Params :  Returns : void} testSNISubjectAlternativeNameWildcardMatchPKCS12{ Params :  Returns : void} testSNISubjectAlternativeNameWildcardMatchPEM{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch1{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch1PKCS12{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch1PEM{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch2{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch2PKCS12{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch2PEM{ Params :  Returns : void} testSNIWithALPN{ Params :  Returns : void} testSNIWithHostHeader{ Params :  Returns : void} testSNIWithOpenSSL{ Params :  Returns : void} testSNIDontSendServerNameForShortnames1{ Params :  Returns : void} testSNIDontSendServerNameForShortnames2{ Params :  Returns : void} testSNIForceSend{ Params :  Returns : void} testSNIWithServerNameTrust{ Params :  Returns : void} testSNIWithServerNameTrustFallback{ Params :  Returns : void} testSNIWithServerNameTrustFallbackFail{ Params :  Returns : void} testSNIWithServerNameTrustFail{ Params :  Returns : void} testSNICustomTrustManagerFactoryMapper{ Params :  Returns : void} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} copy{ Params :  Returns : TrustOptions} testSNICustomTrustManagerFactoryMapper2{ Params :  Returns : void} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} copy{ Params :  Returns : TrustOptions} testSniWithTrailingDotHost{ Params :  Returns : void} testCustomTrustManagerFactory{ Params :  Returns : void} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} copy{ Params :  Returns : TrustOptions} version{ Params : HttpVersion Returns : TLSTest} requiresClientAuth{ Params :  Returns : TLSTest} serverUsesCrl{ Params :  Returns : TLSTest} serverOpenSSL{ Params :  Returns : TLSTest} clientOpenSSL{ Params :  Returns : TLSTest} clientUsesCrl{ Params :  Returns : TLSTest} clientTrustAll{ Params :  Returns : TLSTest} clientVerifyHost{ Params :  Returns : TLSTest} clientVerifyHost{ Params : boolean Returns : TLSTest} clientEnabledCipherSuites{ Params : String[] Returns : TLSTest} serverEnabledCipherSuites{ Params : String[] Returns : TLSTest} clientEnabledSecureTransportProtocol{ Params : String[] Returns : TLSTest} serverEnabledSecureTransportProtocol{ Params : String[] Returns : TLSTest} serverSni{ Params :  Returns : TLSTest} clientForceSni{ Params :  Returns : TLSTest} clientUsesAlpn{ Params :  Returns : TLSTest} serverUsesAlpn{ Params :  Returns : TLSTest} useProxy{ Params : ProxyType Returns : TLSTest} useProxyAuth{ Params :  Returns : TLSTest} serverUsesProxyProtocol{ Params :  Returns : TLSTest} connectHostname{ Params : String Returns : TLSTest} connectPort{ Params : int Returns : TLSTest} requestOptions{ Params : RequestOptions Returns : TLSTest} requestProvider{ Params : Function<HttpClient,Future<HttpClientRequest>> Returns : TLSTest} clientSSL{ Params : boolean Returns : TLSTest} serverSSL{ Params : boolean Returns : TLSTest} followRedirects{ Params : boolean Returns : TLSTest} clientPeerCert{ Params :  Returns : Certificate} pass{ Params :  Returns : TLSTest} fail{ Params :  Returns : TLSTest} run{ Params : boolean Returns : TLSTest} createHttpServer{ Params : HttpServerOptions Returns : HttpServer} createHttpClient{ Params : HttpClientOptions Returns : HttpClient} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?> Returns : TLSTest} testJKSInvalidPath{ Params :  Returns : void} testJKSMissingPassword{ Params :  Returns : void} testJKSInvalidPassword{ Params :  Returns : void} testPKCS12InvalidPath{ Params :  Returns : void} testPKCS12MissingPassword{ Params :  Returns : void} testPKCS12InvalidPassword{ Params :  Returns : void} testKeyCertMissingKeyPath{ Params :  Returns : void} testKeyCertInvalidKeyPath{ Params :  Returns : void} testKeyCertMissingCertPath{ Params :  Returns : void} testKeyCertInvalidCertPath{ Params :  Returns : void} testKeyCertInvalidPem{ Params :  Returns : void} testNoKeyCert{ Params :  Returns : void} testCaInvalidPath{ Params :  Returns : void} testCaInvalidPem{ Params :  Returns : void} testInvalidKeyStore{ Params : KeyCertOptions,String,String Returns : void} testInvalidKeyStore{ Params : KeyCertOptions,List<String>,String Returns : void} testInvalidTrustStore{ Params : TrustOptions,String,String Returns : void} testStore{ Params : HttpServerOptions,List<String>,String Returns : void} testCrlInvalidPath{ Params :  Returns : void} testHttpsProxy{ Params :  Returns : void} testProxy{ Params : ProxyType Returns : void} testHttpsProxyWithSNI{ Params :  Returns : void} testProxyWithSNI{ Params : ProxyType Returns : void} testHttpsProxyAuthFail{ Params :  Returns : void} testHttpsProxyAuth{ Params :  Returns : void} testHttpsProxyUnknownHost{ Params :  Returns : void} testHttpsSocks{ Params :  Returns : void} testHttpsSocksWithSNI{ Params :  Returns : void} testHttpsSocksAuth{ Params :  Returns : void} testSocksProxyUnknownHost{ Params :  Returns : void} testHAProxy{ Params :  Returns : void} testReloadSSLOptions{ Params :  Returns : void} testEngineUseEventLoopThread{ Params :  Returns : void} testEngineUseWorkerThreads{ Params :  Returns : void} testSniEngineUseEventLoopThread{ Params :  Returns : void} testSniEngineUseWorkerThreads{ Params :  Returns : void} testUseThreadPool{ Params : boolean,boolean Returns : void} engineGetKey{ Params : String,char[] Returns : Key} addThread{ Params :  Returns : void} getPrivateExponent{ Params :  Returns : BigInteger} getAlgorithm{ Params :  Returns : String} getFormat{ Params :  Returns : String} getEncoded{ Params :  Returns : byte[]} getModulus{ Params :  Returns : BigInteger} engineGetCertificateChain{ Params : String Returns : Certificate[]} engineGetCertificate{ Params : String Returns : Certificate} engineGetCreationDate{ Params : String Returns : Date} engineSetKeyEntry{ Params : String,Key,char[],Certificate[] Returns : void} engineSetKeyEntry{ Params : String,byte[],Certificate[] Returns : void} engineSetCertificateEntry{ Params : String,Certificate Returns : void} engineDeleteEntry{ Params : String Returns : void} engineAliases{ Params :  Returns : Enumeration<String>} engineContainsAlias{ Params : String Returns : boolean} engineSize{ Params :  Returns : int} engineIsKeyEntry{ Params : String Returns : boolean} engineIsCertificateEntry{ Params : String Returns : boolean} engineGetCertificateAlias{ Params : Certificate Returns : String} engineStore{ Params : OutputStream,char[] Returns : void} engineLoad{ Params : InputStream,char[] Returns : void} copy{ Params :  Returns : KeyCertOptions} getKeyManagerFactory{ Params : Vertx Returns : KeyManagerFactory} keyManagerFactoryMapper{ Params : Vertx Returns : Function<String,KeyManagerFactory>} getClientAliases{ Params : String,Principal[] Returns : String[]} chooseClientAlias{ Params : String[],Principal[],Socket Returns : String} getServerAliases{ Params : String,Principal[] Returns : String[]} chooseServerAlias{ Params : String,Principal[],Socket Returns : String} getCertificateChain{ Params : String Returns : X509Certificate[]} getPrivateKey{ Params : String Returns : PrivateKey} ,getOptions tearDown trustManagerMapper getTrustManagerFactory engineInit engineInit engineGetTrustManagers copy trustManagerMapper getTrustManagerFactory engineInit engineInit engineGetTrustManagers copy trustManagerMapper getTrustManagerFactory engineInit engineInit engineGetTrustManagers copy engineGetKey getPrivateExponent getAlgorithm getFormat getEncoded getModulus engineGetCertificateChain engineGetCertificate engineGetCreationDate engineSetKeyEntry engineSetKeyEntry engineSetCertificateEntry engineDeleteEntry engineAliases engineContainsAlias engineSize engineIsKeyEntry engineIsCertificateEntry engineGetCertificateAlias engineStore engineLoad copy getKeyManagerFactory keyManagerFactoryMapper getClientAliases chooseClientAlias getServerAliases chooseServerAlias getCertificateChain getPrivateKey ,,,createHttpServer createHttpClient ,,,,,RequestOptions HttpClientOptions OpenSSLEngineOptions JdkSSLEngineOptions ProxyOptions ProxyOptions HttpServerOptions OpenSSLEngineOptions AtomicInteger ,: 
vert.x-master,io.vertx.core.http,TestKeyStoreSpi,1,0,0,0,0,false,HttpTestBase ,0 ,TLSTest ,,getOptions{ Params :  Returns : VertxOptions} tearDown{ Params :  Returns : void} testTLSClientTrustAll{ Params :  Returns : void} testTLSClientTrustServerCert{ Params :  Returns : void} testTLSClientTrustServerCertKeyStore{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12{ Params :  Returns : void} testTLSClientTrustServerCertPEM{ Params :  Returns : void} testTLSClientTrustServerCertJKSRootCAWithJKSRootCA{ Params :  Returns : void} testTLSClientTrustServerCertJKSRootCAWithPKCS12RootCA{ Params :  Returns : void} testTLSClientTrustServerCertJKSRootRootCAWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12RootCAWithJKSRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12RootCAWithPKCS12RootCA{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12RootCAWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithJKSRootCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithPKCS12RootCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertMultiPemWithPEMRootCA{ Params :  Returns : void} testTLSClientTrustServerCertMultiPemWithPEMOtherCA{ Params :  Returns : void} testTLSClientTrustServerCertPEMRootCAWithPEMCAChain{ Params :  Returns : void} testTLSClientUntrustedServerCertPEMRootCAWithPEMCA{ Params :  Returns : void} testTLSClientTrustPKCS12ServerCert{ Params :  Returns : void} testTLSClientTrustPEMServerCert{ Params :  Returns : void} testTLSClientUntrustedServer{ Params :  Returns : void} testTLSClientUntrustedServerPEM{ Params :  Returns : void} testTLSClientCertNotRequired{ Params :  Returns : void} testTLSClientCertNotRequiredPEM{ Params :  Returns : void} testTLSClientCertRequired{ Params :  Returns : void} testTLSClientCertRequiredPKCS12{ Params :  Returns : void} testTLSClientCertRequiredPEM{ Params :  Returns : void} testTLSClientCertPKCS12Required{ Params :  Returns : void} testTLSClientCertPEMRequired{ Params :  Returns : void} testTLSClientCertPEM_CARequired{ Params :  Returns : void} testTLSClientCertRequiredNoClientCert{ Params :  Returns : void} testTLSClientCertClientNotTrusted{ Params :  Returns : void} testTLSClientRevokedServerCert{ Params :  Returns : void} testTLSRevokedClientCertServer{ Params :  Returns : void} testTLSMatchingCipherSuites{ Params :  Returns : void} testTLSNonMatchingCipherSuites{ Params :  Returns : void} testTLSMatchingProtocolVersions{ Params :  Returns : void} testTLSTrailingDotHost{ Params :  Returns : void} testTLSInvalidProtocolVersion{ Params :  Returns : void} testTLSNonMatchingProtocolVersions{ Params :  Returns : void} testTLSVerifyMatchingHost{ Params :  Returns : void} testTLSVerifyNonMatchingHost{ Params :  Returns : void} testTLSVerifyMatchingHostOpenSSL{ Params :  Returns : void} testTLSVerifyNonMatchingHostOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertJKSOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12OpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertPEMOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertWithJKSOpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertWithPKCS12OpenSSL{ Params :  Returns : void} testTLSClientTrustServerCertWithPEMOpenSSL{ Params :  Returns : void} testTLSClientCertRequiredOpenSSL{ Params :  Returns : void} testTLSClientCertPKCS12RequiredOpenSSL{ Params :  Returns : void} testTLSClientCertPEMRequiredOpenSSL{ Params :  Returns : void} testTLSv1_3{ Params :  Returns : void} testTLSv1_3OpenSSL{ Params :  Returns : void} testSNITrust{ Params :  Returns : void} testSNITrustPKCS12{ Params :  Returns : void} testSNITrustPEM{ Params :  Returns : void} testSNIServerIgnoresExtension1{ Params :  Returns : void} testSNIServerIgnoresExtension2{ Params :  Returns : void} testSNIUnknownServerName1{ Params :  Returns : void} testSNIUnknownServerName2{ Params :  Returns : void} testSNIWildcardMatch{ Params :  Returns : void} testSNIWildcardMatchPKCS12{ Params :  Returns : void} testSNIWildcardMatchPEM{ Params :  Returns : void} testSNISubjectAlternativeNameMatch1{ Params :  Returns : void} testSNISubjectAlternativeNameMatch1PKCS12{ Params :  Returns : void} testSNISubjectAlternativeNameMatch1PEM{ Params :  Returns : void} testSNISubjectAlternativeNameMatch2{ Params :  Returns : void} testSNISubjectAlternativeNameMatch2PKCS12{ Params :  Returns : void} testSNISubjectAlternativeNameMatch2PEM{ Params :  Returns : void} testSNISubjectAlternativeNameWildcardMatch{ Params :  Returns : void} testSNISubjectAlternativeNameWildcardMatchPKCS12{ Params :  Returns : void} testSNISubjectAlternativeNameWildcardMatchPEM{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch1{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch1PKCS12{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch1PEM{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch2{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch2PKCS12{ Params :  Returns : void} testSNISubjectAltenativeNameCNMatch2PEM{ Params :  Returns : void} testSNIWithALPN{ Params :  Returns : void} testSNIWithHostHeader{ Params :  Returns : void} testSNIWithOpenSSL{ Params :  Returns : void} testSNIDontSendServerNameForShortnames1{ Params :  Returns : void} testSNIDontSendServerNameForShortnames2{ Params :  Returns : void} testSNIForceSend{ Params :  Returns : void} testSNIWithServerNameTrust{ Params :  Returns : void} testSNIWithServerNameTrustFallback{ Params :  Returns : void} testSNIWithServerNameTrustFallbackFail{ Params :  Returns : void} testSNIWithServerNameTrustFail{ Params :  Returns : void} testSNICustomTrustManagerFactoryMapper{ Params :  Returns : void} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} copy{ Params :  Returns : TrustOptions} testSNICustomTrustManagerFactoryMapper2{ Params :  Returns : void} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} copy{ Params :  Returns : TrustOptions} testSniWithTrailingDotHost{ Params :  Returns : void} testCustomTrustManagerFactory{ Params :  Returns : void} trustManagerMapper{ Params : Vertx Returns : Function<String,TrustManager[]>} getTrustManagerFactory{ Params : Vertx Returns : TrustManagerFactory} engineInit{ Params : KeyStore Returns : void} engineInit{ Params : ManagerFactoryParameters Returns : void} engineGetTrustManagers{ Params :  Returns : TrustManager[]} copy{ Params :  Returns : TrustOptions} version{ Params : HttpVersion Returns : TLSTest} requiresClientAuth{ Params :  Returns : TLSTest} serverUsesCrl{ Params :  Returns : TLSTest} serverOpenSSL{ Params :  Returns : TLSTest} clientOpenSSL{ Params :  Returns : TLSTest} clientUsesCrl{ Params :  Returns : TLSTest} clientTrustAll{ Params :  Returns : TLSTest} clientVerifyHost{ Params :  Returns : TLSTest} clientVerifyHost{ Params : boolean Returns : TLSTest} clientEnabledCipherSuites{ Params : String[] Returns : TLSTest} serverEnabledCipherSuites{ Params : String[] Returns : TLSTest} clientEnabledSecureTransportProtocol{ Params : String[] Returns : TLSTest} serverEnabledSecureTransportProtocol{ Params : String[] Returns : TLSTest} serverSni{ Params :  Returns : TLSTest} clientForceSni{ Params :  Returns : TLSTest} clientUsesAlpn{ Params :  Returns : TLSTest} serverUsesAlpn{ Params :  Returns : TLSTest} useProxy{ Params : ProxyType Returns : TLSTest} useProxyAuth{ Params :  Returns : TLSTest} serverUsesProxyProtocol{ Params :  Returns : TLSTest} connectHostname{ Params : String Returns : TLSTest} connectPort{ Params : int Returns : TLSTest} requestOptions{ Params : RequestOptions Returns : TLSTest} requestProvider{ Params : Function<HttpClient,Future<HttpClientRequest>> Returns : TLSTest} clientSSL{ Params : boolean Returns : TLSTest} serverSSL{ Params : boolean Returns : TLSTest} followRedirects{ Params : boolean Returns : TLSTest} clientPeerCert{ Params :  Returns : Certificate} pass{ Params :  Returns : TLSTest} fail{ Params :  Returns : TLSTest} run{ Params : boolean Returns : TLSTest} createHttpServer{ Params : HttpServerOptions Returns : HttpServer} createHttpClient{ Params : HttpClientOptions Returns : HttpClient} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?> Returns : TLSTest} testJKSInvalidPath{ Params :  Returns : void} testJKSMissingPassword{ Params :  Returns : void} testJKSInvalidPassword{ Params :  Returns : void} testPKCS12InvalidPath{ Params :  Returns : void} testPKCS12MissingPassword{ Params :  Returns : void} testPKCS12InvalidPassword{ Params :  Returns : void} testKeyCertMissingKeyPath{ Params :  Returns : void} testKeyCertInvalidKeyPath{ Params :  Returns : void} testKeyCertMissingCertPath{ Params :  Returns : void} testKeyCertInvalidCertPath{ Params :  Returns : void} testKeyCertInvalidPem{ Params :  Returns : void} testNoKeyCert{ Params :  Returns : void} testCaInvalidPath{ Params :  Returns : void} testCaInvalidPem{ Params :  Returns : void} testInvalidKeyStore{ Params : KeyCertOptions,String,String Returns : void} testInvalidKeyStore{ Params : KeyCertOptions,List<String>,String Returns : void} testInvalidTrustStore{ Params : TrustOptions,String,String Returns : void} testStore{ Params : HttpServerOptions,List<String>,String Returns : void} testCrlInvalidPath{ Params :  Returns : void} testHttpsProxy{ Params :  Returns : void} testProxy{ Params : ProxyType Returns : void} testHttpsProxyWithSNI{ Params :  Returns : void} testProxyWithSNI{ Params : ProxyType Returns : void} testHttpsProxyAuthFail{ Params :  Returns : void} testHttpsProxyAuth{ Params :  Returns : void} testHttpsProxyUnknownHost{ Params :  Returns : void} testHttpsSocks{ Params :  Returns : void} testHttpsSocksWithSNI{ Params :  Returns : void} testHttpsSocksAuth{ Params :  Returns : void} testSocksProxyUnknownHost{ Params :  Returns : void} testHAProxy{ Params :  Returns : void} testReloadSSLOptions{ Params :  Returns : void} testEngineUseEventLoopThread{ Params :  Returns : void} testEngineUseWorkerThreads{ Params :  Returns : void} testSniEngineUseEventLoopThread{ Params :  Returns : void} testSniEngineUseWorkerThreads{ Params :  Returns : void} testUseThreadPool{ Params : boolean,boolean Returns : void} engineGetKey{ Params : String,char[] Returns : Key} addThread{ Params :  Returns : void} getPrivateExponent{ Params :  Returns : BigInteger} getAlgorithm{ Params :  Returns : String} getFormat{ Params :  Returns : String} getEncoded{ Params :  Returns : byte[]} getModulus{ Params :  Returns : BigInteger} engineGetCertificateChain{ Params : String Returns : Certificate[]} engineGetCertificate{ Params : String Returns : Certificate} engineGetCreationDate{ Params : String Returns : Date} engineSetKeyEntry{ Params : String,Key,char[],Certificate[] Returns : void} engineSetKeyEntry{ Params : String,byte[],Certificate[] Returns : void} engineSetCertificateEntry{ Params : String,Certificate Returns : void} engineDeleteEntry{ Params : String Returns : void} engineAliases{ Params :  Returns : Enumeration<String>} engineContainsAlias{ Params : String Returns : boolean} engineSize{ Params :  Returns : int} engineIsKeyEntry{ Params : String Returns : boolean} engineIsCertificateEntry{ Params : String Returns : boolean} engineGetCertificateAlias{ Params : Certificate Returns : String} engineStore{ Params : OutputStream,char[] Returns : void} engineLoad{ Params : InputStream,char[] Returns : void} copy{ Params :  Returns : KeyCertOptions} getKeyManagerFactory{ Params : Vertx Returns : KeyManagerFactory} keyManagerFactoryMapper{ Params : Vertx Returns : Function<String,KeyManagerFactory>} getClientAliases{ Params : String,Principal[] Returns : String[]} chooseClientAlias{ Params : String[],Principal[],Socket Returns : String} getServerAliases{ Params : String,Principal[] Returns : String[]} chooseServerAlias{ Params : String,Principal[],Socket Returns : String} getCertificateChain{ Params : String Returns : X509Certificate[]} getPrivateKey{ Params : String Returns : PrivateKey} ,getOptions tearDown trustManagerMapper getTrustManagerFactory engineInit engineInit engineGetTrustManagers copy trustManagerMapper getTrustManagerFactory engineInit engineInit engineGetTrustManagers copy trustManagerMapper getTrustManagerFactory engineInit engineInit engineGetTrustManagers copy engineGetKey getPrivateExponent getAlgorithm getFormat getEncoded getModulus engineGetCertificateChain engineGetCertificate engineGetCreationDate engineSetKeyEntry engineSetKeyEntry engineSetCertificateEntry engineDeleteEntry engineAliases engineContainsAlias engineSize engineIsKeyEntry engineIsCertificateEntry engineGetCertificateAlias engineStore engineLoad copy getKeyManagerFactory keyManagerFactoryMapper getClientAliases chooseClientAlias getServerAliases chooseServerAlias getCertificateChain getPrivateKey ,,,createHttpServer createHttpClient ,,,,,RSAPrivateKey UndeclaredThrowableException UndeclaredThrowableException UndeclaredThrowableException UndeclaredThrowableException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UndeclaredThrowableException UndeclaredThrowableException UndeclaredThrowableException UndeclaredThrowableException UndeclaredThrowableException UnsupportedOperationException UnsupportedOperationException ,ks: , alias
vert.x-master,io.vertx.core.http,HttpUtilsTest,1,1,0,0,0,false,0 ,0 ,0 ,HEADER_NAME_ALLOWED_CHARS: Set<Byte> ,testParseKeepAliveTimeout{ Params :  Returns : void} assertKeepAliveTimeout{ Params : CharSequence,int Returns : void} testResolveUri{ Params :  Returns : void} testNoLeadingSlash{ Params :  Returns : void} testNullPath{ Params :  Returns : void} testPathWithSpaces1{ Params :  Returns : void} testPathWithSpaces2{ Params :  Returns : void} testDodgyPath1{ Params :  Returns : void} testDodgyPath2{ Params :  Returns : void} testDodgyPath3{ Params :  Returns : void} testDodgyPath4{ Params :  Returns : void} testMultipleSlashPath1{ Params :  Returns : void} testMultipleSlashPath2{ Params :  Returns : void} testMultipleSlashPath3{ Params :  Returns : void} testMultipleSlashPath4{ Params :  Returns : void} testSlashesAndDodgyPath1{ Params :  Returns : void} testSlashesAndDodgyPath2{ Params :  Returns : void} testSlashesAndDodgyPath3{ Params :  Returns : void} testDodgyPathEncoded{ Params :  Returns : void} testTrailingSlash{ Params :  Returns : void} testMultipleTrailingSlashes1{ Params :  Returns : void} testMultipleTrailingSlashes2{ Params :  Returns : void} testBadURL{ Params :  Returns : void} testDoubleDot{ Params :  Returns : void} testSpec{ Params :  Returns : void} assertResolveUri{ Params : String,String,String Returns : void} testResolveURIEncode{ Params :  Returns : void} check{ Params : String,String,String Returns : void} ,,assertKeepAliveTimeout ,,,,,,,,uri: 
vert.x-master,io.vertx.core.http.impl,CookieJarTest,1,1,0,0,0,false,0 ,0 ,0 ,,testInsert{ Params :  Returns : void} testReplace{ Params :  Returns : void} testSameName{ Params :  Returns : void} testFilterByName{ Params :  Returns : void} testFilterByUniqueId{ Params :  Returns : void} testRemoveFromIterator{ Params :  Returns : void} testRemoveFromIteratorSubJar{ Params :  Returns : void} testPropertyPropagation{ Params :  Returns : void} ,,,,,,,,,CookieJar CookieImpl CookieImpl CookieImpl CookieJar CookieImpl CookieImpl CookieJar CookieImpl CookieImpl CookieImpl CookieImpl CookieImpl CookieImpl CookieImpl CookieJar CookieImpl CookieImpl CookieImpl CookieJar CookieImpl CookieImpl CookieImpl CookieJar CookieImpl CookieImpl CookieImpl CookieJar CookieImpl CookieImpl CookieImpl CookieJar CookieImpl ,jar: , "a"
vert.x-master,io.vertx.core.http.impl,EndPointKeyTest,1,1,0,0,0,false,0 ,0 ,0 ,,testEndPointKey{ Params :  Returns : void} ,,,,,,,,,EndpointKey ProxyOptions EndpointKey ProxyOptions EndpointKey ProxyOptions EndpointKey ProxyOptions EndpointKey ProxyOptions EndpointKey ProxyOptions ,key6: 
vert.x-master,io.vertx.core.http.impl,HttpClientRequestBaseTest,1,1,0,0,0,false,HttpTestBase ,0 ,0 ,,testPathCacheAndQueryCache{ Params :  Returns : void} ,,,,,,,,,RequestOptions ,: 
vert.x-master,io.vertx.core.http,RequestOptionsTest,1,1,0,0,0,false,0 ,0 ,0 ,,testDefaults{ Params :  Returns : void} testCopy{ Params :  Returns : void} testToJson{ Params :  Returns : void} testFromJson{ Params :  Returns : void} testHeaderNameValidation{ Params :  Returns : void} testHeaderValueValidation{ Params :  Returns : void} ,,,,,,,,,RequestOptions RequestOptions RequestOptions RequestOptions JsonObject JsonObject JsonArray JsonObject JsonObject JsonArray RequestOptions RequestOptions RequestOptions ,new RequestOptions(): , "invalid-header-value", "\r"
vert.x-master,io.vertx.core.http,SharedHttpClientTest,1,1,0,0,0,false,VertxTestBase ,0 ,ClientVerticle ServerVerticle ,SHARED_POOL_SIZE: int CLIENT_VERTICLE_INSTANCES: int NUM_REQUESTS_PER_VERTICLE: int TOTAL_REQUESTS: int ,testVerticlesUseSamePool{ Params :  Returns : void} testSharedPoolClosedAutomatically{ Params :  Returns : void} testSharedPoolRetainedByOtherDeployment{ Params :  Returns : void} start{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} handle{ Params : Message<Integer> Returns : void} start{ Params : Promise<Void> Returns : void} handle{ Params : HttpServerRequest Returns : void} httpClientOptions{ Params : ServerVerticle,int Returns : HttpClientOptions} deploymentOptions{ Params : int,HttpClientOptions Returns : DeploymentOptions} ,start start handle start handle ,httpClientOptions deploymentOptions ,,,,,,,CountDownLatch ServerVerticle ClientVerticle CountDownLatch ServerVerticle AtomicReference ClientVerticle CountDownLatch CountDownLatch ServerVerticle AtomicReference ClientVerticle CountDownLatch AbstractVerticle HttpClientOptions CountDownLatch HttpClientOptions HashSet HttpClientOptions DeploymentOptions JsonObject ,options: 
vert.x-master,io.vertx.core.http,ClientVerticle,3,2,0,1,0,false,VertxTestBase ,0 ,ClientVerticle ServerVerticle ,TRIGGER_ADDRESS: String SHARED_CLIENT_NAME: String onResponseReceived: Consumer<ClientVerticle> context: Context client: HttpClient ,testVerticlesUseSamePool{ Params :  Returns : void} testSharedPoolClosedAutomatically{ Params :  Returns : void} testSharedPoolRetainedByOtherDeployment{ Params :  Returns : void} start{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} handle{ Params : Message<Integer> Returns : void} start{ Params : Promise<Void> Returns : void} handle{ Params : HttpServerRequest Returns : void} httpClientOptions{ Params : ServerVerticle,int Returns : HttpClientOptions} deploymentOptions{ Params : int,HttpClientOptions Returns : DeploymentOptions} ,start start handle start handle ,httpClientOptions deploymentOptions ,,,Handler ,,,,HttpClientOptions ,onResponseReceived: , this
vert.x-master,io.vertx.core.http,ServerVerticle,3,2,0,1,0,false,VertxTestBase ,0 ,ClientVerticle ServerVerticle ,replyLatch: Promise<Void> connections: Set<HttpConnection> maxConnections: int ,testVerticlesUseSamePool{ Params :  Returns : void} testSharedPoolClosedAutomatically{ Params :  Returns : void} testSharedPoolRetainedByOtherDeployment{ Params :  Returns : void} start{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} handle{ Params : Message<Integer> Returns : void} start{ Params : Promise<Void> Returns : void} handle{ Params : HttpServerRequest Returns : void} httpClientOptions{ Params : ServerVerticle,int Returns : HttpClientOptions} deploymentOptions{ Params : int,HttpClientOptions Returns : DeploymentOptions} ,start start handle start handle ,httpClientOptions deploymentOptions ,,,Handler ,,,,HashSet ,req: 
vert.x-master,io.vertx.core.http,WebSocketTest,1,1,0,0,0,false,VertxTestBase ,0 ,SocketMessages ,TEST_REASON: String TEST_STATUS_CODE: short client: HttpClient server: HttpServer netServer: NetServer INVALID_MISSING_CONNECTION_HEADER: Consumer<Handler<AsyncResult<HttpClientResponse>>> INVALID_HTTP_METHOD: Consumer<Handler<AsyncResult<HttpClientResponse>>> INVALID_URI: Consumer<Handler<AsyncResult<HttpClientResponse>>> INVALID_WEBSOCKET_VERSION: Consumer<Handler<AsyncResult<HttpClientResponse>>> HANDSHAKE_EXCEPTION: Consumer<Handler<AsyncResult<HttpClientResponse>>> resultQueue: BlockingQueue<Throwable> ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} getOptions{ Params :  Returns : VertxOptions} testRejectHybi00{ Params :  Returns : void} testRejectHybi08{ Params :  Returns : void} testRejectWithStatusCode{ Params :  Returns : void} testWSBinaryHybi00{ Params :  Returns : void} testWSStringHybi00{ Params :  Returns : void} testWSBinaryHybi08{ Params :  Returns : void} testWSStringHybi08{ Params :  Returns : void} testWSBinaryHybi17{ Params :  Returns : void} testWSStringHybi17{ Params :  Returns : void} testWSStreamsHybi00{ Params :  Returns : void} testWSStreamsHybi08{ Params :  Returns : void} testWSStreamsHybi17{ Params :  Returns : void} testWriteFromConnectHybi00{ Params :  Returns : void} testWriteFromConnectHybi08{ Params :  Returns : void} testWriteFromConnectHybi17{ Params :  Returns : void} testContinuationWriteFromConnectHybi08{ Params :  Returns : void} testContinuationWriteFromConnectHybi17{ Params :  Returns : void} testValidSubProtocolHybi00{ Params :  Returns : void} testValidSubProtocolHybi08{ Params :  Returns : void} testValidSubProtocolHybi17{ Params :  Returns : void} testInvalidSubProtocolHybi00{ Params :  Returns : void} testInvalidSubProtocolHybi08{ Params :  Returns : void} testInvalidSubProtocolHybi17{ Params :  Returns : void} testTLSClientTrustAll{ Params :  Returns : void} testTLSClientTrustServerCert{ Params :  Returns : void} testTLSClientTrustServerCertWithSNI{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12{ Params :  Returns : void} testTLSClientTrustServerCertPEM{ Params :  Returns : void} testTLSClientTrustServerCertPEM_CA{ Params :  Returns : void} testTLSClientTrustPKCS12ServerCert{ Params :  Returns : void} testTLSClientTrustPEMServerCert{ Params :  Returns : void} testTLSClientUntrustedServer{ Params :  Returns : void} testTLSClientCertNotRequired{ Params :  Returns : void} testTLSClientCertRequired{ Params :  Returns : void} testTLSClientCertRequiredPKCS12{ Params :  Returns : void} testTLSClientCertRequiredPEM{ Params :  Returns : void} testTLSClientCertPKCS12Required{ Params :  Returns : void} testTLSClientCertPEMRequired{ Params :  Returns : void} testTLSClientCertPEM_CARequired{ Params :  Returns : void} testTLSClientCertRequiredNoClientCert{ Params :  Returns : void} testTLSClientCertClientNotTrusted{ Params :  Returns : void} testTLSClientRevokedServerCert{ Params :  Returns : void} testTLSRevokedClientCertServer{ Params :  Returns : void} testTLSCipherSuites{ Params :  Returns : void} testClearClientRequestOptionsSetSSL{ Params :  Returns : void} testSSLClientRequestOptionsSetSSL{ Params :  Returns : void} testClearClientRequestOptionsSetClear{ Params :  Returns : void} testSSLClientRequestOptionsSetClear{ Params :  Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean,boolean,String Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,String[],Function<HttpClient,Future<WebSocket>> Returns : void} testHandleWSManually{ Params :  Returns : void} testSharedServersRoundRobin{ Params :  Returns : void} testSharedServersRoundRobinWithOtherServerRunningOnDifferentPort{ Params :  Returns : void} testSharedServersRoundRobinButFirstStartAndStopServer{ Params :  Returns : void} testWebSocketFrameFactoryArguments{ Params :  Returns : void} sha1{ Params : String Returns : String} getUpgradedNetSocket{ Params : HttpServerRequest,String Returns : Future<NetSocket>} testWSWriteStream{ Params : WebsocketVersion Returns : void} testWSFrames{ Params : boolean,WebsocketVersion Returns : void} testWriteFinalTextFrame{ Params :  Returns : void} testWriteFinalBinaryFrame{ Params :  Returns : void} testWriteFinalFrame{ Params : boolean Returns : void} testContinuationWriteFromConnectHandler{ Params : WebsocketVersion Returns : void} testWriteFromConnectHandler{ Params : WebsocketVersion Returns : void} testNormalWSDeflateFrameCompressionNegotiation{ Params :  Returns : void} testNormalWSPermessageDeflateCompressionNegotiation{ Params :  Returns : void} testWSPermessageDeflateCompressionEnabled{ Params :  Returns : void} testConnectWithWebSocketCompressionDisabled{ Params :  Returns : void} testValidSubProtocol{ Params : WebsocketVersion Returns : void} testInvalidSubProtocol{ Params : WebsocketVersion Returns : void} testInvalidMissingConnectionHeader{ Params :  Returns : void} testInvalidMissingConnectionHeaderRequestUpgrade{ Params :  Returns : void} testInvalidMethod{ Params :  Returns : void} testInvalidMethodRequestUpgrade{ Params :  Returns : void} testInvalidUri{ Params :  Returns : void} testInvalidUriRequestUpgrade{ Params :  Returns : void} testInvalidWebSocketVersion{ Params :  Returns : void} testInvalidWebSocketVersionRequestUpgrade{ Params :  Returns : void} testHandshakeException{ Params :  Returns : void} testHandshakeExceptionRequestUpgrade{ Params :  Returns : void} testInvalidHandshake{ Params : Consumer<Handler<AsyncResult<HttpClientResponse>>>,boolean,boolean,int Returns : void} testReject{ Params : WebsocketVersion,Integer,int,String Returns : void} testAsyncAccept{ Params :  Returns : void} testCloseAsyncPending{ Params :  Returns : void} testServerClose{ Params :  Returns : void} testClientClose{ Params :  Returns : void} testClientAndServerClose{ Params :  Returns : void} testConnectionClose{ Params :  Returns : void} testClose{ Params : boolean,boolean,boolean Returns : void} testCloseBeforeHandshake{ Params :  Returns : void} testRequestEntityTooLarge{ Params :  Returns : void} testWriteMessageHybi00{ Params :  Returns : void} testWriteFragmentedMessage1Hybi00{ Params :  Returns : void} testWriteFragmentedMessage2Hybi00{ Params :  Returns : void} testWriteMessageHybi08{ Params :  Returns : void} testWriteFragmentedMessage1Hybi08{ Params :  Returns : void} testWriteFragmentedMessage2Hybi08{ Params :  Returns : void} testWriteMessageHybi17{ Params :  Returns : void} testWriteFragmentedMessage1Hybi17{ Params :  Returns : void} testWriteFragmentedMessage2Hybi17{ Params :  Returns : void} testWriteMessage{ Params : int,WebsocketVersion Returns : void} testNonFragmentedTextMessage2Hybi00{ Params :  Returns : void} testFragmentedTextMessage2Hybi07{ Params :  Returns : void} testFragmentedTextMessage2Hybi08{ Params :  Returns : void} testFragmentedTextMessage2Hybi13{ Params :  Returns : void} testMaxLengthFragmentedTextMessage{ Params :  Returns : void} testFragmentedUnicodeTextMessage2Hybi07{ Params :  Returns : void} testFragmentedUnicodeTextMessage2Hybi08{ Params :  Returns : void} testFragmentedUnicodeTextMessage2Hybi13{ Params :  Returns : void} testTooLargeMessage{ Params :  Returns : void} testContinueAfterTooLargeMessage{ Params :  Returns : void} testWriteSingleTextMessage{ Params : String,WebsocketVersion Returns : void} testWriteTextMessages{ Params : List<String>,WebsocketVersion Returns : SocketMessages} getReceivedMessages{ Params :  Returns : List<String>} getReceivedExceptions{ Params :  Returns : List<Throwable>} testHandshakeTimeout{ Params :  Returns : void} connectUntilWebSocketReject{ Params : HttpClient,int,Handler<AsyncResult<Void>> Returns : void} testMultipleServerClose{ Params :  Returns : void} testClearClientHandlersOnEnd{ Params :  Returns : void} testWriteOnEnd{ Params :  Returns : void} testReceiveHttpResponseHeadersOnClient{ Params :  Returns : void} testUpgrade{ Params :  Returns : void} testUpgradeDelayed{ Params :  Returns : void} testUpgrade{ Params : boolean Returns : void} testUpgradeFailure{ Params :  Returns : void} testUnmaskedFrameRequest{ Params :  Returns : void} handle{ Params : Buffer Returns : void} testInvalidUnmaskedFrameRequest{ Params :  Returns : void} testUpgradeInvalidRequest{ Params :  Returns : void} testRaceConditionWithWebSocketClientEventLoop{ Params :  Returns : void} testRaceConditionWithWebSocketClientWorker{ Params :  Returns : void} start{ Params :  Returns : void} handshakeWithCookie{ Params : HttpServerRequest Returns : Future<NetSocket>} handshake{ Params : HttpServerRequest Returns : Future<NetSocket>} handshake{ Params : HttpClient,Handler<HttpClientRequest> Returns : void} testRaceConditionWithWebSocketClient{ Params : Context Returns : void} testRaceConditionWithWebSocketClientWorker2{ Params :  Returns : void} testWorker{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} httpClientWebSocketConnectionFailureHandlerShouldBeCalled{ Params :  Returns : void} testClientWebSocketWithHttp2Client{ Params :  Returns : void} testClientWebSocketConnectionCloseOnBadResponseWithKeepalive{ Params :  Returns : void} testClientWebSocketConnectionCloseOnBadResponseWithoutKeepalive{ Params :  Returns : void} addResult{ Params : Throwable Returns : void} doTestClientWebSocketConnectionCloseOnBadResponse{ Params : boolean Returns : void} testClearClientSslOptions{ Params :  Returns : void} testServerWebSocketPingPong{ Params :  Returns : void} testWebSocketPausePing{ Params :  Returns : void} testServerWebSocketPingExceeds125Bytes{ Params :  Returns : void} testServerWebSocketPongExceeds125Bytes{ Params :  Returns : void} testServerWebSocketPingExceedsMaxFrameSize{ Params :  Returns : void} testServerWebSocketPongExceedsMaxFrameSize{ Params :  Returns : void} testServerWebSocketPingPongCheck{ Params : int,Function<ServerWebSocket,Future<Void>> Returns : void} testServerWebSocketSendPingExceeds125Bytes{ Params :  Returns : void} testClientWebSocketSendPingExceeds125Bytes{ Params :  Returns : void} testServerWebSocketSendPongExceeds125Bytes{ Params :  Returns : void} testClientWebSocketSendPongExceeds125Bytes{ Params :  Returns : void} testServerWebSocketReceivePongExceedsMaxFrameSize{ Params :  Returns : void} testClientWebSocketReceivePongExceedsMaxFrameSize{ Params :  Returns : void} testServerWebSocketReceivePingExceedsMaxFrameSize{ Params :  Returns : void} testClientWebSocketReceivePingExceedsMaxFrameSize{ Params :  Returns : void} testClientWebSocketPingPong{ Params :  Returns : void} testWebSocketAbs{ Params :  Returns : void} testCloseStatusCodeFromServer{ Params :  Returns : void} testCloseStatusCodeFromServerWithHandler{ Params :  Returns : void} testCloseStatusCodeFromServer{ Params : Consumer<ServerWebSocket> Returns : void} testCloseStatusCodeFromClient{ Params :  Returns : void} testCloseFrame{ Params :  Returns : void} testCloseCustomPayloadFromServer{ Params :  Returns : void} testCloseCustomPayloadFromServerWithHandler{ Params :  Returns : void} testCloseCustomPayloadFromServer{ Params : Consumer<ServerWebSocket> Returns : void} testCloseCustomPayloadFromClient{ Params :  Returns : void} testCloseCustomPayloadFromClientWithHandler{ Params :  Returns : void} testCloseCustomPayloadFromClient{ Params : Consumer<WebSocket> Returns : void} testServerCloseHandshake{ Params :  Returns : void} testClientCloseHandshake{ Params :  Returns : void} testClientConnectionCloseTimeout{ Params :  Returns : void} testClientConnectionCloseImmediately{ Params :  Returns : void} testClientConnectionCloseTimeout{ Params : int Returns : void} testServerCloseTimeout{ Params :  Returns : void} testServerImmediateClose{ Params :  Returns : void} testServerConnectionClose{ Params : int Returns : void} testCloseServer{ Params :  Returns : void} testCloseClient{ Params :  Returns : void} testReportProtocolViolationOnClient{ Params :  Returns : void} testReportProtocolViolationOnServer{ Params :  Returns : void} testServerWebSocketShouldBeClosedWhenTheClosedHandlerIsCalled{ Params :  Returns : void} testClientWebSocketShouldBeClosedWhenTheClosedHandlerIsCalled{ Params :  Returns : void} testDontReceiveMessagerAfterCloseHandlerCalled{ Params :  Returns : void} testNoRequestHandler{ Params :  Returns : void} testPausedDuringClose{ Params :  Returns : void} testPausedBeforeClosed{ Params :  Returns : void} testContext{ Params :  Returns : void} fillQueue{ Params : WebSocketBase,Handler<Void> Returns : void} testDrainServerWebSocket{ Params :  Returns : void} testDrainClientWebSocket{ Params :  Returns : void} testWriteHandlerSuccess{ Params :  Returns : void} testWriteHandlerFailure{ Params :  Returns : void} testCloseClientImmediately{ Params :  Returns : void} testHAProxy{ Params :  Returns : void} testWebSocketDisablesALPN{ Params :  Returns : void} testSetOriginHeaderV13{ Params :  Returns : void} testEnableOriginHeaderV13{ Params :  Returns : void} testDisableOriginHeaderV13{ Params :  Returns : void} testSetOriginHeaderV08{ Params :  Returns : void} testEnableOriginHeaderV08{ Params :  Returns : void} testDisableOriginHeaderV08{ Params :  Returns : void} testSetOriginHeaderV07{ Params :  Returns : void} testEnableOriginHeaderV07{ Params :  Returns : void} testDisableOriginHeaderV07{ Params :  Returns : void} testOriginHeader{ Params : WebsocketVersion,boolean,String,CharSequence,String Returns : void} testWriteHandlerIdNullByDefault{ Params :  Returns : void} testFanoutWithBinary{ Params :  Returns : void} testFanoutWithText{ Params :  Returns : void} testFanout{ Params : T,T,Function<WebSocketBase,String>,BiConsumer<WebSocketBase,Handler<T>>,BiFunction<WebSocket,T,Future<Void>> Returns : void} ,getOptions start start start ,,,,,,,,WebSocketConnectOptions WebSocketConnectOptions WebSocketConnectOptions WebSocketConnectOptions HttpClientOptions HttpServerOptions HttpServerOptions ArrayList ConcurrentHashSet ConcurrentHashMap CountDownLatch HttpServerOptions CountDownLatch HttpServerOptions CountDownLatch HttpServerOptions InternalError HttpServerOptions WebSocketConnectOptions HttpServerOptions AtomicInteger WebSocketConnectOptions ArrayList ArrayList AtomicReference AtomicReference HttpServerOptions HttpServerOptions WebSocketConnectOptions AtomicBoolean HttpServerOptions WebSocketConnectOptions HttpServerOptions HttpClientOptions HttpServerOptions HttpClientOptions HttpClientOptions HttpServerOptions RequestOptions HttpServerOptions HttpClientOptions HttpServerOptions WebSocketConnectOptions HttpServerOptions WebSocketConnectOptions RequestOptions RequestOptions RequestOptions RequestOptions RequestOptions HttpClientOptions AtomicBoolean RequestOptions HttpServerOptions WebSocketConnectOptions AtomicBoolean HttpServerOptions HttpServerOptions HttpClientOptions AtomicInteger HttpServerOptions HttpServerOptions HttpServerOptions RequestOptions HttpServerOptions AtomicInteger WebSocketConnectOptions HttpServerOptions ArrayList ArrayList WebSocketConnectOptions SocketMessages HttpClientOptions WebSocketConnectOptions AssertionError HttpServerOptions ThreadLocal HttpServerOptions HttpServerOptions HttpServerOptions AtomicReference HashSet HttpServerOptions HttpServerOptions HttpClientOptions HttpServerOptions Handler HttpClientOptions HttpServerOptions HttpServerOptions CompletableFuture AbstractVerticle DeploymentOptions String String RequestOptions HttpServerOptions HttpServerOptions DeploymentOptions AbstractVerticle HttpServerOptions AbstractVerticle HttpClientOptions HttpServerOptions RequestOptions ArrayBlockingQueue Exception HttpClientOptions AssertionError AssertionError HttpServerOptions HttpClientOptions WebSocketConnectOptions HttpServerOptions HttpServerOptions HttpServerOptions HttpServerOptions HttpServerOptions HttpServerOptions HttpServerOptions HttpServerOptions ArrayList WebSocketFrameImpl WebSocketFrameImpl HttpServerOptions WebSocketFrameImpl WebSocketFrameImpl ArrayList HttpServerOptions ArrayList WebSocketFrameImpl WebSocketFrameImpl HttpServerOptions ArrayList WebSocketFrameImpl WebSocketFrameImpl HttpServerOptions HttpServerOptions HttpClientOptions HttpServerOptions CountDownLatch HttpServerOptions HttpServerOptions HttpServerOptions HttpServerOptions WebSocket13FrameEncoder WebSocket13FrameDecoder CloseWebSocketFrame AtomicBoolean WebSocket13FrameEncoder WebSocket13FrameDecoder ArrayDeque CloseWebSocketFrame HttpClientOptions ArrayList WebSocket13FrameEncoder WebSocket13FrameDecoder CloseWebSocketFrame HttpClientOptions HttpServerOptions WebSocket13FrameEncoder WebSocket13FrameDecoder HttpServerOptions AtomicBoolean HttpServerOptions AtomicBoolean HttpServerOptions WebSocketConnectOptions AtomicReference HttpServerOptions AtomicReference HttpServerOptions CheckingSender HttpServerOptions CheckingSender HttpServerOptions CheckingSender CountDownLatch RequestOptions HttpServerOptions AtomicBoolean HttpServerOptions AtomicBoolean CountDownLatch HttpClientOptions AtomicBoolean HAProxy HttpServerOptions HttpClientOptions HttpServerOptions HttpServerOptions WebSocketConnectOptions HttpServerOptions WebSocketConnectOptions ConcurrentHashSet HttpServerOptions HttpClientOptions WebSocketConnectOptions ,: 
vert.x-master,io.vertx.core.http,SocketMessages,3,2,0,1,0,false,VertxTestBase ,0 ,SocketMessages ,receivedMessages: List<String> receivedExceptions: List<Throwable> ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} getOptions{ Params :  Returns : VertxOptions} testRejectHybi00{ Params :  Returns : void} testRejectHybi08{ Params :  Returns : void} testRejectWithStatusCode{ Params :  Returns : void} testWSBinaryHybi00{ Params :  Returns : void} testWSStringHybi00{ Params :  Returns : void} testWSBinaryHybi08{ Params :  Returns : void} testWSStringHybi08{ Params :  Returns : void} testWSBinaryHybi17{ Params :  Returns : void} testWSStringHybi17{ Params :  Returns : void} testWSStreamsHybi00{ Params :  Returns : void} testWSStreamsHybi08{ Params :  Returns : void} testWSStreamsHybi17{ Params :  Returns : void} testWriteFromConnectHybi00{ Params :  Returns : void} testWriteFromConnectHybi08{ Params :  Returns : void} testWriteFromConnectHybi17{ Params :  Returns : void} testContinuationWriteFromConnectHybi08{ Params :  Returns : void} testContinuationWriteFromConnectHybi17{ Params :  Returns : void} testValidSubProtocolHybi00{ Params :  Returns : void} testValidSubProtocolHybi08{ Params :  Returns : void} testValidSubProtocolHybi17{ Params :  Returns : void} testInvalidSubProtocolHybi00{ Params :  Returns : void} testInvalidSubProtocolHybi08{ Params :  Returns : void} testInvalidSubProtocolHybi17{ Params :  Returns : void} testTLSClientTrustAll{ Params :  Returns : void} testTLSClientTrustServerCert{ Params :  Returns : void} testTLSClientTrustServerCertWithSNI{ Params :  Returns : void} testTLSClientTrustServerCertPKCS12{ Params :  Returns : void} testTLSClientTrustServerCertPEM{ Params :  Returns : void} testTLSClientTrustServerCertPEM_CA{ Params :  Returns : void} testTLSClientTrustPKCS12ServerCert{ Params :  Returns : void} testTLSClientTrustPEMServerCert{ Params :  Returns : void} testTLSClientUntrustedServer{ Params :  Returns : void} testTLSClientCertNotRequired{ Params :  Returns : void} testTLSClientCertRequired{ Params :  Returns : void} testTLSClientCertRequiredPKCS12{ Params :  Returns : void} testTLSClientCertRequiredPEM{ Params :  Returns : void} testTLSClientCertPKCS12Required{ Params :  Returns : void} testTLSClientCertPEMRequired{ Params :  Returns : void} testTLSClientCertPEM_CARequired{ Params :  Returns : void} testTLSClientCertRequiredNoClientCert{ Params :  Returns : void} testTLSClientCertClientNotTrusted{ Params :  Returns : void} testTLSClientRevokedServerCert{ Params :  Returns : void} testTLSRevokedClientCertServer{ Params :  Returns : void} testTLSCipherSuites{ Params :  Returns : void} testClearClientRequestOptionsSetSSL{ Params :  Returns : void} testSSLClientRequestOptionsSetSSL{ Params :  Returns : void} testClearClientRequestOptionsSetClear{ Params :  Returns : void} testSSLClientRequestOptionsSetClear{ Params :  Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean,boolean,String Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,String[],Function<HttpClient,Future<WebSocket>> Returns : void} testHandleWSManually{ Params :  Returns : void} testSharedServersRoundRobin{ Params :  Returns : void} testSharedServersRoundRobinWithOtherServerRunningOnDifferentPort{ Params :  Returns : void} testSharedServersRoundRobinButFirstStartAndStopServer{ Params :  Returns : void} testWebSocketFrameFactoryArguments{ Params :  Returns : void} sha1{ Params : String Returns : String} getUpgradedNetSocket{ Params : HttpServerRequest,String Returns : Future<NetSocket>} testWSWriteStream{ Params : WebsocketVersion Returns : void} testWSFrames{ Params : boolean,WebsocketVersion Returns : void} testWriteFinalTextFrame{ Params :  Returns : void} testWriteFinalBinaryFrame{ Params :  Returns : void} testWriteFinalFrame{ Params : boolean Returns : void} testContinuationWriteFromConnectHandler{ Params : WebsocketVersion Returns : void} testWriteFromConnectHandler{ Params : WebsocketVersion Returns : void} testNormalWSDeflateFrameCompressionNegotiation{ Params :  Returns : void} testNormalWSPermessageDeflateCompressionNegotiation{ Params :  Returns : void} testWSPermessageDeflateCompressionEnabled{ Params :  Returns : void} testConnectWithWebSocketCompressionDisabled{ Params :  Returns : void} testValidSubProtocol{ Params : WebsocketVersion Returns : void} testInvalidSubProtocol{ Params : WebsocketVersion Returns : void} testInvalidMissingConnectionHeader{ Params :  Returns : void} testInvalidMissingConnectionHeaderRequestUpgrade{ Params :  Returns : void} testInvalidMethod{ Params :  Returns : void} testInvalidMethodRequestUpgrade{ Params :  Returns : void} testInvalidUri{ Params :  Returns : void} testInvalidUriRequestUpgrade{ Params :  Returns : void} testInvalidWebSocketVersion{ Params :  Returns : void} testInvalidWebSocketVersionRequestUpgrade{ Params :  Returns : void} testHandshakeException{ Params :  Returns : void} testHandshakeExceptionRequestUpgrade{ Params :  Returns : void} testInvalidHandshake{ Params : Consumer<Handler<AsyncResult<HttpClientResponse>>>,boolean,boolean,int Returns : void} testReject{ Params : WebsocketVersion,Integer,int,String Returns : void} testAsyncAccept{ Params :  Returns : void} testCloseAsyncPending{ Params :  Returns : void} testServerClose{ Params :  Returns : void} testClientClose{ Params :  Returns : void} testClientAndServerClose{ Params :  Returns : void} testConnectionClose{ Params :  Returns : void} testClose{ Params : boolean,boolean,boolean Returns : void} testCloseBeforeHandshake{ Params :  Returns : void} testRequestEntityTooLarge{ Params :  Returns : void} testWriteMessageHybi00{ Params :  Returns : void} testWriteFragmentedMessage1Hybi00{ Params :  Returns : void} testWriteFragmentedMessage2Hybi00{ Params :  Returns : void} testWriteMessageHybi08{ Params :  Returns : void} testWriteFragmentedMessage1Hybi08{ Params :  Returns : void} testWriteFragmentedMessage2Hybi08{ Params :  Returns : void} testWriteMessageHybi17{ Params :  Returns : void} testWriteFragmentedMessage1Hybi17{ Params :  Returns : void} testWriteFragmentedMessage2Hybi17{ Params :  Returns : void} testWriteMessage{ Params : int,WebsocketVersion Returns : void} testNonFragmentedTextMessage2Hybi00{ Params :  Returns : void} testFragmentedTextMessage2Hybi07{ Params :  Returns : void} testFragmentedTextMessage2Hybi08{ Params :  Returns : void} testFragmentedTextMessage2Hybi13{ Params :  Returns : void} testMaxLengthFragmentedTextMessage{ Params :  Returns : void} testFragmentedUnicodeTextMessage2Hybi07{ Params :  Returns : void} testFragmentedUnicodeTextMessage2Hybi08{ Params :  Returns : void} testFragmentedUnicodeTextMessage2Hybi13{ Params :  Returns : void} testTooLargeMessage{ Params :  Returns : void} testContinueAfterTooLargeMessage{ Params :  Returns : void} testWriteSingleTextMessage{ Params : String,WebsocketVersion Returns : void} testWriteTextMessages{ Params : List<String>,WebsocketVersion Returns : SocketMessages} getReceivedMessages{ Params :  Returns : List<String>} getReceivedExceptions{ Params :  Returns : List<Throwable>} testHandshakeTimeout{ Params :  Returns : void} connectUntilWebSocketReject{ Params : HttpClient,int,Handler<AsyncResult<Void>> Returns : void} testMultipleServerClose{ Params :  Returns : void} testClearClientHandlersOnEnd{ Params :  Returns : void} testWriteOnEnd{ Params :  Returns : void} testReceiveHttpResponseHeadersOnClient{ Params :  Returns : void} testUpgrade{ Params :  Returns : void} testUpgradeDelayed{ Params :  Returns : void} testUpgrade{ Params : boolean Returns : void} testUpgradeFailure{ Params :  Returns : void} testUnmaskedFrameRequest{ Params :  Returns : void} handle{ Params : Buffer Returns : void} testInvalidUnmaskedFrameRequest{ Params :  Returns : void} testUpgradeInvalidRequest{ Params :  Returns : void} testRaceConditionWithWebSocketClientEventLoop{ Params :  Returns : void} testRaceConditionWithWebSocketClientWorker{ Params :  Returns : void} start{ Params :  Returns : void} handshakeWithCookie{ Params : HttpServerRequest Returns : Future<NetSocket>} handshake{ Params : HttpServerRequest Returns : Future<NetSocket>} handshake{ Params : HttpClient,Handler<HttpClientRequest> Returns : void} testRaceConditionWithWebSocketClient{ Params : Context Returns : void} testRaceConditionWithWebSocketClientWorker2{ Params :  Returns : void} testWorker{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params :  Returns : void} httpClientWebSocketConnectionFailureHandlerShouldBeCalled{ Params :  Returns : void} testClientWebSocketWithHttp2Client{ Params :  Returns : void} testClientWebSocketConnectionCloseOnBadResponseWithKeepalive{ Params :  Returns : void} testClientWebSocketConnectionCloseOnBadResponseWithoutKeepalive{ Params :  Returns : void} addResult{ Params : Throwable Returns : void} doTestClientWebSocketConnectionCloseOnBadResponse{ Params : boolean Returns : void} testClearClientSslOptions{ Params :  Returns : void} testServerWebSocketPingPong{ Params :  Returns : void} testWebSocketPausePing{ Params :  Returns : void} testServerWebSocketPingExceeds125Bytes{ Params :  Returns : void} testServerWebSocketPongExceeds125Bytes{ Params :  Returns : void} testServerWebSocketPingExceedsMaxFrameSize{ Params :  Returns : void} testServerWebSocketPongExceedsMaxFrameSize{ Params :  Returns : void} testServerWebSocketPingPongCheck{ Params : int,Function<ServerWebSocket,Future<Void>> Returns : void} testServerWebSocketSendPingExceeds125Bytes{ Params :  Returns : void} testClientWebSocketSendPingExceeds125Bytes{ Params :  Returns : void} testServerWebSocketSendPongExceeds125Bytes{ Params :  Returns : void} testClientWebSocketSendPongExceeds125Bytes{ Params :  Returns : void} testServerWebSocketReceivePongExceedsMaxFrameSize{ Params :  Returns : void} testClientWebSocketReceivePongExceedsMaxFrameSize{ Params :  Returns : void} testServerWebSocketReceivePingExceedsMaxFrameSize{ Params :  Returns : void} testClientWebSocketReceivePingExceedsMaxFrameSize{ Params :  Returns : void} testClientWebSocketPingPong{ Params :  Returns : void} testWebSocketAbs{ Params :  Returns : void} testCloseStatusCodeFromServer{ Params :  Returns : void} testCloseStatusCodeFromServerWithHandler{ Params :  Returns : void} testCloseStatusCodeFromServer{ Params : Consumer<ServerWebSocket> Returns : void} testCloseStatusCodeFromClient{ Params :  Returns : void} testCloseFrame{ Params :  Returns : void} testCloseCustomPayloadFromServer{ Params :  Returns : void} testCloseCustomPayloadFromServerWithHandler{ Params :  Returns : void} testCloseCustomPayloadFromServer{ Params : Consumer<ServerWebSocket> Returns : void} testCloseCustomPayloadFromClient{ Params :  Returns : void} testCloseCustomPayloadFromClientWithHandler{ Params :  Returns : void} testCloseCustomPayloadFromClient{ Params : Consumer<WebSocket> Returns : void} testServerCloseHandshake{ Params :  Returns : void} testClientCloseHandshake{ Params :  Returns : void} testClientConnectionCloseTimeout{ Params :  Returns : void} testClientConnectionCloseImmediately{ Params :  Returns : void} testClientConnectionCloseTimeout{ Params : int Returns : void} testServerCloseTimeout{ Params :  Returns : void} testServerImmediateClose{ Params :  Returns : void} testServerConnectionClose{ Params : int Returns : void} testCloseServer{ Params :  Returns : void} testCloseClient{ Params :  Returns : void} testReportProtocolViolationOnClient{ Params :  Returns : void} testReportProtocolViolationOnServer{ Params :  Returns : void} testServerWebSocketShouldBeClosedWhenTheClosedHandlerIsCalled{ Params :  Returns : void} testClientWebSocketShouldBeClosedWhenTheClosedHandlerIsCalled{ Params :  Returns : void} testDontReceiveMessagerAfterCloseHandlerCalled{ Params :  Returns : void} testNoRequestHandler{ Params :  Returns : void} testPausedDuringClose{ Params :  Returns : void} testPausedBeforeClosed{ Params :  Returns : void} testContext{ Params :  Returns : void} fillQueue{ Params : WebSocketBase,Handler<Void> Returns : void} testDrainServerWebSocket{ Params :  Returns : void} testDrainClientWebSocket{ Params :  Returns : void} testWriteHandlerSuccess{ Params :  Returns : void} testWriteHandlerFailure{ Params :  Returns : void} testCloseClientImmediately{ Params :  Returns : void} testHAProxy{ Params :  Returns : void} testWebSocketDisablesALPN{ Params :  Returns : void} testSetOriginHeaderV13{ Params :  Returns : void} testEnableOriginHeaderV13{ Params :  Returns : void} testDisableOriginHeaderV13{ Params :  Returns : void} testSetOriginHeaderV08{ Params :  Returns : void} testEnableOriginHeaderV08{ Params :  Returns : void} testDisableOriginHeaderV08{ Params :  Returns : void} testSetOriginHeaderV07{ Params :  Returns : void} testEnableOriginHeaderV07{ Params :  Returns : void} testDisableOriginHeaderV07{ Params :  Returns : void} testOriginHeader{ Params : WebsocketVersion,boolean,String,CharSequence,String Returns : void} testWriteHandlerIdNullByDefault{ Params :  Returns : void} testFanoutWithBinary{ Params :  Returns : void} testFanoutWithText{ Params :  Returns : void} testFanout{ Params : T,T,Function<WebSocketBase,String>,BiConsumer<WebSocketBase,Handler<T>>,BiFunction<WebSocket,T,Future<Void>> Returns : void} ,getOptions start start start ,,,,,List<Throwable> ,,List<Throwable> ,,: 
vert.x-master,io.vertx.core.impl,CloseFutureTest,1,1,0,0,0,false,AsyncTestBase ,0 ,UseCase CleanableUseCase UseCaseResource ,cleaner: Cleaner closing: ThreadLocal<Object> ,testHookCompletion{ Params :  Returns : void} testRemoveDisposedCloseFutureHook{ Params :  Returns : void} testCloseFutureDuplicateClose{ Params :  Returns : void} testCloseHook{ Params :  Returns : void} close{ Params :  Returns : Future<Void>} close{ Params :  Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} close{ Params :  Returns : Future<Void>} testUseCaseGC{ Params :  Returns : void} testUseCaseClose{ Params :  Returns : void} testDetachFromCloseFutureOnCompletion{ Params :  Returns : void} ,close close ,,,,,,,,CloseFuture AtomicReference CloseFuture CloseFuture AtomicReference CloseFuture CloseFuture CloseFuture ThreadLocal CloseFuture AtomicBoolean UnsupportedOperationException UseCaseResource CleanableUseCase WeakReference CloseFuture UseCaseResource CleanableUseCase CloseFuture CloseFuture CloseFuture ,closeFuture: , nested
vert.x-master,io.vertx.core.impl,UseCase,3,2,0,0,0,true,AsyncTestBase ,0 ,UseCase CleanableUseCase UseCaseResource ,,testHookCompletion{ Params :  Returns : void} testRemoveDisposedCloseFutureHook{ Params :  Returns : void} testCloseFutureDuplicateClose{ Params :  Returns : void} testCloseHook{ Params :  Returns : void} close{ Params :  Returns : Future<Void>} close{ Params :  Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} close{ Params :  Returns : Future<Void>} testUseCaseGC{ Params :  Returns : void} testUseCaseClose{ Params :  Returns : void} testDetachFromCloseFutureOnCompletion{ Params :  Returns : void} ,close close ,,,,,,,,,closeFuture: , nested
vert.x-master,io.vertx.core.impl,CleanableUseCase,3,2,0,1,0,false,AsyncTestBase ,0 ,UseCase CleanableUseCase UseCaseResource ,resource: UseCaseResource cleanable: Cleaner.Cleanable ,testHookCompletion{ Params :  Returns : void} testRemoveDisposedCloseFutureHook{ Params :  Returns : void} testCloseFutureDuplicateClose{ Params :  Returns : void} testCloseHook{ Params :  Returns : void} close{ Params :  Returns : Future<Void>} close{ Params :  Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} close{ Params :  Returns : Future<Void>} testUseCaseGC{ Params :  Returns : void} testUseCaseClose{ Params :  Returns : void} testDetachFromCloseFutureOnCompletion{ Params :  Returns : void} ,close close ,,,,UseCase ,Cleaner.Cleanable ,,Cleaner.Cleanable ,,resource.closeFuture: 
vert.x-master,io.vertx.core.impl,UseCaseResource,3,2,0,1,0,false,AsyncTestBase ,0 ,UseCase CleanableUseCase UseCaseResource ,closeFuture: CloseFuture closed: AtomicBoolean ,testHookCompletion{ Params :  Returns : void} testRemoveDisposedCloseFutureHook{ Params :  Returns : void} testCloseFutureDuplicateClose{ Params :  Returns : void} testCloseHook{ Params :  Returns : void} close{ Params :  Returns : Future<Void>} close{ Params :  Returns : Future<Void>} close{ Params : Promise<Void> Returns : void} close{ Params :  Returns : Future<Void>} testUseCaseGC{ Params :  Returns : void} testUseCaseClose{ Params :  Returns : void} testDetachFromCloseFutureOnCompletion{ Params :  Returns : void} ,close close ,,,,Closeable UseCase ,AtomicBoolean ,,AtomicBoolean ,CloseFuture AtomicBoolean UnsupportedOperationException ,completion: 
vert.x-master,io.vertx.core.impl,CloseSequenceTest,1,1,0,0,0,false,AsyncTestBase ,0 ,0 ,ref1: AtomicReference<Promise<Void>> ref2: AtomicReference<Promise<Void>> ref3: AtomicReference<Promise<Void>> seq: CloseSequence ,setUp{ Params :  Returns : void} testCompletion{ Params :  Returns : void} testCompletion2{ Params :  Returns : void} testConcurrent{ Params :  Returns : void} testDetachFromCloseFutureOnCompletion{ Params :  Returns : void} ,setUp ,,,,,CloseSequence ,,CloseSequence ,AtomicReference AtomicReference AtomicReference CloseSequence CloseFuture ,closeFuture: , seq
vert.x-master,io.vertx.core.impl.cpu,CpuCoreSensorTest,1,1,0,0,0,false,0 ,0 ,0 ,,readRegular{ Params :  Returns : void} readRegular2{ Params :  Returns : void} readMissingFile{ Params :  Returns : void} readMissingEntry{ Params :  Returns : void} readCorruptedFile{ Params :  Returns : void} ,,,,,,,,,File File File File File ,: , -1
vert.x-master,io.vertx.core.impl,GlobalEventExecutorNotificationTest,1,1,0,0,0,false,AsyncTestBase ,0 ,0 ,vertx: Vertx ,after{ Params :  Returns : void} testConnectError{ Params :  Returns : void} testProxyConnectError{ Params :  Returns : void} testConnectErrorNotifiesOnEventLoop{ Params : NetClientOptions Returns : void} channelFactory{ Params : boolean Returns : ChannelFactory<? extends Channel>} testNetBindError{ Params :  Returns : void} serverChannelFactory{ Params : boolean Returns : ChannelFactory<? extends ServerChannel>} testHttpBindError{ Params :  Returns : void} serverChannelFactory{ Params : boolean Returns : ChannelFactory<? extends ServerChannel>} ,channelFactory serverChannelFactory serverChannelFactory ,,,,,Vertx ,,Vertx ,CountDownLatch NetClientOptions NetClientOptions ProxyOptions RuntimeException VertxBuilder JDKTransport RuntimeException VertxBuilder JDKTransport RuntimeException VertxBuilder JDKTransport ,: 
vert.x-master,io.vertx.core.impl.launcher.commands,BareCommandTest,1,1,0,0,0,false,CommandTestBase ,0 ,0 ,,tearDown{ Params :  Returns : void} assertWaitUntil{ Params : BooleanSupplier Returns : void} assertThatVertxInstanceHasBeenCreated{ Params :  Returns : void} getVertx{ Params :  Returns : Vertx} testRegularBareCommand{ Params :  Returns : void} testOldBare{ Params :  Returns : void} testRegularBareCommandWithClusterHost{ Params :  Returns : void} testOldBareWithClusterHost{ Params :  Returns : void} ,,,,,,,,,,error: 
vert.x-master,io.vertx.core.impl.launcher.commands,ClasspathHandlerTest,1,1,0,0,0,false,CommandTestBase ,0 ,0 ,VERTICLE: String run: RunCommand bare: BareCommand ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testCPInRunCommand{ Params :  Returns : void} testCPInBareCommand{ Params :  Returns : void} getHttpCode{ Params :  Returns : int} ,,,,,,BareCommand ,,BareCommand ,File File RunCommand ExecutionContext BareCommand ExecutionContext DeploymentOptions URL ,new URL("http://localhost:8080"): 
vert.x-master,io.vertx.core.impl.launcher.commands,CommandTestBase,1,1,0,0,0,false,0 ,0 ,0 ,originalOutputPrintStream: PrintStream originalErrorPrintStream: PrintStream output: ByteArrayOutputStream error: ByteArrayOutputStream os: PrintStream err: PrintStream cli: VertxCommandLauncher ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} record{ Params :  Returns : void} stop{ Params :  Returns : void} assertWaitUntil{ Params : BooleanSupplier Returns : void} assertWaitUntil{ Params : BooleanSupplier,String Returns : void} assertWaitUntil{ Params : BooleanSupplier,long Returns : void} awaitLatch{ Params : CountDownLatch Returns : void} close{ Params : Vertx Returns : void} ,,,,,,,,,VertxCommandLauncher ByteArrayOutputStream ByteArrayOutputStream PrintStream PrintStream CountDownLatch ,: , latch
vert.x-master,io.vertx.core.impl.launcher.commands,ComplexCommand,1,1,0,0,0,false,DefaultCommand ,0 ,0 ,arg1: String arg2: int option1: String option2: boolean ,setArgument1{ Params : String Returns : void} setArgument2{ Params : int Returns : void} setOption1{ Params : String Returns : void} setOption2{ Params : boolean Returns : void} run{ Params :  Returns : void} ,run ,,,,,boolean ,,boolean ,,executionContext: 
vert.x-master,io.vertx.core.impl.launcher.commands,ComplexCommandFactory,1,1,0,0,0,false,DefaultCommandFactory<ComplexCommand> ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher.commands,ExecUtilsTest,1,1,0,0,0,false,0 ,0 ,0 ,field: Field originalOsName: String ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} set{ Params : String Returns : void} testAddArgument{ Params :  Returns : void} testIsWindows{ Params :  Returns : void} testIsNotWindows{ Params :  Returns : void} ,,,,,,String ,,String ,ArrayList ,ExecUtils: 
vert.x-master,io.vertx.core.impl.launcher.commands,FileSelectorTest,1,1,0,0,0,false,0 ,0 ,0 ,,test{ Params :  Returns : void} testMatchPath_DefaultFileSeparator{ Params :  Returns : void} testMatchPath_UnixFileSeparator{ Params :  Returns : void} testMatchPath_WindowsFileSeparator{ Params :  Returns : void} ,,,,,,,,,,FileSelector: , "*" + separator + "a.txt", "b" + separator + "a.txt", separator, false
vert.x-master,io.vertx.core.impl.launcher.commands,GoodByeCommand,1,1,0,0,0,false,DefaultCommand ,0 ,0 ,,define{ Params :  Returns : CLI} run{ Params :  Returns : void} ,run ,define ,,,,,,,DefaultCLI TypedOption ,out: , "Good Bye " + n
vert.x-master,io.vertx.core.impl.launcher.commands,GoodByeCommandFactory,1,1,0,0,0,false,DefaultCommandFactory<GoodByeCommand> ,0 ,0 ,,define{ Params :  Returns : CLI} ,define ,,,,,,,,,GoodByeCommand: 
vert.x-master,io.vertx.core.impl.launcher.commands,Hello2Command,1,1,0,0,0,false,HelloCommand ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher.commands,Hello2CommandFactory,1,1,0,0,0,false,DefaultCommandFactory<Hello2Command> ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher.commands,HelloCommand,1,1,0,0,0,false,DefaultCommand ,0 ,0 ,called: boolean name: String ,setTheName{ Params : String Returns : void} run{ Params :  Returns : void} ,run ,,,,,,,,,out: , "Hello " + name
vert.x-master,io.vertx.core.impl.launcher.commands,HelloCommandFactory,1,1,0,0,0,false,DefaultCommandFactory<HelloCommand> ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher.commands,HiddenCommand,1,1,0,0,0,false,DefaultCommand ,0 ,0 ,name: String count: int ,setAName{ Params : String Returns : void} setCount{ Params : int Returns : void} run{ Params :  Returns : void} ,run ,,,,,int ,,int ,,out: , "Do something hidden..."
vert.x-master,io.vertx.core.impl.launcher.commands,HiddenCommandFactory,1,1,0,0,0,false,DefaultCommandFactory<HiddenCommand> ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.impl.launcher.commands,HttpTestVerticle,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,,start{ Params :  Returns : void} ,start ,,,,,,,,JsonObject ,json: 
vert.x-master,io.vertx.core.impl.launcher.commands,OptionsRecordingLauncher,1,1,0,0,0,false,Launcher ,0 ,0 ,options: VertxOptions ,main{ Params : String[] Returns : void} beforeStartingVertx{ Params : VertxOptions Returns : void} beforeDeployingVerticle{ Params : DeploymentOptions Returns : void} ,beforeStartingVertx beforeDeployingVerticle ,main ,,,,VertxOptions ,,VertxOptions ,OptionsRecordingLauncher ,options: 
vert.x-master,io.vertx.core.impl.launcher.commands,PriorityCommandTest,1,1,0,0,0,false,CommandTestBase ,0 ,0 ,hello: Command ,setUp{ Params :  Returns : void} testHelloCommandIsOfTypeHello2{ Params :  Returns : void} ,,,,,,Command ,,Command ,,hello: 
vert.x-master,io.vertx.core.impl.launcher.commands,RedeployTest,1,1,0,0,0,false,CommandTestBase ,0 ,0 ,,waitForTermination{ Params :  Returns : void} tearDown{ Params :  Returns : void} testStartingApplicationInRedeployMode{ Params :  Returns : void} testStartingApplicationInRedeployModeWithInlineConf{ Params :  Returns : void} testStartingApplicationInRedeployModeWithInlineConf2{ Params :  Returns : void} testStartingApplicationInRedeployModeWithFileConf{ Params :  Returns : void} testStartingApplicationInRedeployModeWithFileConf2{ Params :  Returns : void} testStartingApplicationInRedeployModeWithCluster{ Params :  Returns : void} testRedeployment{ Params :  Returns : void} testRedeploymentWithSlash{ Params :  Returns : void} testStartingApplicationInRedeployModeWithInlineOptions{ Params :  Returns : void} testStartingApplicationInRedeployModeWithInlineOptions2{ Params :  Returns : void} ,,,,,,,,,Launcher Launcher Launcher Launcher File Launcher File Launcher Launcher File Launcher File Launcher Launcher ,metricsOptions: , "enabled"
vert.x-master,io.vertx.core.impl.launcher.commands,RunCommandTest,1,1,0,0,0,false,CommandTestBase ,0 ,0 ,manifest: File ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} setManifest{ Params : String Returns : void} testDeploymentOfJavaVerticle{ Params :  Returns : void} testDeploymentOfJavaVerticleWithCluster{ Params :  Returns : void} testFatJarWithoutMainVerticle{ Params :  Returns : void} testFatJarWithMissingMainVerticle{ Params :  Returns : void} testFatJarWithHTTPVerticle{ Params :  Returns : void} testFatJarWithHTTPVerticleWithCluster{ Params :  Returns : void} testThatHADeploysVerticleWhenCombinedWithCluster{ Params :  Returns : void} testThatHADeploysVerticle{ Params :  Returns : void} testWithConfProvidedInline{ Params :  Returns : void} testWithBrokenConfProvidedInline{ Params :  Returns : void} testWithConfProvidedAsFile{ Params :  Returns : void} testMetricsEnabledFromCommandLine{ Params :  Returns : void} getHttpCode{ Params :  Returns : int} getContent{ Params :  Returns : JsonObject} ,,getHttpCode getContent ,,,,File ,,File ,File File Launcher Launcher Launcher Launcher Launcher Launcher Launcher Launcher Random Launcher Launcher Launcher Launcher URL URL StringBuilder BufferedReader InputStreamReader JsonObject ,builder: 
vert.x-master,io.vertx.core.impl.launcher.commands,ServiceCommandLookupTest,1,1,0,0,0,false,0 ,0 ,0 ,loader: ServiceCommandFactoryLoader ,testLookup{ Params :  Returns : void} ensureCommand{ Params : Collection<CommandFactory<?>>,String Returns : void} ,,,,,,,,,ServiceCommandFactoryLoader ArrayList ,Collectors: 
vert.x-master,io.vertx.core.impl.launcher.commands,StartStopListCommandsTest,1,1,0,0,0,false,CommandTestBase ,0 ,0 ,,setUp{ Params :  Returns : void} testStartListStop{ Params :  Returns : void} testStartListStopWithoutCommand{ Params :  Returns : void} testStartListStopWithJVMOptions{ Params :  Returns : void} waitForShutdown{ Params :  Returns : void} waitForStartup{ Params :  Returns : void} testStartListStopWithId{ Params :  Returns : void} testStartListStopWithIdAndAnotherArgument{ Params :  Returns : void} testStartListStopWithIdAndAnotherArgumentBeforeId{ Params :  Returns : void} getHttpCode{ Params :  Returns : int} testFatJarExtraction{ Params :  Returns : void} testStoppingAnUnknownProcess{ Params :  Returns : void} testVerticleExtraction{ Params :  Returns : void} ,,,,,,,,,File URL ,ListCommand: , command
vert.x-master,io.vertx.core.impl.launcher.commands,WatcherAbsolutePathTest,1,1,0,0,0,false,WatcherTest ,0 ,0 ,,prepare{ Params :  Returns : void} ,,,,,,,,,File File AtomicInteger AtomicInteger Watcher ,next: , null
vert.x-master,io.vertx.core.impl.launcher.commands,WatcherTest,1,1,0,0,0,false,CommandTestBase ,0 ,0 ,watcher: Watcher deploy: AtomicInteger undeploy: AtomicInteger root: File ,prepare{ Params :  Returns : void} close{ Params :  Returns : void} testFileAddition{ Params :  Returns : void} testWithANonMatchingFile{ Params :  Returns : void} testFileModification{ Params :  Returns : void} testFileDeletion{ Params :  Returns : void} testFileAdditionAndModificationInDirectory{ Params :  Returns : void} testOSSpecificIncludePaths{ Params :  Returns : void} testCaseSensitivity{ Params :  Returns : void} deleteRecursive{ Params : File Returns : boolean} testWatcherPerformances{ Params :  Returns : void} testRootExtraction{ Params :  Returns : void} ,,deleteRecursive ,,,,,,,File AtomicInteger AtomicInteger Watcher File File File File File File File File File File File ArrayList File File File File File File ArrayList ,root: 
vert.x-master,io.vertx.core.impl.launcher,DefaultCommandTest,1,1,0,0,0,false,0 ,0 ,MyCommandWithoutName MyCommandWithoutEmptyName ,command: HelloCommand ,parse{ Params : CLI,String Returns : CommandLine} testCWD{ Params :  Returns : void} testSystemProperties{ Params :  Returns : void} testThatCLINeedsAName{ Params :  Returns : void} testThatCLINeedsANonEmptyName{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} ,run run ,,,,,HelloCommand ,,HelloCommand ,HelloCommand File File VertxCommandLauncher ExecutionContext ,CLIConfigurator: , MyCommandWithoutEmptyName.class
vert.x-master,io.vertx.core.impl.launcher,MyCommandWithoutName,3,1,0,1,0,false,0 ,0 ,MyCommandWithoutName MyCommandWithoutEmptyName ,,parse{ Params : CLI,String Returns : CommandLine} testCWD{ Params :  Returns : void} testSystemProperties{ Params :  Returns : void} testThatCLINeedsAName{ Params :  Returns : void} testThatCLINeedsANonEmptyName{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} ,run run ,,,,,,,,,CLIConfigurator: , MyCommandWithoutEmptyName.class
vert.x-master,io.vertx.core.impl.launcher,MyCommandWithoutEmptyName,3,1,0,1,0,false,0 ,0 ,MyCommandWithoutName MyCommandWithoutEmptyName ,,parse{ Params : CLI,String Returns : CommandLine} testCWD{ Params :  Returns : void} testSystemProperties{ Params :  Returns : void} testThatCLINeedsAName{ Params :  Returns : void} testThatCLINeedsANonEmptyName{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} ,run run ,,,,,,,,,CLIConfigurator: , MyCommandWithoutEmptyName.class
vert.x-master,io.vertx.core.impl.launcher,LauncherExtensibilityTest,1,1,0,0,0,false,CommandTestBase ,0 ,FooCommand ,spy: AtomicReference<Boolean> vertx: Vertx ,tearDown{ Params :  Returns : void} testExtendingMainVerticle{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} afterStartingVertx{ Params : Vertx Returns : void} testThatALauncherCanAddACommand{ Params :  Returns : void} load{ Params :  Returns : void} testThatALauncherCanHideACommand{ Params :  Returns : void} load{ Params :  Returns : void} testThatCustomLauncherCanUpdateConfigurationWhenNoneArePassed{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} afterStartingVertx{ Params : Vertx Returns : void} afterConfigParsed{ Params : JsonObject Returns : void} testThatCustomLauncherCanUpdateConfiguration{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} afterStartingVertx{ Params : Vertx Returns : void} afterConfigParsed{ Params : JsonObject Returns : void} testThatCustomLauncherCanCustomizeMetricsOption{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} afterStartingVertx{ Params : Vertx Returns : void} beforeStartingVertx{ Params : VertxOptions Returns : void} testThatCustomLauncherCanCustomizeClusterManager{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} afterStartingVertx{ Params : Vertx Returns : void} beforeStartingVertx{ Params : VertxOptions Returns : void} run{ Params :  Returns : void} ,getMainVerticle afterStartingVertx load load getMainVerticle afterStartingVertx afterConfigParsed getMainVerticle afterStartingVertx afterConfigParsed getMainVerticle afterStartingVertx beforeStartingVertx getMainVerticle afterStartingVertx beforeStartingVertx run ,,,,,Vertx ,,Vertx ,AtomicReference Launcher Launcher Launcher Launcher Launcher Launcher FakeMetricsFactory FakeClusterManager Launcher ,((VertxInternal) vertx): 
vert.x-master,io.vertx.core.impl.launcher,FooCommand,3,1,0,1,0,false,CommandTestBase ,0 ,FooCommand ,,tearDown{ Params :  Returns : void} testExtendingMainVerticle{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} afterStartingVertx{ Params : Vertx Returns : void} testThatALauncherCanAddACommand{ Params :  Returns : void} load{ Params :  Returns : void} testThatALauncherCanHideACommand{ Params :  Returns : void} load{ Params :  Returns : void} testThatCustomLauncherCanUpdateConfigurationWhenNoneArePassed{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} afterStartingVertx{ Params : Vertx Returns : void} afterConfigParsed{ Params : JsonObject Returns : void} testThatCustomLauncherCanUpdateConfiguration{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} afterStartingVertx{ Params : Vertx Returns : void} afterConfigParsed{ Params : JsonObject Returns : void} testThatCustomLauncherCanCustomizeMetricsOption{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} afterStartingVertx{ Params : Vertx Returns : void} beforeStartingVertx{ Params : VertxOptions Returns : void} testThatCustomLauncherCanCustomizeClusterManager{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} afterStartingVertx{ Params : Vertx Returns : void} beforeStartingVertx{ Params : VertxOptions Returns : void} run{ Params :  Returns : void} ,getMainVerticle afterStartingVertx load load getMainVerticle afterStartingVertx afterConfigParsed getMainVerticle afterStartingVertx afterConfigParsed getMainVerticle afterStartingVertx beforeStartingVertx getMainVerticle afterStartingVertx beforeStartingVertx run ,,,,,,,,,spy: , true
vert.x-master,io.vertx.core.impl.launcher,ServiceCommandLoaderTest,1,1,0,0,0,false,0 ,0 ,0 ,loader: ServiceCommandFactoryLoader ,testLookup{ Params :  Returns : void} ensureCommand{ Params : Collection<CommandFactory<?>>,String Returns : void} testNoCommandsWhenLoadedFromEmptyClassloader{ Params :  Returns : void} testCommandsWhenUsingClassloaderHierarchy{ Params :  Returns : void} ,,,,,,ServiceCommandFactoryLoader ,,ServiceCommandFactoryLoader ,ServiceCommandFactoryLoader ArrayList URLClassLoader ServiceCommandFactoryLoader URLClassLoader ServiceCommandFactoryLoader ,: , commands, "Bye"
vert.x-master,io.vertx.core.impl.launcher,VertxCommandLineInterfaceTest,1,1,0,0,0,false,0 ,0 ,0 ,itf: VertxCommandLauncher out: PrintStream ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testUsage{ Params :  Returns : void} testUsageOnDifferentStream{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testCommandUsageForHello{ Params :  Returns : void} testCommandUsageForGoodbye{ Params :  Returns : void} testCommandNotFound{ Params :  Returns : void} testMissingValue{ Params :  Returns : void} testMissingOption{ Params :  Returns : void} testInvalidValue{ Params :  Returns : void} testComplexCommandUsage{ Params :  Returns : void} testHiddenCommandUsage{ Params :  Returns : void} testComplexCommandExecutions{ Params :  Returns : void} testUsingDifferentPrinter{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} getPrintStream{ Params :  Returns : PrintStream} getPrintStream{ Params :  Returns : PrintStream} getPrintStream{ Params :  Returns : PrintStream} getPrintStream{ Params :  Returns : PrintStream} ,getPrintStream getPrintStream getPrintStream getPrintStream getPrintStream getPrintStream ,,,,,PrintStream ,,PrintStream ,VertxCommandLauncher ByteArrayOutputStream PrintStream ByteArrayOutputStream PrintStream VertxCommandLauncher ByteArrayOutputStream PrintStream ByteArrayOutputStream PrintStream ByteArrayOutputStream PrintStream ByteArrayOutputStream PrintStream ByteArrayOutputStream PrintStream ByteArrayOutputStream PrintStream ByteArrayOutputStream PrintStream ByteArrayOutputStream PrintStream ByteArrayOutputStream PrintStream VertxCommandLauncher VertxCommandLauncher VertxCommandLauncher VertxCommandLauncher ByteArrayOutputStream PrintStream VertxCommandLauncher VertxCommandLauncher VertxCommandLauncher VertxCommandLauncher VertxCommandLauncher ,baos: 
vert.x-master,io.vertx.core.impl.logging,LoggingBackendSelectionTest,1,1,0,0,0,false,0 ,0 ,TestClassLoader ,originalTccl: ClassLoader testClassLoader: TestClassLoader ,setup{ Params :  Returns : void} tearDown{ Params :  Returns : void} syspropPriority{ Params :  Returns : void} vertxJulFilePriority{ Params :  Returns : void} SLF4JPriority{ Params :  Returns : void} Log4j2Priority{ Params :  Returns : void} JULDefault{ Params :  Returns : void} loggingBackend{ Params :  Returns : String} loadClass{ Params : String,boolean Returns : Class<?>} getResource{ Params : String Returns : URL} ,loadClass getResource ,,,,,TestClassLoader ,,TestClassLoader ,TestClassLoader HashSet ClassNotFoundException ClassNotFoundException ByteArrayOutputStream ClassNotFoundException ,backendClass: , "LogDelegate"
vert.x-master,io.vertx.core.impl.logging,TestClassLoader,3,2,0,1,0,false,0 ,0 ,TestClassLoader ,hideVertxJulFile: boolean hiddenPackages: Set<String> ,setup{ Params :  Returns : void} tearDown{ Params :  Returns : void} syspropPriority{ Params :  Returns : void} vertxJulFilePriority{ Params :  Returns : void} SLF4JPriority{ Params :  Returns : void} Log4j2Priority{ Params :  Returns : void} JULDefault{ Params :  Returns : void} loggingBackend{ Params :  Returns : String} loadClass{ Params : String,boolean Returns : Class<?>} getResource{ Params : String Returns : URL} ,loadClass getResource ,,,,,,,,HashSet ClassNotFoundException ClassNotFoundException ByteArrayOutputStream ClassNotFoundException ,super: , name
vert.x-master,io.vertx.core.impl.logging,NoExceptionInInitializerErrorTest,1,1,0,0,0,false,0 ,0 ,VertxContextConverter ,,tearDown{ Params :  Returns : void} doTest{ Params :  Returns : void} format{ Params : LogEvent,StringBuilder Returns : void} newInstance{ Params : String[] Returns : VertxContextConverter} ,format ,newInstance ,,,,,,,VertxContextConverter ,Vertx: 
vert.x-master,io.vertx.core.impl.logging,VertxContextConverter,3,1,0,1,0,false,0 ,0 ,VertxContextConverter ,,tearDown{ Params :  Returns : void} doTest{ Params :  Returns : void} format{ Params : LogEvent,StringBuilder Returns : void} newInstance{ Params : String[] Returns : VertxContextConverter} ,format ,newInstance ,,,,,,,VertxContextConverter ,Vertx: 
vert.x-master,io.vertx.core.impl,ServiceLoaderTransportTest,1,1,0,0,0,false,AsyncTestBase ,0 ,0 ,,testServiceLoaderTransportNotAvailable{ Params :  Returns : void} ,,,,,,,,,VertxOptions ,((VertxInternal) vertx): 
vert.x-master,io.vertx.core.impl.utils,ConcurrentCyclicSequenceTest,1,1,0,0,0,false,0 ,0 ,0 ,,testEmpty{ Params :  Returns : void} testAdd{ Params :  Returns : void} testRemove{ Params :  Returns : void} testNullElement{ Params :  Returns : void} testRoundRobin{ Params :  Returns : void} toList{ Params : ConcurrentCyclicSequence<T> Returns : List<T>} testIteratorOfEmpty{ Params :  Returns : void} testIteratorOfSingleton{ Params :  Returns : void} testIterator{ Params :  Returns : void} advance{ Params : ConcurrentCyclicSequence<String>,int Returns : void} toList{ Params : Iterator<T> Returns : List<T>} ,,toList toList ,,,,,,,ConcurrentCyclicSequence ConcurrentCyclicSequence ConcurrentCyclicSequence ConcurrentCyclicSequence ConcurrentCyclicSequence AtomicInteger AtomicBoolean Thread ArrayList ConcurrentCyclicSequence ConcurrentCyclicSequence ConcurrentCyclicSequence ArrayList ,it: , ret::add
vert.x-master,io.vertx.core.impl,VertxFactoryTest,1,1,0,0,0,false,0 ,0 ,CustomExecutorServiceFactory ,testFolder: TemporaryFolder ,testCreate{ Params :  Returns : void} testCreateClustered{ Params :  Returns : void} testFactoryMetricsOverridesMetaInf{ Params :  Returns : void} testFactoryMetricsFactoryOverridesOptions{ Params :  Returns : void} testFactoryTracerOverridesMetaInf{ Params :  Returns : void} testFactoryTracerFactoryOverridesOptions{ Params :  Returns : void} tracer{ Params : TracingOptions Returns : VertxTracer} testFactoryClusterManagerOverridesMetaInf{ Params :  Returns : void} testFactoryTransportOverridesDefault{ Params :  Returns : void} testThatThreadFactoryCanCreateThreadsDuringTheirInitialization{ Params :  Returns : void} newVertxThread{ Params : Runnable,String,boolean,long,TimeUnit Returns : VertxThread} createExecutor{ Params : ThreadFactory,Integer,Integer Returns : ExecutorService} runWithServiceFromMetaInf{ Params : Class<?>,String,Runnable Returns : void} ,tracer newVertxThread createExecutor ,,,,,,,,TemporaryFolder VertxBuilder VertxBuilder CompletableFuture FakeVertxMetrics MetricsOptions VertxBuilder VertxOptions FakeVertxMetrics MetricsOptions AssertionError VertxBuilder VertxOptions FakeTracer TracingOptions VertxBuilder VertxOptions FakeTracer TracingOptions VertxTracerFactory AssertionError VertxBuilder VertxOptions FakeClusterManager CompletableFuture VertxBuilder VertxOptions VertxBuilder JDKTransport VertxBuilder VertxThreadFactory CustomExecutorServiceFactory File File URLClassLoader AssertionFailedError ,thread: , prev
vert.x-master,io.vertx.core.impl,CustomExecutorServiceFactory,3,2,0,0,0,false,0 ,0 ,CustomExecutorServiceFactory ,,testCreate{ Params :  Returns : void} testCreateClustered{ Params :  Returns : void} testFactoryMetricsOverridesMetaInf{ Params :  Returns : void} testFactoryMetricsFactoryOverridesOptions{ Params :  Returns : void} testFactoryTracerOverridesMetaInf{ Params :  Returns : void} testFactoryTracerFactoryOverridesOptions{ Params :  Returns : void} tracer{ Params : TracingOptions Returns : VertxTracer} testFactoryClusterManagerOverridesMetaInf{ Params :  Returns : void} testFactoryTransportOverridesDefault{ Params :  Returns : void} testThatThreadFactoryCanCreateThreadsDuringTheirInitialization{ Params :  Returns : void} newVertxThread{ Params : Runnable,String,boolean,long,TimeUnit Returns : VertxThread} createExecutor{ Params : ThreadFactory,Integer,Integer Returns : ExecutorService} runWithServiceFromMetaInf{ Params : Class<?>,String,Runnable Returns : void} ,tracer newVertxThread createExecutor ,,,,ExecutorServiceFactory ,,,,,Executors: 
vert.x-master,io.vertx.core,IsolatingClassLoaderTest,1,1,0,0,0,false,0 ,0 ,0 ,resourceName: String url1: URL url2: URL url3: URL ucl: URLClassLoader icl: IsolatingClassLoader ,setUp{ Params :  Returns : void} testGetResource{ Params :  Returns : void} testGetResourceNull{ Params :  Returns : void} testGetResources{ Params :  Returns : void} checkResource{ Params : URL,URL Returns : void} testGetResourcesNull{ Params :  Returns : void} testGetResourceAsStream{ Params :  Returns : void} testGetResourceAsStream{ Params : long,ClassLoader Returns : void} ,,,,,,IsolatingClassLoader ,,IsolatingClassLoader ,File File File URLClassLoader IsolatingClassLoader Scanner JsonObject ,json: , "ver", -1L
vert.x-master,io.vertx.core.json,JacksonDatabindTest,1,1,0,0,0,false,VertxTestBase ,0 ,Pojo ,,testGetMapper{ Params :  Returns : void} testGetPrettyMapper{ Params :  Returns : void} testGenericDecoding{ Params :  Returns : void} testInstantDecoding{ Params :  Returns : void} testNullInstantDecoding{ Params :  Returns : void} testBytesDecoding{ Params :  Returns : void} testNullBytesDecoding{ Params :  Returns : void} ,,,,,,,,,Pojo TypeReference TypeReference Pojo Pojo Pojo Pojo ,: , original.bytes, decoded.bytes
vert.x-master,io.vertx.core.json,Pojo,3,2,0,1,0,false,VertxTestBase ,0 ,Pojo ,value: String instant: Instant bytes: byte ,testGetMapper{ Params :  Returns : void} testGetPrettyMapper{ Params :  Returns : void} testGenericDecoding{ Params :  Returns : void} testInstantDecoding{ Params :  Returns : void} testNullInstantDecoding{ Params :  Returns : void} testBytesDecoding{ Params :  Returns : void} testNullBytesDecoding{ Params :  Returns : void} ,,,,,,,,,,null
vert.x-master,io.vertx.core.json,JacksonTest,1,1,0,0,0,false,VertxTestBase ,0 ,MyPojo ,codec: JacksonCodec ,testEncodeUnknownNumber{ Params :  Returns : void} intValue{ Params :  Returns : int} longValue{ Params :  Returns : long} floatValue{ Params :  Returns : float} doubleValue{ Params :  Returns : double} testEncodePojoFailure{ Params :  Returns : void} encodeToBuffer{ Params :  Returns : void} ,intValue longValue floatValue doubleValue ,,,,,JacksonCodec ,,JacksonCodec ,JacksonCodec Number UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException MyPojo RuntimeException ,codec: , new RuntimeException("Unsupported")
vert.x-master,io.vertx.core.json,MyPojo,3,1,0,1,0,false,VertxTestBase ,0 ,MyPojo ,,testEncodeUnknownNumber{ Params :  Returns : void} intValue{ Params :  Returns : int} longValue{ Params :  Returns : long} floatValue{ Params :  Returns : float} doubleValue{ Params :  Returns : double} testEncodePojoFailure{ Params :  Returns : void} encodeToBuffer{ Params :  Returns : void} ,intValue longValue floatValue doubleValue ,,,,,,,,,null
vert.x-master,io.vertx.core.json,JsonArrayTest,1,1,0,0,0,false,0 ,0 ,SomeClass ,jsonArray: JsonArray ,setUp{ Params :  Returns : void} testGetInteger{ Params :  Returns : void} testGetLong{ Params :  Returns : void} testGetFloat{ Params :  Returns : void} testGetDouble{ Params :  Returns : void} testGetString{ Params :  Returns : void} testGetBoolean{ Params :  Returns : void} testGetBinary{ Params :  Returns : void} testGetBuffer{ Params :  Returns : void} testGetInstant{ Params :  Returns : void} testGetJsonObject{ Params :  Returns : void} testGetJsonArray{ Params :  Returns : void} testGetValue{ Params :  Returns : void} testAddEnum{ Params :  Returns : void} testAddString{ Params :  Returns : void} testAddCharSequence{ Params :  Returns : void} testAddInteger{ Params :  Returns : void} testAddLong{ Params :  Returns : void} testAddFloat{ Params :  Returns : void} testAddDouble{ Params :  Returns : void} testAddBoolean{ Params :  Returns : void} testAddJsonObject{ Params :  Returns : void} testAddJsonArray{ Params :  Returns : void} testAddBinary{ Params :  Returns : void} testAddInstant{ Params :  Returns : void} testAddObject{ Params :  Returns : void} testAddAllJsonArray{ Params :  Returns : void} testAddNull{ Params :  Returns : void} testHasNull{ Params :  Returns : void} testContains{ Params :  Returns : void} testRemoveByObject{ Params :  Returns : void} testRemoveByWrappedObject{ Params :  Returns : void} testRemoveByPos{ Params :  Returns : void} testSize{ Params :  Returns : void} testClear{ Params :  Returns : void} testIterator{ Params :  Returns : void} testStream{ Params :  Returns : void} testCopy{ Params :  Returns : void} testInvalidValsOnCopy1{ Params :  Returns : void} testInvalidValsOnCopy2{ Params :  Returns : void} testInvalidValsOnCopy3{ Params :  Returns : void} testToString{ Params :  Returns : void} testGetList{ Params :  Returns : void} testCreateFromList{ Params :  Returns : void} testCreateFromListCharSequence{ Params :  Returns : void} testCreateFromListNestedJsonObject{ Params :  Returns : void} testCreateFromListNestedMap{ Params :  Returns : void} testCreateFromListNestedJsonArray{ Params :  Returns : void} testCreateFromListNestedList{ Params :  Returns : void} testCreateFromBuffer{ Params :  Returns : void} testClusterSerializable{ Params :  Returns : void} testJsonArrayEquality{ Params :  Returns : void} testStreamCorrectTypes{ Params :  Returns : void} testRemoveMethodReturnedObject{ Params :  Returns : void} testStreamCorrectTypes{ Params : JsonObject Returns : void} testInvalidConstruction{ Params :  Returns : void} testSetEnum{ Params :  Returns : void} testSetString{ Params :  Returns : void} testSetCharSequence{ Params :  Returns : void} testSetInteger{ Params :  Returns : void} testSetLong{ Params :  Returns : void} testSetFloat{ Params :  Returns : void} testSetDouble{ Params :  Returns : void} testSetBoolean{ Params :  Returns : void} testSetJsonObject{ Params :  Returns : void} testSetJsonArray{ Params :  Returns : void} testSetBinary{ Params :  Returns : void} testSetInstant{ Params :  Returns : void} testSetObject{ Params :  Returns : void} testSetNull{ Params :  Returns : void} testAddWithPos{ Params :  Returns : void} testNoEncode{ Params :  Returns : void} testBigDecimal{ Params :  Returns : void} testShareable{ Params :  Returns : void} copy{ Params :  Returns : Shareable} testNumber{ Params :  Returns : void} testStreamRawVSJSON{ Params :  Returns : void} testJsonArrayOfArgs{ Params :  Returns : void} testJsonArrayOfEmpty{ Params :  Returns : void} ,copy ,,,,,JsonArray ,,JsonArray ,JsonArray JsonObject JsonArray JsonObject JsonArray ArrayList HashMap JsonArray ArrayList ArrayList JsonArray StringBuilder JsonObject JsonArray JsonObject JsonArray SomeClass BigDecimal Date JsonArray JsonObject JsonArray JsonObject JsonArray JsonArray JsonObject JsonObject JsonObject StringBuilder SomeClass JsonArray SomeClass JsonArray SomeClass JsonArray SomeClass JsonObject ArrayList JsonArray ArrayList StringBuilder JsonArray ArrayList JsonObject JsonArray ArrayList HashMap JsonArray ArrayList JsonArray JsonArray ArrayList ArrayList JsonArray JsonArray JsonArray JsonArray JsonObject JsonObject JsonObject JsonObject JsonArray JsonObject JsonArray JsonObject JsonObject JsonArray JsonArray JsonArray JsonArray JsonArray JsonArray JsonArray JsonArray JsonArray JsonArray JsonArray JsonObject JsonArray JsonObject JsonArray JsonArray JsonArray JsonArray StringBuilder StringBuilder JsonObject JsonArray SomeClass BigDecimal Date JsonArray JsonArray BigDecimal JsonArray Shareable JsonArray JsonArray BigDecimal BigInteger JsonArray JsonArray JsonObject JsonArray JsonArray ,JsonArray: 
vert.x-master,io.vertx.core.json,SomeClass,3,0,0,1,0,false,0 ,0 ,SomeClass ,CLONER: Function<Object, ?> ,setUp{ Params :  Returns : void} testGetInteger{ Params :  Returns : void} testGetLong{ Params :  Returns : void} testGetFloat{ Params :  Returns : void} testGetDouble{ Params :  Returns : void} testGetString{ Params :  Returns : void} testGetBoolean{ Params :  Returns : void} testGetBinary{ Params :  Returns : void} testGetBuffer{ Params :  Returns : void} testGetInstant{ Params :  Returns : void} testGetJsonObject{ Params :  Returns : void} testGetJsonArray{ Params :  Returns : void} testGetValue{ Params :  Returns : void} testAddEnum{ Params :  Returns : void} testAddString{ Params :  Returns : void} testAddCharSequence{ Params :  Returns : void} testAddInteger{ Params :  Returns : void} testAddLong{ Params :  Returns : void} testAddFloat{ Params :  Returns : void} testAddDouble{ Params :  Returns : void} testAddBoolean{ Params :  Returns : void} testAddJsonObject{ Params :  Returns : void} testAddJsonArray{ Params :  Returns : void} testAddBinary{ Params :  Returns : void} testAddInstant{ Params :  Returns : void} testAddObject{ Params :  Returns : void} testAddAllJsonArray{ Params :  Returns : void} testAddNull{ Params :  Returns : void} testHasNull{ Params :  Returns : void} testContains{ Params :  Returns : void} testRemoveByObject{ Params :  Returns : void} testRemoveByWrappedObject{ Params :  Returns : void} testRemoveByPos{ Params :  Returns : void} testSize{ Params :  Returns : void} testClear{ Params :  Returns : void} testIterator{ Params :  Returns : void} testStream{ Params :  Returns : void} testCopy{ Params :  Returns : void} testInvalidValsOnCopy1{ Params :  Returns : void} testInvalidValsOnCopy2{ Params :  Returns : void} testInvalidValsOnCopy3{ Params :  Returns : void} testToString{ Params :  Returns : void} testGetList{ Params :  Returns : void} testCreateFromList{ Params :  Returns : void} testCreateFromListCharSequence{ Params :  Returns : void} testCreateFromListNestedJsonObject{ Params :  Returns : void} testCreateFromListNestedMap{ Params :  Returns : void} testCreateFromListNestedJsonArray{ Params :  Returns : void} testCreateFromListNestedList{ Params :  Returns : void} testCreateFromBuffer{ Params :  Returns : void} testClusterSerializable{ Params :  Returns : void} testJsonArrayEquality{ Params :  Returns : void} testStreamCorrectTypes{ Params :  Returns : void} testRemoveMethodReturnedObject{ Params :  Returns : void} testStreamCorrectTypes{ Params : JsonObject Returns : void} testInvalidConstruction{ Params :  Returns : void} testSetEnum{ Params :  Returns : void} testSetString{ Params :  Returns : void} testSetCharSequence{ Params :  Returns : void} testSetInteger{ Params :  Returns : void} testSetLong{ Params :  Returns : void} testSetFloat{ Params :  Returns : void} testSetDouble{ Params :  Returns : void} testSetBoolean{ Params :  Returns : void} testSetJsonObject{ Params :  Returns : void} testSetJsonArray{ Params :  Returns : void} testSetBinary{ Params :  Returns : void} testSetInstant{ Params :  Returns : void} testSetObject{ Params :  Returns : void} testSetNull{ Params :  Returns : void} testAddWithPos{ Params :  Returns : void} testNoEncode{ Params :  Returns : void} testBigDecimal{ Params :  Returns : void} testShareable{ Params :  Returns : void} copy{ Params :  Returns : Shareable} testNumber{ Params :  Returns : void} testStreamRawVSJSON{ Params :  Returns : void} testJsonArrayOfArgs{ Params :  Returns : void} testJsonArrayOfEmpty{ Params :  Returns : void} ,copy ,,,,,,,,SomeClass ,null
vert.x-master,io.vertx.core.json,JsonCodecTest,1,1,0,0,0,false,0 ,0 ,0 ,INTEGER_TYPE_REF: TypeReference<Integer> LONG_TYPE_REF: TypeReference<Long> STRING_TYPE_REF: TypeReference<String> FLOAT_TYPE_REF: TypeReference<Float> DOUBLE_TYPE_REF: TypeReference<Double> MAP_TYPE_REF: TypeReference<Map<String, Object>> LIST_TYPE_REF: TypeReference<List<Object>> BOOLEAN_TYPE_REF: TypeReference<Boolean> mapper: JacksonCodec ,mappers{ Params :  Returns : Collection<Object[]>} testEncodeJsonObject{ Params :  Returns : void} testEncodeJsonArray{ Params :  Returns : void} testEncodeJsonObjectToBuffer{ Params :  Returns : void} testEncodeJsonArrayToBuffer{ Params :  Returns : void} testEncodeJsonObjectPrettily{ Params :  Returns : void} testEncodeJsonArrayPrettily{ Params :  Returns : void} testDecodeJsonObject{ Params :  Returns : void} testDecodeJsonArray{ Params :  Returns : void} testDecodeJsonObjectWithComments{ Params :  Returns : void} testDecodeJsonArrayWithComments{ Params :  Returns : void} testDecodeJsonObjectWithInvalidJson{ Params :  Returns : void} testDecodeJsonArrayWithInvalidJson{ Params :  Returns : void} encodeCustomTypeInstant{ Params :  Returns : void} decodeCustomTypeInstant{ Params :  Returns : void} encodeCustomTypeBinary{ Params :  Returns : void} decodeCustomTypeBinary{ Params :  Returns : void} encodeNull{ Params :  Returns : void} encodeToBuffer{ Params :  Returns : void} encodeNullToBuffer{ Params :  Returns : void} testDecodeValue{ Params :  Returns : void} testEnumValue{ Params :  Returns : void} testBigNumberValues{ Params :  Returns : void} assertDecodeValue{ Params : Buffer,T,TypeReference<T> Returns : void} testDecodeBufferUnknowContent{ Params :  Returns : void} testDecodeStringUnknowContent{ Params :  Returns : void} testDecodeUnknowContent{ Params : boolean Returns : void} testEncodeCollectionState{ Params :  Returns : void} checkMap{ Params : Object Returns : String} checkList{ Params : Object Returns : String} ,,mappers ,,,,JacksonCodec ,,JacksonCodec ,TypeReference TypeReference TypeReference TypeReference TypeReference TypeReference TypeReference TypeReference DatabindCodec JacksonCodec JsonObject JsonObject JsonArray JsonArray JsonObject JsonArray JsonObject JsonObject JsonArray JsonArray JsonObject JsonArray JsonObject JsonObject JsonArray JsonArray JsonObject JsonArray JsonObject JsonArray JsonObject JsonArray String BigDecimal BigInteger JsonObject JsonArray BigInteger BigDecimal BigDecimal JsonObject JsonObject JsonArray JsonArray HashMap ,Collections: , o
vert.x-master,io.vertx.core.json,JsonFactory1,1,1,0,0,0,false,0 ,JsonFactory ,0 ,CODEC: JsonCodec ORDER: int ,order{ Params :  Returns : int} codec{ Params :  Returns : JsonCodec} ,order codec ,,,,JsonFactory ,,,,JacksonCodec Random ,Collections: , o
vert.x-master,io.vertx.core.json,JsonFactory2,1,1,0,0,0,false,0 ,JsonFactory ,0 ,CODEC: JsonCodec ORDER: int ,order{ Params :  Returns : int} codec{ Params :  Returns : JsonCodec} ,order codec ,,,,JsonFactory ,,,,JacksonCodec Random ,Collections: , o
vert.x-master,io.vertx.core.json,JsonFactory3,1,1,0,0,0,false,0 ,JsonFactory ,0 ,CODEC: JsonCodec ORDER: int ,order{ Params :  Returns : int} codec{ Params :  Returns : JsonCodec} ,order codec ,,,,JsonFactory ,,,,JacksonCodec Random ,Collections: , o
vert.x-master,io.vertx.core.json,JsonFactoryTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,loadFactoriesFromTCCL{ Params :  Returns : void} ,,,,,,,,,URLClassLoader File TreeMap ,factory: 
vert.x-master,io.vertx.core.json,JsonObjectTest,1,1,0,0,0,false,0 ,0 ,SomeClass ,jsonObject: JsonObject ,setUp{ Params :  Returns : void} testGetInteger{ Params :  Returns : void} testGetIntegerDefault{ Params :  Returns : void} testGetLong{ Params :  Returns : void} testGetLongDefault{ Params :  Returns : void} testGetFloat{ Params :  Returns : void} testGetFloatDefault{ Params :  Returns : void} testGetDouble{ Params :  Returns : void} testGetDoubleDefault{ Params :  Returns : void} testGetString{ Params :  Returns : void} testGetStringDefault{ Params :  Returns : void} testGetBoolean{ Params :  Returns : void} testGetBooleanDefault{ Params :  Returns : void} testGetBinary{ Params :  Returns : void} testGetBuffer{ Params :  Returns : void} testGetInstant{ Params :  Returns : void} testGetBinaryDefault{ Params :  Returns : void} testGetInstantDefault{ Params :  Returns : void} testGetJsonObject{ Params :  Returns : void} testGetJsonObjectDefault{ Params :  Returns : void} testGetJsonArray{ Params :  Returns : void} testGetJsonArrayDefault{ Params :  Returns : void} testGetValue{ Params :  Returns : void} testGetValueDefault{ Params :  Returns : void} testContainsKey{ Params :  Returns : void} testFieldNames{ Params :  Returns : void} testSize{ Params :  Returns : void} testPutEnum{ Params :  Returns : void} testPutString{ Params :  Returns : void} testPutCharSequence{ Params :  Returns : void} testPutInteger{ Params :  Returns : void} testPutLong{ Params :  Returns : void} testPutFloat{ Params :  Returns : void} testPutDouble{ Params :  Returns : void} testPutBoolean{ Params :  Returns : void} testPutJsonObject{ Params :  Returns : void} testPutJsonArray{ Params :  Returns : void} testPutBinary{ Params :  Returns : void} testPutInstant{ Params :  Returns : void} testPutNull{ Params :  Returns : void} testPutValue{ Params :  Returns : void} testMergeIn1{ Params :  Returns : void} testMergeIn2{ Params :  Returns : void} testMergeInDepth0{ Params :  Returns : void} testMergeInFlat{ Params :  Returns : void} testMergeInDepth1{ Params :  Returns : void} testMergeInDepth2{ Params :  Returns : void} testToString{ Params :  Returns : void} testClear{ Params :  Returns : void} testIsEmpty{ Params :  Returns : void} testRemove{ Params :  Returns : void} testIterator{ Params :  Returns : void} testIteratorDoesntChangeObject{ Params :  Returns : void} testStream{ Params :  Returns : void} testCopy{ Params :  Returns : void} testInvalidValsOnCopy1{ Params :  Returns : void} testInvalidValsOnCopy2{ Params :  Returns : void} testInvalidValsOnCopy3{ Params :  Returns : void} testGetMap{ Params :  Returns : void} testCreateFromMap{ Params :  Returns : void} testCreateFromBuffer{ Params :  Returns : void} testCreateFromMapCharSequence{ Params :  Returns : void} testCreateFromMapNestedJsonObject{ Params :  Returns : void} testCreateFromMapNestedMap{ Params :  Returns : void} testCreateFromMapNestedJsonArray{ Params :  Returns : void} testCreateFromMapNestedList{ Params :  Returns : void} testClusterSerializable{ Params :  Returns : void} testNumberEquality{ Params :  Returns : void} assertNumberEquals{ Params : Number,Number Returns : void} assertNumberNotEquals{ Params : Number,Number Returns : void} testJsonObjectEquality{ Params :  Returns : void} testJsonObjectEquality2{ Params :  Returns : void} testPutInstantAsObject{ Params :  Returns : void} testStreamCorrectTypes{ Params :  Returns : void} testRemoveMethodReturnedObject{ Params :  Returns : void} testOrder{ Params :  Returns : void} testMergeInNullValue{ Params :  Returns : void} testStreamCorrectTypes{ Params : JsonObject Returns : void} createJsonObject{ Params :  Returns : JsonObject} testInvalidConstruction{ Params :  Returns : void} testEquals{ Params :  Returns : void} testNoEncode{ Params :  Returns : void} testBigDecimal{ Params :  Returns : void} testShareable{ Params :  Returns : void} copy{ Params :  Returns : Shareable} testNumber{ Params :  Returns : void} testNumberDefaults{ Params :  Returns : void} testStreamRawVSJSON{ Params :  Returns : void} testJsonObjectOfArgs{ Params :  Returns : void} testJsonObjectOfEmpty{ Params :  Returns : void} ,copy ,,,,,,,,JsonObject JsonObject JsonObject JsonObject JsonArray JsonArray JsonArray JsonObject JsonArray HashMap HashMap JsonObject HashMap ArrayList JsonObject JsonObject JsonArray JsonObject StringBuilder StringBuilder StringBuilder JsonObject JsonObject JsonObject JsonObject JsonArray JsonArray JsonArray JsonArray JsonObject JsonArray SomeClass BigDecimal Date JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject LinkedHashMap HashMap ArrayList JsonObject StringBuilder SomeClass JsonObject SomeClass JsonObject SomeClass JsonObject SomeClass HashMap JsonObject JsonObject JsonObject HashMap StringBuilder JsonObject HashMap JsonObject JsonObject HashMap HashMap JsonObject HashMap JsonArray JsonObject HashMap JsonObject JsonObject JsonObject JsonObject JsonArray JsonArray JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonArray JsonArray JsonArray JsonArray JsonObject JsonArray JsonObject JsonArray JsonArray JsonObject JsonObject JsonArray ArrayList HashMap JsonObject JsonObject JsonObject JsonObject JsonObject JsonArray ArrayList StringBuilder JsonObject ArrayList JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject BigDecimal JsonObject AtomicInteger Shareable JsonObject JsonObject BigDecimal BigInteger JsonObject JsonObject BigDecimal BigInteger JsonObject JsonObject JsonArray JsonObject ,JsonObject: 
vert.x-master,io.vertx.core.json,SomeClass,3,0,0,1,0,false,0 ,0 ,SomeClass ,CLONER: Function<Object, ?> ,setUp{ Params :  Returns : void} testGetInteger{ Params :  Returns : void} testGetIntegerDefault{ Params :  Returns : void} testGetLong{ Params :  Returns : void} testGetLongDefault{ Params :  Returns : void} testGetFloat{ Params :  Returns : void} testGetFloatDefault{ Params :  Returns : void} testGetDouble{ Params :  Returns : void} testGetDoubleDefault{ Params :  Returns : void} testGetString{ Params :  Returns : void} testGetStringDefault{ Params :  Returns : void} testGetBoolean{ Params :  Returns : void} testGetBooleanDefault{ Params :  Returns : void} testGetBinary{ Params :  Returns : void} testGetBuffer{ Params :  Returns : void} testGetInstant{ Params :  Returns : void} testGetBinaryDefault{ Params :  Returns : void} testGetInstantDefault{ Params :  Returns : void} testGetJsonObject{ Params :  Returns : void} testGetJsonObjectDefault{ Params :  Returns : void} testGetJsonArray{ Params :  Returns : void} testGetJsonArrayDefault{ Params :  Returns : void} testGetValue{ Params :  Returns : void} testGetValueDefault{ Params :  Returns : void} testContainsKey{ Params :  Returns : void} testFieldNames{ Params :  Returns : void} testSize{ Params :  Returns : void} testPutEnum{ Params :  Returns : void} testPutString{ Params :  Returns : void} testPutCharSequence{ Params :  Returns : void} testPutInteger{ Params :  Returns : void} testPutLong{ Params :  Returns : void} testPutFloat{ Params :  Returns : void} testPutDouble{ Params :  Returns : void} testPutBoolean{ Params :  Returns : void} testPutJsonObject{ Params :  Returns : void} testPutJsonArray{ Params :  Returns : void} testPutBinary{ Params :  Returns : void} testPutInstant{ Params :  Returns : void} testPutNull{ Params :  Returns : void} testPutValue{ Params :  Returns : void} testMergeIn1{ Params :  Returns : void} testMergeIn2{ Params :  Returns : void} testMergeInDepth0{ Params :  Returns : void} testMergeInFlat{ Params :  Returns : void} testMergeInDepth1{ Params :  Returns : void} testMergeInDepth2{ Params :  Returns : void} testToString{ Params :  Returns : void} testClear{ Params :  Returns : void} testIsEmpty{ Params :  Returns : void} testRemove{ Params :  Returns : void} testIterator{ Params :  Returns : void} testIteratorDoesntChangeObject{ Params :  Returns : void} testStream{ Params :  Returns : void} testCopy{ Params :  Returns : void} testInvalidValsOnCopy1{ Params :  Returns : void} testInvalidValsOnCopy2{ Params :  Returns : void} testInvalidValsOnCopy3{ Params :  Returns : void} testGetMap{ Params :  Returns : void} testCreateFromMap{ Params :  Returns : void} testCreateFromBuffer{ Params :  Returns : void} testCreateFromMapCharSequence{ Params :  Returns : void} testCreateFromMapNestedJsonObject{ Params :  Returns : void} testCreateFromMapNestedMap{ Params :  Returns : void} testCreateFromMapNestedJsonArray{ Params :  Returns : void} testCreateFromMapNestedList{ Params :  Returns : void} testClusterSerializable{ Params :  Returns : void} testNumberEquality{ Params :  Returns : void} assertNumberEquals{ Params : Number,Number Returns : void} assertNumberNotEquals{ Params : Number,Number Returns : void} testJsonObjectEquality{ Params :  Returns : void} testJsonObjectEquality2{ Params :  Returns : void} testPutInstantAsObject{ Params :  Returns : void} testStreamCorrectTypes{ Params :  Returns : void} testRemoveMethodReturnedObject{ Params :  Returns : void} testOrder{ Params :  Returns : void} testMergeInNullValue{ Params :  Returns : void} testStreamCorrectTypes{ Params : JsonObject Returns : void} createJsonObject{ Params :  Returns : JsonObject} testInvalidConstruction{ Params :  Returns : void} testEquals{ Params :  Returns : void} testNoEncode{ Params :  Returns : void} testBigDecimal{ Params :  Returns : void} testShareable{ Params :  Returns : void} copy{ Params :  Returns : Shareable} testNumber{ Params :  Returns : void} testNumberDefaults{ Params :  Returns : void} testStreamRawVSJSON{ Params :  Returns : void} testJsonObjectOfArgs{ Params :  Returns : void} testJsonObjectOfEmpty{ Params :  Returns : void} ,copy ,,,,,,,,SomeClass ,null
vert.x-master,io.vertx.core.json,JsonPOJOMapperTest,1,1,0,0,0,false,0 ,0 ,MyType MyType2 MyType3 ,,testSerialization{ Params :  Returns : void} testInstantFromPOJO{ Params :  Returns : void} testInstantToPOJO{ Params :  Returns : void} testInvalidInstantToPOJO{ Params :  Returns : void} testBase64FromPOJO{ Params :  Returns : void} testBase64ToPOJO{ Params :  Returns : void} testInvalidBase64ToPOJO{ Params :  Returns : void} testInvalidValueToPOJO{ Params : String Returns : void} testNullPOJO{ Params :  Returns : void} ,,,,,,,,,HashMap ArrayList ArrayList MyType MyType Integer MyType2 JsonObject MyType2 JsonObject JsonObject JsonObject ,JsonObject: , null
vert.x-master,io.vertx.core.json,MyType,3,1,0,1,0,false,0 ,0 ,MyType MyType2 MyType3 ,a: int b: String c: HashMap<String, Object> d: List<MyType> e: List<Integer> ,testSerialization{ Params :  Returns : void} testInstantFromPOJO{ Params :  Returns : void} testInstantToPOJO{ Params :  Returns : void} testInvalidInstantToPOJO{ Params :  Returns : void} testBase64FromPOJO{ Params :  Returns : void} testBase64ToPOJO{ Params :  Returns : void} testInvalidBase64ToPOJO{ Params :  Returns : void} testInvalidValueToPOJO{ Params : String Returns : void} testNullPOJO{ Params :  Returns : void} ,,,,,,,,,HashMap ArrayList ArrayList ,null
vert.x-master,io.vertx.core.json,MyType2,3,1,0,1,0,false,0 ,0 ,MyType MyType2 MyType3 ,isodate: Instant base64: byte ,testSerialization{ Params :  Returns : void} testInstantFromPOJO{ Params :  Returns : void} testInstantToPOJO{ Params :  Returns : void} testInvalidInstantToPOJO{ Params :  Returns : void} testBase64FromPOJO{ Params :  Returns : void} testBase64ToPOJO{ Params :  Returns : void} testInvalidBase64ToPOJO{ Params :  Returns : void} testInvalidValueToPOJO{ Params : String Returns : void} testNullPOJO{ Params :  Returns : void} ,,,,,,,,,,null
vert.x-master,io.vertx.core.json,MyType3,3,1,0,1,0,false,0 ,0 ,MyType MyType2 MyType3 ,isodate: Instant base64: Buffer ,testSerialization{ Params :  Returns : void} testInstantFromPOJO{ Params :  Returns : void} testInstantToPOJO{ Params :  Returns : void} testInvalidInstantToPOJO{ Params :  Returns : void} testBase64FromPOJO{ Params :  Returns : void} testBase64ToPOJO{ Params :  Returns : void} testInvalidBase64ToPOJO{ Params :  Returns : void} testInvalidValueToPOJO{ Params : String Returns : void} testNullPOJO{ Params :  Returns : void} ,,,,,,,,,,null
vert.x-master,io.vertx.core.json.pointer.impl,JsonPointerTest,1,1,0,0,0,false,0 ,0 ,0 ,,testParsing{ Params :  Returns : void} testParsingErrorWrongFirstElement{ Params :  Returns : void} testEncodingParsing{ Params :  Returns : void} testURIParsing{ Params :  Returns : void} testURIEncodedParsing{ Params :  Returns : void} testURIJsonPointerEncodedParsing{ Params :  Returns : void} testBuilding{ Params :  Returns : void} testURIBuilding{ Params :  Returns : void} testEmptyBuilding{ Params :  Returns : void} testAppendOtherPointer{ Params :  Returns : void} testNullQuerying{ Params :  Returns : void} testNullQueryingRootPointer{ Params :  Returns : void} testNullQueryingRootPointerDefault{ Params :  Returns : void} testJsonObjectQuerying{ Params :  Returns : void} testJsonObjectQueryingDefaultValue{ Params :  Returns : void} testJsonArrayQuerying{ Params :  Returns : void} testJsonArrayQueryingOrDefault{ Params :  Returns : void} testRootPointer{ Params :  Returns : void} testRootPointerWrite{ Params :  Returns : void} testWrongUsageOfDashForQuerying{ Params :  Returns : void} testRFCExample{ Params :  Returns : void} testWriteJsonObject{ Params :  Returns : void} testWriteWithCreateOnMissingJsonObject{ Params :  Returns : void} testWriteJsonObjectOverride{ Params :  Returns : void} testWriteJsonArray{ Params :  Returns : void} testWriteJsonArrayAppend{ Params :  Returns : void} testWriteJsonArraySubstitute{ Params :  Returns : void} testNestedWriteJsonArraySubstitute{ Params :  Returns : void} testIsParent{ Params :  Returns : void} testIsParentDifferentURI{ Params :  Returns : void} testIsParentWithRootPointer{ Params :  Returns : void} testTracedQuery{ Params :  Returns : void} testEmptyTracedQuery{ Params :  Returns : void} testNotFoundTracedQuery{ Params :  Returns : void} ,,,,,,,,,ArrayList JsonPointerImpl JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonArray JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonArray JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonArray JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonArray JsonArray JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonArray JsonObject JsonObject JsonObject JsonObject JsonArray JsonObject JsonObject JsonObject JsonObject JsonArray JsonObject JsonObject JsonObject JsonObject JsonArray JsonObject JsonObject JsonObject JsonArray JsonObject JsonObject JsonArray JsonObject ,traced: , 2
vert.x-master,io.vertx.core,LauncherTest,1,1,0,0,0,false,VertxTestBase ,0 ,MyLauncher MySecondLauncher ,expectedVersion: String out: ByteArrayOutputStream stream: PrintStream vertx: Vertx testFolder: TemporaryFolder ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testVersion{ Params :  Returns : void} testRunVerticleWithoutArgs{ Params :  Returns : void} testRunWithoutArgs{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testNoArgsAndNoMainVerticle{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testRunVerticle{ Params :  Returns : void} testRunVerticleMultipleInstances{ Params :  Returns : void} testRunVerticleMultiple{ Params : int Returns : void} testRunVerticleClustered{ Params :  Returns : void} testRunVerticleHA{ Params :  Returns : void} testRunVerticleWithMainVerticleInManifestNoArgs{ Params :  Returns : void} cleanup{ Params : Launcher Returns : void} testRunVerticleWithMainVerticleInManifestWithArgs{ Params :  Returns : void} testRunVerticleWithMainVerticleInManifestWithCustomCommand{ Params :  Returns : void} testRunVerticleWithoutMainVerticleInManifestButWithCustomCommand{ Params :  Returns : void} testRunWithOverriddenDefaultCommand{ Params :  Returns : void} testRunWithOverriddenDefaultCommandRequiringArgs{ Params :  Returns : void} testRunVerticleWithExtendedMainVerticleNoArgs{ Params :  Returns : void} testRunVerticleWithExtendedMainVerticleWithArgs{ Params :  Returns : void} testFatJarWithHelp{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testFatJarWithCommandHelp{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testFatJarWithMissingCommandHelp{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testRunVerticleWithConfString{ Params :  Returns : void} testRunVerticleWithConfFile{ Params :  Returns : void} testConfigureFromSystemProperties{ Params :  Returns : void} testConfigureFromSystemPropertiesClustered{ Params :  Returns : void} testConfigureFromSystemProperties{ Params : boolean Returns : void} clearProperties{ Params :  Returns : void} testConfigureFromJsonFile{ Params :  Returns : void} testConfigureFromJsonString{ Params :  Returns : void} testConfigureFromJson{ Params : boolean Returns : void} testCustomMetricsOptions{ Params :  Returns : void} testConfigureFromSystemPropertiesInvalidPropertyName{ Params :  Returns : void} testConfigureFromSystemPropertiesInvalidPropertyType{ Params :  Returns : void} testCustomMetricsOptionsFromJsonFile{ Params :  Returns : void} testCustomMetricsOptionsFromJsonString{ Params :  Returns : void} testCustomMetricsOptionsFromJson{ Params : boolean Returns : void} testWhenPassingTheMainObject{ Params :  Returns : void} testBare{ Params :  Returns : void} testBareAlias{ Params :  Returns : void} testConfigureClusterHostPortFromProperties{ Params :  Returns : void} testConfigureClusterHostPortFromCommandLine{ Params :  Returns : void} testConfigureClusterPublicHostPortFromCommandLine{ Params :  Returns : void} testOverrideClusterHostPortFromProperties{ Params :  Returns : void} testOverrideClusterHostPortFromCommandLine{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} getVertx{ Params :  Returns : Vertx} getVertxOptions{ Params :  Returns : VertxOptions} afterConfigParsed{ Params : JsonObject Returns : void} beforeStartingVertx{ Params : VertxOptions Returns : void} afterStartingVertx{ Params : Vertx Returns : void} beforeDeployingVerticle{ Params : DeploymentOptions Returns : void} assertHooksInvoked{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} ,setUp tearDown getPrintStream getPrintStream getPrintStream getPrintStream getPrintStream getPrintStream afterConfigParsed beforeStartingVertx afterStartingVertx beforeDeployingVerticle getMainVerticle ,,,,,,,,IllegalStateException BufferedReader InputStreamReader ByteArrayOutputStream PrintStream MyLauncher MyLauncher MyLauncher MyLauncher MyLauncher MyLauncher MyLauncher File IllegalStateException File Launcher File IllegalStateException File Launcher File IllegalStateException File Launcher File IllegalStateException File Launcher File IllegalStateException File Launcher File IllegalStateException File Launcher MySecondLauncher MySecondLauncher File IllegalStateException File Launcher File IllegalStateException File Launcher File IllegalStateException File Launcher MyLauncher JsonObject TemporaryFolder MyLauncher JsonObject MyLauncher HashSet JsonObject JsonObject JsonObject MyLauncher MyLauncher MyLauncher VertxOptions MyLauncher VertxOptions JsonObject JsonObject JsonObject MyLauncher MyLauncher MyLauncher MyLauncher MyLauncher MyLauncher MyLauncher MyLauncher MyLauncher PrintStream ,launcher.options: 
vert.x-master,io.vertx.core,MyLauncher,3,0,0,0,0,false,VertxTestBase ,0 ,MyLauncher MySecondLauncher ,afterConfigParsed: boolean beforeStartingVertxInvoked: boolean afterStartingVertxInvoked: boolean beforeDeployingVerticle: boolean options: VertxOptions deploymentOptions: DeploymentOptions config: JsonObject clusterHost: String clusterPort: int clusterPublicHost: String clusterPublicPort: int stream: PrintStream ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testVersion{ Params :  Returns : void} testRunVerticleWithoutArgs{ Params :  Returns : void} testRunWithoutArgs{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testNoArgsAndNoMainVerticle{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testRunVerticle{ Params :  Returns : void} testRunVerticleMultipleInstances{ Params :  Returns : void} testRunVerticleMultiple{ Params : int Returns : void} testRunVerticleClustered{ Params :  Returns : void} testRunVerticleHA{ Params :  Returns : void} testRunVerticleWithMainVerticleInManifestNoArgs{ Params :  Returns : void} cleanup{ Params : Launcher Returns : void} testRunVerticleWithMainVerticleInManifestWithArgs{ Params :  Returns : void} testRunVerticleWithMainVerticleInManifestWithCustomCommand{ Params :  Returns : void} testRunVerticleWithoutMainVerticleInManifestButWithCustomCommand{ Params :  Returns : void} testRunWithOverriddenDefaultCommand{ Params :  Returns : void} testRunWithOverriddenDefaultCommandRequiringArgs{ Params :  Returns : void} testRunVerticleWithExtendedMainVerticleNoArgs{ Params :  Returns : void} testRunVerticleWithExtendedMainVerticleWithArgs{ Params :  Returns : void} testFatJarWithHelp{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testFatJarWithCommandHelp{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testFatJarWithMissingCommandHelp{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testRunVerticleWithConfString{ Params :  Returns : void} testRunVerticleWithConfFile{ Params :  Returns : void} testConfigureFromSystemProperties{ Params :  Returns : void} testConfigureFromSystemPropertiesClustered{ Params :  Returns : void} testConfigureFromSystemProperties{ Params : boolean Returns : void} clearProperties{ Params :  Returns : void} testConfigureFromJsonFile{ Params :  Returns : void} testConfigureFromJsonString{ Params :  Returns : void} testConfigureFromJson{ Params : boolean Returns : void} testCustomMetricsOptions{ Params :  Returns : void} testConfigureFromSystemPropertiesInvalidPropertyName{ Params :  Returns : void} testConfigureFromSystemPropertiesInvalidPropertyType{ Params :  Returns : void} testCustomMetricsOptionsFromJsonFile{ Params :  Returns : void} testCustomMetricsOptionsFromJsonString{ Params :  Returns : void} testCustomMetricsOptionsFromJson{ Params : boolean Returns : void} testWhenPassingTheMainObject{ Params :  Returns : void} testBare{ Params :  Returns : void} testBareAlias{ Params :  Returns : void} testConfigureClusterHostPortFromProperties{ Params :  Returns : void} testConfigureClusterHostPortFromCommandLine{ Params :  Returns : void} testConfigureClusterPublicHostPortFromCommandLine{ Params :  Returns : void} testOverrideClusterHostPortFromProperties{ Params :  Returns : void} testOverrideClusterHostPortFromCommandLine{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} getVertx{ Params :  Returns : Vertx} getVertxOptions{ Params :  Returns : VertxOptions} afterConfigParsed{ Params : JsonObject Returns : void} beforeStartingVertx{ Params : VertxOptions Returns : void} afterStartingVertx{ Params : Vertx Returns : void} beforeDeployingVerticle{ Params : DeploymentOptions Returns : void} assertHooksInvoked{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} ,setUp tearDown getPrintStream getPrintStream getPrintStream getPrintStream getPrintStream getPrintStream afterConfigParsed beforeStartingVertx afterStartingVertx beforeDeployingVerticle getMainVerticle ,,,,,,,,PrintStream ,: , vertx
vert.x-master,io.vertx.core,MySecondLauncher,3,0,0,0,0,false,VertxTestBase ,0 ,MyLauncher MySecondLauncher ,,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testVersion{ Params :  Returns : void} testRunVerticleWithoutArgs{ Params :  Returns : void} testRunWithoutArgs{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testNoArgsAndNoMainVerticle{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testRunVerticle{ Params :  Returns : void} testRunVerticleMultipleInstances{ Params :  Returns : void} testRunVerticleMultiple{ Params : int Returns : void} testRunVerticleClustered{ Params :  Returns : void} testRunVerticleHA{ Params :  Returns : void} testRunVerticleWithMainVerticleInManifestNoArgs{ Params :  Returns : void} cleanup{ Params : Launcher Returns : void} testRunVerticleWithMainVerticleInManifestWithArgs{ Params :  Returns : void} testRunVerticleWithMainVerticleInManifestWithCustomCommand{ Params :  Returns : void} testRunVerticleWithoutMainVerticleInManifestButWithCustomCommand{ Params :  Returns : void} testRunWithOverriddenDefaultCommand{ Params :  Returns : void} testRunWithOverriddenDefaultCommandRequiringArgs{ Params :  Returns : void} testRunVerticleWithExtendedMainVerticleNoArgs{ Params :  Returns : void} testRunVerticleWithExtendedMainVerticleWithArgs{ Params :  Returns : void} testFatJarWithHelp{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testFatJarWithCommandHelp{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testFatJarWithMissingCommandHelp{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} testRunVerticleWithConfString{ Params :  Returns : void} testRunVerticleWithConfFile{ Params :  Returns : void} testConfigureFromSystemProperties{ Params :  Returns : void} testConfigureFromSystemPropertiesClustered{ Params :  Returns : void} testConfigureFromSystemProperties{ Params : boolean Returns : void} clearProperties{ Params :  Returns : void} testConfigureFromJsonFile{ Params :  Returns : void} testConfigureFromJsonString{ Params :  Returns : void} testConfigureFromJson{ Params : boolean Returns : void} testCustomMetricsOptions{ Params :  Returns : void} testConfigureFromSystemPropertiesInvalidPropertyName{ Params :  Returns : void} testConfigureFromSystemPropertiesInvalidPropertyType{ Params :  Returns : void} testCustomMetricsOptionsFromJsonFile{ Params :  Returns : void} testCustomMetricsOptionsFromJsonString{ Params :  Returns : void} testCustomMetricsOptionsFromJson{ Params : boolean Returns : void} testWhenPassingTheMainObject{ Params :  Returns : void} testBare{ Params :  Returns : void} testBareAlias{ Params :  Returns : void} testConfigureClusterHostPortFromProperties{ Params :  Returns : void} testConfigureClusterHostPortFromCommandLine{ Params :  Returns : void} testConfigureClusterPublicHostPortFromCommandLine{ Params :  Returns : void} testOverrideClusterHostPortFromProperties{ Params :  Returns : void} testOverrideClusterHostPortFromCommandLine{ Params :  Returns : void} getPrintStream{ Params :  Returns : PrintStream} getVertx{ Params :  Returns : Vertx} getVertxOptions{ Params :  Returns : VertxOptions} afterConfigParsed{ Params : JsonObject Returns : void} beforeStartingVertx{ Params : VertxOptions Returns : void} afterStartingVertx{ Params : Vertx Returns : void} beforeDeployingVerticle{ Params : DeploymentOptions Returns : void} assertHooksInvoked{ Params :  Returns : void} getMainVerticle{ Params :  Returns : String} ,setUp tearDown getPrintStream getPrintStream getPrintStream getPrintStream getPrintStream getPrintStream afterConfigParsed beforeStartingVertx afterStartingVertx beforeDeployingVerticle getMainVerticle ,,,,,,,,,: , vertx
vert.x-master,io.vertx.core.logging,LoggerFactoryTest,1,1,0,0,0,false,0 ,0 ,0 ,,testProperlyLogFromAnonymousClass{ Params :  Returns : void} run{ Params :  Returns : void} ,run ,,,,,,,,Runnable ,: 
vert.x-master,io.vertx.core,NamedWorkerPoolTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testThread{ Params :  Returns : void} testOrdered{ Params :  Returns : void} testUnordered{ Params :  Returns : void} testUseDifferentExecutorWithSameTaskQueue{ Params :  Returns : void} start{ Params :  Returns : void} testPoolSize{ Params :  Returns : void} testMaxExecuteTime1{ Params :  Returns : void} testMaxExecuteTime2{ Params :  Returns : void} testMaxExecuteTime3{ Params :  Returns : void} testMaxExecuteTime{ Params : WorkerExecutor,long,TimeUnit Returns : void} testCloseWorkerPool{ Params :  Returns : void} testDestroyWorkerPoolWhenVerticleUndeploys{ Params :  Returns : void} start{ Params :  Returns : void} testDeployUsingNamedPool{ Params :  Returns : void} start{ Params :  Returns : void} testDeployUsingNamedWorkerDoesNotCreateExtraEventLoop{ Params :  Returns : void} start{ Params :  Returns : void} testDeployWorkerUsingNamedPool{ Params :  Returns : void} start{ Params :  Returns : void} testCloseWorkerPoolsWhenVertxCloses{ Params :  Returns : void} testReuseWorkerPoolNameAfterVerticleIsUndeployed{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} ,start start start start start start start ,,,,,,,,AtomicBoolean AtomicBoolean AtomicBoolean AtomicReference AtomicReference CountDownLatch CountDownLatch CountDownLatch AbstractVerticle AtomicReference DeploymentOptions CountDownLatch HashSet VertxOptions VertxOptions AtomicReference CompletableFuture AtomicReference AbstractVerticle AtomicReference AbstractVerticle DeploymentOptions HashSet AbstractVerticle DeploymentOptions AtomicReference AtomicReference AbstractVerticle DeploymentOptions CountDownLatch AtomicReference AbstractVerticle DeploymentOptions CountDownLatch CountDownLatch AbstractVerticle DeploymentOptions ,: , deployLatch2
vert.x-master,io.vertx.core,NestedMetricsOptions,1,1,0,0,0,false,MetricsOptions ,0 ,0 ,nestedProperty: String ,getNestedProperty{ Params :  Returns : String} setNestedProperty{ Params : String Returns : void} ,,,,,,String ,,String ,,: , deployLatch2
vert.x-master,io.vertx.core.net.impl,ConnectionBaseTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testQueueMessageFromEvent{ Params :  Returns : void} write{ Params : ChannelHandlerContext,Object,ChannelPromise Returns : void} testQueueFlushFromEventLoop{ Params :  Returns : void} write{ Params : ChannelHandlerContext,Object,ChannelPromise Returns : void} flush{ Params : ChannelHandlerContext Returns : void} executeAsyncTask{ Params : Runnable Returns : void} ,write write flush ,,,,,,,,ArrayList ChannelDuplexHandler ArrayList ChannelDuplexHandler CountDownLatch Thread ,Thread: 
vert.x-master,io.vertx.core.net.impl.pkcs1,PrivateKeyParserTest,1,1,0,0,0,false,0 ,0 ,0 ,,testGetPKCS8EncodedKeySpecSupportsRSA{ Params :  Returns : void} testGetPKCS8EncodedKeySpecSupportsEC{ Params :  Returns : void} assertKeySpecType{ Params : byte[],String Returns : void} testGetECKeySpecSucceedsForDEREncodedECPrivateKey{ Params :  Returns : void} ,,,,,,,,,,: , "EC"
vert.x-master,io.vertx.core.net.impl.pool,ConnectionManagerTest,1,1,0,0,0,false,VertxTestBase ,0 ,Connection ,TEST_KEY: Object ,testGetConnectionSuccess{ Params :  Returns : void} testGetConnectionFailure{ Params :  Returns : void} testGetConnection{ Params : boolean Returns : void} create{ Params : ContextInternal,Runnable Returns : Endpoint<Connection>} requestConnection{ Params : ContextInternal,long Returns : Future<Connection>} testDisposeAfterConnectionClose{ Params :  Returns : void} testDisposeAfterCallback{ Params :  Returns : void} testDispose{ Params : boolean Returns : void} create{ Params : ContextInternal,Runnable Returns : Endpoint<Connection>} requestConnection{ Params : ContextInternal,long Returns : Future<Connection>} dispose{ Params :  Returns : void} testCloseManager{ Params :  Returns : void} create{ Params : ContextInternal,Runnable Returns : Endpoint<Connection>} requestConnection{ Params : ContextInternal,long Returns : Future<Connection>} dispose{ Params :  Returns : void} close{ Params :  Returns : void} testCloseManagerImmediately{ Params :  Returns : void} create{ Params : ContextInternal,Runnable Returns : Endpoint<Connection>} requestConnection{ Params : ContextInternal,long Returns : Future<Connection>} testConcurrentDispose{ Params :  Returns : void} create{ Params : ContextInternal,Runnable Returns : Endpoint<Connection>} requestConnection{ Params : ContextInternal,long Returns : Future<Connection>} dispose{ Params :  Returns : void} ,create requestConnection create requestConnection dispose create requestConnection dispose close create requestConnection create requestConnection dispose ,,,,,,,,Object Connection Throwable EndpointProvider Endpoint ConnectionManager Connection AtomicReference EndpointProvider Endpoint ConnectionManager Connection EndpointProvider Endpoint ConnectionManager CountDownLatch Connection AtomicReference EndpointProvider Endpoint ConnectionManager ConcurrentLinkedQueue EndpointProvider AtomicBoolean Endpoint Connection ConnectionManager CountDownLatch Thread ,: , disposed::get
vert.x-master,io.vertx.core.net.impl.pool,Connection,3,0,0,1,0,false,VertxTestBase ,0 ,Connection ,,testGetConnectionSuccess{ Params :  Returns : void} testGetConnectionFailure{ Params :  Returns : void} testGetConnection{ Params : boolean Returns : void} create{ Params : ContextInternal,Runnable Returns : Endpoint<Connection>} requestConnection{ Params : ContextInternal,long Returns : Future<Connection>} testDisposeAfterConnectionClose{ Params :  Returns : void} testDisposeAfterCallback{ Params :  Returns : void} testDispose{ Params : boolean Returns : void} create{ Params : ContextInternal,Runnable Returns : Endpoint<Connection>} requestConnection{ Params : ContextInternal,long Returns : Future<Connection>} dispose{ Params :  Returns : void} testCloseManager{ Params :  Returns : void} create{ Params : ContextInternal,Runnable Returns : Endpoint<Connection>} requestConnection{ Params : ContextInternal,long Returns : Future<Connection>} dispose{ Params :  Returns : void} close{ Params :  Returns : void} testCloseManagerImmediately{ Params :  Returns : void} create{ Params : ContextInternal,Runnable Returns : Endpoint<Connection>} requestConnection{ Params : ContextInternal,long Returns : Future<Connection>} testConcurrentDispose{ Params :  Returns : void} create{ Params : ContextInternal,Runnable Returns : Endpoint<Connection>} requestConnection{ Params : ContextInternal,long Returns : Future<Connection>} dispose{ Params :  Returns : void} ,create requestConnection create requestConnection dispose create requestConnection dispose close create requestConnection create requestConnection dispose ,,,,,,,,,null
vert.x-master,io.vertx.core.net.impl.pool,ConnectionPoolTest,1,1,0,0,0,false,VertxTestBase ,0 ,Connection ConnectionRequest ConnectionManager ,vertx: VertxInternal ,setUp{ Params :  Returns : void} testConnect{ Params :  Returns : void} testAcquireRecycledConnection{ Params :  Returns : void} testRecycleRemovedConnection{ Params :  Returns : void} testConcurrency{ Params :  Returns : void} testIncreaseConcurrency{ Params :  Returns : void} testSatisfyPendingWaitersWithExtraConcurrency{ Params :  Returns : void} testEmptyConcurrency{ Params :  Returns : void} testDecreaseConcurrency{ Params :  Returns : void} testWaiter{ Params :  Returns : void} testRemoveSingleConnection{ Params :  Returns : void} testRemoveFirstConnection{ Params :  Returns : void} testRemoveSingleConnectionWithWaiter{ Params :  Returns : void} testConnectFailureWithPendingWaiter{ Params :  Returns : void} testExpireFirst{ Params :  Returns : void} testExpireLast{ Params :  Returns : void} testExpireMiddle{ Params :  Returns : void} testExpireSome{ Params :  Returns : void} testExpire{ Params : int,int,int Returns : List<Integer>} testRemoveEvicted{ Params :  Returns : void} testConnectionInProgressShouldNotBeEvicted{ Params :  Returns : void} testRecycleRemoveConnection{ Params :  Returns : void} testRecycleMultiple{ Params :  Returns : void} testMaxWaiters{ Params :  Returns : void} testHeterogeneousSizes{ Params :  Returns : void} testClose{ Params :  Returns : void} testCloseTwice{ Params :  Returns : void} testUseAfterClose{ Params :  Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} testAcquireClosedConnection{ Params :  Returns : void} testConnectSuccessAfterClose{ Params :  Returns : void} testConnectFailureAfterClose{ Params :  Returns : void} testConnectResultAfterClose{ Params : boolean Returns : void} testCancelQueuedWaiters{ Params :  Returns : void} onEnqueue{ Params : PoolWaiter<Connection> Returns : void} testCancelWaiterBeforeConnectionSuccess{ Params :  Returns : void} testCancelWaiterBeforeConnectionSuccessWithExtraWaiters{ Params :  Returns : void} testCancelWaiterBeforeConnectionFailure{ Params :  Returns : void} testCancelWaiterBeforeConnection{ Params : boolean,int Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} onEnqueue{ Params : PoolWaiter<Connection> Returns : void} testCancelWaiterAfterConnectionSuccess{ Params :  Returns : void} testCancelWaiterAfterConnectionFailure{ Params :  Returns : void} testCancelWaiterAfterConnectionSuccess{ Params : boolean Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} testConnectionSelector{ Params :  Returns : void} testDefaultSelector{ Params :  Returns : void} testDefaultContextProviderUnwrap{ Params :  Returns : void} testDefaultContextProviderReusesSameEventLoop{ Params :  Returns : void} testPostTasksTrampoline{ Params :  Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<Connection>>} isValid{ Params : Connection Returns : boolean} connect{ Params : Connection,int Returns : void} concurrency{ Params : int Returns : ConnectionRequest} fail{ Params : Throwable Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<Connection>>} isValid{ Params : Connection Returns : boolean} assertRequest{ Params :  Returns : ConnectionRequest} ,setUp onConnect onEnqueue onConnect onEnqueue onConnect connect isValid connect isValid ,,,,,,,,ConnectionManager Connection ConnectionManager Connection CountDownLatch ConnectionManager Connection CountDownLatch Connection ConnectionManager Connection CountDownLatch ConnectionManager Connection CountDownLatch CountDownLatch CountDownLatch ConnectionManager Connection AtomicInteger ConnectionManager Connection AtomicInteger ConnectionManager Connection CountDownLatch CountDownLatch ConnectionManager Connection CompletableFuture AtomicBoolean ConnectionManager Connection CompletableFuture ConnectionManager Connection CompletableFuture Connection CompletableFuture ConnectionManager Connection CompletableFuture AtomicBoolean Connection ConnectionManager Throwable Connection CountDownLatch ConnectionManager CountDownLatch ArrayList Connection CompletableFuture ArrayList ConnectionManager CountDownLatch Connection CountDownLatch ConnectionManager ConnectionManager Connection CompletableFuture ConnectionManager Connection CompletableFuture ConnectionManager ConnectionManager CountDownLatch Connection ConnectionManager Connection AtomicBoolean ConnectionManager CountDownLatch AtomicBoolean ConnectionManager CompletableFuture Listener CountDownLatch Connection ConnectionManager Connection CountDownLatch CountDownLatch AtomicBoolean ConnectionManager AtomicInteger Throwable Connection ConnectionManager CompletableFuture Listener IllegalArgumentException ConnectionManager CompletableFuture Listener CountDownLatch CountDownLatch Listener CountDownLatch Connection Throwable CountDownLatch ConnectionManager CompletableFuture CountDownLatch Listener Connection Throwable ConnectionManager CountDownLatch Connection ConnectionManager CountDownLatch Connection CountDownLatch CountDownLatch ConnectionManager ConnectionManager AtomicReference LinkedList AtomicInteger CountDownLatch PoolConnector IllegalStateException ConnectResult IllegalStateException ArrayBlockingQueue ConnectionRequest ,: , expected, res
vert.x-master,io.vertx.core.net.impl.pool,Connection,3,0,0,1,0,false,VertxTestBase ,0 ,Connection ConnectionRequest ConnectionManager ,,setUp{ Params :  Returns : void} testConnect{ Params :  Returns : void} testAcquireRecycledConnection{ Params :  Returns : void} testRecycleRemovedConnection{ Params :  Returns : void} testConcurrency{ Params :  Returns : void} testIncreaseConcurrency{ Params :  Returns : void} testSatisfyPendingWaitersWithExtraConcurrency{ Params :  Returns : void} testEmptyConcurrency{ Params :  Returns : void} testDecreaseConcurrency{ Params :  Returns : void} testWaiter{ Params :  Returns : void} testRemoveSingleConnection{ Params :  Returns : void} testRemoveFirstConnection{ Params :  Returns : void} testRemoveSingleConnectionWithWaiter{ Params :  Returns : void} testConnectFailureWithPendingWaiter{ Params :  Returns : void} testExpireFirst{ Params :  Returns : void} testExpireLast{ Params :  Returns : void} testExpireMiddle{ Params :  Returns : void} testExpireSome{ Params :  Returns : void} testExpire{ Params : int,int,int Returns : List<Integer>} testRemoveEvicted{ Params :  Returns : void} testConnectionInProgressShouldNotBeEvicted{ Params :  Returns : void} testRecycleRemoveConnection{ Params :  Returns : void} testRecycleMultiple{ Params :  Returns : void} testMaxWaiters{ Params :  Returns : void} testHeterogeneousSizes{ Params :  Returns : void} testClose{ Params :  Returns : void} testCloseTwice{ Params :  Returns : void} testUseAfterClose{ Params :  Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} testAcquireClosedConnection{ Params :  Returns : void} testConnectSuccessAfterClose{ Params :  Returns : void} testConnectFailureAfterClose{ Params :  Returns : void} testConnectResultAfterClose{ Params : boolean Returns : void} testCancelQueuedWaiters{ Params :  Returns : void} onEnqueue{ Params : PoolWaiter<Connection> Returns : void} testCancelWaiterBeforeConnectionSuccess{ Params :  Returns : void} testCancelWaiterBeforeConnectionSuccessWithExtraWaiters{ Params :  Returns : void} testCancelWaiterBeforeConnectionFailure{ Params :  Returns : void} testCancelWaiterBeforeConnection{ Params : boolean,int Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} onEnqueue{ Params : PoolWaiter<Connection> Returns : void} testCancelWaiterAfterConnectionSuccess{ Params :  Returns : void} testCancelWaiterAfterConnectionFailure{ Params :  Returns : void} testCancelWaiterAfterConnectionSuccess{ Params : boolean Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} testConnectionSelector{ Params :  Returns : void} testDefaultSelector{ Params :  Returns : void} testDefaultContextProviderUnwrap{ Params :  Returns : void} testDefaultContextProviderReusesSameEventLoop{ Params :  Returns : void} testPostTasksTrampoline{ Params :  Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<Connection>>} isValid{ Params : Connection Returns : boolean} connect{ Params : Connection,int Returns : void} concurrency{ Params : int Returns : ConnectionRequest} fail{ Params : Throwable Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<Connection>>} isValid{ Params : Connection Returns : boolean} assertRequest{ Params :  Returns : ConnectionRequest} ,setUp onConnect onEnqueue onConnect onEnqueue onConnect connect isValid connect isValid ,,,,,,,,,null
vert.x-master,io.vertx.core.net.impl.pool,ConnectionRequest,3,0,0,1,0,false,VertxTestBase ,0 ,Connection ConnectionRequest ConnectionManager ,context: EventLoopContext listener: PoolConnector.Listener handler: Handler<AsyncResult<ConnectResult<Connection>>> concurrency: int connection: Connection ,setUp{ Params :  Returns : void} testConnect{ Params :  Returns : void} testAcquireRecycledConnection{ Params :  Returns : void} testRecycleRemovedConnection{ Params :  Returns : void} testConcurrency{ Params :  Returns : void} testIncreaseConcurrency{ Params :  Returns : void} testSatisfyPendingWaitersWithExtraConcurrency{ Params :  Returns : void} testEmptyConcurrency{ Params :  Returns : void} testDecreaseConcurrency{ Params :  Returns : void} testWaiter{ Params :  Returns : void} testRemoveSingleConnection{ Params :  Returns : void} testRemoveFirstConnection{ Params :  Returns : void} testRemoveSingleConnectionWithWaiter{ Params :  Returns : void} testConnectFailureWithPendingWaiter{ Params :  Returns : void} testExpireFirst{ Params :  Returns : void} testExpireLast{ Params :  Returns : void} testExpireMiddle{ Params :  Returns : void} testExpireSome{ Params :  Returns : void} testExpire{ Params : int,int,int Returns : List<Integer>} testRemoveEvicted{ Params :  Returns : void} testConnectionInProgressShouldNotBeEvicted{ Params :  Returns : void} testRecycleRemoveConnection{ Params :  Returns : void} testRecycleMultiple{ Params :  Returns : void} testMaxWaiters{ Params :  Returns : void} testHeterogeneousSizes{ Params :  Returns : void} testClose{ Params :  Returns : void} testCloseTwice{ Params :  Returns : void} testUseAfterClose{ Params :  Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} testAcquireClosedConnection{ Params :  Returns : void} testConnectSuccessAfterClose{ Params :  Returns : void} testConnectFailureAfterClose{ Params :  Returns : void} testConnectResultAfterClose{ Params : boolean Returns : void} testCancelQueuedWaiters{ Params :  Returns : void} onEnqueue{ Params : PoolWaiter<Connection> Returns : void} testCancelWaiterBeforeConnectionSuccess{ Params :  Returns : void} testCancelWaiterBeforeConnectionSuccessWithExtraWaiters{ Params :  Returns : void} testCancelWaiterBeforeConnectionFailure{ Params :  Returns : void} testCancelWaiterBeforeConnection{ Params : boolean,int Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} onEnqueue{ Params : PoolWaiter<Connection> Returns : void} testCancelWaiterAfterConnectionSuccess{ Params :  Returns : void} testCancelWaiterAfterConnectionFailure{ Params :  Returns : void} testCancelWaiterAfterConnectionSuccess{ Params : boolean Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} testConnectionSelector{ Params :  Returns : void} testDefaultSelector{ Params :  Returns : void} testDefaultContextProviderUnwrap{ Params :  Returns : void} testDefaultContextProviderReusesSameEventLoop{ Params :  Returns : void} testPostTasksTrampoline{ Params :  Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<Connection>>} isValid{ Params : Connection Returns : boolean} connect{ Params : Connection,int Returns : void} concurrency{ Params : int Returns : ConnectionRequest} fail{ Params : Throwable Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<Connection>>} isValid{ Params : Connection Returns : boolean} assertRequest{ Params :  Returns : ConnectionRequest} ,setUp onConnect onEnqueue onConnect onEnqueue onConnect connect isValid connect isValid ,,,,,Connection ,,Connection ,IllegalStateException ConnectResult IllegalStateException ,Future: , cause
vert.x-master,io.vertx.core.net.impl.pool,ConnectionManager,3,0,0,0,0,false,VertxTestBase ,0 ,Connection ConnectionRequest ConnectionManager ,requests: Queue<ConnectionRequest> ,setUp{ Params :  Returns : void} testConnect{ Params :  Returns : void} testAcquireRecycledConnection{ Params :  Returns : void} testRecycleRemovedConnection{ Params :  Returns : void} testConcurrency{ Params :  Returns : void} testIncreaseConcurrency{ Params :  Returns : void} testSatisfyPendingWaitersWithExtraConcurrency{ Params :  Returns : void} testEmptyConcurrency{ Params :  Returns : void} testDecreaseConcurrency{ Params :  Returns : void} testWaiter{ Params :  Returns : void} testRemoveSingleConnection{ Params :  Returns : void} testRemoveFirstConnection{ Params :  Returns : void} testRemoveSingleConnectionWithWaiter{ Params :  Returns : void} testConnectFailureWithPendingWaiter{ Params :  Returns : void} testExpireFirst{ Params :  Returns : void} testExpireLast{ Params :  Returns : void} testExpireMiddle{ Params :  Returns : void} testExpireSome{ Params :  Returns : void} testExpire{ Params : int,int,int Returns : List<Integer>} testRemoveEvicted{ Params :  Returns : void} testConnectionInProgressShouldNotBeEvicted{ Params :  Returns : void} testRecycleRemoveConnection{ Params :  Returns : void} testRecycleMultiple{ Params :  Returns : void} testMaxWaiters{ Params :  Returns : void} testHeterogeneousSizes{ Params :  Returns : void} testClose{ Params :  Returns : void} testCloseTwice{ Params :  Returns : void} testUseAfterClose{ Params :  Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} testAcquireClosedConnection{ Params :  Returns : void} testConnectSuccessAfterClose{ Params :  Returns : void} testConnectFailureAfterClose{ Params :  Returns : void} testConnectResultAfterClose{ Params : boolean Returns : void} testCancelQueuedWaiters{ Params :  Returns : void} onEnqueue{ Params : PoolWaiter<Connection> Returns : void} testCancelWaiterBeforeConnectionSuccess{ Params :  Returns : void} testCancelWaiterBeforeConnectionSuccessWithExtraWaiters{ Params :  Returns : void} testCancelWaiterBeforeConnectionFailure{ Params :  Returns : void} testCancelWaiterBeforeConnection{ Params : boolean,int Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} onEnqueue{ Params : PoolWaiter<Connection> Returns : void} testCancelWaiterAfterConnectionSuccess{ Params :  Returns : void} testCancelWaiterAfterConnectionFailure{ Params :  Returns : void} testCancelWaiterAfterConnectionSuccess{ Params : boolean Returns : void} onConnect{ Params : PoolWaiter<Connection> Returns : void} testConnectionSelector{ Params :  Returns : void} testDefaultSelector{ Params :  Returns : void} testDefaultContextProviderUnwrap{ Params :  Returns : void} testDefaultContextProviderReusesSameEventLoop{ Params :  Returns : void} testPostTasksTrampoline{ Params :  Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<Connection>>} isValid{ Params : Connection Returns : boolean} connect{ Params : Connection,int Returns : void} concurrency{ Params : int Returns : ConnectionRequest} fail{ Params : Throwable Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<Connection>>} isValid{ Params : Connection Returns : boolean} assertRequest{ Params :  Returns : ConnectionRequest} ,setUp onConnect onEnqueue onConnect onEnqueue onConnect connect isValid connect isValid ,,,,PoolConnector ,Queue<ConnectionRequest> ,,Queue<ConnectionRequest> ,ArrayBlockingQueue ConnectionRequest ,: , request
vert.x-master,io.vertx.core.net.impl.pool,StressTest,1,1,0,0,0,false,VertxTestBase ,0 ,FakeConnectionPool FakeWaiter FakeConnection ,,getConnection{ Params : FakeWaiter Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<FakeConnection>>} isValid{ Params : FakeConnection Returns : boolean} onSuccess{ Params : FakeConnection Returns : void} onFailure{ Params :  Returns : void} handleFailure{ Params : Throwable Returns : void} handleConnection{ Params : Lease<FakeConnection> Returns : void} recycle{ Params :  Returns : void} close{ Params :  Returns : void} connect{ Params :  Returns : FakeConnection} fail{ Params : Throwable Returns : void} testStress{ Params :  Returns : void} onFailure{ Params :  Returns : void} onSuccess{ Params : FakeConnection Returns : void} ,connect isValid onFailure onSuccess ,,,,,,,,FakeConnection Exception IllegalStateException IllegalStateException ConnectResult FakeConnectionPool Thread CountDownLatch FakeWaiter CountDownLatch ,mgr.pool: 
vert.x-master,io.vertx.core.net.impl.pool,FakeConnectionPool,3,0,0,0,0,false,VertxTestBase ,0 ,FakeConnectionPool FakeWaiter FakeConnection ,pool: ConnectionPool<FakeConnection> ,getConnection{ Params : FakeWaiter Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<FakeConnection>>} isValid{ Params : FakeConnection Returns : boolean} onSuccess{ Params : FakeConnection Returns : void} onFailure{ Params :  Returns : void} handleFailure{ Params : Throwable Returns : void} handleConnection{ Params : Lease<FakeConnection> Returns : void} recycle{ Params :  Returns : void} close{ Params :  Returns : void} connect{ Params :  Returns : FakeConnection} fail{ Params : Throwable Returns : void} testStress{ Params :  Returns : void} onFailure{ Params :  Returns : void} onSuccess{ Params : FakeConnection Returns : void} ,connect isValid onFailure onSuccess ,,,,PoolConnector ,ConnectionPool<FakeConnection> ,,ConnectionPool<FakeConnection> ,FakeConnection Exception ,promise: 
vert.x-master,io.vertx.core.net.impl.pool,FakeWaiter,3,0,0,0,0,false,VertxTestBase ,0 ,FakeConnectionPool FakeWaiter FakeConnection ,context: EventLoopContext result: Object ,getConnection{ Params : FakeWaiter Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<FakeConnection>>} isValid{ Params : FakeConnection Returns : boolean} onSuccess{ Params : FakeConnection Returns : void} onFailure{ Params :  Returns : void} handleFailure{ Params : Throwable Returns : void} handleConnection{ Params : Lease<FakeConnection> Returns : void} recycle{ Params :  Returns : void} close{ Params :  Returns : void} connect{ Params :  Returns : FakeConnection} fail{ Params : Throwable Returns : void} testStress{ Params :  Returns : void} onFailure{ Params :  Returns : void} onSuccess{ Params : FakeConnection Returns : void} ,connect isValid onFailure onSuccess ,,,,,Object ,,Object ,,conn: 
vert.x-master,io.vertx.core.net.impl.pool,FakeConnection,3,2,0,1,0,false,VertxTestBase ,0 ,FakeConnectionPool FakeWaiter FakeConnection ,DISCONNECTED: int CONNECTING: int CONNECTED: int CLOSED: int context: ContextInternal listener: PoolConnector.Listener future: Promise<ConnectResult<FakeConnection>> concurrency: long status: int ,getConnection{ Params : FakeWaiter Returns : void} connect{ Params : EventLoopContext,Listener Returns : Future<ConnectResult<FakeConnection>>} isValid{ Params : FakeConnection Returns : boolean} onSuccess{ Params : FakeConnection Returns : void} onFailure{ Params :  Returns : void} handleFailure{ Params : Throwable Returns : void} handleConnection{ Params : Lease<FakeConnection> Returns : void} recycle{ Params :  Returns : void} close{ Params :  Returns : void} connect{ Params :  Returns : FakeConnection} fail{ Params : Throwable Returns : void} testStress{ Params :  Returns : void} onFailure{ Params :  Returns : void} onSuccess{ Params : FakeConnection Returns : void} ,connect isValid onFailure onSuccess ,,,,,int ,,int ,IllegalStateException IllegalStateException ConnectResult ,future: , err
vert.x-master,io.vertx.core.net.impl.pool,SynchronizationTest,1,1,0,0,0,false,AsyncTestBase ,0 ,Utils ,iterationsForOneMilli: Long ,iterationsForOneMilli{ Params :  Returns : long} burnCPU{ Params : long Returns : void} testActionReentrancy{ Params :  Returns : void} run{ Params :  Returns : void} testFoo{ Params :  Returns : void} blackholeCpu{ Params : long Returns : void} calibrateBlackhole{ Params :  Returns : long} testOrdering{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} ,run run run run ,iterationsForOneMilli burnCPU blackholeCpu calibrateBlackhole ,,,,,,,AtomicBoolean AtomicBoolean CombinerExecutor Object CountDownLatch AtomicBoolean Task CombinerExecutor Object Thread CombinerExecutor Object AtomicInteger Task Task Task ,order: 
vert.x-master,io.vertx.core.net.impl.pool,Utils,3,1,0,1,0,false,AsyncTestBase ,0 ,Utils ,res: long ONE_MILLI_IN_NANO: long ONE_MICRO_IN_NANO: long ,iterationsForOneMilli{ Params :  Returns : long} burnCPU{ Params : long Returns : void} testActionReentrancy{ Params :  Returns : void} run{ Params :  Returns : void} testFoo{ Params :  Returns : void} blackholeCpu{ Params : long Returns : void} calibrateBlackhole{ Params :  Returns : long} testOrdering{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} ,run run run run ,iterationsForOneMilli burnCPU blackholeCpu calibrateBlackhole ,,,,,blackholeCpu blackholeCpu ,,,Math: , (ONE_MILLI_IN_NANO * 1.0 / timing) * iters[i]
vert.x-master,io.vertx.core.net.impl,URIDecoderTest,1,1,0,0,0,false,0 ,0 ,0 ,,testDecode{ Params :  Returns : void} testPlusAsSpace{ Params :  Returns : void} testPlusAsPlus{ Params :  Returns : void} testSpaces{ Params :  Returns : void} testSingleDecode{ Params :  Returns : void} testFromRFC{ Params :  Returns : void} testNonLatin{ Params :  Returns : void} testIncomplete{ Params :  Returns : void} testCaseInsensitive{ Params :  Returns : void} ,,,,,,,,,,: , "%2e%2e%2fblah"
vert.x-master,io.vertx.core.net,KeyStoreHelperTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testKeyStoreHelperSupportsRSAPrivateKeys{ Params :  Returns : void} testKeyStoreHelperSupportsPKCS8ECPrivateKey{ Params :  Returns : void} testKeyStoreHelperSupportsReadingECPrivateKeyFromPEMFile{ Params :  Returns : void} assertKeyType{ Params : KeyStore,Class<?> Returns : void} ,,,,,,,,,PemKeyCertOptions PemKeyCertOptions PemKeyCertOptions ,: , X509Certificate.class
vert.x-master,io.vertx.core.net,KeyStoreTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testJKSOptions{ Params :  Returns : void} testDefaultJKSOptionsJson{ Params :  Returns : void} testJKSOptionsJson{ Params :  Returns : void} testCopyJKSOptions{ Params :  Returns : void} testPKCS12Options{ Params :  Returns : void} testDefaultPKCS12OptionsJson{ Params :  Returns : void} testPKCS12OptionsJson{ Params :  Returns : void} testCopyPKCS12Options{ Params :  Returns : void} testKeyCertOptions{ Params :  Returns : void} testDefaultKeyCertOptionsJson{ Params :  Returns : void} testPemKeyCertOptionsJson{ Params :  Returns : void} testCopyPemKeyCertOptions{ Params :  Returns : void} testTrustOptions{ Params :  Returns : void} testTrustOptionsJson{ Params :  Returns : void} testDefaultTrustOptionsJson{ Params :  Returns : void} testCopyTrustOptions{ Params :  Returns : void} testJKSPath{ Params :  Returns : void} testJKSValue{ Params :  Returns : void} testKeyStoreValue{ Params :  Returns : void} testPKCS12Path{ Params :  Returns : void} testPKCS12Value{ Params :  Returns : void} testKeyCertPath{ Params :  Returns : void} testRsaKeyCertPath{ Params :  Returns : void} testKeyCertValue{ Params :  Returns : void} testCaPath{ Params :  Returns : void} testCaPathValue{ Params :  Returns : void} testKeyOptionsEquality{ Params :  Returns : void} testKeyStore{ Params : KeyStoreHelper Returns : void} testTrustStore{ Params : KeyStoreHelper Returns : void} ,,,,,,,,,JksOptions JksOptions JksOptions JsonObject JksOptions JsonObject JksOptions JsonObject JksOptions JksOptions JksOptions PfxOptions PfxOptions PfxOptions JsonObject PfxOptions JsonObject PfxOptions JsonObject PfxOptions PfxOptions PfxOptions PemKeyCertOptions PemKeyCertOptions PemKeyCertOptions JsonObject PemKeyCertOptions JsonObject PemKeyCertOptions JsonObject PemKeyCertOptions JsonObject JsonArray JsonArray JsonArray JsonArray PemKeyCertOptions JsonObject PemKeyCertOptions PemKeyCertOptions PemKeyCertOptions PemKeyCertOptions PemTrustOptions PemTrustOptions JsonObject JsonObject JsonArray JsonArray PemTrustOptions PemTrustOptions PemTrustOptions JsonObject PemTrustOptions JsonObject PemTrustOptions PemTrustOptions KeyStoreOptions JksOptions PfxOptions PemKeyCertOptions ,: , keyManagers.length > 0
vert.x-master,io.vertx.core.net,NetTest,1,1,0,0,0,false,VertxTestBase ,0 ,TLSTest ,testAddress: SocketAddress server: NetServer client: NetClient proxy: TestProxyBase tmp: File testFolder: TemporaryFolder ,setUp{ Params :  Returns : void} getOptions{ Params :  Returns : VertxOptions} tearDown{ Params :  Returns : void} testClientOptions{ Params :  Returns : void} testServerOptions{ Params :  Returns : void} testCopyClientOptions{ Params :  Returns : void} testDefaultClientOptionsJson{ Params :  Returns : void} testClientOptionsJson{ Params :  Returns : void} testCopyServerOptions{ Params :  Returns : void} testDefaultServerOptionsJson{ Params :  Returns : void} testServerOptionsJson{ Params :  Returns : void} testWriteHandlerSuccess{ Params :  Returns : void} testWriteHandlerFailure{ Params :  Returns : void} writeUntilFull{ Params : NetSocket,Handler<Void> Returns : void} testEchoBytes{ Params :  Returns : void} testEchoString{ Params :  Returns : void} testEchoStringUTF8{ Params :  Returns : void} testEchoStringUTF16{ Params :  Returns : void} testEchoStringWithEncoding{ Params : String Returns : void} testEcho{ Params : Consumer<NetSocket>,Consumer<Buffer>,int Returns : void} startEchoServer{ Params : SocketAddress,Handler<AsyncResult<NetServer>> Returns : void} testConnectLocalHost{ Params :  Returns : void} connect{ Params : SocketAddress Returns : void} testConnectInvalidPort{ Params :  Returns : void} testConnectInvalidHost{ Params :  Returns : void} testListenInvalidPort{ Params :  Returns : void} testListenInvalidHost{ Params :  Returns : void} testListenOnWildcardPort{ Params :  Returns : void} testClientCloseHandlersCloseFromClient{ Params :  Returns : void} testClientCloseHandlersCloseFromServer{ Params :  Returns : void} clientCloseHandlers{ Params : boolean Returns : void} testServerCloseHandlersCloseFromClient{ Params :  Returns : void} testServerCloseHandlersCloseFromServer{ Params :  Returns : void} serverCloseHandlers{ Params : boolean,Handler<NetServer> Returns : void} testClientClose{ Params :  Returns : void} testReceiveMessageAfterExplicitClose{ Params :  Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} testClientDrainHandler{ Params :  Returns : void} pausingServer{ Params : Handler<AsyncResult<NetServer>> Returns : void} testServerDrainHandler{ Params :  Returns : void} setHandlers{ Params : NetSocket Returns : void} drainingServer{ Params : Handler<AsyncResult<NetServer>> Returns : void} testReconnectAttemptsInfinite{ Params :  Returns : void} testReconnectAttemptsMany{ Params :  Returns : void} reconnectAttempts{ Params : int Returns : void} testReconnectAttemptsNotEnough{ Params :  Returns : void} testServerIdleTimeout1{ Params :  Returns : void} testServerIdleTimeout2{ Params :  Returns : void} testServerIdleTimeout3{ Params :  Returns : void} testServerIdleTimeout4{ Params :  Returns : void} testServerIdleTimeout5{ Params :  Returns : void} testServerIdleTimeout6{ Params :  Returns : void} testClientIdleTimeout1{ Params :  Returns : void} testClientIdleTimeout2{ Params :  Returns : void} testClientIdleTimeout3{ Params :  Returns : void} testClientIdleTimeout4{ Params :  Returns : void} testClientIdleTimeout5{ Params :  Returns : void} testClientIdleTimeout6{ Params :  Returns : void} testTimeout{ Params : NetClientOptions,NetServerOptions,Consumer<Buffer>,boolean Returns : void} testStartTLSClientTrustAll{ Params :  Returns : void} testTLSClientTrustAll{ Params :  Returns : void} testTLSClientTrustServerCert{ Params :  Returns : void} testTLSClientUntrustedServer{ Params :  Returns : void} testTLSClientCertNotRequired{ Params :  Returns : void} testTLSClientCertRequired{ Params :  Returns : void} testTLSClientCertRequiredNoClientCert{ Params :  Returns : void} testTLSClientCertClientNotTrusted{ Params :  Returns : void} testStartTLSClientCertClientNotTrusted{ Params :  Returns : void} testTLSCipherSuites{ Params :  Returns : void} testInvalidTlsProtocolVersion{ Params :  Returns : void} testSpecificTlsProtocolVersion{ Params :  Returns : void} testTLSTrailingDotHost{ Params :  Returns : void} testSniWithoutServerNameUsesTheFirstKeyStoreEntry1{ Params :  Returns : void} testSniWithoutServerNameUsesTheFirstKeyStoreEntry2{ Params :  Returns : void} testSniImplicitServerName{ Params :  Returns : void} testSniImplicitServerNameDisabledForShortname1{ Params :  Returns : void} testSniImplicitServerNameDisabledForShortname2{ Params :  Returns : void} testSniForceShortname{ Params :  Returns : void} testSniOverrideServerName{ Params :  Returns : void} testSniWithUnknownServer1{ Params :  Returns : void} testSniWithUnknownServer2{ Params :  Returns : void} testSniWithServerNameStartTLS{ Params :  Returns : void} testSniWithServerNameTrust{ Params :  Returns : void} testSniWithServerNameTrustFallback{ Params :  Returns : void} testSniWithServerNameTrustFallbackFail{ Params :  Returns : void} testSniWithServerNameTrustFail{ Params :  Returns : void} testSniWithTrailingDotHost{ Params :  Returns : void} testServerCertificateMultiple{ Params :  Returns : void} testServerCertificateMultipleWrongAlias{ Params :  Returns : void} testServerCertificateMultipleWithKeyPassword{ Params :  Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean,String[] Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean,String[],String[] Returns : void} clientCert{ Params : Cert<?> Returns : TLSTest} clientTrust{ Params : Trust<?> Returns : TLSTest} serverCert{ Params : Cert<?> Returns : TLSTest} serverTrust{ Params : Trust<?> Returns : TLSTest} requireClientAuth{ Params : boolean Returns : TLSTest} clientTrustAll{ Params : boolean Returns : TLSTest} startTLS{ Params : boolean Returns : TLSTest} enabledCipherSuites{ Params : String[] Returns : TLSTest} enabledSecureTransportProtocols{ Params : String[] Returns : TLSTest} address{ Params : SocketAddress Returns : TLSTest} bindAddress{ Params : SocketAddress Returns : TLSTest} connectAddress{ Params : SocketAddress Returns : TLSTest} serverName{ Params : String Returns : TLSTest} sni{ Params : boolean Returns : TLSTest} clientPeerCert{ Params :  Returns : Certificate} setupServer{ Params : boolean Returns : void} run{ Params : boolean Returns : void} testListenDomainSocketAddress{ Params :  Returns : void} testSharedServersRoundRobin{ Params :  Returns : void} testSharedServersRoundRobinWithOtherServerRunningOnDifferentPort{ Params :  Returns : void} testSharedServersRoundRobinButFirstStartAndStopServer{ Params :  Returns : void} testClosingVertxCloseSharedServers{ Params :  Returns : void} testWriteHandlerIdNullByDefault{ Params :  Returns : void} testFanout{ Params :  Returns : void} testRemoteAddress{ Params :  Returns : void} testWriteSameBufferMoreThanOnce{ Params :  Returns : void} sendFileClientToServer{ Params :  Returns : void} sendFileServerToClient{ Params :  Returns : void} testSendFileDirectory{ Params :  Returns : void} testServerOptionsCopiedBeforeUse{ Params :  Returns : void} testClientOptionsCopiedBeforeUse{ Params :  Returns : void} testListenWithNoHandler{ Params :  Returns : void} testListenWithNoHandler2{ Params :  Returns : void} testSetHandlerAfterListen{ Params :  Returns : void} testSetHandlerAfterListen2{ Params :  Returns : void} testListenTwice{ Params :  Returns : void} testListenOnPortNoHandler{ Params :  Returns : void} testListen{ Params :  Returns : void} testListenTwice2{ Params :  Returns : void} testCloseTwice{ Params :  Returns : void} testAttemptConnectAfterClose{ Params :  Returns : void} testCloseWithHandler{ Params :  Returns : void} testClientMultiThreaded{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} testInVerticle{ Params : boolean Returns : void} start{ Params :  Returns : void} testContexts{ Params :  Returns : void} testMultipleServerClose{ Params :  Returns : void} testInWorker{ Params :  Returns : void} start{ Params :  Returns : void} testAsyncWriteIsFlushed{ Params :  Returns : void} setupFile{ Params : String,String,String Returns : File} testServerWorkerMissBufferWhenBufferArriveBeforeConnectCallback{ Params :  Returns : void} testClientWorkerMissBufferWhenBufferArriveBeforeConnectCallback{ Params :  Returns : void} testHostVerificationHttpsNotMatching{ Params :  Returns : void} testHostVerificationHttpsMatching{ Params :  Returns : void} testNoLogging{ Params :  Returns : void} testServerLogging{ Params :  Returns : void} testClientLogging{ Params :  Returns : void} testLogging{ Params :  Returns : TestLoggerFactory} testWithSocks5Proxy{ Params :  Returns : void} testWithSocks5ProxyAuth{ Params :  Returns : void} testConnectSSLWithSocks5Proxy{ Params :  Returns : void} testUpgradeSSLWithSocks5Proxy{ Params :  Returns : void} testWithHttpConnectProxy{ Params :  Returns : void} testWithSocks4aProxy{ Params :  Returns : void} testWithSocks4aProxyAuth{ Params :  Returns : void} testWithSocks4LocalResolver{ Params :  Returns : void} testNonProxyHosts{ Params :  Returns : void} testTLSHostnameCertCheckCorrect{ Params :  Returns : void} testTLSHostnameCertCheckIncorrect{ Params :  Returns : void} testUpgradeToSSLIncorrectClientOptions{ Params :  Returns : void} testClientLocalAddress{ Params :  Returns : void} testSelfSignedCertificate{ Params :  Returns : void} testWorkerClient{ Params :  Returns : void} start{ Params :  Returns : void} testWorkerServer{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testNetServerInternal{ Params :  Returns : void} testNetServerInternalTLS{ Params :  Returns : void} testNetServerInternal_{ Params : HttpClientOptions,boolean Returns : void} testNetClientInternal{ Params :  Returns : void} testNetClientInternalTLS{ Params :  Returns : void} testNetClientInternalTLSWithSuppliedSSLContext{ Params :  Returns : void} sslContextFactory{ Params :  Returns : SslContextFactory} create{ Params :  Returns : SslContext} testNetClientInternal_{ Params : HttpServerOptions,boolean Returns : void} testNetSocketInternalBuffer{ Params :  Returns : void} testNetSocketInternalDirectBuffer{ Params :  Returns : void} testNetSocketInternalRemoveVertxHandler{ Params :  Returns : void} testCloseCompletionHandlerNotCalledWhenActualServerFailed{ Params :  Returns : void} testServerNetSocketShouldBeClosedWhenTheClosedHandlerIsCalled{ Params :  Returns : void} testNetSocketInternalEvent{ Params :  Returns : void} handlerAdded{ Params : ChannelHandlerContext Returns : void} testServerWithIdleTimeoutSendChunkedFile{ Params :  Returns : void} testClientWithIdleTimeoutSendChunkedFile{ Params :  Returns : void} testIdleTimeoutSendChunkedFile{ Params : boolean Returns : void} testHalfCloseCallsEndHandlerAfterBuffersAreDelivered{ Params :  Returns : void} testSslHandshakeTimeoutHappenedOnServer{ Params :  Returns : void} testSslHandshakeTimeoutHappenedOnSniServer{ Params :  Returns : void} testSslHandshakeTimeoutHappened{ Params : boolean,boolean Returns : void} testSslHandshakeTimeoutNotHappened{ Params :  Returns : void} testSslHandshakeTimeoutHappenedWhenUpgradeSsl{ Params :  Returns : void} startServer{ Params : SocketAddress Returns : void} startServer{ Params : SocketAddress,NetServer Returns : void} startServer{ Params : SocketAddress,Context Returns : void} startServer{ Params : SocketAddress,Context,NetServer Returns : void} testPausedDuringLastChunk{ Params :  Returns : void} startServer{ Params :  Returns : void} startServer{ Params : NetServer Returns : void} startServer{ Params : Context Returns : void} startServer{ Params : Context,NetServer Returns : void} testUnresolvedSocketAddress{ Params :  Returns : void} testNetSocketHandlerFailureReportedToContextExceptionHandler{ Params :  Returns : void} testHAProxyProtocolIdleTimeout{ Params :  Returns : void} testHAProxyProtocolIdleTimeoutNotHappened{ Params :  Returns : void} testHAProxyProtocolConnectSSL{ Params :  Returns : void} testHAProxyProtocolVersion1TCP4{ Params :  Returns : void} testHAProxyProtocolVersion1TCP6{ Params :  Returns : void} testHAProxyProtocolVersion1Unknown{ Params :  Returns : void} testHAProxyProtocolVersion2TCP4{ Params :  Returns : void} testHAProxyProtocolVersion2TCP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixSocket{ Params :  Returns : void} testHAProxyProtocolVersion2Unknown{ Params :  Returns : void} testHAProxyProtocolAccepted{ Params : Buffer,SocketAddress,SocketAddress Returns : void} testHAProxyProtocolVersion2UDP4{ Params :  Returns : void} testHAProxyProtocolVersion2UDP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixDataGram{ Params :  Returns : void} testHAProxyProtocolRejected{ Params : Buffer Returns : void} testHAProxyProtocolIllegalHeader1{ Params :  Returns : void} testHAProxyProtocolIllegalHeader2{ Params :  Returns : void} testHAProxyProtocolIllegal{ Params : Buffer Returns : void} assertAddresses{ Params : SocketAddress,SocketAddress Returns : void} testConnectTimeout{ Params :  Returns : void} testInvalidPort{ Params :  Returns : void} testClientShutdown{ Params :  Returns : void} ,getOptions channelRead start start start start sslContextFactory create handlerAdded ,,,,,,,,TemporaryFolder NetClientOptions NetClientOptions JksOptions JksOptions JdkSSLEngineOptions NetServerOptions JksOptions JksOptions JdkSSLEngineOptions NetClientOptions Random JksOptions JksOptions JdkSSLEngineOptions OpenSSLEngineOptions NetClientOptions NetClientOptions NetClientOptions JsonObject Random JksOptions JksOptions JsonObject JsonObject JsonObject JsonArray JsonArray JsonObject JsonObject NetClientOptions NetClientOptions JsonObject JsonObject NetClientOptions JsonObject JsonObject NetClientOptions NetServerOptions Random JksOptions JksOptions JdkSSLEngineOptions OpenSSLEngineOptions NetServerOptions NetServerOptions NetServerOptions JsonObject Random JksOptions JksOptions JsonObject JsonArray JsonArray JsonObject JsonObject JsonObject NetServerOptions JsonObject JsonObject NetServerOptions JsonObject JsonObject NetServerOptions CompletableFuture CompletableFuture AtomicInteger NetServerOptions NetServerOptions AtomicInteger AtomicInteger ArrayList AtomicInteger CountDownLatch ChannelInboundHandlerAdapter NetClientOptions NetClientOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions AtomicInteger AtomicInteger TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest TLSTest NetServerOptions AtomicBoolean AtomicInteger NetClientOptions ArrayList AtomicBoolean VertxOptions ArrayList ArrayList ConcurrentHashMap CountDownLatch CountDownLatch NetClientOptions CountDownLatch AtomicInteger CountDownLatch NetServerOptions CountDownLatch CountDownLatch ArrayList CountDownLatch NetServerOptions ConcurrentHashSet CountDownLatch NetClientOptions NetServerOptions NetClientOptions CountDownLatch Thread NetClientOptions MyVerticle DeploymentOptions CountDownLatch AtomicReference CountDownLatch AtomicReference ConcurrentHashSet AtomicInteger CountDownLatch ThreadLocal AbstractVerticle DeploymentOptions CountDownLatch AtomicInteger File BufferedWriter OutputStreamWriter FileOutputStream CountDownLatch CountDownLatch CountDownLatch NetServerOptions JksOptions NetClientOptions NetServerOptions JksOptions NetClientOptions NetServerOptions NetClientOptions NetClientOptions ProxyOptions SocksProxy NetClientOptions ProxyOptions SocksProxy NetServerOptions NetClientOptions ProxyOptions SocksProxy NetServerOptions NetClientOptions ProxyOptions SocksProxy NetClientOptions ProxyOptions HttpProxy NetClientOptions ProxyOptions Socks4Proxy NetClientOptions ProxyOptions Socks4Proxy NetClientOptions ProxyOptions Socks4Proxy NetClientOptions ProxyOptions HttpProxy NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions CountDownLatch NetServerOptions NetClientOptions NetClientOptions AbstractVerticle DeploymentOptions AbstractVerticle DeploymentOptions HttpClientOptions NetServerOptions HttpClientOptions HttpServerCodec DefaultFullHttpResponse HttpServerOptions NetClientOptions HttpServerOptions ByteArrayInputStream NetClientOptions JdkSSLEngineOptions SslContextFactory JdkSslContext HttpServerOptions CountDownLatch HttpClientCodec AtomicInteger DefaultFullHttpRequest NetClientOptions NetServerOptions PemKeyCertOptions CheckingSender Object ChannelHandlerAdapter AtomicReference AtomicReference AtomicLong NetServerOptions NetClientOptions StringBuffer AtomicBoolean AtomicBoolean NetServerOptions NetClientOptions NetServerOptions NetClientOptions NetServerOptions NetClientOptions CountDownLatch AtomicBoolean ArrayList NullPointerException NullPointerException NullPointerException HAProxy NetServerOptions HAProxy NetServerOptions HAProxy NetServerOptions NetClientOptions HAProxy NetServerOptions HAProxy NetServerOptions HAProxy NetServerOptions NetClientOptions CountDownLatch AtomicInteger ,: 
vert.x-master,io.vertx.core.net,TLSTest,3,0,0,0,0,false,VertxTestBase ,0 ,TLSTest ,clientCert: Cert<?> clientTrust: Trust<?> serverCert: Cert<?> serverTrust: Trust<?> requireClientAuth: boolean clientTrustAll: boolean startTLS: boolean enabledCipherSuites: String enabledSecureTransportProtocols: String sni: boolean bindAddress: SocketAddress connectAddress: SocketAddress serverName: String clientPeerCert: Certificate indicatedServerName: String ,setUp{ Params :  Returns : void} getOptions{ Params :  Returns : VertxOptions} tearDown{ Params :  Returns : void} testClientOptions{ Params :  Returns : void} testServerOptions{ Params :  Returns : void} testCopyClientOptions{ Params :  Returns : void} testDefaultClientOptionsJson{ Params :  Returns : void} testClientOptionsJson{ Params :  Returns : void} testCopyServerOptions{ Params :  Returns : void} testDefaultServerOptionsJson{ Params :  Returns : void} testServerOptionsJson{ Params :  Returns : void} testWriteHandlerSuccess{ Params :  Returns : void} testWriteHandlerFailure{ Params :  Returns : void} writeUntilFull{ Params : NetSocket,Handler<Void> Returns : void} testEchoBytes{ Params :  Returns : void} testEchoString{ Params :  Returns : void} testEchoStringUTF8{ Params :  Returns : void} testEchoStringUTF16{ Params :  Returns : void} testEchoStringWithEncoding{ Params : String Returns : void} testEcho{ Params : Consumer<NetSocket>,Consumer<Buffer>,int Returns : void} startEchoServer{ Params : SocketAddress,Handler<AsyncResult<NetServer>> Returns : void} testConnectLocalHost{ Params :  Returns : void} connect{ Params : SocketAddress Returns : void} testConnectInvalidPort{ Params :  Returns : void} testConnectInvalidHost{ Params :  Returns : void} testListenInvalidPort{ Params :  Returns : void} testListenInvalidHost{ Params :  Returns : void} testListenOnWildcardPort{ Params :  Returns : void} testClientCloseHandlersCloseFromClient{ Params :  Returns : void} testClientCloseHandlersCloseFromServer{ Params :  Returns : void} clientCloseHandlers{ Params : boolean Returns : void} testServerCloseHandlersCloseFromClient{ Params :  Returns : void} testServerCloseHandlersCloseFromServer{ Params :  Returns : void} serverCloseHandlers{ Params : boolean,Handler<NetServer> Returns : void} testClientClose{ Params :  Returns : void} testReceiveMessageAfterExplicitClose{ Params :  Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} testClientDrainHandler{ Params :  Returns : void} pausingServer{ Params : Handler<AsyncResult<NetServer>> Returns : void} testServerDrainHandler{ Params :  Returns : void} setHandlers{ Params : NetSocket Returns : void} drainingServer{ Params : Handler<AsyncResult<NetServer>> Returns : void} testReconnectAttemptsInfinite{ Params :  Returns : void} testReconnectAttemptsMany{ Params :  Returns : void} reconnectAttempts{ Params : int Returns : void} testReconnectAttemptsNotEnough{ Params :  Returns : void} testServerIdleTimeout1{ Params :  Returns : void} testServerIdleTimeout2{ Params :  Returns : void} testServerIdleTimeout3{ Params :  Returns : void} testServerIdleTimeout4{ Params :  Returns : void} testServerIdleTimeout5{ Params :  Returns : void} testServerIdleTimeout6{ Params :  Returns : void} testClientIdleTimeout1{ Params :  Returns : void} testClientIdleTimeout2{ Params :  Returns : void} testClientIdleTimeout3{ Params :  Returns : void} testClientIdleTimeout4{ Params :  Returns : void} testClientIdleTimeout5{ Params :  Returns : void} testClientIdleTimeout6{ Params :  Returns : void} testTimeout{ Params : NetClientOptions,NetServerOptions,Consumer<Buffer>,boolean Returns : void} testStartTLSClientTrustAll{ Params :  Returns : void} testTLSClientTrustAll{ Params :  Returns : void} testTLSClientTrustServerCert{ Params :  Returns : void} testTLSClientUntrustedServer{ Params :  Returns : void} testTLSClientCertNotRequired{ Params :  Returns : void} testTLSClientCertRequired{ Params :  Returns : void} testTLSClientCertRequiredNoClientCert{ Params :  Returns : void} testTLSClientCertClientNotTrusted{ Params :  Returns : void} testStartTLSClientCertClientNotTrusted{ Params :  Returns : void} testTLSCipherSuites{ Params :  Returns : void} testInvalidTlsProtocolVersion{ Params :  Returns : void} testSpecificTlsProtocolVersion{ Params :  Returns : void} testTLSTrailingDotHost{ Params :  Returns : void} testSniWithoutServerNameUsesTheFirstKeyStoreEntry1{ Params :  Returns : void} testSniWithoutServerNameUsesTheFirstKeyStoreEntry2{ Params :  Returns : void} testSniImplicitServerName{ Params :  Returns : void} testSniImplicitServerNameDisabledForShortname1{ Params :  Returns : void} testSniImplicitServerNameDisabledForShortname2{ Params :  Returns : void} testSniForceShortname{ Params :  Returns : void} testSniOverrideServerName{ Params :  Returns : void} testSniWithUnknownServer1{ Params :  Returns : void} testSniWithUnknownServer2{ Params :  Returns : void} testSniWithServerNameStartTLS{ Params :  Returns : void} testSniWithServerNameTrust{ Params :  Returns : void} testSniWithServerNameTrustFallback{ Params :  Returns : void} testSniWithServerNameTrustFallbackFail{ Params :  Returns : void} testSniWithServerNameTrustFail{ Params :  Returns : void} testSniWithTrailingDotHost{ Params :  Returns : void} testServerCertificateMultiple{ Params :  Returns : void} testServerCertificateMultipleWrongAlias{ Params :  Returns : void} testServerCertificateMultipleWithKeyPassword{ Params :  Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean,String[] Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean,String[],String[] Returns : void} clientCert{ Params : Cert<?> Returns : TLSTest} clientTrust{ Params : Trust<?> Returns : TLSTest} serverCert{ Params : Cert<?> Returns : TLSTest} serverTrust{ Params : Trust<?> Returns : TLSTest} requireClientAuth{ Params : boolean Returns : TLSTest} clientTrustAll{ Params : boolean Returns : TLSTest} startTLS{ Params : boolean Returns : TLSTest} enabledCipherSuites{ Params : String[] Returns : TLSTest} enabledSecureTransportProtocols{ Params : String[] Returns : TLSTest} address{ Params : SocketAddress Returns : TLSTest} bindAddress{ Params : SocketAddress Returns : TLSTest} connectAddress{ Params : SocketAddress Returns : TLSTest} serverName{ Params : String Returns : TLSTest} sni{ Params : boolean Returns : TLSTest} clientPeerCert{ Params :  Returns : Certificate} setupServer{ Params : boolean Returns : void} run{ Params : boolean Returns : void} testListenDomainSocketAddress{ Params :  Returns : void} testSharedServersRoundRobin{ Params :  Returns : void} testSharedServersRoundRobinWithOtherServerRunningOnDifferentPort{ Params :  Returns : void} testSharedServersRoundRobinButFirstStartAndStopServer{ Params :  Returns : void} testClosingVertxCloseSharedServers{ Params :  Returns : void} testWriteHandlerIdNullByDefault{ Params :  Returns : void} testFanout{ Params :  Returns : void} testRemoteAddress{ Params :  Returns : void} testWriteSameBufferMoreThanOnce{ Params :  Returns : void} sendFileClientToServer{ Params :  Returns : void} sendFileServerToClient{ Params :  Returns : void} testSendFileDirectory{ Params :  Returns : void} testServerOptionsCopiedBeforeUse{ Params :  Returns : void} testClientOptionsCopiedBeforeUse{ Params :  Returns : void} testListenWithNoHandler{ Params :  Returns : void} testListenWithNoHandler2{ Params :  Returns : void} testSetHandlerAfterListen{ Params :  Returns : void} testSetHandlerAfterListen2{ Params :  Returns : void} testListenTwice{ Params :  Returns : void} testListenOnPortNoHandler{ Params :  Returns : void} testListen{ Params :  Returns : void} testListenTwice2{ Params :  Returns : void} testCloseTwice{ Params :  Returns : void} testAttemptConnectAfterClose{ Params :  Returns : void} testCloseWithHandler{ Params :  Returns : void} testClientMultiThreaded{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} testInVerticle{ Params : boolean Returns : void} start{ Params :  Returns : void} testContexts{ Params :  Returns : void} testMultipleServerClose{ Params :  Returns : void} testInWorker{ Params :  Returns : void} start{ Params :  Returns : void} testAsyncWriteIsFlushed{ Params :  Returns : void} setupFile{ Params : String,String,String Returns : File} testServerWorkerMissBufferWhenBufferArriveBeforeConnectCallback{ Params :  Returns : void} testClientWorkerMissBufferWhenBufferArriveBeforeConnectCallback{ Params :  Returns : void} testHostVerificationHttpsNotMatching{ Params :  Returns : void} testHostVerificationHttpsMatching{ Params :  Returns : void} testNoLogging{ Params :  Returns : void} testServerLogging{ Params :  Returns : void} testClientLogging{ Params :  Returns : void} testLogging{ Params :  Returns : TestLoggerFactory} testWithSocks5Proxy{ Params :  Returns : void} testWithSocks5ProxyAuth{ Params :  Returns : void} testConnectSSLWithSocks5Proxy{ Params :  Returns : void} testUpgradeSSLWithSocks5Proxy{ Params :  Returns : void} testWithHttpConnectProxy{ Params :  Returns : void} testWithSocks4aProxy{ Params :  Returns : void} testWithSocks4aProxyAuth{ Params :  Returns : void} testWithSocks4LocalResolver{ Params :  Returns : void} testNonProxyHosts{ Params :  Returns : void} testTLSHostnameCertCheckCorrect{ Params :  Returns : void} testTLSHostnameCertCheckIncorrect{ Params :  Returns : void} testUpgradeToSSLIncorrectClientOptions{ Params :  Returns : void} testClientLocalAddress{ Params :  Returns : void} testSelfSignedCertificate{ Params :  Returns : void} testWorkerClient{ Params :  Returns : void} start{ Params :  Returns : void} testWorkerServer{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testNetServerInternal{ Params :  Returns : void} testNetServerInternalTLS{ Params :  Returns : void} testNetServerInternal_{ Params : HttpClientOptions,boolean Returns : void} testNetClientInternal{ Params :  Returns : void} testNetClientInternalTLS{ Params :  Returns : void} testNetClientInternalTLSWithSuppliedSSLContext{ Params :  Returns : void} sslContextFactory{ Params :  Returns : SslContextFactory} create{ Params :  Returns : SslContext} testNetClientInternal_{ Params : HttpServerOptions,boolean Returns : void} testNetSocketInternalBuffer{ Params :  Returns : void} testNetSocketInternalDirectBuffer{ Params :  Returns : void} testNetSocketInternalRemoveVertxHandler{ Params :  Returns : void} testCloseCompletionHandlerNotCalledWhenActualServerFailed{ Params :  Returns : void} testServerNetSocketShouldBeClosedWhenTheClosedHandlerIsCalled{ Params :  Returns : void} testNetSocketInternalEvent{ Params :  Returns : void} handlerAdded{ Params : ChannelHandlerContext Returns : void} testServerWithIdleTimeoutSendChunkedFile{ Params :  Returns : void} testClientWithIdleTimeoutSendChunkedFile{ Params :  Returns : void} testIdleTimeoutSendChunkedFile{ Params : boolean Returns : void} testHalfCloseCallsEndHandlerAfterBuffersAreDelivered{ Params :  Returns : void} testSslHandshakeTimeoutHappenedOnServer{ Params :  Returns : void} testSslHandshakeTimeoutHappenedOnSniServer{ Params :  Returns : void} testSslHandshakeTimeoutHappened{ Params : boolean,boolean Returns : void} testSslHandshakeTimeoutNotHappened{ Params :  Returns : void} testSslHandshakeTimeoutHappenedWhenUpgradeSsl{ Params :  Returns : void} startServer{ Params : SocketAddress Returns : void} startServer{ Params : SocketAddress,NetServer Returns : void} startServer{ Params : SocketAddress,Context Returns : void} startServer{ Params : SocketAddress,Context,NetServer Returns : void} testPausedDuringLastChunk{ Params :  Returns : void} startServer{ Params :  Returns : void} startServer{ Params : NetServer Returns : void} startServer{ Params : Context Returns : void} startServer{ Params : Context,NetServer Returns : void} testUnresolvedSocketAddress{ Params :  Returns : void} testNetSocketHandlerFailureReportedToContextExceptionHandler{ Params :  Returns : void} testHAProxyProtocolIdleTimeout{ Params :  Returns : void} testHAProxyProtocolIdleTimeoutNotHappened{ Params :  Returns : void} testHAProxyProtocolConnectSSL{ Params :  Returns : void} testHAProxyProtocolVersion1TCP4{ Params :  Returns : void} testHAProxyProtocolVersion1TCP6{ Params :  Returns : void} testHAProxyProtocolVersion1Unknown{ Params :  Returns : void} testHAProxyProtocolVersion2TCP4{ Params :  Returns : void} testHAProxyProtocolVersion2TCP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixSocket{ Params :  Returns : void} testHAProxyProtocolVersion2Unknown{ Params :  Returns : void} testHAProxyProtocolAccepted{ Params : Buffer,SocketAddress,SocketAddress Returns : void} testHAProxyProtocolVersion2UDP4{ Params :  Returns : void} testHAProxyProtocolVersion2UDP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixDataGram{ Params :  Returns : void} testHAProxyProtocolRejected{ Params : Buffer Returns : void} testHAProxyProtocolIllegalHeader1{ Params :  Returns : void} testHAProxyProtocolIllegalHeader2{ Params :  Returns : void} testHAProxyProtocolIllegal{ Params : Buffer Returns : void} assertAddresses{ Params : SocketAddress,SocketAddress Returns : void} testConnectTimeout{ Params :  Returns : void} testInvalidPort{ Params :  Returns : void} testClientShutdown{ Params :  Returns : void} ,getOptions channelRead start start start start sslContextFactory create handlerAdded ,,,,,,,,NetServerOptions AtomicBoolean AtomicInteger NetClientOptions ArrayList AtomicBoolean ,: 
vert.x-master,io.vertx.core.net,MyVerticle,1,0,0,0,0,false,VertxTestBase ,0 ,TLSTest ,ctx: Context ,setUp{ Params :  Returns : void} getOptions{ Params :  Returns : VertxOptions} tearDown{ Params :  Returns : void} testClientOptions{ Params :  Returns : void} testServerOptions{ Params :  Returns : void} testCopyClientOptions{ Params :  Returns : void} testDefaultClientOptionsJson{ Params :  Returns : void} testClientOptionsJson{ Params :  Returns : void} testCopyServerOptions{ Params :  Returns : void} testDefaultServerOptionsJson{ Params :  Returns : void} testServerOptionsJson{ Params :  Returns : void} testWriteHandlerSuccess{ Params :  Returns : void} testWriteHandlerFailure{ Params :  Returns : void} writeUntilFull{ Params : NetSocket,Handler<Void> Returns : void} testEchoBytes{ Params :  Returns : void} testEchoString{ Params :  Returns : void} testEchoStringUTF8{ Params :  Returns : void} testEchoStringUTF16{ Params :  Returns : void} testEchoStringWithEncoding{ Params : String Returns : void} testEcho{ Params : Consumer<NetSocket>,Consumer<Buffer>,int Returns : void} startEchoServer{ Params : SocketAddress,Handler<AsyncResult<NetServer>> Returns : void} testConnectLocalHost{ Params :  Returns : void} connect{ Params : SocketAddress Returns : void} testConnectInvalidPort{ Params :  Returns : void} testConnectInvalidHost{ Params :  Returns : void} testListenInvalidPort{ Params :  Returns : void} testListenInvalidHost{ Params :  Returns : void} testListenOnWildcardPort{ Params :  Returns : void} testClientCloseHandlersCloseFromClient{ Params :  Returns : void} testClientCloseHandlersCloseFromServer{ Params :  Returns : void} clientCloseHandlers{ Params : boolean Returns : void} testServerCloseHandlersCloseFromClient{ Params :  Returns : void} testServerCloseHandlersCloseFromServer{ Params :  Returns : void} serverCloseHandlers{ Params : boolean,Handler<NetServer> Returns : void} testClientClose{ Params :  Returns : void} testReceiveMessageAfterExplicitClose{ Params :  Returns : void} channelRead{ Params : ChannelHandlerContext,Object Returns : void} testClientDrainHandler{ Params :  Returns : void} pausingServer{ Params : Handler<AsyncResult<NetServer>> Returns : void} testServerDrainHandler{ Params :  Returns : void} setHandlers{ Params : NetSocket Returns : void} drainingServer{ Params : Handler<AsyncResult<NetServer>> Returns : void} testReconnectAttemptsInfinite{ Params :  Returns : void} testReconnectAttemptsMany{ Params :  Returns : void} reconnectAttempts{ Params : int Returns : void} testReconnectAttemptsNotEnough{ Params :  Returns : void} testServerIdleTimeout1{ Params :  Returns : void} testServerIdleTimeout2{ Params :  Returns : void} testServerIdleTimeout3{ Params :  Returns : void} testServerIdleTimeout4{ Params :  Returns : void} testServerIdleTimeout5{ Params :  Returns : void} testServerIdleTimeout6{ Params :  Returns : void} testClientIdleTimeout1{ Params :  Returns : void} testClientIdleTimeout2{ Params :  Returns : void} testClientIdleTimeout3{ Params :  Returns : void} testClientIdleTimeout4{ Params :  Returns : void} testClientIdleTimeout5{ Params :  Returns : void} testClientIdleTimeout6{ Params :  Returns : void} testTimeout{ Params : NetClientOptions,NetServerOptions,Consumer<Buffer>,boolean Returns : void} testStartTLSClientTrustAll{ Params :  Returns : void} testTLSClientTrustAll{ Params :  Returns : void} testTLSClientTrustServerCert{ Params :  Returns : void} testTLSClientUntrustedServer{ Params :  Returns : void} testTLSClientCertNotRequired{ Params :  Returns : void} testTLSClientCertRequired{ Params :  Returns : void} testTLSClientCertRequiredNoClientCert{ Params :  Returns : void} testTLSClientCertClientNotTrusted{ Params :  Returns : void} testStartTLSClientCertClientNotTrusted{ Params :  Returns : void} testTLSCipherSuites{ Params :  Returns : void} testInvalidTlsProtocolVersion{ Params :  Returns : void} testSpecificTlsProtocolVersion{ Params :  Returns : void} testTLSTrailingDotHost{ Params :  Returns : void} testSniWithoutServerNameUsesTheFirstKeyStoreEntry1{ Params :  Returns : void} testSniWithoutServerNameUsesTheFirstKeyStoreEntry2{ Params :  Returns : void} testSniImplicitServerName{ Params :  Returns : void} testSniImplicitServerNameDisabledForShortname1{ Params :  Returns : void} testSniImplicitServerNameDisabledForShortname2{ Params :  Returns : void} testSniForceShortname{ Params :  Returns : void} testSniOverrideServerName{ Params :  Returns : void} testSniWithUnknownServer1{ Params :  Returns : void} testSniWithUnknownServer2{ Params :  Returns : void} testSniWithServerNameStartTLS{ Params :  Returns : void} testSniWithServerNameTrust{ Params :  Returns : void} testSniWithServerNameTrustFallback{ Params :  Returns : void} testSniWithServerNameTrustFallbackFail{ Params :  Returns : void} testSniWithServerNameTrustFail{ Params :  Returns : void} testSniWithTrailingDotHost{ Params :  Returns : void} testServerCertificateMultiple{ Params :  Returns : void} testServerCertificateMultipleWrongAlias{ Params :  Returns : void} testServerCertificateMultipleWithKeyPassword{ Params :  Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean,String[] Returns : void} testTLS{ Params : Cert<?>,Trust<?>,Cert<?>,Trust<?>,boolean,boolean,boolean,boolean,String[],String[] Returns : void} clientCert{ Params : Cert<?> Returns : TLSTest} clientTrust{ Params : Trust<?> Returns : TLSTest} serverCert{ Params : Cert<?> Returns : TLSTest} serverTrust{ Params : Trust<?> Returns : TLSTest} requireClientAuth{ Params : boolean Returns : TLSTest} clientTrustAll{ Params : boolean Returns : TLSTest} startTLS{ Params : boolean Returns : TLSTest} enabledCipherSuites{ Params : String[] Returns : TLSTest} enabledSecureTransportProtocols{ Params : String[] Returns : TLSTest} address{ Params : SocketAddress Returns : TLSTest} bindAddress{ Params : SocketAddress Returns : TLSTest} connectAddress{ Params : SocketAddress Returns : TLSTest} serverName{ Params : String Returns : TLSTest} sni{ Params : boolean Returns : TLSTest} clientPeerCert{ Params :  Returns : Certificate} setupServer{ Params : boolean Returns : void} run{ Params : boolean Returns : void} testListenDomainSocketAddress{ Params :  Returns : void} testSharedServersRoundRobin{ Params :  Returns : void} testSharedServersRoundRobinWithOtherServerRunningOnDifferentPort{ Params :  Returns : void} testSharedServersRoundRobinButFirstStartAndStopServer{ Params :  Returns : void} testClosingVertxCloseSharedServers{ Params :  Returns : void} testWriteHandlerIdNullByDefault{ Params :  Returns : void} testFanout{ Params :  Returns : void} testRemoteAddress{ Params :  Returns : void} testWriteSameBufferMoreThanOnce{ Params :  Returns : void} sendFileClientToServer{ Params :  Returns : void} sendFileServerToClient{ Params :  Returns : void} testSendFileDirectory{ Params :  Returns : void} testServerOptionsCopiedBeforeUse{ Params :  Returns : void} testClientOptionsCopiedBeforeUse{ Params :  Returns : void} testListenWithNoHandler{ Params :  Returns : void} testListenWithNoHandler2{ Params :  Returns : void} testSetHandlerAfterListen{ Params :  Returns : void} testSetHandlerAfterListen2{ Params :  Returns : void} testListenTwice{ Params :  Returns : void} testListenOnPortNoHandler{ Params :  Returns : void} testListen{ Params :  Returns : void} testListenTwice2{ Params :  Returns : void} testCloseTwice{ Params :  Returns : void} testAttemptConnectAfterClose{ Params :  Returns : void} testCloseWithHandler{ Params :  Returns : void} testClientMultiThreaded{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} testInVerticle{ Params : boolean Returns : void} start{ Params :  Returns : void} testContexts{ Params :  Returns : void} testMultipleServerClose{ Params :  Returns : void} testInWorker{ Params :  Returns : void} start{ Params :  Returns : void} testAsyncWriteIsFlushed{ Params :  Returns : void} setupFile{ Params : String,String,String Returns : File} testServerWorkerMissBufferWhenBufferArriveBeforeConnectCallback{ Params :  Returns : void} testClientWorkerMissBufferWhenBufferArriveBeforeConnectCallback{ Params :  Returns : void} testHostVerificationHttpsNotMatching{ Params :  Returns : void} testHostVerificationHttpsMatching{ Params :  Returns : void} testNoLogging{ Params :  Returns : void} testServerLogging{ Params :  Returns : void} testClientLogging{ Params :  Returns : void} testLogging{ Params :  Returns : TestLoggerFactory} testWithSocks5Proxy{ Params :  Returns : void} testWithSocks5ProxyAuth{ Params :  Returns : void} testConnectSSLWithSocks5Proxy{ Params :  Returns : void} testUpgradeSSLWithSocks5Proxy{ Params :  Returns : void} testWithHttpConnectProxy{ Params :  Returns : void} testWithSocks4aProxy{ Params :  Returns : void} testWithSocks4aProxyAuth{ Params :  Returns : void} testWithSocks4LocalResolver{ Params :  Returns : void} testNonProxyHosts{ Params :  Returns : void} testTLSHostnameCertCheckCorrect{ Params :  Returns : void} testTLSHostnameCertCheckIncorrect{ Params :  Returns : void} testUpgradeToSSLIncorrectClientOptions{ Params :  Returns : void} testClientLocalAddress{ Params :  Returns : void} testSelfSignedCertificate{ Params :  Returns : void} testWorkerClient{ Params :  Returns : void} start{ Params :  Returns : void} testWorkerServer{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} testNetServerInternal{ Params :  Returns : void} testNetServerInternalTLS{ Params :  Returns : void} testNetServerInternal_{ Params : HttpClientOptions,boolean Returns : void} testNetClientInternal{ Params :  Returns : void} testNetClientInternalTLS{ Params :  Returns : void} testNetClientInternalTLSWithSuppliedSSLContext{ Params :  Returns : void} sslContextFactory{ Params :  Returns : SslContextFactory} create{ Params :  Returns : SslContext} testNetClientInternal_{ Params : HttpServerOptions,boolean Returns : void} testNetSocketInternalBuffer{ Params :  Returns : void} testNetSocketInternalDirectBuffer{ Params :  Returns : void} testNetSocketInternalRemoveVertxHandler{ Params :  Returns : void} testCloseCompletionHandlerNotCalledWhenActualServerFailed{ Params :  Returns : void} testServerNetSocketShouldBeClosedWhenTheClosedHandlerIsCalled{ Params :  Returns : void} testNetSocketInternalEvent{ Params :  Returns : void} handlerAdded{ Params : ChannelHandlerContext Returns : void} testServerWithIdleTimeoutSendChunkedFile{ Params :  Returns : void} testClientWithIdleTimeoutSendChunkedFile{ Params :  Returns : void} testIdleTimeoutSendChunkedFile{ Params : boolean Returns : void} testHalfCloseCallsEndHandlerAfterBuffersAreDelivered{ Params :  Returns : void} testSslHandshakeTimeoutHappenedOnServer{ Params :  Returns : void} testSslHandshakeTimeoutHappenedOnSniServer{ Params :  Returns : void} testSslHandshakeTimeoutHappened{ Params : boolean,boolean Returns : void} testSslHandshakeTimeoutNotHappened{ Params :  Returns : void} testSslHandshakeTimeoutHappenedWhenUpgradeSsl{ Params :  Returns : void} startServer{ Params : SocketAddress Returns : void} startServer{ Params : SocketAddress,NetServer Returns : void} startServer{ Params : SocketAddress,Context Returns : void} startServer{ Params : SocketAddress,Context,NetServer Returns : void} testPausedDuringLastChunk{ Params :  Returns : void} startServer{ Params :  Returns : void} startServer{ Params : NetServer Returns : void} startServer{ Params : Context Returns : void} startServer{ Params : Context,NetServer Returns : void} testUnresolvedSocketAddress{ Params :  Returns : void} testNetSocketHandlerFailureReportedToContextExceptionHandler{ Params :  Returns : void} testHAProxyProtocolIdleTimeout{ Params :  Returns : void} testHAProxyProtocolIdleTimeoutNotHappened{ Params :  Returns : void} testHAProxyProtocolConnectSSL{ Params :  Returns : void} testHAProxyProtocolVersion1TCP4{ Params :  Returns : void} testHAProxyProtocolVersion1TCP6{ Params :  Returns : void} testHAProxyProtocolVersion1Unknown{ Params :  Returns : void} testHAProxyProtocolVersion2TCP4{ Params :  Returns : void} testHAProxyProtocolVersion2TCP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixSocket{ Params :  Returns : void} testHAProxyProtocolVersion2Unknown{ Params :  Returns : void} testHAProxyProtocolAccepted{ Params : Buffer,SocketAddress,SocketAddress Returns : void} testHAProxyProtocolVersion2UDP4{ Params :  Returns : void} testHAProxyProtocolVersion2UDP6{ Params :  Returns : void} testHAProxyProtocolVersion2UnixDataGram{ Params :  Returns : void} testHAProxyProtocolRejected{ Params : Buffer Returns : void} testHAProxyProtocolIllegalHeader1{ Params :  Returns : void} testHAProxyProtocolIllegalHeader2{ Params :  Returns : void} testHAProxyProtocolIllegal{ Params : Buffer Returns : void} assertAddresses{ Params : SocketAddress,SocketAddress Returns : void} testConnectTimeout{ Params :  Returns : void} testInvalidPort{ Params :  Returns : void} testClientShutdown{ Params :  Returns : void} ,getOptions channelRead start start start start sslContextFactory create handlerAdded ,,,,,,,,NetClientOptions ,: 
vert.x-master,io.vertx.core.net,ProxyErrorTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,proxy: HttpProxy dnsServer: FakeDNSServer dnsServerAddress: InetSocketAddress ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} getOptions{ Params :  Returns : VertxOptions} startProxy{ Params : int,String Returns : void} testProxyHttpsError{ Params :  Returns : void} testProxyHttpsAuthFail{ Params :  Returns : void} testProxyHttpsHostUnknown{ Params :  Returns : void} testProxyError{ Params :  Returns : void} testProxyAuthFail{ Params :  Returns : void} testProxyHostUnknown{ Params :  Returns : void} expectProxyException{ Params : int,String,String Returns : void} expectStatusError{ Params : int,int,String,String Returns : void} proxyTest{ Params : int,String,String,Handler<AsyncResult<HttpClientResponse>> Returns : void} ,setUp tearDown getOptions ,,,,,InetSocketAddress ,,InetSocketAddress ,FakeDNSServer HttpProxy HttpClientOptions ProxyOptions RequestOptions ,: 
vert.x-master,io.vertx.core.net,ProxyOptionsTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,randType: ProxyType randHost: String randPort: int randUsername: String randPassword: String ,setUp{ Params :  Returns : void} testProxyOptions{ Params :  Returns : void} testCopyProxyOptions{ Params :  Returns : void} testDefaultOptionsJson{ Params :  Returns : void} testOptionsJson{ Params :  Returns : void} ,setUp ,,,,,,,,ProxyOptions ProxyOptions ProxyOptions ProxyOptions ProxyOptions JsonObject JsonObject ProxyOptions ,options: 
vert.x-master,io.vertx.core.net,SocketAddressTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testInetSocketAddressFromUnresolvedAddress{ Params :  Returns : void} testInetSocketAddressFromResolvedAddress{ Params :  Returns : void} testInetSocketAddressIpV4Address{ Params :  Returns : void} testInetSocketAddressIpV6Address{ Params :  Returns : void} testInetSocketAddressFromHostName{ Params :  Returns : void} testInetSocketAddressFromIpV4AddressHost{ Params :  Returns : void} testInetSocketAddressFromIpV6AddressHost{ Params :  Returns : void} testDomainSocketAddress{ Params :  Returns : void} testSocketAddress{ Params :  Returns : void} ,,,,,,,,,InetSocketAddress InetSocketAddress InetSocketAddress ,SocketAddress: , 65536, "someHost"
vert.x-master,io.vertx.core.net,SSLEngineTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testOpenSslOptions{ Params :  Returns : void} testCopyOpenSslOptions{ Params :  Returns : void} testDefaultOpenSslOptionsJson{ Params :  Returns : void} testOpenSslOptionsJson{ Params :  Returns : void} ,,,,,,,,,OpenSSLEngineOptions OpenSSLEngineOptions OpenSSLEngineOptions OpenSSLEngineOptions OpenSSLEngineOptions JsonObject OpenSSLEngineOptions ,optins: 
vert.x-master,io.vertx.core.net,SSLHelperTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testUseJdkCiphersWhenNotSpecified{ Params :  Returns : void} testUseOpenSSLCiphersWhenNotSpecified{ Params :  Returns : void} testDefaultOpenSslServerSessionContext{ Params :  Returns : void} testUserSetOpenSslServerSessionContext{ Params :  Returns : void} testOpenSslServerSessionContext{ Params : boolean Returns : void} testPreserveEnabledCipherSuitesOrder{ Params :  Returns : void} testPreserveEnabledSecureTransportProtocolOrder{ Params :  Returns : void} testDefaultVersions{ Params :  Returns : void} testSetVersion{ Params :  Returns : void} testSetVersions{ Params :  Returns : void} testTLSVersions{ Params : HttpServerOptions,Consumer<SSLEngine> Returns : void} createEngine{ Params : SslContextProvider Returns : SSLEngine} ,,,,,,,,,SSLHelper HttpClientOptions SSLOptions HashSet HashSet SSLHelper HttpClientOptions OpenSSLEngineOptions SSLOptions HashSet HttpServerOptions OpenSSLEngineOptions OpenSSLEngineOptions SSLHelper HttpServerOptions ArrayList ArrayList HttpServerOptions ArrayList HttpServerOptions SSLHelper HashSet HashSet HttpServerOptions ArrayList ArrayList ArrayList HttpServerOptions ArrayList HttpServerOptions HttpServerOptions HttpServerOptions HashSet HttpServerOptions HashSet SSLHelper ,provider: , null, false, false
vert.x-master,io.vertx.core.parsetools,FakeStream,1,0,0,0,0,false,0 ,ReadStream<Buffer> ,0 ,demand: long eventHandler: Handler<Buffer> endHandler: Handler<Void> exceptionHandler: Handler<Throwable> pauseCount: int resumeCount: int ,exceptionHandler{ Params : Handler<Throwable> Returns : ReadStream<Buffer>} handler{ Params : Handler<Buffer> Returns : ReadStream<Buffer>} fetch{ Params : long Returns : ReadStream<Buffer>} pause{ Params :  Returns : ReadStream<Buffer>} resume{ Params :  Returns : ReadStream<Buffer>} endHandler{ Params : Handler<Void> Returns : ReadStream<Buffer>} isPaused{ Params :  Returns : boolean} handle{ Params : String Returns : void} handle{ Params : Buffer Returns : void} fail{ Params : Throwable Returns : void} end{ Params :  Returns : void} pauseCount{ Params :  Returns : int} resumeCount{ Params :  Returns : int} ,exceptionHandler handler fetch pause resume endHandler ,,,,ReadStream ,int ,,int ,IllegalStateException ,endHandler: , null
vert.x-master,io.vertx.core.parsetools,JsonParserTest,1,1,0,0,0,false,0 ,0 ,TheObject ,,testParseEmptyObject{ Params :  Returns : void} testParseEmptyArray{ Params :  Returns : void} parseUnfinishedThrowingException{ Params :  Returns : void} parseUnfinishedExceptionHandler{ Params :  Returns : void} testParseWithErrors{ Params :  Returns : void} parseNumberFormatException{ Params :  Returns : void} testParseObjectValue{ Params :  Returns : void} testParseArrayValue{ Params :  Returns : void} assertThrowCCE{ Params : JsonEvent,Consumer<JsonEvent> Returns : void} testStringValue{ Params :  Returns : void} testInstantValue{ Params :  Returns : void} testBinaryValue{ Params :  Returns : void} testNullValue{ Params :  Returns : void} testLongValue{ Params :  Returns : void} testDoubleValue{ Params :  Returns : void} testBooleanValue{ Params :  Returns : void} testValue{ Params : String,Handler<JsonEvent> Returns : void} testParseObjectValueMembers{ Params :  Returns : void} testParseObjectValueList{ Params :  Returns : void} testObjectHandlerScope{ Params :  Returns : void} testParseTopValues{ Params :  Returns : void} testObjectMapping{ Params :  Returns : void} testObjectMappingError{ Params :  Returns : void} testObjectMappingWithTypeReference{ Params :  Returns : void} testArrayMapping{ Params :  Returns : void} testArrayMappingError{ Params :  Returns : void} testArrayMappingWithTypeReference{ Params :  Returns : void} setF{ Params : String Returns : void} equals{ Params : Object Returns : boolean} testParseConcatedJSONStream{ Params :  Returns : void} testParseLineDelimitedJSONStream{ Params :  Returns : void} testStreamHandle{ Params :  Returns : void} testStreamPause{ Params :  Returns : void} testStreamResume{ Params :  Returns : void} testStreamFetch{ Params :  Returns : void} testStreamFetchNames{ Params :  Returns : void} testStreamPauseInHandler{ Params :  Returns : void} testStreamFetchInHandler{ Params :  Returns : void} testStreamEnd{ Params :  Returns : void} testStreamPausedEnd{ Params :  Returns : void} testPauseAndResumeInHandler{ Params :  Returns : void} testStreamResume3886{ Params :  Returns : void} ,equals ,,,,,,,,AtomicInteger AtomicInteger AtomicInteger StringBuilder StringBuilder ArrayList ArrayList AtomicInteger JsonObject JsonObject JsonObject ArrayList AtomicInteger JsonObject JsonObject JsonArray AtomicInteger JsonArray JsonObject JsonArray AtomicInteger AtomicInteger JsonObject JsonObject AtomicInteger JsonObject JsonObject JsonObject ArrayList AtomicInteger AtomicBoolean JsonObject JsonObject HashMap ArrayList ArrayList TheObject TheObject TheObject ArrayList ArrayList ArrayList TypeReference JsonObject TheObject ArrayList JsonArray ArrayList ArrayList ArrayList TypeReference JsonArray AtomicInteger AtomicInteger AtomicInteger AtomicInteger AtomicInteger AtomicInteger AtomicInteger FakeStream ArrayList FakeStream ArrayList FakeStream ArrayList FakeStream ArrayList FakeStream ArrayList FakeStream ArrayList FakeStream ArrayList FakeStream ArrayList AtomicInteger FakeStream ArrayList AtomicInteger AtomicInteger FakeStream AssertionError CountDownLatch ArrayList ,events: 
vert.x-master,io.vertx.core.parsetools,TheObject,3,1,0,1,0,false,0 ,0 ,TheObject ,f: String ,testParseEmptyObject{ Params :  Returns : void} testParseEmptyArray{ Params :  Returns : void} parseUnfinishedThrowingException{ Params :  Returns : void} parseUnfinishedExceptionHandler{ Params :  Returns : void} testParseWithErrors{ Params :  Returns : void} parseNumberFormatException{ Params :  Returns : void} testParseObjectValue{ Params :  Returns : void} testParseArrayValue{ Params :  Returns : void} assertThrowCCE{ Params : JsonEvent,Consumer<JsonEvent> Returns : void} testStringValue{ Params :  Returns : void} testInstantValue{ Params :  Returns : void} testBinaryValue{ Params :  Returns : void} testNullValue{ Params :  Returns : void} testLongValue{ Params :  Returns : void} testDoubleValue{ Params :  Returns : void} testBooleanValue{ Params :  Returns : void} testValue{ Params : String,Handler<JsonEvent> Returns : void} testParseObjectValueMembers{ Params :  Returns : void} testParseObjectValueList{ Params :  Returns : void} testObjectHandlerScope{ Params :  Returns : void} testParseTopValues{ Params :  Returns : void} testObjectMapping{ Params :  Returns : void} testObjectMappingError{ Params :  Returns : void} testObjectMappingWithTypeReference{ Params :  Returns : void} testArrayMapping{ Params :  Returns : void} testArrayMappingError{ Params :  Returns : void} testArrayMappingWithTypeReference{ Params :  Returns : void} setF{ Params : String Returns : void} equals{ Params : Object Returns : boolean} testParseConcatedJSONStream{ Params :  Returns : void} testParseLineDelimitedJSONStream{ Params :  Returns : void} testStreamHandle{ Params :  Returns : void} testStreamPause{ Params :  Returns : void} testStreamResume{ Params :  Returns : void} testStreamFetch{ Params :  Returns : void} testStreamFetchNames{ Params :  Returns : void} testStreamPauseInHandler{ Params :  Returns : void} testStreamFetchInHandler{ Params :  Returns : void} testStreamEnd{ Params :  Returns : void} testStreamPausedEnd{ Params :  Returns : void} testPauseAndResumeInHandler{ Params :  Returns : void} testStreamResume3886{ Params :  Returns : void} ,equals ,,,,,String ,,String ,,Objects: , f, that.f
vert.x-master,io.vertx.core.parsetools,RecordParserTest,1,1,0,0,0,false,0 ,0 ,0 ,,testIllegalArguments{ Params :  Returns : void} testDelimited{ Params :  Returns : void} testFixed{ Params :  Returns : void} testMixed{ Params :  Returns : void} handle{ Params : Buffer Returns : void} delimited{ Params : Buffer Returns : void} doTestDelimited{ Params : Buffer,Buffer,Integer[],Buffer Returns : void} handle{ Params : Buffer Returns : void} doTestFixed{ Params : Buffer,Integer[],Buffer Returns : void} handle{ Params : Buffer Returns : void} feedChunks{ Params : Buffer,RecordParser,Integer[] Returns : void} checkResults{ Params : Buffer[],Buffer[] Returns : void} generateLines{ Params : int,boolean,byte Returns : List<Buffer>} generateChunkSizes{ Params : int Returns : List<Integer>} testSpreadDelimiter{ Params :  Returns : void} testDelimitedMaxRecordSize{ Params :  Returns : void} doTestDelimitedMaxRecordSize{ Params : Buffer,Buffer,Integer[],int,Handler<Throwable>,Buffer Returns : void} handle{ Params : Buffer Returns : void} testWrapReadStream{ Params :  Returns : void} testPausedStreamShouldNotPauseOnIncompleteMatch{ Params :  Returns : void} testSuspendParsing{ Params :  Returns : void} testParseEmptyChunkOnFetch{ Params :  Returns : void} testSwitchModeResetsState{ Params :  Returns : void} testEndOfWrappedStreamWithPauseWithFinalDelimiter{ Params :  Returns : void} testEndOfWrappedStreamWithPauseWithoutFinalDelimiter{ Params :  Returns : void} testEndOfWrappedStreamWithoutPauseWithoutFinalDelimiter{ Params :  Returns : void} testEndOfWrappedStreamWithoutPauseWithFinalDelimiter{ Params :  Returns : void} endOfWrappedStream{ Params : boolean,boolean Returns : void} testParserIsNotReentrant{ Params :  Returns : void} ,,,,,,,,,ArrayList MyHandler Handler MyHandler ArrayList ArrayList AtomicBoolean Handler FakeStream AtomicInteger ArrayDeque Throwable ArrayList FakeStream FakeStream ArrayList FakeStream ArrayList FakeStream ArrayList FakeStream ArrayList CountDownLatch AtomicInteger StringBuffer CountDownLatch ,latch: 
vert.x-master,io.vertx.core.parsetools,MyHandler,1,0,0,0,0,false,0 ,0 ,0 ,parser: RecordParser pos: int ,testIllegalArguments{ Params :  Returns : void} testDelimited{ Params :  Returns : void} testFixed{ Params :  Returns : void} testMixed{ Params :  Returns : void} handle{ Params : Buffer Returns : void} delimited{ Params : Buffer Returns : void} doTestDelimited{ Params : Buffer,Buffer,Integer[],Buffer Returns : void} handle{ Params : Buffer Returns : void} doTestFixed{ Params : Buffer,Integer[],Buffer Returns : void} handle{ Params : Buffer Returns : void} feedChunks{ Params : Buffer,RecordParser,Integer[] Returns : void} checkResults{ Params : Buffer[],Buffer[] Returns : void} generateLines{ Params : int,boolean,byte Returns : List<Buffer>} generateChunkSizes{ Params : int Returns : List<Integer>} testSpreadDelimiter{ Params :  Returns : void} testDelimitedMaxRecordSize{ Params :  Returns : void} doTestDelimitedMaxRecordSize{ Params : Buffer,Buffer,Integer[],int,Handler<Throwable>,Buffer Returns : void} handle{ Params : Buffer Returns : void} testWrapReadStream{ Params :  Returns : void} testPausedStreamShouldNotPauseOnIncompleteMatch{ Params :  Returns : void} testSuspendParsing{ Params :  Returns : void} testParseEmptyChunkOnFetch{ Params :  Returns : void} testSwitchModeResetsState{ Params :  Returns : void} testEndOfWrappedStreamWithPauseWithFinalDelimiter{ Params :  Returns : void} testEndOfWrappedStreamWithPauseWithoutFinalDelimiter{ Params :  Returns : void} testEndOfWrappedStreamWithoutPauseWithoutFinalDelimiter{ Params :  Returns : void} testEndOfWrappedStreamWithoutPauseWithFinalDelimiter{ Params :  Returns : void} endOfWrappedStream{ Params : boolean,boolean Returns : void} testParserIsNotReentrant{ Params :  Returns : void} ,,,,,Handler ,,,,,parser: , length
vert.x-master,io.vertx.core.parsetools,MyHandler,1,0,0,0,0,false,0 ,0 ,0 ,pos: int parser: RecordParser ,testIllegalArguments{ Params :  Returns : void} testDelimited{ Params :  Returns : void} testFixed{ Params :  Returns : void} testMixed{ Params :  Returns : void} handle{ Params : Buffer Returns : void} delimited{ Params : Buffer Returns : void} doTestDelimited{ Params : Buffer,Buffer,Integer[],Buffer Returns : void} handle{ Params : Buffer Returns : void} doTestFixed{ Params : Buffer,Integer[],Buffer Returns : void} handle{ Params : Buffer Returns : void} feedChunks{ Params : Buffer,RecordParser,Integer[] Returns : void} checkResults{ Params : Buffer[],Buffer[] Returns : void} generateLines{ Params : int,boolean,byte Returns : List<Buffer>} generateChunkSizes{ Params : int Returns : List<Integer>} testSpreadDelimiter{ Params :  Returns : void} testDelimitedMaxRecordSize{ Params :  Returns : void} doTestDelimitedMaxRecordSize{ Params : Buffer,Buffer,Integer[],int,Handler<Throwable>,Buffer Returns : void} handle{ Params : Buffer Returns : void} testWrapReadStream{ Params :  Returns : void} testPausedStreamShouldNotPauseOnIncompleteMatch{ Params :  Returns : void} testSuspendParsing{ Params :  Returns : void} testParseEmptyChunkOnFetch{ Params :  Returns : void} testSwitchModeResetsState{ Params :  Returns : void} testEndOfWrappedStreamWithPauseWithFinalDelimiter{ Params :  Returns : void} testEndOfWrappedStreamWithPauseWithoutFinalDelimiter{ Params :  Returns : void} testEndOfWrappedStreamWithoutPauseWithoutFinalDelimiter{ Params :  Returns : void} testEndOfWrappedStreamWithoutPauseWithFinalDelimiter{ Params :  Returns : void} endOfWrappedStream{ Params : boolean,boolean Returns : void} testParserIsNotReentrant{ Params :  Returns : void} ,,,,,Handler ,,,,,expected[pos]: 
vert.x-master,io.vertx.core,ServiceHelperTest,1,1,0,0,0,false,0 ,0 ,0 ,serviceHelperFile: File ,loadFactory{ Params :  Returns : void} loadNotImplementedSPI{ Params :  Returns : void} loadFactoryOrNull{ Params :  Returns : void} loadFactories{ Params :  Returns : void} loadFactoriesWithClassloader{ Params :  Returns : void} loadFactoriesFromTCCL{ Params :  Returns : void} loadFactoriesWithVertxClassloader{ Params :  Returns : void} ,,,,,,File ,,File ,File File URLClassLoader URLClassLoader URLClassLoader File File ,: , collection
vert.x-master,io.vertx.core.shareddata,AsynchronousLockTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,getVertx{ Params :  Returns : Vertx} testIllegalArguments{ Params :  Returns : void} testAcquire{ Params :  Returns : void} testAcquireOnSameEventLoop{ Params :  Returns : void} testAcquireDifferentLocksOnSameEventLoop{ Params :  Returns : void} testAcquireOnExecuteBlocking{ Params :  Returns : void} testAcquireDifferentLocks{ Params :  Returns : void} testAcquireTimeout{ Params :  Returns : void} testReleaseTwice{ Params :  Returns : void} testNoWorkerStarvation{ Params :  Returns : void} start{ Params :  Returns : void} evictTimedOutWaiters{ Params :  Returns : void} ,start ,,,,,,,,AtomicReference AtomicInteger AtomicReference CountDownLatch AtomicReference CountDownLatch AtomicReference CountDownLatch AtomicInteger AbstractVerticle DeploymentOptions ArrayList ,: 
vert.x-master,io.vertx.core.shareddata,AsyncMapTest,1,1,1,0,0,false,VertxTestBase ,0 ,SomeObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject ,,getVertx{ Params :  Returns : Vertx} testMapPutGetByte{ Params :  Returns : void} testMapPutGetShort{ Params :  Returns : void} testMapPutGetInt{ Params :  Returns : void} testMapPutGetLong{ Params :  Returns : void} testMapPutGetChar{ Params :  Returns : void} testMapPutGetFloat{ Params :  Returns : void} testMapPutGetBuffer{ Params :  Returns : void} testMapPutGetDouble{ Params :  Returns : void} testMapPutGetBoolean{ Params :  Returns : void} testMapPutGetString{ Params :  Returns : void} testMapPutGetJsonObject{ Params :  Returns : void} testMapPutGetJsonArray{ Params :  Returns : void} testMapPutGetSerializableObject{ Params :  Returns : void} testMapPutGetClusterSerializableObject{ Params :  Returns : void} testMapPutGetClusterSerializableImplObject{ Params :  Returns : void} testMapPutTtl{ Params :  Returns : void} assertWaitUntilMapContains{ Params : SharedData,String,String,long,Function<String,Boolean> Returns : Future<Void>} assertWaitUntil{ Params : AsyncMap<String,String>,String,long,Function<String,Boolean> Returns : Future<Void>} assertWaitUntil{ Params : AsyncMap<String,String>,String,long,Function<String,Boolean>,Promise<Void> Returns : void} testMapPutTtlThenPut{ Params :  Returns : void} testMapPutThenPutTtl{ Params :  Returns : void} testMapPutIfAbsentGetByte{ Params :  Returns : void} testMapPutIfAbsentGetShort{ Params :  Returns : void} testMapPutIfAbsentGetInt{ Params :  Returns : void} testMapPutIfAbsentGetLong{ Params :  Returns : void} testMapPutIfAbsentGetChar{ Params :  Returns : void} testMapPutIfAbsentGetFloat{ Params :  Returns : void} testMapPutIfAbsentGetBuffer{ Params :  Returns : void} testMapPutIfAbsentGetDouble{ Params :  Returns : void} testMapPutIfAbsentGetBoolean{ Params :  Returns : void} testMapPutIfAbsentGetString{ Params :  Returns : void} testMapPutIfAbsentGetJsonObject{ Params :  Returns : void} testMapPutIfAbsentGetJsonArray{ Params :  Returns : void} testMapPutIfAbsentGetSerializableObject{ Params :  Returns : void} testMapPutIfAbsentGetClusterSerializableObject{ Params :  Returns : void} testMapPutIfAbsentGetClusterSerializableImplObject{ Params :  Returns : void} testMapPutIfAbsentTtl{ Params :  Returns : void} testMapPutIfAbsentTtlWithExistingNotGettingDeleted{ Params :  Returns : void} testMapRemoveByte{ Params :  Returns : void} testMapRemoveShort{ Params :  Returns : void} testMapRemoveInt{ Params :  Returns : void} testMapRemoveLong{ Params :  Returns : void} testMapRemoveChar{ Params :  Returns : void} testMapRemoveFloat{ Params :  Returns : void} testMapRemoveBuffer{ Params :  Returns : void} testMapRemoveDouble{ Params :  Returns : void} testMapRemoveBoolean{ Params :  Returns : void} testMapRemoveString{ Params :  Returns : void} testMapRemoveJsonObject{ Params :  Returns : void} testMapRemoveJsonArray{ Params :  Returns : void} testMapRemoveSerializableObject{ Params :  Returns : void} testMapRemoveClusterSerializableObject{ Params :  Returns : void} testMapRemoveClusterSerializableImplObject{ Params :  Returns : void} testMapRemoveIfPresentByte{ Params :  Returns : void} testMapRemoveIfPresentShort{ Params :  Returns : void} testMapRemoveIfPresentInt{ Params :  Returns : void} testMapRemoveIfPresentLong{ Params :  Returns : void} testMapRemoveIfPresentChar{ Params :  Returns : void} testMapRemoveIfPresentFloat{ Params :  Returns : void} testMapRemoveIfPresentBuffer{ Params :  Returns : void} testMapRemoveIfPresentDouble{ Params :  Returns : void} testMapRemoveIfPresentBoolean{ Params :  Returns : void} testMapRemoveIfPresentString{ Params :  Returns : void} testMapRemoveIfPresentJsonObject{ Params :  Returns : void} testMapRemoveIfPresentJsonArray{ Params :  Returns : void} testMapRemoveIfPresentSerializableObject{ Params :  Returns : void} testMapRemoveIfPresentClusterSerializableObject{ Params :  Returns : void} testMapRemoveIfPresentClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceByte{ Params :  Returns : void} testMapReplaceShort{ Params :  Returns : void} testMapReplaceInt{ Params :  Returns : void} testMapReplaceLong{ Params :  Returns : void} testMapReplaceChar{ Params :  Returns : void} testMapReplaceFloat{ Params :  Returns : void} testMapReplaceBuffer{ Params :  Returns : void} testMapReplaceDouble{ Params :  Returns : void} testMapReplaceBoolean{ Params :  Returns : void} testMapReplaceString{ Params :  Returns : void} testMapReplaceJsonObject{ Params :  Returns : void} testMapReplaceJsonArray{ Params :  Returns : void} testMapReplaceSerializableObject{ Params :  Returns : void} testMapReplaceClusterSerializableObject{ Params :  Returns : void} testMapReplaceClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceTtl{ Params :  Returns : void} testMapReplaceTtlWithPreviousValue{ Params :  Returns : void} testMapReplaceIfPresentByte{ Params :  Returns : void} testMapReplaceIfPresentShort{ Params :  Returns : void} testMapReplaceIfPresentInt{ Params :  Returns : void} testMapReplaceIfPresentLong{ Params :  Returns : void} testMapReplaceIfPresentChar{ Params :  Returns : void} testMapReplaceIfPresentFloat{ Params :  Returns : void} testMapReplaceIfPresentBuffer{ Params :  Returns : void} testMapReplaceIfPresentDouble{ Params :  Returns : void} testMapReplaceIfPresentBoolean{ Params :  Returns : void} testMapReplaceIfPresentString{ Params :  Returns : void} testMapReplaceIfPresentJsonObject{ Params :  Returns : void} testMapReplaceIfPresentJsonArray{ Params :  Returns : void} testMapReplaceIfPresentSerializableObject{ Params :  Returns : void} testMapReplaceIfPresentClusterSerializableObject{ Params :  Returns : void} testMapReplaceIfPresentClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceIfPresentTtl{ Params :  Returns : void} testMapReplaceIfPresentTtlWhenNotPresent{ Params :  Returns : void} testGetMapWithNullName{ Params :  Returns : void} testPutNullKey{ Params :  Returns : void} testPutNullValue{ Params :  Returns : void} testPutInvalidKey{ Params :  Returns : void} testPutInvalidValue{ Params :  Returns : void} testPutIfAbsentInvalidKey{ Params :  Returns : void} testPutIfAbsentInvalidValue{ Params :  Returns : void} testMultipleMaps{ Params :  Returns : void} testClear{ Params :  Returns : void} testSize{ Params :  Returns : void} testKeys{ Params :  Returns : void} testValues{ Params :  Returns : void} testEntries{ Params :  Returns : void} genJsonToBuffer{ Params : int Returns : Map<JsonObject,Buffer>} loadData{ Params : Map<JsonObject,Buffer>,BiConsumer<Vertx,AsyncMap<JsonObject,Buffer>> Returns : void} testMapPutGet{ Params : K,V Returns : void} testMapPutIfAbsentGet{ Params : K,V Returns : void} testMapRemove{ Params : K,V Returns : void} testMapRemoveIfPresent{ Params : K,K,V,V Returns : void} testMapReplace{ Params : K,V,V Returns : void} testMapReplaceIfPresent{ Params : K,V,V Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} ,equals hashCode equals hashCode writeToBuffer readFromBuffer equals hashCode writeToBuffer readFromBuffer ,,,getVertx ,,,,,JsonObject JsonObject JsonArray JsonArray SomeSerializableObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject JsonObject JsonObject JsonArray JsonArray SomeSerializableObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject JsonObject JsonObject JsonArray JsonArray SomeSerializableObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject JsonObject JsonObject JsonObject JsonObject JsonArray JsonArray JsonArray JsonArray SomeSerializableObject SomeSerializableObject SomeSerializableObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject JsonObject JsonObject JsonObject JsonArray JsonArray JsonArray SomeSerializableObject SomeSerializableObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject JsonObject JsonObject JsonObject JsonArray JsonArray JsonArray SomeSerializableObject SomeSerializableObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject SomeClusterSerializableImplObject SomeObject SomeObject SomeObject SomeObject HashMap JsonObject ArrayList Object Object ,: 
vert.x-master,io.vertx.core.shareddata,SomeObject,3,1,0,1,1,false,VertxTestBase ,0 ,SomeObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject ,,getVertx{ Params :  Returns : Vertx} testMapPutGetByte{ Params :  Returns : void} testMapPutGetShort{ Params :  Returns : void} testMapPutGetInt{ Params :  Returns : void} testMapPutGetLong{ Params :  Returns : void} testMapPutGetChar{ Params :  Returns : void} testMapPutGetFloat{ Params :  Returns : void} testMapPutGetBuffer{ Params :  Returns : void} testMapPutGetDouble{ Params :  Returns : void} testMapPutGetBoolean{ Params :  Returns : void} testMapPutGetString{ Params :  Returns : void} testMapPutGetJsonObject{ Params :  Returns : void} testMapPutGetJsonArray{ Params :  Returns : void} testMapPutGetSerializableObject{ Params :  Returns : void} testMapPutGetClusterSerializableObject{ Params :  Returns : void} testMapPutGetClusterSerializableImplObject{ Params :  Returns : void} testMapPutTtl{ Params :  Returns : void} assertWaitUntilMapContains{ Params : SharedData,String,String,long,Function<String,Boolean> Returns : Future<Void>} assertWaitUntil{ Params : AsyncMap<String,String>,String,long,Function<String,Boolean> Returns : Future<Void>} assertWaitUntil{ Params : AsyncMap<String,String>,String,long,Function<String,Boolean>,Promise<Void> Returns : void} testMapPutTtlThenPut{ Params :  Returns : void} testMapPutThenPutTtl{ Params :  Returns : void} testMapPutIfAbsentGetByte{ Params :  Returns : void} testMapPutIfAbsentGetShort{ Params :  Returns : void} testMapPutIfAbsentGetInt{ Params :  Returns : void} testMapPutIfAbsentGetLong{ Params :  Returns : void} testMapPutIfAbsentGetChar{ Params :  Returns : void} testMapPutIfAbsentGetFloat{ Params :  Returns : void} testMapPutIfAbsentGetBuffer{ Params :  Returns : void} testMapPutIfAbsentGetDouble{ Params :  Returns : void} testMapPutIfAbsentGetBoolean{ Params :  Returns : void} testMapPutIfAbsentGetString{ Params :  Returns : void} testMapPutIfAbsentGetJsonObject{ Params :  Returns : void} testMapPutIfAbsentGetJsonArray{ Params :  Returns : void} testMapPutIfAbsentGetSerializableObject{ Params :  Returns : void} testMapPutIfAbsentGetClusterSerializableObject{ Params :  Returns : void} testMapPutIfAbsentGetClusterSerializableImplObject{ Params :  Returns : void} testMapPutIfAbsentTtl{ Params :  Returns : void} testMapPutIfAbsentTtlWithExistingNotGettingDeleted{ Params :  Returns : void} testMapRemoveByte{ Params :  Returns : void} testMapRemoveShort{ Params :  Returns : void} testMapRemoveInt{ Params :  Returns : void} testMapRemoveLong{ Params :  Returns : void} testMapRemoveChar{ Params :  Returns : void} testMapRemoveFloat{ Params :  Returns : void} testMapRemoveBuffer{ Params :  Returns : void} testMapRemoveDouble{ Params :  Returns : void} testMapRemoveBoolean{ Params :  Returns : void} testMapRemoveString{ Params :  Returns : void} testMapRemoveJsonObject{ Params :  Returns : void} testMapRemoveJsonArray{ Params :  Returns : void} testMapRemoveSerializableObject{ Params :  Returns : void} testMapRemoveClusterSerializableObject{ Params :  Returns : void} testMapRemoveClusterSerializableImplObject{ Params :  Returns : void} testMapRemoveIfPresentByte{ Params :  Returns : void} testMapRemoveIfPresentShort{ Params :  Returns : void} testMapRemoveIfPresentInt{ Params :  Returns : void} testMapRemoveIfPresentLong{ Params :  Returns : void} testMapRemoveIfPresentChar{ Params :  Returns : void} testMapRemoveIfPresentFloat{ Params :  Returns : void} testMapRemoveIfPresentBuffer{ Params :  Returns : void} testMapRemoveIfPresentDouble{ Params :  Returns : void} testMapRemoveIfPresentBoolean{ Params :  Returns : void} testMapRemoveIfPresentString{ Params :  Returns : void} testMapRemoveIfPresentJsonObject{ Params :  Returns : void} testMapRemoveIfPresentJsonArray{ Params :  Returns : void} testMapRemoveIfPresentSerializableObject{ Params :  Returns : void} testMapRemoveIfPresentClusterSerializableObject{ Params :  Returns : void} testMapRemoveIfPresentClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceByte{ Params :  Returns : void} testMapReplaceShort{ Params :  Returns : void} testMapReplaceInt{ Params :  Returns : void} testMapReplaceLong{ Params :  Returns : void} testMapReplaceChar{ Params :  Returns : void} testMapReplaceFloat{ Params :  Returns : void} testMapReplaceBuffer{ Params :  Returns : void} testMapReplaceDouble{ Params :  Returns : void} testMapReplaceBoolean{ Params :  Returns : void} testMapReplaceString{ Params :  Returns : void} testMapReplaceJsonObject{ Params :  Returns : void} testMapReplaceJsonArray{ Params :  Returns : void} testMapReplaceSerializableObject{ Params :  Returns : void} testMapReplaceClusterSerializableObject{ Params :  Returns : void} testMapReplaceClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceTtl{ Params :  Returns : void} testMapReplaceTtlWithPreviousValue{ Params :  Returns : void} testMapReplaceIfPresentByte{ Params :  Returns : void} testMapReplaceIfPresentShort{ Params :  Returns : void} testMapReplaceIfPresentInt{ Params :  Returns : void} testMapReplaceIfPresentLong{ Params :  Returns : void} testMapReplaceIfPresentChar{ Params :  Returns : void} testMapReplaceIfPresentFloat{ Params :  Returns : void} testMapReplaceIfPresentBuffer{ Params :  Returns : void} testMapReplaceIfPresentDouble{ Params :  Returns : void} testMapReplaceIfPresentBoolean{ Params :  Returns : void} testMapReplaceIfPresentString{ Params :  Returns : void} testMapReplaceIfPresentJsonObject{ Params :  Returns : void} testMapReplaceIfPresentJsonArray{ Params :  Returns : void} testMapReplaceIfPresentSerializableObject{ Params :  Returns : void} testMapReplaceIfPresentClusterSerializableObject{ Params :  Returns : void} testMapReplaceIfPresentClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceIfPresentTtl{ Params :  Returns : void} testMapReplaceIfPresentTtlWhenNotPresent{ Params :  Returns : void} testGetMapWithNullName{ Params :  Returns : void} testPutNullKey{ Params :  Returns : void} testPutNullValue{ Params :  Returns : void} testPutInvalidKey{ Params :  Returns : void} testPutInvalidValue{ Params :  Returns : void} testPutIfAbsentInvalidKey{ Params :  Returns : void} testPutIfAbsentInvalidValue{ Params :  Returns : void} testMultipleMaps{ Params :  Returns : void} testClear{ Params :  Returns : void} testSize{ Params :  Returns : void} testKeys{ Params :  Returns : void} testValues{ Params :  Returns : void} testEntries{ Params :  Returns : void} genJsonToBuffer{ Params : int Returns : Map<JsonObject,Buffer>} loadData{ Params : Map<JsonObject,Buffer>,BiConsumer<Vertx,AsyncMap<JsonObject,Buffer>> Returns : void} testMapPutGet{ Params : K,V Returns : void} testMapPutIfAbsentGet{ Params : K,V Returns : void} testMapRemove{ Params : K,V Returns : void} testMapRemoveIfPresent{ Params : K,K,V,V Returns : void} testMapReplace{ Params : K,V,V Returns : void} testMapReplaceIfPresent{ Params : K,V,V Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} ,equals hashCode equals hashCode writeToBuffer readFromBuffer equals hashCode writeToBuffer readFromBuffer ,,,getVertx ,,,,,,null
vert.x-master,io.vertx.core.shareddata,SomeSerializableObject,3,1,0,1,1,false,VertxTestBase ,0 ,SomeObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject ,str: String ,getVertx{ Params :  Returns : Vertx} testMapPutGetByte{ Params :  Returns : void} testMapPutGetShort{ Params :  Returns : void} testMapPutGetInt{ Params :  Returns : void} testMapPutGetLong{ Params :  Returns : void} testMapPutGetChar{ Params :  Returns : void} testMapPutGetFloat{ Params :  Returns : void} testMapPutGetBuffer{ Params :  Returns : void} testMapPutGetDouble{ Params :  Returns : void} testMapPutGetBoolean{ Params :  Returns : void} testMapPutGetString{ Params :  Returns : void} testMapPutGetJsonObject{ Params :  Returns : void} testMapPutGetJsonArray{ Params :  Returns : void} testMapPutGetSerializableObject{ Params :  Returns : void} testMapPutGetClusterSerializableObject{ Params :  Returns : void} testMapPutGetClusterSerializableImplObject{ Params :  Returns : void} testMapPutTtl{ Params :  Returns : void} assertWaitUntilMapContains{ Params : SharedData,String,String,long,Function<String,Boolean> Returns : Future<Void>} assertWaitUntil{ Params : AsyncMap<String,String>,String,long,Function<String,Boolean> Returns : Future<Void>} assertWaitUntil{ Params : AsyncMap<String,String>,String,long,Function<String,Boolean>,Promise<Void> Returns : void} testMapPutTtlThenPut{ Params :  Returns : void} testMapPutThenPutTtl{ Params :  Returns : void} testMapPutIfAbsentGetByte{ Params :  Returns : void} testMapPutIfAbsentGetShort{ Params :  Returns : void} testMapPutIfAbsentGetInt{ Params :  Returns : void} testMapPutIfAbsentGetLong{ Params :  Returns : void} testMapPutIfAbsentGetChar{ Params :  Returns : void} testMapPutIfAbsentGetFloat{ Params :  Returns : void} testMapPutIfAbsentGetBuffer{ Params :  Returns : void} testMapPutIfAbsentGetDouble{ Params :  Returns : void} testMapPutIfAbsentGetBoolean{ Params :  Returns : void} testMapPutIfAbsentGetString{ Params :  Returns : void} testMapPutIfAbsentGetJsonObject{ Params :  Returns : void} testMapPutIfAbsentGetJsonArray{ Params :  Returns : void} testMapPutIfAbsentGetSerializableObject{ Params :  Returns : void} testMapPutIfAbsentGetClusterSerializableObject{ Params :  Returns : void} testMapPutIfAbsentGetClusterSerializableImplObject{ Params :  Returns : void} testMapPutIfAbsentTtl{ Params :  Returns : void} testMapPutIfAbsentTtlWithExistingNotGettingDeleted{ Params :  Returns : void} testMapRemoveByte{ Params :  Returns : void} testMapRemoveShort{ Params :  Returns : void} testMapRemoveInt{ Params :  Returns : void} testMapRemoveLong{ Params :  Returns : void} testMapRemoveChar{ Params :  Returns : void} testMapRemoveFloat{ Params :  Returns : void} testMapRemoveBuffer{ Params :  Returns : void} testMapRemoveDouble{ Params :  Returns : void} testMapRemoveBoolean{ Params :  Returns : void} testMapRemoveString{ Params :  Returns : void} testMapRemoveJsonObject{ Params :  Returns : void} testMapRemoveJsonArray{ Params :  Returns : void} testMapRemoveSerializableObject{ Params :  Returns : void} testMapRemoveClusterSerializableObject{ Params :  Returns : void} testMapRemoveClusterSerializableImplObject{ Params :  Returns : void} testMapRemoveIfPresentByte{ Params :  Returns : void} testMapRemoveIfPresentShort{ Params :  Returns : void} testMapRemoveIfPresentInt{ Params :  Returns : void} testMapRemoveIfPresentLong{ Params :  Returns : void} testMapRemoveIfPresentChar{ Params :  Returns : void} testMapRemoveIfPresentFloat{ Params :  Returns : void} testMapRemoveIfPresentBuffer{ Params :  Returns : void} testMapRemoveIfPresentDouble{ Params :  Returns : void} testMapRemoveIfPresentBoolean{ Params :  Returns : void} testMapRemoveIfPresentString{ Params :  Returns : void} testMapRemoveIfPresentJsonObject{ Params :  Returns : void} testMapRemoveIfPresentJsonArray{ Params :  Returns : void} testMapRemoveIfPresentSerializableObject{ Params :  Returns : void} testMapRemoveIfPresentClusterSerializableObject{ Params :  Returns : void} testMapRemoveIfPresentClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceByte{ Params :  Returns : void} testMapReplaceShort{ Params :  Returns : void} testMapReplaceInt{ Params :  Returns : void} testMapReplaceLong{ Params :  Returns : void} testMapReplaceChar{ Params :  Returns : void} testMapReplaceFloat{ Params :  Returns : void} testMapReplaceBuffer{ Params :  Returns : void} testMapReplaceDouble{ Params :  Returns : void} testMapReplaceBoolean{ Params :  Returns : void} testMapReplaceString{ Params :  Returns : void} testMapReplaceJsonObject{ Params :  Returns : void} testMapReplaceJsonArray{ Params :  Returns : void} testMapReplaceSerializableObject{ Params :  Returns : void} testMapReplaceClusterSerializableObject{ Params :  Returns : void} testMapReplaceClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceTtl{ Params :  Returns : void} testMapReplaceTtlWithPreviousValue{ Params :  Returns : void} testMapReplaceIfPresentByte{ Params :  Returns : void} testMapReplaceIfPresentShort{ Params :  Returns : void} testMapReplaceIfPresentInt{ Params :  Returns : void} testMapReplaceIfPresentLong{ Params :  Returns : void} testMapReplaceIfPresentChar{ Params :  Returns : void} testMapReplaceIfPresentFloat{ Params :  Returns : void} testMapReplaceIfPresentBuffer{ Params :  Returns : void} testMapReplaceIfPresentDouble{ Params :  Returns : void} testMapReplaceIfPresentBoolean{ Params :  Returns : void} testMapReplaceIfPresentString{ Params :  Returns : void} testMapReplaceIfPresentJsonObject{ Params :  Returns : void} testMapReplaceIfPresentJsonArray{ Params :  Returns : void} testMapReplaceIfPresentSerializableObject{ Params :  Returns : void} testMapReplaceIfPresentClusterSerializableObject{ Params :  Returns : void} testMapReplaceIfPresentClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceIfPresentTtl{ Params :  Returns : void} testMapReplaceIfPresentTtlWhenNotPresent{ Params :  Returns : void} testGetMapWithNullName{ Params :  Returns : void} testPutNullKey{ Params :  Returns : void} testPutNullValue{ Params :  Returns : void} testPutInvalidKey{ Params :  Returns : void} testPutInvalidValue{ Params :  Returns : void} testPutIfAbsentInvalidKey{ Params :  Returns : void} testPutIfAbsentInvalidValue{ Params :  Returns : void} testMultipleMaps{ Params :  Returns : void} testClear{ Params :  Returns : void} testSize{ Params :  Returns : void} testKeys{ Params :  Returns : void} testValues{ Params :  Returns : void} testEntries{ Params :  Returns : void} genJsonToBuffer{ Params : int Returns : Map<JsonObject,Buffer>} loadData{ Params : Map<JsonObject,Buffer>,BiConsumer<Vertx,AsyncMap<JsonObject,Buffer>> Returns : void} testMapPutGet{ Params : K,V Returns : void} testMapPutIfAbsentGet{ Params : K,V Returns : void} testMapRemove{ Params : K,V Returns : void} testMapRemoveIfPresent{ Params : K,K,V,V Returns : void} testMapReplace{ Params : K,V,V Returns : void} testMapReplaceIfPresent{ Params : K,V,V Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} ,equals hashCode equals hashCode writeToBuffer readFromBuffer equals hashCode writeToBuffer readFromBuffer ,,,getVertx ,Serializable ,String ,,String ,,str: 
vert.x-master,io.vertx.core.shareddata,SomeClusterSerializableObject,3,1,0,1,1,false,VertxTestBase ,0 ,SomeObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject ,str: String object: Object ,getVertx{ Params :  Returns : Vertx} testMapPutGetByte{ Params :  Returns : void} testMapPutGetShort{ Params :  Returns : void} testMapPutGetInt{ Params :  Returns : void} testMapPutGetLong{ Params :  Returns : void} testMapPutGetChar{ Params :  Returns : void} testMapPutGetFloat{ Params :  Returns : void} testMapPutGetBuffer{ Params :  Returns : void} testMapPutGetDouble{ Params :  Returns : void} testMapPutGetBoolean{ Params :  Returns : void} testMapPutGetString{ Params :  Returns : void} testMapPutGetJsonObject{ Params :  Returns : void} testMapPutGetJsonArray{ Params :  Returns : void} testMapPutGetSerializableObject{ Params :  Returns : void} testMapPutGetClusterSerializableObject{ Params :  Returns : void} testMapPutGetClusterSerializableImplObject{ Params :  Returns : void} testMapPutTtl{ Params :  Returns : void} assertWaitUntilMapContains{ Params : SharedData,String,String,long,Function<String,Boolean> Returns : Future<Void>} assertWaitUntil{ Params : AsyncMap<String,String>,String,long,Function<String,Boolean> Returns : Future<Void>} assertWaitUntil{ Params : AsyncMap<String,String>,String,long,Function<String,Boolean>,Promise<Void> Returns : void} testMapPutTtlThenPut{ Params :  Returns : void} testMapPutThenPutTtl{ Params :  Returns : void} testMapPutIfAbsentGetByte{ Params :  Returns : void} testMapPutIfAbsentGetShort{ Params :  Returns : void} testMapPutIfAbsentGetInt{ Params :  Returns : void} testMapPutIfAbsentGetLong{ Params :  Returns : void} testMapPutIfAbsentGetChar{ Params :  Returns : void} testMapPutIfAbsentGetFloat{ Params :  Returns : void} testMapPutIfAbsentGetBuffer{ Params :  Returns : void} testMapPutIfAbsentGetDouble{ Params :  Returns : void} testMapPutIfAbsentGetBoolean{ Params :  Returns : void} testMapPutIfAbsentGetString{ Params :  Returns : void} testMapPutIfAbsentGetJsonObject{ Params :  Returns : void} testMapPutIfAbsentGetJsonArray{ Params :  Returns : void} testMapPutIfAbsentGetSerializableObject{ Params :  Returns : void} testMapPutIfAbsentGetClusterSerializableObject{ Params :  Returns : void} testMapPutIfAbsentGetClusterSerializableImplObject{ Params :  Returns : void} testMapPutIfAbsentTtl{ Params :  Returns : void} testMapPutIfAbsentTtlWithExistingNotGettingDeleted{ Params :  Returns : void} testMapRemoveByte{ Params :  Returns : void} testMapRemoveShort{ Params :  Returns : void} testMapRemoveInt{ Params :  Returns : void} testMapRemoveLong{ Params :  Returns : void} testMapRemoveChar{ Params :  Returns : void} testMapRemoveFloat{ Params :  Returns : void} testMapRemoveBuffer{ Params :  Returns : void} testMapRemoveDouble{ Params :  Returns : void} testMapRemoveBoolean{ Params :  Returns : void} testMapRemoveString{ Params :  Returns : void} testMapRemoveJsonObject{ Params :  Returns : void} testMapRemoveJsonArray{ Params :  Returns : void} testMapRemoveSerializableObject{ Params :  Returns : void} testMapRemoveClusterSerializableObject{ Params :  Returns : void} testMapRemoveClusterSerializableImplObject{ Params :  Returns : void} testMapRemoveIfPresentByte{ Params :  Returns : void} testMapRemoveIfPresentShort{ Params :  Returns : void} testMapRemoveIfPresentInt{ Params :  Returns : void} testMapRemoveIfPresentLong{ Params :  Returns : void} testMapRemoveIfPresentChar{ Params :  Returns : void} testMapRemoveIfPresentFloat{ Params :  Returns : void} testMapRemoveIfPresentBuffer{ Params :  Returns : void} testMapRemoveIfPresentDouble{ Params :  Returns : void} testMapRemoveIfPresentBoolean{ Params :  Returns : void} testMapRemoveIfPresentString{ Params :  Returns : void} testMapRemoveIfPresentJsonObject{ Params :  Returns : void} testMapRemoveIfPresentJsonArray{ Params :  Returns : void} testMapRemoveIfPresentSerializableObject{ Params :  Returns : void} testMapRemoveIfPresentClusterSerializableObject{ Params :  Returns : void} testMapRemoveIfPresentClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceByte{ Params :  Returns : void} testMapReplaceShort{ Params :  Returns : void} testMapReplaceInt{ Params :  Returns : void} testMapReplaceLong{ Params :  Returns : void} testMapReplaceChar{ Params :  Returns : void} testMapReplaceFloat{ Params :  Returns : void} testMapReplaceBuffer{ Params :  Returns : void} testMapReplaceDouble{ Params :  Returns : void} testMapReplaceBoolean{ Params :  Returns : void} testMapReplaceString{ Params :  Returns : void} testMapReplaceJsonObject{ Params :  Returns : void} testMapReplaceJsonArray{ Params :  Returns : void} testMapReplaceSerializableObject{ Params :  Returns : void} testMapReplaceClusterSerializableObject{ Params :  Returns : void} testMapReplaceClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceTtl{ Params :  Returns : void} testMapReplaceTtlWithPreviousValue{ Params :  Returns : void} testMapReplaceIfPresentByte{ Params :  Returns : void} testMapReplaceIfPresentShort{ Params :  Returns : void} testMapReplaceIfPresentInt{ Params :  Returns : void} testMapReplaceIfPresentLong{ Params :  Returns : void} testMapReplaceIfPresentChar{ Params :  Returns : void} testMapReplaceIfPresentFloat{ Params :  Returns : void} testMapReplaceIfPresentBuffer{ Params :  Returns : void} testMapReplaceIfPresentDouble{ Params :  Returns : void} testMapReplaceIfPresentBoolean{ Params :  Returns : void} testMapReplaceIfPresentString{ Params :  Returns : void} testMapReplaceIfPresentJsonObject{ Params :  Returns : void} testMapReplaceIfPresentJsonArray{ Params :  Returns : void} testMapReplaceIfPresentSerializableObject{ Params :  Returns : void} testMapReplaceIfPresentClusterSerializableObject{ Params :  Returns : void} testMapReplaceIfPresentClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceIfPresentTtl{ Params :  Returns : void} testMapReplaceIfPresentTtlWhenNotPresent{ Params :  Returns : void} testGetMapWithNullName{ Params :  Returns : void} testPutNullKey{ Params :  Returns : void} testPutNullValue{ Params :  Returns : void} testPutInvalidKey{ Params :  Returns : void} testPutInvalidValue{ Params :  Returns : void} testPutIfAbsentInvalidKey{ Params :  Returns : void} testPutIfAbsentInvalidValue{ Params :  Returns : void} testMultipleMaps{ Params :  Returns : void} testClear{ Params :  Returns : void} testSize{ Params :  Returns : void} testKeys{ Params :  Returns : void} testValues{ Params :  Returns : void} testEntries{ Params :  Returns : void} genJsonToBuffer{ Params : int Returns : Map<JsonObject,Buffer>} loadData{ Params : Map<JsonObject,Buffer>,BiConsumer<Vertx,AsyncMap<JsonObject,Buffer>> Returns : void} testMapPutGet{ Params : K,V Returns : void} testMapPutIfAbsentGet{ Params : K,V Returns : void} testMapRemove{ Params : K,V Returns : void} testMapRemoveIfPresent{ Params : K,K,V,V Returns : void} testMapReplace{ Params : K,V,V Returns : void} testMapReplaceIfPresent{ Params : K,V,V Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} ,equals hashCode equals hashCode writeToBuffer readFromBuffer equals hashCode writeToBuffer readFromBuffer ,,,getVertx ,ClusterSerializable ,Object ,,Object ,Object ,buffer: , pos + 4, pos + 4 + length
vert.x-master,io.vertx.core.shareddata,SomeClusterSerializableImplObject,3,1,0,1,1,false,VertxTestBase ,0 ,SomeObject SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject ,str: String object: Object ,getVertx{ Params :  Returns : Vertx} testMapPutGetByte{ Params :  Returns : void} testMapPutGetShort{ Params :  Returns : void} testMapPutGetInt{ Params :  Returns : void} testMapPutGetLong{ Params :  Returns : void} testMapPutGetChar{ Params :  Returns : void} testMapPutGetFloat{ Params :  Returns : void} testMapPutGetBuffer{ Params :  Returns : void} testMapPutGetDouble{ Params :  Returns : void} testMapPutGetBoolean{ Params :  Returns : void} testMapPutGetString{ Params :  Returns : void} testMapPutGetJsonObject{ Params :  Returns : void} testMapPutGetJsonArray{ Params :  Returns : void} testMapPutGetSerializableObject{ Params :  Returns : void} testMapPutGetClusterSerializableObject{ Params :  Returns : void} testMapPutGetClusterSerializableImplObject{ Params :  Returns : void} testMapPutTtl{ Params :  Returns : void} assertWaitUntilMapContains{ Params : SharedData,String,String,long,Function<String,Boolean> Returns : Future<Void>} assertWaitUntil{ Params : AsyncMap<String,String>,String,long,Function<String,Boolean> Returns : Future<Void>} assertWaitUntil{ Params : AsyncMap<String,String>,String,long,Function<String,Boolean>,Promise<Void> Returns : void} testMapPutTtlThenPut{ Params :  Returns : void} testMapPutThenPutTtl{ Params :  Returns : void} testMapPutIfAbsentGetByte{ Params :  Returns : void} testMapPutIfAbsentGetShort{ Params :  Returns : void} testMapPutIfAbsentGetInt{ Params :  Returns : void} testMapPutIfAbsentGetLong{ Params :  Returns : void} testMapPutIfAbsentGetChar{ Params :  Returns : void} testMapPutIfAbsentGetFloat{ Params :  Returns : void} testMapPutIfAbsentGetBuffer{ Params :  Returns : void} testMapPutIfAbsentGetDouble{ Params :  Returns : void} testMapPutIfAbsentGetBoolean{ Params :  Returns : void} testMapPutIfAbsentGetString{ Params :  Returns : void} testMapPutIfAbsentGetJsonObject{ Params :  Returns : void} testMapPutIfAbsentGetJsonArray{ Params :  Returns : void} testMapPutIfAbsentGetSerializableObject{ Params :  Returns : void} testMapPutIfAbsentGetClusterSerializableObject{ Params :  Returns : void} testMapPutIfAbsentGetClusterSerializableImplObject{ Params :  Returns : void} testMapPutIfAbsentTtl{ Params :  Returns : void} testMapPutIfAbsentTtlWithExistingNotGettingDeleted{ Params :  Returns : void} testMapRemoveByte{ Params :  Returns : void} testMapRemoveShort{ Params :  Returns : void} testMapRemoveInt{ Params :  Returns : void} testMapRemoveLong{ Params :  Returns : void} testMapRemoveChar{ Params :  Returns : void} testMapRemoveFloat{ Params :  Returns : void} testMapRemoveBuffer{ Params :  Returns : void} testMapRemoveDouble{ Params :  Returns : void} testMapRemoveBoolean{ Params :  Returns : void} testMapRemoveString{ Params :  Returns : void} testMapRemoveJsonObject{ Params :  Returns : void} testMapRemoveJsonArray{ Params :  Returns : void} testMapRemoveSerializableObject{ Params :  Returns : void} testMapRemoveClusterSerializableObject{ Params :  Returns : void} testMapRemoveClusterSerializableImplObject{ Params :  Returns : void} testMapRemoveIfPresentByte{ Params :  Returns : void} testMapRemoveIfPresentShort{ Params :  Returns : void} testMapRemoveIfPresentInt{ Params :  Returns : void} testMapRemoveIfPresentLong{ Params :  Returns : void} testMapRemoveIfPresentChar{ Params :  Returns : void} testMapRemoveIfPresentFloat{ Params :  Returns : void} testMapRemoveIfPresentBuffer{ Params :  Returns : void} testMapRemoveIfPresentDouble{ Params :  Returns : void} testMapRemoveIfPresentBoolean{ Params :  Returns : void} testMapRemoveIfPresentString{ Params :  Returns : void} testMapRemoveIfPresentJsonObject{ Params :  Returns : void} testMapRemoveIfPresentJsonArray{ Params :  Returns : void} testMapRemoveIfPresentSerializableObject{ Params :  Returns : void} testMapRemoveIfPresentClusterSerializableObject{ Params :  Returns : void} testMapRemoveIfPresentClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceByte{ Params :  Returns : void} testMapReplaceShort{ Params :  Returns : void} testMapReplaceInt{ Params :  Returns : void} testMapReplaceLong{ Params :  Returns : void} testMapReplaceChar{ Params :  Returns : void} testMapReplaceFloat{ Params :  Returns : void} testMapReplaceBuffer{ Params :  Returns : void} testMapReplaceDouble{ Params :  Returns : void} testMapReplaceBoolean{ Params :  Returns : void} testMapReplaceString{ Params :  Returns : void} testMapReplaceJsonObject{ Params :  Returns : void} testMapReplaceJsonArray{ Params :  Returns : void} testMapReplaceSerializableObject{ Params :  Returns : void} testMapReplaceClusterSerializableObject{ Params :  Returns : void} testMapReplaceClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceTtl{ Params :  Returns : void} testMapReplaceTtlWithPreviousValue{ Params :  Returns : void} testMapReplaceIfPresentByte{ Params :  Returns : void} testMapReplaceIfPresentShort{ Params :  Returns : void} testMapReplaceIfPresentInt{ Params :  Returns : void} testMapReplaceIfPresentLong{ Params :  Returns : void} testMapReplaceIfPresentChar{ Params :  Returns : void} testMapReplaceIfPresentFloat{ Params :  Returns : void} testMapReplaceIfPresentBuffer{ Params :  Returns : void} testMapReplaceIfPresentDouble{ Params :  Returns : void} testMapReplaceIfPresentBoolean{ Params :  Returns : void} testMapReplaceIfPresentString{ Params :  Returns : void} testMapReplaceIfPresentJsonObject{ Params :  Returns : void} testMapReplaceIfPresentJsonArray{ Params :  Returns : void} testMapReplaceIfPresentSerializableObject{ Params :  Returns : void} testMapReplaceIfPresentClusterSerializableObject{ Params :  Returns : void} testMapReplaceIfPresentClusterSerializableImplObject{ Params :  Returns : void} testMapReplaceIfPresentTtl{ Params :  Returns : void} testMapReplaceIfPresentTtlWhenNotPresent{ Params :  Returns : void} testGetMapWithNullName{ Params :  Returns : void} testPutNullKey{ Params :  Returns : void} testPutNullValue{ Params :  Returns : void} testPutInvalidKey{ Params :  Returns : void} testPutInvalidValue{ Params :  Returns : void} testPutIfAbsentInvalidKey{ Params :  Returns : void} testPutIfAbsentInvalidValue{ Params :  Returns : void} testMultipleMaps{ Params :  Returns : void} testClear{ Params :  Returns : void} testSize{ Params :  Returns : void} testKeys{ Params :  Returns : void} testValues{ Params :  Returns : void} testEntries{ Params :  Returns : void} genJsonToBuffer{ Params : int Returns : Map<JsonObject,Buffer>} loadData{ Params : Map<JsonObject,Buffer>,BiConsumer<Vertx,AsyncMap<JsonObject,Buffer>> Returns : void} testMapPutGet{ Params : K,V Returns : void} testMapPutIfAbsentGet{ Params : K,V Returns : void} testMapRemove{ Params : K,V Returns : void} testMapRemoveIfPresent{ Params : K,K,V,V Returns : void} testMapReplace{ Params : K,V,V Returns : void} testMapReplaceIfPresent{ Params : K,V,V Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} writeToBuffer{ Params : Buffer Returns : void} readFromBuffer{ Params : int,Buffer Returns : int} ,equals hashCode equals hashCode writeToBuffer readFromBuffer equals hashCode writeToBuffer readFromBuffer ,,,getVertx ,ClusterSerializable ,Object ,,Object ,Object ,buffer: , pos + 4, pos + 4 + length
vert.x-master,io.vertx.core.shareddata,ClusteredAsynchronousLockTest,1,1,0,0,0,false,AsynchronousLockTest ,0 ,0 ,numNodes: int pos: AtomicInteger ,getClusterManager{ Params :  Returns : ClusterManager} setUp{ Params :  Returns : void} getVertx{ Params :  Returns : Vertx} mod{ Params : int,int Returns : int} testGetLocalLock{ Params :  Returns : void} testLockReleasedForClosedNode{ Params :  Returns : void} testLockReleasedForKilledNode{ Params :  Returns : void} testLockReleased{ Params : Consumer<CountDownLatch> Returns : void} getLockTimeout{ Params :  Returns : long} ,getClusterManager getVertx ,,,,,,,,FakeClusterManager AtomicInteger AtomicInteger CountDownLatch CountDownLatch ,: 
vert.x-master,io.vertx.core.shareddata,ClusteredAsyncMapTest,1,1,0,0,0,false,AsyncMapTest ,0 ,0 ,pos: int ,getVertx{ Params :  Returns : Vertx} testGetLocalAsyncMap{ Params :  Returns : void} setUp{ Params :  Returns : void} getNumNodes{ Params :  Returns : int} getClusterManager{ Params :  Returns : ClusterManager} ,getVertx getClusterManager ,,,,,,,,FakeClusterManager ,: 
vert.x-master,io.vertx.core.shareddata,ClusteredSharedCounterTest,1,1,0,0,0,false,SharedCounterTest ,0 ,0 ,numNodes: int pos: int ,getClusterManager{ Params :  Returns : ClusterManager} setUp{ Params :  Returns : void} testGetLocalCounter{ Params :  Returns : void} getVertx{ Params :  Returns : Vertx} ,getClusterManager getVertx ,,,,,,,,FakeClusterManager ,: 
vert.x-master,io.vertx.core.shareddata,LocalAsyncMapTest,1,1,0,0,0,false,AsyncMapTest ,0 ,0 ,,getVertx{ Params :  Returns : Vertx} testMapPutTtl{ Params :  Returns : void} testMapPutTtlThenPut{ Params :  Returns : void} testMapPutIfAbsentTtl{ Params :  Returns : void} ,getVertx testMapPutTtl testMapPutTtlThenPut testMapPutIfAbsentTtl ,,,,,,,,,super: 
vert.x-master,io.vertx.core.shareddata,LocalSharedDataTest,1,1,0,0,0,false,VertxTestBase ,0 ,ShareableObject SomeOtherClass ,sharedData: SharedData ,setUp{ Params :  Returns : void} deleteElementOnComputeFunctionReturningNull{ Params :  Returns : void} testMap{ Params :  Returns : void} testLocalMaps{ Params :  Returns : void} testMapTypes{ Params :  Returns : void} testKeys{ Params :  Returns : void} testKeysCopied{ Params :  Returns : void} containsExact{ Params : Collection<JsonObject>,JsonObject Returns : boolean} testValues{ Params :  Returns : void} testValuesCopied{ Params :  Returns : void} testCopyOnGet{ Params :  Returns : void} testCopyOnPutIfAbsent{ Params :  Returns : void} testCopyOnRemove{ Params :  Returns : void} testMapOperationResult{ Params : BiFunction<LocalMap<String,ShareableObject>,String,ShareableObject> Returns : void} copy{ Params :  Returns : Shareable} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,copy equals hashCode ,,,,,SharedData ,,SharedData ,AtomicInteger HashMap Random Random Random Random Random Random Random SomeOtherClass JsonObject JsonArray Random Random SomeSerializableObject SomeClusterSerializableObject SomeClusterSerializableImplObject JsonObject JsonObject JsonObject JsonObject JsonObject JsonObject ShareableObject ShareableObject ShareableObject ,: , value, result
vert.x-master,io.vertx.core.shareddata,ShareableObject,3,2,0,1,0,false,VertxTestBase ,0 ,ShareableObject SomeOtherClass ,data: String ,setUp{ Params :  Returns : void} deleteElementOnComputeFunctionReturningNull{ Params :  Returns : void} testMap{ Params :  Returns : void} testLocalMaps{ Params :  Returns : void} testMapTypes{ Params :  Returns : void} testKeys{ Params :  Returns : void} testKeysCopied{ Params :  Returns : void} containsExact{ Params : Collection<JsonObject>,JsonObject Returns : boolean} testValues{ Params :  Returns : void} testValuesCopied{ Params :  Returns : void} testCopyOnGet{ Params :  Returns : void} testCopyOnPutIfAbsent{ Params :  Returns : void} testCopyOnRemove{ Params :  Returns : void} testMapOperationResult{ Params : BiFunction<LocalMap<String,ShareableObject>,String,ShareableObject> Returns : void} copy{ Params :  Returns : Shareable} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,copy equals hashCode ,,,,Shareable ,String ,,String ,ShareableObject ,data: 
vert.x-master,io.vertx.core.shareddata,SomeOtherClass,3,0,0,0,0,false,VertxTestBase ,0 ,ShareableObject SomeOtherClass ,,setUp{ Params :  Returns : void} deleteElementOnComputeFunctionReturningNull{ Params :  Returns : void} testMap{ Params :  Returns : void} testLocalMaps{ Params :  Returns : void} testMapTypes{ Params :  Returns : void} testKeys{ Params :  Returns : void} testKeysCopied{ Params :  Returns : void} containsExact{ Params : Collection<JsonObject>,JsonObject Returns : boolean} testValues{ Params :  Returns : void} testValuesCopied{ Params :  Returns : void} testCopyOnGet{ Params :  Returns : void} testCopyOnPutIfAbsent{ Params :  Returns : void} testCopyOnRemove{ Params :  Returns : void} testMapOperationResult{ Params : BiFunction<LocalMap<String,ShareableObject>,String,ShareableObject> Returns : void} copy{ Params :  Returns : Shareable} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,copy equals hashCode ,,,,,,,,,null
vert.x-master,io.vertx.core.shareddata,SharedCounterTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,getVertx{ Params :  Returns : Vertx} testIllegalArguments{ Params :  Returns : void} testGet{ Params :  Returns : void} testIncrementAndGet{ Params :  Returns : void} testGetAndIncrement{ Params :  Returns : void} testDecrementAndGet{ Params :  Returns : void} testAddAndGet{ Params :  Returns : void} getAndAdd{ Params :  Returns : void} testCompareAndSet{ Params :  Returns : void} testDifferentCounters{ Params :  Returns : void} ,,,,,,,,,,: 
vert.x-master,io.vertx.core,SharedServersConcurrencyTest,1,1,0,0,0,false,VertxTestBase ,0 ,ApiVerticle NetVerticle RestVerticle MonitorVerticle ,,testConcurrency{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} ,start start start start ,,,,,,,,MonitorVerticle RestVerticle ApiVerticle NetVerticle DeploymentOptions NetServerOptions HttpServerOptions HttpServerOptions ,: 
vert.x-master,io.vertx.core,ApiVerticle,3,2,0,1,0,false,VertxTestBase ,0 ,ApiVerticle NetVerticle RestVerticle MonitorVerticle ,,testConcurrency{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} ,start start start start ,,,,,,,,NetVerticle DeploymentOptions ,ar: 
vert.x-master,io.vertx.core,NetVerticle,3,2,0,1,0,false,VertxTestBase ,0 ,ApiVerticle NetVerticle RestVerticle MonitorVerticle ,,testConcurrency{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} ,start start start start ,,,,,,,,NetServerOptions ,ar: 
vert.x-master,io.vertx.core,RestVerticle,3,2,0,1,0,false,VertxTestBase ,0 ,ApiVerticle NetVerticle RestVerticle MonitorVerticle ,,testConcurrency{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} ,start start start start ,,,,,,,,HttpServerOptions ,ar: 
vert.x-master,io.vertx.core,MonitorVerticle,3,2,0,1,0,false,VertxTestBase ,0 ,ApiVerticle NetVerticle RestVerticle MonitorVerticle ,,testConcurrency{ Params :  Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} start{ Params : Promise<Void> Returns : void} ,start start start start ,,,,,,,,HttpServerOptions ,ar: 
vert.x-master,io.vertx.core.spi.cluster.impl.selector,SimpleRoundRobinSelectorTest,1,1,0,0,0,false,0 ,0 ,0 ,nodeIds: List<String> selector: SimpleRoundRobinSelector ,data{ Params :  Returns : Collection<Object[]>} testSelectForSend{ Params :  Returns : void} testSelectForPublish{ Params :  Returns : void} ,,data ,,,,SimpleRoundRobinSelector ,,SimpleRoundRobinSelector ,SimpleRoundRobinSelector HashMap ,list: , nodeIds
vert.x-master,io.vertx.core.spi.cluster.impl.selector,WeightedRoundRobinSelectorTest,1,1,0,0,0,false,0 ,0 ,0 ,weights: Map<String, Weight> totalWeight: int selector: WeightedRoundRobinSelector ,data{ Params :  Returns : Collection<Object[]>} testSelectForSend{ Params :  Returns : void} testSelectForPublish{ Params :  Returns : void} ,,data ,,,,WeightedRoundRobinSelector ,,WeightedRoundRobinSelector ,ArrayList HashMap Weight Weight HashMap Weight Weight Weight HashMap Weight Weight Weight Weight Weight WeightedRoundRobinSelector HashMap ,weights: 
vert.x-master,io.vertx.core.spi.cluster,NodeInfoSerializationTest,1,1,0,0,0,false,0 ,0 ,0 ,expected: NodeInfo ,data{ Params :  Returns : Collection<Object[]>} testSerialization{ Params :  Returns : void} ,,data ,,,,NodeInfo ,,NodeInfo ,NodeInfo NodeInfo JsonObject NodeInfo JsonObject NodeInfo ,buffer: 
vert.x-master,io.vertx.core.spi.cluster,RegistrationInfoSerializationTest,1,1,0,0,0,false,0 ,0 ,0 ,expected: RegistrationInfo ,data{ Params :  Returns : Collection<Object[]>} testSerialization{ Params :  Returns : void} ,,data ,,,,RegistrationInfo ,,RegistrationInfo ,RegistrationInfo RegistrationInfo RegistrationInfo ,buffer: 
vert.x-master,io.vertx.core.spi.cluster,WrappedClusterManager,1,1,0,0,0,false,0 ,ClusterManager ,0 ,delegate: ClusterManager ,init{ Params : Vertx,NodeSelector Returns : void} getAsyncMap{ Params : String,Promise<AsyncMap<K,V>> Returns : void} getSyncMap{ Params : String Returns : Map<K,V>} getLockWithTimeout{ Params : String,long,Promise<Lock> Returns : void} getCounter{ Params : String,Promise<Counter> Returns : void} getNodeId{ Params :  Returns : String} getNodes{ Params :  Returns : List<String>} nodeListener{ Params : NodeListener Returns : void} setNodeInfo{ Params : NodeInfo,Promise<Void> Returns : void} getNodeInfo{ Params :  Returns : NodeInfo} getNodeInfo{ Params : String,Promise<NodeInfo> Returns : void} join{ Params : Promise<Void> Returns : void} leave{ Params : Promise<Void> Returns : void} isActive{ Params :  Returns : boolean} addRegistration{ Params : String,RegistrationInfo,Promise<Void> Returns : void} removeRegistration{ Params : String,RegistrationInfo,Promise<Void> Returns : void} getRegistrations{ Params : String,Promise<List<RegistrationInfo>> Returns : void} clusterHost{ Params :  Returns : String} clusterPublicHost{ Params :  Returns : String} getDelegate{ Params :  Returns : ClusterManager} ,init getAsyncMap getSyncMap getLockWithTimeout getCounter getNodeId getNodes nodeListener setNodeInfo getNodeInfo getNodeInfo join leave isActive addRegistration removeRegistration getRegistrations clusterHost clusterPublicHost ,,,,ClusterManager ,ClusterManager ,,ClusterManager ,,delegate: 
vert.x-master,io.vertx.core.spi.cluster,WrappedNodeSelector,1,1,0,0,0,false,0 ,NodeSelector ,0 ,delegate: NodeSelector ,init{ Params : Vertx,ClusterManager Returns : void} eventBusStarted{ Params :  Returns : void} selectForSend{ Params : Message<?>,Promise<String> Returns : void} selectForPublish{ Params : Message<?>,Promise<Iterable<String>> Returns : void} registrationsUpdated{ Params : RegistrationUpdateEvent Returns : void} registrationsLost{ Params :  Returns : void} wantsUpdatesFor{ Params : String Returns : boolean} ,init eventBusStarted selectForSend selectForPublish registrationsUpdated registrationsLost wantsUpdatesFor ,,,,NodeSelector ,NodeSelector ,,NodeSelector ,,delegate: , address
vert.x-master,io.vertx.core.spi.metrics,MetricsContextTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,eventLoopContextFactory: Function<Vertx, Context> workerContextFactory: Function<Vertx, Context> ,testFactory{ Params :  Returns : void} testFactoryInCluster{ Params :  Returns : void} testHttpServerRequestEventLoop{ Params :  Returns : void} testHttpServerRequestWorker{ Params :  Returns : void} testHttpServerRequest{ Params : Function<Vertx,Context> Returns : void} createHttpServerMetrics{ Params : HttpServerOptions,SocketAddress Returns : HttpServerMetrics} requestBegin{ Params : Void,HttpRequest Returns : Void} responseEnd{ Params : Void,HttpResponse,long Returns : void} connected{ Params : SocketAddress,String Returns : Void} disconnected{ Params : Void,SocketAddress Returns : void} bytesRead{ Params : Void,SocketAddress,long Returns : void} bytesWritten{ Params : Void,SocketAddress,long Returns : void} close{ Params :  Returns : void} testHttpServerRequestPipelining{ Params :  Returns : void} createHttpServerMetrics{ Params : HttpServerOptions,SocketAddress Returns : HttpServerMetrics} requestBegin{ Params : Void,HttpRequest Returns : Void} requestEnd{ Params : Void,HttpRequest,long Returns : void} responseEnd{ Params : Void,HttpResponse,long Returns : void} connected{ Params : SocketAddress,String Returns : Void} disconnected{ Params : Void,SocketAddress Returns : void} bytesRead{ Params : Void,SocketAddress,long Returns : void} bytesWritten{ Params : Void,SocketAddress,long Returns : void} close{ Params :  Returns : void} testHttpServerWebSocketEventLoop{ Params :  Returns : void} testHttpServerWebSocketWorker{ Params :  Returns : void} testHttpServerWebSocket{ Params : Function<Vertx,Context> Returns : void} createHttpServerMetrics{ Params : HttpServerOptions,SocketAddress Returns : HttpServerMetrics} requestBegin{ Params : Void,HttpRequest Returns : Void} requestEnd{ Params : Void,HttpRequest,long Returns : void} responseBegin{ Params : Void,HttpResponse Returns : void} responseEnd{ Params : Void,HttpResponse,long Returns : void} connected{ Params : Void,Void,ServerWebSocket Returns : Void} disconnected{ Params : Void Returns : void} connected{ Params : SocketAddress,String Returns : Void} disconnected{ Params : Void,SocketAddress Returns : void} bytesRead{ Params : Void,SocketAddress,long Returns : void} bytesWritten{ Params : Void,SocketAddress,long Returns : void} close{ Params :  Returns : void} testHttpClientRequestEventLoop{ Params :  Returns : void} testHttpClientRequestWorker{ Params :  Returns : void} testHttpClientRequest{ Params : Function<Vertx,Context> Returns : void} createHttpClientMetrics{ Params : HttpClientOptions Returns : HttpClientMetrics} createEndpointMetrics{ Params : SocketAddress,int Returns : ClientMetrics<Void,Void,HttpRequest,HttpResponse>} requestBegin{ Params : String,HttpRequest Returns : Void} responseEnd{ Params : Void,long Returns : void} connected{ Params : SocketAddress,String Returns : Void} disconnected{ Params : Void,SocketAddress Returns : void} bytesRead{ Params : Void,SocketAddress,long Returns : void} bytesWritten{ Params : Void,SocketAddress,long Returns : void} close{ Params :  Returns : void} testHttpClientWebSocketEventLoop{ Params :  Returns : void} testHttpClientWebSocketWorker{ Params :  Returns : void} testHttpClientWebSocket{ Params : Function<Vertx,Context> Returns : void} createHttpClientMetrics{ Params : HttpClientOptions Returns : HttpClientMetrics} createEndpointMetrics{ Params : SocketAddress,int Returns : ClientMetrics<Void,Void,HttpRequest,HttpResponse>} connected{ Params : WebSocket Returns : Void} disconnected{ Params : Void Returns : void} connected{ Params : SocketAddress,String Returns : Void} disconnected{ Params : Void,SocketAddress Returns : void} bytesRead{ Params : Void,SocketAddress,long Returns : void} bytesWritten{ Params : Void,SocketAddress,long Returns : void} close{ Params :  Returns : void} testNetServerEventLoop{ Params :  Returns : void} testNetServerWorker{ Params :  Returns : void} testNetServer{ Params : Function<Vertx,Context> Returns : void} createNetServerMetrics{ Params : NetServerOptions,SocketAddress Returns : TCPMetrics} connected{ Params : SocketAddress,String Returns : Void} disconnected{ Params : Void,SocketAddress Returns : void} bytesRead{ Params : Void,SocketAddress,long Returns : void} bytesWritten{ Params : Void,SocketAddress,long Returns : void} close{ Params :  Returns : void} testNetClientEventLoop{ Params :  Returns : void} testNetClientWorker{ Params :  Returns : void} testNetClient{ Params : Function<Vertx,Context> Returns : void} createNetClientMetrics{ Params : NetClientOptions Returns : TCPMetrics} connected{ Params : SocketAddress,String Returns : Void} disconnected{ Params : Void,SocketAddress Returns : void} bytesRead{ Params : Void,SocketAddress,long Returns : void} bytesWritten{ Params : Void,SocketAddress,long Returns : void} close{ Params :  Returns : void} testDatagramEventLoop{ Params :  Returns : void} testDatagramWorker{ Params :  Returns : void} testDatagram{ Params : Function<Vertx,Context> Returns : void} createDatagramSocketMetrics{ Params : DatagramSocketOptions Returns : DatagramSocketMetrics} listening{ Params : String,SocketAddress Returns : void} bytesRead{ Params : Void,SocketAddress,long Returns : void} bytesWritten{ Params : Void,SocketAddress,long Returns : void} close{ Params :  Returns : void} testEventBusLifecycle{ Params :  Returns : void} createEventBusMetrics{ Params :  Returns : EventBusMetrics} close{ Params :  Returns : void} testMessageHandler{ Params :  Returns : void} testMessageHandlerEventLoop{ Params :  Returns : void} testMessageHandler{ Params : BiConsumer<Vertx,Handler<Void>> Returns : void} createEventBusMetrics{ Params :  Returns : EventBusMetrics} handlerRegistered{ Params : String,String Returns : Void} handlerUnregistered{ Params : Void Returns : void} scheduleMessage{ Params : Void,boolean Returns : void} messageDelivered{ Params : Void,boolean Returns : void} start{ Params :  Returns : void} ,createHttpServerMetrics requestBegin responseEnd connected disconnected bytesRead bytesWritten close createHttpServerMetrics requestBegin requestEnd responseEnd connected disconnected bytesRead bytesWritten close createHttpServerMetrics requestBegin requestEnd responseBegin responseEnd connected disconnected connected disconnected bytesRead bytesWritten close createHttpClientMetrics createEndpointMetrics requestBegin responseEnd connected disconnected bytesRead bytesWritten close createHttpClientMetrics createEndpointMetrics connected disconnected connected disconnected bytesRead bytesWritten close createNetServerMetrics connected disconnected bytesRead bytesWritten close createNetClientMetrics connected disconnected bytesRead bytesWritten close createDatagramSocketMetrics listening bytesRead bytesWritten close createEventBusMetrics close createEventBusMetrics handlerRegistered handlerUnregistered scheduleMessage messageDelivered start ,,,,,Function<Vertx,Context> ,,Function<Vertx,Context> ,AtomicReference AtomicReference VertxOptions MetricsOptions AtomicReference AtomicReference VertxOptions MetricsOptions EventBusOptions AtomicReference AtomicReference AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean DummyVertxMetrics DummyHttpServerMetrics CountDownLatch VertxOptions MetricsOptions AtomicInteger DummyVertxMetrics DummyHttpServerMetrics CountDownLatch VertxOptions MetricsOptions HttpClientOptions AtomicReference AtomicReference AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicInteger DummyVertxMetrics DummyHttpServerMetrics CountDownLatch VertxOptions MetricsOptions AtomicReference AtomicReference AtomicReference AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean DummyVertxMetrics DummyHttpClientMetrics ClientMetrics VertxOptions MetricsOptions AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean DummyVertxMetrics DummyHttpClientMetrics ClientMetrics VertxOptions MetricsOptions AtomicReference AtomicReference AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean DummyVertxMetrics DummyTCPMetrics CountDownLatch VertxOptions MetricsOptions AtomicReference AtomicReference AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean DummyVertxMetrics DummyTCPMetrics VertxOptions MetricsOptions AtomicReference AtomicReference AtomicBoolean AtomicBoolean AtomicBoolean CountDownLatch DummyVertxMetrics DummyDatagramMetrics VertxOptions MetricsOptions AtomicBoolean DummyVertxMetrics DummyEventBusMetrics VertxOptions MetricsOptions AtomicReference AtomicReference AtomicBoolean AtomicBoolean AtomicBoolean DummyVertxMetrics DummyEventBusMetrics VertxOptions MetricsOptions Thread AtomicReference AbstractVerticle DeploymentOptions ,: 
vert.x-master,io.vertx.core.spi.metrics,MetricsOptionsTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} testMetricsEnabledWithoutConfig{ Params :  Returns : void} testSetMetricsInstance{ Params :  Returns : void} testMetricsFromServiceLoader{ Params :  Returns : void} testSetMetricsInstanceTakesPrecedenceOverServiceLoader{ Params :  Returns : void} createVertxLoadingMetricsFromMetaInf{ Params : VertxOptions,Class<? extends VertxServiceProvider> Returns : Vertx} createMetricsFromMetaInfLoader{ Params : String Returns : ClassLoader} findResources{ Params : String Returns : Enumeration<URL>} ,findResources ,createVertxLoadingMetricsFromMetaInf createMetricsFromMetaInfLoader ,,,,,,,MetricsOptions MetricsOptions Random MetricsOptions MetricsOptions JsonObject Random MetricsOptions JsonObject VertxOptions MetricsOptions VertxOptions MetricsOptions SimpleVertxMetricsFactory MetricsOptions VertxOptions VertxOptions MetricsOptions SimpleVertxMetricsFactory URLClassLoader ,super: , name
vert.x-master,io.vertx.core.spi.metrics,MetricsTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,ADDRESS1: String server: HttpServer client: HttpClient ,tearDown{ Params :  Returns : void} getOptions{ Params :  Returns : VertxOptions} testSendMessage{ Params :  Returns : void} testSendMessageInCluster{ Params :  Returns : void} testPublishMessageToSelf{ Params :  Returns : void} testPublishMessageToRemote{ Params :  Returns : void} testPublishMessageToCluster{ Params :  Returns : void} testBroadcastMessage{ Params : Vertx,Vertx[],boolean,SentMessage Returns : void} testReceiveSentMessageFromSelf{ Params :  Returns : void} testReceiveMessageSentFromRemote{ Params :  Returns : void} testReceiveMessageSent{ Params : Vertx,Vertx,boolean,int Returns : void} testReceivePublishedMessageFromSelf{ Params :  Returns : void} testReceiveMessagePublishedFromRemote{ Params :  Returns : void} testReceiveMessagePublished{ Params : Vertx,Vertx,boolean,int Returns : void} testReplyMessageFromSelf{ Params :  Returns : void} testReplyMessageFromRemote{ Params :  Returns : void} testReply{ Params : Vertx,Vertx,boolean,boolean Returns : void} testDiscardOnOverflow1{ Params :  Returns : void} testDiscardOnOverflow2{ Params :  Returns : void} testDiscardMessageOnUnregistration{ Params :  Returns : void} testSignalMetricEventAfterUnregistration{ Params :  Returns : void} testHandlerRegistration{ Params :  Returns : void} testClusterUnregistration{ Params :  Returns : void} testHandlerProcessMessage{ Params :  Returns : void} testHandlerProcessMessageFromRemote{ Params :  Returns : void} assertRegistration{ Params : FakeEventBusMetrics Returns : HandlerMetric} testHandlerProcessMessage{ Params : Vertx,Vertx,int Returns : void} testHandlerMetricReply{ Params :  Returns : void} testBytesCodec{ Params :  Returns : void} testReplyFailureNoHandlers{ Params :  Returns : void} testReplyFailureTimeout1{ Params :  Returns : void} testReplyFailureTimeout2{ Params :  Returns : void} testReplyFailureRecipientFailure{ Params :  Returns : void} testServerWebSocket{ Params :  Returns : void} testServerWebSocketUpgrade{ Params :  Returns : void} testWebSocket{ Params :  Returns : void} testHttpClientName{ Params :  Returns : void} testHttpClientMetricsQueueLength{ Params :  Returns : void} testHttpClientMetricsQueueClose{ Params :  Returns : void} testHttpClientConnectionCloseAfterRequestEnd{ Params :  Returns : void} testMulti{ Params :  Returns : void} testHttpConnect1{ Params :  Returns : void} testHttpConnect2{ Params :  Returns : void} testHttpConnect{ Params : String,Consumer<SocketMetric> Returns : void} testDatagram1{ Params :  Returns : void} testDatagram2{ Params :  Returns : void} testDatagram{ Params : String,Consumer<PacketMetric> Returns : void} testThreadPoolMetricsWithExecuteBlocking{ Params :  Returns : void} testThreadPoolMetricsWithInternalExecuteBlocking{ Params :  Returns : void} testThreadPoolMetricsWithWorkerVerticle{ Params :  Returns : void} testThreadPoolMetricsWithNamedExecuteBlocking{ Params :  Returns : void} testWorkerPoolClose{ Params :  Returns : void} getSomeDumbTask{ Params :  Returns : Handler<Promise<Void>>} testInitialization{ Params :  Returns : void} testHTTP2ConnectionCloseBeforePrefaceIsReceived{ Params :  Returns : void} testServerLifecycle{ Params :  Returns : void} createHttpServerMetrics{ Params : HttpServerOptions,SocketAddress Returns : HttpServerMetrics<?,?,?>} close{ Params :  Returns : void} ,getOptions createHttpServerMetrics close ,,,,,HttpClient ,,HttpClient ,CountDownLatch MetricsOptions FakeMetricsFactory SentMessage SentMessage SentMessage SentMessage SentMessage SentMessage AtomicInteger AtomicInteger HashSet HashSet ReceivedMessage AtomicInteger ReceivedMessage CountDownLatch ArrayList CountDownLatch CountDownLatch AtomicReference CountDownLatch CountDownLatch CountDownLatch DeliveryOptions CountDownLatch DeliveryOptions CountDownLatch AtomicReference CountDownLatch DeliveryOptions HttpClientOptions ArrayList HttpClientOptions CountDownLatch ArrayList ArrayList ArrayList ArrayList ArrayList AtomicReference ArrayList ArrayList AtomicReference RequestOptions CountDownLatch AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean AtomicBoolean HashMap CountDownLatch AtomicInteger AtomicBoolean AtomicBoolean AtomicBoolean AtomicInteger CountDownLatch CountDownLatch VertxOptions MetricsOptions FakeMetricsFactory AtomicBoolean AtomicBoolean AtomicBoolean HashSet NetClientOptions JdkSSLEngineOptions CountDownLatch AtomicInteger VertxOptions MetricsOptions VertxMetrics HttpServerMetrics ,: 
vert.x-master,io.vertx.core.spi.metrics,SimpleVertxMetricsFactory,1,0,0,0,0,false,0 ,VertxMetricsFactory ,0 ,instance: M ,metrics{ Params : VertxOptions Returns : VertxMetrics} ,metrics ,,,,VertxMetricsFactory ,,,,,: 
vert.x-master,io.vertx.core.spi.tracing,ClusteredEventBusTracerTest,1,1,0,0,0,false,EventBusTracerTestBase ,0 ,0 ,,setUp{ Params :  Returns : void} ,setUp ,,,,,,,,,: , 2
vert.x-master,io.vertx.core.spi.tracing,ClusteredEventBusTracingTest,1,1,0,0,0,false,EventBusTracingTestBase ,0 ,0 ,,setUp{ Params :  Returns : void} ,setUp ,,,,,,,,,: , 2
vert.x-master,io.vertx.core.spi.tracing,EventBusTracerTestBase,1,1,1,0,0,false,VertxTestBase ,0 ,EventBusTracer ,tracer: VertxTracer vertx1: Vertx vertx2: Vertx ,getTracer{ Params :  Returns : VertxTracer} receiveRequest{ Params : Context,SpanKind,TracingPolicy,Object,String,Iterable,TagExtractor Returns : Object} sendResponse{ Params : Context,Object,Object,Throwable,TagExtractor Returns : void} sendRequest{ Params : Context,SpanKind,TracingPolicy,Object,String,BiConsumer,TagExtractor Returns : Object} receiveResponse{ Params : Context,Object,Object,Throwable,TagExtractor Returns : void} addressOf{ Params : T,TagExtractor<T> Returns : String} receiveRequest{ Params : Context,SpanKind,TracingPolicy,R,String,Iterable<Map.Entry<String,String>>,TagExtractor<R> Returns : Object} sendResponse{ Params : Context,R,Object,Throwable,TagExtractor<R> Returns : void} sendRequest{ Params : Context,SpanKind,TracingPolicy,R,String,BiConsumer<String,String>,TagExtractor<R> Returns : Object} receiveResponse{ Params : Context,R,Object,Throwable,TagExtractor<R> Returns : void} testEventBusSend{ Params :  Returns : void} testEventBusSendNoConsumer{ Params :  Returns : void} testEventBusRequestReply{ Params :  Returns : void} testEventBusRequestReplyFailure{ Params :  Returns : void} testEventBusRequestNoConsumer{ Params :  Returns : void} testEventBusRequestTimeout{ Params :  Returns : void} testEventBusRequestReplyReply{ Params :  Returns : void} ,getTracer receiveRequest sendResponse sendRequest receiveResponse receiveRequest sendResponse sendRequest receiveResponse ,,,,,,,,VertxTracer Object Object Object Object CopyOnWriteArrayList CopyOnWriteArrayList EventBusTracer CountDownLatch EventBusTracer EventBusTracer CountDownLatch EventBusTracer CountDownLatch EventBusTracer EventBusTracer CountDownLatch DeliveryOptions EventBusTracer CountDownLatch ,Arrays: , "receiveRequest[the_address]", "sendResponse[]", "receiveRequest[generated]", "sendResponse[]"
vert.x-master,io.vertx.core.spi.tracing,EventBusTracer,3,0,0,0,0,false,VertxTestBase ,0 ,EventBusTracer ,receiveKey: String receiveVal: Object receiveTrace: Object sendKey: String sendVal: Object sendTrace: Object sendEvents: List<String> receiveEvents: List<String> ,getTracer{ Params :  Returns : VertxTracer} receiveRequest{ Params : Context,SpanKind,TracingPolicy,Object,String,Iterable,TagExtractor Returns : Object} sendResponse{ Params : Context,Object,Object,Throwable,TagExtractor Returns : void} sendRequest{ Params : Context,SpanKind,TracingPolicy,Object,String,BiConsumer,TagExtractor Returns : Object} receiveResponse{ Params : Context,Object,Object,Throwable,TagExtractor Returns : void} addressOf{ Params : T,TagExtractor<T> Returns : String} receiveRequest{ Params : Context,SpanKind,TracingPolicy,R,String,Iterable<Map.Entry<String,String>>,TagExtractor<R> Returns : Object} sendResponse{ Params : Context,R,Object,Throwable,TagExtractor<R> Returns : void} sendRequest{ Params : Context,SpanKind,TracingPolicy,R,String,BiConsumer<String,String>,TagExtractor<R> Returns : Object} receiveResponse{ Params : Context,R,Object,Throwable,TagExtractor<R> Returns : void} testEventBusSend{ Params :  Returns : void} testEventBusSendNoConsumer{ Params :  Returns : void} testEventBusRequestReply{ Params :  Returns : void} testEventBusRequestReplyFailure{ Params :  Returns : void} testEventBusRequestNoConsumer{ Params :  Returns : void} testEventBusRequestTimeout{ Params :  Returns : void} testEventBusRequestReplyReply{ Params :  Returns : void} ,getTracer receiveRequest sendResponse sendRequest receiveResponse receiveRequest sendResponse sendRequest receiveResponse ,,,,VertxTracer ,,,,Object Object Object Object CopyOnWriteArrayList CopyOnWriteArrayList ,sendEvents: , "receiveResponse[]"
vert.x-master,io.vertx.core.spi.tracing,EventBusTracingTestBase,1,1,1,0,0,false,VertxTestBase ,0 ,0 ,vertx1: Vertx vertx2: Vertx tracer: FakeTracer ,getTracer{ Params :  Returns : VertxTracer} testEventBusSendPropagate{ Params :  Returns : void} testEventBusSendIgnore{ Params :  Returns : void} testEventBusSendAlways{ Params :  Returns : void} testSend{ Params : TracingPolicy,boolean,int Returns : void} testEventBusPublishProgagate{ Params :  Returns : void} testEventBusPublishIgnore{ Params :  Returns : void} testEventBusPublishAlways{ Params :  Returns : void} testPublish{ Params : TracingPolicy,boolean,int,boolean Returns : void} testEventBusRequestReplyPropagate{ Params :  Returns : void} testEventBusRequestReplyIgnore{ Params :  Returns : void} testEventBusRequestReplyAlways{ Params :  Returns : void} testEventBusRequestReplyFailurePropagate{ Params :  Returns : void} testEventBusRequestReplyFailureIgnore{ Params :  Returns : void} testEventBusRequestReplyFailureAlways{ Params :  Returns : void} testRequestReply{ Params : TracingPolicy,boolean,boolean,int Returns : void} assertSingleTrace{ Params : List<Span> Returns : void} ,getTracer ,,,,,,,,FakeTracer AtomicInteger DeliveryOptions DeliveryOptions CountDownLatch DeliveryOptions ,spans: , i
vert.x-master,io.vertx.core.spi.tracing,Http1xTracerTest,1,1,0,0,0,false,HttpTracerTestBase ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.spi.tracing,Http1xTracingTest,1,1,0,0,0,false,HttpTracingTestBase ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.core.spi.tracing,Http2TracerTest,1,1,0,0,0,false,HttpTracerTestBase ,0 ,0 ,SPAN_KIND_SERVER: String SPAN_KIND_CLIENT: String SPAN_KIND_KEY: String ,createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} testTracingWorksAfterUpgrading{ Params :  Returns : void} ,createBaseServerOptions createBaseClientOptions ,,,,,,,,FakeTracer HttpClientOptions ,: 
vert.x-master,io.vertx.core.spi.tracing,Http2TracingTest,1,1,0,0,0,false,HttpTracingTestBase ,0 ,0 ,,createBaseServerOptions{ Params :  Returns : HttpServerOptions} createBaseClientOptions{ Params :  Returns : HttpClientOptions} ,createBaseServerOptions createBaseClientOptions ,,,,,,,,,Http2TestBase: 
vert.x-master,io.vertx.core.spi.tracing,HttpTracerTestBase,1,1,1,0,0,false,HttpTestBase ,0 ,0 ,tracer: VertxTracer ,getTracer{ Params :  Returns : VertxTracer} testHttpServer{ Params :  Returns : void} receiveRequest{ Params : Context,SpanKind,TracingPolicy,Object,String,Iterable,TagExtractor Returns : Object} sendResponse{ Params : Context,Object,Object,Throwable,TagExtractor Returns : void} testHttpServerError{ Params :  Returns : void} receiveRequest{ Params : Context,SpanKind,TracingPolicy,Object,String,Iterable,TagExtractor Returns : Object} sendResponse{ Params : Context,Object,Object,Throwable,TagExtractor Returns : void} testHttpClientRequest{ Params :  Returns : void} testHttpClientRequestOverrideOperation{ Params :  Returns : void} testHttpClientRequest{ Params : RequestOptions,String Returns : void} sendRequest{ Params : Context,SpanKind,TracingPolicy,Object,String,BiConsumer,TagExtractor Returns : Object} receiveResponse{ Params : Context,Object,Object,Throwable,TagExtractor Returns : void} testHttpClientError{ Params :  Returns : void} sendRequest{ Params : Context,SpanKind,TracingPolicy,Object,String,BiConsumer,TagExtractor Returns : Object} receiveResponse{ Params : Context,Object,Object,Throwable,TagExtractor Returns : void} setTracer{ Params : VertxTracer Returns : void} ,getTracer receiveRequest sendResponse receiveRequest sendResponse sendRequest receiveResponse sendRequest receiveResponse ,,,,,VertxTracer ,,VertxTracer ,Object AtomicInteger VertxTracer CountDownLatch Object AtomicInteger VertxTracer CountDownLatch RequestOptions RequestOptions RequestOptions Object AtomicInteger VertxTracer CountDownLatch Object AtomicInteger VertxTracer CountDownLatch ,: 
vert.x-master,io.vertx.core.spi.tracing,HttpTracingTestBase,1,1,1,0,0,false,HttpTestBase ,0 ,0 ,tracer: FakeTracer ,getTracer{ Params :  Returns : VertxTracer} testHttpServerRequest{ Params :  Returns : void} testHttpServerRequestWithClient{ Params :  Returns : void} testMultipleHttpServerRequest{ Params :  Returns : void} assertSingleTrace{ Params : List<Span> Returns : void} ,getTracer ,,,,,FakeTracer ,,FakeTracer ,FakeTracer ,spans: , i
vert.x-master,io.vertx.core.spi.tracing,LocalEventBusTracerTest,1,1,0,0,0,false,EventBusTracerTestBase ,0 ,0 ,,setUp{ Params :  Returns : void} testInboundInterceptor{ Params :  Returns : void} ,setUp ,,,,,,,,VertxTracer CountDownLatch ,: 
vert.x-master,io.vertx.core.spi.tracing,LocalEventBusTracingTest,1,1,0,0,0,false,EventBusTracingTestBase ,0 ,0 ,,setUp{ Params :  Returns : void} ,setUp ,,,,,,,,,super: 
vert.x-master,io.vertx.core.spi.tracing,TracerTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,tracer: FakeTracer ,getTracer{ Params :  Returns : VertxTracer} testClose{ Params :  Returns : void} testWorkerExecutor{ Params :  Returns : void} ,getTracer ,,,,,FakeTracer ,,FakeTracer ,FakeTracer ,: 
vert.x-master,io.vertx.core.streams,InboundBufferTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,contextChecker: Runnable context: Context buffer: InboundBuffer<Integer> sequence: AtomicInteger ,emit{ Params :  Returns : boolean} emit{ Params : int Returns : boolean} fill{ Params :  Returns : void} setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} checkContext{ Params :  Returns : void} testFlowing{ Params :  Returns : void} testTake{ Params :  Returns : void} testFlowingAdd{ Params :  Returns : void} testFlowingRefill{ Params :  Returns : void} testPauseWhenFull{ Params :  Returns : void} testPausedResume{ Params :  Returns : void} testPausedDrain{ Params :  Returns : void} testPausedRequestLimited{ Params :  Returns : void} testPushReturnsTrueUntilHighWatermark{ Params :  Returns : void} testHighWaterMark{ Params :  Returns : void} testEmptyHandler{ Params :  Returns : void} testEmitWhenHandlingLastItem{ Params :  Returns : void} testEmitInElementHandler{ Params :  Returns : void} testEmitInElementHandler1{ Params :  Returns : void} testEmitInElementHandler2{ Params :  Returns : void} testEmitInElementHandler{ Params : Consumer<Integer> Returns : void} testEmitInDrainHandler1{ Params :  Returns : void} testEmitInDrainHandler2{ Params :  Returns : void} testDrainAfter{ Params :  Returns : void} testPauseInElementHandler{ Params :  Returns : void} testAddAllEmitInHandler{ Params :  Returns : void} testAddAllWhenPaused{ Params :  Returns : void} testAddAllWhenFlowing{ Params :  Returns : void} testAddAllWhenDelivering{ Params :  Returns : void} testPollDuringEmission{ Params :  Returns : void} testCheckThatPauseAfterResumeWontDoAnyEmission{ Params :  Returns : void} testBufferSignalingFullImmediately{ Params :  Returns : void} testPauseInHandlerSignalsFullImmediately{ Params :  Returns : void} testFetchWhenNotEmittingWithNoPendingElements{ Params :  Returns : void} testRejectWrongThread{ Params :  Returns : void} ,setUp ,,,,,AtomicInteger ,,AtomicInteger ,ArrayList AtomicInteger InboundBuffer AtomicInteger InboundBuffer AtomicInteger InboundBuffer AtomicInteger InboundBuffer AtomicInteger InboundBuffer AtomicInteger AtomicInteger InboundBuffer AtomicInteger AtomicInteger InboundBuffer AtomicInteger AtomicInteger InboundBuffer AtomicInteger AtomicInteger InboundBuffer InboundBuffer InboundBuffer AtomicInteger AtomicInteger InboundBuffer AtomicInteger AtomicInteger InboundBuffer AtomicInteger AtomicBoolean InboundBuffer AtomicInteger AtomicInteger AtomicBoolean InboundBuffer AtomicInteger AtomicInteger InboundBuffer AtomicInteger AtomicBoolean AtomicInteger InboundBuffer AtomicInteger AtomicBoolean InboundBuffer AtomicInteger InboundBuffer ArrayList InboundBuffer AtomicInteger AtomicInteger AtomicInteger InboundBuffer AtomicInteger AtomicInteger AtomicInteger InboundBuffer ArrayList InboundBuffer ArrayList ArrayList AtomicInteger InboundBuffer AtomicInteger InboundBuffer ArrayList InboundBuffer InboundBuffer AtomicInteger InboundBuffer ,: 
vert.x-master,io.vertx.core.streams,PipeTest,1,1,0,0,0,false,AsyncTestBase ,0 ,0 ,dst: FakeStream<Object> emitted: List<Object> o1: Object o2: Object o3: Object ,setUp{ Params :  Returns : void} testSimple{ Params :  Returns : void} testEndStreamPrematurely{ Params :  Returns : void} testFailStreamPrematurely{ Params :  Returns : void} testEndWriteStreamOnReadStreamFailure{ Params :  Returns : void} testDoNotEndWriteStreamOnReadStreamFailure{ Params :  Returns : void} testEndWriteStreamOnWriteStreamFailure{ Params :  Returns : void} testDoNotEndWriteStreamOnSuccess{ Params :  Returns : void} testPauseResume{ Params :  Returns : void} testClosePipeBeforeStart{ Params :  Returns : void} testClosePipeBeforeEnd{ Params :  Returns : void} testClosePipeAfterEnd{ Params :  Returns : void} testEndWriteStreamSuccess{ Params :  Returns : void} testEndWriteStreamFail{ Params :  Returns : void} testPipeCloseFailsTheResult{ Params :  Returns : void} ,setUp ,,,,,Object ,,Object ,Object Object Object FakeStream ArrayList FakeStream FakeStream FakeStream Throwable Throwable FakeStream Throwable FakeStream RuntimeException FakeStream FakeStream FakeStream ArrayList Object Object FakeStream FakeStream FakeStream FakeStream AtomicReference FakeStream AtomicReference Exception FakeStream ArrayList ,ar: 
vert.x-master,io.vertx.core.streams,PumpTest,1,1,0,0,0,false,0 ,0 ,FakeReadStream FakeWriteStream MyClass ,,testPumpBasic{ Params :  Returns : void} testPumpPauseResume{ Params :  Returns : void} testPumpReadStreamNull{ Params :  Returns : void} testPumpWriteStreamNull{ Params :  Returns : void} testPumpReadStreamNull2{ Params :  Returns : void} testPumpWriteStreamNull2{ Params :  Returns : void} addData{ Params : T Returns : void} handler{ Params : Handler<T> Returns : FakeReadStream} pause{ Params :  Returns : FakeReadStream} fetch{ Params : long Returns : ReadStream<T>} pause{ Params : Handler<Void> Returns : FakeReadStream} resume{ Params :  Returns : FakeReadStream} resume{ Params : Handler<Void> Returns : FakeReadStream} exceptionHandler{ Params : Handler<Throwable> Returns : FakeReadStream} endHandler{ Params : Handler<Void> Returns : FakeReadStream} clearReceived{ Params :  Returns : void} setWriteQueueMaxSize{ Params : int Returns : FakeWriteStream} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : FakeWriteStream} write{ Params : T Returns : Future<Void>} exceptionHandler{ Params : Handler<Throwable> Returns : FakeWriteStream} end{ Params :  Returns : Future<Void>} ,fetch end ,,,,,,,,FakeReadStream FakeWriteStream ArrayList MyClass MyClass FakeReadStream FakeWriteStream ArrayList MyClass MyClass FakeReadStream FakeWriteStream FakeReadStream FakeWriteStream UnsupportedOperationException ArrayList ArrayList UnsupportedOperationException ,Pump: , null, ws, 1000
vert.x-master,io.vertx.core.streams,FakeReadStream,3,2,0,0,0,false,0 ,0 ,FakeReadStream FakeWriteStream MyClass ,dataHandler: Handler<T> paused: boolean pauseCount: int resumeCount: int ,testPumpBasic{ Params :  Returns : void} testPumpPauseResume{ Params :  Returns : void} testPumpReadStreamNull{ Params :  Returns : void} testPumpWriteStreamNull{ Params :  Returns : void} testPumpReadStreamNull2{ Params :  Returns : void} testPumpWriteStreamNull2{ Params :  Returns : void} addData{ Params : T Returns : void} handler{ Params : Handler<T> Returns : FakeReadStream} pause{ Params :  Returns : FakeReadStream} fetch{ Params : long Returns : ReadStream<T>} pause{ Params : Handler<Void> Returns : FakeReadStream} resume{ Params :  Returns : FakeReadStream} resume{ Params : Handler<Void> Returns : FakeReadStream} exceptionHandler{ Params : Handler<Throwable> Returns : FakeReadStream} endHandler{ Params : Handler<Void> Returns : FakeReadStream} clearReceived{ Params :  Returns : void} setWriteQueueMaxSize{ Params : int Returns : FakeWriteStream} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : FakeWriteStream} write{ Params : T Returns : Future<Void>} exceptionHandler{ Params : Handler<Throwable> Returns : FakeWriteStream} end{ Params :  Returns : Future<Void>} ,fetch end ,,,,ReadStream ,,,,UnsupportedOperationException ,doneHandler: , null
vert.x-master,io.vertx.core.streams,FakeWriteStream,3,2,0,0,0,false,0 ,0 ,FakeReadStream FakeWriteStream MyClass ,maxSize: int received: List<T> drainHandler: Handler<Void> ,testPumpBasic{ Params :  Returns : void} testPumpPauseResume{ Params :  Returns : void} testPumpReadStreamNull{ Params :  Returns : void} testPumpWriteStreamNull{ Params :  Returns : void} testPumpReadStreamNull2{ Params :  Returns : void} testPumpWriteStreamNull2{ Params :  Returns : void} addData{ Params : T Returns : void} handler{ Params : Handler<T> Returns : FakeReadStream} pause{ Params :  Returns : FakeReadStream} fetch{ Params : long Returns : ReadStream<T>} pause{ Params : Handler<Void> Returns : FakeReadStream} resume{ Params :  Returns : FakeReadStream} resume{ Params : Handler<Void> Returns : FakeReadStream} exceptionHandler{ Params : Handler<Throwable> Returns : FakeReadStream} endHandler{ Params : Handler<Void> Returns : FakeReadStream} clearReceived{ Params :  Returns : void} setWriteQueueMaxSize{ Params : int Returns : FakeWriteStream} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : FakeWriteStream} write{ Params : T Returns : Future<Void>} exceptionHandler{ Params : Handler<Throwable> Returns : FakeWriteStream} end{ Params :  Returns : Future<Void>} ,fetch end ,,,,WriteStream ,,,,ArrayList ArrayList UnsupportedOperationException ,received: , data
vert.x-master,io.vertx.core.streams,MyClass,3,0,0,1,0,false,0 ,0 ,FakeReadStream FakeWriteStream MyClass ,,testPumpBasic{ Params :  Returns : void} testPumpPauseResume{ Params :  Returns : void} testPumpReadStreamNull{ Params :  Returns : void} testPumpWriteStreamNull{ Params :  Returns : void} testPumpReadStreamNull2{ Params :  Returns : void} testPumpWriteStreamNull2{ Params :  Returns : void} addData{ Params : T Returns : void} handler{ Params : Handler<T> Returns : FakeReadStream} pause{ Params :  Returns : FakeReadStream} fetch{ Params : long Returns : ReadStream<T>} pause{ Params : Handler<Void> Returns : FakeReadStream} resume{ Params :  Returns : FakeReadStream} resume{ Params : Handler<Void> Returns : FakeReadStream} exceptionHandler{ Params : Handler<Throwable> Returns : FakeReadStream} endHandler{ Params : Handler<Void> Returns : FakeReadStream} clearReceived{ Params :  Returns : void} setWriteQueueMaxSize{ Params : int Returns : FakeWriteStream} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : FakeWriteStream} write{ Params : T Returns : Future<Void>} exceptionHandler{ Params : Handler<Throwable> Returns : FakeWriteStream} end{ Params :  Returns : Future<Void>} ,fetch end ,,,,,,,,,null
vert.x-master,io.vertx.core.streams,WriteStreamTest,1,1,0,0,0,false,AsyncTestBase ,0 ,StreamBase EndWithItemStreamAsync ,,exceptionHandler{ Params : Handler<Throwable> Returns : StreamBase<T>} write{ Params : T Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : StreamBase<T>} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : StreamBase<T>} end{ Params :  Returns : Future<Void>} write{ Params : Object Returns : Future<Void>} end{ Params :  Returns : Future<Void>} testEndWithItemStreamAsync{ Params :  Returns : void} ,exceptionHandler write setWriteQueueMaxSize writeQueueFull drainHandler end write end ,,,,,,,,UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException AtomicInteger AtomicInteger Object Throwable EndWithItemStreamAsync EndWithItemStreamAsync EndWithItemStreamAsync ,resolvedFut: 
vert.x-master,io.vertx.core.streams,StreamBase,3,0,0,1,0,false,AsyncTestBase ,0 ,StreamBase EndWithItemStreamAsync ,,exceptionHandler{ Params : Handler<Throwable> Returns : StreamBase<T>} write{ Params : T Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : StreamBase<T>} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : StreamBase<T>} end{ Params :  Returns : Future<Void>} write{ Params : Object Returns : Future<Void>} end{ Params :  Returns : Future<Void>} testEndWithItemStreamAsync{ Params :  Returns : void} ,exceptionHandler write setWriteQueueMaxSize writeQueueFull drainHandler end write end ,,,,WriteStream ,,,,UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,resolvedFut: 
vert.x-master,io.vertx.core.streams,EndWithItemStreamAsync,3,0,0,1,0,false,AsyncTestBase ,0 ,StreamBase EndWithItemStreamAsync ,writeCount: AtomicInteger writeFut: Promise<Void> endCount: AtomicInteger endFut: Promise<Void> ,exceptionHandler{ Params : Handler<Throwable> Returns : StreamBase<T>} write{ Params : T Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : StreamBase<T>} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : StreamBase<T>} end{ Params :  Returns : Future<Void>} write{ Params : Object Returns : Future<Void>} end{ Params :  Returns : Future<Void>} testEndWithItemStreamAsync{ Params :  Returns : void} ,exceptionHandler write setWriteQueueMaxSize writeQueueFull drainHandler end write end ,,,,,,,,AtomicInteger AtomicInteger ,endFut: 
vert.x-master,io.vertx.core,TimerTest,1,1,0,0,0,false,VertxTestBase ,0 ,PeriodicArg ,,testTimer{ Params :  Returns : void} testPeriodic1{ Params :  Returns : void} testPeriodic2{ Params :  Returns : void} testPeriodicWithInitialDelay1{ Params :  Returns : void} testPeriodicWithInitialDelay2{ Params :  Returns : void} testTimings{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} start{ Params :  Returns : void} periodic{ Params : PeriodicArg,BiFunction<PeriodicArg,Handler<Long>,Long> Returns : void} handle{ Params : Long Returns : void} timer{ Params : long Returns : void} handle{ Params : Long Returns : void} setEndTimer{ Params :  Returns : void} testCancelTimerWhenScheduledOnWorker{ Params :  Returns : void} start{ Params :  Returns : void} testWorkerTimer{ Params :  Returns : void} start{ Params :  Returns : void} testFailInTimer{ Params :  Returns : void} testCancellationRace{ Params :  Returns : void} testUndeployCancelTimer{ Params :  Returns : void} testUndeployCancelPeriodic{ Params :  Returns : void} testUndeployCancellation{ Params : Supplier<Long> Returns : void} start{ Params :  Returns : void} testTimerOnContext{ Params :  Returns : void} testPeriodicOnContext{ Params :  Returns : void} handle{ Params : Long Returns : void} handle{ Params : Long Returns : void} testRaceWhenTimerCreatedOutsideEventLoop{ Params :  Returns : void} testContextTimer{ Params :  Returns : void} start{ Params :  Returns : void} ,start start start start handle handle start ,,,,,,,,PeriodicArg PeriodicArg PeriodicArg PeriodicArg AtomicInteger MyVerticle AtomicLong Handler AtomicLong Handler AbstractVerticle DeploymentOptions AbstractVerticle DeploymentOptions RuntimeException AtomicBoolean AssertionError AtomicLong AbstractVerticle Handler Handler AtomicInteger Thread AbstractVerticle ,: 
vert.x-master,io.vertx.core,MyVerticle,1,0,0,0,0,false,VertxTestBase ,0 ,PeriodicArg ,cnt: AtomicInteger ,testTimer{ Params :  Returns : void} testPeriodic1{ Params :  Returns : void} testPeriodic2{ Params :  Returns : void} testPeriodicWithInitialDelay1{ Params :  Returns : void} testPeriodicWithInitialDelay2{ Params :  Returns : void} testTimings{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} start{ Params :  Returns : void} periodic{ Params : PeriodicArg,BiFunction<PeriodicArg,Handler<Long>,Long> Returns : void} handle{ Params : Long Returns : void} timer{ Params : long Returns : void} handle{ Params : Long Returns : void} setEndTimer{ Params :  Returns : void} testCancelTimerWhenScheduledOnWorker{ Params :  Returns : void} start{ Params :  Returns : void} testWorkerTimer{ Params :  Returns : void} start{ Params :  Returns : void} testFailInTimer{ Params :  Returns : void} testCancellationRace{ Params :  Returns : void} testUndeployCancelTimer{ Params :  Returns : void} testUndeployCancelPeriodic{ Params :  Returns : void} testUndeployCancellation{ Params : Supplier<Long> Returns : void} start{ Params :  Returns : void} testTimerOnContext{ Params :  Returns : void} testPeriodicOnContext{ Params :  Returns : void} handle{ Params : Long Returns : void} handle{ Params : Long Returns : void} testRaceWhenTimerCreatedOutsideEventLoop{ Params :  Returns : void} testContextTimer{ Params :  Returns : void} start{ Params :  Returns : void} ,start start start start handle handle start ,,,,,,,,AtomicInteger ,: 
vert.x-master,io.vertx.core,PeriodicArg,3,0,0,1,0,false,VertxTestBase ,0 ,PeriodicArg ,initialDelay: long delay: long ,testTimer{ Params :  Returns : void} testPeriodic1{ Params :  Returns : void} testPeriodic2{ Params :  Returns : void} testPeriodicWithInitialDelay1{ Params :  Returns : void} testPeriodicWithInitialDelay2{ Params :  Returns : void} testTimings{ Params :  Returns : void} testInVerticle{ Params :  Returns : void} start{ Params :  Returns : void} periodic{ Params : PeriodicArg,BiFunction<PeriodicArg,Handler<Long>,Long> Returns : void} handle{ Params : Long Returns : void} timer{ Params : long Returns : void} handle{ Params : Long Returns : void} setEndTimer{ Params :  Returns : void} testCancelTimerWhenScheduledOnWorker{ Params :  Returns : void} start{ Params :  Returns : void} testWorkerTimer{ Params :  Returns : void} start{ Params :  Returns : void} testFailInTimer{ Params :  Returns : void} testCancellationRace{ Params :  Returns : void} testUndeployCancelTimer{ Params :  Returns : void} testUndeployCancelPeriodic{ Params :  Returns : void} testUndeployCancellation{ Params : Supplier<Long> Returns : void} start{ Params :  Returns : void} testTimerOnContext{ Params :  Returns : void} testPeriodicOnContext{ Params :  Returns : void} handle{ Params : Long Returns : void} handle{ Params : Long Returns : void} testRaceWhenTimerCreatedOutsideEventLoop{ Params :  Returns : void} testContextTimer{ Params :  Returns : void} start{ Params :  Returns : void} ,start start start start handle handle start ,,,,,,,,,null
vert.x-master,io.vertx.core,VerticleFactoryTest,1,1,0,0,0,false,VertxTestBase ,0 ,TestVerticleFactory TestVerticle ,,setUp{ Params :  Returns : void} testRegister{ Params :  Returns : void} testUnregister{ Params :  Returns : void} testRegisterTwice{ Params :  Returns : void} testUnregisterTwice{ Params :  Returns : void} testUnregisterNoFact{ Params :  Returns : void} testRegisterUnregisterTwo{ Params :  Returns : void} testMatchWithPrefix{ Params :  Returns : void} testMatchWithSuffix{ Params :  Returns : void} testNoMatch{ Params :  Returns : void} testOrdering{ Params :  Returns : void} testOrderingFailedInCreate{ Params :  Returns : void} testOrderingFailedInCreate2{ Params :  Returns : void} testOrderingFailedInCreateAll{ Params :  Returns : void} testDeploymentOnClosedVertxWithCompletionHandler{ Params :  Returns : void} testDeploymentOnClosedVertxWithoutCompletionHandler{ Params :  Returns : void} order{ Params :  Returns : int} init{ Params : Vertx Returns : void} prefix{ Params :  Returns : String} createVerticle{ Params : String,ClassLoader,Promise<Callable<Verticle>> Returns : void} close{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testClassLoader{ Params :  Returns : void} prefix{ Params :  Returns : String} createVerticle{ Params : String,ClassLoader,Promise<Callable<Verticle>> Returns : void} ,order init prefix createVerticle close start stop prefix createVerticle ,,,,,,,,TestVerticleFactory TestVerticleFactory TestVerticleFactory TestVerticleFactory TestVerticleFactory TestVerticleFactory TestVerticleFactory TestVerticle TestVerticle TestVerticle TestVerticleFactory TestVerticleFactory TestVerticleFactory DeploymentOptions DeploymentOptions DeploymentOptions TestVerticle TestVerticle TestVerticle TestVerticleFactory TestVerticleFactory TestVerticleFactory DeploymentOptions DeploymentOptions DeploymentOptions TestVerticle TestVerticle TestVerticleFactory TestVerticleFactory DeploymentOptions TestVerticle TestVerticleFactory TestVerticleFactory TestVerticleFactory TestVerticle TestVerticleFactory TestVerticleFactory TestVerticleFactory TestVerticle TestVerticleFactory TestVerticleFactory TestVerticleFactory TestVerticle TestVerticleFactory TestVerticleFactory TestVerticleFactory TestVerticle TestVerticle ClassNotFoundException ClassLoader AtomicReference VerticleFactory AbstractVerticle DeploymentOptions ,: 
vert.x-master,io.vertx.core,TestVerticleFactory,3,0,0,0,0,false,VertxTestBase ,0 ,TestVerticleFactory TestVerticle ,prefix: String verticle: Verticle identifier: String isolationGroup: String order: int failInCreate: boolean createContext: Context createWorkerThread: boolean ,setUp{ Params :  Returns : void} testRegister{ Params :  Returns : void} testUnregister{ Params :  Returns : void} testRegisterTwice{ Params :  Returns : void} testUnregisterTwice{ Params :  Returns : void} testUnregisterNoFact{ Params :  Returns : void} testRegisterUnregisterTwo{ Params :  Returns : void} testMatchWithPrefix{ Params :  Returns : void} testMatchWithSuffix{ Params :  Returns : void} testNoMatch{ Params :  Returns : void} testOrdering{ Params :  Returns : void} testOrderingFailedInCreate{ Params :  Returns : void} testOrderingFailedInCreate2{ Params :  Returns : void} testOrderingFailedInCreateAll{ Params :  Returns : void} testDeploymentOnClosedVertxWithCompletionHandler{ Params :  Returns : void} testDeploymentOnClosedVertxWithoutCompletionHandler{ Params :  Returns : void} order{ Params :  Returns : int} init{ Params : Vertx Returns : void} prefix{ Params :  Returns : String} createVerticle{ Params : String,ClassLoader,Promise<Callable<Verticle>> Returns : void} close{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testClassLoader{ Params :  Returns : void} prefix{ Params :  Returns : String} createVerticle{ Params : String,ClassLoader,Promise<Callable<Verticle>> Returns : void} ,order init prefix createVerticle close start stop prefix createVerticle ,,,,VerticleFactory ,,,,ClassNotFoundException ,promise: , () -> verticle
vert.x-master,io.vertx.core,TestVerticle,3,0,0,0,0,false,VertxTestBase ,0 ,TestVerticleFactory TestVerticle ,startCalled: boolean ,setUp{ Params :  Returns : void} testRegister{ Params :  Returns : void} testUnregister{ Params :  Returns : void} testRegisterTwice{ Params :  Returns : void} testUnregisterTwice{ Params :  Returns : void} testUnregisterNoFact{ Params :  Returns : void} testRegisterUnregisterTwo{ Params :  Returns : void} testMatchWithPrefix{ Params :  Returns : void} testMatchWithSuffix{ Params :  Returns : void} testNoMatch{ Params :  Returns : void} testOrdering{ Params :  Returns : void} testOrderingFailedInCreate{ Params :  Returns : void} testOrderingFailedInCreate2{ Params :  Returns : void} testOrderingFailedInCreateAll{ Params :  Returns : void} testDeploymentOnClosedVertxWithCompletionHandler{ Params :  Returns : void} testDeploymentOnClosedVertxWithoutCompletionHandler{ Params :  Returns : void} order{ Params :  Returns : int} init{ Params : Vertx Returns : void} prefix{ Params :  Returns : String} createVerticle{ Params : String,ClassLoader,Promise<Callable<Verticle>> Returns : void} close{ Params :  Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} testClassLoader{ Params :  Returns : void} prefix{ Params :  Returns : String} createVerticle{ Params : String,ClassLoader,Promise<Callable<Verticle>> Returns : void} ,order init prefix createVerticle close start stop prefix createVerticle ,,,,,,,,,promise: , () -> verticle
vert.x-master,io.vertx.core,VertxOptionsTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testOptions{ Params :  Returns : void} testCopyOptions{ Params :  Returns : void} testDefaultJsonOptions{ Params :  Returns : void} testDefaultJsonVertxOptions{ Params :  Returns : void} testJsonOptions{ Params :  Returns : void} ,,,,,,,,,VertxOptions FakeClusterManager VertxOptions Random MetricsOptions TracingOptions FakeTracerFactory VertxOptions VertxOptions VertxOptions JsonObject VertxOptions VertxOptions VertxOptions JsonObject Random VertxOptions JsonObject JsonObject JsonObject JsonObject JsonObject ,options: 
vert.x-master,io.vertx.core,VertxStartFailureTest,1,1,0,0,0,false,AsyncTestBase ,0 ,0 ,,testEventBusStartFailure{ Params :  Returns : void} testClusterManagerStartFailure{ Params :  Returns : void} join{ Params : Promise<Void> Returns : void} testHAManagerGetMapFailure{ Params :  Returns : void} getSyncMap{ Params : String Returns : Map<K,V>} testHAManagerInitFailure{ Params :  Returns : void} nodeListener{ Params : NodeListener Returns : void} failStart{ Params : VertxOptions Returns : Throwable} eventLoopGroup{ Params : int,int,ThreadFactory,int Returns : EventLoopGroup} ,join getSyncMap nodeListener eventLoopGroup ,,,,,,,,FakeDNSServer FakeClusterManager VertxOptions Exception FakeClusterManager VertxOptions RuntimeException FakeClusterManager VertxOptions RuntimeException FakeClusterManager VertxOptions ArrayList CountDownLatch JDKTransport AtomicReference VertxBuilder ,resultRef: 
vert.x-master,io.vertx.core,VertxTest,1,1,0,0,0,false,AsyncTestBase ,0 ,0 ,RUNNER: org.openjdk.jmh.runner.Runner repeatRule: RepeatRule ,runGC{ Params :  Returns : void} testCloseHooksCalled{ Params :  Returns : void} testCloseHookFailure1{ Params :  Returns : void} close{ Params : Promise<Void> Returns : void} testCloseHookFailure2{ Params :  Returns : void} close{ Params : Promise<Void> Returns : void} testCloseFuture{ Params :  Returns : void} testFinalizeHttpClient{ Params :  Returns : void} testCascadeCloseHttpClient{ Params :  Returns : void} testFinalizeNetClient{ Params :  Returns : void} testCascadeCloseNetClient{ Params :  Returns : void} testCascadeCloseDatagramSocket{ Params :  Returns : void} testFinalizeSharedWorkerExecutor{ Params :  Returns : void} testStickContextFinalization{ Params :  Returns : void} testCloseVertxShouldWaitConcurrentCloseHook{ Params :  Returns : void} testEnableTCCL{ Params :  Returns : void} testDisableTCCL{ Params :  Returns : void} testTCCL{ Params : boolean Returns : void} testWorkerExecutorConcurrentCloseWithVertx{ Params :  Returns : void} testThreadLeak{ Params :  Returns : void} ,close close ,runGC ,,,,,,,Runner OptionsBuilder RepeatRule AtomicInteger AtomicInteger RuntimeException Hook Hook AtomicInteger RuntimeException Hook Hook AtomicBoolean AtomicBoolean CountDownLatch AtomicReference WeakReference AtomicBoolean AtomicBoolean AtomicBoolean CountDownLatch AtomicReference CountDownLatch AtomicInteger WeakReference AtomicBoolean AtomicReference Thread WeakReference CountDownLatch AtomicReference CloseFuture AtomicBoolean VertxOptions URLClassLoader CountDownLatch WeakReference ,: 
vert.x-master,io.vertx.core,Hook,1,0,0,0,0,false,AsyncTestBase ,0 ,0 ,,runGC{ Params :  Returns : void} testCloseHooksCalled{ Params :  Returns : void} testCloseHookFailure1{ Params :  Returns : void} close{ Params : Promise<Void> Returns : void} testCloseHookFailure2{ Params :  Returns : void} close{ Params : Promise<Void> Returns : void} testCloseFuture{ Params :  Returns : void} testFinalizeHttpClient{ Params :  Returns : void} testCascadeCloseHttpClient{ Params :  Returns : void} testFinalizeNetClient{ Params :  Returns : void} testCascadeCloseNetClient{ Params :  Returns : void} testCascadeCloseDatagramSocket{ Params :  Returns : void} testFinalizeSharedWorkerExecutor{ Params :  Returns : void} testStickContextFinalization{ Params :  Returns : void} testCloseVertxShouldWaitConcurrentCloseHook{ Params :  Returns : void} testEnableTCCL{ Params :  Returns : void} testDisableTCCL{ Params :  Returns : void} testTCCL{ Params : boolean Returns : void} testWorkerExecutorConcurrentCloseWithVertx{ Params :  Returns : void} testThreadLeak{ Params :  Returns : void} ,close close ,runGC ,,,Closeable ,,,,RuntimeException ,Future: 
vert.x-master,io.vertx.core,Hook,1,0,0,0,0,false,AsyncTestBase ,0 ,0 ,,runGC{ Params :  Returns : void} testCloseHooksCalled{ Params :  Returns : void} testCloseHookFailure1{ Params :  Returns : void} close{ Params : Promise<Void> Returns : void} testCloseHookFailure2{ Params :  Returns : void} close{ Params : Promise<Void> Returns : void} testCloseFuture{ Params :  Returns : void} testFinalizeHttpClient{ Params :  Returns : void} testCascadeCloseHttpClient{ Params :  Returns : void} testFinalizeNetClient{ Params :  Returns : void} testCascadeCloseNetClient{ Params :  Returns : void} testCascadeCloseDatagramSocket{ Params :  Returns : void} testFinalizeSharedWorkerExecutor{ Params :  Returns : void} testStickContextFinalization{ Params :  Returns : void} testCloseVertxShouldWaitConcurrentCloseHook{ Params :  Returns : void} testEnableTCCL{ Params :  Returns : void} testDisableTCCL{ Params :  Returns : void} testTCCL{ Params : boolean Returns : void} testWorkerExecutorConcurrentCloseWithVertx{ Params :  Returns : void} testThreadLeak{ Params :  Returns : void} ,close close ,runGC ,,,Closeable ,,,,RuntimeException ,Future: 
vert.x-master,io.vertx.core,VertxUseDaemonThreadTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,useDaemonThread: Boolean ,params{ Params :  Returns : List<Object[]>} getOptions{ Params :  Returns : VertxOptions} testUseDaemonThread{ Params :  Returns : void} ,getOptions ,params ,,,,,,,,: 
vert.x-master,io.vertx.it,CustomExecutorService,1,1,0,0,0,false,ThreadPoolExecutor ,0 ,0 ,executing: ThreadLocal<Boolean> ,beforeExecute{ Params : Thread,Runnable Returns : void} afterExecute{ Params : Runnable,Throwable Returns : void} terminated{ Params :  Returns : void} ,beforeExecute afterExecute terminated ,,,,,,,,LinkedBlockingQueue ,NUM: 
vert.x-master,io.vertx.it,CustomExecutorServiceFactory,1,1,0,0,0,false,0 ,ExecutorServiceFactory ,0 ,NUM: AtomicInteger ,createExecutor{ Params : ThreadFactory,Integer,Integer Returns : ExecutorService} ,createExecutor ,,,,ExecutorServiceFactory ,,,,AtomicInteger CustomExecutorService ,NUM: 
vert.x-master,io.vertx.it,CustomFileResolver,1,1,0,0,0,false,0 ,FileResolver ,0 ,closed: boolean ,close{ Params :  Returns : void} resolveFile{ Params : String Returns : File} ,close resolveFile ,,,,FileResolver ,boolean ,,boolean ,File ,NUM: 
vert.x-master,io.vertx.it,CustomFileResolverFactory,1,1,0,0,0,false,0 ,FileResolverFactory ,0 ,,resolver{ Params : VertxOptions Returns : FileResolver} ,resolver ,,,,FileResolverFactory ,,,,CustomFileResolver ,NUM: 
vert.x-master,io.vertx.it,CustomJsonCodecTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testJsonObject{ Params :  Returns : void} testJsonArray{ Params :  Returns : void} ,,,,,,,,,JsonObject JsonArray ,array: 
vert.x-master,io.vertx.it,CustomJsonFactory,1,1,0,0,0,false,0 ,JsonFactory ,0 ,CODEC: JsonCodec ,fromString{ Params : String,Class<T> Returns : T} fromBuffer{ Params : Buffer,Class<T> Returns : T} fromValue{ Params : Object,Class<T> Returns : T} toString{ Params : Object,boolean Returns : String} toBuffer{ Params : Object,boolean Returns : Buffer} codec{ Params :  Returns : JsonCodec} ,fromString fromBuffer fromValue toString toBuffer codec ,,,,JsonFactory ,,,,JsonCodec UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,array: 
vert.x-master,io.vertx.it,CustomVertxThread,1,1,0,0,0,false,VertxThread ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.it,CustomVertxThreadFactory,1,1,0,0,0,false,0 ,VertxThreadFactory ,0 ,,newVertxThread{ Params : Runnable,String,boolean,long,TimeUnit Returns : VertxThread} ,newVertxThread ,,,,VertxThreadFactory ,,,,CustomVertxThread ,array: 
vert.x-master,io.vertx.it,ExecutorServiceFactoryTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testExecuteBlocking{ Params :  Returns : void} ,,,,,,,,,CountDownLatch ,CustomExecutorServiceFactory.NUM: 
vert.x-master,io.vertx.it,FileResolverFactoryTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testResolver{ Params :  Returns : void} ,,,,,,,,,,resolver: 
vert.x-master,io.vertx.it,HAProxyTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testHttpWithoutHAProxySupport{ Params :  Returns : void} ,,,,,,,,,HttpServerOptions ,vertx: 
vert.x-master,io.vertx.it,JsonCodecTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testJsonObject{ Params :  Returns : void} ,,,,,,,,,JsonObject ,: 
vert.x-master,io.vertx.it,JsonTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testJsonObject{ Params :  Returns : void} testJsonArray{ Params :  Returns : void} testHttp{ Params :  Returns : void} testEventBus{ Params :  Returns : void} ,,,,,,,,,JsonObject JsonArray ,vertx: 
vert.x-master,io.vertx.it,JULLogDelegateTest,1,1,0,0,0,false,0 ,0 ,0 ,logger: Logger recording: Recording ,initialize{ Params :  Returns : void} testDelegateUnwrap{ Params :  Returns : void} testInfo{ Params :  Returns : void} testError{ Params :  Returns : void} testWarning{ Params :  Returns : void} ,,initialize ,,,,,,,Recording NullPointerException IllegalStateException IllegalStateException NullPointerException IllegalStateException IllegalStateException NullPointerException IllegalStateException IllegalStateException ,result: , "java.lang.IllegalStateException"
vert.x-master,io.vertx.it,Log4J2LogDelegateTest,1,1,0,0,0,false,0 ,0 ,0 ,recording: StreamRecording ,initialize{ Params :  Returns : void} terminate{ Params :  Returns : void} testDelegateUnwrap{ Params :  Returns : void} testInfo{ Params :  Returns : void} testError{ Params :  Returns : void} testWarning{ Params :  Returns : void} testMethodName{ Params :  Returns : void} run{ Params :  Returns : void} ,run ,initialize terminate ,,,,,,,StreamRecording NullPointerException IllegalStateException IllegalStateException NullPointerException IllegalStateException IllegalStateException NullPointerException IllegalStateException IllegalStateException Runnable ,result: , ".run:"
vert.x-master,io.vertx.it,NettyCompatTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testAddressResolver{ Params :  Returns : void} testHttp2{ Params :  Returns : void} ,,,,,,,,,HttpServerOptions OpenSSLEngineOptions HttpClientOptions OpenSSLEngineOptions ,: 
vert.x-master,io.vertx.it,Recording,1,1,0,0,0,false,0 ,0 ,0 ,error: ByteArrayOutputStream handler: Handler logger: Logger ,start{ Params :  Returns : void} stop{ Params :  Returns : void} get{ Params :  Returns : String} execute{ Params : Runnable Returns : String} ,,,,,,Logger ,,Logger ,ByteArrayOutputStream StreamHandler SimpleFormatter ,: 
vert.x-master,io.vertx.it,SLF4JLogDelegateTest,1,1,0,0,0,false,0 ,0 ,TestLocationAwareLogger ,,testDelegateUnwrap{ Params :  Returns : void} testInfo{ Params :  Returns : void} testInfoLocationAware{ Params :  Returns : void} testInfo{ Params : Logger Returns : void} testError{ Params :  Returns : void} testErrorLocationAware{ Params :  Returns : void} testError{ Params : Logger Returns : void} assertContains{ Params : String,String Returns : void} testWarning{ Params :  Returns : void} testWarningLocationAware{ Params :  Returns : void} testWarning{ Params : Logger Returns : void} setStream{ Params : PrintStream Returns : void} record{ Params : Runnable Returns : String} quiet{ Params : Callable<Void> Returns : void} log{ Params : Marker,String,int,String,Object[],Throwable Returns : void} getName{ Params :  Returns : String} isTraceEnabled{ Params :  Returns : boolean} trace{ Params : String Returns : void} trace{ Params : String,Object Returns : void} trace{ Params : String,Object,Object Returns : void} trace{ Params : String,Object Returns : void} trace{ Params : String,Throwable Returns : void} isTraceEnabled{ Params : Marker Returns : boolean} trace{ Params : Marker,String Returns : void} trace{ Params : Marker,String,Object Returns : void} trace{ Params : Marker,String,Object,Object Returns : void} trace{ Params : Marker,String,Object Returns : void} trace{ Params : Marker,String,Throwable Returns : void} isDebugEnabled{ Params :  Returns : boolean} debug{ Params : String Returns : void} debug{ Params : String,Object Returns : void} debug{ Params : String,Object,Object Returns : void} debug{ Params : String,Object Returns : void} debug{ Params : String,Throwable Returns : void} isDebugEnabled{ Params : Marker Returns : boolean} debug{ Params : Marker,String Returns : void} debug{ Params : Marker,String,Object Returns : void} debug{ Params : Marker,String,Object,Object Returns : void} debug{ Params : Marker,String,Object Returns : void} debug{ Params : Marker,String,Throwable Returns : void} isInfoEnabled{ Params :  Returns : boolean} info{ Params : String Returns : void} info{ Params : String,Object Returns : void} info{ Params : String,Object,Object Returns : void} info{ Params : String,Object Returns : void} info{ Params : String,Throwable Returns : void} isInfoEnabled{ Params : Marker Returns : boolean} info{ Params : Marker,String Returns : void} info{ Params : Marker,String,Object Returns : void} info{ Params : Marker,String,Object,Object Returns : void} info{ Params : Marker,String,Object Returns : void} info{ Params : Marker,String,Throwable Returns : void} isWarnEnabled{ Params :  Returns : boolean} warn{ Params : String Returns : void} warn{ Params : String,Object Returns : void} warn{ Params : String,Object Returns : void} warn{ Params : String,Object,Object Returns : void} warn{ Params : String,Throwable Returns : void} isWarnEnabled{ Params : Marker Returns : boolean} warn{ Params : Marker,String Returns : void} warn{ Params : Marker,String,Object Returns : void} warn{ Params : Marker,String,Object,Object Returns : void} warn{ Params : Marker,String,Object Returns : void} warn{ Params : Marker,String,Throwable Returns : void} isErrorEnabled{ Params :  Returns : boolean} error{ Params : String Returns : void} error{ Params : String,Object Returns : void} error{ Params : String,Object,Object Returns : void} error{ Params : String,Object Returns : void} error{ Params : String,Throwable Returns : void} isErrorEnabled{ Params : Marker Returns : boolean} error{ Params : Marker,String Returns : void} error{ Params : Marker,String,Object Returns : void} error{ Params : Marker,String,Object,Object Returns : void} error{ Params : Marker,String,Object Returns : void} error{ Params : Marker,String,Throwable Returns : void} ,log getName isTraceEnabled trace trace trace trace trace isTraceEnabled trace trace trace trace trace isDebugEnabled debug debug debug debug debug isDebugEnabled debug debug debug debug debug isInfoEnabled info info info info info isInfoEnabled info info info info info isWarnEnabled warn warn warn warn warn isWarnEnabled warn warn warn warn warn isErrorEnabled error error error error error isErrorEnabled error error error error error ,,,,,,,,Logger SLF4JLogDelegate TestLocationAwareLogger NullPointerException IllegalStateException IllegalStateException NullPointerException IllegalStateException IllegalStateException NullPointerException IllegalStateException IllegalStateException IllegalStateException ByteArrayOutputStream PrintStream AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError ,action: 
vert.x-master,io.vertx.it,TestLocationAwareLogger,3,0,0,1,0,false,0 ,0 ,TestLocationAwareLogger ,actual: org.slf4j.Logger ,testDelegateUnwrap{ Params :  Returns : void} testInfo{ Params :  Returns : void} testInfoLocationAware{ Params :  Returns : void} testInfo{ Params : Logger Returns : void} testError{ Params :  Returns : void} testErrorLocationAware{ Params :  Returns : void} testError{ Params : Logger Returns : void} assertContains{ Params : String,String Returns : void} testWarning{ Params :  Returns : void} testWarningLocationAware{ Params :  Returns : void} testWarning{ Params : Logger Returns : void} setStream{ Params : PrintStream Returns : void} record{ Params : Runnable Returns : String} quiet{ Params : Callable<Void> Returns : void} log{ Params : Marker,String,int,String,Object[],Throwable Returns : void} getName{ Params :  Returns : String} isTraceEnabled{ Params :  Returns : boolean} trace{ Params : String Returns : void} trace{ Params : String,Object Returns : void} trace{ Params : String,Object,Object Returns : void} trace{ Params : String,Object Returns : void} trace{ Params : String,Throwable Returns : void} isTraceEnabled{ Params : Marker Returns : boolean} trace{ Params : Marker,String Returns : void} trace{ Params : Marker,String,Object Returns : void} trace{ Params : Marker,String,Object,Object Returns : void} trace{ Params : Marker,String,Object Returns : void} trace{ Params : Marker,String,Throwable Returns : void} isDebugEnabled{ Params :  Returns : boolean} debug{ Params : String Returns : void} debug{ Params : String,Object Returns : void} debug{ Params : String,Object,Object Returns : void} debug{ Params : String,Object Returns : void} debug{ Params : String,Throwable Returns : void} isDebugEnabled{ Params : Marker Returns : boolean} debug{ Params : Marker,String Returns : void} debug{ Params : Marker,String,Object Returns : void} debug{ Params : Marker,String,Object,Object Returns : void} debug{ Params : Marker,String,Object Returns : void} debug{ Params : Marker,String,Throwable Returns : void} isInfoEnabled{ Params :  Returns : boolean} info{ Params : String Returns : void} info{ Params : String,Object Returns : void} info{ Params : String,Object,Object Returns : void} info{ Params : String,Object Returns : void} info{ Params : String,Throwable Returns : void} isInfoEnabled{ Params : Marker Returns : boolean} info{ Params : Marker,String Returns : void} info{ Params : Marker,String,Object Returns : void} info{ Params : Marker,String,Object,Object Returns : void} info{ Params : Marker,String,Object Returns : void} info{ Params : Marker,String,Throwable Returns : void} isWarnEnabled{ Params :  Returns : boolean} warn{ Params : String Returns : void} warn{ Params : String,Object Returns : void} warn{ Params : String,Object Returns : void} warn{ Params : String,Object,Object Returns : void} warn{ Params : String,Throwable Returns : void} isWarnEnabled{ Params : Marker Returns : boolean} warn{ Params : Marker,String Returns : void} warn{ Params : Marker,String,Object Returns : void} warn{ Params : Marker,String,Object,Object Returns : void} warn{ Params : Marker,String,Object Returns : void} warn{ Params : Marker,String,Throwable Returns : void} isErrorEnabled{ Params :  Returns : boolean} error{ Params : String Returns : void} error{ Params : String,Object Returns : void} error{ Params : String,Object,Object Returns : void} error{ Params : String,Object Returns : void} error{ Params : String,Throwable Returns : void} isErrorEnabled{ Params : Marker Returns : boolean} error{ Params : Marker,String Returns : void} error{ Params : Marker,String,Object Returns : void} error{ Params : Marker,String,Object,Object Returns : void} error{ Params : Marker,String,Object Returns : void} error{ Params : Marker,String,Throwable Returns : void} ,log getName isTraceEnabled trace trace trace trace trace isTraceEnabled trace trace trace trace trace isDebugEnabled debug debug debug debug debug isDebugEnabled debug debug debug debug debug isInfoEnabled info info info info info isInfoEnabled info info info info info isWarnEnabled warn warn warn warn warn isWarnEnabled warn warn warn warn warn isErrorEnabled error error error error error isErrorEnabled error error error error error ,,,,LocationAwareLogger ,org.slf4j.Logger ,,org.slf4j.Logger ,AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError AssertionError ,actual: , marker, msg, t
vert.x-master,io.vertx.it,SLF4JNoImplTest,1,1,0,0,0,false,0 ,0 ,0 ,,getClass{ Params : String Returns : Object} testImplementation{ Params :  Returns : void} ,,getClass ,,,,,,,,: , delegate instanceof JULLogDelegate
vert.x-master,io.vertx.it,SSLEngineTest,1,1,0,0,0,false,HttpTestBase ,0 ,0 ,OPEN_SSL: boolean ,hasAlpn{ Params :  Returns : boolean} testDefaultEngineWithAlpn{ Params :  Returns : void} testJdkEngineWithAlpn{ Params :  Returns : void} testOpenSSLEngineWithAlpn{ Params :  Returns : void} testDefaultEngine{ Params :  Returns : void} testJdkEngine{ Params :  Returns : void} testOpenSSLEngine{ Params :  Returns : void} doTest{ Params : SSLEngineOptions,boolean,HttpVersion,String,String,boolean Returns : void} ,,hasAlpn ,,,,,,,JdkSSLEngineOptions OpenSSLEngineOptions JdkSSLEngineOptions OpenSSLEngineOptions HttpServerOptions HttpClientOptions ,: 
vert.x-master,io.vertx.it,StreamRecording,1,1,0,0,0,false,0 ,0 ,0 ,ORIGINAL_ERR: PrintStream error: ByteArrayOutputStream ,start{ Params :  Returns : void} stop{ Params :  Returns : void} get{ Params :  Returns : String} terminate{ Params :  Returns : void} execute{ Params : Runnable Returns : String} ,,,,,,ByteArrayOutputStream ,,ByteArrayOutputStream ,ByteArrayOutputStream PrintStream ,: 
vert.x-master,io.vertx.it,TransportTest,1,1,0,0,0,false,AsyncTestBase ,0 ,0 ,vertx: Vertx ,tearDown{ Params :  Returns : void} testNoNative{ Params :  Returns : void} testFallbackOnJDK{ Params :  Returns : void} testNetServer{ Params : VertxOptions Returns : void} testDomainSocketServer{ Params :  Returns : void} testDomainSocketClient{ Params :  Returns : void} ,tearDown ,,,,,Vertx ,,Vertx ,VertxOptions VertxOptions ,: 
vert.x-master,io.vertx.it,VertxThreadFactoryTest,1,1,0,0,0,false,VertxTestBase ,0 ,0 ,,testJsonObject{ Params :  Returns : void} ,,,,,,,,,,: 
vert.x-master,io.vertx.it,VertxTracerFactoryTest,1,1,0,0,0,false,AsyncTestBase ,0 ,0 ,,testNoOptions{ Params :  Returns : void} ,,,,,,,,,,v: 
vert.x-master,io.vertx.test.core,AsyncTestBase,1,1,0,0,0,false,0 ,0 ,0 ,log: Logger latch: CountDownLatch throwable: Throwable thrownThread: Thread testCompleteCalled: boolean awaitCalled: boolean threadChecksEnabled: boolean tearingDown: boolean mainThreadName: String lateFailure: boolean threadNames: Map<String, Exception> name: TestName ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} before{ Params :  Returns : void} after{ Params :  Returns : void} waitFor{ Params : int Returns : void} waitForMore{ Params : int Returns : void} complete{ Params :  Returns : void} testComplete{ Params :  Returns : void} await{ Params :  Returns : void} await{ Params : long,TimeUnit Returns : void} rethrowError{ Params :  Returns : void} disableThreadChecks{ Params :  Returns : void} afterAsyncTestBase{ Params :  Returns : void} handleThrowable{ Params : Throwable Returns : void} clearThrown{ Params :  Returns : void} checkThread{ Params :  Returns : void} assertTrue{ Params : String,boolean Returns : void} assertFalse{ Params : boolean Returns : void} assertArrayEquals{ Params : String,char[],char[] Returns : void} assertSame{ Params : String,Object,Object Returns : void} assertEquals{ Params : long,long Returns : void} assertNull{ Params : Object Returns : void} assertFalse{ Params : String,boolean Returns : void} fail{ Params : String Returns : void} assertNull{ Params : String,Object Returns : void} assertArrayEquals{ Params : String,float[],float[],float Returns : void} assertEquals{ Params : String,double,double Returns : void} assertArrayEquals{ Params : String,double[],double[],double Returns : void} assertArrayEquals{ Params : String,Object[],Object[] Returns : void} assertArrayEquals{ Params : String,short[],short[] Returns : void} assertArrayEquals{ Params : short[],short[] Returns : void} assertArrayEquals{ Params : long[],long[] Returns : void} assertNotNull{ Params : Object Returns : void} assertEquals{ Params : Object,Object Returns : void} assertEquals{ Params : String,Object,Object Returns : void} assertTrue{ Params : boolean Returns : void} assertArrayEquals{ Params : Object[],Object[] Returns : void} assertNotNull{ Params : String,Object Returns : void} assertEquals{ Params : String,double,double,double Returns : void} fail{ Params :  Returns : void} fail{ Params : Throwable Returns : void} assertSame{ Params : Object,Object Returns : void} assertEquals{ Params : String,long,long Returns : void} assertArrayEquals{ Params : String,byte[],byte[] Returns : void} assertArrayEquals{ Params : String,long[],long[] Returns : void} assertEquals{ Params : double,double,double Returns : void} assertThat{ Params : T,Matcher<T> Returns : void} assertEquals{ Params : String,Object[],Object[] Returns : void} assertEquals{ Params : Object[],Object[] Returns : void} assertNotSame{ Params : String,Object,Object Returns : void} assertThat{ Params : String,T,Matcher<T> Returns : void} assertArrayEquals{ Params : float[],float[],float Returns : void} assertNotSame{ Params : Object,Object Returns : void} assertArrayEquals{ Params : byte[],byte[] Returns : void} assertArrayEquals{ Params : char[],char[] Returns : void} assertArrayEquals{ Params : double[],double[],double Returns : void} assertArrayEquals{ Params : int[],int[] Returns : void} assertEquals{ Params : double,double Returns : void} assertArrayEquals{ Params : String,int[],int[] Returns : void} atMostOnce{ Params : Consumer<T> Returns : Handler<T>} onFailure{ Params : Consumer<Throwable> Returns : Handler<AsyncResult<T>>} awaitFuture{ Params : Future<T> Returns : T} awaitFuture{ Params : Future<T>,long,TimeUnit Returns : T} awaitFuture{ Params : CompletionStage<T> Returns : T} awaitFuture{ Params : CompletionStage<T>,long,TimeUnit Returns : T} awaitLatch{ Params : CountDownLatch Returns : void} awaitLatch{ Params : CountDownLatch,long,TimeUnit Returns : void} assertWaitUntil{ Params : BooleanSupplier Returns : void} waitUntil{ Params : BooleanSupplier Returns : void} waitUntilEquals{ Params : T,Supplier<T> Returns : void} assertWaitUntil{ Params : BooleanSupplier,long Returns : void} assertWaitUntil{ Params : BooleanSupplier,long,String Returns : void} waitUntil{ Params : BooleanSupplier,long Returns : boolean} onSuccess{ Params : Consumer<T> Returns : Handler<AsyncResult<T>>} close{ Params : Vertx Returns : void} assertSameEventLoop{ Params : Context,Context Returns : void} ,,assertWaitUntil waitUntil waitUntilEquals assertWaitUntil assertWaitUntil waitUntil ,,,,,,,ConcurrentHashMap TestName CountDownLatch CountDownLatch IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException Exception AtomicBoolean RuntimeException AssertionError IllegalStateException IllegalStateException CountDownLatch ,((ContextInternal) actual): 
vert.x-master,io.vertx.test.core,AsyncTestBaseTest,1,1,0,0,0,false,AsyncTestBase ,0 ,LateFailureReport ,executor: ExecutorService ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testAssertionFailedFromOtherThread{ Params :  Returns : void} testAssertionFailedFromOtherThreadAwaitBeforeAssertAndTestComplete{ Params :  Returns : void} testAssertionFailedFromOtherThreadForgotToCallAwait{ Params :  Returns : void} testAssertionFailedFromMainThread{ Params :  Returns : void} testAssertionPassedFromOtherThread{ Params :  Returns : void} testAssertionPassedFromMainThread{ Params :  Returns : void} testTimeout{ Params :  Returns : void} testFailFromOtherThread{ Params :  Returns : void} testSuccessfulCompletion{ Params :  Returns : void} testTestCompleteCalledMultipleTimes{ Params :  Returns : void} testAwaitCalledMultipleTimes{ Params :  Returns : void} testNoAssertionsNoTestComplete{ Params :  Returns : void} testNoAssertionsTestComplete{ Params :  Returns : void} testAssertionOKTestComplete{ Params :  Returns : void} testAssertionFailedFromMainThreadWithNoTestComplete{ Params :  Returns : void} waitForMultiple{ Params :  Returns : void} increaseToWait{ Params :  Returns : void} tearDown{ Params :  Returns : void} test{ Params :  Returns : void} testReportLateFailures{ Params :  Returns : void} ,tearDown ,,,,,ExecutorService ,,ExecutorService ,AtomicInteger AtomicInteger CountDownLatch Thread JUnitCore BlockJUnit4ClassRunner AssertionError ,result: 
vert.x-master,io.vertx.test.core,LateFailureReport,3,1,0,1,0,false,AsyncTestBase ,0 ,LateFailureReport ,latch: CountDownLatch ,setUp{ Params :  Returns : void} tearDown{ Params :  Returns : void} testAssertionFailedFromOtherThread{ Params :  Returns : void} testAssertionFailedFromOtherThreadAwaitBeforeAssertAndTestComplete{ Params :  Returns : void} testAssertionFailedFromOtherThreadForgotToCallAwait{ Params :  Returns : void} testAssertionFailedFromMainThread{ Params :  Returns : void} testAssertionPassedFromOtherThread{ Params :  Returns : void} testAssertionPassedFromMainThread{ Params :  Returns : void} testTimeout{ Params :  Returns : void} testFailFromOtherThread{ Params :  Returns : void} testSuccessfulCompletion{ Params :  Returns : void} testTestCompleteCalledMultipleTimes{ Params :  Returns : void} testAwaitCalledMultipleTimes{ Params :  Returns : void} testNoAssertionsNoTestComplete{ Params :  Returns : void} testNoAssertionsTestComplete{ Params :  Returns : void} testAssertionOKTestComplete{ Params :  Returns : void} testAssertionFailedFromMainThreadWithNoTestComplete{ Params :  Returns : void} waitForMultiple{ Params :  Returns : void} increaseToWait{ Params :  Returns : void} tearDown{ Params :  Returns : void} test{ Params :  Returns : void} testReportLateFailures{ Params :  Returns : void} ,tearDown ,,,,,,,,CountDownLatch Thread ,latch: 
vert.x-master,io.vertx.test.core,CheckingSender,1,1,0,0,0,false,0 ,0 ,0 ,data: Buffer context: Context stream: WriteStream<Buffer> error: Throwable countDown: int ,send{ Params :  Returns : void} close{ Params :  Returns : Throwable} ,,,,,,int ,,int ,,: 
vert.x-master,io.vertx.test.core,FileDescriptorLeakDetectorRule,1,1,0,0,0,false,0 ,TestRule ,0 ,MBEAN_SERVER: MBeanServer MBEAN_NAME: ObjectName OPEN_FD_INFO: MBeanAttributeInfo ,apply{ Params : Statement,Description Returns : Statement} evaluate{ Params :  Returns : void} getAverage{ Params : List<Long> Returns : long} getMax{ Params : List<Long> Returns : long} ,apply evaluate ,getAverage getMax ,,,TestRule ,,,,Statement ArrayList ArrayList ,values: 
vert.x-master,io.vertx.test.core,RepeatRule,1,1,0,0,0,false,0 ,TestRule ,RepeatStatement ,,evaluate{ Params :  Returns : void} apply{ Params : Statement,Description Returns : Statement} ,evaluate apply ,,,,TestRule ,,,,RepeatStatement ,repeat: 
vert.x-master,io.vertx.test.core,RepeatStatement,3,2,0,1,0,false,0 ,TestRule ,RepeatStatement ,times: int statement: Statement ,evaluate{ Params :  Returns : void} apply{ Params : Statement,Description Returns : Statement} ,evaluate apply ,,,,,Statement ,,Statement ,,statement: 
vert.x-master,io.vertx.test.core,TestUtils,1,1,0,0,0,false,0 ,0 ,0 ,MAVEN_TARGET_DIR: File NON_ROUTABLE_HOST: String random: Random ,findMavenTargetDir{ Params :  Returns : File} randomBuffer{ Params : int Returns : Buffer} randomByteArray{ Params : int Returns : byte[]} randomByteArray{ Params : int,boolean,byte Returns : byte[]} randomBuffer{ Params : int,boolean,byte Returns : Buffer} randomByte{ Params :  Returns : byte} randomInt{ Params :  Returns : int} randomPortInt{ Params :  Returns : int} randomHighPortInt{ Params :  Returns : int} randomPositiveInt{ Params :  Returns : int} randomPositiveLong{ Params :  Returns : long} randomLong{ Params :  Returns : long} randomBoolean{ Params :  Returns : boolean} randomChar{ Params :  Returns : char} randomShort{ Params :  Returns : short} randomFloat{ Params :  Returns : float} randomDouble{ Params :  Returns : double} randomUnicodeString{ Params : int Returns : String} randomAlphaString{ Params : int Returns : String} randomHttp2Settings{ Params :  Returns : Http2Settings} randomMultiMap{ Params : int Returns : MultiMap} randomEnumSet{ Params : Class<E> Returns : Set<E>} randomElement{ Params : E[] Returns : E} byteArraysEqual{ Params : byte[],byte[] Returns : boolean} assertIllegalArgumentException{ Params : Runnable Returns : void} assertNullPointerException{ Params : Runnable Returns : void} assertIllegalStateException{ Params : Runnable Returns : void} assertIllegalStateExceptionAsync{ Params : Supplier<Future<?>> Returns : void} assertIndexOutOfBoundsException{ Params : Runnable Returns : void} compressGzip{ Params : String Returns : byte[]} randomKeyCertOptions{ Params :  Returns : KeyCertOptions} randomTrustOptions{ Params :  Returns : TrustOptions} leftPad{ Params : int,Buffer Returns : Buffer} cnOf{ Params : Certificate Returns : String} cnOf{ Params : X509Certificate Returns : String} loopbackAddress{ Params :  Returns : String} tmpFile{ Params : String Returns : File} tmpFile{ Params : String,long Returns : File} getJarEntryName{ Params : Path Returns : String} testLogging{ Params : Runnable Returns : TestLoggerFactory} isECCSupportedByVM{ Params :  Returns : boolean} rootCause{ Params : Throwable Returns : Throwable} executeInVanillaVertxThread{ Params : Runnable Returns : void} runWithServiceLoader{ Params : Class<S>,Class<? extends S>,Supplier<T> Returns : T} findResources{ Params : String Returns : Enumeration<URL>} ,findResources ,findMavenTargetDir randomBuffer randomByteArray randomByteArray randomBuffer randomByte randomInt randomPortInt randomHighPortInt randomPositiveInt randomPositiveLong randomLong randomBoolean randomChar randomShort randomFloat randomDouble randomUnicodeString randomAlphaString randomHttp2Settings randomMultiMap randomEnumSet randomElement byteArraysEqual assertIllegalArgumentException assertNullPointerException assertIllegalStateException assertIllegalStateExceptionAsync assertIndexOutOfBoundsException compressGzip randomKeyCertOptions randomTrustOptions leftPad cnOf cnOf loopbackAddress tmpFile tmpFile getJarEntryName testLogging isECCSupportedByVM rootCause executeInVanillaVertxThread runWithServiceLoader ,,,,,,,File File File Random StringBuilder StringBuilder Http2Settings ByteArrayOutputStream GZIPOutputStream JksOptions PemKeyCertOptions PfxOptions JksOptions PemTrustOptions PfxOptions RandomAccessFile TestLoggerFactory Thread URLClassLoader ,th: , previousCL
vert.x-master,io.vertx.test.core,VertxTestBase,1,1,0,0,0,false,AsyncTestBase ,0 ,0 ,USE_NATIVE_TRANSPORT: boolean USE_DOMAIN_SOCKETS: boolean log: Logger repeatRule: RepeatRule fileDescriptorLeakDetectorRule: FileDescriptorLeakDetectorRule vertx: Vertx vertices: Vertx created: List<Vertx> ENABLED_CIPHER_SUITES: String ,vinit{ Params :  Returns : void} setUp{ Params :  Returns : void} getTracer{ Params :  Returns : VertxTracer} getOptions{ Params :  Returns : VertxOptions} tearDown{ Params :  Returns : void} close{ Params : List<Vertx> Returns : void} vertx{ Params :  Returns : Vertx} vertx{ Params : VertxOptions Returns : Vertx} clusteredVertx{ Params : VertxOptions,Handler<AsyncResult<Vertx>> Returns : void} getClusterManager{ Params :  Returns : ClusterManager} startNodes{ Params : int Returns : void} startNodes{ Params : int,VertxOptions Returns : void} startNodes{ Params : VertxOptions Returns : void} setOptions{ Params : TCPSSLOptions,KeyCertOptions Returns : void} createWorker{ Params :  Returns : Context} start{ Params :  Returns : void} createWorkers{ Params : int Returns : List<Context>} assertOnIOContext{ Params : Context Returns : void} ,start ,setOptions ,,,,,,,RepeatRule FileDescriptorLeakDetectorRule VertxOptions TracingOptions CountDownLatch VertxOptions ArrayList ArrayList VertxOptions CountDownLatch CompletableFuture AbstractVerticle DeploymentOptions ArrayList ,: , context, current
vert.x-master,io.vertx.test.fakecluster,FakeClusterManager,1,1,0,0,0,false,0 ,ClusterManager ,0 ,nodes: Map<String, FakeClusterManager> registrations: ConcurrentMap<String, List<RegistrationInfo>> nodeInfos: ConcurrentMap<String, NodeInfo> asyncMaps: ConcurrentMap<String, LocalAsyncMapImpl> syncMaps: ConcurrentMap<String, Map> localAsyncLocks: LocalAsyncLocks counters: ConcurrentMap<String, AtomicLong> nodeID: String nodeListener: NodeListener vertx: VertxInternal nodeSelector: NodeSelector ,init{ Params : Vertx,NodeSelector Returns : void} doJoin{ Params : String,FakeClusterManager Returns : void} memberAdded{ Params : String Returns : void} doLeave{ Params : String Returns : void} memberRemoved{ Params : String Returns : void} getAsyncMap{ Params : String,Promise<AsyncMap<K,V>> Returns : void} getSyncMap{ Params : String Returns : Map<K,V>} getLockWithTimeout{ Params : String,long,Promise<Lock> Returns : void} getCounter{ Params : String,Promise<Counter> Returns : void} getNodeId{ Params :  Returns : String} getNodes{ Params :  Returns : List<String>} nodeListener{ Params : NodeListener Returns : void} setNodeInfo{ Params : NodeInfo,Promise<Void> Returns : void} getNodeInfo{ Params :  Returns : NodeInfo} getNodeInfo{ Params : String,Promise<NodeInfo> Returns : void} join{ Params : Promise<Void> Returns : void} leave{ Params : Promise<Void> Returns : void} fireRegistrationUpdateEvents{ Params : List<RegistrationUpdateEvent>,boolean Returns : void} isActive{ Params :  Returns : boolean} addRegistration{ Params : String,RegistrationInfo,Promise<Void> Returns : void} removeRegistration{ Params : String,RegistrationInfo,Promise<Void> Returns : void} getRegistrations{ Params : String,Promise<List<RegistrationInfo>> Returns : void} reset{ Params :  Returns : void} ,init getAsyncMap getSyncMap getLockWithTimeout getCounter getNodeId getNodes nodeListener setNodeInfo getNodeInfo getNodeInfo join leave isActive addRegistration removeRegistration getRegistrations ,doJoin doLeave reset ,,,ClusterManager ,NodeSelector ,,NodeSelector ,LinkedHashMap ConcurrentHashMap ConcurrentHashMap ConcurrentHashMap ConcurrentHashMap LocalAsyncLocks ConcurrentHashMap IllegalStateException Thread Thread LocalAsyncMapImpl ConcurrentHashMap AsynchronousCounter AtomicLong ArrayList ArrayList RegistrationUpdateEvent ArrayList RegistrationUpdateEvent RegistrationUpdateEvent LocalAsyncLocks ,syncMaps: 
vert.x-master,io.vertx.test.fakedns,FakeDNSServer,1,1,0,0,1,false,DnsServer ,0 ,VertxResourceRecord TestDnsProtocolUdpCodecFactory TestDnsProtocolTcpCodecFactory ,PORT: int IP_ADDRESS: String ipAddress: String port: int store: RecordStore acceptors: List<IoAcceptor> currentMessage: Deque<DnsMessage> TestAAAARecordEncoder: ResourceRecordEncoder encoder: DnsMessageEncoder ,A_store{ Params : Map<String,String> Returns : RecordStore} A_store{ Params : Function<String,String> Returns : RecordStore} store{ Params : RecordStore Returns : FakeDNSServer} pollMessage{ Params :  Returns : DnsMessage} localAddress{ Params :  Returns : InetSocketAddress} ipAddress{ Params : String Returns : FakeDNSServer} port{ Params : int Returns : FakeDNSServer} testResolveA{ Params : String Returns : FakeDNSServer} testResolveA{ Params : Map<String,String> Returns : FakeDNSServer} testResolveA{ Params : Function<String,String> Returns : FakeDNSServer} testResolveAAAA{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveMX{ Params : int,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveTXT{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveNS{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveCNAME{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolvePTR{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveSRV{ Params : int,int,int,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup4{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup6{ Params :  Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup{ Params : String Returns : FakeDNSServer} testLookupNonExisting{ Params :  Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testReverseLookup{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveASameServer{ Params : String Returns : FakeDNSServer} testLookup4CNAME{ Params : String,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} start{ Params :  Returns : void} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} sessionCreated{ Params : IoSession Returns : void} messageReceived{ Params : IoSession,Object Returns : void} stop{ Params :  Returns : void} isTruncated{ Params :  Returns : boolean} setTruncated{ Params : boolean Returns : VertxResourceRecord} getDomainName{ Params :  Returns : String} getRecordType{ Params :  Returns : RecordType} getRecordClass{ Params :  Returns : RecordClass} getTimeToLive{ Params :  Returns : int} get{ Params : String Returns : String} putResourceRecordData{ Params : IoBuffer,ResourceRecord Returns : void} encode{ Params : DnsMessage,IoBuffer Returns : void} getEncoder{ Params : IoSession Returns : ProtocolEncoder} encode{ Params : IoSession,Object,ProtocolEncoderOutput Returns : void} getDecoder{ Params : IoSession Returns : ProtocolDecoder} getEncoder{ Params : IoSession Returns : ProtocolEncoder} encode{ Params : IoSession,Object,ProtocolEncoderOutput Returns : void} getDecoder{ Params : IoSession Returns : ProtocolDecoder} ,getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords start getRecords sessionCreated messageReceived stop getDomainName getRecordType getRecordClass getTimeToLive get putResourceRecordData getEncoder encode getDecoder getEncoder encode getDecoder ,A_store A_store ,,,,DnsMessageEncoder ,,DnsMessageEncoder ,ResourceRecordModifier ResourceRecordModifier ArrayDeque RecordStore HashSet ResourceRecordModifier RecordStore HashSet ResourceRecordModifier RecordStore HashSet ResourceRecordModifier RecordStore HashSet ResourceRecordModifier RecordStore HashSet ResourceRecordModifier RecordStore HashSet ResourceRecordModifier RecordStore HashSet ResourceRecordModifier RecordStore HashSet ResourceRecordModifier RecordStore HashSet ResourceRecordModifier RecordStore RecordStore HashSet ResourceRecordModifier RecordStore LinkedHashSet ResourceRecordModifier ResourceRecordModifier DnsProtocolHandler RecordStore ProtocolCodecFilter TestDnsProtocolUdpCodecFactory ProtocolCodecFilter TestDnsProtocolTcpCodecFactory UdpTransport TcpTransport ResourceRecordEncoder IllegalStateException DnsMessageEncoder DnsMessageModifier IllegalStateException DnsUdpEncoder DnsUdpDecoder DnsUdpEncoder DnsTcpDecoder ,TestAAAARecordEncoder: , buf, record
vert.x-master,io.vertx.test.fakedns,VertxResourceRecord,3,1,0,1,0,false,DnsServer ,0 ,VertxResourceRecord TestDnsProtocolUdpCodecFactory TestDnsProtocolTcpCodecFactory ,ipAddress: String domainName: String isTruncated: boolean ,A_store{ Params : Map<String,String> Returns : RecordStore} A_store{ Params : Function<String,String> Returns : RecordStore} store{ Params : RecordStore Returns : FakeDNSServer} pollMessage{ Params :  Returns : DnsMessage} localAddress{ Params :  Returns : InetSocketAddress} ipAddress{ Params : String Returns : FakeDNSServer} port{ Params : int Returns : FakeDNSServer} testResolveA{ Params : String Returns : FakeDNSServer} testResolveA{ Params : Map<String,String> Returns : FakeDNSServer} testResolveA{ Params : Function<String,String> Returns : FakeDNSServer} testResolveAAAA{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveMX{ Params : int,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveTXT{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveNS{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveCNAME{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolvePTR{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveSRV{ Params : int,int,int,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup4{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup6{ Params :  Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup{ Params : String Returns : FakeDNSServer} testLookupNonExisting{ Params :  Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testReverseLookup{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveASameServer{ Params : String Returns : FakeDNSServer} testLookup4CNAME{ Params : String,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} start{ Params :  Returns : void} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} sessionCreated{ Params : IoSession Returns : void} messageReceived{ Params : IoSession,Object Returns : void} stop{ Params :  Returns : void} isTruncated{ Params :  Returns : boolean} setTruncated{ Params : boolean Returns : VertxResourceRecord} getDomainName{ Params :  Returns : String} getRecordType{ Params :  Returns : RecordType} getRecordClass{ Params :  Returns : RecordClass} getTimeToLive{ Params :  Returns : int} get{ Params : String Returns : String} putResourceRecordData{ Params : IoBuffer,ResourceRecord Returns : void} encode{ Params : DnsMessage,IoBuffer Returns : void} getEncoder{ Params : IoSession Returns : ProtocolEncoder} encode{ Params : IoSession,Object,ProtocolEncoderOutput Returns : void} getDecoder{ Params : IoSession Returns : ProtocolDecoder} getEncoder{ Params : IoSession Returns : ProtocolEncoder} encode{ Params : IoSession,Object,ProtocolEncoderOutput Returns : void} getDecoder{ Params : IoSession Returns : ProtocolDecoder} ,getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords start getRecords sessionCreated messageReceived stop getDomainName getRecordType getRecordClass getTimeToLive get putResourceRecordData getEncoder encode getDecoder getEncoder encode getDecoder ,A_store A_store ,,,ResourceRecord ,boolean ,,boolean ,,DnsAttribute.IP_ADDRESS: , id
vert.x-master,io.vertx.test.fakedns,TestDnsProtocolUdpCodecFactory,3,2,0,0,1,false,DnsServer ,0 ,VertxResourceRecord TestDnsProtocolUdpCodecFactory TestDnsProtocolTcpCodecFactory ,,A_store{ Params : Map<String,String> Returns : RecordStore} A_store{ Params : Function<String,String> Returns : RecordStore} store{ Params : RecordStore Returns : FakeDNSServer} pollMessage{ Params :  Returns : DnsMessage} localAddress{ Params :  Returns : InetSocketAddress} ipAddress{ Params : String Returns : FakeDNSServer} port{ Params : int Returns : FakeDNSServer} testResolveA{ Params : String Returns : FakeDNSServer} testResolveA{ Params : Map<String,String> Returns : FakeDNSServer} testResolveA{ Params : Function<String,String> Returns : FakeDNSServer} testResolveAAAA{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveMX{ Params : int,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveTXT{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveNS{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveCNAME{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolvePTR{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveSRV{ Params : int,int,int,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup4{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup6{ Params :  Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup{ Params : String Returns : FakeDNSServer} testLookupNonExisting{ Params :  Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testReverseLookup{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveASameServer{ Params : String Returns : FakeDNSServer} testLookup4CNAME{ Params : String,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} start{ Params :  Returns : void} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} sessionCreated{ Params : IoSession Returns : void} messageReceived{ Params : IoSession,Object Returns : void} stop{ Params :  Returns : void} isTruncated{ Params :  Returns : boolean} setTruncated{ Params : boolean Returns : VertxResourceRecord} getDomainName{ Params :  Returns : String} getRecordType{ Params :  Returns : RecordType} getRecordClass{ Params :  Returns : RecordClass} getTimeToLive{ Params :  Returns : int} get{ Params : String Returns : String} putResourceRecordData{ Params : IoBuffer,ResourceRecord Returns : void} encode{ Params : DnsMessage,IoBuffer Returns : void} getEncoder{ Params : IoSession Returns : ProtocolEncoder} encode{ Params : IoSession,Object,ProtocolEncoderOutput Returns : void} getDecoder{ Params : IoSession Returns : ProtocolDecoder} getEncoder{ Params : IoSession Returns : ProtocolEncoder} encode{ Params : IoSession,Object,ProtocolEncoderOutput Returns : void} getDecoder{ Params : IoSession Returns : ProtocolDecoder} ,getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords start getRecords sessionCreated messageReceived stop getDomainName getRecordType getRecordClass getTimeToLive get putResourceRecordData getEncoder encode getDecoder getEncoder encode getDecoder ,A_store A_store ,,,ProtocolCodecFactory ,,,,DnsUdpEncoder DnsUdpDecoder ,out: , buf
vert.x-master,io.vertx.test.fakedns,TestDnsProtocolTcpCodecFactory,3,2,0,0,1,false,DnsServer ,0 ,VertxResourceRecord TestDnsProtocolUdpCodecFactory TestDnsProtocolTcpCodecFactory ,,A_store{ Params : Map<String,String> Returns : RecordStore} A_store{ Params : Function<String,String> Returns : RecordStore} store{ Params : RecordStore Returns : FakeDNSServer} pollMessage{ Params :  Returns : DnsMessage} localAddress{ Params :  Returns : InetSocketAddress} ipAddress{ Params : String Returns : FakeDNSServer} port{ Params : int Returns : FakeDNSServer} testResolveA{ Params : String Returns : FakeDNSServer} testResolveA{ Params : Map<String,String> Returns : FakeDNSServer} testResolveA{ Params : Function<String,String> Returns : FakeDNSServer} testResolveAAAA{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveMX{ Params : int,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveTXT{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveNS{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveCNAME{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolvePTR{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveSRV{ Params : int,int,int,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup4{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup6{ Params :  Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testLookup{ Params : String Returns : FakeDNSServer} testLookupNonExisting{ Params :  Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testReverseLookup{ Params : String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} testResolveASameServer{ Params : String Returns : FakeDNSServer} testLookup4CNAME{ Params : String,String Returns : FakeDNSServer} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} start{ Params :  Returns : void} getRecords{ Params : QuestionRecord Returns : Set<ResourceRecord>} sessionCreated{ Params : IoSession Returns : void} messageReceived{ Params : IoSession,Object Returns : void} stop{ Params :  Returns : void} isTruncated{ Params :  Returns : boolean} setTruncated{ Params : boolean Returns : VertxResourceRecord} getDomainName{ Params :  Returns : String} getRecordType{ Params :  Returns : RecordType} getRecordClass{ Params :  Returns : RecordClass} getTimeToLive{ Params :  Returns : int} get{ Params : String Returns : String} putResourceRecordData{ Params : IoBuffer,ResourceRecord Returns : void} encode{ Params : DnsMessage,IoBuffer Returns : void} getEncoder{ Params : IoSession Returns : ProtocolEncoder} encode{ Params : IoSession,Object,ProtocolEncoderOutput Returns : void} getDecoder{ Params : IoSession Returns : ProtocolDecoder} getEncoder{ Params : IoSession Returns : ProtocolEncoder} encode{ Params : IoSession,Object,ProtocolEncoderOutput Returns : void} getDecoder{ Params : IoSession Returns : ProtocolDecoder} ,getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords getRecords start getRecords sessionCreated messageReceived stop getDomainName getRecordType getRecordClass getTimeToLive get putResourceRecordData getEncoder encode getDecoder getEncoder encode getDecoder ,A_store A_store ,,,ProtocolCodecFactory ,,,,DnsUdpEncoder DnsTcpDecoder ,out: , buf
vert.x-master,io.vertx.test.fakemetrics,EndpointMetric,1,1,0,0,0,false,0 ,ClientMetrics<HttpClientMetric,Void,HttpRequest,HttpResponse> ,0 ,queueSize: AtomicInteger connectionCount: AtomicInteger requestCount: AtomicInteger requests: ConcurrentMap<HttpRequest, HttpClientMetric> ,enqueueRequest{ Params :  Returns : Void} dequeueRequest{ Params : Void Returns : void} requestBegin{ Params : String,HttpRequest Returns : HttpClientMetric} requestEnd{ Params : HttpClientMetric,long Returns : void} responseBegin{ Params : HttpClientMetric,HttpResponse Returns : void} requestReset{ Params : HttpClientMetric Returns : void} responseEnd{ Params : HttpClientMetric,long Returns : void} ,enqueueRequest dequeueRequest requestBegin requestEnd responseBegin requestReset responseEnd ,,,,ClientMetrics ,,,,AtomicInteger AtomicInteger AtomicInteger ConcurrentHashMap HttpClientMetric RuntimeException RuntimeException RuntimeException RuntimeException ,requests: , requestMetric.request
vert.x-master,io.vertx.test.fakemetrics,FakeDatagramSocketMetrics,1,1,0,0,0,false,FakeMetricsBase ,DatagramSocketMetrics ,0 ,localName: String localAddress: SocketAddress reads: List<PacketMetric> writes: List<PacketMetric> ,getLocalName{ Params :  Returns : String} getLocalAddress{ Params :  Returns : SocketAddress} getReads{ Params :  Returns : List<PacketMetric>} getWrites{ Params :  Returns : List<PacketMetric>} listening{ Params : String,SocketAddress Returns : void} bytesRead{ Params : Void,SocketAddress,long Returns : void} bytesWritten{ Params : Void,SocketAddress,long Returns : void} ,listening bytesRead bytesWritten ,,,,DatagramSocketMetrics ,List<PacketMetric> ,,List<PacketMetric> ,ArrayList ArrayList PacketMetric PacketMetric ,writes: , new PacketMetric(remoteAddress, numberOfBytes)
vert.x-master,io.vertx.test.fakemetrics,FakeEventBusMetrics,1,1,0,0,0,false,FakeMetricsBase ,EventBusMetrics<HandlerMetric> ,0 ,sentMessages: List<SentMessage> receivedMessages: List<ReceivedMessage> registrations: List<HandlerMetric> encoded: Map<String, AtomicInteger> decoded: Map<String, AtomicInteger> replyFailureAddresses: List<String> replyFailures: List<ReplyFailure> ,getEncoded{ Params :  Returns : Map<String,AtomicInteger>} getDecoded{ Params :  Returns : Map<String,AtomicInteger>} getSentMessages{ Params :  Returns : List<SentMessage>} getReceivedMessages{ Params :  Returns : List<ReceivedMessage>} getRegistrations{ Params :  Returns : List<HandlerMetric>} getReplyFailureAddresses{ Params :  Returns : List<String>} getReplyFailures{ Params :  Returns : List<ReplyFailure>} getEncodedBytes{ Params : String Returns : int} getDecodedBytes{ Params : String Returns : int} handlerRegistered{ Params : String,String Returns : HandlerMetric} handlerUnregistered{ Params : HandlerMetric Returns : void} scheduleMessage{ Params : HandlerMetric,boolean Returns : void} discardMessage{ Params : HandlerMetric,boolean,Message<?> Returns : void} messageDelivered{ Params : HandlerMetric,boolean Returns : void} messageSent{ Params : String,boolean,boolean,boolean Returns : void} messageReceived{ Params : String,boolean,boolean,int Returns : void} messageWritten{ Params : String,int Returns : void} messageRead{ Params : String,int Returns : void} replyFailure{ Params : String,ReplyFailure Returns : void} isEnabled{ Params :  Returns : boolean} ,handlerRegistered scheduleMessage discardMessage messageDelivered messageSent messageReceived messageWritten messageRead ,,,,EventBusMetrics ,List<ReplyFailure> ,,List<ReplyFailure> ,ArrayList ArrayList ArrayList ConcurrentHashMap ConcurrentHashMap ArrayList ArrayList HandlerMetric NullPointerException SentMessage ReceivedMessage AtomicInteger AtomicInteger ,replyFailures: , failure
vert.x-master,io.vertx.test.fakemetrics,FakeHttpClientMetrics,1,1,0,0,0,false,FakeTCPMetrics ,HttpClientMetrics<HttpClientMetric,WebSocketMetric,SocketMetric,Void> ,0 ,name: String webSockets: ConcurrentMap<WebSocketBase, WebSocketMetric> endpoints: ConcurrentMap<SocketAddress, EndpointMetric> ,getMetric{ Params : WebSocket Returns : WebSocketMetric} getMetric{ Params : HttpClientRequest Returns : HttpClientMetric} getName{ Params :  Returns : String} endpoints{ Params :  Returns : Set<String>} endpoint{ Params : String Returns : EndpointMetric} queueSize{ Params : String Returns : Integer} connectionCount{ Params : String Returns : Integer} createEndpointMetrics{ Params : SocketAddress,int Returns : ClientMetrics<HttpClientMetric,Void,HttpRequest,HttpResponse>} close{ Params :  Returns : void} endpointConnected{ Params : ClientMetrics<HttpClientMetric,Void,?,?> Returns : void} endpointDisconnected{ Params : ClientMetrics<HttpClientMetric,Void,?,?> Returns : void} connected{ Params : WebSocket Returns : WebSocketMetric} disconnected{ Params : WebSocketMetric Returns : void} ,createEndpointMetrics close endpointConnected endpointDisconnected connected disconnected ,,,,HttpClientMetrics ,ConcurrentMap<SocketAddress,EndpointMetric> ,,ConcurrentMap<SocketAddress,EndpointMetric> ,ConcurrentHashMap ConcurrentHashMap EndpointMetric WebSocketMetric ,webSockets: , webSocketMetric.ws
vert.x-master,io.vertx.test.fakemetrics,FakeHttpServerMetrics,1,1,0,0,0,false,FakeTCPMetrics ,HttpServerMetrics<HttpServerMetric,WebSocketMetric,SocketMetric> ,0 ,webSockets: ConcurrentMap<WebSocketBase, WebSocketMetric> requests: ConcurrentHashSet<HttpServerMetric> ,getWebSocketMetric{ Params : ServerWebSocket Returns : WebSocketMetric} getRequestMetric{ Params : HttpServerRequest Returns : HttpServerMetric} getResponseMetric{ Params : String Returns : HttpServerMetric} requestBegin{ Params : SocketMetric,HttpRequest Returns : HttpServerMetric} requestEnd{ Params : HttpServerMetric,HttpRequest,long Returns : void} responsePushed{ Params : SocketMetric,HttpMethod,String,HttpResponse Returns : HttpServerMetric} requestReset{ Params : HttpServerMetric Returns : void} responseBegin{ Params : HttpServerMetric,HttpResponse Returns : void} responseEnd{ Params : HttpServerMetric,HttpResponse,long Returns : void} connected{ Params : SocketMetric,HttpServerMetric,ServerWebSocket Returns : WebSocketMetric} disconnected{ Params : WebSocketMetric Returns : void} exceptionOccurred{ Params : SocketMetric,SocketAddress,Throwable Returns : void} requestRouted{ Params : HttpServerMetric,String Returns : void} ,requestBegin requestEnd responsePushed requestReset responseBegin responseEnd connected disconnected exceptionOccurred requestRouted ,,,,HttpServerMetrics ,ConcurrentHashSet<HttpServerMetric> ,,ConcurrentHashSet<HttpServerMetric> ,ConcurrentHashMap ConcurrentHashSet HttpServerMetric HttpServerMetric IllegalStateException WebSocketMetric AssertionError ,requestMetric.route: , route
vert.x-master,io.vertx.test.fakemetrics,FakeMetricsBase,1,1,0,0,0,false,0 ,Metrics ,0 ,unexpectedError: Throwable closed: boolean ,getMetrics{ Params : Measured Returns : M} registerFailure{ Params : Throwable Returns : void} sanityCheck{ Params :  Returns : void} close{ Params :  Returns : void} ,close ,getMetrics registerFailure sanityCheck ,,,Metrics ,boolean ,,boolean ,AssertionFailedError IllegalStateException ,: 
vert.x-master,io.vertx.test.fakemetrics,FakeMetricsFactory,1,1,0,0,0,false,0 ,VertxMetricsFactory ,0 ,,metrics{ Params : VertxOptions Returns : VertxMetrics} ,metrics ,,,,VertxMetricsFactory ,,,,FakeVertxMetrics ,options: 
vert.x-master,io.vertx.test.fakemetrics,FakePoolMetrics,1,1,0,0,0,false,0 ,PoolMetrics<Object> ,0 ,TASK_SUBMITTED: Object TASK_BEGIN: Object METRICS: Map<String, PoolMetrics> poolSize: int submitted: AtomicInteger completed: AtomicInteger idle: AtomicInteger waiting: AtomicInteger running: AtomicInteger name: String closed: AtomicBoolean ,getPoolSize{ Params :  Returns : int} getName{ Params :  Returns : String} submitted{ Params :  Returns : Object} rejected{ Params : Object Returns : void} begin{ Params : Object Returns : Object} end{ Params : Object,boolean Returns : void} close{ Params :  Returns : void} isClosed{ Params :  Returns : boolean} numberOfSubmittedTask{ Params :  Returns : int} numberOfCompletedTasks{ Params :  Returns : int} numberOfWaitingTasks{ Params :  Returns : int} numberOfIdleThreads{ Params :  Returns : int} numberOfRunningTasks{ Params :  Returns : int} getPoolMetrics{ Params :  Returns : Map<String,PoolMetrics>} ,rejected begin close ,getPoolMetrics ,,,PoolMetrics ,AtomicBoolean ,,AtomicBoolean ,Object Object ConcurrentHashMap AtomicInteger AtomicInteger AtomicInteger AtomicInteger AtomicInteger AtomicBoolean ,running: 
vert.x-master,io.vertx.test.fakemetrics,FakeTCPMetrics,1,1,0,0,0,false,FakeMetricsBase ,TCPMetrics<SocketMetric> ,0 ,count: AtomicInteger sockets: ConcurrentMap<SocketAddress, SocketMetric[]> ,connectionCount{ Params :  Returns : int} connectionCount{ Params : SocketAddress Returns : Integer} connected{ Params : SocketAddress,String Returns : SocketMetric} disconnected{ Params : SocketMetric,SocketAddress Returns : void} firstMetric{ Params : SocketAddress Returns : SocketMetric} bytesRead{ Params : SocketMetric,SocketAddress,long Returns : void} bytesWritten{ Params : SocketMetric,SocketAddress,long Returns : void} ,bytesRead bytesWritten ,,,,TCPMetrics ,ConcurrentMap<SocketAddress,SocketMetric[]> ,,ConcurrentMap<SocketAddress,SocketMetric[]> ,AtomicInteger ConcurrentHashMap SocketMetric ,socketMetric.bytesWrittenEvents: , numberOfBytes
vert.x-master,io.vertx.test.fakemetrics,FakeVertxMetrics,1,1,0,0,0,false,FakeMetricsBase ,VertxMetrics ,0 ,options: MetricsOptions vertx: Vertx ,options{ Params :  Returns : MetricsOptions} vertx{ Params :  Returns : Vertx} isMetricsEnabled{ Params :  Returns : boolean} createEventBusMetrics{ Params :  Returns : EventBusMetrics} createHttpServerMetrics{ Params : HttpServerOptions,SocketAddress Returns : HttpServerMetrics<?,?,?>} createHttpClientMetrics{ Params : HttpClientOptions Returns : HttpClientMetrics<?,?,?,Void>} createNetServerMetrics{ Params : NetServerOptions,SocketAddress Returns : TCPMetrics<?>} createNetClientMetrics{ Params : NetClientOptions Returns : TCPMetrics<?>} createDatagramSocketMetrics{ Params : DatagramSocketOptions Returns : DatagramSocketMetrics} createPoolMetrics{ Params : String,String,int Returns : PoolMetrics<?>} vertxCreated{ Params : Vertx Returns : void} ,isMetricsEnabled createPoolMetrics vertxCreated ,,,,VertxMetrics ,Vertx ,,Vertx ,MetricsOptions FakeEventBusMetrics FakeHttpServerMetrics FakeHttpClientMetrics FakeTCPMetrics FakeTCPMetrics FakeDatagramSocketMetrics FakePoolMetrics ,options: 
vert.x-master,io.vertx.test.fakemetrics,HandlerMetric,1,1,0,0,0,false,0 ,0 ,0 ,address: String repliedAddress: String scheduleCount: AtomicInteger localScheduleCount: AtomicInteger discardCount: AtomicInteger deliveredCount: AtomicInteger localDeliveredCount: AtomicInteger ,toString{ Params :  Returns : String} ,toString ,,,,,,,,AtomicInteger AtomicInteger AtomicInteger AtomicInteger AtomicInteger ,localDeliveredCount: 
vert.x-master,io.vertx.test.fakemetrics,HttpClientMetric,1,1,0,0,0,false,0 ,0 ,0 ,endpoint: EndpointMetric request: HttpRequest requestEnded: AtomicInteger responseBegin: AtomicInteger bytesRead: AtomicLong bytesWritten: AtomicLong failed: AtomicBoolean ,,,,,,,,,,AtomicInteger AtomicInteger AtomicLong AtomicLong AtomicBoolean ,null
vert.x-master,io.vertx.test.fakemetrics,HttpServerMetric,1,1,0,0,0,false,0 ,0 ,0 ,uri: String socket: SocketMetric failed: AtomicBoolean route: AtomicReference<String> request: HttpRequest requestEnded: AtomicBoolean bytesRead: AtomicLong response: AtomicReference<HttpResponse> responseEnded: AtomicBoolean bytesWritten: AtomicLong ,,,,,,,,,,AtomicBoolean AtomicReference AtomicBoolean AtomicLong AtomicReference AtomicBoolean AtomicLong ,null
vert.x-master,io.vertx.test.fakemetrics,PacketMetric,1,1,0,0,0,false,0 ,0 ,0 ,remoteAddress: SocketAddress numberOfBytes: long ,,,,,,,,,,,null
vert.x-master,io.vertx.test.fakemetrics,ReceivedMessage,1,1,0,0,0,false,0 ,0 ,0 ,address: String publish: boolean local: boolean handlers: int ,equals{ Params : Object Returns : boolean} toString{ Params :  Returns : String} ,equals toString ,,,,,,,,,address: , that.address
vert.x-master,io.vertx.test.fakemetrics,SentMessage,1,1,0,0,0,false,0 ,0 ,0 ,address: String publish: boolean local: boolean remote: boolean ,equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,equals hashCode toString ,,,,,,,,,address: 
vert.x-master,io.vertx.test.fakemetrics,SocketMetric,1,1,0,0,0,false,0 ,0 ,0 ,remoteAddress: SocketAddress remoteName: String connected: AtomicBoolean bytesRead: AtomicLong bytesReadEvents: List<Long> bytesWritten: AtomicLong bytesWrittenEvents: List<Long> ,,,,,,,,,,AtomicBoolean AtomicLong ArrayList AtomicLong ArrayList ,null
vert.x-master,io.vertx.test.fakemetrics,WebSocketMetric,1,1,0,0,0,false,0 ,0 ,0 ,ws: WebSocketBase ,,,,,,,,,,,null
vert.x-master,io.vertx.test.fakestream,FakeStream,1,1,0,0,0,false,0 ,ReadStream<T> WriteStream<T> ,Op ,END_SENTINEL: Object emitting: boolean highWaterMark: long exceptionHandler: Handler<Throwable> itemHandler: Handler<T> endHandler: Handler<Void> pending: Deque<Op<T>> demand: long ended: boolean end: Future<Void> overflow: boolean drainHandler: Handler<Void> pauseCount: int resumeCount: int ,pauseCount{ Params :  Returns : int} resumeCount{ Params :  Returns : int} isPaused{ Params :  Returns : boolean} isEnded{ Params :  Returns : boolean} demand{ Params :  Returns : long} exceptionHandler{ Params : Handler<Throwable> Returns : FakeStream<T>} exceptionHandler{ Params :  Returns : Handler<Throwable>} emit{ Params : T Returns : boolean} emit{ Params : Stream<T> Returns : boolean} doEmit{ Params : Op<T> Returns : boolean} doEmit{ Params : Stream<Op<T>> Returns : boolean} end{ Params :  Returns : Future<Void>} fail{ Params : Throwable Returns : void} handler{ Params : Handler<T> Returns : FakeStream<T>} handler{ Params :  Returns : Handler<T>} pause{ Params :  Returns : FakeStream<T>} checkPending{ Params :  Returns : void} fetch{ Params : long Returns : FakeStream<T>} resume{ Params :  Returns : FakeStream<T>} endHandler{ Params : Handler<Void> Returns : FakeStream<T>} endHandler{ Params :  Returns : Handler<Void>} write{ Params : T Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : FakeStream<T>} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : FakeStream<T>} drainHandler{ Params :  Returns : Handler<Void>} setEnd{ Params : Future<Void> Returns : FakeStream<T>} ,exceptionHandler handler pause fetch resume endHandler write setWriteQueueMaxSize writeQueueFull drainHandler ,,emit doEmit ,,ReadStream WriteStream ,int ,,int ,Object ArrayDeque IllegalStateException IllegalStateException Op Op IllegalStateException ,pending: 
vert.x-master,io.vertx.test.fakestream,Op,3,0,0,1,0,false,0 ,ReadStream<T> WriteStream<T> ,Op ,item: T ack: Promise<Void> ,pauseCount{ Params :  Returns : int} resumeCount{ Params :  Returns : int} isPaused{ Params :  Returns : boolean} isEnded{ Params :  Returns : boolean} demand{ Params :  Returns : long} exceptionHandler{ Params : Handler<Throwable> Returns : FakeStream<T>} exceptionHandler{ Params :  Returns : Handler<Throwable>} emit{ Params : T Returns : boolean} emit{ Params : Stream<T> Returns : boolean} doEmit{ Params : Op<T> Returns : boolean} doEmit{ Params : Stream<Op<T>> Returns : boolean} end{ Params :  Returns : Future<Void>} fail{ Params : Throwable Returns : void} handler{ Params : Handler<T> Returns : FakeStream<T>} handler{ Params :  Returns : Handler<T>} pause{ Params :  Returns : FakeStream<T>} checkPending{ Params :  Returns : void} fetch{ Params : long Returns : FakeStream<T>} resume{ Params :  Returns : FakeStream<T>} endHandler{ Params : Handler<Void> Returns : FakeStream<T>} endHandler{ Params :  Returns : Handler<Void>} write{ Params : T Returns : Future<Void>} setWriteQueueMaxSize{ Params : int Returns : FakeStream<T>} writeQueueFull{ Params :  Returns : boolean} drainHandler{ Params : Handler<Void> Returns : FakeStream<T>} drainHandler{ Params :  Returns : Handler<Void>} setEnd{ Params : Future<Void> Returns : FakeStream<T>} ,exceptionHandler handler pause fetch resume endHandler write setWriteQueueMaxSize writeQueueFull drainHandler ,,emit doEmit ,,,,,,,null
vert.x-master,io.vertx.test.fakestream,FakeStreamTest,1,1,0,0,0,false,AsyncTestBase ,0 ,0 ,stream: FakeStream<Integer> emitted: List<Integer> drained: int ,setUp{ Params :  Returns : void} testEmit{ Params :  Returns : void} testPause{ Params :  Returns : void} testResume{ Params :  Returns : void} testFetch{ Params :  Returns : void} testWriteQueueFull{ Params :  Returns : void} testEmitReentrancy{ Params :  Returns : void} testFetchReentrancy{ Params :  Returns : void} testFetchAfterEnd{ Params :  Returns : void} testAsyncEnd{ Params :  Returns : void} testAsyncEndDeferred{ Params :  Returns : void} testAck{ Params :  Returns : void} testAckFailure{ Params :  Returns : void} ,setUp ,,,,,int ,,int ,ArrayList FakeStream AtomicInteger AtomicBoolean AtomicInteger AtomicBoolean AtomicInteger AtomicReference AtomicInteger AtomicReference AtomicInteger AtomicReference RuntimeException ,ack: 
vert.x-master,io.vertx.test.faketracer,FakeTracer,1,1,0,0,0,false,0 ,VertxTracer<Span,Span> ,0 ,ACTIVE_SCOPE_KEY: String idGenerator: AtomicInteger finishedSpans: List<Span> closeCount: AtomicInteger ,nextId{ Params :  Returns : int} newTrace{ Params : SpanKind,String Returns : Span} newTrace{ Params :  Returns : Span} activeSpan{ Params :  Returns : Span} activeSpan{ Params : Context Returns : Span} activate{ Params : Span Returns : Scope} activate{ Params : Context,Span Returns : Scope} encode{ Params : Span,BiConsumer<String,String> Returns : void} decode{ Params : SpanKind,String,Iterable<Map.Entry<String,String>> Returns : Span} getServerSpan{ Params : SpanKind,TracingPolicy,String,Iterable<Map.Entry<String,String>> Returns : Span} receiveRequest{ Params : Context,SpanKind,TracingPolicy,R,String,Iterable<Map.Entry<String,String>>,TagExtractor<R> Returns : Span} sendResponse{ Params : Context,R,Span,Throwable,TagExtractor<R> Returns : void} sendRequest{ Params : Context,SpanKind,TracingPolicy,R,String,BiConsumer<String,String>,TagExtractor<R> Returns : Span} receiveResponse{ Params : Context,R,Span,Throwable,TagExtractor<R> Returns : void} addTags{ Params : Span,T,TagExtractor<T> Returns : void} getFinishedSpans{ Params :  Returns : List<Span>} close{ Params :  Returns : void} closeCount{ Params :  Returns : int} ,receiveRequest sendResponse sendRequest receiveResponse close ,,,,VertxTracer ,AtomicInteger ,,AtomicInteger ,AtomicInteger CopyOnWriteArrayList AtomicInteger Span Span Scope Span ,closeCount: 
vert.x-master,io.vertx.test.faketracer,FakeTracerFactory,1,1,0,0,0,false,0 ,VertxTracerFactory ,0 ,,tracer{ Params : TracingOptions Returns : VertxTracer} ,tracer ,,,,VertxTracerFactory ,,,,FakeTracer ,closeCount: 
vert.x-master,io.vertx.test.faketracer,Scope,1,1,0,0,0,false,0 ,0 ,0 ,wrapped: Span toRestore: Scope tracer: FakeTracer ,span{ Params :  Returns : Span} close{ Params :  Returns : void} ,,,,,,FakeTracer ,,FakeTracer ,,closeCount: 
vert.x-master,io.vertx.test.faketracer,Span,1,1,0,0,0,false,0 ,0 ,0 ,FINISHED_SENTINEL: Throwable kind: SpanKind traceId: int parentId: int id: int operation: String tracer: FakeTracer finished: AtomicReference<Throwable> tags: Map<String, String> ,getTags{ Params :  Returns : Map<String,String>} createChild{ Params : SpanKind,String Returns : Span} addTag{ Params : String,String Returns : void} failure{ Params :  Returns : Throwable} finish{ Params : Throwable Returns : void} equals{ Params : Object Returns : boolean} toString{ Params :  Returns : String} ,equals toString ,,,,,Map<String,String> ,,Map<String,String> ,Throwable AtomicReference ConcurrentHashMap Span IllegalStateException ,kind: 
vert.x-master,io.vertx.test.faketransport,FakeTransport,1,1,0,0,0,false,0 ,Transport ,0 ,CAUSE: Throwable ,isAvailable{ Params :  Returns : boolean} unavailabilityCause{ Params :  Returns : Throwable} eventLoopGroup{ Params : int,int,ThreadFactory,int Returns : EventLoopGroup} datagramChannel{ Params :  Returns : DatagramChannel} datagramChannel{ Params : InternetProtocolFamily Returns : DatagramChannel} channelFactory{ Params : boolean Returns : ChannelFactory<? extends Channel>} serverChannelFactory{ Params : boolean Returns : ChannelFactory<? extends ServerChannel>} ,isAvailable unavailabilityCause eventLoopGroup datagramChannel datagramChannel channelFactory serverChannelFactory ,,,,Transport ,,,,UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException ,kind: 
vert.x-master,io.vertx.test.netty,TestLoggerFactory,1,1,0,0,0,false,InternalLoggerFactory ,0 ,0 ,names: ConcurrentMap<String, String> ,hasName{ Params : String Returns : boolean} newInstance{ Params : String Returns : InternalLogger} isTraceEnabled{ Params :  Returns : boolean} trace{ Params : String Returns : void} trace{ Params : String,Object Returns : void} trace{ Params : String,Object,Object Returns : void} trace{ Params : String,Object Returns : void} trace{ Params : String,Throwable Returns : void} isDebugEnabled{ Params :  Returns : boolean} debug{ Params : String Returns : void} debug{ Params : String,Object Returns : void} debug{ Params : String,Object,Object Returns : void} debug{ Params : String,Object Returns : void} debug{ Params : String,Throwable Returns : void} isInfoEnabled{ Params :  Returns : boolean} info{ Params : String Returns : void} info{ Params : String,Object Returns : void} info{ Params : String,Object,Object Returns : void} info{ Params : String,Object Returns : void} info{ Params : String,Throwable Returns : void} isWarnEnabled{ Params :  Returns : boolean} warn{ Params : String Returns : void} warn{ Params : String,Object Returns : void} warn{ Params : String,Object Returns : void} warn{ Params : String,Object,Object Returns : void} warn{ Params : String,Throwable Returns : void} isErrorEnabled{ Params :  Returns : boolean} error{ Params : String Returns : void} error{ Params : String,Object Returns : void} error{ Params : String,Object,Object Returns : void} error{ Params : String,Object Returns : void} error{ Params : String,Throwable Returns : void} ,newInstance ,,,,,ConcurrentMap<String,String> ,,ConcurrentMap<String,String> ,ConcurrentHashMap AbstractInternalLogger ,names: , name, name
vert.x-master,io.vertx.test.proxy,HAProxy,1,1,0,0,0,false,0 ,0 ,0 ,log: Logger HOST: String PORT: int remoteAddress: SocketAddress header: Buffer server: NetServer connectionRemoteAddress: SocketAddress connectionLocalAddress: SocketAddress ,start{ Params : Vertx Returns : HAProxy} stop{ Params :  Returns : void} getHost{ Params :  Returns : String} getPort{ Params :  Returns : int} getConnectionRemoteAddress{ Params :  Returns : SocketAddress} getConnectionLocalAddress{ Params :  Returns : SocketAddress} createVersion1TCP4ProtocolHeader{ Params : SocketAddress,SocketAddress Returns : Buffer} createVersion1TCP6ProtocolHeader{ Params : SocketAddress,SocketAddress Returns : Buffer} createVersion1UnknownProtocolHeader{ Params :  Returns : Buffer} createVersion2TCP4ProtocolHeader{ Params : SocketAddress,SocketAddress Returns : Buffer} createVersion2TCP6ProtocolHeader{ Params : SocketAddress,SocketAddress Returns : Buffer} createVersion2UDP4ProtocolHeader{ Params : SocketAddress,SocketAddress Returns : Buffer} createVersion2UDP6ProtocolHeader{ Params : SocketAddress,SocketAddress Returns : Buffer} createVersion2UnixStreamProtocolHeader{ Params : SocketAddress,SocketAddress Returns : Buffer} createVersion2UnixDatagramProtocolHeader{ Params : SocketAddress,SocketAddress Returns : Buffer} createVersion2UnknownProtocolHeader{ Params :  Returns : Buffer} createUnixStreamDatagramProtocolHeader{ Params : byte,SocketAddress,SocketAddress Returns : Buffer} createIPv4IPv6ProtocolHeader{ Params : byte,SocketAddress,SocketAddress Returns : Buffer} createVersion2ProtocolHeader{ Params : byte,Buffer Returns : Buffer} ,,createVersion1TCP4ProtocolHeader createVersion1TCP6ProtocolHeader createVersion1UnknownProtocolHeader createVersion2TCP4ProtocolHeader createVersion2TCP6ProtocolHeader createVersion2UDP4ProtocolHeader createVersion2UDP6ProtocolHeader createVersion2UnixStreamProtocolHeader createVersion2UnixDatagramProtocolHeader createVersion2UnknownProtocolHeader createUnixStreamDatagramProtocolHeader createIPv4IPv6ProtocolHeader createVersion2ProtocolHeader ,,,,SocketAddress ,,SocketAddress ,NetServerOptions NetClientOptions CompletableFuture RuntimeException ,address: 
vert.x-master,io.vertx.test.proxy,HttpProxy,1,1,0,0,0,false,TestProxyBase<HttpProxy> ,0 ,0 ,DEFAULT_PORT: int log: Logger server: HttpServer clientMap: Map<HttpConnection, HttpClient> error: int lastRequestHeaders: MultiMap lastMethod: HttpMethod ,defaultPort{ Params :  Returns : int} start{ Params : Vertx Returns : HttpProxy} stop{ Params :  Returns : void} getLastMethod{ Params :  Returns : HttpMethod} getLastRequestHeaders{ Params :  Returns : MultiMap} setError{ Params : int Returns : HttpProxy} ,defaultPort start stop getLastMethod getLastRequestHeaders ,,,,,HttpMethod ,,HttpMethod ,ConcurrentHashMap HttpServerOptions NetClientOptions RequestOptions HttpClientOptions CompletableFuture ,server: 
vert.x-master,io.vertx.test.proxy,Socks4Proxy,1,1,0,0,0,false,TestProxyBase<Socks4Proxy> ,0 ,0 ,log: Logger clientRequest: Buffer connectResponse: Buffer errorResponse: Buffer DEFAULT_PORT: int server: NetServer ,defaultPort{ Params :  Returns : int} start{ Params : Vertx Returns : Socks4Proxy} getString{ Params : Buffer Returns : String} getByte4{ Params : Buffer Returns : String} toHex{ Params : Buffer Returns : String} stop{ Params :  Returns : void} ,defaultPort start stop ,,,,,NetServer ,,NetServer ,NetServerOptions IllegalStateException NetClientOptions CompletableFuture StringBuilder ,server: 
vert.x-master,io.vertx.test.proxy,SocksProxy,1,1,0,0,0,false,TestProxyBase<SocksProxy> ,0 ,0 ,log: Logger clientInit: Buffer serverReply: Buffer clientRequest: Buffer connectResponse: Buffer errorResponse: Buffer clientInitAuth: Buffer serverReplyAuth: Buffer authSuccess: Buffer authFailed: Buffer DEFAULT_PORT: int server: NetServer ,defaultPort{ Params :  Returns : int} start{ Params : Vertx Returns : SocksProxy} toHex{ Params : Buffer Returns : String} stop{ Params :  Returns : void} ,defaultPort start stop ,,,,,NetServer ,,NetServer ,NetServerOptions IllegalStateException IllegalStateException IllegalStateException IllegalStateException IllegalStateException NetClientOptions CompletableFuture StringBuilder ,server: 
vert.x-master,io.vertx.test.proxy,TestProxyBase,1,1,1,0,0,false,0 ,0 ,0 ,username: Supplier<String> port: int lastUri: String forceUri: String localAddresses: List<String> ,username{ Params : String Returns : P} username{ Params : Supplier<String> Returns : P} username{ Params : Collection<String> Returns : P} nextUserName{ Params :  Returns : String} port{ Params : int Returns : P} port{ Params :  Returns : int} defaultPort{ Params :  Returns : int} lastLocalAddress{ Params :  Returns : String} localAddresses{ Params :  Returns : List<String>} getLastUri{ Params :  Returns : String} getLastMethod{ Params :  Returns : HttpMethod} setForceUri{ Params : String Returns : void} getLastRequestHeaders{ Params :  Returns : MultiMap} start{ Params : Vertx Returns : TestProxyBase} stop{ Params :  Returns : void} ,,,,defaultPort start stop ,,,,,ArrayList UnsupportedOperationException UnsupportedOperationException ,localAddresses: , idx - 1
vert.x-master,io.vertx.test.spi,FakeFactory,2,1,0,0,0,true,0 ,0 ,0 ,,name{ Params :  Returns : String} classloader{ Params :  Returns : ClassLoader} ,,,,,,,,,,localAddresses: , idx - 1
vert.x-master,io.vertx.test.spi,NotImplementedSPI,2,1,0,0,0,true,0 ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.test.spi,SomeFactory,2,1,0,0,0,true,0 ,0 ,0 ,,name{ Params :  Returns : String} classloader{ Params :  Returns : ClassLoader} ,,,,,,,,,,localAddresses: , idx - 1
vert.x-master,io.vertx.test.tls,Cert,2,1,0,0,0,true,0 ,0 ,0 ,NONE: Cert<KeyCertOptions> SERVER_JKS: Cert<JksOptions> CLIENT_JKS: Cert<JksOptions> SERVER_PKCS12: Cert<PfxOptions> CLIENT_PKCS12: Cert<PfxOptions> SERVER_PEM: Cert<PemKeyCertOptions> SERVER_PEM_RSA: Cert<PemKeyCertOptions> CLIENT_PEM: Cert<PemKeyCertOptions> SERVER_JKS_ROOT_CA: Cert<JksOptions> SERVER_PKCS12_ROOT_CA: Cert<PfxOptions> SERVER_PEM_ROOT_CA: Cert<PemKeyCertOptions> CLIENT_PEM_ROOT_CA: Cert<PemKeyCertOptions> SERVER_PEM_INT_CA: Cert<PemKeyCertOptions> SERVER_PEM_CA_CHAIN: Cert<PemKeyCertOptions> SERVER_PEM_OTHER_CA: Cert<PemKeyCertOptions> SERVER_MIM: Cert<JksOptions> SNI_JKS: Cert<JksOptions> SNI_PKCS12: Cert<PfxOptions> SNI_PEM: Cert<PemKeyCertOptions> MULTIPLE_JKS: Cert<JksOptions> MULTIPLE_JKS_WRONG_ALIAS: Cert<JksOptions> MULTIPLE_JKS_ALIAS_PASSWORD: Cert<JksOptions> ,,,,,,,,,,JksOptions JksOptions PfxOptions PfxOptions PemKeyCertOptions PemKeyCertOptions PemKeyCertOptions JksOptions PfxOptions PemKeyCertOptions PemKeyCertOptions PemKeyCertOptions PemKeyCertOptions PemKeyCertOptions JksOptions JksOptions PfxOptions PemKeyCertOptions JksOptions JksOptions JksOptions ,null
vert.x-master,io.vertx.test.tls,Trust,2,1,0,0,0,true,0 ,0 ,0 ,NONE: Trust<TrustOptions> SERVER_JKS: Trust<JksOptions> CLIENT_JKS: Trust<JksOptions> SERVER_PKCS12: Trust<PfxOptions> CLIENT_PKCS12: Trust<PfxOptions> SERVER_PEM: Trust<PemTrustOptions> CLIENT_PEM: Trust<PemTrustOptions> SERVER_JKS_ROOT_CA: Trust<JksOptions> SERVER_PKCS12_ROOT_CA: Trust<PfxOptions> SERVER_PEM_ROOT_CA: Trust<PemTrustOptions> CLIENT_PEM_ROOT_CA: Trust<PemTrustOptions> SERVER_PEM_ROOT_CA_AND_OTHER_CA: Trust<PemTrustOptions> SNI_JKS_HOST1: Trust<JksOptions> SNI_JKS_HOST2: Trust<JksOptions> SNI_JKS_HOST3: Trust<JksOptions> SNI_JKS_HOST4: Trust<JksOptions> SNI_JKS_HOST5: Trust<JksOptions> SNI_SERVER_ROOT_CA_AND_OTHER_CA_1: Trust<TrustOptions> SNI_SERVER_ROOT_CA_AND_OTHER_CA_2: Trust<TrustOptions> SNI_SERVER_ROOT_CA_FALLBACK: Trust<TrustOptions> SNI_SERVER_OTHER_CA_FALLBACK: Trust<TrustOptions> ,,,,,,,,,,JksOptions JksOptions PfxOptions PfxOptions PemTrustOptions PemTrustOptions JksOptions PfxOptions PemTrustOptions PemTrustOptions PemTrustOptions JksOptions JksOptions JksOptions JksOptions JksOptions JksOptions JksOptions JksOptions JksOptions ,null
vert.x-master,io.vertx.test.verticles,ExtraCPVerticleAlreadyInParentLoader,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,,start{ Params :  Returns : void} ,start ,,,,,,,,,cl: 
vert.x-master,io.vertx.test.verticles,ExtraCPVerticleNotInParentLoader,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,cl: IsolatingClassLoader ,start{ Params :  Returns : void} ,start ,,,,,,,,,Assert: , "Parent classloader should not see this class"
vert.x-master,io.vertx.test.verticles,FaultToleranceVerticle,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,log: Logger id: int numAddresses: int ,start{ Params :  Returns : void} ping{ Params : Message<JsonArray> Returns : void} createAddress{ Params : int,int Returns : String} ,start ,,,,,int ,,int ,ArrayList ,log: , "Unexpected error during ping (id=" + id + ")", cause
vert.x-master,io.vertx.test.verticles,HAVerticle1,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,,start{ Params :  Returns : void} stop{ Params :  Returns : void} ,start stop ,,,,,,,,,log: , "Unexpected error during ping (id=" + id + ")", cause
vert.x-master,io.vertx.test.verticles,HAVerticle2,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,,start{ Params :  Returns : void} stop{ Params :  Returns : void} ,start stop ,,,,,,,,,log: , "Unexpected error during ping (id=" + id + ")", cause
vert.x-master,io.vertx.test.verticles,HAVerticle3,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,,start{ Params :  Returns : void} stop{ Params :  Returns : void} ,start stop ,,,,,,,,,log: , "Unexpected error during ping (id=" + id + ")", cause
vert.x-master,io.vertx.test.verticles,SimpleServer,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,,start{ Params : Promise<Void> Returns : void} ,start ,,,,,,,,HttpServerOptions ,res: 
vert.x-master,io.vertx.test.verticles.sourceverticle.somepackage,OtherSourceVerticle,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,,,,,,,,,,,,null
vert.x-master,io.vertx.test.verticles.sourceverticle,SourceVerticle,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,,start{ Params : Promise<Void> Returns : void} ,start ,,,,,,,,DeploymentOptions ,ar: 
vert.x-master,io.vertx.test.verticles,TestVerticle,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,instanceCount: AtomicInteger processArgs: List<String> conf: JsonObject ,start{ Params :  Returns : void} stop{ Params :  Returns : void} ,start stop ,,,,,,,,AtomicInteger JsonObject ,instanceCount: 
vert.x-master,io.vertx.test.verticles,TestVerticle2,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,contexts: Set<Context> ,start{ Params :  Returns : void} stop{ Params : Promise<Void> Returns : void} ,start stop ,,,,,,,,HashSet IllegalStateException ,stopPromise: , null
vert.x-master,io.vertx.test.verticles,TestVerticle3,1,1,0,0,0,false,AbstractVerticle ,0 ,0 ,,start{ Params :  Returns : void} ,start ,,,,,,,,,vertx: 
