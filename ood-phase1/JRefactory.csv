Project Name,Package Name,Class Name,Class Type,Class Visibility,Is Abstract,Is Static,Is Final,Is Interface,Extends,Implements,Children,Fields,Methods,Overrides,Static Methods,final Methods , Abstract Methods, Association, Aggregation, Delegation, Composition, Instantiation
JRefactory,,LineNumberTool,1,1,0,0,0,false,0 ,0 ,0 ,inputList: ArrayList dest: String out: OutputStream ,init{ Params : String[] Returns : void} run{ Params :  Returns : void} getOutputStream{ Params : int,String Returns : OutputStream} getPrintData{ Params : int,PrintData Returns : PrintData} getRoot{ Params : int Returns : SimpleNode} main{ Params : String[] Returns : void} ,,main ,,,,OutputStream ,,OutputStream ,ArrayList PrettyPrintVisitor FileOutputStream LineNumberingData File FileParserFactory StdInParserFactory RefactoryInstaller LineNumberTool 
JRefactory,,Metrics,1,1,0,0,0,false,0 ,0 ,0 ,,main{ Params : String[] Returns : void} ,,main ,,,,,,,RefactoryInstaller TextLoadStatus SilentLoadStatus SummaryTraversal TextReport CommaDelimitedReport GatherData 
JRefactory,org.acm.seguin.ant,CVSUtil,1,1,0,0,1,false,0 ,0 ,CVSEntry ,entries: HashMap tz: TimeZone ,isFileModified{ Params : File Returns : boolean} loadEntriesFileFor{ Params : File Returns : CVSEntry} getFileName{ Params :  Returns : String} getDate{ Params :  Returns : Date} toString{ Params :  Returns : String} hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} equalsTime{ Params : long Returns : boolean} parseAToken{ Params : StringTokenizer Returns : String} parseEntryLine{ Params : File,String Returns : CVSEntry} parseTimestamp{ Params : String Returns : Date} setTimestamp{ Params : String Returns : void} ,,parseAToken parseEntryLine ,,,,,,,HashMap File BufferedReader FileReader StringTokenizer ParseException ParseException ParseException ParseException ParseException ParseException ParseException ParseException ParseException ParseException CVSEntry SimpleDateFormat ParsePosition ParseException String 
JRefactory,org.acm.seguin.ant,CVSEntry,3,1,0,1,0,false,0 ,0 ,CVSEntry ,fileName: String date: Date ,isFileModified{ Params : File Returns : boolean} loadEntriesFileFor{ Params : File Returns : CVSEntry} getFileName{ Params :  Returns : String} getDate{ Params :  Returns : Date} toString{ Params :  Returns : String} hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} equalsTime{ Params : long Returns : boolean} parseAToken{ Params : StringTokenizer Returns : String} parseEntryLine{ Params : File,String Returns : CVSEntry} parseTimestamp{ Params : String Returns : Date} setTimestamp{ Params : String Returns : void} ,,parseAToken parseEntryLine ,,,,Date ,,Date ,StringTokenizer ParseException ParseException ParseException ParseException ParseException ParseException ParseException ParseException ParseException ParseException CVSEntry SimpleDateFormat ParsePosition ParseException String 
JRefactory,org.acm.seguin.ant,Pretty,1,1,0,0,1,false,Task ,0 ,0 ,filesets: Vector cvs: boolean cvsUtil: CVSUtil ,addFileset{ Params : FileSet Returns : void} setSettingsdir{ Params : File Returns : void} setCvs{ Params : boolean Returns : void} execute{ Params :  Returns : void} validateAttributes{ Params :  Returns : void} ,,,,,,CVSUtil ,,CVSUtil ,Vector CVSUtil PrettyPrintFile File FileParserFactory BuildException BuildException 
JRefactory,org.acm.seguin.awt,AboutBox,1,1,0,0,0,false,JWindow ,ActionListener ,0 ,,main{ Params : String[] Returns : void} actionPerformed{ Params : ActionEvent Returns : void} run{ Params :  Returns : void} ,,main run ,,,ActionListener ,,,,ImagePanel JLabel JRefactoryVersion JLabel JLabel JLabel JButton AboutBox 
JRefactory,org.acm.seguin.awt,CenterDialog,1,1,0,0,0,false,0 ,0 ,0 ,,center{ Params : JDialog,JFrame Returns : void} center{ Params : JDialog Returns : void} center{ Params : JDialog,UMLPackage Returns : void} ,,center center center ,,,,,,,
JRefactory,org.acm.seguin.awt,ExceptionDialog,1,1,0,0,0,false,JDialog ,ActionListener ,0 ,,actionPerformed{ Params : ActionEvent Returns : void} createPanel{ Params : String Returns : JPanel} createStackTrace{ Params : Throwable Returns : JPanel} untab{ Params : String Returns : String} main{ Params : String[] Returns : void} ,,main ,,,ActionListener ,,,,JLabel Dimension JScrollPane JScrollPane JButton LinkedList StringTokenizer JPanel GridLayout JLabel StringWriter PrintWriter StringBuffer ExceptionDialog Exception 
JRefactory,org.acm.seguin.awt,ExceptionPrinter,1,1,0,0,0,false,0 ,0 ,0 ,,print{ Params : Throwable Returns : void} dialog{ Params : Throwable Returns : void} ,,print dialog ,,,,,,,ExceptionDialog 
JRefactory,org.acm.seguin.awt,ImagePanel,1,1,0,0,0,false,JPanel ,0 ,0 ,imgIcon: ImageIcon wide: int high: int ,paint{ Params : Graphics Returns : void} ,,,,,,int ,,int ,ImageIcon Dimension 
JRefactory,org.acm.seguin.awt,MoveItemAdapter,1,0,0,0,0,false,0 ,ActionListener ,0 ,olm: OrderableListModel list: JList direction: int ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,int ,,int ,
JRefactory,org.acm.seguin.awt,OrderableList,1,1,0,0,0,false,JPanel ,0 ,0 ,olm: OrderableListModel ,main{ Params : String[] Returns : void} getData{ Params :  Returns : Object[]} addListDataListener{ Params : ListDataListener Returns : void} removeListDataListener{ Params : ListDataListener Returns : void} ,,main ,,,,OrderableListModel ,,OrderableListModel ,OrderableListModel JList JButton MoveItemAdapter JButton MoveItemAdapter Dimension JFrame OrderableList 
JRefactory,org.acm.seguin.awt,OrderableListModel,1,0,0,0,0,false,AbstractListModel ,0 ,0 ,data: Object list: JList ,setData{ Params : Object[] Returns : void} setList{ Params : JList Returns : void} getData{ Params :  Returns : Object[]} getElementAt{ Params : int Returns : Object} getSize{ Params :  Returns : int} swap{ Params : int,int Returns : void} ,,,,,,JList ,,JList ,
JRefactory,org.acm.seguin.awt,Question,1,1,0,0,0,false,0 ,0 ,0 ,autoYes: boolean ,setAlwaysYes{ Params : boolean Returns : void} isYes{ Params : String,String Returns : boolean} ,,setAlwaysYes isYes ,,,,,,,
JRefactory,org.acm.seguin.ide.cafe,CafeExtractMethod,1,0,0,0,0,false,ExtractMethodDialog ,ActionListener ,0 ,sourceFile: SourceFile ,setStringInIDE{ Params : String Returns : void} getStringFromIDE{ Params :  Returns : String} getSelectionFromIDE{ Params :  Returns : String} actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,SourceFile ,,SourceFile ,
JRefactory,org.acm.seguin.ide.cafe,CafePrettyPrinter,1,1,0,0,0,false,PrettyPrintFromIDE ,ActionListener ,0 ,sourceFile: SourceFile ,actionPerformed{ Params : ActionEvent Returns : void} setStringInIDE{ Params : String Returns : void} getStringFromIDE{ Params :  Returns : String} getLineNumber{ Params :  Returns : int} setLineNumber{ Params : int Returns : void} ,,,,,ActionListener ,SourceFile ,,SourceFile ,
JRefactory,org.acm.seguin.ide.cafe,CafeSetup,1,1,0,0,0,false,0 ,Plugin ,0 ,,getPluginInfo{ Params :  Returns : void} init{ Params :  Returns : void} destroy{ Params :  Returns : void} save{ Params : OutputStream,boolean Returns : void} restore{ Params : InputStream,boolean Returns : void} getSubMenu{ Params :  Returns : Menu} ,,,,,Plugin ,,,,RefactoryInstaller Menu MenuItem CafePrettyPrinter MenuItem CafeExtractMethod MenuItem ReloadActionAdapter 
JRefactory,org.acm.seguin.ide.cafe,ReloadActionAdapter,1,1,0,0,0,false,0 ,ActionListener ,0 ,reloader: MultipleDirClassDiagramReloader ,actionPerformed{ Params : ActionEvent Returns : void} getDirectory{ Params : VisualProject Returns : String} ,,,,,ActionListener ,,,,MultipleDirClassDiagramReloader 
JRefactory,org.acm.seguin.ide.command,CommandLineMenu,1,0,0,0,0,false,0 ,0 ,0 ,,getMenuBar{ Params : JPanel Returns : JMenuBar} createFileMenu{ Params : JPanel Returns : JMenu} createEditMenu{ Params :  Returns : JMenu} createZoomMenu{ Params : JPanel Returns : JMenu} ,,,,,,,,,JMenuBar JMenu JMenuItem SaveMenuSelection JMenuItem SaveAdapter JMenuItem PrintSetupAdapter JMenuItem PrintAdapter JMenuItem ExitMenuSelection JMenu JMenuItem UndoAdapter JMenu JMenuItem ZoomAdapter JMenuItem ZoomAdapter JMenuItem ZoomAdapter JMenuItem ZoomAdapter JMenuItem ZoomAdapter 
JRefactory,org.acm.seguin.ide.command,CommandLineSourceBrowser,1,1,0,0,0,false,SourceBrowser ,0 ,0 ,pattern: String ,canBrowseSource{ Params :  Returns : boolean} gotoSource{ Params : File,int Returns : void} ,,,,,,String ,,String ,StringBuffer 
JRefactory,org.acm.seguin.ide.command,ExitMenuSelection,1,1,0,0,0,false,WindowAdapter ,ActionListener ,0 ,,actionPerformed{ Params : ActionEvent Returns : void} windowClosing{ Params : WindowEvent Returns : void} finish{ Params :  Returns : void} ,,,,,ActionListener ,,,,
JRefactory,org.acm.seguin.ide.command,PackageSelectorPanel,1,1,0,0,0,false,PackageSelectorArea ,ActionListener Saveable Reloader ,ButtonPanel ,rootDir: String viewList: HashMap buttons: ButtonPanel mainPanel: PackageSelectorPanel ,actionPerformed{ Params : ActionEvent Returns : void} reload{ Params :  Returns : void} save{ Params :  Returns : void} loadPackages{ Params :  Returns : void} loadSummaries{ Params :  Returns : void} setRootDirectory{ Params : String Returns : void} getPackage{ Params : PackageSummary Returns : UMLFrame} addPackage{ Params : PackageSummary,UMLFrame Returns : void} showSummary{ Params : PackageSummary Returns : void} hideSummary{ Params : PackageSummary Returns : void} createNewView{ Params : PackageSummary Returns : void} createFrame{ Params :  Returns : void} getMainPanel{ Params : String Returns : PackageSelectorPanel} main{ Params : String[] Returns : void} getPreferredSize{ Params :  Returns : Dimension} getMaximumSize{ Params :  Returns : Dimension} init{ Params :  Returns : void} ,,getMainPanel main ,,,ActionListener Saveable Reloader ,,getMainPanel ,,ButtonPanel HashMap SummaryTraversal UMLFrame JFrame JPanel BorderLayout EmptyBorder CommandLineMenu ExitMenuSelection PackageSelectorPanel Dimension JButton JButton JButton JButton 
JRefactory,org.acm.seguin.ide.command,ButtonPanel,3,2,0,0,0,false,PackageSelectorArea ,ActionListener Saveable Reloader ,ButtonPanel ,listener: ActionListener ,actionPerformed{ Params : ActionEvent Returns : void} reload{ Params :  Returns : void} save{ Params :  Returns : void} loadPackages{ Params :  Returns : void} loadSummaries{ Params :  Returns : void} setRootDirectory{ Params : String Returns : void} getPackage{ Params : PackageSummary Returns : UMLFrame} addPackage{ Params : PackageSummary,UMLFrame Returns : void} showSummary{ Params : PackageSummary Returns : void} hideSummary{ Params : PackageSummary Returns : void} createNewView{ Params : PackageSummary Returns : void} createFrame{ Params :  Returns : void} getMainPanel{ Params : String Returns : PackageSelectorPanel} main{ Params : String[] Returns : void} getPreferredSize{ Params :  Returns : Dimension} getMaximumSize{ Params :  Returns : Dimension} init{ Params :  Returns : void} ,,getMainPanel main ,,,,ActionListener ,,ActionListener ,Dimension JButton JButton JButton JButton 
JRefactory,org.acm.seguin.ide.command,UMLFrame,1,1,0,0,0,false,JFrame ,0 ,0 ,packageSummary: PackageSummary view: UMLPackage splitPane: JSplitPane ,getUmlPackage{ Params :  Returns : UMLPackage} setup{ Params :  Returns : void} ,,,,,,JSplitPane ,,JSplitPane ,UMLPackage JScrollPane DividedSummaryPanel JSplitPane Dimension Dimension CommandLineMenu 
JRefactory,org.acm.seguin.ide.command,ZoomAdapter,1,1,0,0,0,false,0 ,ActionListener ,0 ,panel: LinedPanel scale: double ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,double ,,double ,
JRefactory,org.acm.seguin.ide.common.action,AddChildClassAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} initNames{ Params :  Returns : void} ,,,,,,,,,AddChildClassListener 
JRefactory,org.acm.seguin.ide.common.action,AddParentClassAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} initNames{ Params :  Returns : void} ,,,,,,,,,AddParentClassListener 
JRefactory,org.acm.seguin.ide.common.action,CurrentSummary,1,1,1,0,0,false,Object ,DocumentListener ,0 ,upToDate: boolean summary: Summary fileSummary: FileSummary singleton: CurrentSummary ,getCurrentSummary{ Params :  Returns : Summary} insertUpdate{ Params : DocumentEvent Returns : void} removeUpdate{ Params : DocumentEvent Returns : void} changedUpdate{ Params : DocumentEvent Returns : void} reset{ Params :  Returns : void} updateMetaData{ Params :  Returns : void} getLineNumber{ Params :  Returns : int} getActiveFile{ Params :  Returns : File} getMetadataReloader{ Params :  Returns : MultipleDirClassDiagramReloader} registerWithCurrentDocument{ Params :  Returns : void} isSameFile{ Params :  Returns : boolean} getInType{ Params : FileSummary,int Returns : Summary} isInMethod{ Params : TypeSummary,int Returns : Summary} isInField{ Params : TypeSummary,int Returns : Summary} isInNestedClass{ Params : TypeSummary,int Returns : Summary} isInSameSummary{ Params :  Returns : boolean} find{ Params :  Returns : Summary} reloadNode{ Params :  Returns : FileSummary} findSummaryInType{ Params : TypeSummary,int Returns : Summary} lockAccess{ Params :  Returns : void} get{ Params :  Returns : CurrentSummary} register{ Params : CurrentSummary Returns : void} ,,get register ,,getMetadataReloader registerWithCurrentDocument ,DocumentListener ,,,,ByteArrayInputStream 
JRefactory,org.acm.seguin.ide.common.action,EmptySelectedFileSet,1,1,0,0,0,false,SelectedFileSet ,0 ,0 ,,isAllJava{ Params :  Returns : boolean} isSingleJavaFile{ Params :  Returns : boolean} getTypeSummaryArray{ Params :  Returns : TypeSummary[]} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.common.action,ExtractInterfaceAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} initNames{ Params :  Returns : void} ,,,,,,,,,ExtractInterfaceListener 
JRefactory,org.acm.seguin.ide.common.action,ExtractMethodAction,1,1,0,0,0,false,GenericAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} actionPerformed{ Params : ActionEvent Returns : void} ,,,,,,,,,GenericExtractMethod 
JRefactory,org.acm.seguin.ide.common.action,GenericAction,1,1,1,0,0,false,AbstractAction ,0 ,0 ,ACCELERATOR: String ,,,,,,,,,,
JRefactory,org.acm.seguin.ide.common.action,GenericExtractMethod,1,0,0,0,0,false,ExtractMethodDialog ,0 ,0 ,,setStringInIDE{ Params : String Returns : void} getStringFromIDE{ Params :  Returns : String} getSelectionFromIDE{ Params :  Returns : String} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.common.action,GenericPrettyPrinter,1,1,0,0,0,false,PrettyPrintFromIDE ,0 ,0 ,,setStringInIDE{ Params : String Returns : void} setLineNumber{ Params : int Returns : void} getStringFromIDE{ Params :  Returns : String} getLineNumber{ Params :  Returns : int} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.common.action,MoveClassAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} initNames{ Params :  Returns : void} ,,,,,,,,,AddMoveClassListener 
JRefactory,org.acm.seguin.ide.common.action,MoveMethodAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} ,,,,,,,,,MoveMethodListener 
JRefactory,org.acm.seguin.ide.common.action,PrettyPrinterAction,1,1,0,0,0,false,GenericAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} actionPerformed{ Params : ActionEvent Returns : void} ,,,,,,,,,GenericPrettyPrinter 
JRefactory,org.acm.seguin.ide.common.action,PushDownFieldAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} ,,,,,,,,,EmptySelectedFileSet PushDownFieldListener 
JRefactory,org.acm.seguin.ide.common.action,PushDownMethodAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} ,,,,,,,,,EmptySelectedFileSet PushDownMethodListener 
JRefactory,org.acm.seguin.ide.common.action,PushUpAbstractMethodAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} ,,,,,,,,,EmptySelectedFileSet PushUpAbstractMethodListener 
JRefactory,org.acm.seguin.ide.common.action,PushUpFieldAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} ,,,,,,,,,EmptySelectedFileSet PushUpFieldListener 
JRefactory,org.acm.seguin.ide.common.action,PushUpMethodAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} ,,,,,,,,,EmptySelectedFileSet PushUpMethodListener 
JRefactory,org.acm.seguin.ide.common.action,RefactoringAction,1,0,1,0,0,false,GenericAction ,0 ,0 ,selectedFileSet: SelectedFileSet ,actionPerformed{ Params : ActionEvent Returns : void} isSingleJavaFile{ Params :  Returns : boolean} isAllJava{ Params :  Returns : boolean} updateMetaData{ Params :  Returns : void} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} getTypeSummaryArray{ Params :  Returns : TypeSummary[]} ,,,,activateListener ,,SelectedFileSet ,,SelectedFileSet ,
JRefactory,org.acm.seguin.ide.common.action,RemoveClassAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} initNames{ Params :  Returns : void} ,,,,,,,,,RemoveClassListener 
JRefactory,org.acm.seguin.ide.common.action,RenameClassAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} initNames{ Params :  Returns : void} ,,,,,,,,,AddRenameClassListener 
JRefactory,org.acm.seguin.ide.common.action,RenameFieldAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} ,,,,,,,,,EmptySelectedFileSet RenameFieldListener 
JRefactory,org.acm.seguin.ide.common.action,RenameParameterAction,1,1,0,0,0,false,RefactoringAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} activateListener{ Params : TypeSummary[],ActionEvent Returns : void} ,,,,,,,,,EmptySelectedFileSet RenameParameterListener 
JRefactory,org.acm.seguin.ide.common.action,SelectedFileSet,1,1,1,0,0,false,0 ,0 ,0 ,,isAllJava{ Params :  Returns : boolean} isSingleJavaFile{ Params :  Returns : boolean} getTypeSummaryArray{ Params :  Returns : TypeSummary[]} getTypeSummary{ Params : FileSummary Returns : TypeSummary} reloadFile{ Params : File,InputStream Returns : FileSummary} ,,,,isAllJava isSingleJavaFile getTypeSummaryArray ,,,,,
JRefactory,org.acm.seguin.ide.common,ClassListPanel,1,1,0,0,0,false,JPanel ,0 ,0 ,summary: PackageSummary umlPackage: UMLPackage ,load{ Params : PackageSummary Returns : void} init{ Params :  Returns : void} addTypeToPanel{ Params : TypeSummary,GridBagConstraints,int Returns : void} listTypes{ Params :  Returns : Iterator} main{ Params : String[] Returns : void} ,,main ,,,,UMLPackage ,,UMLPackage ,GridBagLayout GridBagConstraints JLabel JLabel Font Insets JumpToTypeAdapter InterfaceIcon ClassIcon IconPanel JLabel TreeMap SummaryTraversal JFrame ClassListPanel ExitOnCloseAdapter 
JRefactory,org.acm.seguin.ide.common,DefaultPackageListFilter,1,1,0,0,0,false,PackageListFilter ,0 ,0 ,,isIncluded{ Params : PackageSummary Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.common,DividedSummaryPanel,1,1,0,0,0,false,0 ,0 ,0 ,keyPane: JScrollPane summaryPane: JScrollPane splitPane: JSplitPane ,getPane{ Params :  Returns : JComponent} init{ Params : PackageSummary,UMLPackage Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,,,,JScrollPane KeyPanel JScrollPane ClassListPanel JSplitPane Dimension Dimension SummaryTraversal JFrame DividedSummaryPanel ExitOnCloseAdapter 
JRefactory,org.acm.seguin.ide.common,EditorOperations,1,1,1,0,0,false,0 ,0 ,0 ,singleton: EditorOperations ,setStringInIDE{ Params : String Returns : void} setLineNumber{ Params : int Returns : void} getStringFromIDE{ Params :  Returns : String} getLineNumber{ Params :  Returns : int} getEditorFrame{ Params :  Returns : JFrame} getSelectionFromIDE{ Params :  Returns : String} isJavaFile{ Params :  Returns : boolean} getFile{ Params :  Returns : File} get{ Params :  Returns : EditorOperations} register{ Params : EditorOperations Returns : void} ,,get register ,,setStringInIDE setLineNumber getStringFromIDE getLineNumber getEditorFrame getSelectionFromIDE isJavaFile getFile ,,,,,
JRefactory,org.acm.seguin.ide.common,ExitOnCloseAdapter,1,1,0,0,0,false,WindowAdapter ,0 ,0 ,,windowClosing{ Params : WindowEvent Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.common,IconPanel,1,0,0,0,0,false,JPanel ,0 ,0 ,icon: Icon ,getPreferredSize{ Params :  Returns : Dimension} getMinimumSize{ Params :  Returns : Dimension} paint{ Params : Graphics Returns : void} ,,,,,,Icon ,,Icon ,Dimension 
JRefactory,org.acm.seguin.ide.common,JumpToTypeAdapter,1,0,0,0,0,false,MouseAdapter ,0 ,0 ,umlPackage: UMLPackage typeSummary: TypeSummary ,mouseClicked{ Params : MouseEvent Returns : void} ,,,,,,TypeSummary ,,TypeSummary ,
JRefactory,org.acm.seguin.ide.common,KeyPanel,1,1,0,0,0,false,JPanel ,0 ,0 ,,init{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,,,,GridBagLayout GridBagConstraints JLabel Font Insets ProtectionIcon IconPanel JLabel ProtectionIcon IconPanel JLabel ProtectionIcon IconPanel JLabel ProtectionIcon IconPanel JLabel ClassIcon IconPanel JLabel InterfaceIcon IconPanel JLabel JLabel Font JLabel JLabel Font JLabel JLabel Font JLabel JFrame KeyPanel ExitOnCloseAdapter 
JRefactory,org.acm.seguin.ide.common,MultipleDirClassDiagramReloader,1,1,0,0,0,false,ClassDiagramReloader ,0 ,0 ,list: LinkedList necessary: boolean ,setNecessary{ Params : boolean Returns : void} isNecessary{ Params :  Returns : boolean} clear{ Params :  Returns : void} addRootDirectory{ Params : String Returns : void} reload{ Params :  Returns : void} ,,,,,,boolean ,,boolean ,LinkedList StringBuffer SummaryLoaderThread 
JRefactory,org.acm.seguin.ide.common,NoSourceBrowser,1,1,0,0,0,false,SourceBrowser ,0 ,0 ,,canBrowseSource{ Params :  Returns : boolean} gotoSource{ Params : File,int Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.common,PackageListFilter,1,1,1,0,0,false,0 ,0 ,0 ,singleton: PackageListFilter ,isIncluded{ Params : PackageSummary Returns : boolean} setSingleton{ Params : PackageListFilter Returns : void} get{ Params :  Returns : PackageListFilter} ,,setSingleton get ,,isIncluded ,,,,,DefaultPackageListFilter 
JRefactory,org.acm.seguin.ide.common,PackageNameLoader,1,1,0,0,0,false,0 ,0 ,0 ,,load{ Params : String Returns : String} parseLine{ Params : String Returns : String} ,,,,,,,,,BufferedReader FileReader StringTokenizer 
JRefactory,org.acm.seguin.ide.common,PackageSelectorArea,1,1,0,0,0,false,JPanel ,0 ,0 ,listbox: JList pane: JScrollPane ,getScrollPane{ Params :  Returns : JScrollPane} getSelection{ Params :  Returns : PackageSummary} loadSummaries{ Params :  Returns : void} loadPackages{ Params :  Returns : void} ,,,,,,JScrollPane ,,JScrollPane ,JList JScrollPane PackageSummaryListModel 
JRefactory,org.acm.seguin.ide.common,PackageSelectorDialog,1,1,0,0,0,false,JDialog ,ActionListener ,ButtonPanel ,selection: PackageSelectorArea summary: PackageSummary buttons: ButtonPanel ,getSummary{ Params :  Returns : PackageSummary} actionPerformed{ Params : ActionEvent Returns : void} main{ Params : String[] Returns : void} getPreferredSize{ Params :  Returns : Dimension} getMaximumSize{ Params :  Returns : Dimension} getMinimumSize{ Params :  Returns : Dimension} init{ Params :  Returns : void} ,,main ,,,ActionListener ,ButtonPanel ,,ButtonPanel ,BorderLayout PackageSelectorArea EmptyBorder ButtonPanel PackageSelectorDialog Dimension JButton JButton 
JRefactory,org.acm.seguin.ide.common,ButtonPanel,3,2,0,0,0,false,JDialog ,ActionListener ,ButtonPanel ,listener: ActionListener preferredSize: Dimension ,getSummary{ Params :  Returns : PackageSummary} actionPerformed{ Params : ActionEvent Returns : void} main{ Params : String[] Returns : void} getPreferredSize{ Params :  Returns : Dimension} getMaximumSize{ Params :  Returns : Dimension} getMinimumSize{ Params :  Returns : Dimension} init{ Params :  Returns : void} ,,main ,,,,Dimension ,,Dimension ,Dimension JButton JButton 
JRefactory,org.acm.seguin.ide.common,SingleDirClassDiagramReloader,1,1,0,0,0,false,ClassDiagramReloader ,0 ,0 ,base: String necessary: boolean ,setNecessary{ Params : boolean Returns : void} isNecessary{ Params :  Returns : boolean} setRootDirectory{ Params : String Returns : void} reload{ Params :  Returns : void} ,,,,,,boolean ,,boolean ,SummaryLoaderThread 
JRefactory,org.acm.seguin.ide.common,SourceBrowser,1,1,1,0,0,false,0 ,0 ,0 ,singleton: SourceBrowser ,canBrowseSource{ Params :  Returns : boolean} gotoSource{ Params : File,int Returns : void} set{ Params : SourceBrowser Returns : void} get{ Params :  Returns : SourceBrowser} ,,set get ,,canBrowseSource gotoSource ,,,,,NoSourceBrowser 
JRefactory,org.acm.seguin.ide.common,SourceBrowserAdapter,1,1,0,0,0,false,0 ,ActionListener ,0 ,activeComponent: ISourceful ,actionPerformed{ Params : ActionEvent Returns : void} getLine{ Params :  Returns : int} getSummary{ Params :  Returns : Summary} findFile{ Params :  Returns : File} ,,,,,ActionListener ,ISourceful ,,ISourceful ,
JRefactory,org.acm.seguin.ide.common,SummaryLoaderThread,1,1,0,0,0,false,Thread ,0 ,0 ,base: String count: int ,run{ Params :  Returns : void} waitForLoading{ Params :  Returns : void} ,,waitForLoading ,,,,,,,StringTokenizer SummaryTraversal 
JRefactory,org.acm.seguin.ide.common,TextPrinter,1,1,0,0,0,false,0 ,0 ,0 ,,print{ Params : String,String Returns : void} isPropertyFile{ Params : String Returns : boolean} isMarkupLanguage{ Params : String Returns : boolean} getExtension{ Params : String Returns : String} ,,,,,,,,,PropertyLinePrinter XMLLinePrinter NumberedLinePrinter PrintingThread 
JRefactory,org.acm.seguin.ide.common,UMLIcon,1,1,0,0,0,false,0 ,Icon ,0 ,,getIconHeight{ Params :  Returns : int} getIconWidth{ Params :  Returns : int} paintIcon{ Params : Component,Graphics,int,int Returns : void} drawClassDiagram{ Params : Graphics,int,int Returns : void} ,,,,,Icon ,,,,
JRefactory,org.acm.seguin.ide.common,UndoAdapter,1,1,0,0,0,false,0 ,ActionListener ,0 ,,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,,,,
JRefactory,org.acm.seguin.ide.elixir,ElixirClassDiagramLoader,1,1,0,0,0,false,0 ,0 ,0 ,singleton: SingleDirClassDiagramReloader ,reload{ Params :  Returns : void} register{ Params : SingleDirClassDiagramReloader Returns : void} ,,reload register ,,,,,,,
JRefactory,org.acm.seguin.ide.elixir,ElixirExtractMethod,1,1,0,0,0,false,ExtractMethodDialog ,0 ,0 ,bvm: BasicViewManager ,removeCR{ Params : String Returns : String} setStringInIDE{ Params : String Returns : void} getStringFromIDE{ Params :  Returns : String} getSelectionFromIDE{ Params :  Returns : String} searchPanels{ Params : Container,String Returns : Component} extractMethod{ Params :  Returns : void} ,,extractMethod ,,,,BasicViewManager ,,BasicViewManager ,StringBuffer ElixirExtractMethod 
JRefactory,org.acm.seguin.ide.elixir,ElixirPrettyPrinter,1,1,0,0,0,false,PrettyPrintFromIDE ,0 ,0 ,bvm: BasicViewManager ,removeCR{ Params : String Returns : String} setStringInIDE{ Params : String Returns : void} setLineNumber{ Params : int Returns : void} getOutputBuffer{ Params :  Returns : String} getStringFromIDE{ Params :  Returns : String} getLineNumber{ Params :  Returns : int} prettyPrint{ Params :  Returns : void} ,,prettyPrint ,,,,BasicViewManager ,,BasicViewManager ,StringBuffer ElixirPrettyPrinter 
JRefactory,org.acm.seguin.ide.elixir,ElixirSourceBrowser,1,1,0,0,0,false,SourceBrowser ,0 ,0 ,,canBrowseSource{ Params :  Returns : boolean} gotoSource{ Params : File,int Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.elixir,ElixirTextPrinter,1,1,0,0,0,false,TextPrinter ,0 ,0 ,,print{ Params :  Returns : void} printCurrent{ Params :  Returns : void} ,,printCurrent ,,,,,,,RefactoryInstaller PrintingThread File ElixirTextPrinter 
JRefactory,org.acm.seguin.ide.elixir,PrettyPrinterExtension,1,1,0,0,0,false,0 ,IExtension ,0 ,,getName{ Params :  Returns : String} getCardName{ Params :  Returns : String} getVersion{ Params :  Returns : String} getReleaseNo{ Params :  Returns : int} init{ Params : String[] Returns : boolean} destroy{ Params :  Returns : boolean} ,,,,,IExtension ,,,,JRefactoryVersion JRefactoryVersion ElixirPrettyPrinter ElixirTextPrinter 
JRefactory,org.acm.seguin.ide.elixir,RefactoryExtension,1,1,0,0,0,false,PrettyPrinterExtension ,ApplicationBus.ICard ,0 ,manager: UMLDocManager base: String ,getName{ Params :  Returns : String} getCardName{ Params :  Returns : String} init{ Params : String[] Returns : boolean} destroy{ Params :  Returns : boolean} update{ Params : Message Returns : void} run{ Params :  Returns : void} veto{ Params : Message Returns : void} ,,,,,ICard ,,,,RefactoryInstaller UMLDocManager UndoMenuItem ElixirClassDiagramLoader ElixirExtractMethod ElixirSourceBrowser Thread 
JRefactory,org.acm.seguin.ide.elixir,UMLDocManager,1,1,0,0,0,false,0 ,DocManager ,0 ,reloader: SingleDirClassDiagramReloader ,getExtension{ Params :  Returns : String} getName{ Params :  Returns : String} getTreeNode{ Params : TNode,File Returns : TNode} getViewManager{ Params : String Returns : ViewManager} isUserCreated{ Params :  Returns : boolean} isValidFilename{ Params : String Returns : boolean} toString{ Params :  Returns : String} getReloader{ Params :  Returns : SingleDirClassDiagramReloader} ,,,,,DocManager ,SingleDirClassDiagramReloader ,,SingleDirClassDiagramReloader ,SingleDirClassDiagramReloader UMLLeaf UMLViewManager 
JRefactory,org.acm.seguin.ide.elixir,UMLLeaf,1,0,0,0,0,false,0 ,TNode ,OpenFileAdapter ,parent: TNode file: File docManager: UMLDocManager packageName: String ,setName{ Params : String Returns : void} setParent{ Params : TParent Returns : void} getAllowsChildren{ Params :  Returns : boolean} getChildAt{ Params : int Returns : TreeNode} getChildCount{ Params :  Returns : int} getFullName{ Params :  Returns : String} getIcon{ Params : boolean Returns : Icon} getIndex{ Params : TreeNode Returns : int} getName{ Params :  Returns : String} getParent{ Params :  Returns : TreeNode} getPopupMenu{ Params :  Returns : JPopupMenu} getToolTipText{ Params :  Returns : String} getTreeModel{ Params :  Returns : TModel} getTreePath{ Params :  Returns : TreePath} isLeaf{ Params :  Returns : boolean} children{ Params :  Returns : Enumeration} doDoubleClick{ Params :  Returns : void} fireChanged{ Params :  Returns : void} sortChildren{ Params : SortUtil.Comparator Returns : void} toString{ Params :  Returns : String} loadPackageName{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} ,,,,,TNode ,String ,,String ,File UMLIcon JPopupMenu JMenuItem OpenFileAdapter Vector BufferedReader FileReader StringTokenizer 
JRefactory,org.acm.seguin.ide.elixir,OpenFileAdapter,3,2,0,0,0,false,0 ,TNode ,OpenFileAdapter ,name: String ,setName{ Params : String Returns : void} setParent{ Params : TParent Returns : void} getAllowsChildren{ Params :  Returns : boolean} getChildAt{ Params : int Returns : TreeNode} getChildCount{ Params :  Returns : int} getFullName{ Params :  Returns : String} getIcon{ Params : boolean Returns : Icon} getIndex{ Params : TreeNode Returns : int} getName{ Params :  Returns : String} getParent{ Params :  Returns : TreeNode} getPopupMenu{ Params :  Returns : JPopupMenu} getToolTipText{ Params :  Returns : String} getTreeModel{ Params :  Returns : TModel} getTreePath{ Params :  Returns : TreePath} isLeaf{ Params :  Returns : boolean} children{ Params :  Returns : Enumeration} doDoubleClick{ Params :  Returns : void} fireChanged{ Params :  Returns : void} sortChildren{ Params : SortUtil.Comparator Returns : void} toString{ Params :  Returns : String} loadPackageName{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,String ,,String ,
JRefactory,org.acm.seguin.ide.elixir,UMLViewManager,1,1,0,0,0,false,0 ,ViewManager ,0 ,docManager: UMLDocManager packagePanel: UMLPackage summary: PackageSummary pane: JScrollPane filename: String packageName: String ,getActions{ Params :  Returns : ActionEx[]} getDocManager{ Params :  Returns : DocManager} getTitle{ Params :  Returns : String} getView{ Params :  Returns : JComponent} getDiagram{ Params :  Returns : UMLPackage} closed{ Params :  Returns : void} closing{ Params :  Returns : void} okToClose{ Params :  Returns : boolean} reload{ Params :  Returns : boolean} save{ Params :  Returns : boolean} loadPackageName{ Params :  Returns : void} ,,,,,ViewManager ,String ,,String ,UMLPackage PackageSelectorDialog UMLPackage JScrollPane PackageNameLoader 
JRefactory,org.acm.seguin.ide.elixir,UndoMenuItem,1,1,0,0,0,false,0 ,0 ,0 ,,undo{ Params :  Returns : void} ,,undo ,,,,,,,UndoAdapter 
JRefactory,org.acm.seguin.ide.elixir.version,AddListener,1,1,0,0,0,false,0 ,ActionListener ,0 ,ess: ElixirVersionControl fullName: String name: String ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,String ,,String ,
JRefactory,org.acm.seguin.ide.elixir.version,CheckInListener,1,1,0,0,0,false,0 ,ActionListener ,0 ,ess: ElixirVersionControl fullName: String name: String ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,String ,,String ,
JRefactory,org.acm.seguin.ide.elixir.version,CheckOutListener,1,1,0,0,0,false,0 ,ActionListener ,0 ,ess: ElixirVersionControl fullName: String name: String ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,String ,,String ,
JRefactory,org.acm.seguin.ide.elixir.version,ElixirContainsThread,1,1,0,0,0,false,Thread ,0 ,0 ,delegate: VersionControl menu: JMenuItem parent: TNode evc: ElixirVersionControl ,run{ Params :  Returns : void} contains{ Params : String Returns : int} isUnderSourceControl{ Params : String Returns : boolean} checkOut{ Params :  Returns : void} add{ Params :  Returns : void} checkIn{ Params :  Returns : void} ,,,,,,ElixirVersionControl ,,ElixirVersionControl ,File CheckOutListener AddListener CheckInListener 
JRefactory,org.acm.seguin.ide.elixir.version,ElixirVersionControl,1,1,0,0,0,false,0 ,IVersionControl ,0 ,delegate: VersionControl ,getMenu{ Params : TNode Returns : JMenuItem} contains{ Params : String Returns : boolean} add{ Params : String Returns : void} checkIn{ Params : String Returns : void} checkOut{ Params : String Returns : void} add{ Params : String[] Returns : void} checkIn{ Params : String[] Returns : void} init{ Params :  Returns : void} ,,,,,IVersionControl ,VersionControl ,,VersionControl ,JMenuItem ElixirContainsThread ElixirVersionControlThread ElixirVersionControlThread ElixirVersionControlThread RefactoryInstaller SourceSafe 
JRefactory,org.acm.seguin.ide.elixir.version,ElixirVersionControlThread,1,1,0,0,0,false,Thread ,0 ,0 ,delegate: VersionControl filename: String operation: int CHECK_IN: int CHECK_OUT: int ADD: int ,run{ Params :  Returns : void} updateElixirProject{ Params :  Returns : void} updateElixirFile{ Params : String Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.elixir,ZoomDiagram,1,1,0,0,0,false,0 ,0 ,0 ,,tenPercent{ Params :  Returns : void} twentyfivePercent{ Params :  Returns : void} fiftyPercent{ Params :  Returns : void} fullSize{ Params :  Returns : void} getManager{ Params :  Returns : ViewManager} scale{ Params : UMLViewManager,double Returns : void} work{ Params : double Returns : void} ,,tenPercent twentyfivePercent fiftyPercent fullSize getManager scale work ,,,,,,,
JRefactory,org.acm.seguin.ide.jbuilder,AboutAction,1,1,0,0,0,false,JBuilderAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} actionPerformed{ Params : ActionEvent Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.jbuilder,BrowserAdapter,1,1,0,0,0,false,0 ,BrowserListener ,0 ,,browserOpened{ Params : Browser Returns : void} browserActivated{ Params : Browser Returns : void} browserDeactivated{ Params : Browser Returns : void} browserClosing{ Params : Browser Returns : void} browserClosed{ Params : Browser Returns : void} browserProjectActivated{ Params : Browser,Project Returns : void} browserProjectClosed{ Params : Browser,Project Returns : void} browserNodeActivated{ Params : Browser,Node Returns : void} browserNodeClosed{ Params : Browser,Node Returns : void} browserViewerActivated{ Params : Browser,Node,NodeViewer Returns : void} browserViewerDeactivating{ Params : Browser,Node,NodeViewer Returns : void} ,,,,,BrowserListener ,,,,
JRefactory,org.acm.seguin.ide.jbuilder,JBuilderAction,1,1,1,0,0,false,UpdateAction ,0 ,0 ,enabled: boolean ,setEnabled{ Params : boolean Returns : void} actionPerformed{ Params : ActionEvent Returns : void} ,,,,actionPerformed ,,,,,
JRefactory,org.acm.seguin.ide.jbuilder,JBuilderBrowser,1,1,0,0,0,false,SourceBrowser ,0 ,0 ,,canBrowseSource{ Params :  Returns : boolean} gotoSource{ Params : File,int Returns : void} findSourceFileNode{ Params : File Returns : FileNode} showNode{ Params : FileNode Returns : void} gotoLine{ Params : int,FileNode Returns : void} ,,,,,,,,,Url 
JRefactory,org.acm.seguin.ide.jbuilder,JBuilderClassDiagramLoader,1,1,0,0,0,false,MultipleDirClassDiagramReloader ,0 ,0 ,,reload{ Params :  Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.jbuilder,JBuilderEditorOperations,1,1,0,0,0,false,EditorOperations ,0 ,0 ,buffer: Buffer ,setStringInIDE{ Params : String Returns : void} setLineNumber{ Params : int Returns : void} getStringFromIDE{ Params :  Returns : String} getLineNumber{ Params :  Returns : int} getSelectionFromIDE{ Params :  Returns : String} getEditorFrame{ Params :  Returns : JFrame} isJavaFile{ Params :  Returns : boolean} getFile{ Params :  Returns : File} ,,,,,,Buffer ,,Buffer ,String 
JRefactory,org.acm.seguin.ide.jbuilder,JPGFileAction,1,1,0,0,0,false,JBuilderAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} actionPerformed{ Params : ActionEvent Returns : void} ,,,,,,,,,SaveAdapter 
JRefactory,org.acm.seguin.ide.jbuilder,ModifyKeyBinding,1,1,0,0,0,false,0 ,PropertyChangeListener ,0 ,prettyPrint: Action extractMethod: Action ,propertyChange{ Params : PropertyChangeEvent Returns : void} setHotKeys{ Params :  Returns : void} ,,,,,PropertyChangeListener ,Action ,,Action ,
JRefactory,org.acm.seguin.ide.jbuilder,NewClassDiagramAction,1,1,0,0,0,false,JBuilderAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} actionPerformed{ Params : ActionEvent Returns : void} getFile{ Params : PackageSummary Returns : File} createFile{ Params : File,PackageSummary Returns : void} ,,,,,,,,,PackageSelectorDialog Url UMLNode File File File FileWriter 
JRefactory,org.acm.seguin.ide.jbuilder,NewProjectAdapter,1,1,0,0,0,false,BrowserAdapter ,0 ,0 ,list: LinkedList ,browserProjectActivated{ Params : Browser,Project Returns : void} browserProjectClosed{ Params : Browser,Project Returns : void} registerProject{ Params : MultipleDirClassDiagramReloader,JBProject Returns : void} ,,,,,,LinkedList ,,LinkedList ,LinkedList 
JRefactory,org.acm.seguin.ide.jbuilder,PrintAction,1,1,0,0,0,false,TextPrinter ,Action ,0 ,support: PropertyChangeSupport values: HashMap enabled: boolean ,setEnabled{ Params : boolean Returns : void} getValue{ Params : String Returns : Object} isEnabled{ Params :  Returns : boolean} putValue{ Params : String,Object Returns : void} addPropertyChangeListener{ Params : PropertyChangeListener Returns : void} removePropertyChangeListener{ Params : PropertyChangeListener Returns : void} actionPerformed{ Params : ActionEvent Returns : void} getFilenameFromIDE{ Params :  Returns : String} getStringFromIDE{ Params :  Returns : String} getActiveNode{ Params :  Returns : Node} ,,,,,Action ,boolean ,,boolean ,PropertyChangeSupport HashMap PrintingThread String 
JRefactory,org.acm.seguin.ide.jbuilder,ProjectViewRefactorings,1,1,0,0,0,false,0 ,ContextActionProvider ,0 ,,getContextAction{ Params : Browser,Node[] Returns : Action} ,,,,,ContextActionProvider ,,,,ActionGroup JBuilderRenameClassAction JBuilderMoveClassAction JBuilderAddParentClassAction JBuilderAddChildClassAction JBuilderRemoveClassAction JBuilderExtractInterfaceAction 
JRefactory,org.acm.seguin.ide.jbuilder.refactor,FileCloser,1,1,0,0,0,false,0 ,0 ,0 ,,close{ Params : File Returns : void} ,,close ,,,,,,,Url 
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderAddChildClassAction,1,1,0,0,0,false,AddChildClassAction ,0 ,0 ,,,,,,,,,,,JBuilderSelectedFileSet 
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderAddParentClassAction,1,1,0,0,0,false,AddParentClassAction ,0 ,0 ,,,,,,,,,,,JBuilderSelectedFileSet 
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderCurrentSummary,1,1,0,0,0,false,CurrentSummary ,0 ,0 ,lastActive: Node editor: EditorPane ,getActiveNode{ Params :  Returns : Node} registerWithCurrentDocument{ Params :  Returns : void} getMetadataReloader{ Params :  Returns : MultipleDirClassDiagramReloader} ,,,,,,EditorPane ,,EditorPane ,
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderExtractInterfaceAction,1,1,0,0,0,false,ExtractInterfaceAction ,0 ,0 ,,,,,,,,,,,JBuilderSelectedFileSet 
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderMoveClassAction,1,1,0,0,0,false,MoveClassAction ,0 ,0 ,,,,,,,,,,,JBuilderSelectedFileSet 
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderMoveClassRefactoring,1,0,0,0,0,false,MoveClass ,0 ,0 ,,transform{ Params :  Returns : void} ,,,,,,,,,File File 
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderRefactoringFactory,1,1,0,0,0,false,RefactoringFactory ,0 ,0 ,,moveClass{ Params :  Returns : MoveClass} renameClass{ Params :  Returns : RenameClassRefactoring} removeEmptyClass{ Params :  Returns : RemoveEmptyClassRefactoring} prepare{ Params :  Returns : void} register{ Params :  Returns : void} ,,register ,,,,,,,JBuilderMoveClassRefactoring JBuilderRenameClassRefactoring JBuilderRemoveEmptyClassRefactoring JBuilderRefactoringFactory 
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderRemoveClassAction,1,1,0,0,0,false,RemoveClassAction ,0 ,0 ,,,,,,,,,,,JBuilderSelectedFileSet 
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderRemoveEmptyClassRefactoring,1,0,0,0,0,false,RemoveEmptyClassRefactoring ,0 ,0 ,,transform{ Params :  Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderRenameClassAction,1,1,0,0,0,false,RenameClassAction ,0 ,0 ,,,,,,,,,,,JBuilderSelectedFileSet 
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderRenameClassRefactoring,1,0,0,0,0,false,RenameClassRefactoring ,0 ,0 ,,transform{ Params :  Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.jbuilder.refactor,JBuilderSelectedFileSet,1,1,0,0,0,false,SelectedFileSet ,0 ,0 ,initialNodes: Node ,isAllJava{ Params :  Returns : boolean} isSingleJavaFile{ Params :  Returns : boolean} getTypeSummaryArray{ Params :  Returns : TypeSummary[]} getTypeSummaryFromNode{ Params : Node Returns : TypeSummary} getNodes{ Params :  Returns : Node[]} reloadNode{ Params : Node Returns : FileSummary} ,,,,,,Node[] ,,Node[] ,ByteArrayInputStream 
JRefactory,org.acm.seguin.ide.jbuilder.refactor,MenuBuilder,1,1,0,0,0,false,0 ,0 ,0 ,,build{ Params :  Returns : ActionGroup} buildMethod{ Params :  Returns : ActionGroup} buildField{ Params :  Returns : ActionGroup} buildType{ Params :  Returns : ActionGroup} ,,build buildMethod buildField buildType ,,,,,,,ActionGroup ActionGroup PushUpMethodAction PushUpAbstractMethodAction PushDownMethodAction RenameParameterAction ExtractMethodAction ActionGroup RenameFieldAction PushUpFieldAction PushDownFieldAction ActionGroup JBuilderRenameClassAction JBuilderMoveClassAction JBuilderAddParentClassAction JBuilderAddChildClassAction JBuilderRemoveClassAction JBuilderExtractInterfaceAction 
JRefactory,org.acm.seguin.ide.jbuilder,RefactoringAdapter,1,1,0,0,0,false,BrowserAdapter ,0 ,0 ,,browserViewerActivated{ Params : Browser,Node,NodeViewer Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.jbuilder,RefactoringBrowser,1,1,0,0,0,false,TextNodeViewer ,0 ,0 ,,getViewerTitle{ Params :  Returns : String} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.jbuilder,RefactoringStructure,1,1,0,0,0,false,TextStructureDelegate ,0 ,0 ,currentNode: Object ,getPopup{ Params :  Returns : JPopupMenu} mousePressed{ Params : MouseEvent Returns : void} ,,,,,,Object ,,Object ,JMenu 
JRefactory,org.acm.seguin.ide.jbuilder,RefactoryNodeViewerFactory,1,1,0,0,0,false,0 ,NodeViewerFactory ,0 ,factory: RefactoryNodeViewerFactory ,canDisplayNode{ Params : Node Returns : boolean} createNodeViewer{ Params : Context Returns : NodeViewer} getFactory{ Params :  Returns : RefactoryNodeViewerFactory} ,,getFactory ,,,NodeViewerFactory ,,,,RefactoringBrowser RefactoryNodeViewerFactory 
JRefactory,org.acm.seguin.ide.jbuilder,ReloadAction,1,1,0,0,0,false,JBuilderAction ,0 ,0 ,,isEnabled{ Params :  Returns : boolean} actionPerformed{ Params : ActionEvent Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.jbuilder,TestObject,1,1,0,0,0,false,0 ,0 ,0 ,,equals{ Params : Object Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.ide.jbuilder,TextStructureDelegate,1,1,0,0,0,false,TextStructure ,0 ,0 ,delegate: TextStructure ,setExpandState{ Params : List Returns : void} getExpandState{ Params :  Returns : List} mouseExited{ Params : MouseEvent Returns : void} mouseEntered{ Params : MouseEvent Returns : void} mouseReleased{ Params : MouseEvent Returns : void} mousePressed{ Params : MouseEvent Returns : void} mouseClicked{ Params : MouseEvent Returns : void} keyTyped{ Params : KeyEvent Returns : void} keyReleased{ Params : KeyEvent Returns : void} keyPressed{ Params : KeyEvent Returns : void} getTreeCellRendererComponent{ Params : JTree,Object,boolean,boolean,boolean,int,boolean Returns : Component} setCaretPosition{ Params : int,boolean Returns : void} setCaretPosition{ Params : int,int,boolean Returns : void} setCaretOffset{ Params : int,boolean Returns : void} getEditorPane{ Params :  Returns : EditorPane} getStructureIcon{ Params : Object Returns : Icon} nodeActivated{ Params : DefaultMutableTreeNode Returns : void} nodeSelected{ Params : DefaultMutableTreeNode Returns : void} getPopup{ Params :  Returns : JPopupMenu} updateStructure{ Params : Document Returns : void} getTree{ Params :  Returns : JTree} setTree{ Params : JTree Returns : void} setFileNode{ Params : FileNode Returns : void} ,,,,,,TextStructure ,,TextStructure ,
JRefactory,org.acm.seguin.ide.jbuilder,UMLNode,1,1,0,0,0,false,FileNode ,0 ,0 ,packageDiagram: UMLPackage packageName: String ,setDiagram{ Params : UMLPackage Returns : void} getDiagram{ Params :  Returns : UMLPackage} isPersistant{ Params :  Returns : boolean} getDisplayIcon{ Params :  Returns : Icon} getDisplayName{ Params :  Returns : String} isModified{ Params :  Returns : boolean} saveAs{ Params : Url Returns : void} save{ Params :  Returns : void} initOpenTool{ Params : byte,byte Returns : void} setupKeys{ Params : Action,Action Returns : void} cleanJBuilderSetting{ Params :  Returns : void} ,,initOpenTool setupKeys cleanJBuilderSetting ,,,,String ,,String ,PackageNameLoader UMLIcon RefactoryInstaller JBuilderBrowser JBuilderEditorOperations JBuilderCurrentSummary FileType TestObject UMLIcon UMLIcon NewProjectAdapter ActionGroup PrettyPrinterAction ExtractMethodAction ReloadAction NewClassDiagramAction UndoAction PrintAction JPGFileAction ActionGroup ZoomAction ZoomAction ZoomAction ZoomAction AboutAction ProjectViewRefactorings ModifyKeyBinding File 
JRefactory,org.acm.seguin.ide.jbuilder,UMLNodeViewer,1,1,0,0,0,false,AbstractNodeViewer ,0 ,0 ,diagram: UMLPackage reloader: ClassDiagramReloader ,getViewerTitle{ Params :  Returns : String} getDiagram{ Params :  Returns : UMLPackage} createViewerComponent{ Params :  Returns : JComponent} createStructureComponent{ Params :  Returns : JComponent} releaseViewer{ Params :  Returns : void} ,,,,,,ClassDiagramReloader ,,ClassDiagramReloader ,UMLPackage UMLPackage JScrollPane DividedSummaryPanel 
JRefactory,org.acm.seguin.ide.jbuilder,UMLNodeViewerFactory,1,1,0,0,0,false,0 ,NodeViewerFactory ,0 ,reloader: MultipleDirClassDiagramReloader factory: UMLNodeViewerFactory ,getReloader{ Params :  Returns : MultipleDirClassDiagramReloader} canDisplayNode{ Params : Node Returns : boolean} createNodeViewer{ Params : Context Returns : NodeViewer} createNodeViewer{ Params : PackageSummary Returns : NodeViewer} getFactory{ Params :  Returns : UMLNodeViewerFactory} ,,getFactory ,,,NodeViewerFactory ,,,,JBuilderClassDiagramLoader UMLNodeViewer UMLNodeViewer UMLNodeViewerFactory 
JRefactory,org.acm.seguin.ide.jbuilder,UndoAction,1,1,0,0,0,false,UndoAdapter ,Action ,0 ,support: PropertyChangeSupport values: HashMap enabled: boolean ,setEnabled{ Params : boolean Returns : void} getValue{ Params : String Returns : Object} isEnabled{ Params :  Returns : boolean} putValue{ Params : String,Object Returns : void} addPropertyChangeListener{ Params : PropertyChangeListener Returns : void} removePropertyChangeListener{ Params : PropertyChangeListener Returns : void} ,,,,,Action ,boolean ,,boolean ,PropertyChangeSupport HashMap 
JRefactory,org.acm.seguin.ide.jbuilder,ZoomAction,1,1,0,0,0,false,JBuilderAction ,0 ,0 ,scalingFactor: double ,isEnabled{ Params :  Returns : boolean} actionPerformed{ Params : ActionEvent Returns : void} ,,,,,,double ,,double ,
JRefactory,org.acm.seguin.ide.netbeans,ExtractMethodAction,1,1,0,0,0,false,CookieAction ,0 ,0 ,,getName{ Params :  Returns : String} getHelpCtx{ Params :  Returns : HelpCtx} cookieClasses{ Params :  Returns : Class[]} mode{ Params :  Returns : int} performAction{ Params : Node[] Returns : void} iconResource{ Params :  Returns : String} enable{ Params : Node[] Returns : boolean} initialize{ Params :  Returns : void} ,,,,,,,,,NetBeansExtractMethodDialog 
JRefactory,org.acm.seguin.ide.netbeans,NetBeansEditorOperations,1,1,0,0,0,false,EditorOperations ,0 ,0 ,NEW_LINE_LENGTH: int ,getSelectionFromIDE{ Params :  Returns : String} isJavaFile{ Params :  Returns : boolean} getFile{ Params :  Returns : File} getFileObject{ Params :  Returns : FileObject} getLineNumber{ Params :  Returns : int} setLineNumber{ Params : int Returns : void} getEditorFrame{ Params :  Returns : JFrame} getStringFromIDE{ Params :  Returns : String} setStringInIDE{ Params : String Returns : void} getCurrentEditorPane{ Params :  Returns : JEditorPane} getDocumentTextReader{ Params :  Returns : BufferedReader} ,,,,,,int ,,int ,File IllegalArgumentException IllegalArgumentException BufferedReader StringReader 
JRefactory,org.acm.seguin.ide.netbeans,NetBeansExtractMethodDialog,1,1,0,0,0,false,ExtractMethodDialog ,0 ,0 ,_editorPane: JEditorPane ,setStringInIDE{ Params : String Returns : void} getSelectionFromIDE{ Params :  Returns : String} getStringFromIDE{ Params :  Returns : String} getCurrentEditorPane{ Params :  Returns : JEditorPane} getCurrentEditorPane{ Params : EditorCookie Returns : JEditorPane} ,,,,,,JEditorPane ,,JEditorPane ,
JRefactory,org.acm.seguin.ide.netbeans,NetBeansPrettyPrinter,1,1,0,0,0,false,PrettyPrintFromIDE ,0 ,0 ,_editorPane: JEditorPane NEW_LINE_LENGTH: int ,getLineNumber{ Params :  Returns : int} setLineNumber{ Params : int Returns : void} getStringFromIDE{ Params :  Returns : String} setStringInIDE{ Params : String Returns : void} getCurrentEditorPane{ Params : EditorCookie Returns : JEditorPane} getDocumentTextReader{ Params :  Returns : BufferedReader} ,,,,,,int ,,int ,IllegalArgumentException IllegalArgumentException BufferedReader StringReader 
JRefactory,org.acm.seguin.ide.netbeans,PrettyPrinterAction,1,1,0,0,0,false,CookieAction ,Presenter.Menu ,0 ,,getMenuPresenter{ Params :  Returns : JMenuItem} getName{ Params :  Returns : String} getHelpCtx{ Params :  Returns : HelpCtx} cookieClasses{ Params :  Returns : Class[]} mode{ Params :  Returns : int} performAction{ Params : Node[] Returns : void} iconResource{ Params :  Returns : String} enable{ Params : Node[] Returns : boolean} initialize{ Params :  Returns : void} ,,,,,Menu ,,,,JMenuItem NetBeansPrettyPrinter 
JRefactory,org.acm.seguin.io,AllFileFilter,1,1,0,0,0,false,FileFilter ,0 ,0 ,,getDescription{ Params :  Returns : String} accept{ Params : File Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.io,DirectoryTreeTraversal,1,1,1,0,0,false,0 ,0 ,0 ,startingPoint: File ,go{ Params :  Returns : void} isTarget{ Params : File Returns : boolean} isAllowed{ Params : File Returns : boolean} traverse{ Params : File Returns : void} visit{ Params : File Returns : void} arriveAtDir{ Params : File Returns : void} leaveDir{ Params : File Returns : void} ,,,,isTarget visit ,,File ,,File ,File File 
JRefactory,org.acm.seguin.io,FileCopy,1,1,0,0,0,false,Thread ,0 ,0 ,source: File dest: File noisy: boolean ,run{ Params :  Returns : void} getInputStream{ Params :  Returns : InputStream} getOutputStream{ Params :  Returns : OutputStream} main{ Params : String[] Returns : void} ,,main ,,,,boolean ,,boolean ,FileInputStream FileOutputStream FileCopy File File 
JRefactory,org.acm.seguin.io,InplaceOutputStream,1,1,0,0,0,false,OutputStream ,0 ,0 ,finalDestination: File temporary: File out: FileOutputStream ,close{ Params :  Returns : void} flush{ Params :  Returns : void} write{ Params : int Returns : void} write{ Params : byte[] Returns : void} write{ Params : byte[],int,int Returns : void} finalize{ Params :  Returns : void} createTempFile{ Params : String,String Returns : File} ,,,,,,FileOutputStream ,,FileOutputStream ,FileOutputStream FileCopy File File 
JRefactory,org.acm.seguin.io,Saveable,2,1,0,0,0,true,OutputStream ,0 ,0 ,,save{ Params :  Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin,JRefactoryVersion,1,1,0,0,0,false,0 ,0 ,0 ,,getMajorVersion{ Params :  Returns : int} getMinorVersion{ Params :  Returns : int} getBuild{ Params :  Returns : int} toString{ Params :  Returns : String} main{ Params : String[] Returns : void} ,,main ,,,,,,,StringBuffer JRefactoryVersion 
JRefactory,org.acm.seguin.metrics,CommaDelimitedReport,1,1,0,0,0,false,MetricsReport ,0 ,0 ,,finalReport{ Params : ProjectMetrics Returns : void} printKey{ Params :  Returns : void} reportStatement{ Params : String,String,String,int Returns : void} reportParameters{ Params : String,String,String,int Returns : void} reportLinesOfCode{ Params : String,String,String,int Returns : void} reportBlockDepth{ Params : String,String,String,int Returns : void} reportPublicMethods{ Params : String,String,int Returns : void} reportOtherMethods{ Params : String,String,int Returns : void} reportClassMethods{ Params : String,String,int Returns : void} reportInstanceVariables{ Params : String,String,int Returns : void} reportClassVariables{ Params : String,String,int Returns : void} reportAbstractClasses{ Params : ProjectMetrics Returns : void} reportInterfaces{ Params : ProjectMetrics Returns : void} reportClasses{ Params : ProjectMetrics Returns : void} reportAverageStatements{ Params : ProjectMetrics Returns : void} reportAverageParameters{ Params : ProjectMetrics Returns : void} reportAveragePublicMethods{ Params : ProjectMetrics Returns : void} reportAverageOtherMethods{ Params : ProjectMetrics Returns : void} reportAverageClassMethods{ Params : ProjectMetrics Returns : void} reportAverageInstanceVariables{ Params : ProjectMetrics Returns : void} reportAverageClassVariables{ Params : ProjectMetrics Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.metrics,GatherData,1,1,0,0,0,false,0 ,SummaryVisitor ,0 ,metricsReport: MetricsReport ,visit{ Params : Object Returns : Object} visit{ Params : Summary,Object Returns : Object} visit{ Params : PackageSummary,Object Returns : Object} visit{ Params : FileSummary,Object Returns : Object} visit{ Params : ImportSummary,Object Returns : Object} visit{ Params : TypeSummary,Object Returns : Object} visit{ Params : MethodSummary,Object Returns : Object} visit{ Params : FieldSummary,Object Returns : Object} visit{ Params : ParameterSummary,Object Returns : Object} visit{ Params : LocalVariableSummary,Object Returns : Object} visit{ Params : VariableSummary,Object Returns : Object} visit{ Params : TypeDeclSummary,Object Returns : Object} visit{ Params : MessageSendSummary,Object Returns : Object} visit{ Params : FieldAccessSummary,Object Returns : Object} main{ Params : String[] Returns : void} ,,main ,,,SummaryVisitor ,MetricsReport ,,MetricsReport ,ProjectMetrics PackageMetrics TypeMetrics MethodMetrics SummaryTraversal SummaryTraversal TextReport GatherData 
JRefactory,org.acm.seguin.metrics,LCTraversal,1,1,0,0,0,false,DirectoryTreeTraversal ,0 ,0 ,total: long fileCount: int ,go{ Params :  Returns : void} isTarget{ Params : File Returns : boolean} visit{ Params : File Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,int ,,int ,LineCounter RefactoryInstaller LCTraversal 
JRefactory,org.acm.seguin.metrics,LineCounter,1,1,0,0,0,false,0 ,0 ,0 ,file: File ,countLines{ Params :  Returns : int} printMessage{ Params :  Returns : int} countCharacter{ Params : int,InputStream Returns : int} main{ Params : String[] Returns : void} ,,main ,,,,,,,FileInputStream LineCounter File 
JRefactory,org.acm.seguin.metrics,MethodMetrics,1,1,0,0,0,false,0 ,0 ,0 ,packageName: String typeName: String methodName: String statementCount: int parameterCount: int blockDepth: int lines: int ,getPackageName{ Params :  Returns : String} getTypeName{ Params :  Returns : String} getMethodName{ Params :  Returns : String} getStatementCount{ Params :  Returns : int} getParameterCount{ Params :  Returns : int} getLinesOfCode{ Params :  Returns : int} getBlockDepth{ Params :  Returns : int} setStatementCount{ Params : int Returns : void} setParameterCount{ Params : int Returns : void} setBlockDepth{ Params : int Returns : void} setLinesOfCode{ Params : int Returns : void} ,,,,,,int ,,int ,
JRefactory,org.acm.seguin.metrics,MethodMetricsFrame,1,1,0,0,0,false,MetricsFrame ,0 ,0 ,method: MethodSummary metrics: MethodMetrics ,getTitle{ Params :  Returns : String} ,,,,,,MethodMetrics ,,MethodMetrics ,TypeMetrics GatherData 
JRefactory,org.acm.seguin.metrics,MetricsFrame,1,1,1,0,0,false,AbstractTableModel ,0 ,0 ,descriptions: String values: String ,getRowCount{ Params :  Returns : int} getColumnCount{ Params :  Returns : int} getValueAt{ Params : int,int Returns : Object} getTitle{ Params :  Returns : String} createFrame{ Params :  Returns : void} ,,,,getTitle ,,,,,JTable MetricsTableCellRenderer JFrame 
JRefactory,org.acm.seguin.metrics,MetricsReport,1,1,1,0,0,false,0 ,0 ,0 ,,finalReport{ Params : ProjectMetrics Returns : void} typeReport{ Params : TypeMetrics Returns : void} methodReport{ Params : MethodMetrics Returns : void} reportStatement{ Params : String,String,String,int Returns : void} reportParameters{ Params : String,String,String,int Returns : void} reportLinesOfCode{ Params : String,String,String,int Returns : void} reportBlockDepth{ Params : String,String,String,int Returns : void} reportAverageStatements{ Params : ProjectMetrics Returns : void} reportAverageParameters{ Params : ProjectMetrics Returns : void} reportPublicMethods{ Params : String,String,int Returns : void} reportOtherMethods{ Params : String,String,int Returns : void} reportClassMethods{ Params : String,String,int Returns : void} reportInstanceVariables{ Params : String,String,int Returns : void} reportClassVariables{ Params : String,String,int Returns : void} reportAbstractClasses{ Params : ProjectMetrics Returns : void} reportInterfaces{ Params : ProjectMetrics Returns : void} reportClasses{ Params : ProjectMetrics Returns : void} reportAveragePublicMethods{ Params : ProjectMetrics Returns : void} reportAverageOtherMethods{ Params : ProjectMetrics Returns : void} reportAverageClassMethods{ Params : ProjectMetrics Returns : void} reportAverageInstanceVariables{ Params : ProjectMetrics Returns : void} reportAverageClassVariables{ Params : ProjectMetrics Returns : void} ,,,,reportStatement reportParameters reportLinesOfCode reportBlockDepth reportAverageStatements reportAverageParameters reportPublicMethods reportOtherMethods reportClassMethods reportInstanceVariables reportClassVariables reportAbstractClasses reportInterfaces reportClasses reportAveragePublicMethods reportAverageOtherMethods reportAverageClassMethods reportAverageInstanceVariables reportAverageClassVariables ,,,,,
JRefactory,org.acm.seguin.metrics,MetricsTableCellRenderer,1,0,0,0,0,false,0 ,TableCellRenderer ,0 ,headerFont: Font normalFont: Font ,getTableCellRendererComponent{ Params : JTable,Object,boolean,boolean,int,int Returns : Component} ,,,,,TableCellRenderer ,,,,Font Font JLabel EmptyBorder 
JRefactory,org.acm.seguin.metrics,PackageMetrics,1,1,0,0,0,false,0 ,0 ,0 ,packageName: String publicMethodTotal: int otherMethodTotal: int classMethodTotal: int instanceVariableTotal: int classVariableTotal: int classTotal: int abstractClassCount: int interfaceCount: int statementTotal: int parameterTotal: int blockDepthTotal: int lineCountTotal: int ,getPackageName{ Params :  Returns : String} getPublicMethodTotal{ Params :  Returns : int} getOtherMethodTotal{ Params :  Returns : int} getClassMethodTotal{ Params :  Returns : int} getInstanceVariableTotal{ Params :  Returns : int} getClassVariableTotal{ Params :  Returns : int} getClassTotal{ Params :  Returns : int} getAbstractClassCount{ Params :  Returns : int} getInterfaceCount{ Params :  Returns : int} getStatementTotal{ Params :  Returns : int} getParameterTotal{ Params :  Returns : int} getStatementAverage{ Params :  Returns : double} getParameterAverage{ Params :  Returns : double} getBlockDepthAverage{ Params :  Returns : double} getLinesOfCodeAverage{ Params :  Returns : double} getPublicMethodAverage{ Params :  Returns : double} getOtherMethodAverage{ Params :  Returns : double} getClassMethodAverage{ Params :  Returns : double} getInstanceVariableAverage{ Params :  Returns : double} getClassVariableAverage{ Params :  Returns : double} getAbstractClassPercentage{ Params :  Returns : double} getInterfacePercentage{ Params :  Returns : double} incrAbstractClassCount{ Params :  Returns : void} incrInterfaceCount{ Params :  Returns : void} add{ Params : TypeMetrics Returns : void} ,,,,,,int ,,int ,
JRefactory,org.acm.seguin.metrics,PackageMetricsFrame,1,1,0,0,0,false,MetricsFrame ,0 ,0 ,summary: PackageSummary metrics: PackageMetrics ,getTitle{ Params :  Returns : String} ,,,,,,PackageMetrics ,,PackageMetrics ,ProjectMetrics GatherData 
JRefactory,org.acm.seguin.metrics,ProjectMetrics,1,1,0,0,0,false,0 ,0 ,0 ,publicMethodTotal: int otherMethodTotal: int classMethodTotal: int instanceVariableTotal: int classVariableTotal: int classTotal: int abstractClassTotal: int interfaceTotal: int statementTotal: int parameterTotal: int ,getPublicMethodTotal{ Params :  Returns : int} getOtherMethodTotal{ Params :  Returns : int} getClassMethodTotal{ Params :  Returns : int} getMethodTotal{ Params :  Returns : int} getInstanceVariableTotal{ Params :  Returns : int} getClassVariableTotal{ Params :  Returns : int} getClassTotal{ Params :  Returns : int} getAbstractClassTotal{ Params :  Returns : int} getInterfaceTotal{ Params :  Returns : int} getStatementTotal{ Params :  Returns : int} getParameterTotal{ Params :  Returns : int} getStatementAverage{ Params :  Returns : double} getParameterAverage{ Params :  Returns : double} getPublicMethodAverage{ Params :  Returns : double} getOtherMethodAverage{ Params :  Returns : double} getClassMethodAverage{ Params :  Returns : double} getInstanceVariableAverage{ Params :  Returns : double} getClassVariableAverage{ Params :  Returns : double} getAbstractClassPercentage{ Params :  Returns : double} getInterfacePercentage{ Params :  Returns : double} add{ Params : PackageMetrics Returns : void} ,,,,,,int ,,int ,
JRefactory,org.acm.seguin.metrics,ProjectMetricsFrame,1,1,0,0,0,false,MetricsFrame ,0 ,0 ,metrics: ProjectMetrics ,getTitle{ Params :  Returns : String} ,,,,,,ProjectMetrics ,,ProjectMetrics ,GatherData 
JRefactory,org.acm.seguin.metrics,Summarize,1,1,0,0,0,false,0 ,0 ,0 ,dir: File ,run{ Params :  Returns : void} extractTotals{ Params : File Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,File ,,File ,File BufferedReader FileReader Summarize 
JRefactory,org.acm.seguin.metrics,TextReport,1,1,0,0,0,false,MetricsReport ,0 ,0 ,format: TextFormatter ,reportStatement{ Params : String,String,String,int Returns : void} reportParameters{ Params : String,String,String,int Returns : void} reportLinesOfCode{ Params : String,String,String,int Returns : void} reportBlockDepth{ Params : String,String,String,int Returns : void} reportPublicMethods{ Params : String,String,int Returns : void} reportOtherMethods{ Params : String,String,int Returns : void} reportClassMethods{ Params : String,String,int Returns : void} reportInstanceVariables{ Params : String,String,int Returns : void} reportClassVariables{ Params : String,String,int Returns : void} reportAbstractClasses{ Params : ProjectMetrics Returns : void} reportInterfaces{ Params : ProjectMetrics Returns : void} reportClasses{ Params : ProjectMetrics Returns : void} reportAverageStatements{ Params : ProjectMetrics Returns : void} reportAverageParameters{ Params : ProjectMetrics Returns : void} reportAveragePublicMethods{ Params : ProjectMetrics Returns : void} reportAverageOtherMethods{ Params : ProjectMetrics Returns : void} reportAverageClassMethods{ Params : ProjectMetrics Returns : void} reportAverageInstanceVariables{ Params : ProjectMetrics Returns : void} reportAverageClassVariables{ Params : ProjectMetrics Returns : void} ,,,,,,TextFormatter ,,TextFormatter ,TextFormatter 
JRefactory,org.acm.seguin.metrics,TypeMetrics,1,1,0,0,0,false,0 ,0 ,0 ,packageName: String typeName: String publicMethodCount: int otherMethodCount: int classMethodCount: int instanceVariableCount: int classVariableCount: int statementTotal: int parameterTotal: int blockDepthTotal: int lineCountTotal: int ,getPackageName{ Params :  Returns : String} getTypeName{ Params :  Returns : String} getPublicMethodCount{ Params :  Returns : int} getOtherMethodCount{ Params :  Returns : int} getClassMethodCount{ Params :  Returns : int} getInstanceVariableCount{ Params :  Returns : int} getClassVariableCount{ Params :  Returns : int} getStatementTotal{ Params :  Returns : int} getParameterTotal{ Params :  Returns : int} getBlockDepthTotal{ Params :  Returns : int} getLinesOfCodeTotal{ Params :  Returns : int} getStatementAverage{ Params :  Returns : double} getParameterAverage{ Params :  Returns : double} getBlockDepthAverage{ Params :  Returns : double} getLinesOfCodeAverage{ Params :  Returns : double} incrPublicMethodCount{ Params :  Returns : void} incrOtherMethodCount{ Params :  Returns : void} incrClassMethodCount{ Params :  Returns : void} incrInstanceVariableCount{ Params :  Returns : void} incrClassVariableCount{ Params :  Returns : void} add{ Params : MethodMetrics Returns : void} ,,,,,,int ,,int ,
JRefactory,org.acm.seguin.metrics,TypeMetricsFrame,1,1,0,0,0,false,MetricsFrame ,0 ,0 ,type: TypeSummary metrics: TypeMetrics ,getTitle{ Params :  Returns : String} ,,,,,,TypeMetrics ,,TypeMetrics ,PackageMetrics GatherData 
JRefactory,org.acm.seguin.parser.ast,ASTAllocationExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTAndExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTArgumentList,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTArguments,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTArrayDimsAndInits,1,1,0,0,0,false,SimpleNode ,0 ,0 ,arrayCount: int ,setArrayCount{ Params : int Returns : void} getArrayCount{ Params :  Returns : int} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,int ,,int ,
JRefactory,org.acm.seguin.parser.ast,ASTArrayInitializer,1,1,0,0,0,false,SimpleNode ,0 ,0 ,finalComma: boolean ,setFinalComma{ Params : boolean Returns : void} isFinalComma{ Params :  Returns : boolean} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,boolean ,,boolean ,
JRefactory,org.acm.seguin.parser.ast,ASTAssignmentOperator,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTBlock,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTBlockStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTBooleanLiteral,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTBreakStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTCastExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTCastLookahead,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTClassBody,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,sort{ Params : Comparator Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,InsertionSortArray 
JRefactory,org.acm.seguin.parser.ast,ASTClassBodyDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTClassDeclaration,1,1,0,0,0,false,SimpleNode ,JavaDocable ,0 ,modifiers: ModifierHolder jdi: JavaDocableImpl ,isAbstract{ Params :  Returns : boolean} isExplicit{ Params :  Returns : boolean} isFinal{ Params :  Returns : boolean} isInterface{ Params :  Returns : boolean} isNative{ Params :  Returns : boolean} isPrivate{ Params :  Returns : boolean} isProtected{ Params :  Returns : boolean} isPublic{ Params :  Returns : boolean} isStatic{ Params :  Returns : boolean} isStrict{ Params :  Returns : boolean} isSynchronized{ Params :  Returns : boolean} isTransient{ Params :  Returns : boolean} isVolatile{ Params :  Returns : boolean} getModifiersString{ Params :  Returns : String} getModifiers{ Params :  Returns : ModifierHolder} isRequired{ Params :  Returns : boolean} addModifier{ Params : String Returns : void} toString{ Params :  Returns : String} addJavaDocComponent{ Params : JavaDocComponent Returns : void} printJavaDocComponents{ Params : PrintData Returns : void} finish{ Params :  Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,JavaDocable ,JavaDocableImpl ,,JavaDocableImpl ,ModifierHolder JavaDocableImpl ModifierHolder JavaDocableImpl ForceJavadocComments 
JRefactory,org.acm.seguin.parser.ast,ASTCompilationUnit,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,sort{ Params : Comparator Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,InsertionSortArray 
JRefactory,org.acm.seguin.parser.ast,ASTConditionalAndExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTConditionalExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTConditionalOrExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTConstructorDeclaration,1,1,0,0,0,false,SimpleNode ,JavaDocable ,0 ,name: String modifiers: ModifierHolder jdi: JavaDocableImpl ,setName{ Params : String Returns : void} isAbstract{ Params :  Returns : boolean} isExplicit{ Params :  Returns : boolean} isFinal{ Params :  Returns : boolean} isInterface{ Params :  Returns : boolean} isNative{ Params :  Returns : boolean} isPrivate{ Params :  Returns : boolean} isProtected{ Params :  Returns : boolean} isPublic{ Params :  Returns : boolean} isStatic{ Params :  Returns : boolean} isStrict{ Params :  Returns : boolean} isSynchronized{ Params :  Returns : boolean} isTransient{ Params :  Returns : boolean} isVolatile{ Params :  Returns : boolean} getModifiersString{ Params :  Returns : String} getModifiers{ Params :  Returns : ModifierHolder} getName{ Params :  Returns : String} isRequired{ Params :  Returns : boolean} addModifier{ Params : String Returns : void} toString{ Params :  Returns : String} addJavaDocComponent{ Params : JavaDocComponent Returns : void} printJavaDocComponents{ Params : PrintData Returns : void} finish{ Params :  Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,JavaDocable ,JavaDocableImpl ,,JavaDocableImpl ,ModifierHolder JavaDocableImpl ModifierHolder JavaDocableImpl ForceJavadocComments 
JRefactory,org.acm.seguin.parser.ast,ASTContinueStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTDoStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTEmptyStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTExclusiveOrExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTExplicitConstructorInvocation,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTFieldDeclaration,1,1,0,0,0,false,SimpleNode ,JavaDocable ,0 ,modifiers: ModifierHolder jdi: JavaDocableImpl ,isAbstract{ Params :  Returns : boolean} isExplicit{ Params :  Returns : boolean} isFinal{ Params :  Returns : boolean} isInterface{ Params :  Returns : boolean} isNative{ Params :  Returns : boolean} isPrivate{ Params :  Returns : boolean} isProtected{ Params :  Returns : boolean} isPublic{ Params :  Returns : boolean} isStatic{ Params :  Returns : boolean} isStrict{ Params :  Returns : boolean} isSynchronized{ Params :  Returns : boolean} isTransient{ Params :  Returns : boolean} isVolatile{ Params :  Returns : boolean} getModifiersString{ Params :  Returns : String} getModifiers{ Params :  Returns : ModifierHolder} isRequired{ Params :  Returns : boolean} addModifier{ Params : String Returns : void} toString{ Params :  Returns : String} addJavaDocComponent{ Params : JavaDocComponent Returns : void} printJavaDocComponents{ Params : PrintData Returns : void} finish{ Params :  Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} isJavadocPrinted{ Params :  Returns : boolean} ,,,,,JavaDocable ,JavaDocableImpl ,,JavaDocableImpl ,ModifierHolder JavaDocableImpl ModifierHolder JavaDocableImpl ForceJavadocComments 
JRefactory,org.acm.seguin.parser.ast,ASTForInit,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTFormalParameter,1,1,0,0,0,false,SimpleNode ,0 ,0 ,usingFinal: boolean ,setUsingFinal{ Params : boolean Returns : void} isUsingFinal{ Params :  Returns : boolean} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,boolean ,,boolean ,
JRefactory,org.acm.seguin.parser.ast,ASTFormalParameters,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTForStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTForUpdate,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTIfStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTImportDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,importPackage: boolean ,setImportPackage{ Params : boolean Returns : void} isImportingPackage{ Params :  Returns : boolean} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,boolean ,,boolean ,
JRefactory,org.acm.seguin.parser.ast,ASTInclusiveOrExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTInitializer,1,1,0,0,0,false,SimpleNode ,0 ,0 ,usingStatic: boolean ,setUsingStatic{ Params : boolean Returns : void} isUsingStatic{ Params :  Returns : boolean} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,boolean ,,boolean ,
JRefactory,org.acm.seguin.parser.ast,ASTInstanceOfExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTInterfaceBody,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTInterfaceDeclaration,1,1,0,0,0,false,SimpleNode ,JavaDocable ,0 ,jdi: JavaDocableImpl modifiers: ModifierHolder ,isAbstract{ Params :  Returns : boolean} isExplicit{ Params :  Returns : boolean} isFinal{ Params :  Returns : boolean} isInterface{ Params :  Returns : boolean} isNative{ Params :  Returns : boolean} isPrivate{ Params :  Returns : boolean} isProtected{ Params :  Returns : boolean} isPublic{ Params :  Returns : boolean} isStatic{ Params :  Returns : boolean} isStrict{ Params :  Returns : boolean} isSynchronized{ Params :  Returns : boolean} isTransient{ Params :  Returns : boolean} isVolatile{ Params :  Returns : boolean} getModifiersString{ Params :  Returns : String} getModifiers{ Params :  Returns : ModifierHolder} isRequired{ Params :  Returns : boolean} addModifier{ Params : String Returns : void} toString{ Params :  Returns : String} addJavaDocComponent{ Params : JavaDocComponent Returns : void} printJavaDocComponents{ Params : PrintData Returns : void} finish{ Params :  Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,JavaDocable ,ModifierHolder ,,ModifierHolder ,ModifierHolder JavaDocableImpl ModifierHolder JavaDocableImpl ForceJavadocComments 
JRefactory,org.acm.seguin.parser.ast,ASTInterfaceMemberDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTLabeledStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTLiteral,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTLocalVariableDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,usingFinal: boolean ,setUsingFinal{ Params : boolean Returns : void} isUsingFinal{ Params :  Returns : boolean} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,boolean ,,boolean ,
JRefactory,org.acm.seguin.parser.ast,ASTMethodDeclaration,1,1,0,0,0,false,SimpleNode ,JavaDocable ,0 ,modifiers: ModifierHolder jdi: JavaDocableImpl ,isAbstract{ Params :  Returns : boolean} isExplicit{ Params :  Returns : boolean} isFinal{ Params :  Returns : boolean} isInterface{ Params :  Returns : boolean} isNative{ Params :  Returns : boolean} isPrivate{ Params :  Returns : boolean} isProtected{ Params :  Returns : boolean} isPublic{ Params :  Returns : boolean} isStatic{ Params :  Returns : boolean} isStrict{ Params :  Returns : boolean} isSynchronized{ Params :  Returns : boolean} isTransient{ Params :  Returns : boolean} isVolatile{ Params :  Returns : boolean} getModifiersString{ Params :  Returns : String} getModifiers{ Params :  Returns : ModifierHolder} isRequired{ Params :  Returns : boolean} addModifier{ Params : String Returns : void} toString{ Params :  Returns : String} addJavaDocComponent{ Params : JavaDocComponent Returns : void} printJavaDocComponents{ Params : PrintData Returns : void} finish{ Params :  Returns : void} finish{ Params : String Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,JavaDocable ,JavaDocableImpl ,,JavaDocableImpl ,ModifierHolder JavaDocableImpl ModifierHolder JavaDocableImpl ForceJavadocComments MethodAnalyzer 
JRefactory,org.acm.seguin.parser.ast,ASTMethodDeclarationLookahead,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTMethodDeclarator,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String arrayCount: int ,setName{ Params : String Returns : void} setArrayCount{ Params : int Returns : void} getName{ Params :  Returns : String} getArrayCount{ Params :  Returns : int} toString{ Params :  Returns : String} finish{ Params :  Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,int ,,int ,StringBuffer 
JRefactory,org.acm.seguin.parser.ast,ASTNameList,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTNestedClassDeclaration,1,1,0,0,0,false,SimpleNode ,JavaDocable ,0 ,modifiers: ModifierHolder jdi: JavaDocableImpl ,isAbstract{ Params :  Returns : boolean} isExplicit{ Params :  Returns : boolean} isFinal{ Params :  Returns : boolean} isInterface{ Params :  Returns : boolean} isNative{ Params :  Returns : boolean} isPrivate{ Params :  Returns : boolean} isProtected{ Params :  Returns : boolean} isPublic{ Params :  Returns : boolean} isStatic{ Params :  Returns : boolean} isStrict{ Params :  Returns : boolean} isSynchronized{ Params :  Returns : boolean} isTransient{ Params :  Returns : boolean} isVolatile{ Params :  Returns : boolean} getModifiersString{ Params :  Returns : String} getModifiers{ Params :  Returns : ModifierHolder} isRequired{ Params :  Returns : boolean} addModifier{ Params : String Returns : void} toString{ Params :  Returns : String} addJavaDocComponent{ Params : JavaDocComponent Returns : void} printJavaDocComponents{ Params : PrintData Returns : void} finish{ Params :  Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,JavaDocable ,JavaDocableImpl ,,JavaDocableImpl ,ModifierHolder JavaDocableImpl ModifierHolder JavaDocableImpl ForceJavadocComments 
JRefactory,org.acm.seguin.parser.ast,ASTNestedInterfaceDeclaration,1,1,0,0,0,false,SimpleNode ,JavaDocable ,0 ,modifiers: ModifierHolder jdi: JavaDocableImpl ,isAbstract{ Params :  Returns : boolean} isExplicit{ Params :  Returns : boolean} isFinal{ Params :  Returns : boolean} isInterface{ Params :  Returns : boolean} isNative{ Params :  Returns : boolean} isPrivate{ Params :  Returns : boolean} isProtected{ Params :  Returns : boolean} isPublic{ Params :  Returns : boolean} isStatic{ Params :  Returns : boolean} isStrict{ Params :  Returns : boolean} isSynchronized{ Params :  Returns : boolean} isTransient{ Params :  Returns : boolean} isVolatile{ Params :  Returns : boolean} getModifiersString{ Params :  Returns : String} getModifiers{ Params :  Returns : ModifierHolder} isRequired{ Params :  Returns : boolean} addModifier{ Params : String Returns : void} toString{ Params :  Returns : String} addJavaDocComponent{ Params : JavaDocComponent Returns : void} printJavaDocComponents{ Params : PrintData Returns : void} finish{ Params :  Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,JavaDocable ,JavaDocableImpl ,,JavaDocableImpl ,ModifierHolder JavaDocableImpl ModifierHolder JavaDocableImpl ForceJavadocComments 
JRefactory,org.acm.seguin.parser.ast,ASTNullLiteral,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTPackageDeclaration,1,1,0,0,0,false,SimpleNode ,JavaDocable ,0 ,jdi: JavaDocableImpl ,isRequired{ Params :  Returns : boolean} addJavaDocComponent{ Params : JavaDocComponent Returns : void} printJavaDocComponents{ Params : PrintData Returns : void} finish{ Params :  Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,JavaDocable ,,,,JavaDocableImpl JavaDocableImpl 
JRefactory,org.acm.seguin.parser.ast,ASTPostfixExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTPreDecrementExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTPreIncrementExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTPrimaryExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTPrimaryPrefix,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTPrimarySuffix,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTPrimitiveType,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTResultType,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTReturnStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTStatementExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTStatementExpressionList,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTSwitchLabel,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTSwitchStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTSynchronizedStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTThrowStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTTryStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTType,1,1,0,0,0,false,SimpleNode ,0 ,0 ,arrayCount: int ,setArrayCount{ Params : int Returns : void} getArrayCount{ Params :  Returns : int} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,int ,,int ,
JRefactory,org.acm.seguin.parser.ast,ASTTypeDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTUnaryExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTUnaryExpressionNotPlusMinus,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTUnmodifiedClassDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTUnmodifiedInterfaceDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.ast,ASTVariableDeclarator,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTVariableDeclaratorId,1,1,0,0,0,false,SimpleNode ,0 ,0 ,name: String arrayCount: int ,setName{ Params : String Returns : void} setArrayCount{ Params : int Returns : void} getName{ Params :  Returns : String} getArrayCount{ Params :  Returns : int} toString{ Params :  Returns : String} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,int ,,int ,
JRefactory,org.acm.seguin.parser.ast,ASTVariableInitializer,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,ASTWhileStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.ast,SimpleNode,1,1,0,0,0,false,0 ,Node ,0 ,parent: Node children: Node id: int parser: JavaParser specials: Vector ,getID{ Params :  Returns : int} getSpecial{ Params : String Returns : Token} jjtOpen{ Params :  Returns : void} jjtClose{ Params :  Returns : void} jjtSetParent{ Params : Node Returns : void} jjtGetParent{ Params :  Returns : Node} jjtAddChild{ Params : Node,int Returns : void} jjtInsertChild{ Params : Node,int Returns : void} jjtGetChild{ Params : int Returns : Node} jjtGetNumChildren{ Params :  Returns : int} hasAnyChildren{ Params :  Returns : boolean} jjtDeleteChild{ Params : int Returns : void} addSpecial{ Params : String,Token Returns : void} removeSpecial{ Params : String Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} childrenAccept{ Params : JavaParserVisitor,Object Returns : Object} toString{ Params :  Returns : String} toString{ Params : String Returns : String} dump{ Params : String Returns : void} init{ Params :  Returns : void} isRequired{ Params :  Returns : boolean} ,,,,,Node ,,,,NamedToken Vector 
JRefactory,org.acm.seguin.parser.build,BuildExpression,1,1,0,0,0,false,0 ,0 ,0 ,,buildName{ Params : String Returns : ASTExpression} ,,,,,,,,,ASTExpression ASTConditionalExpression ASTConditionalOrExpression ASTConditionalAndExpression ASTInclusiveOrExpression ASTExclusiveOrExpression ASTAndExpression ASTEqualityExpression ASTInstanceOfExpression ASTRelationalExpression ASTShiftExpression ASTAdditiveExpression ASTMultiplicativeExpression ASTUnaryExpression ASTUnaryExpressionNotPlusMinus ASTPostfixExpression ASTPrimaryExpression ASTPrimaryPrefix ASTName 
JRefactory,org.acm.seguin.parser,ChildrenVisitor,1,1,0,0,0,false,0 ,JavaParserVisitor ,0 ,,visit{ Params : SimpleNode,Object Returns : Object} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBodyDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarationLookahead,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} visit{ Params : ASTInterfaceMemberDeclaration,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTVariableDeclarator,Object Returns : Object} visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} visit{ Params : ASTVariableInitializer,Object Returns : Object} visit{ Params : ASTArrayInitializer,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTFormalParameters,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTExplicitConstructorInvocation,Object Returns : Object} visit{ Params : ASTInitializer,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTPrimitiveType,Object Returns : Object} visit{ Params : ASTResultType,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} visit{ Params : ASTNameList,Object Returns : Object} visit{ Params : ASTExpression,Object Returns : Object} visit{ Params : ASTAssignmentOperator,Object Returns : Object} visit{ Params : ASTConditionalExpression,Object Returns : Object} visit{ Params : ASTConditionalOrExpression,Object Returns : Object} visit{ Params : ASTConditionalAndExpression,Object Returns : Object} visit{ Params : ASTInclusiveOrExpression,Object Returns : Object} visit{ Params : ASTExclusiveOrExpression,Object Returns : Object} visit{ Params : ASTAndExpression,Object Returns : Object} visit{ Params : ASTEqualityExpression,Object Returns : Object} visit{ Params : ASTInstanceOfExpression,Object Returns : Object} visit{ Params : ASTRelationalExpression,Object Returns : Object} visit{ Params : ASTShiftExpression,Object Returns : Object} visit{ Params : ASTAdditiveExpression,Object Returns : Object} visit{ Params : ASTMultiplicativeExpression,Object Returns : Object} visit{ Params : ASTUnaryExpression,Object Returns : Object} visit{ Params : ASTPreIncrementExpression,Object Returns : Object} visit{ Params : ASTPreDecrementExpression,Object Returns : Object} visit{ Params : ASTUnaryExpressionNotPlusMinus,Object Returns : Object} visit{ Params : ASTCastLookahead,Object Returns : Object} visit{ Params : ASTPostfixExpression,Object Returns : Object} visit{ Params : ASTCastExpression,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} visit{ Params : ASTBooleanLiteral,Object Returns : Object} visit{ Params : ASTNullLiteral,Object Returns : Object} visit{ Params : ASTArguments,Object Returns : Object} visit{ Params : ASTArgumentList,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} visit{ Params : ASTArrayDimsAndInits,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTLabeledStatement,Object Returns : Object} visit{ Params : ASTBlock,Object Returns : Object} visit{ Params : ASTBlockStatement,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTEmptyStatement,Object Returns : Object} visit{ Params : ASTStatementExpression,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTSwitchLabel,Object Returns : Object} visit{ Params : ASTIfStatement,Object Returns : Object} visit{ Params : ASTWhileStatement,Object Returns : Object} visit{ Params : ASTDoStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTForInit,Object Returns : Object} visit{ Params : ASTStatementExpressionList,Object Returns : Object} visit{ Params : ASTForUpdate,Object Returns : Object} visit{ Params : ASTBreakStatement,Object Returns : Object} visit{ Params : ASTContinueStatement,Object Returns : Object} visit{ Params : ASTReturnStatement,Object Returns : Object} visit{ Params : ASTThrowStatement,Object Returns : Object} visit{ Params : ASTSynchronizedStatement,Object Returns : Object} visit{ Params : ASTTryStatement,Object Returns : Object} ,,,,,JavaParserVisitor ,,,,
JRefactory,org.acm.seguin.parser.factory,BufferParserFactory,1,1,0,0,0,false,ParserFactory ,0 ,0 ,inputBuffer: String ,getInputStream{ Params :  Returns : InputStream} getKey{ Params :  Returns : String} ,,,,,,String ,,String ,ByteArrayInputStream 
JRefactory,org.acm.seguin.parser.factory,FileParserFactory,1,1,0,0,0,false,ParserFactory ,0 ,0 ,input: File ,getInputStream{ Params :  Returns : InputStream} getKey{ Params :  Returns : String} ,,,,,,File ,,File ,FileInputStream 
JRefactory,org.acm.seguin.parser.factory,InputStreamParserFactory,1,1,0,0,0,false,ParserFactory ,0 ,0 ,input: InputStream key: String ,getInputStream{ Params :  Returns : InputStream} getKey{ Params :  Returns : String} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.parser.factory,NameFactory,1,1,0,0,0,false,0 ,0 ,0 ,,getName{ Params : String,String Returns : ASTName} ,,getName ,,,,,,,StringTokenizer ASTName 
JRefactory,org.acm.seguin.parser.factory,ParserFactory,1,1,1,0,0,false,0 ,0 ,0 ,root: SimpleNode parser: JavaParser ,getAbstractSyntaxTree{ Params : boolean Returns : SimpleNode} getInputStream{ Params :  Returns : InputStream} getParser{ Params :  Returns : JavaParser} getKey{ Params :  Returns : String} ,,,,getInputStream getKey ,,,,,JavaParser 
JRefactory,org.acm.seguin.parser.factory,StdInParserFactory,1,1,0,0,0,false,ParserFactory ,0 ,0 ,,getInputStream{ Params :  Returns : InputStream} getKey{ Params :  Returns : String} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.io,ASCII_CharStream,1,0,0,0,1,false,CharStream ,0 ,0 ,MASK: char ,getColumn{ Params :  Returns : int} getLine{ Params :  Returns : int} getEndColumn{ Params :  Returns : int} getEndLine{ Params :  Returns : int} getBeginColumn{ Params :  Returns : int} getBeginLine{ Params :  Returns : int} GetImage{ Params :  Returns : String} GetSuffix{ Params : int Returns : char[]} BeginToken{ Params :  Returns : char} readChar{ Params :  Returns : char} backup{ Params : int Returns : void} ReInit{ Params : java.io.Reader,int,int,int Returns : void} ReInit{ Params : java.io.Reader,int,int Returns : void} ReInit{ Params : java.io.InputStream,int,int,int Returns : void} ReInit{ Params : java.io.InputStream,int,int Returns : void} Done{ Params :  Returns : void} adjustBeginLineColumn{ Params : int,int Returns : void} ExpandBuff{ Params : boolean Returns : void} FillBuff{ Params :  Returns : void} UpdateLineColumn{ Params : char Returns : void} ,,getColumn getLine getEndColumn getEndLine getBeginColumn getBeginLine GetImage GetSuffix BeginToken readChar backup ReInit ReInit ReInit ReInit Done adjustBeginLineColumn ExpandBuff FillBuff UpdateLineColumn ,,,,,,,Error InputStreamReader String String String InputStreamReader Error IOException 
JRefactory,org.acm.seguin.parser.io,CharStream,1,1,0,0,0,false,Object ,0 ,0 ,staticFlag: boolean bufpos: int bufsize: int available: int tokenBegin: int bufline: int bufcolumn: int column: int line: int prevCharIsCR: boolean prevCharIsLF: boolean inputStream: java.io.Reader buffer: char maxNextCharInd: int inBuf: int charStreamType: int ASCII: int UNICODE: int FULL_CHAR: int ,getColumn{ Params :  Returns : int} getLine{ Params :  Returns : int} getEndColumn{ Params :  Returns : int} getEndLine{ Params :  Returns : int} getBeginColumn{ Params :  Returns : int} getBeginLine{ Params :  Returns : int} GetSuffix{ Params : int Returns : char[]} GetImage{ Params :  Returns : String} BeginToken{ Params :  Returns : char} readChar{ Params :  Returns : char} backup{ Params : int Returns : void} ReInit{ Params : java.io.Reader,int,int,int Returns : void} ReInit{ Params : java.io.Reader,int,int Returns : void} ReInit{ Params : java.io.InputStream,int,int,int Returns : void} ReInit{ Params : java.io.InputStream,int,int Returns : void} adjustBeginLineColumn{ Params : int,int Returns : void} make{ Params : java.io.Reader,int,int,int Returns : CharStream} make{ Params : java.io.Reader,int,int Returns : CharStream} make{ Params : java.io.InputStream,int,int,int Returns : CharStream} make{ Params : java.io.InputStream,int,int Returns : CharStream} getCharStreamType{ Params :  Returns : int} initCharStreamType{ Params :  Returns : void} ,,getColumn getLine getEndColumn getEndLine getBeginColumn getBeginLine GetSuffix GetImage BeginToken readChar backup ReInit ReInit ReInit ReInit adjustBeginLineColumn make make make make getCharStreamType initCharStreamType ,,,,,,,ASCII_CharStream UCode_CharStream ASCII_CharStream UCode_CharStream ASCII_CharStream UCode_CharStream ASCII_CharStream UCode_CharStream 
JRefactory,org.acm.seguin.parser.io,UCode_CharStream,1,1,0,0,1,false,CharStream ,0 ,0 ,nextCharBuf: char nextCharInd: int ,ReInit{ Params : java.io.Reader,int,int,int Returns : void} ReInit{ Params : java.io.Reader,int,int Returns : void} ReInit{ Params : java.io.InputStream,int,int,int Returns : void} ReInit{ Params : java.io.InputStream,int,int Returns : void} getColumn{ Params :  Returns : int} getLine{ Params :  Returns : int} getEndColumn{ Params :  Returns : int} getEndLine{ Params :  Returns : int} getBeginColumn{ Params :  Returns : int} getBeginLine{ Params :  Returns : int} GetImage{ Params :  Returns : String} GetSuffix{ Params : int Returns : char[]} BeginToken{ Params :  Returns : char} readChar{ Params :  Returns : char} backup{ Params : int Returns : void} Done{ Params :  Returns : void} adjustBeginLineColumn{ Params : int,int Returns : void} ExpandBuff{ Params : boolean Returns : void} FillBuff{ Params :  Returns : void} ReadChar{ Params :  Returns : char} UpdateLineColumn{ Params : char Returns : void} ,,ReInit ReInit ReInit ReInit getColumn getLine getEndColumn getEndLine getBeginColumn getBeginLine GetImage GetSuffix BeginToken readChar backup Done adjustBeginLineColumn ExpandBuff FillBuff ReadChar UpdateLineColumn ,,,,,,,Error InputStreamReader InputStreamReader String String String Error IOException 
JRefactory,org.acm.seguin.parser,JavaParserConstants,2,1,0,0,0,true,CharStream ,0 ,0 ,EOF: int SINGLE_LINE_COMMENT: int FORMAL_COMMENT: int MULTI_LINE_COMMENT: int CATEGORY_COMMENT: int ABSTRACT: int BOOLEAN: int BREAK: int BYTE: int CASE: int CATCH: int CHAR: int CLASS: int CONST: int CONTINUE: int _DEFAULT: int DO: int DOUBLE: int ELSE: int EXTENDS: int FALSE: int FINAL: int FINALLY: int FLOAT: int FOR: int GOTO: int IF: int IMPLEMENTS: int IMPORT: int INSTANCEOF: int INT: int INTERFACE: int LONG: int NATIVE: int NEW: int NULL: int PACKAGE: int PRIVATE: int PROTECTED: int PUBLIC: int RETURN: int SHORT: int STATIC: int STRICTFP: int SUPER: int SWITCH: int SYNCHRONIZED: int THIS: int THROW: int THROWS: int TRANSIENT: int TRUE: int TRY: int VOID: int VOLATILE: int WHILE: int INTEGER_LITERAL: int DECIMAL_LITERAL: int HEX_LITERAL: int OCTAL_LITERAL: int FLOATING_POINT_LITERAL: int EXPONENT: int CHARACTER_LITERAL: int STRING_LITERAL: int IDENTIFIER: int LETTER: int DIGIT: int LPAREN: int RPAREN: int LBRACE: int RBRACE: int LBRACKET: int RBRACKET: int SEMICOLON: int COMMA: int DOT: int ASSIGN: int GT: int LT: int BANG: int TILDE: int HOOK: int COLON: int EQ: int LE: int GE: int NE: int SC_OR: int SC_AND: int INCR: int DECR: int PLUS: int MINUS: int STAR: int SLASH: int BIT_AND: int BIT_OR: int XOR: int REM: int LSHIFT: int RSIGNEDSHIFT: int RUNSIGNEDSHIFT: int PLUSASSIGN: int MINUSASSIGN: int STARASSIGN: int SLASHASSIGN: int ANDASSIGN: int ORASSIGN: int XORASSIGN: int REMASSIGN: int LSHIFTASSIGN: int RSIGNEDSHIFTASSIGN: int RUNSIGNEDSHIFTASSIGN: int DEFAULT: int IN_SINGLE_LINE_COMMENT: int IN_FORMAL_COMMENT: int IN_MULTI_LINE_COMMENT: int IN_CATEGORY_COMMENT: int tokenImage: String ,,,,,,,,,,
JRefactory,org.acm.seguin.parser,JavaParserTokenManager,1,1,0,0,0,false,0 ,JavaParserConstants ,0 ,jjstrLiteralImages: String lexStateNames: String jjnewLexState: int curChar: char jjbitVec0: long jjbitVec1: long jjbitVec3: long jjbitVec4: long jjbitVec5: long jjbitVec6: long jjbitVec7: long jjnextStates: int jjtoToken: long jjtoSkip: long jjtoSpecial: long jjtoMore: long image: StringBuffer jjimageLen: int lengthOfMatch: int curLexState: int defaultLexState: int jjnewStateCnt: int jjround: int jjmatchedPos: int jjmatchedKind: int input_stream: CharStream jjrounds: int jjstateSet: int ,getNextToken{ Params :  Returns : Token} ReInit{ Params : CharStream Returns : void} ReInit{ Params : CharStream,int Returns : void} SwitchTo{ Params : int Returns : void} SkipLexicalActions{ Params : Token Returns : void} MoreLexicalActions{ Params :  Returns : void} jjStopAtPos{ Params : int,int Returns : int} jjMoveStringLiteralDfa0_4{ Params :  Returns : int} jjMoveStringLiteralDfa1_4{ Params : long Returns : int} jjMoveStringLiteralDfa2_4{ Params : long,long Returns : int} jjMoveStringLiteralDfa0_3{ Params :  Returns : int} jjMoveStringLiteralDfa1_3{ Params : long Returns : int} jjMoveStringLiteralDfa0_2{ Params :  Returns : int} jjMoveStringLiteralDfa1_2{ Params : long Returns : int} jjMoveStringLiteralDfa0_1{ Params :  Returns : int} jjCheckNAdd{ Params : int Returns : void} jjAddStates{ Params : int,int Returns : void} jjCheckNAddTwoStates{ Params : int,int Returns : void} jjCheckNAddStates{ Params : int,int Returns : void} jjCheckNAddStates{ Params : int Returns : void} jjMoveNfa_1{ Params : int,int Returns : int} jjStopStringLiteralDfa_0{ Params : int,long,long Returns : int} jjStartNfa_0{ Params : int,long,long Returns : int} jjStartNfaWithStates_0{ Params : int,int,int Returns : int} jjMoveStringLiteralDfa0_0{ Params :  Returns : int} jjMoveStringLiteralDfa1_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa2_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa3_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa4_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa5_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa6_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa7_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa8_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa9_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa10_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa11_0{ Params : long,long Returns : int} jjMoveNfa_0{ Params : int,int Returns : int} ReInitRounds{ Params :  Returns : void} jjFillToken{ Params :  Returns : Token} ,,getNextToken ReInit ReInit SwitchTo SkipLexicalActions MoreLexicalActions jjStopAtPos jjMoveStringLiteralDfa0_4 jjMoveStringLiteralDfa1_4 jjMoveStringLiteralDfa2_4 jjMoveStringLiteralDfa0_3 jjMoveStringLiteralDfa1_3 jjMoveStringLiteralDfa0_2 jjMoveStringLiteralDfa1_2 jjMoveStringLiteralDfa0_1 jjCheckNAdd jjAddStates jjCheckNAddTwoStates jjCheckNAddStates jjCheckNAddStates jjMoveNfa_1 jjStopStringLiteralDfa_0 jjStartNfa_0 jjStartNfaWithStates_0 jjMoveStringLiteralDfa0_0 jjMoveStringLiteralDfa1_0 jjMoveStringLiteralDfa2_0 jjMoveStringLiteralDfa3_0 jjMoveStringLiteralDfa4_0 jjMoveStringLiteralDfa5_0 jjMoveStringLiteralDfa6_0 jjMoveStringLiteralDfa7_0 jjMoveStringLiteralDfa8_0 jjMoveStringLiteralDfa9_0 jjMoveStringLiteralDfa10_0 jjMoveStringLiteralDfa11_0 jjMoveNfa_0 ReInitRounds jjFillToken ,,,JavaParserConstants ,,,,TokenMgrError Token TokenMgrError TokenMgrError StringBuffer String String 
JRefactory,org.acm.seguin.parser,JavaParserTreeConstants,2,1,0,0,0,true,0 ,JavaParserConstants ,0 ,JJTCOMPILATIONUNIT: int JJTPACKAGEDECLARATION: int JJTIMPORTDECLARATION: int JJTTYPEDECLARATION: int JJTCLASSDECLARATION: int JJTUNMODIFIEDCLASSDECLARATION: int JJTCLASSBODY: int JJTNESTEDCLASSDECLARATION: int JJTCLASSBODYDECLARATION: int JJTMETHODDECLARATIONLOOKAHEAD: int JJTINTERFACEDECLARATION: int JJTNESTEDINTERFACEDECLARATION: int JJTUNMODIFIEDINTERFACEDECLARATION: int JJTINTERFACEBODY: int JJTINTERFACEMEMBERDECLARATION: int JJTFIELDDECLARATION: int JJTVARIABLEDECLARATOR: int JJTVARIABLEDECLARATORID: int JJTVARIABLEINITIALIZER: int JJTARRAYINITIALIZER: int JJTMETHODDECLARATION: int JJTMETHODDECLARATOR: int JJTFORMALPARAMETERS: int JJTFORMALPARAMETER: int JJTCONSTRUCTORDECLARATION: int JJTEXPLICITCONSTRUCTORINVOCATION: int JJTINITIALIZER: int JJTTYPE: int JJTPRIMITIVETYPE: int JJTRESULTTYPE: int JJTNAME: int JJTNAMELIST: int JJTEXPRESSION: int JJTASSIGNMENTOPERATOR: int JJTCONDITIONALEXPRESSION: int JJTCONDITIONALOREXPRESSION: int JJTCONDITIONALANDEXPRESSION: int JJTINCLUSIVEOREXPRESSION: int JJTEXCLUSIVEOREXPRESSION: int JJTANDEXPRESSION: int JJTEQUALITYEXPRESSION: int JJTINSTANCEOFEXPRESSION: int JJTRELATIONALEXPRESSION: int JJTSHIFTEXPRESSION: int JJTADDITIVEEXPRESSION: int JJTMULTIPLICATIVEEXPRESSION: int JJTUNARYEXPRESSION: int JJTPREINCREMENTEXPRESSION: int JJTPREDECREMENTEXPRESSION: int JJTUNARYEXPRESSIONNOTPLUSMINUS: int JJTCASTLOOKAHEAD: int JJTPOSTFIXEXPRESSION: int JJTCASTEXPRESSION: int JJTPRIMARYEXPRESSION: int JJTPRIMARYPREFIX: int JJTPRIMARYSUFFIX: int JJTLITERAL: int JJTBOOLEANLITERAL: int JJTNULLLITERAL: int JJTARGUMENTS: int JJTARGUMENTLIST: int JJTALLOCATIONEXPRESSION: int JJTARRAYDIMSANDINITS: int JJTSTATEMENT: int JJTLABELEDSTATEMENT: int JJTBLOCK: int JJTBLOCKSTATEMENT: int JJTLOCALVARIABLEDECLARATION: int JJTEMPTYSTATEMENT: int JJTSTATEMENTEXPRESSION: int JJTSWITCHSTATEMENT: int JJTSWITCHLABEL: int JJTIFSTATEMENT: int JJTWHILESTATEMENT: int JJTDOSTATEMENT: int JJTFORSTATEMENT: int JJTFORINIT: int JJTSTATEMENTEXPRESSIONLIST: int JJTFORUPDATE: int JJTBREAKSTATEMENT: int JJTCONTINUESTATEMENT: int JJTRETURNSTATEMENT: int JJTTHROWSTATEMENT: int JJTSYNCHRONIZEDSTATEMENT: int JJTTRYSTATEMENT: int jjtNodeName: String ,,,,,,,,,,
JRefactory,org.acm.seguin.parser,JavaParserVisitor,2,1,0,0,0,true,0 ,JavaParserConstants ,0 ,,visit{ Params : SimpleNode,Object Returns : Object} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBodyDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarationLookahead,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} visit{ Params : ASTInterfaceMemberDeclaration,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTVariableDeclarator,Object Returns : Object} visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} visit{ Params : ASTVariableInitializer,Object Returns : Object} visit{ Params : ASTArrayInitializer,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTFormalParameters,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTExplicitConstructorInvocation,Object Returns : Object} visit{ Params : ASTInitializer,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTPrimitiveType,Object Returns : Object} visit{ Params : ASTResultType,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} visit{ Params : ASTNameList,Object Returns : Object} visit{ Params : ASTExpression,Object Returns : Object} visit{ Params : ASTAssignmentOperator,Object Returns : Object} visit{ Params : ASTConditionalExpression,Object Returns : Object} visit{ Params : ASTConditionalOrExpression,Object Returns : Object} visit{ Params : ASTConditionalAndExpression,Object Returns : Object} visit{ Params : ASTInclusiveOrExpression,Object Returns : Object} visit{ Params : ASTExclusiveOrExpression,Object Returns : Object} visit{ Params : ASTAndExpression,Object Returns : Object} visit{ Params : ASTEqualityExpression,Object Returns : Object} visit{ Params : ASTInstanceOfExpression,Object Returns : Object} visit{ Params : ASTRelationalExpression,Object Returns : Object} visit{ Params : ASTShiftExpression,Object Returns : Object} visit{ Params : ASTAdditiveExpression,Object Returns : Object} visit{ Params : ASTMultiplicativeExpression,Object Returns : Object} visit{ Params : ASTUnaryExpression,Object Returns : Object} visit{ Params : ASTPreIncrementExpression,Object Returns : Object} visit{ Params : ASTPreDecrementExpression,Object Returns : Object} visit{ Params : ASTUnaryExpressionNotPlusMinus,Object Returns : Object} visit{ Params : ASTCastLookahead,Object Returns : Object} visit{ Params : ASTPostfixExpression,Object Returns : Object} visit{ Params : ASTCastExpression,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} visit{ Params : ASTBooleanLiteral,Object Returns : Object} visit{ Params : ASTNullLiteral,Object Returns : Object} visit{ Params : ASTArguments,Object Returns : Object} visit{ Params : ASTArgumentList,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} visit{ Params : ASTArrayDimsAndInits,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTLabeledStatement,Object Returns : Object} visit{ Params : ASTBlock,Object Returns : Object} visit{ Params : ASTBlockStatement,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTEmptyStatement,Object Returns : Object} visit{ Params : ASTStatementExpression,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTSwitchLabel,Object Returns : Object} visit{ Params : ASTIfStatement,Object Returns : Object} visit{ Params : ASTWhileStatement,Object Returns : Object} visit{ Params : ASTDoStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTForInit,Object Returns : Object} visit{ Params : ASTStatementExpressionList,Object Returns : Object} visit{ Params : ASTForUpdate,Object Returns : Object} visit{ Params : ASTBreakStatement,Object Returns : Object} visit{ Params : ASTContinueStatement,Object Returns : Object} visit{ Params : ASTReturnStatement,Object Returns : Object} visit{ Params : ASTThrowStatement,Object Returns : Object} visit{ Params : ASTSynchronizedStatement,Object Returns : Object} visit{ Params : ASTTryStatement,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser,JJTJavaParserState,1,0,0,0,0,false,0 ,0 ,0 ,nodes: java.util.Stack marks: java.util.Stack sp: int mk: int node_created: boolean ,nodeCreated{ Params :  Returns : boolean} reset{ Params :  Returns : void} rootNode{ Params :  Returns : Node} pushNode{ Params : Node Returns : void} popNode{ Params :  Returns : Node} peekNode{ Params :  Returns : Node} nodeArity{ Params :  Returns : int} clearNodeScope{ Params : Node Returns : void} openNodeScope{ Params : Node Returns : void} closeNodeScope{ Params : Node,int Returns : void} closeNodeScope{ Params : Node,boolean Returns : void} ,,,,,,boolean ,,boolean ,Stack Stack Integer 
JRefactory,org.acm.seguin.parser,NamedToken,1,1,0,0,0,false,0 ,0 ,0 ,id: String token: Token ,getID{ Params :  Returns : String} getToken{ Params :  Returns : Token} check{ Params : String Returns : boolean} ,,,,,,Token ,,Token ,
JRefactory,org.acm.seguin.parser,Node,2,1,0,0,0,true,0 ,0 ,0 ,,jjtOpen{ Params :  Returns : void} jjtClose{ Params :  Returns : void} jjtSetParent{ Params : Node Returns : void} jjtGetParent{ Params :  Returns : Node} jjtAddChild{ Params : Node,int Returns : void} jjtInsertChild{ Params : Node,int Returns : void} jjtDeleteChild{ Params : int Returns : void} jjtGetChild{ Params : int Returns : Node} jjtGetNumChildren{ Params :  Returns : int} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser,ParseException,1,1,0,0,0,false,Exception ,0 ,0 ,currentToken: Token expectedTokenSequences: int tokenImage: String specialConstructor: boolean eol: String ,getMessage{ Params :  Returns : String} add_escapes{ Params : String Returns : String} ,,,,,,,,,StringBuffer 
JRefactory,org.acm.seguin.parser.query,CompareParseTreeVisitor,1,0,0,0,0,false,0 ,JavaParserVisitor ,0 ,,visit{ Params : SimpleNode,Object Returns : Object} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBodyDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarationLookahead,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} visit{ Params : ASTInterfaceMemberDeclaration,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTVariableDeclarator,Object Returns : Object} visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} visit{ Params : ASTVariableInitializer,Object Returns : Object} visit{ Params : ASTArrayInitializer,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTFormalParameters,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTExplicitConstructorInvocation,Object Returns : Object} visit{ Params : ASTInitializer,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTPrimitiveType,Object Returns : Object} visit{ Params : ASTResultType,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} visit{ Params : ASTNameList,Object Returns : Object} visit{ Params : ASTExpression,Object Returns : Object} visit{ Params : ASTAssignmentOperator,Object Returns : Object} visit{ Params : ASTConditionalExpression,Object Returns : Object} visit{ Params : ASTConditionalOrExpression,Object Returns : Object} visit{ Params : ASTConditionalAndExpression,Object Returns : Object} visit{ Params : ASTInclusiveOrExpression,Object Returns : Object} visit{ Params : ASTExclusiveOrExpression,Object Returns : Object} visit{ Params : ASTAndExpression,Object Returns : Object} visit{ Params : ASTEqualityExpression,Object Returns : Object} visit{ Params : ASTInstanceOfExpression,Object Returns : Object} visit{ Params : ASTRelationalExpression,Object Returns : Object} visit{ Params : ASTShiftExpression,Object Returns : Object} visit{ Params : ASTAdditiveExpression,Object Returns : Object} visit{ Params : ASTMultiplicativeExpression,Object Returns : Object} visit{ Params : ASTUnaryExpression,Object Returns : Object} visit{ Params : ASTPreIncrementExpression,Object Returns : Object} visit{ Params : ASTPreDecrementExpression,Object Returns : Object} visit{ Params : ASTUnaryExpressionNotPlusMinus,Object Returns : Object} visit{ Params : ASTCastLookahead,Object Returns : Object} visit{ Params : ASTPostfixExpression,Object Returns : Object} visit{ Params : ASTCastExpression,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} visit{ Params : ASTBooleanLiteral,Object Returns : Object} visit{ Params : ASTNullLiteral,Object Returns : Object} visit{ Params : ASTArguments,Object Returns : Object} visit{ Params : ASTArgumentList,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} visit{ Params : ASTArrayDimsAndInits,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTLabeledStatement,Object Returns : Object} visit{ Params : ASTBlock,Object Returns : Object} visit{ Params : ASTBlockStatement,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTEmptyStatement,Object Returns : Object} visit{ Params : ASTStatementExpression,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTSwitchLabel,Object Returns : Object} visit{ Params : ASTIfStatement,Object Returns : Object} visit{ Params : ASTWhileStatement,Object Returns : Object} visit{ Params : ASTDoStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTForInit,Object Returns : Object} visit{ Params : ASTStatementExpressionList,Object Returns : Object} visit{ Params : ASTForUpdate,Object Returns : Object} visit{ Params : ASTBreakStatement,Object Returns : Object} visit{ Params : ASTContinueStatement,Object Returns : Object} visit{ Params : ASTReturnStatement,Object Returns : Object} visit{ Params : ASTThrowStatement,Object Returns : Object} visit{ Params : ASTSynchronizedStatement,Object Returns : Object} visit{ Params : ASTTryStatement,Object Returns : Object} defaultComparison{ Params : SimpleNode,Object Returns : Boolean} ,,,,,JavaParserVisitor ,,,,
JRefactory,org.acm.seguin.parser.query,EqualTree,1,1,0,0,0,false,CompareParseTreeVisitor ,0 ,0 ,,visit{ Params : ASTAdditiveExpression,Object Returns : Object} visit{ Params : ASTArrayDimsAndInits,Object Returns : Object} visit{ Params : ASTArrayInitializer,Object Returns : Object} visit{ Params : ASTAssignmentOperator,Object Returns : Object} visit{ Params : ASTBooleanLiteral,Object Returns : Object} visit{ Params : ASTBreakStatement,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTContinueStatement,Object Returns : Object} visit{ Params : ASTEqualityExpression,Object Returns : Object} visit{ Params : ASTExplicitConstructorInvocation,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTInitializer,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTLabeledStatement,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTMultiplicativeExpression,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTPostfixExpression,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} visit{ Params : ASTPrimitiveType,Object Returns : Object} visit{ Params : ASTRelationalExpression,Object Returns : Object} visit{ Params : ASTShiftExpression,Object Returns : Object} visit{ Params : ASTStatementExpression,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTUnaryExpression,Object Returns : Object} visit{ Params : ASTUnaryExpressionNotPlusMinus,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.parser.query,Found,1,1,0,0,0,false,0 ,0 ,0 ,root: Node index: int ,getIndex{ Params :  Returns : int} getRoot{ Params :  Returns : Node} ,,,,,,int ,,int ,
JRefactory,org.acm.seguin.parser.query,PackageNameGetter,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : File,String Returns : ASTName} query{ Params : SimpleNode Returns : ASTName} ,,query query ,,,,,,,File FileParserFactory 
JRefactory,org.acm.seguin.parser.query,Search,1,1,0,0,0,false,0 ,0 ,0 ,equalTree: EqualTree ,search{ Params : Node,Node Returns : Found} searchAtLevel{ Params : Node,Node,int Returns : Found} findAll{ Params : Node,Node,int Returns : boolean} specialCase{ Params : Node,Node,int Returns : boolean} ,,,,,,EqualTree ,,EqualTree ,EqualTree Found 
JRefactory,org.acm.seguin.parser,Token,1,1,0,0,0,false,0 ,0 ,0 ,kind: int beginLine: int image: String next: Token specialToken: Token ,toString{ Params :  Returns : String} newToken{ Params : int Returns : Token} ,,newToken ,toString ,,,,,,Token 
JRefactory,org.acm.seguin.parser,TokenMgrError,1,1,0,0,0,false,Error ,0 ,0 ,errorCode: int LEXICAL_ERROR: int STATIC_LEXER_ERROR: int INVALID_LEXICAL_STATE: int LOOP_DETECTED: int ,getMessage{ Params :  Returns : String} addEscapes{ Params : String Returns : String} LexicalError{ Params : boolean,int,int,int,String,char Returns : String} ,,addEscapes LexicalError ,,,,,,,StringBuffer 
JRefactory,org.acm.seguin.pretty.ai,MethodAnalyzer,1,1,0,0,0,false,0 ,0 ,0 ,node: ASTMethodDeclaration jdi: JavaDocableImpl ,finish{ Params : String Returns : void} isSetter{ Params :  Returns : boolean} isGetter{ Params :  Returns : boolean} isAdder{ Params :  Returns : boolean} isRunMethod{ Params :  Returns : boolean} isMainMethod{ Params :  Returns : boolean} isJUnitSetupMethod{ Params :  Returns : boolean} isJUnitTestMethod{ Params :  Returns : boolean} isJUnitTeardownMethod{ Params :  Returns : boolean} isJUnitSuiteMethod{ Params :  Returns : boolean} getName{ Params :  Returns : String} getAttributeName{ Params :  Returns : String} getParameterDescription{ Params : FileSettings,String Returns : String} getReturnDescription{ Params : FileSettings Returns : String} finishReturn{ Params : FileSettings Returns : void} finishParameters{ Params : FileSettings Returns : void} finishExceptions{ Params : FileSettings Returns : void} createDescription{ Params : String,String,String Returns : String} requireDescription{ Params : FileSettings,String Returns : void} lowerCaseFirstLetter{ Params : String Returns : String} ,,,,,,JavaDocableImpl ,,JavaDocableImpl ,
JRefactory,org.acm.seguin.pretty.ai,RequiredTags,1,1,0,0,0,false,0 ,0 ,0 ,arguments: Object tags: RequiredTags ,addTags{ Params : FileSettings,String,String,JavaDocableImpl Returns : void} add{ Params : FileSettings,String,String,JavaDocableImpl Returns : void} addNormalTag{ Params : FileSettings,String,String,JavaDocableImpl Returns : void} getTagger{ Params :  Returns : RequiredTags} ,,getTagger ,,,,,,,Date StringTokenizer RequiredTags 
JRefactory,org.acm.seguin.pretty,FieldSize,1,1,0,0,0,false,0 ,0 ,0 ,modifierLength: int typeLength: int nameLength: int equalsLength: int ,setModifierLength{ Params : int Returns : void} setTypeLength{ Params : int Returns : void} setNameLength{ Params : int Returns : void} setMinimumEquals{ Params : int Returns : void} getModifierLength{ Params :  Returns : int} getTypeLength{ Params :  Returns : int} getNameLength{ Params :  Returns : int} getEqualsLength{ Params :  Returns : int} update{ Params : int Returns : void} toString{ Params :  Returns : String} ,,,,,,int ,,int ,
JRefactory,org.acm.seguin.pretty,FieldSizeLookAhead,1,0,0,0,0,false,0 ,0 ,0 ,fieldSize: FieldSize code: int ,run{ Params : SimpleNode Returns : FieldSize} computeEqualsLength{ Params : ASTFieldDeclaration Returns : int} computeTypeLength{ Params : ASTFieldDeclaration Returns : int} isJavadocAttached{ Params : ASTFieldDeclaration Returns : boolean} getInitialToken{ Params : ASTType Returns : Token} computeNameLength{ Params : ASTFieldDeclaration Returns : int} computeModifierLength{ Params : ASTFieldDeclaration Returns : int} hasJavadoc{ Params : Token Returns : boolean} ,,,,,,int ,,int ,FieldSize 
JRefactory,org.acm.seguin.pretty,ForceJavadocComments,1,1,0,0,0,false,0 ,0 ,0 ,,isJavaDocRequired{ Params : String,ModifierHolder Returns : boolean} isAll{ Params : String Returns : boolean} isPackage{ Params : String,ModifierHolder Returns : boolean} isProtected{ Params : String,ModifierHolder Returns : boolean} isPublic{ Params : String,ModifierHolder Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.pretty,JavaDocable,2,1,0,0,0,true,0 ,0 ,0 ,,addJavaDocComponent{ Params : JavaDocComponent Returns : void} printJavaDocComponents{ Params : PrintData Returns : void} finish{ Params :  Returns : void} isRequired{ Params :  Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.pretty,JavaDocableImpl,1,1,0,0,0,false,0 ,JavaDocable ,0 ,docs: Vector printed: boolean ,isRequired{ Params :  Returns : boolean} isPrinted{ Params :  Returns : boolean} addJavaDocComponent{ Params : JavaDocComponent Returns : void} printJavaDocComponents{ Params : PrintData Returns : void} printJavaDocComponents{ Params : PrintData,String Returns : void} finish{ Params :  Returns : void} contains{ Params : String Returns : boolean} contains{ Params : String,String Returns : boolean} require{ Params : String,String Returns : void} require{ Params : String,String,String Returns : void} setLongest{ Params : int Returns : void} getLongest{ Params :  Returns : int} isDescription{ Params : JavaDocComponent Returns : boolean} isTagRequired{ Params : String Returns : boolean} isOnSingleLine{ Params : PrintData Returns : boolean} print{ Params : PrintData,String,boolean Returns : void} tagPass{ Params : String,PrintData,boolean Returns : void} printDescription{ Params : PrintData,boolean Returns : void} finalPass{ Params : PrintData Returns : void} printCurrentTag{ Params : JavaDocComponent,PrintData,boolean,boolean Returns : void} printSpaceAfterDescription{ Params : PrintData Returns : void} ,,,,,JavaDocable ,boolean ,,boolean ,Vector JavaDocComponent NamedJavaDocComponent StringTokenizer 
JRefactory,org.acm.seguin.pretty,JavaDocComponent,1,1,0,0,0,false,0 ,0 ,0 ,type: String description: String longestLength: int printed: boolean required: boolean ,setType{ Params : String Returns : void} setDescription{ Params : String Returns : void} setLongestLength{ Params : int Returns : void} setRequired{ Params : boolean Returns : void} getType{ Params :  Returns : String} getDescription{ Params :  Returns : String} getLongestLength{ Params :  Returns : int} isPrinted{ Params :  Returns : boolean} isRequired{ Params :  Returns : boolean} print{ Params : PrintData Returns : void} setPrinted{ Params : boolean Returns : void} printDescription{ Params : PrintData Returns : void} wordwrapDescription{ Params : PrintData,boolean Returns : void} leaveDescription{ Params : PrintData Returns : void} isDescription{ Params :  Returns : boolean} ,,,,,,boolean ,,boolean ,JavadocDescriptionPrinter StringBuffer StringTokenizer 
JRefactory,org.acm.seguin.pretty,JavadocDescriptionPrinter,1,1,0,0,0,false,0 ,0 ,0 ,printData: PrintData buffer: StringBuffer indent: int mode: int newline: boolean owedLines: int NORMAL: int PARA: int LIST: int END_LIST: int TABLE: int END_TAG: int LINE_BREAK: int PREFORMATTED: int ,run{ Params :  Returns : void} indent{ Params :  Returns : void} startMode{ Params : String Returns : boolean} endMode{ Params : String Returns : boolean} startsWith{ Params : String,String Returns : boolean} printToken{ Params : Token,int,int,boolean Returns : boolean} maintainCurrentFormat{ Params :  Returns : void} mcfOutputToken{ Params : Token,PrintData Returns : void} ,,,,,,,,,StringBuffer StringBuffer JavadocTokenizer JavadocTokenizer 
JRefactory,org.acm.seguin.pretty,JavadocTokenizer,1,1,0,0,0,false,0 ,0 ,0 ,value: String index: int buffer: StringBuffer last: int SPACE: int NEWLINE: int WORD: int ,hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Token} loadNewline{ Params :  Returns : void} loadSpace{ Params :  Returns : void} loadWord{ Params :  Returns : void} checkEnd{ Params : String Returns : String} hasContent{ Params : String Returns : boolean} ,,hasContent ,,,,,,,StringBuffer Token 
JRefactory,org.acm.seguin.pretty.line,LineNumberingData,1,1,0,0,0,false,PrintData ,0 ,0 ,,lineQueueFactory{ Params : PrintWriter Returns : LineQueue} ,,,,,,,,,NumberedLineQueue 
JRefactory,org.acm.seguin.pretty.line,NumberedLineQueue,1,0,0,0,0,false,LineQueue ,0 ,0 ,,writeln{ Params : String Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.pretty,LineQueue,1,1,0,0,0,false,0 ,0 ,0 ,lineNumber: int list: Vector output: PrintWriter absoluteSpace: int incrementalSpace: int ownline: boolean sharedIncremental: boolean ownlineCode: boolean buffer: StringBuffer endOfLine: String ,setAbsoluteCommentSpacing{ Params : int Returns : void} setIncrementalCommentSpacing{ Params : int Returns : void} setOwnline{ Params : boolean Returns : void} setSharedIncremental{ Params : boolean Returns : void} setOwnlineCode{ Params : boolean Returns : void} getCurrentLine{ Params :  Returns : int} println{ Params : String Returns : void} appendSingleLineComment{ Params : String,String Returns : void} appendCategoryComment{ Params : String,String Returns : void} flushFirstLine{ Params :  Returns : void} flush{ Params :  Returns : void} getOutput{ Params :  Returns : PrintWriter} writeln{ Params : String Returns : void} updateLine{ Params : String,String Returns : void} makeLine{ Params : String,String Returns : String} ,,,,,,String ,,String ,Vector StringBuffer StringBuffer StringBuffer StringBuffer 
JRefactory,org.acm.seguin.pretty,LocalVariableLookAhead,1,0,0,0,0,false,0 ,0 ,0 ,size: FieldSize ,run{ Params : SimpleNode Returns : FieldSize} computeEqualsLength{ Params : ASTLocalVariableDeclaration Returns : int} computeTypeLength{ Params : SimpleNode Returns : int} computeModifierLength{ Params : ASTLocalVariableDeclaration Returns : int} computeNameLength{ Params : ASTLocalVariableDeclaration Returns : int} ,,,,,,FieldSize ,,FieldSize ,FieldSize 
JRefactory,org.acm.seguin.pretty,ModifierHolder,1,1,0,0,0,false,0 ,Serializable ,0 ,modifiers: int ABSTRACT: int EXPLICIT: int FINAL: int INTERFACE: int NATIVE: int PRIVATE: int PROTECTED: int PUBLIC: int STATIC: int STRICT: int SYNCHRONIZED: int TRANSIENT: int VOLATILE: int STRICTFP: int names: String ,setPrivate{ Params : boolean Returns : void} setProtected{ Params : boolean Returns : void} setPublic{ Params : boolean Returns : void} setAbstract{ Params : boolean Returns : void} setSynchronized{ Params : boolean Returns : void} setStatic{ Params : boolean Returns : void} isAbstract{ Params :  Returns : boolean} isExplicit{ Params :  Returns : boolean} isFinal{ Params :  Returns : boolean} isInterface{ Params :  Returns : boolean} isNative{ Params :  Returns : boolean} isPrivate{ Params :  Returns : boolean} isProtected{ Params :  Returns : boolean} isPublic{ Params :  Returns : boolean} isStatic{ Params :  Returns : boolean} isStrict{ Params :  Returns : boolean} isStrictFP{ Params :  Returns : boolean} isSynchronized{ Params :  Returns : boolean} isTransient{ Params :  Returns : boolean} isVolatile{ Params :  Returns : boolean} isPackage{ Params :  Returns : boolean} add{ Params : String Returns : void} toString{ Params :  Returns : String} copy{ Params : ModifierHolder Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} setCode{ Params : boolean,int Returns : void} ,,,,,Serializable ,,,,StringBuffer 
JRefactory,org.acm.seguin.pretty,NamedJavaDocComponent,1,1,0,0,0,false,JavaDocComponent ,0 ,0 ,id: String ,setID{ Params : String Returns : void} getID{ Params :  Returns : String} print{ Params : PrintData Returns : void} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.pretty,PrettyPrintFile,1,1,0,0,0,false,0 ,0 ,0 ,factory: ParserFactory ask: boolean ,setAsk{ Params : boolean Returns : void} setParserFactory{ Params : ParserFactory Returns : void} isApplicable{ Params : File Returns : boolean} getParserFactory{ Params :  Returns : ParserFactory} apply{ Params : File Returns : void} apply{ Params : File,SimpleNode Returns : void} getOutputStream{ Params : File Returns : OutputStream} getPrintData{ Params : File Returns : PrintData} ,,,,,,boolean ,,boolean ,FileParserFactory PrettyPrintVisitor InplaceOutputStream PrintData 
JRefactory,org.acm.seguin.pretty,PrettyPrintFromIDE,1,1,1,0,0,false,PrettyPrintString ,0 ,0 ,data: PrintData ,prettyPrintCurrentWindow{ Params :  Returns : void} setStringInIDE{ Params : String Returns : void} setLineNumber{ Params : int Returns : void} getStringFromIDE{ Params :  Returns : String} getPrintData{ Params : File Returns : PrintData} getLineNumber{ Params :  Returns : int} displayErrorMessage{ Params :  Returns : void} ,,,,setStringInIDE setLineNumber getStringFromIDE getLineNumber ,,PrintData ,,PrintData ,RefactoryInstaller 
JRefactory,org.acm.seguin.pretty,PrettyPrintString,1,0,1,0,0,false,PrettyPrintFile ,0 ,0 ,outputStream: ByteArrayOutputStream ,setInputString{ Params : String Returns : void} getOutputBuffer{ Params :  Returns : String} getOutputStream{ Params : File Returns : OutputStream} resetOutputBuffer{ Params :  Returns : void} ,,,,,,ByteArrayOutputStream ,,ByteArrayOutputStream ,ByteArrayOutputStream BufferParserFactory String 
JRefactory,org.acm.seguin.pretty,PrettyPrintVisitor,1,1,0,0,0,false,0 ,JavaParserVisitor ,0 ,specialTokenVisitor: SpecialTokenVisitor fsla: FieldSizeLookAhead lvla: LocalVariableLookAhead ,visit{ Params : SimpleNode,Object Returns : Object} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTClassBody,Object,boolean Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBodyDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarationLookahead,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} visit{ Params : ASTInterfaceMemberDeclaration,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTVariableDeclarator,Object Returns : Object} visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} visit{ Params : ASTVariableInitializer,Object Returns : Object} visit{ Params : ASTArrayInitializer,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTFormalParameters,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTExplicitConstructorInvocation,Object Returns : Object} visit{ Params : ASTInitializer,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTPrimitiveType,Object Returns : Object} visit{ Params : ASTResultType,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} visit{ Params : ASTNameList,Object Returns : Object} visit{ Params : ASTExpression,Object Returns : Object} visit{ Params : ASTAssignmentOperator,Object Returns : Object} visit{ Params : ASTConditionalExpression,Object Returns : Object} visit{ Params : ASTConditionalOrExpression,Object Returns : Object} visit{ Params : ASTConditionalAndExpression,Object Returns : Object} visit{ Params : ASTInclusiveOrExpression,Object Returns : Object} visit{ Params : ASTExclusiveOrExpression,Object Returns : Object} visit{ Params : ASTAndExpression,Object Returns : Object} visit{ Params : ASTEqualityExpression,Object Returns : Object} visit{ Params : ASTInstanceOfExpression,Object Returns : Object} visit{ Params : ASTRelationalExpression,Object Returns : Object} visit{ Params : ASTShiftExpression,Object Returns : Object} visit{ Params : ASTAdditiveExpression,Object Returns : Object} visit{ Params : ASTMultiplicativeExpression,Object Returns : Object} visit{ Params : ASTUnaryExpression,Object Returns : Object} visit{ Params : ASTPreIncrementExpression,Object Returns : Object} visit{ Params : ASTPreDecrementExpression,Object Returns : Object} visit{ Params : ASTUnaryExpressionNotPlusMinus,Object Returns : Object} visit{ Params : ASTCastLookahead,Object Returns : Object} visit{ Params : ASTPostfixExpression,Object Returns : Object} visit{ Params : ASTCastExpression,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} visit{ Params : ASTBooleanLiteral,Object Returns : Object} visit{ Params : ASTNullLiteral,Object Returns : Object} visit{ Params : ASTArguments,Object Returns : Object} visit{ Params : ASTArgumentList,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} visit{ Params : ASTArrayDimsAndInits,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTLabeledStatement,Object Returns : Object} visit{ Params : ASTBlock,Object Returns : Object} visit{ Params : ASTBlockStatement,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTEmptyStatement,Object Returns : Object} visit{ Params : ASTStatementExpression,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTSwitchLabel,Object Returns : Object} visit{ Params : ASTIfStatement,Object Returns : Object} isShouldIndentBeforeElse{ Params : PrintData,ASTIfStatement Returns : boolean} visit{ Params : ASTWhileStatement,Object Returns : Object} visit{ Params : ASTDoStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTForInit,Object Returns : Object} visit{ Params : ASTStatementExpressionList,Object Returns : Object} visit{ Params : ASTForUpdate,Object Returns : Object} visit{ Params : ASTBreakStatement,Object Returns : Object} visit{ Params : ASTContinueStatement,Object Returns : Object} visit{ Params : ASTReturnStatement,Object Returns : Object} visit{ Params : ASTThrowStatement,Object Returns : Object} visit{ Params : ASTSynchronizedStatement,Object Returns : Object} visit{ Params : ASTTryStatement,Object Returns : Object} binaryExpression{ Params : SimpleNode,String,Object Returns : Object} binaryExpression{ Params : SimpleNode,Enumeration,Object Returns : Object} forceBlock{ Params : Node,PrintData Returns : void} forceBlock{ Params : Node,PrintData,boolean Returns : void} forInit{ Params : ASTLocalVariableDeclaration,Object Returns : void} getInitialToken{ Params : ASTResultType Returns : Token} getInitialToken{ Params : ASTType Returns : Token} isInAnonymousClass{ Params : Node Returns : boolean} isInInnerClass{ Params : Node Returns : boolean} isJavadocRequired{ Params : SimpleNode,PrintData Returns : boolean} isInnerClass{ Params : Node Returns : boolean} standardFieldIndent{ Params : PrintData Returns : void} shouldIndentSwitchBody{ Params : Node Returns : boolean} blockProcess{ Params : ASTBlock,PrintData,boolean Returns : void} blockProcess{ Params : ASTBlock,PrintData,boolean,boolean Returns : void} loadHeader{ Params : ASTCompilationUnit,PrintData Returns : void} loadFooter{ Params : PrintData Returns : boolean} ,,,,,JavaParserVisitor ,LocalVariableLookAhead ,,LocalVariableLookAhead ,SpecialTokenVisitor FieldSizeLookAhead LocalVariableLookAhead SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData FieldSizeLookAhead SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData LocalVariableLookAhead SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData LocalVariableLookAhead SpecialTokenData SpecialTokenData SpecialTokenData SpecialTokenData LocalVariableLookAhead SpecialTokenData SpecialTokenData 
JRefactory,org.acm.seguin.pretty,PrintData,1,1,0,0,0,false,0 ,0 ,0 ,finalLine: int indent: int lineQueue: LineQueue outputBuffer: StringBuffer newlineCount: int last: int INDENT: int indentChar: char BLOCK_STYLE_C: int BLOCK_STYLE_PASCAL: int BLOCK_STYLE_EMACS: int codeBlockStyle: int methodBlockStyle: int classBlockStyle: int isMethodBrace: boolean lineUpParams: boolean inParams: boolean lastParamIndent: int exprSpace: boolean linesBetween: int javadocMinimum: int javadocMaximum: int spaceAfterCast: boolean spaceAfterKeyword: boolean javadocStars: int bundle: FileSettings morder: MultipleOrdering classNameStack: Vector surpriseType: int fieldNameIndent: int keepAllJavadoc: boolean reformatComments: boolean originalLine: int fieldStack: Vector fieldSpaceCode: int dynamicFieldSpace: int storeJavadocPrinted: boolean skipNameSpacing: boolean tempEqualsLength: int cStyleFormatCode: int cStyleIndent: int forceBlock: boolean isClassBrace: boolean emptyBlockOnSingleLine: boolean castSpace: boolean documentNestedClasses: boolean EMPTY: int METHOD: int FIELD: int INTERFACE: int CLASS: int SINGLE_INDENT: int DOUBLE_INDENT: int PARAM_INDENT: int JAVADOC_COMMENT: int C_STYLE_COMMENT: int CATEGORY_COMMENT: int SINGLE_LINE_COMMENT: int DFS_NEVER: int DFS_ALWAYS: int DFS_NOT_WITH_JAVADOC: int DFS_ALIGN_EQUALS: int CSC_LEAVE_UNTOUCHED: int CSC_ALIGN_STAR: int CSC_ALIGN_BLANK: int CSC_MAINTAIN_STAR: int elseOnNewLine: boolean allowSingleLineJavadoc: boolean currentIsSingle: boolean variablesAlignWithBlock: boolean ,setOutput{ Params : PrintWriter Returns : void} setState{ Params : int Returns : void} setParamIndent{ Params :  Returns : void} setReformatComments{ Params : boolean Returns : void} setAbsoluteCommentSpacing{ Params : int Returns : void} setIncrementalCommentSpacing{ Params : int Returns : void} setOriginalLine{ Params : int Returns : void} setFinalLine{ Params : int Returns : void} setOwnline{ Params : boolean Returns : void} setSharedIncr{ Params : boolean Returns : void} setOwnlineCode{ Params : boolean Returns : void} setDynamicFieldSpacing{ Params : int Returns : void} setDynamicFieldSpaces{ Params : int Returns : void} setCStyleFormatCode{ Params : int Returns : void} setCStyleIndent{ Params : int Returns : void} setForceBlock{ Params : boolean Returns : void} setClassBlockStyle{ Params : int Returns : void} setMethodBlockStyle{ Params : int Returns : void} setCodeBlockStyle{ Params : int Returns : void} setEmptyBlockOnSingleLine{ Params : boolean Returns : void} setCastSpace{ Params : boolean Returns : void} setExpressionSpace{ Params : boolean Returns : void} setDocumentNestedClasses{ Params : boolean Returns : void} setMultipleOrdering{ Params : MultipleOrdering Returns : void} isAllJavadocKept{ Params :  Returns : boolean} getIndentString{ Params :  Returns : String} isBufferEmpty{ Params :  Returns : boolean} isLineIndented{ Params :  Returns : boolean} getState{ Params :  Returns : int} getLineLength{ Params :  Returns : int} getOrder{ Params :  Returns : MultipleOrdering} getCurrentClassName{ Params :  Returns : String} getSettings{ Params :  Returns : Settings} getJavadocWordWrapMinimum{ Params :  Returns : int} getJavadocWordWrapMaximum{ Params :  Returns : int} isSpaceAfterCast{ Params :  Returns : boolean} isSpaceAfterKeyword{ Params :  Returns : boolean} getJavadocStarCount{ Params :  Returns : int} isJavadocLinedUp{ Params :  Returns : boolean} getJavadocIndent{ Params :  Returns : int} isSpaceBeforeAt{ Params :  Returns : boolean} getTopOrder{ Params :  Returns : Comparator} isCatchOnNewLine{ Params :  Returns : boolean} isElseOnNewLine{ Params :  Returns : boolean} setElseOnNewLine{ Params : boolean Returns : void} getParamIndent{ Params :  Returns : int} getSurpriseReturn{ Params :  Returns : int} isThrowsOnNewline{ Params :  Returns : boolean} isReformatComments{ Params :  Returns : boolean} getFieldNameIndent{ Params :  Returns : int} isFieldNameIndented{ Params :  Returns : boolean} getOriginalLine{ Params :  Returns : int} getFinalLine{ Params :  Returns : int} isDynamicFieldSpacing{ Params : boolean Returns : boolean} getFieldSpaceCode{ Params :  Returns : int} getDynamicFieldSpaces{ Params :  Returns : int} getCStyleFormatCode{ Params :  Returns : int} getCStyleIndent{ Params :  Returns : int} isForcingBlock{ Params :  Returns : boolean} getEmptyBlockOnSingleLine{ Params :  Returns : boolean} isCastSpace{ Params :  Returns : boolean} isNestedClassDocumented{ Params :  Returns : boolean} enterMethodDecl{ Params :  Returns : void} exitMethodDecl{ Params :  Returns : void} indentParam{ Params :  Returns : void} methodBrace{ Params :  Returns : void} classBrace{ Params :  Returns : void} incrIndent{ Params :  Returns : void} decrIndent{ Params :  Returns : void} appendKeyword{ Params : String Returns : void} appendText{ Params : String Returns : void} appendConstant{ Params : String Returns : void} appendComment{ Params : String,int Returns : void} space{ Params :  Returns : void} backspace{ Params :  Returns : void} newline{ Params :  Returns : void} consumeNewline{ Params :  Returns : boolean} beginBlock{ Params :  Returns : void} beginBlock{ Params : boolean Returns : void} endBlock{ Params : boolean Returns : void} endBlock{ Params :  Returns : void} beginExpression{ Params : boolean Returns : void} endExpression{ Params : boolean Returns : void} beginMethod{ Params :  Returns : void} endMethod{ Params :  Returns : void} beginField{ Params :  Returns : void} endField{ Params :  Returns : void} beginInterface{ Params :  Returns : void} endInterface{ Params :  Returns : void} beginClass{ Params :  Returns : void} endClass{ Params :  Returns : void} indent{ Params :  Returns : void} reset{ Params :  Returns : void} flush{ Params :  Returns : void} close{ Params :  Returns : void} pushCurrentClassName{ Params : String Returns : void} popCurrentClassName{ Params :  Returns : void} saveCurrentLine{ Params :  Returns : void} pushFieldSize{ Params : FieldSize Returns : void} topFieldSize{ Params :  Returns : FieldSize} popFieldSize{ Params :  Returns : void} incrIndent{ Params : int Returns : void} lineQueueFactory{ Params : PrintWriter Returns : LineQueue} setAllJavadocKept{ Params : boolean Returns : void} setStoreJavadocPrinted{ Params : boolean Returns : void} setSkipNameSpacing{ Params : boolean Returns : void} setTempEqualsLength{ Params : int Returns : void} isStoreJavadocPrinted{ Params :  Returns : boolean} getSkipNameSpacing{ Params :  Returns : boolean} getTempEqualsLength{ Params :  Returns : int} getCurrentBlockStyle{ Params :  Returns : int} append{ Params : String Returns : void} translateBlockStyle{ Params : String Returns : int} setSingleLineJavadoc{ Params : boolean Returns : void} isAllowSingleLineJavadoc{ Params :  Returns : boolean} setCurrentIsSingle{ Params : boolean Returns : void} isCurrentSingle{ Params :  Returns : boolean} setVariablesAlignWithBlock{ Params : boolean Returns : void} isVariablesAlignWithBlock{ Params :  Returns : boolean} ,,,,,,boolean ,,boolean ,PrintWriter OutputStreamWriter StringBuffer Boolean Boolean MultipleOrdering Vector Vector Vector StringBuffer TopLevelOrdering SameOrdering LineQueue 
JRefactory,org.acm.seguin.pretty,PrintSpecial,1,1,1,0,0,false,0 ,0 ,0 ,,isAcceptable{ Params : SpecialTokenData Returns : boolean} process{ Params : Node,SpecialTokenData Returns : boolean} ,,,,isAcceptable process ,,,,,
JRefactory,org.acm.seguin.pretty,PrintSpecialCategoryComment,1,1,0,0,0,false,PrintSpecial ,0 ,0 ,,isAcceptable{ Params : SpecialTokenData Returns : boolean} process{ Params : Node,SpecialTokenData Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.pretty,PrintSpecialDefault,1,1,0,0,0,false,PrintSpecial ,0 ,0 ,,isAcceptable{ Params : SpecialTokenData Returns : boolean} process{ Params : Node,SpecialTokenData Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.pretty,PrintSpecialJavadocComment,1,1,0,0,0,false,PrintSpecial ,0 ,0 ,,isAcceptable{ Params : SpecialTokenData Returns : boolean} process{ Params : Node,SpecialTokenData Returns : boolean} createJavaDocComponent{ Params : String,JavadocTokenizer Returns : JavaDocComponent} storeJDCinNode{ Params : JavaDocable,JavaDocComponent,StringBuffer Returns : void} ,,,,,,,,,JavaDocableImpl JavaDocComponent StringBuffer JavadocTokenizer NamedJavaDocComponent NamedJavaDocComponent 
JRefactory,org.acm.seguin.pretty,PrintSpecialMultiLineComment,1,1,0,0,0,false,PrintSpecial ,0 ,0 ,,isAcceptable{ Params : SpecialTokenData Returns : boolean} process{ Params : Node,SpecialTokenData Returns : boolean} cleanFormat{ Params : PrintData,String,int,boolean Returns : void} startNewline{ Params : PrintData,boolean,int Returns : void} transcribe{ Params : PrintData,String Returns : void} ,,,,,,,,,JavadocTokenizer StringTokenizer 
JRefactory,org.acm.seguin.pretty,PrintSpecialNewline,1,1,0,0,0,false,PrintSpecial ,0 ,0 ,,isAcceptable{ Params : SpecialTokenData Returns : boolean} process{ Params : Node,SpecialTokenData Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.pretty,PrintSpecialSingleLineComment,1,1,0,0,0,false,PrintSpecial ,0 ,0 ,,isAcceptable{ Params : SpecialTokenData Returns : boolean} process{ Params : Node,SpecialTokenData Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.pretty.sort,FieldInitializerOrder,1,1,0,0,0,false,Ordering ,0 ,0 ,,compare{ Params : Object,Object Returns : int} getIndex{ Params : Object Returns : int} ,,,,,,,,,
JRefactory,org.acm.seguin.pretty.sort,MultipleOrdering,1,1,0,0,0,false,0 ,Comparator ,0 ,ordering: Ordering ,compare{ Params : Object,Object Returns : int} load{ Params : Settings Returns : void} parse{ Params : String Returns : Ordering} ,,,,,Comparator ,Ordering[] ,,Ordering[] ,StringTokenizer TypeOrder StaticOrder ProtectionOrder SetterGetterOrder FieldInitializerOrder 
JRefactory,org.acm.seguin.pretty.sort,Ordering,1,1,1,0,0,false,0 ,Comparator ,0 ,,compare{ Params : Object,Object Returns : int} getIndex{ Params : Object Returns : int} ,,,,getIndex ,Comparator ,,,,
JRefactory,org.acm.seguin.pretty.sort,ProtectionOrder,1,1,0,0,0,false,Ordering ,0 ,0 ,publicFirst: boolean PUBLIC: int PROTECTED: int PACKAGE: int PRIVATE: int ,getIndex{ Params : Object Returns : int} getProtection{ Params : ModifierHolder Returns : int} ,,,,,,,,,
JRefactory,org.acm.seguin.pretty.sort,SameOrdering,1,1,0,0,0,false,Ordering ,0 ,0 ,,getIndex{ Params : Object Returns : int} ,,,,,,,,,
JRefactory,org.acm.seguin.pretty.sort,SetterGetterOrder,1,1,0,0,0,false,Ordering ,0 ,0 ,order: int SETTER: int GETTER: int OTHER: int ,getIndex{ Params : Object Returns : int} getCode{ Params : String Returns : int} findCode{ Params : int Returns : int} ,,,,,,,,,StringTokenizer 
JRefactory,org.acm.seguin.pretty.sort,StaticOrder,1,1,0,0,0,false,Ordering ,0 ,0 ,staticFirst: boolean ,getIndex{ Params : Object Returns : int} ,,,,,,boolean ,,boolean ,
JRefactory,org.acm.seguin.pretty.sort,TopLevelOrdering,1,1,0,0,0,false,Ordering ,0 ,0 ,,compare{ Params : Object,Object Returns : int} getIndex{ Params : Object Returns : int} fineCompare{ Params : Object,Object Returns : int} compareImports{ Params : ASTImportDeclaration,ASTImportDeclaration Returns : int} ,,,,,,,,,
JRefactory,org.acm.seguin.pretty.sort,TypeOrder,1,1,0,0,0,false,Ordering ,0 ,0 ,order: Class usingMain: boolean ,getIndex{ Params : Object Returns : int} isMatch{ Params : Object,Class,Class Returns : boolean} ,,,,,,boolean ,,boolean ,StringTokenizer 
JRefactory,org.acm.seguin.pretty,SpecialTokenData,1,1,0,0,0,false,0 ,0 ,0 ,data: PrintData special: Token lastReturnExpected: boolean acceptNewlines: boolean setAcceptingNewlines: boolean reformatComments: boolean ,setReturnExpected{ Params : boolean Returns : void} isLast{ Params :  Returns : boolean} isFirst{ Params :  Returns : boolean} getPrintData{ Params :  Returns : PrintData} getSpecialToken{ Params :  Returns : Token} getTokenType{ Params :  Returns : int} getTokenImage{ Params :  Returns : String} isReturnExpected{ Params :  Returns : boolean} isAcceptingReturns{ Params :  Returns : boolean} isReformattingComments{ Params :  Returns : boolean} beginning{ Params : Token Returns : Token} next{ Params :  Returns : void} ,,,,,,boolean ,,boolean ,
JRefactory,org.acm.seguin.pretty,SpecialTokenVisitor,1,1,0,0,0,false,0 ,JavaParserVisitor ,0 ,chain: Vector ,visit{ Params : SimpleNode,Object Returns : Object} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBodyDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarationLookahead,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} visit{ Params : ASTInterfaceMemberDeclaration,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTVariableDeclarator,Object Returns : Object} visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} visit{ Params : ASTVariableInitializer,Object Returns : Object} visit{ Params : ASTArrayInitializer,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTFormalParameters,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTExplicitConstructorInvocation,Object Returns : Object} visit{ Params : ASTInitializer,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTPrimitiveType,Object Returns : Object} visit{ Params : ASTResultType,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} visit{ Params : ASTNameList,Object Returns : Object} visit{ Params : ASTExpression,Object Returns : Object} visit{ Params : ASTAssignmentOperator,Object Returns : Object} visit{ Params : ASTConditionalExpression,Object Returns : Object} visit{ Params : ASTConditionalOrExpression,Object Returns : Object} visit{ Params : ASTConditionalAndExpression,Object Returns : Object} visit{ Params : ASTInclusiveOrExpression,Object Returns : Object} visit{ Params : ASTExclusiveOrExpression,Object Returns : Object} visit{ Params : ASTAndExpression,Object Returns : Object} visit{ Params : ASTEqualityExpression,Object Returns : Object} visit{ Params : ASTInstanceOfExpression,Object Returns : Object} visit{ Params : ASTRelationalExpression,Object Returns : Object} visit{ Params : ASTShiftExpression,Object Returns : Object} visit{ Params : ASTAdditiveExpression,Object Returns : Object} visit{ Params : ASTMultiplicativeExpression,Object Returns : Object} visit{ Params : ASTUnaryExpression,Object Returns : Object} visit{ Params : ASTPreIncrementExpression,Object Returns : Object} visit{ Params : ASTPreDecrementExpression,Object Returns : Object} visit{ Params : ASTUnaryExpressionNotPlusMinus,Object Returns : Object} visit{ Params : ASTCastLookahead,Object Returns : Object} visit{ Params : ASTPostfixExpression,Object Returns : Object} visit{ Params : ASTCastExpression,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} visit{ Params : ASTBooleanLiteral,Object Returns : Object} visit{ Params : ASTNullLiteral,Object Returns : Object} visit{ Params : ASTArguments,Object Returns : Object} visit{ Params : ASTArgumentList,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} visit{ Params : ASTArrayDimsAndInits,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTLabeledStatement,Object Returns : Object} visit{ Params : ASTBlock,Object Returns : Object} visit{ Params : ASTBlockStatement,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTEmptyStatement,Object Returns : Object} visit{ Params : ASTStatementExpression,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTSwitchLabel,Object Returns : Object} visit{ Params : ASTIfStatement,Object Returns : Object} visit{ Params : ASTWhileStatement,Object Returns : Object} visit{ Params : ASTDoStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTForInit,Object Returns : Object} visit{ Params : ASTStatementExpressionList,Object Returns : Object} visit{ Params : ASTForUpdate,Object Returns : Object} visit{ Params : ASTBreakStatement,Object Returns : Object} visit{ Params : ASTContinueStatement,Object Returns : Object} visit{ Params : ASTReturnStatement,Object Returns : Object} visit{ Params : ASTThrowStatement,Object Returns : Object} visit{ Params : ASTSynchronizedStatement,Object Returns : Object} visit{ Params : ASTTryStatement,Object Returns : Object} processSpecialToken{ Params : Node,Object Returns : Object} checkLocation{ Params : Token,PrintData Returns : void} surpriseIndent{ Params : PrintData Returns : void} ,,surpriseIndent ,,,JavaParserVisitor ,Vector ,,Vector ,Vector PrintSpecialDefault PrintSpecialNewline PrintSpecialSingleLineComment PrintSpecialMultiLineComment PrintSpecialJavadocComment PrintSpecialCategoryComment 
JRefactory,org.acm.seguin.print,PagePrinter,1,1,1,0,0,false,0 ,Printable ,0 ,filenameFontSize: int datePageFontSize: int headerHeight: int pf: PageFormat scale: double ,setFilenameFontSize{ Params : int Returns : void} setDatePageCountFontSize{ Params : int Returns : void} printHeader{ Params : Graphics,String,String,String Returns : void} setHeaderHeight{ Params : int Returns : void} getPageFormat{ Params : boolean Returns : PageFormat} getPageWidth{ Params :  Returns : int} getPageHeight{ Params :  Returns : int} setScale{ Params : double Returns : void} getScale{ Params :  Returns : double} ,,setHeaderHeight getPageFormat getPageWidth getPageHeight setScale getScale ,,,Printable ,,,,Font Font Date 
JRefactory,org.acm.seguin.print,PrintingSettings,1,1,0,0,0,false,0 ,0 ,0 ,textFontSize: int textSpace: int headerBlock: int filenameFont: int dateFont: int linesPerPage: int ,setTextFontSize{ Params : int Returns : void} setTextSpace{ Params : int Returns : void} setHeaderBlockHeight{ Params : int Returns : void} setFilenameFontSize{ Params : int Returns : void} setDateFontSize{ Params : int Returns : void} setLinesPerPage{ Params : int Returns : void} getTextFontSize{ Params :  Returns : int} getTextSpace{ Params :  Returns : int} getHeaderBlockHeight{ Params :  Returns : int} getFilenameFontSize{ Params :  Returns : int} getDateFontSize{ Params :  Returns : int} getLinesPerPage{ Params :  Returns : int} save{ Params :  Returns : void} defaults{ Params :  Returns : void} init{ Params :  Returns : void} write{ Params : PrintWriter Returns : void} ,,,,,,int ,,int ,File FileWriter PrintWriter 
JRefactory,org.acm.seguin.print.text,LinePrinter,1,1,0,0,0,false,0 ,0 ,0 ,fontSize: int font: Font ,setFontSize{ Params : int Returns : void} getLineHeight{ Params : Graphics Returns : int} init{ Params : Graphics Returns : void} print{ Params : Graphics,String,int,int,LineSet,int Returns : void} ,,,,,,Font ,,Font ,Font 
JRefactory,org.acm.seguin.print.text,LineSet,1,1,0,0,0,false,0 ,0 ,0 ,set: ArrayList TAB_SIZE: int ,getLine{ Params : int Returns : String} size{ Params :  Returns : int} breakLine{ Params : String Returns : void} expandTabs{ Params : String Returns : String} ,,,,,,,,,ArrayList StringBuffer 
JRefactory,org.acm.seguin.print.text,NumberedLinePrinter,1,1,0,0,0,false,LinePrinter ,0 ,0 ,,print{ Params : Graphics,String,int,int,LineSet,int Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.print.text,PrintingThread,1,1,0,0,0,false,Thread ,0 ,0 ,data: String printer: LinePrinter filename: String ,run{ Params :  Returns : void} loadDefaults{ Params : TextPagePrinter Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,String ,,String ,Book TextPagePrinter FileReader BufferedReader StringBuffer PrintingThread LinePrinter 
JRefactory,org.acm.seguin.print.text,PropertyLinePrinter,1,1,0,0,0,false,LinePrinter ,0 ,0 ,lineNo: Font normal: Font keyword: Font comment: Font ,setFontSize{ Params : int Returns : void} init{ Params : Graphics Returns : void} print{ Params : Graphics,String,int,int,LineSet,int Returns : void} ,,,,,,Font ,,Font ,Font Font Font Font 
JRefactory,org.acm.seguin.print.text,TextPagePrinter,1,1,0,0,0,false,PagePrinter ,0 ,0 ,filename: String lineSet: LineSet linePrinter: LinePrinter textFontSize: int textSkip: int linesPerPage: int ,setTextFontSize{ Params : int Returns : void} setBetweenLineSpacing{ Params : int Returns : void} calculatePageCount{ Params : PageFormat Returns : int} print{ Params : Graphics,PageFormat,int Returns : int} ,,,,,,,,,LineSet PrintingSettings PrintingSettings 
JRefactory,org.acm.seguin.print.xml,AttributeState,1,1,0,0,0,false,State ,0 ,0 ,state: State ,getFont{ Params :  Returns : Font} processLine{ Params : String,int,StringBuffer Returns : State} getState{ Params :  Returns : State} ,,getState ,,,,,,,Font AttributeState 
JRefactory,org.acm.seguin.print.xml,AttributeValueState,1,1,0,0,0,false,State ,0 ,0 ,state: State ,getFont{ Params :  Returns : Font} processLine{ Params : String,int,StringBuffer Returns : State} getState{ Params :  Returns : State} ,,getState ,,,,,,,Font AttributeValueState 
JRefactory,org.acm.seguin.print.xml,QuoteAttributeValueState,1,1,0,0,0,false,State ,0 ,0 ,state: State ,getFont{ Params :  Returns : Font} processLine{ Params : String,int,StringBuffer Returns : State} getState{ Params :  Returns : State} ,,getState ,,,,,,,Font QuoteAttributeValueState 
JRefactory,org.acm.seguin.print.xml,State,1,1,1,0,0,false,0 ,0 ,0 ,font: Font color: Color g: Graphics x: int y: int fontSize: int ,setFontSize{ Params : int Returns : void} setGraphics{ Params : Graphics Returns : void} setX{ Params : int Returns : void} setY{ Params : int Returns : void} getFontSize{ Params :  Returns : int} getFont{ Params :  Returns : Font} getGraphics{ Params :  Returns : Graphics} getX{ Params :  Returns : int} getY{ Params :  Returns : int} processLine{ Params : String Returns : State} processLine{ Params : String,int,StringBuffer Returns : State} initState{ Params : State Returns : void} print{ Params : StringBuffer Returns : void} ,,,,getFont processLine ,,int ,,int ,StringBuffer 
JRefactory,org.acm.seguin.print.xml,TagState,1,1,0,0,0,false,State ,0 ,0 ,state: State ,getFont{ Params :  Returns : Font} processLine{ Params : String,int,StringBuffer Returns : State} getState{ Params :  Returns : State} ,,getState ,,,,,,,Font TagState 
JRefactory,org.acm.seguin.print.xml,TextState,1,1,0,0,0,false,State ,0 ,0 ,state: State ,getFont{ Params :  Returns : Font} processLine{ Params : String,int,StringBuffer Returns : State} getState{ Params :  Returns : State} ,,getState ,,,,,,,Font TextState 
JRefactory,org.acm.seguin.print.xml,XMLLinePrinter,1,1,0,0,0,false,LinePrinter ,0 ,0 ,list: ArrayList fontSize: int lineNo: Font ,setFontSize{ Params : int Returns : void} getLineHeight{ Params : Graphics Returns : int} print{ Params : Graphics,String,int,int,LineSet,int Returns : void} ,,,,,,Font ,,Font ,ArrayList Font 
JRefactory,org.acm.seguin.refactor,AddImportTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,name: ASTName ignorePackageName: boolean ,setIgnorePackageName{ Params : boolean Returns : void} update{ Params : SimpleNode Returns : void} findLastImport{ Params : SimpleNode Returns : int} ,,,,,,boolean ,,boolean ,ASTImportDeclaration 
JRefactory,org.acm.seguin.refactor,ComplexTransform,1,1,0,0,0,false,0 ,0 ,0 ,transforms: ArrayList undo: UndoAction ,add{ Params : TransformAST Returns : void} clear{ Params :  Returns : void} hasAnyChanges{ Params :  Returns : boolean} apply{ Params : File,File Returns : void} createFile{ Params : File Returns : void} removeFile{ Params : File Returns : void} createParent{ Params : File Returns : void} checkOut{ Params : File Returns : void} ,,,,,,UndoAction ,,UndoAction ,ArrayList FileParserFactory PrettyPrintFile 
JRefactory,org.acm.seguin.refactor,EliminatePackageImportVisitor,1,1,0,0,0,false,TypeChangeVisitor ,0 ,0 ,packageSummary: PackageSummary filterList: LinkedList ,setPackageSummary{ Params : PackageSummary Returns : void} addFilterClass{ Params : String Returns : void} getFileSpecificTransform{ Params : FileSummary Returns : TransformAST} getNewImports{ Params : FileSummary,String Returns : AddImportTransform} getRemoveImportTransform{ Params : ImportSummary Returns : RemoveImportTransform} getAppropriateClasses{ Params : FileSummary Returns : LinkedList} getNewFile{ Params : FileSummary Returns : File} getCurrentPackage{ Params :  Returns : String} preconditions{ Params : FileSummary Returns : boolean} addRenamingTransforms{ Params : ComplexTransform,FileSummary,String Returns : void} isInFilter{ Params : TypeSummary Returns : boolean} isImportingPackage{ Params : ImportSummary Returns : boolean} addTypesFromFile{ Params : FileSummary,LinkedList Returns : void} ,,,,,,LinkedList ,,LinkedList ,LinkedList RemoveImportTransform AddImportTransform LinkedList 
JRefactory,org.acm.seguin.refactor.field,AddFieldTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,fieldDecl: SimpleNode ,update{ Params : SimpleNode Returns : void} ,,,,,,SimpleNode ,,SimpleNode ,AddFieldVisitor 
JRefactory,org.acm.seguin.refactor.field,AddFieldVisitor,1,1,0,0,0,false,ChildrenVisitor ,0 ,0 ,field: SimpleNode ,visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} ,,,,,,SimpleNode ,,SimpleNode ,
JRefactory,org.acm.seguin.refactor.field,FieldRefactoring,1,0,1,0,0,false,Refactoring ,0 ,0 ,field: String typeSummary: TypeSummary ,setClass{ Params : String,String Returns : void} setClass{ Params : TypeSummary Returns : void} setField{ Params : String Returns : void} isInJavaLang{ Params : ASTName Returns : boolean} isInJavaLang{ Params : TypeSummary Returns : boolean} getPackage{ Params : Summary Returns : PackageSummary} getFileSummary{ Params : Summary Returns : FileSummary} getFieldType{ Params : SimpleNode,FileSummary Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.refactor.field,FieldRefactoringFactory,1,1,0,0,0,false,0 ,0 ,0 ,,pushDownField{ Params :  Returns : PushDownFieldRefactoring} pushUpField{ Params :  Returns : PushUpFieldRefactoring} renameField{ Params :  Returns : RenameFieldRefactoring} ,,,,,,,,,PushDownFieldRefactoring PushUpFieldRefactoring RenameFieldRefactoring 
JRefactory,org.acm.seguin.refactor.field,PushDownFieldRefactoring,1,1,0,0,0,false,FieldRefactoring ,0 ,0 ,childTypes: LinkedList ,getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} addChild{ Params : String,String Returns : void} addChild{ Params : TypeSummary Returns : void} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} ,,,,,,LinkedList ,,LinkedList ,LinkedList RefactoringException RefactoringException RefactoringException RefactoringException RefactoringException RefactoringException RefactoringException RefactoringException RefactoringException RemoveFieldTransform AddFieldTransform AddImportTransform AddImportTransform 
JRefactory,org.acm.seguin.refactor.field,PushUpFieldRefactoring,1,1,0,0,0,false,FieldRefactoring ,0 ,0 ,parentType: TypeSummary ,getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} ,,,,,,TypeSummary ,,TypeSummary ,RefactoringException RefactoringException RefactoringException RefactoringException RefactoringException RefactoringException RefactoringException RefactoringException RemoveFieldTransform AddFieldTransform AddImportTransform AddImportTransform RemoveFieldFromSubclassVisitor 
JRefactory,org.acm.seguin.refactor.field,RemoveFieldFromSubclassVisitor,1,1,0,0,0,false,TraversalVisitor ,0 ,0 ,target: FieldSummary ancestor: TypeSummary complex: ComplexTransform notHere: TypeSummary ,visit{ Params : FileSummary,Object Returns : Object} visit{ Params : TypeSummary,Object Returns : Object} visit{ Params : FieldSummary,Object Returns : Object} ,,,,,,TypeSummary ,,TypeSummary ,RemoveFieldTransform 
JRefactory,org.acm.seguin.refactor.field,RemoveFieldTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,fieldDecl: SimpleNode field: String ,getFieldDeclaration{ Params :  Returns : SimpleNode} update{ Params : SimpleNode Returns : void} ,,,,,,String ,,String ,RemoveFieldVisitor 
JRefactory,org.acm.seguin.refactor.field,RemoveFieldVisitor,1,1,0,0,0,false,ChildrenVisitor ,0 ,0 ,fieldName: String fieldDecl: SimpleNode ,getFieldDeclaration{ Params :  Returns : SimpleNode} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} isFound{ Params : SimpleNode Returns : boolean} isMultiple{ Params : SimpleNode Returns : boolean} removeField{ Params : SimpleNode Returns : Object} removeSingle{ Params : SimpleNode,SimpleNode,int Returns : void} removeMultiple{ Params : ASTFieldDeclaration,boolean Returns : void} checkDeclaration{ Params : SimpleNode,int Returns : boolean} ,,,,,,SimpleNode ,,SimpleNode ,ASTClassBodyDeclaration ASTInterfaceMemberDeclaration ASTFieldDeclaration 
JRefactory,org.acm.seguin.refactor.field,RenameFieldData,1,0,0,0,0,false,0 ,0 ,0 ,oldName: String newName: String thisRequired: boolean current: Summary mustInsertThis: boolean typeSummary: TypeSummary canBeFirst: boolean canBeThis: boolean oldField: FieldSummary transform: ComplexTransform fullName: String importedName: String ,setThisRequired{ Params : boolean Returns : void} setCurrentSummary{ Params : Summary Returns : void} setMustInsertThis{ Params : boolean Returns : void} getOldName{ Params :  Returns : String} getNewName{ Params :  Returns : String} isThisRequired{ Params :  Returns : boolean} getCurrentSummary{ Params :  Returns : Summary} isMustInsertThis{ Params :  Returns : boolean} getTypeSummary{ Params :  Returns : TypeSummary} isAllowedToChangeFirst{ Params :  Returns : boolean} isAllowedToChangeThis{ Params :  Returns : boolean} getOldField{ Params :  Returns : FieldSummary} getComplexTransform{ Params :  Returns : ComplexTransform} getFullName{ Params :  Returns : String} getImportedName{ Params :  Returns : String} check{ Params : TypeSummary Returns : void} initNames{ Params : FieldSummary Returns : void} ,,,,,,String ,,String ,StringBuffer 
JRefactory,org.acm.seguin.refactor.field,RenameFieldRefactoring,1,1,0,0,0,false,FieldRefactoring ,0 ,0 ,newName: String oldField: FieldSummary ,setNewName{ Params : String Returns : void} getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} getPackage{ Params :  Returns : PackageSummary} ,,,,,,FieldSummary ,,FieldSummary ,RefactoringException RefactoringException RefactoringException RenameFieldTransform RenameSystemTraversal RenameFieldData RenameSystemTraversal RenameFieldData 
JRefactory,org.acm.seguin.refactor.field,RenameFieldTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,oldField: FieldSummary newName: String ,update{ Params : SimpleNode Returns : void} ,,,,,,String ,,String ,RenameFieldVisitor RenameFieldData 
JRefactory,org.acm.seguin.refactor.field,RenameFieldVisitor,1,1,0,0,0,false,ChildrenVisitor ,0 ,0 ,,visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} isAlreadyPresent{ Params : MethodSummary,String Returns : boolean} shouldChangePart{ Params : ASTName,String,Summary,boolean,TypeSummary Returns : int} processThisExpression{ Params : RenameFieldData,ASTPrimaryExpression,ASTPrimaryPrefix Returns : void} processNameExpression{ Params : RenameFieldData,ASTPrimaryExpression,ASTPrimaryPrefix Returns : void} replaceNamePart{ Params : ASTName,String,String Returns : void} ,,,,,,,,,StringTokenizer 
JRefactory,org.acm.seguin.refactor.field,RenameSystemTraversal,1,1,0,0,0,false,TraversalVisitor ,0 ,0 ,,visit{ Params : FileSummary,Object Returns : Object} visit{ Params : TypeSummary,Object Returns : Object} visit{ Params : MethodSummary,Object Returns : Object} visit{ Params : FieldSummary,Object Returns : Object} visit{ Params : ParameterSummary,Object Returns : Object} visit{ Params : LocalVariableSummary,Object Returns : Object} visit{ Params : VariableSummary,Object Returns : Object} visit{ Params : TypeDeclSummary,Object Returns : Object} visit{ Params : MessageSendSummary,Object Returns : Object} visit{ Params : FieldAccessSummary,Object Returns : Object} transform{ Params : FileSummary,FieldSummary,String,ComplexTransform Returns : void} ,,,,,,,,,StringTokenizer StringTokenizer RenameFieldTransform 
JRefactory,org.acm.seguin.refactor.method,AddAbstractMethod,1,1,0,0,0,false,AddNewMethod ,0 ,0 ,,setupModifiers{ Params : ModifierHolder,ModifierHolder Returns : void} isAbstract{ Params :  Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.refactor.method,AddConcreteMethod,1,1,0,0,0,false,AddNewMethod ,0 ,0 ,,setupModifiers{ Params : ModifierHolder,ModifierHolder Returns : void} isAbstract{ Params :  Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.refactor.method,AddConstructor,1,1,0,0,0,false,TransformAST ,0 ,0 ,methodSummary: MethodSummary typeName: String ,update{ Params : SimpleNode Returns : void} setupModifiers{ Params : ModifierHolder,ModifierHolder Returns : void} isAbstract{ Params :  Returns : boolean} addReturn{ Params : SimpleNode,int Returns : void} createParameters{ Params :  Returns : ASTFormalParameters} createExceptions{ Params : Iterator Returns : ASTNameList} addExceptions{ Params : SimpleNode,int Returns : int} addBody{ Params : SimpleNode,int Returns : void} drillIntoType{ Params : SimpleNode Returns : void} build{ Params :  Returns : ASTConstructorDeclaration} buildType{ Params : TypeDeclSummary Returns : ASTType} buildName{ Params : TypeDeclSummary Returns : ASTName} ,,,,,,String ,,String ,ASTResultType ASTFormalParameters ASTFormalParameter ASTVariableDeclaratorId ASTNameList ASTExplicitConstructorInvocation ASTArguments ASTArgumentList BuildExpression ASTClassBodyDeclaration ASTConstructorDeclaration ASTType ASTPrimitiveType ASTName 
JRefactory,org.acm.seguin.refactor.method,AddMethodTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,methodDecl: SimpleNode ,update{ Params : SimpleNode Returns : void} ,,,,,,SimpleNode ,,SimpleNode ,AddMethodVisitor 
JRefactory,org.acm.seguin.refactor.method,AddMethodTypeVisitor,1,1,0,0,0,false,TraversalVisitor ,0 ,0 ,methodContents: boolean ,visit{ Params : TypeDeclSummary,Object Returns : Object} visit{ Params : MethodSummary,Object Returns : Object} addTransform{ Params : Object,AddImportTransform Returns : void} ,,,,,,boolean ,,boolean ,AddImportTransform 
JRefactory,org.acm.seguin.refactor.method,AddMethodVisitor,1,1,0,0,0,false,ChildrenVisitor ,0 ,0 ,method: SimpleNode ,visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} ,,,,,,SimpleNode ,,SimpleNode ,
JRefactory,org.acm.seguin.refactor.method,AddNewMethod,1,0,1,0,0,false,TransformAST ,0 ,0 ,methodSummary: MethodSummary ,update{ Params : SimpleNode Returns : void} setupModifiers{ Params : ModifierHolder,ModifierHolder Returns : void} isAbstract{ Params :  Returns : boolean} addReturn{ Params : SimpleNode,int Returns : void} createParameters{ Params :  Returns : ASTFormalParameters} createExceptions{ Params : Iterator Returns : ASTNameList} addExceptions{ Params : SimpleNode,int Returns : int} addBody{ Params : SimpleNode,int Returns : void} drillIntoType{ Params : SimpleNode Returns : void} build{ Params : boolean Returns : ASTMethodDeclaration} buildType{ Params : TypeDeclSummary Returns : ASTType} buildName{ Params : TypeDeclSummary Returns : ASTName} ,,,,,,,,,ASTResultType ASTFormalParameters ASTFormalParameter ASTVariableDeclaratorId ASTNameList ASTBlock ASTClassBodyDeclaration ASTMethodDeclaration ASTMethodDeclarator ASTType ASTPrimitiveType ASTName 
JRefactory,org.acm.seguin.refactor.method,ChangeMethodScopeTransform,1,0,0,0,0,false,TransformAST ,0 ,0 ,scope: int methodSummary: MethodSummary ,update{ Params : SimpleNode Returns : void} ,,,,,,MethodSummary ,,MethodSummary ,ChangeMethodScopeVisitor 
JRefactory,org.acm.seguin.refactor.method,ChangeMethodScopeVisitor,1,0,0,0,0,false,IdentifyMethodVisitor ,0 ,0 ,changeTo: int PRIVATE: int PACKAGE: int PROTECTED: int PUBLIC: int ,visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} changeScope{ Params : ASTMethodDeclaration Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.refactor.method,EMBuilder,1,0,0,0,0,false,0 ,0 ,0 ,methodName: String isStatement: boolean parameters: LinkedList returnSummary: VariableSummary localVariableNeeded: boolean ,setMethodName{ Params : String Returns : void} setStatement{ Params : boolean Returns : void} setParameters{ Params : LinkedList Returns : void} setReturnSummary{ Params : VariableSummary Returns : void} setLocalVariableNeeded{ Params : boolean Returns : void} build{ Params :  Returns : Node} buildAssignment{ Params : ASTStatementExpression Returns : void} buildMethodInvocation{ Params : SimpleNode,int Returns : ASTPrimaryExpression} buildWithLocal{ Params : ASTBlockStatement Returns : void} ,,,,,,boolean ,,boolean ,ASTBlockStatement ASTStatement ASTStatementExpression ASTPrimaryExpression ASTPrimaryPrefix ASTName ASTAssignmentOperator ASTPrimaryExpression ASTPrimaryPrefix ASTName ASTPrimarySuffix ASTArguments ASTArgumentList BuildExpression ASTLocalVariableDeclaration ASTType ASTPrimitiveType ASTName ASTVariableDeclarator ASTVariableDeclaratorId ASTVariableInitializer 
JRefactory,org.acm.seguin.refactor.method,EMDigger,1,0,0,0,0,false,0 ,0 ,0 ,,dig{ Params : ASTMethodDeclaration Returns : Node} last{ Params : ASTMethodDeclaration Returns : Node} ,,,,,,,,,
JRefactory,org.acm.seguin.refactor.method,EMParameterFinder,1,1,0,0,0,false,0 ,0 ,0 ,main: FileSummary extract: FileSummary found: Node list: LinkedList cantBe: LinkedList parameters: LinkedList returnTypes: LinkedList ,setMainFileSummary{ Params : FileSummary Returns : void} setExtractFileSummary{ Params : FileSummary Returns : void} setLocation{ Params : Node Returns : void} setParameterOrder{ Params : Object[] Returns : void} getList{ Params :  Returns : LinkedList} run{ Params :  Returns : void} getReturnTypes{ Params :  Returns : Object[]} isSame{ Params : MethodSummary,ASTClassBodyDeclaration Returns : boolean} isParametersSame{ Params : Node,MethodSummary Returns : boolean} isContained{ Params : VariableSummary,LinkedList Returns : boolean} findDecl{ Params :  Returns : ASTClassBodyDeclaration} find{ Params :  Returns : MethodSummary} find{ Params : String,MethodSummary Returns : VariableSummary} updateLists{ Params : String,MethodSummary Returns : void} addReturnType{ Params : VariableSummary Returns : void} ,,,,,,LinkedList ,,LinkedList ,LinkedList LinkedList LinkedList LinkedList LinkedList 
JRefactory,org.acm.seguin.refactor.method,ExtractMethodRefactoring,1,1,0,0,0,false,Refactoring ,0 ,0 ,fullFile: StringBuffer selection: String methodName: String root: SimpleNode mainFileSummary: FileSummary extractedMethodFileSummary: FileSummary key: Node empf: EMParameterFinder signature: StringBuffer returnType: Object prot: int arguments: Object PRIVATE: int PACKAGE: int PROTECTED: int PUBLIC: int ,setFullFile{ Params : String Returns : void} setFullFile{ Params : StringBuffer Returns : void} setSelection{ Params : String Returns : void} setMethodName{ Params : String Returns : void} setParameterOrder{ Params : Object[] Returns : void} setProtection{ Params : int Returns : void} setReturnType{ Params : Object Returns : void} getDescription{ Params :  Returns : String} getFullFile{ Params :  Returns : String} getParameters{ Params :  Returns : VariableSummary[]} getReturnTypes{ Params :  Returns : Object[]} isStatement{ Params :  Returns : boolean} getSignature{ Params :  Returns : String} getReturnType{ Params :  Returns : Object} getID{ Params :  Returns : int} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} getMethodTree{ Params :  Returns : SimpleNode} getFileRoot{ Params :  Returns : SimpleNode} getProtection{ Params :  Returns : String} getReturnTypeString{ Params :  Returns : String} replaceAllInstances{ Params : SimpleNode Returns : void} printFile{ Params : SimpleNode Returns : void} makeMethod{ Params :  Returns : String} findVariablesUsed{ Params : Node Returns : FileSummary} findParameters{ Params : Found Returns : EMParameterFinder} prescan{ Params : Search Returns : EMParameterFinder} replaceExtractedMethod{ Params : Found,EMBuilder Returns : void} addReturn{ Params : SimpleNode Returns : SimpleNode} updateModifiers{ Params : SimpleNode,SimpleNode Returns : void} insertAtNextClass{ Params : SimpleNode,SimpleNode Returns : void} ,,,,,,,,,StringBuffer StringBuffer RefactoringException Search RefactoringException RefactoringException RefactoringException RefactoringException RefactoringException BufferParserFactory BufferParserFactory EMBuilder Search FindLocalVariableDeclVisitor ByteArrayOutputStream PrintData PrettyPrintVisitor String StringBuffer SummaryLoaderState SummaryLoadVisitor EMParameterFinder EMDigger ASTBlockStatement ASTStatement ASTReturnStatement BuildExpression 
JRefactory,org.acm.seguin.refactor.method,FindLocalVariableDeclVisitor,1,0,0,0,0,false,ChildrenVisitor ,0 ,0 ,found: boolean ,isFound{ Params :  Returns : boolean} visit{ Params : ASTBlockStatement,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} ,,,,,,boolean ,,boolean ,
JRefactory,org.acm.seguin.refactor.method,IdentifyMethodVisitor,1,0,1,0,0,false,ChildrenVisitor ,0 ,0 ,methodSummary: MethodSummary ,isFound{ Params : SimpleNode Returns : boolean} checkDeclaration{ Params : ASTMethodDeclarator Returns : boolean} checkDeclaration{ Params : ASTConstructorDeclaration Returns : boolean} checkParameters{ Params : ASTFormalParameters Returns : boolean} ,,,,,,MethodSummary ,,MethodSummary ,
JRefactory,org.acm.seguin.refactor.method,InheretenceMethodRefactoring,1,0,1,0,0,false,MethodRefactoring ,0 ,0 ,methodSummary: MethodSummary ,setMethod{ Params : MethodSummary Returns : void} checkDestination{ Params : TypeSummary Returns : void} updateMethod{ Params : SimpleNode Returns : ASTMethodDeclaration} addMethodToDest{ Params : ComplexTransform,RemoveMethodTransform,SimpleNode,TypeSummary Returns : void} ,,,,,,,,,RefactoringException RefactoringException AddMethodTransform AddMethodTypeVisitor 
JRefactory,org.acm.seguin.refactor.method,InvokeMovedMethodTransform,1,1,0,0,0,false,AddNewMethod ,0 ,0 ,dest: Summary ,isAbstract{ Params :  Returns : boolean} addBody{ Params : SimpleNode,int Returns : void} isObjectReferenced{ Params :  Returns : boolean} buildExpression{ Params : String Returns : ASTExpression} ,,,,,,Summary ,,Summary ,ASTBlock ASTBlockStatement ASTStatement ASTStatementExpression ASTPrimaryExpression ASTPrimaryPrefix ASTName ASTPrimarySuffix ASTArguments ASTArgumentList BuildExpression 
JRefactory,org.acm.seguin.refactor.method,MethodRefactoring,1,0,1,0,0,false,Refactoring ,0 ,0 ,,removeMethod{ Params : TypeSummary,ComplexTransform,RemoveMethodTransform Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.refactor.method,MethodRefactoringFactory,1,1,0,0,0,false,0 ,0 ,0 ,,pushUpMethod{ Params :  Returns : PushUpMethodRefactoring} pushUpAbstractMethod{ Params :  Returns : PushUpAbstractMethodRefactoring} pushDownMethod{ Params :  Returns : PushDownMethodRefactoring} moveMethod{ Params :  Returns : MoveMethodRefactoring} extractMethod{ Params :  Returns : ExtractMethodRefactoring} renameParameter{ Params :  Returns : RenameParameterRefactoring} ,,,,,,,,,PushUpMethodRefactoring PushUpAbstractMethodRefactoring PushDownMethodRefactoring MoveMethodRefactoring ExtractMethodRefactoring RenameParameterRefactoring 
JRefactory,org.acm.seguin.refactor.method,MoveMethodRefactoring,1,1,0,0,0,false,MethodRefactoring ,0 ,0 ,methodSummary: MethodSummary typeSummary: TypeSummary destination: Summary ,setMethod{ Params : MethodSummary Returns : void} setDestination{ Params : Summary Returns : void} getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} removeMethod{ Params : TypeSummary,ComplexTransform Returns : SimpleNode} addMethodToDest{ Params : ComplexTransform,SimpleNode,TypeSummary Returns : void} getFieldGetter{ Params : FieldSummary Returns : String} getFieldSetter{ Params : FieldSummary Returns : String} checkFieldAccess{ Params : FieldAccessSummary Returns : void} checkForMethod{ Params : FieldAccessSummary,FieldSummary Returns : void} update{ Params : SimpleNode Returns : void} checkMessageSend{ Params : MessageSendSummary Returns : void} ,,,,,,Summary ,,Summary ,RefactoringException RefactoringException RemoveMethodTransform InvokeMovedMethodTransform AddMethodTransform AddMethodTypeVisitor RefactoringException MoveMethodVisitor RefactoringException RefactoringException RefactoringException RefactoringException 
JRefactory,org.acm.seguin.refactor.method,MoveMethodVisitor,1,1,0,0,0,false,ChildrenVisitor ,0 ,0 ,methodSummary: MethodSummary typeSummary: TypeSummary destination: Summary ,visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTFormalParameters,Object Returns : Object} visit{ Params : ASTExpression,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} isMethod{ Params : ASTPrimaryExpression,ASTPrimaryPrefix Returns : boolean} isVariable{ Params : ASTPrimaryExpression,ASTPrimaryPrefix Returns : boolean} isLocalVariable{ Params : String Returns : boolean} getFieldGetter{ Params : FieldSummary Returns : String} getFieldSetter{ Params : FieldSummary Returns : String} updatePrimaryPrefix{ Params : ASTPrimaryPrefix,String Returns : void} updateLocalReferences{ Params : ASTPrimaryPrefix,ASTName Returns : void} getReplacementVariableName{ Params :  Returns : String} updateParameterReferences{ Params : ASTPrimaryPrefix,ASTName Returns : void} updatePrivateField{ Params : ASTPrimaryExpression,ASTPrimaryPrefix,ASTName,String,boolean Returns : Object} ,,,,,,Summary ,,Summary ,ASTFormalParameter ASTType ASTName ASTVariableDeclaratorId ASTArgumentList ASTName ASTName ASTName ASTName ASTPrimarySuffix ASTArguments 
JRefactory,org.acm.seguin.refactor.method,NearMissVisitor,1,1,0,0,0,false,TraversalVisitor ,0 ,0 ,target: MethodSummary ancestor: TypeSummary notHere: TypeSummary problem: MethodSummary ,visit{ Params : TypeSummary,Object Returns : Object} visit{ Params : MethodSummary,Object Returns : Object} getProblem{ Params :  Returns : MethodSummary} ,,,,,,MethodSummary ,,MethodSummary ,
JRefactory,org.acm.seguin.refactor.method,ObjectReference,1,0,0,0,0,false,0 ,0 ,0 ,,isReferenced{ Params : MethodSummary Returns : boolean} ,,isReferenced ,,,,,,,LinkedList 
JRefactory,org.acm.seguin.refactor.method,PushDownMethodRefactoring,1,1,0,0,0,false,InheretenceMethodRefactoring ,0 ,0 ,destinations: LinkedList typeSummary: TypeSummary ,getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} addChild{ Params : TypeSummary Returns : void} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} removeMethod{ Params : TypeSummary,ComplexTransform,RemoveMethodTransform Returns : void} ,,,,,,TypeSummary ,,TypeSummary ,LinkedList RefactoringException RefactoringException RemoveMethodTransform AddAbstractMethod 
JRefactory,org.acm.seguin.refactor.method,PushUpAbstractMethodRefactoring,1,1,0,0,0,false,PushUpMethodRefactoring ,0 ,0 ,,getID{ Params :  Returns : int} transform{ Params :  Returns : void} ,,,,,,,,,ChangeMethodScopeTransform AddAbstractMethod AddMethodTypeVisitor 
JRefactory,org.acm.seguin.refactor.method,PushUpMethodRefactoring,1,1,0,0,0,false,InheretenceMethodRefactoring ,0 ,0 ,typeSummary: TypeSummary parentType: TypeSummary ,getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} ,,,,,,TypeSummary ,,TypeSummary ,RefactoringException NearMissVisitor RefactoringException RemoveMethodTransform RemoveMethodFromSubclassVisitor 
JRefactory,org.acm.seguin.refactor.method,RemoveMethodFromSubclassVisitor,1,1,0,0,0,false,TraversalVisitor ,0 ,0 ,target: MethodSummary ancestor: TypeSummary complex: ComplexTransform notHere: TypeSummary ,visit{ Params : FileSummary,Object Returns : Object} visit{ Params : TypeSummary,Object Returns : Object} visit{ Params : MethodSummary,Object Returns : Object} ,,,,,,TypeSummary ,,TypeSummary ,RemoveMethodTransform 
JRefactory,org.acm.seguin.refactor.method,RemoveMethodTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,methodDecl: SimpleNode method: MethodSummary ,getMethodDeclaration{ Params :  Returns : SimpleNode} update{ Params : SimpleNode Returns : void} ,,,,,,MethodSummary ,,MethodSummary ,RemoveMethodVisitor 
JRefactory,org.acm.seguin.refactor.method,RemoveMethodVisitor,1,1,0,0,0,false,IdentifyMethodVisitor ,0 ,0 ,methodDecl: SimpleNode ,getMethodDeclaration{ Params :  Returns : SimpleNode} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} removeMethod{ Params : SimpleNode Returns : Object} removeSingle{ Params : SimpleNode,SimpleNode,int Returns : void} ,,,,,,SimpleNode ,,SimpleNode ,
JRefactory,org.acm.seguin.refactor.method,RenameParameterRefactoring,1,1,0,0,0,false,Refactoring ,0 ,0 ,newName: String param: ParameterSummary method: MethodSummary ,setNewName{ Params : String Returns : void} setParameterSummary{ Params : ParameterSummary Returns : void} setMethodSummary{ Params : MethodSummary Returns : void} getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} ,,,,,,MethodSummary ,,MethodSummary ,RefactoringException RefactoringException RefactoringException RenameParameterTransform 
JRefactory,org.acm.seguin.refactor.method,RenameParameterTransform,1,0,0,0,0,false,TransformAST ,0 ,0 ,newName: String param: ParameterSummary method: MethodSummary rightTree: boolean ,setNewName{ Params : String Returns : void} setParameter{ Params : ParameterSummary Returns : void} setMethod{ Params : MethodSummary Returns : void} setRightTree{ Params : boolean Returns : void} getMethod{ Params :  Returns : MethodSummary} getParameter{ Params :  Returns : ParameterSummary} getNewName{ Params :  Returns : String} isRightTree{ Params :  Returns : boolean} update{ Params : SimpleNode Returns : void} ,,,,,,boolean ,,boolean ,RenameParameterVisitor 
JRefactory,org.acm.seguin.refactor.method,RenameParameterVisitor,1,0,0,0,0,false,IdentifyMethodVisitor ,0 ,0 ,,visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} visit{ Params : ASTBlockStatement,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.refactor,Refactoring,1,1,1,0,0,false,0 ,0 ,0 ,complex: ComplexTransform REPACKAGE: int RENAME_CLASS: int ADD_CHILD: int ADD_PARENT: int REMOVE_CLASS: int EXTRACT_INTERFACE: int PUSH_DOWN_FIELD: int PUSH_UP_FIELD: int RENAME_FIELD: int PUSH_UP_METHOD: int PUSH_UP_ABSTRACT_METHOD: int PUSH_DOWN_METHOD: int MOVE_METHOD: int EXTRACT_METHOD: int RENAME_METHOD: int RENAME_PARAMETER: int ,getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} run{ Params :  Returns : void} getComplexTransform{ Params :  Returns : ComplexTransform} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} checkDestinationFile{ Params : Summary,String Returns : void} recordUsage{ Params :  Returns : void} ,,,,getDescription getID preconditions transform ,,,,,ComplexTransform RefactoringException FileWriter PrintWriter Date 
JRefactory,org.acm.seguin.refactor,RefactoringException,1,1,0,0,0,false,Exception ,0 ,0 ,,,,,,,,,,,
JRefactory,org.acm.seguin.refactor,RefactoringFactory,1,1,0,0,0,false,0 ,0 ,0 ,typeFactory: TypeRefactoringFactory fieldFactory: FieldRefactoringFactory methodFactory: MethodRefactoringFactory singleton: RefactoringFactory ,addChild{ Params :  Returns : AddChildRefactoring} addParent{ Params :  Returns : AddAbstractParent} moveClass{ Params :  Returns : MoveClass} renameClass{ Params :  Returns : RenameClassRefactoring} removeEmptyClass{ Params :  Returns : RemoveEmptyClassRefactoring} extractInterface{ Params :  Returns : ExtractInterfaceRefactoring} pushDownField{ Params :  Returns : PushDownFieldRefactoring} renameField{ Params :  Returns : RenameFieldRefactoring} pushUpField{ Params :  Returns : PushUpFieldRefactoring} pushUpMethod{ Params :  Returns : PushUpMethodRefactoring} pushUpAbstractMethod{ Params :  Returns : PushUpAbstractMethodRefactoring} pushDownMethod{ Params :  Returns : PushDownMethodRefactoring} moveMethod{ Params :  Returns : MoveMethodRefactoring} renameParameter{ Params :  Returns : RenameParameterRefactoring} extractMethod{ Params :  Returns : ExtractMethodRefactoring} prepare{ Params :  Returns : void} setSingleton{ Params : RefactoringFactory Returns : void} get{ Params :  Returns : RefactoringFactory} init{ Params :  Returns : void} ,,setSingleton get init ,,,,,,,TypeRefactoringFactory FieldRefactoringFactory MethodRefactoringFactory RefactoringFactory 
JRefactory,org.acm.seguin.refactor,RemoveImportTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,name: ASTName packageImport: boolean ,update{ Params : SimpleNode Returns : void} isInvalid{ Params : SimpleNode Returns : boolean} ,,,,,,boolean ,,boolean ,ASTName 
JRefactory,org.acm.seguin.refactor,TransformAST,1,1,1,0,0,false,0 ,0 ,0 ,,update{ Params : SimpleNode Returns : void} ,,,,update ,,,,,
JRefactory,org.acm.seguin.refactor.type,AbstractMethodFinder,1,1,0,0,0,false,0 ,0 ,0 ,list: LinkedList leaf: TypeSummary ,getList{ Params :  Returns : LinkedList} loadInterfaceMethods{ Params :  Returns : void} filter{ Params : TypeSummary Returns : void} load{ Params :  Returns : void} loadInterface{ Params : TypeSummary Returns : void} nextType{ Params : TypeSummary Returns : TypeSummary} removeImplementations{ Params : MethodSummary Returns : void} add{ Params : MethodSummary Returns : void} ,,,,,,TypeSummary ,,TypeSummary ,LinkedList LinkedList 
JRefactory,org.acm.seguin.refactor.type,AddAbstractParent,1,1,0,0,0,false,AddClassRefactoring ,0 ,0 ,,setParentName{ Params : String Returns : void} getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} addChildClass{ Params : String,String Returns : void} addChildClass{ Params : TypeSummary Returns : void} createClass{ Params : TypeSummary,String Returns : void} transformOriginal{ Params : TypeSummary Returns : void} createRenameType{ Params : TypeSummary,PackageSummary Returns : RenameParentTypeTransform} ,,,,,,,,,CreateClass RenameParentTypeTransform 
JRefactory,org.acm.seguin.refactor.type,AddChildRefactoring,1,1,0,0,0,false,AddClassRefactoring ,0 ,0 ,packageName: String ,setChildName{ Params : String Returns : void} setParentClass{ Params : String,String Returns : void} setParentClass{ Params : TypeSummary Returns : void} setPackageName{ Params : String Returns : void} getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} createClass{ Params : TypeSummary,String Returns : void} transformOriginal{ Params : TypeSummary Returns : void} ,,,,,,String ,,String ,CreateClass 
JRefactory,org.acm.seguin.refactor.type,AddImplementedInterfaceTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,m_interfaceName: ASTName ,update{ Params : SimpleNode Returns : void} ,,,,,,ASTName ,,ASTName ,AddImplementedInterfaceVisitor 
JRefactory,org.acm.seguin.refactor.type,AddImplementedInterfaceVisitor,1,1,0,0,0,false,ChildrenVisitor ,0 ,0 ,,visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} ,,,,,,,,,ASTNameList 
JRefactory,org.acm.seguin.refactor.type,ChangePackageTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,name: ASTName ,update{ Params : SimpleNode Returns : void} addPackage{ Params : SimpleNode Returns : void} removePackage{ Params : SimpleNode Returns : void} ,,,,,,ASTName ,,ASTName ,ASTPackageDeclaration 
JRefactory,org.acm.seguin.refactor.type,CreateClass,1,1,0,0,0,false,0 ,0 ,0 ,typeSummary: TypeSummary newClassName: String isParent: boolean isAbstract: boolean isFinal: boolean packageNameString: String scope: String ,setPackageName{ Params : String Returns : void} setScope{ Params : String Returns : void} setAbstract{ Params : boolean Returns : void} setFinal{ Params : boolean Returns : void} run{ Params :  Returns : File} getNameFromSummary{ Params : TypeSummary Returns : ASTName} isSamePackage{ Params : String,TypeSummary Returns : boolean} createPackageDeclaration{ Params :  Returns : ASTPackageDeclaration} addImportStatement{ Params : TypeSummary,ASTName,ASTCompilationUnit,int Returns : boolean} createTypeDeclaration{ Params : ASTName Returns : ASTTypeDeclaration} createModifiedClass{ Params : ASTName Returns : ASTClassDeclaration} createClassBody{ Params : String,ASTName Returns : ASTUnmodifiedClassDeclaration} print{ Params : String,SimpleNode Returns : File} isImportRequired{ Params : TypeSummary Returns : boolean} getPackageSummary{ Params : TypeSummary Returns : PackageSummary} isSameParent{ Params : TypeSummary,TypeSummary Returns : boolean} isObject{ Params : TypeSummary Returns : boolean} getDirectory{ Params :  Returns : File} addConstructors{ Params : TypeSummary,SimpleNode Returns : void} addMethods{ Params : TypeSummary,SimpleNode Returns : void} ,,,,,,String ,,String ,RefactoringException RefactoringException ASTCompilationUnit ASTName ASTName ASTPackageDeclaration ASTName ASTImportDeclaration ASTTypeDeclaration ASTClassDeclaration ASTUnmodifiedClassDeclaration ASTClassBody File PrettyPrintFile AddConstructor AddMethodTypeVisitor AbstractMethodFinder AddConcreteMethod AddMethodTypeVisitor 
JRefactory,org.acm.seguin.refactor.type,CreateNewInterface,1,1,0,0,0,false,0 ,0 ,0 ,m_interfaceName: String m_packageName: String m_summary: Summary ,run{ Params :  Returns : File} createPackageDeclaration{ Params :  Returns : ASTPackageDeclaration} createTypeDeclaration{ Params :  Returns : ASTTypeDeclaration} createModifiedClass{ Params :  Returns : ASTInterfaceDeclaration} createClassBody{ Params : String Returns : ASTUnmodifiedInterfaceDeclaration} print{ Params : String,SimpleNode Returns : File} getPackageSummary{ Params : Summary Returns : PackageSummary} isSameParent{ Params : TypeSummary,TypeSummary Returns : boolean} isObject{ Params : TypeSummary Returns : boolean} ,,,,,,Summary ,,Summary ,RefactoringException RefactoringException ASTCompilationUnit ASTName ASTPackageDeclaration ASTName ASTTypeDeclaration ASTInterfaceDeclaration ASTUnmodifiedInterfaceDeclaration ASTInterfaceBody File PrettyPrintFile 
JRefactory,org.acm.seguin.refactor.type,ExtractInterfaceRefactoring,1,1,0,0,0,false,Refactoring ,0 ,0 ,m_interfaceName: String m_packageName: String m_summaryList: Vector m_complexTransform: ComplexTransform ,setInterfaceName{ Params : String Returns : void} setPackageName{ Params : String Returns : void} getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} addImplementingClass{ Params : String,String Returns : void} addImplementingClass{ Params : TypeSummary Returns : void} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} getMethodSummaries{ Params :  Returns : Vector} getImportTypes{ Params : Vector Returns : Iterator} addInterfaceToClasses{ Params :  Returns : void} commonMethods{ Params : Vector Returns : Vector} createInterfaceFile{ Params :  Returns : File} ,,,,,,ComplexTransform ,,ComplexTransform ,Vector RefactoringException RefactoringException AddConcreteMethod AddImportTransform File Vector HashMap ASTName AddImplementedInterfaceTransform AddImportTransform File Vector CreateNewInterface 
JRefactory,org.acm.seguin.refactor.type,MoveClass,1,1,0,0,0,false,Refactoring ,0 ,0 ,initDir: String fileList: LinkedList oldPackage: String base: File srcPackage: String destPackage: String ,setDestinationPackage{ Params : String Returns : void} setDirectory{ Params : String Returns : void} getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} add{ Params : String Returns : void} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} ,,,,,,String ,,String ,LinkedList File SummaryTraversal MoveClassVisitor 
JRefactory,org.acm.seguin.refactor.type,MoveClassVisitor,1,1,0,0,0,false,TypeChangeVisitor ,0 ,0 ,oldPackageName: String newPackageName: String base: File ,getFileSpecificTransform{ Params : FileSummary Returns : TransformAST} getNewImports{ Params : FileSummary,String Returns : AddImportTransform} getRemoveImportTransform{ Params : ImportSummary Returns : RemoveImportTransform} getAppropriateClasses{ Params : FileSummary Returns : LinkedList} getNewFile{ Params : FileSummary Returns : File} getCurrentPackage{ Params :  Returns : String} addRenamingTransforms{ Params : ComplexTransform,FileSummary,String Returns : void} add{ Params : String Returns : void} ,,,,,,File ,,File ,ChangePackageTransform AddImportTransform RemoveImportTransform MovingTypeList StayingTypeList StringTokenizer File File RenameTypeTransform FileSummaryGetter 
JRefactory,org.acm.seguin.refactor.type,RemoveClassVisitor,1,1,0,0,0,false,RenameClassVisitor ,0 ,0 ,parentPackage: String oldPackage: String ,getNewImports{ Params : FileSummary,String Returns : AddImportTransform} getNewName{ Params :  Returns : ASTName} alreadyImportsType{ Params : ComplexTransform,ASTName,FileSummary,TypeSummary Returns : void} isSamePackage{ Params : FileSummary,TypeSummary Returns : boolean} isParent{ Params : TypeSummary Returns : boolean} ,,,,,,String ,,String ,AddImportTransform ASTName ASTName ASTName RenameTypeTransform RenameTypeTransform 
JRefactory,org.acm.seguin.refactor.type,RemoveEmptyClassRefactoring,1,1,0,0,0,false,Refactoring ,0 ,0 ,typeSummary: TypeSummary base: File ,setClass{ Params : String,String Returns : void} setClass{ Params : TypeSummary Returns : void} getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} getFileSummary{ Params :  Returns : FileSummary} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} ,,,,,,File ,,File ,RefactoringException RefactoringException RefactoringException RefactoringException RefactoringException File RemoveClassVisitor 
JRefactory,org.acm.seguin.refactor.type,RemoveSamePackageTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,,update{ Params : SimpleNode Returns : void} getPackageName{ Params : SimpleNode Returns : ASTName} isImporting{ Params : ASTName,ASTImportDeclaration Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.refactor.type,RenameClassRefactoring,1,1,0,0,0,false,Refactoring ,0 ,0 ,initDir: String oldPackage: String oldClassName: String newClassName: String srcPackage: String base: File ,setDirectory{ Params : String Returns : void} setOldClassName{ Params : String Returns : void} setNewClassName{ Params : String Returns : void} getDescription{ Params :  Returns : String} getID{ Params :  Returns : int} getFileSummary{ Params :  Returns : FileSummary} preconditions{ Params :  Returns : void} transform{ Params :  Returns : void} ,,,,,,File ,,File ,RefactoringException RefactoringException File SummaryTraversal RefactoringException EliminatePackageImportVisitor RenameClassVisitor 
JRefactory,org.acm.seguin.refactor.type,RenameClassVisitor,1,1,0,0,0,false,TypeChangeVisitor ,0 ,0 ,packageName: String oldClassName: String newClassName: String base: File targetFile: File ,getFileSpecificTransform{ Params : FileSummary Returns : TransformAST} getNewImports{ Params : FileSummary,String Returns : AddImportTransform} getRemoveImportTransform{ Params : ImportSummary Returns : RemoveImportTransform} getAppropriateClasses{ Params : FileSummary Returns : LinkedList} getNewFile{ Params : FileSummary Returns : File} getCurrentPackage{ Params :  Returns : String} getNewName{ Params :  Returns : ASTName} addRenamingTransforms{ Params : ComplexTransform,FileSummary,String Returns : void} alreadyImportsType{ Params : ComplexTransform,ASTName,FileSummary,TypeSummary Returns : void} isRenamingTarget{ Params : FileSummary Returns : boolean} getImport{ Params : TypeSummary Returns : ASTName} getOldName{ Params :  Returns : ASTName} simpleRename{ Params : ComplexTransform,ASTName Returns : void} renameRefactoringTarget{ Params : ComplexTransform,FileSummary,String,ASTName,TypeSummary Returns : void} checkFiles{ Params : File,File Returns : boolean} ,,,,,,File ,,File ,ASTName ASTName RenameTypeTransform AddImportTransform RemoveImportTransform LinkedList StringTokenizer File File File ASTName ASTName RenameTypeTransform RenameTypeTransform StringTokenizer File File ASTName ASTName ASTName RenameTypeTransform ASTName RenameTypeTransform RemoveImportTransform RenameTypeTransform 
JRefactory,org.acm.seguin.refactor.type,RenameParentTypeTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,newName: String oldName: String summary: TypeSummary ,setOldName{ Params : String Returns : void} setNewName{ Params : String Returns : void} setTypeSummary{ Params : TypeSummary Returns : void} update{ Params : SimpleNode Returns : void} ,,,,,,TypeSummary ,,TypeSummary ,RenameParentVisitor RenameTypeData 
JRefactory,org.acm.seguin.refactor.type,RenameParentVisitor,1,1,0,0,0,false,ChildrenVisitor ,0 ,0 ,,visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.refactor.type,RenameTypeData,1,1,0,0,0,false,0 ,0 ,0 ,oldName: ASTName newName: ASTName summary: TypeSummary ,getOld{ Params :  Returns : ASTName} getNew{ Params :  Returns : ASTName} getTypeSummary{ Params :  Returns : TypeSummary} ,,,,,,TypeSummary ,,TypeSummary ,ASTName ASTName 
JRefactory,org.acm.seguin.refactor.type,RenameTypeTransform,1,1,0,0,0,false,TransformAST ,0 ,0 ,oldName: ASTName newName: ASTName summary: TypeSummary ,update{ Params : SimpleNode Returns : void} ,,,,,,TypeSummary ,,TypeSummary ,ASTName RenameTypeVisitor RenameTypeData 
JRefactory,org.acm.seguin.refactor.type,RenameTypeVisitor,1,1,0,0,0,false,ChildrenVisitor ,0 ,0 ,,visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} isMethod{ Params : ASTPrimaryExpression Returns : boolean} isStatic{ Params : RenameTypeData,ASTName,boolean Returns : boolean} processExceptions{ Params : ASTNameList,RenameTypeData Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.refactor.type,State,1,0,0,0,0,false,0 ,0 ,0 ,packageRequired: boolean className: String ,getClassName{ Params :  Returns : String} isPackageRequired{ Params :  Returns : boolean} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.refactor.type,TypeChangeVisitor,1,1,1,0,0,false,TraversalVisitor ,0 ,0 ,refactoring: ComplexTransform ,visit{ Params : Summary,Object Returns : Object} visit{ Params : FileSummary,Object Returns : Object} visit{ Params : ImportSummary,Object Returns : Object} visit{ Params : TypeSummary,Object Returns : Object} visit{ Params : MethodSummary,Object Returns : Object} visit{ Params : FieldSummary,Object Returns : Object} visit{ Params : ParameterSummary,Object Returns : Object} visit{ Params : LocalVariableSummary,Object Returns : Object} visit{ Params : VariableSummary,Object Returns : Object} visit{ Params : TypeDeclSummary,Object Returns : Object} visit{ Params : MessageSendSummary,Object Returns : Object} visit{ Params : FieldAccessSummary,Object Returns : Object} getState{ Params : boolean,FileSummary,String Returns : State} getFileSpecificTransform{ Params : FileSummary Returns : TransformAST} getNewImports{ Params : FileSummary,String Returns : AddImportTransform} getRemoveImportTransform{ Params : ImportSummary Returns : RemoveImportTransform} getAppropriateClasses{ Params : FileSummary Returns : LinkedList} getNewFile{ Params : FileSummary Returns : File} getCurrentPackage{ Params :  Returns : String} preconditions{ Params : FileSummary Returns : boolean} addRenamingTransforms{ Params : ComplexTransform,FileSummary,String Returns : void} isSamePackage{ Params : FileSummary Returns : boolean} isMatchingPackage{ Params : String,boolean Returns : boolean} checkImports{ Params : FileSummary,Object Returns : boolean} checkTypes{ Params : FileSummary,Object Returns : boolean} ,,,,getFileSpecificTransform getNewImports getRemoveImportTransform getAppropriateClasses getNewFile getCurrentPackage addRenamingTransforms ,,ComplexTransform ,,ComplexTransform ,RemoveSamePackageTransform Boolean Boolean Boolean Boolean Boolean Boolean Boolean State 
JRefactory,org.acm.seguin.refactor.type,TypeRefactoringFactory,1,1,0,0,0,false,0 ,0 ,0 ,,addChild{ Params :  Returns : AddChildRefactoring} addParent{ Params :  Returns : AddAbstractParent} moveClass{ Params :  Returns : MoveClass} renameClass{ Params :  Returns : RenameClassRefactoring} removeEmptyClass{ Params :  Returns : RemoveEmptyClassRefactoring} extractInterface{ Params :  Returns : ExtractInterfaceRefactoring} ,,,,,,,,,AddChildRefactoring AddAbstractParent MoveClass RenameClassRefactoring RemoveEmptyClassRefactoring ExtractInterfaceRefactoring 
JRefactory,org.acm.seguin.refactor.undo,FileSet,1,1,0,0,0,false,0 ,Serializable ,0 ,original: File renamed: File newName: File ,undo{ Params :  Returns : void} ,,,,,Serializable ,File ,,File ,
JRefactory,org.acm.seguin.refactor.undo,UndoAction,1,1,0,0,0,false,0 ,Serializable ,0 ,description: String list: LinkedList ,getDescription{ Params :  Returns : String} add{ Params : File,File Returns : void} undo{ Params :  Returns : void} getNextName{ Params : String,int,String Returns : String} findNextStorageSlot{ Params : File,String Returns : File} ,,,,,Serializable ,LinkedList ,,LinkedList ,LinkedList FileSet StringBuffer File 
JRefactory,org.acm.seguin.refactor.undo,UndoCleaner,1,1,0,0,0,false,DirectoryTreeTraversal ,0 ,0 ,,isTarget{ Params : File Returns : boolean} visit{ Params : File Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,,,,UndoCleaner UndoCleaner 
JRefactory,org.acm.seguin.refactor.undo,UndoStack,1,1,0,0,0,false,0 ,0 ,0 ,stack: Stack singleton: UndoStack ,isStackEmpty{ Params :  Returns : boolean} add{ Params : Refactoring Returns : UndoAction} peek{ Params :  Returns : UndoAction} list{ Params :  Returns : Iterator} undo{ Params :  Returns : void} done{ Params :  Returns : void} delete{ Params :  Returns : void} getFile{ Params :  Returns : File} save{ Params :  Returns : void} load{ Params :  Returns : boolean} get{ Params :  Returns : UndoStack} ,,get ,,,,,,,Stack UndoAction Stack File File ObjectOutputStream FileOutputStream ObjectInputStream FileInputStream UndoStack 
JRefactory,org.acm.seguin.summary,FieldAccessSummary,1,1,0,0,0,false,Summary ,0 ,0 ,objectName: String packageName: String fieldName: String isAssignment: boolean ,isAssignment{ Params :  Returns : boolean} getPackageName{ Params :  Returns : String} getObjectName{ Params :  Returns : String} getFieldName{ Params :  Returns : String} getTypeDecl{ Params :  Returns : TypeDeclSummary} getFirstObject{ Params :  Returns : String} getName{ Params :  Returns : String} toString{ Params :  Returns : String} accept{ Params : SummaryVisitor,Object Returns : Object} equals{ Params : Object Returns : boolean} getChildIndex{ Params : SimpleNode,SimpleNode Returns : int} checkAssignment{ Params : SimpleNode Returns : boolean} ,,,,,,boolean ,,boolean ,StringBuffer TypeDeclSummary TypeDeclSummary StringBuffer StringBuffer IllegalArgumentException 
JRefactory,org.acm.seguin.summary,FieldSummary,1,1,0,0,0,false,VariableSummary ,0 ,0 ,modifiers: ModifierHolder ,getModifiers{ Params :  Returns : ModifierHolder} accept{ Params : SummaryVisitor,Object Returns : Object} setModifiers{ Params : ModifierHolder Returns : void} ,,,,,,ModifierHolder ,,ModifierHolder ,
JRefactory,org.acm.seguin.summary,FileSummary,1,1,0,0,0,false,Summary ,0 ,0 ,theFile: File importList: ArrayList typeList: LinkedList isMoving: boolean delete: boolean lastModified: Date fileMap: HashMap ,setMoving{ Params : boolean Returns : void} setDeleted{ Params : boolean Returns : void} getName{ Params :  Returns : String} getFile{ Params :  Returns : File} getImports{ Params :  Returns : Iterator} getTypeCount{ Params :  Returns : int} getTypes{ Params :  Returns : Iterator} isMoving{ Params :  Returns : boolean} isDeleted{ Params :  Returns : boolean} accept{ Params : SummaryVisitor,Object Returns : Object} toString{ Params :  Returns : String} add{ Params : ImportSummary Returns : void} add{ Params : TypeSummary Returns : void} initTypeList{ Params :  Returns : void} initImportList{ Params :  Returns : void} getFileSummary{ Params : File Returns : FileSummary} getFileSummary{ Params : String Returns : FileSummary} removeDeletedSummaries{ Params :  Returns : void} removeFileSummary{ Params : File Returns : void} getKey{ Params : File Returns : String} register{ Params : FileSummary Returns : void} hasType{ Params : SimpleNode Returns : boolean} init{ Params :  Returns : void} loadNewFileSummary{ Params : File Returns : SummaryLoaderState} linkFileSummary{ Params : SummaryLoaderState,File Returns : FileSummary} reloadFileSummary{ Params : File,FileSummary,SimpleNode Returns : void} resetFileSummary{ Params : File,FileSummary Returns : void} reloadFromBuffer{ Params : File,InputStream Returns : FileSummary} ,,getFileSummary getFileSummary removeDeletedSummaries removeFileSummary getKey register hasType init loadNewFileSummary linkFileSummary reloadFileSummary resetFileSummary reloadFromBuffer ,,,,,,,Date LinkedList ArrayList Date Date FileParserFactory BufferParserFactory SummaryLoaderState SummaryLoadVisitor LinkedList HashMap FileParserFactory SummaryLoaderState SummaryLoadVisitor SummaryLoaderState SummaryLoadVisitor Date FileParserFactory InputStreamParserFactory 
JRefactory,org.acm.seguin.summary,FrameworkFileSummaryLoader,1,1,0,0,0,false,FrameworkLoader ,0 ,0 ,directory: String loaded: boolean status: LoadStatus ,run{ Params :  Returns : void} getInputReader{ Params : String Returns : Reader} getTypeName{ Params : FileSummary Returns : String} loadFile{ Params : String Returns : void} loadBuffer{ Params : Reader Returns : String} main{ Params : String[] Returns : void} ,,main ,,,,LoadStatus ,,LoadStatus ,File BufferedReader FileReader File StringBuffer FrameworkFileSummaryLoader TextLoadStatus 
JRefactory,org.acm.seguin.summary,FrameworkLoader,1,1,1,0,0,false,0 ,0 ,0 ,,run{ Params :  Returns : void} ,,,,run ,,,,,
JRefactory,org.acm.seguin.summary,ImportSummary,1,1,0,0,0,false,Summary ,0 ,0 ,packageSummary: PackageSummary type: String ,getPackage{ Params :  Returns : PackageSummary} getType{ Params :  Returns : String} accept{ Params : SummaryVisitor,Object Returns : Object} getPackageName{ Params : int,ASTName Returns : String} toString{ Params :  Returns : String} getName{ Params :  Returns : String} ,,,,,,String ,,String ,StringBuffer 
JRefactory,org.acm.seguin.summary,LineCountVisitor,1,1,0,0,0,false,0 ,JavaParserVisitor ,0 ,lineCount: int ,visit{ Params : SimpleNode,Object Returns : Object} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBodyDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarationLookahead,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} visit{ Params : ASTInterfaceMemberDeclaration,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTVariableDeclarator,Object Returns : Object} visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} visit{ Params : ASTVariableInitializer,Object Returns : Object} visit{ Params : ASTArrayInitializer,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTFormalParameters,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTExplicitConstructorInvocation,Object Returns : Object} visit{ Params : ASTInitializer,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTPrimitiveType,Object Returns : Object} visit{ Params : ASTResultType,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} visit{ Params : ASTNameList,Object Returns : Object} visit{ Params : ASTExpression,Object Returns : Object} visit{ Params : ASTAssignmentOperator,Object Returns : Object} visit{ Params : ASTConditionalExpression,Object Returns : Object} visit{ Params : ASTConditionalOrExpression,Object Returns : Object} visit{ Params : ASTConditionalAndExpression,Object Returns : Object} visit{ Params : ASTInclusiveOrExpression,Object Returns : Object} visit{ Params : ASTExclusiveOrExpression,Object Returns : Object} visit{ Params : ASTAndExpression,Object Returns : Object} visit{ Params : ASTEqualityExpression,Object Returns : Object} visit{ Params : ASTInstanceOfExpression,Object Returns : Object} visit{ Params : ASTRelationalExpression,Object Returns : Object} visit{ Params : ASTShiftExpression,Object Returns : Object} visit{ Params : ASTAdditiveExpression,Object Returns : Object} visit{ Params : ASTMultiplicativeExpression,Object Returns : Object} visit{ Params : ASTUnaryExpression,Object Returns : Object} visit{ Params : ASTPreIncrementExpression,Object Returns : Object} visit{ Params : ASTPreDecrementExpression,Object Returns : Object} visit{ Params : ASTUnaryExpressionNotPlusMinus,Object Returns : Object} visit{ Params : ASTCastLookahead,Object Returns : Object} visit{ Params : ASTPostfixExpression,Object Returns : Object} visit{ Params : ASTCastExpression,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} visit{ Params : ASTBooleanLiteral,Object Returns : Object} visit{ Params : ASTNullLiteral,Object Returns : Object} visit{ Params : ASTArguments,Object Returns : Object} visit{ Params : ASTArgumentList,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} visit{ Params : ASTArrayDimsAndInits,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTLabeledStatement,Object Returns : Object} visit{ Params : ASTBlock,Object Returns : Object} visit{ Params : ASTBlockStatement,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTEmptyStatement,Object Returns : Object} visit{ Params : ASTStatementExpression,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTSwitchLabel,Object Returns : Object} visit{ Params : ASTIfStatement,Object Returns : Object} visit{ Params : ASTWhileStatement,Object Returns : Object} visit{ Params : ASTDoStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTForInit,Object Returns : Object} visit{ Params : ASTStatementExpressionList,Object Returns : Object} visit{ Params : ASTForUpdate,Object Returns : Object} visit{ Params : ASTBreakStatement,Object Returns : Object} visit{ Params : ASTContinueStatement,Object Returns : Object} visit{ Params : ASTReturnStatement,Object Returns : Object} visit{ Params : ASTThrowStatement,Object Returns : Object} visit{ Params : ASTSynchronizedStatement,Object Returns : Object} visit{ Params : ASTTryStatement,Object Returns : Object} getLineCount{ Params :  Returns : int} binaryExpression{ Params : SimpleNode,String,Object Returns : Object} binaryExpression{ Params : SimpleNode,Enumeration,Object Returns : Object} forceBlock{ Params : Node,Object Returns : void} forInit{ Params : ASTLocalVariableDeclaration,Object Returns : void} getInitialToken{ Params : ASTResultType Returns : Token} countLines{ Params : Token Returns : void} beginning{ Params : Token Returns : Token} countNewlines{ Params : String Returns : void} ,,,,,JavaParserVisitor ,int ,,int ,
JRefactory,org.acm.seguin.summary.load,FlashLoader,1,1,0,0,0,false,FrameworkLoader ,0 ,0 ,,run{ Params :  Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.summary.load,LoadStatus,2,1,0,0,0,true,FrameworkLoader ,0 ,0 ,,setRoot{ Params : String Returns : void} setCurrentFile{ Params : String Returns : void} done{ Params :  Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.summary.load,RapidLoader,1,1,0,0,0,false,0 ,0 ,SaveThread ,,save{ Params :  Returns : void} load{ Params :  Returns : void} run{ Params :  Returns : void} ,,,,,,,,,SaveThread FileInputStream BufferedInputStream ObjectInputStream FlashLoader FileOutputStream BufferedOutputStream ObjectOutputStream 
JRefactory,org.acm.seguin.summary.load,SaveThread,3,1,0,0,0,false,0 ,0 ,SaveThread ,,save{ Params :  Returns : void} load{ Params :  Returns : void} run{ Params :  Returns : void} ,,,,,,,,,FileOutputStream BufferedOutputStream ObjectOutputStream 
JRefactory,org.acm.seguin.summary.load,SilentLoadStatus,1,1,0,0,0,false,0 ,LoadStatus ,0 ,,setRoot{ Params : String Returns : void} setCurrentFile{ Params : String Returns : void} done{ Params :  Returns : void} ,,,,,LoadStatus ,,,,
JRefactory,org.acm.seguin.summary.load,SwingLoadStatus,1,1,0,0,0,false,JDialog ,LoadStatus ,0 ,label: JLabel progress: JProgressBar count: int max: int fivePercent: int oldName: String lengths: RefactoryStorage ,setRoot{ Params : String Returns : void} setCurrentFile{ Params : String Returns : void} done{ Params :  Returns : void} ,,,,,LoadStatus ,RefactoryStorage ,,RefactoryStorage ,JFrame GridLayout JLabel JProgressBar RefactoryStorage 
JRefactory,org.acm.seguin.summary.load,TextLoadStatus,1,1,0,0,0,false,0 ,LoadStatus ,0 ,inOldRoot: boolean ch: char ,setRoot{ Params : String Returns : void} setCurrentFile{ Params : String Returns : void} done{ Params :  Returns : void} ,,,,,LoadStatus ,char ,,char ,
JRefactory,org.acm.seguin.summary,LocalVariableSummary,1,1,0,0,0,false,VariableSummary ,0 ,0 ,,accept{ Params : SummaryVisitor,Object Returns : Object} createNew{ Params : Summary,ASTLocalVariableDeclaration Returns : LocalVariableSummary[]} ,,createNew ,,,,,,,LocalVariableSummary 
JRefactory,org.acm.seguin.summary,MessageSendSummary,1,1,0,0,0,false,Summary ,0 ,0 ,objectName: String packageName: String messageName: String first: String ,getPackageName{ Params :  Returns : String} getObjectName{ Params :  Returns : String} getMessageName{ Params :  Returns : String} getTypeDecl{ Params :  Returns : TypeDeclSummary} getName{ Params :  Returns : String} toString{ Params :  Returns : String} accept{ Params : SummaryVisitor,Object Returns : Object} equals{ Params : Object Returns : boolean} getFirstObject{ Params :  Returns : String} ,,,,,,String ,,String ,StringBuffer TypeDeclSummary TypeDeclSummary StringBuffer 
JRefactory,org.acm.seguin.summary,MethodSummary,1,1,0,0,0,false,Summary ,0 ,0 ,returnType: TypeDeclSummary name: String parameterList: LinkedList exceptionList: LinkedList dependencyList: LinkedList modifiers: ModifierHolder statementCount: int blockDepth: int maxBlockDepth: int declarationLine: int ,setName{ Params : String Returns : void} setReturnType{ Params : TypeDeclSummary Returns : void} setDeclarationLine{ Params : int Returns : void} getName{ Params :  Returns : String} getReturnType{ Params :  Returns : TypeDeclSummary} getExceptions{ Params :  Returns : Iterator} getParameters{ Params :  Returns : Iterator} getParameterCount{ Params :  Returns : int} getDependencies{ Params :  Returns : Iterator} getModifiers{ Params :  Returns : ModifierHolder} getStatementCount{ Params :  Returns : int} isNearMiss{ Params : MethodSummary Returns : boolean} isInitializer{ Params :  Returns : boolean} getMaxBlockDepth{ Params :  Returns : int} getDeclarationLine{ Params :  Returns : int} isConstructor{ Params :  Returns : boolean} toString{ Params :  Returns : String} accept{ Params : SummaryVisitor,Object Returns : Object} incrStatementCount{ Params :  Returns : void} equals{ Params : Object Returns : boolean} beginBlock{ Params :  Returns : void} endBlock{ Params :  Returns : void} checkSignature{ Params : MethodSummary Returns : boolean} setModifiers{ Params : ModifierHolder Returns : void} add{ Params : TypeDeclSummary Returns : void} add{ Params : ParameterSummary Returns : void} addDependency{ Params : Summary Returns : void} initParameterList{ Params :  Returns : void} initExceptionList{ Params :  Returns : void} initDependencyList{ Params :  Returns : void} checkReturn{ Params : MethodSummary Returns : boolean} checkProtection{ Params : MethodSummary Returns : boolean} ,,,,,,int ,,int ,StringBuffer LinkedList LinkedList LinkedList 
JRefactory,org.acm.seguin.summary,PackageSummary,1,1,0,0,0,false,Summary ,0 ,0 ,name: String fileList: LinkedList packageMap: HashMap ,getName{ Params :  Returns : String} getFileSummary{ Params : String Returns : FileSummary} getFileSummaries{ Params :  Returns : Iterator} getDirectory{ Params :  Returns : File} isTopLevel{ Params :  Returns : boolean} deleteFileSummary{ Params : FileSummary Returns : void} toString{ Params :  Returns : String} accept{ Params : SummaryVisitor,Object Returns : Object} addFileSummary{ Params : FileSummary Returns : void} initFileList{ Params :  Returns : void} getPackageSummary{ Params : String Returns : PackageSummary} getAllPackages{ Params :  Returns : Iterator} saveAll{ Params : ObjectOutputStream Returns : void} loadAll{ Params : ObjectInputStream Returns : void} init{ Params :  Returns : void} ,,getPackageSummary getAllPackages saveAll loadAll init ,,,,,,,LinkedList PackageSummary HashMap 
JRefactory,org.acm.seguin.summary,ParameterSummary,1,1,0,0,0,false,VariableSummary ,0 ,0 ,,accept{ Params : SummaryVisitor,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.summary,PrintVisitor,1,1,0,0,0,false,TraversalVisitor ,0 ,0 ,,visit{ Params : Summary,Object Returns : Object} visit{ Params : PackageSummary,Object Returns : Object} visit{ Params : FileSummary,Object Returns : Object} visit{ Params : ImportSummary,Object Returns : Object} visit{ Params : TypeSummary,Object Returns : Object} visit{ Params : MethodSummary,Object Returns : Object} visit{ Params : FieldSummary,Object Returns : Object} visit{ Params : ParameterSummary,Object Returns : Object} visit{ Params : LocalVariableSummary,Object Returns : Object} visit{ Params : VariableSummary,Object Returns : Object} visit{ Params : TypeDeclSummary,Object Returns : Object} visit{ Params : MessageSendSummary,Object Returns : Object} visit{ Params : FieldAccessSummary,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.summary.query,Ancestor,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : TypeSummary,TypeSummary Returns : boolean} ,,query ,,,,,,,
JRefactory,org.acm.seguin.summary.query,ChildClassSearcher,1,1,0,0,0,false,TraversalVisitor ,0 ,0 ,,visit{ Params : TypeSummary,Object Returns : Object} query{ Params : TypeSummary Returns : Iterator} ,,query ,,,,,,,SearchData ChildClassSearcher 
JRefactory,org.acm.seguin.summary.query,ContainsStatic,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : TypeSummary,String,boolean Returns : boolean} searchMethods{ Params : TypeSummary,String Returns : boolean} searchFields{ Params : TypeSummary,String Returns : boolean} ,,query searchMethods searchFields ,,,,,,,
JRefactory,org.acm.seguin.summary.query,FieldQuery,1,1,0,0,0,false,0 ,0 ,0 ,PRIVATE: int DEFAULT: int PROTECTED: int PUBLIC: int ,find{ Params : TypeSummary,String Returns : FieldSummary} query{ Params : TypeSummary,String,int Returns : FieldSummary} queryAncestors{ Params : TypeSummary,String,int Returns : FieldSummary} appropriate{ Params : FieldSummary,String,int Returns : boolean} ,,find query queryAncestors appropriate ,,,,,,,
JRefactory,org.acm.seguin.summary.query,FileSummaryGetter,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : String,String Returns : FileSummary} query{ Params : PackageSummary,String Returns : FileSummary} query{ Params : FileSummary,String Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.summary.query,GetMethodSummary,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : TypeSummary,String Returns : MethodSummary} query{ Params : TypeSummary,ASTMethodDeclaration Returns : MethodSummary} query{ Params : TypeSummary,ASTConstructorDeclaration Returns : MethodSummary} isMatch{ Params : MethodSummary,ASTMethodDeclaration Returns : boolean} isParameterMatch{ Params : ASTFormalParameters,MethodSummary Returns : boolean} ,,query query query isMatch isParameterMatch ,,,,,,,
JRefactory,org.acm.seguin.summary.query,GetPackageSummary,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : TypeSummary Returns : PackageSummary} ,,query ,,,,,,,
JRefactory,org.acm.seguin.summary.query,GetTypeSummary,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : TypeDeclSummary Returns : TypeSummary} query{ Params : FileSummary,String Returns : TypeSummary} query{ Params : PackageSummary,String Returns : TypeSummary} query{ Params : String,String Returns : TypeSummary} query{ Params : TypeSummary,String Returns : TypeSummary} query{ Params : MethodSummary,String Returns : TypeSummary} checkImports{ Params : FileSummary,String Returns : TypeSummary} checkType{ Params : FileSummary,String Returns : TypeSummary} ,,query query query query query query checkImports checkType ,,,,,,,
JRefactory,org.acm.seguin.summary.query,ImportsType,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : Summary,TypeSummary Returns : boolean} getFileSummary{ Params : Summary Returns : FileSummary} getPackageSummary{ Params : Summary Returns : PackageSummary} ,,query getFileSummary getPackageSummary ,,,,,,,
JRefactory,org.acm.seguin.summary.query,LookupVariable,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : MethodSummary,String Returns : VariableSummary} queryFieldSummary{ Params : TypeSummary,String Returns : VariableSummary} getField{ Params : TypeSummary,String,boolean Returns : VariableSummary} getLocal{ Params : MethodSummary,String Returns : VariableSummary} ,,query queryFieldSummary getField getLocal ,,,,,,,
JRefactory,org.acm.seguin.summary.query,MethodQuery,1,1,0,0,0,false,0 ,0 ,0 ,PRIVATE: int DEFAULT: int PROTECTED: int PUBLIC: int ,find{ Params : TypeSummary,String Returns : MethodSummary} query{ Params : TypeSummary,String,int Returns : MethodSummary} queryAncestors{ Params : TypeSummary,String,int Returns : MethodSummary} appropriate{ Params : MethodSummary,String,int Returns : boolean} ,,find query queryAncestors appropriate ,,,,,,,
JRefactory,org.acm.seguin.summary.query,MovingTypeList,1,1,0,0,0,false,TypeList ,0 ,0 ,,isIncluded{ Params : FileSummary Returns : boolean} isIncluded{ Params : TypeSummary Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.summary.query,PackageContainsClass,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : String,String Returns : boolean} query{ Params : PackageSummary,String Returns : boolean} checkFile{ Params : FileSummary,String Returns : boolean} ,,query query checkFile ,,,,,,,
JRefactory,org.acm.seguin.summary.query,ParameterQuery,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : MethodSummary,String Returns : ParameterSummary} ,,query ,,,,,,,
JRefactory,org.acm.seguin.summary.query,SameMethod,1,1,0,0,0,false,0 ,0 ,0 ,SAME: int ONE_ANCESTOR: int TWO_ANCESTOR: int ERROR: int ANCESTOR: int ,query{ Params : MethodSummary,MethodSummary Returns : boolean} conflict{ Params : MethodSummary,MethodSummary Returns : boolean} find{ Params : TypeSummary,MethodSummary Returns : MethodSummary} findConflict{ Params : TypeSummary,MethodSummary Returns : MethodSummary} compareTypes{ Params : TypeSummary,TypeSummary,int Returns : int} check{ Params : MethodSummary,MethodSummary,int Returns : boolean} ,,query conflict find findConflict compareTypes check ,,,,,,,
JRefactory,org.acm.seguin.summary.query,SamePackage,1,1,0,0,0,false,0 ,0 ,0 ,,query{ Params : String,FileSummary Returns : boolean} query{ Params : String,TypeSummary Returns : boolean} query{ Params : TypeSummary,TypeSummary Returns : boolean} getPackageSummary{ Params : Summary Returns : PackageSummary} ,,query query query getPackageSummary ,,,,,,,
JRefactory,org.acm.seguin.summary.query,SearchData,1,0,0,0,0,false,0 ,0 ,0 ,desiredParent: TypeSummary children: LinkedList ,getParentType{ Params :  Returns : TypeSummary} getChildren{ Params :  Returns : Iterator} addChild{ Params : TypeSummary Returns : void} ,,,,,,LinkedList ,,LinkedList ,LinkedList 
JRefactory,org.acm.seguin.summary.query,StayingTypeList,1,1,0,0,0,false,TypeList ,0 ,0 ,,isIncluded{ Params : FileSummary Returns : boolean} isIncluded{ Params : TypeSummary Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.summary.query,TopLevelDirectory,1,1,0,0,0,false,0 ,0 ,0 ,,getPackageDirectory{ Params : Summary,String Returns : File} query{ Params : FileSummary Returns : File} query{ Params : File,String Returns : File} getParent{ Params : File Returns : File} getFileSummary{ Params : Summary Returns : FileSummary} query{ Params :  Returns : File} findFileSummary{ Params :  Returns : FileSummary} ,,getPackageDirectory query query getParent getFileSummary query findFileSummary ,,,,,,,StringTokenizer File File FileParserFactory File File StringTokenizer File 
JRefactory,org.acm.seguin.summary.query,TypeList,1,1,1,0,0,false,0 ,0 ,0 ,,query{ Params : String Returns : LinkedList} query{ Params : PackageSummary Returns : LinkedList} isIncluded{ Params : FileSummary Returns : boolean} isIncluded{ Params : TypeSummary Returns : boolean} add{ Params : FileSummary,LinkedList Returns : void} ,,,,isIncluded isIncluded ,,,,,LinkedList 
JRefactory,org.acm.seguin.summary,Summary,1,1,1,0,0,false,0 ,Serializable ,0 ,parent: Summary start: int end: int ,getParent{ Params :  Returns : Summary} getStartLine{ Params :  Returns : int} getEndLine{ Params :  Returns : int} getDeclarationLine{ Params :  Returns : int} getName{ Params :  Returns : String} accept{ Params : SummaryVisitor,Object Returns : Object} setStartLine{ Params : int Returns : void} setEndLine{ Params : int Returns : void} ,,,,getName ,Serializable ,int ,,int ,
JRefactory,org.acm.seguin.summary,SummaryLoaderState,1,1,0,0,0,false,0 ,0 ,0 ,stack: Stack file: File code: int INITIALIZE: int LOAD_FILE: int LOAD_TYPE: int LOAD_CLASSBODY: int LOAD_INTERFACE_LIST: int LOAD_EXCEPTIONS: int LOAD_PARAMETERS: int LOAD_METHODBODY: int IGNORE: int ,setFile{ Params : File Returns : void} setCode{ Params : int Returns : void} getCurrentSummary{ Params :  Returns : Summary} getFile{ Params :  Returns : File} getCode{ Params :  Returns : int} startSummary{ Params : Summary Returns : void} finishSummary{ Params :  Returns : void} ,,,,,,,,,Stack FileSummary 
JRefactory,org.acm.seguin.summary,SummaryLoadVisitor,1,1,0,0,0,false,LineCountVisitor ,0 ,0 ,anonCount: int ,visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTInitializer,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTResultType,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} visit{ Params : ASTNameList,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTExplicitConstructorInvocation,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} forInit{ Params : ASTLocalVariableDeclaration,Object Returns : void} visit{ Params : ASTBlock,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} addAccess{ Params : MethodSummary,ASTName,boolean Returns : void} loadInitializer{ Params : TypeSummary,SummaryLoaderState,SimpleNode,boolean Returns : void} countFieldStart{ Params : ASTFieldDeclaration,Object Returns : void} countMethodHeader{ Params : ASTMethodDeclaration,Object Returns : void} countConstructorHeader{ Params : ASTConstructorDeclaration Returns : void} loadMethodParams{ Params : SimpleNode,SummaryLoaderState Returns : void} loadMethodReturn{ Params : ASTMethodDeclaration,MethodSummary,int Returns : void} loadMethodExceptions{ Params : SimpleNode,SummaryLoaderState,int Returns : void} loadMethodBody{ Params : ASTMethodDeclaration,SummaryLoaderState Returns : void} countLocalVariable{ Params : ASTLocalVariableDeclaration,Object Returns : void} ,,,,,,int ,,int ,FileSummary ImportSummary TypeSummary TypeSummary TypeSummary TypeSummary TypeSummary FieldSummary MethodSummary ParameterSummary ParameterSummary MethodSummary TypeDeclSummary TypeDeclSummary TypeDeclSummary ASTName ASTName TypeDeclSummary TypeDeclSummary TypeSummary MessageSendSummary FieldAccessSummary 
JRefactory,org.acm.seguin.summary,SummaryTraversal,1,1,0,0,0,false,DirectoryTreeTraversal ,0 ,0 ,root: String blockDirectories: String status: LoadStatus framework: FrameworkLoader ,go{ Params :  Returns : void} isTarget{ Params : File Returns : boolean} isAllowed{ Params : File Returns : boolean} visit{ Params : File Returns : void} setFrameworkLoader{ Params : FrameworkLoader Returns : void} main{ Params : String[] Returns : void} debug{ Params :  Returns : void} ,,setFrameworkLoader main debug ,,,,,,,SwingLoadStatus FrameworkFileSummaryLoader File StringTokenizer SummaryTraversal SummaryTraversal PrintVisitor 
JRefactory,org.acm.seguin.summary,SummaryVisitor,2,1,0,0,0,true,DirectoryTreeTraversal ,0 ,0 ,,visit{ Params : Summary,Object Returns : Object} visit{ Params : PackageSummary,Object Returns : Object} visit{ Params : FileSummary,Object Returns : Object} visit{ Params : ImportSummary,Object Returns : Object} visit{ Params : TypeSummary,Object Returns : Object} visit{ Params : MethodSummary,Object Returns : Object} visit{ Params : FieldSummary,Object Returns : Object} visit{ Params : ParameterSummary,Object Returns : Object} visit{ Params : LocalVariableSummary,Object Returns : Object} visit{ Params : VariableSummary,Object Returns : Object} visit{ Params : TypeDeclSummary,Object Returns : Object} visit{ Params : MessageSendSummary,Object Returns : Object} visit{ Params : FieldAccessSummary,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.summary,TraversalVisitor,1,1,0,0,0,false,0 ,SummaryVisitor ,0 ,,visit{ Params : Summary,Object Returns : Object} visit{ Params : Object Returns : void} visit{ Params : PackageSummary,Object Returns : Object} visit{ Params : FileSummary,Object Returns : Object} visit{ Params : ImportSummary,Object Returns : Object} visit{ Params : TypeSummary,Object Returns : Object} visit{ Params : MethodSummary,Object Returns : Object} visit{ Params : FieldSummary,Object Returns : Object} visit{ Params : ParameterSummary,Object Returns : Object} visit{ Params : LocalVariableSummary,Object Returns : Object} visit{ Params : VariableSummary,Object Returns : Object} visit{ Params : TypeDeclSummary,Object Returns : Object} visit{ Params : MessageSendSummary,Object Returns : Object} visit{ Params : FieldAccessSummary,Object Returns : Object} ,,,,,SummaryVisitor ,,,,LinkedList 
JRefactory,org.acm.seguin.summary,TypeDeclSummary,1,1,0,0,0,false,Summary ,0 ,0 ,typeName: String packageName: String primitive: boolean arrayCount: int ,setArrayCount{ Params : int Returns : void} getArrayCount{ Params :  Returns : int} isArray{ Params :  Returns : boolean} getPackage{ Params :  Returns : String} getType{ Params :  Returns : String} isPrimitive{ Params :  Returns : boolean} getLongName{ Params :  Returns : String} toString{ Params :  Returns : String} accept{ Params : SummaryVisitor,Object Returns : Object} equals{ Params : Object Returns : boolean} isSame{ Params : TypeDeclSummary Returns : boolean} getTypeDeclSummary{ Params : Summary,ASTType Returns : TypeDeclSummary} getTypeDeclSummary{ Params : Summary,ASTResultType Returns : TypeDeclSummary} getName{ Params :  Returns : String} ,,getTypeDeclSummary getTypeDeclSummary ,,,,int ,,int ,StringBuffer StringBuffer TypeDeclSummary TypeDeclSummary TypeDeclSummary 
JRefactory,org.acm.seguin.summary,TypeSummary,1,1,0,0,0,false,Summary ,0 ,0 ,name: String bInterface: boolean parentClass: TypeDeclSummary interfaceList: LinkedList methodList: LinkedList fieldList: LinkedList typeList: LinkedList modifiers: ModifierHolder ,setName{ Params : String Returns : void} isInterface{ Params :  Returns : boolean} getName{ Params :  Returns : String} getMethods{ Params :  Returns : Iterator} getMethodCount{ Params :  Returns : int} getFields{ Params :  Returns : Iterator} getFieldCount{ Params :  Returns : int} getTypes{ Params :  Returns : Iterator} getTypeCount{ Params :  Returns : int} getImplementedInterfaces{ Params :  Returns : Iterator} getParentClass{ Params :  Returns : TypeDeclSummary} getModifiers{ Params :  Returns : ModifierHolder} getPackageSummary{ Params :  Returns : PackageSummary} getField{ Params : String Returns : FieldSummary} accept{ Params : SummaryVisitor,Object Returns : Object} toString{ Params :  Returns : String} setModifiers{ Params : ModifierHolder Returns : void} add{ Params : MethodSummary Returns : void} add{ Params : FieldSummary Returns : void} add{ Params : TypeSummary Returns : void} add{ Params : TypeDeclSummary Returns : void} setInterface{ Params : boolean Returns : void} setParentClass{ Params : TypeDeclSummary Returns : void} getInitializer{ Params : boolean Returns : MethodSummary} initInterfaceList{ Params :  Returns : void} initMethodList{ Params :  Returns : void} initFieldList{ Params :  Returns : void} initTypeList{ Params :  Returns : void} createInitializer{ Params : boolean Returns : MethodSummary} ,,,,,,ModifierHolder ,,ModifierHolder ,LinkedList LinkedList LinkedList LinkedList MethodSummary ModifierHolder 
JRefactory,org.acm.seguin.summary,VariableSummary,1,1,0,0,0,false,Summary ,0 ,0 ,name: String type: TypeDeclSummary declaration: StringBuffer ,setName{ Params : String Returns : void} getName{ Params :  Returns : String} getType{ Params :  Returns : String} getTypeDecl{ Params :  Returns : TypeDeclSummary} getDeclaration{ Params :  Returns : String} toString{ Params :  Returns : String} accept{ Params : SummaryVisitor,Object Returns : Object} ,,,,,,StringBuffer ,,StringBuffer ,StringBuffer 
JRefactory,org.acm.seguin.tools.build,CleanClassFiles,1,1,0,0,0,false,DirectoryTreeTraversal ,0 ,0 ,directoryList: LinkedList output: PrintWriter ,isTarget{ Params : File Returns : boolean} visit{ Params : File Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,PrintWriter ,,PrintWriter ,LinkedList PrintWriter FileWriter PrintWriter OutputStreamWriter CleanClassFiles 
JRefactory,org.acm.seguin.tools.build,CodeStoreBuilder,1,1,0,0,0,false,DirectoryTreeTraversal ,0 ,0 ,directoryList: LinkedList output: PrintWriter rootLength: int first: boolean jarFile: String directoryCount: int MAX_DIRS: int ,isTarget{ Params : File Returns : boolean} visit{ Params : File Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,,,,LinkedList PrintWriter FileWriter PrintWriter OutputStreamWriter CodeStoreBuilder 
JRefactory,org.acm.seguin.tools.build,CreateVersion,1,1,0,0,0,false,0 ,0 ,0 ,major: String minor: String build: String output: String ,run{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,String ,,String ,StringTokenizer PrintWriter FileWriter CreateVersion 
JRefactory,org.acm.seguin.tools.build,JarDirectoryBuilder,1,1,0,0,0,false,DirectoryTreeTraversal ,0 ,0 ,directoryList: LinkedList output: PrintWriter rootLength: int first: boolean jarFile: String directoryCount: int manifest: String MAX_DIRS: int ,isTarget{ Params : File Returns : boolean} visit{ Params : File Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,,,,LinkedList PrintWriter FileWriter PrintWriter OutputStreamWriter JarDirectoryBuilder 
JRefactory,org.acm.seguin.tools.build,JavadocBuilder,1,1,0,0,0,false,DirectoryTreeTraversal ,0 ,0 ,directoryList: LinkedList output: PrintWriter rootLength: int first: boolean directoryCount: int MAX_DIRS: int ,isTarget{ Params : File Returns : boolean} visit{ Params : File Returns : void} convert{ Params : String Returns : String} main{ Params : String[] Returns : void} ,,main ,,,,,,,LinkedList StringBuffer PrintWriter FileWriter PrintWriter OutputStreamWriter JavadocBuilder 
JRefactory,org.acm.seguin.tools.install,RefactoryInstaller,1,1,0,0,0,false,0 ,0 ,0 ,refactory: boolean PRETTY_CURRENT_VERSION: double UML_CURRENT_VERSION: double ,run{ Params :  Returns : void} prettySettings{ Params : PrintWriter,double Returns : void} vssSettings{ Params : PrintWriter Returns : void} processSettings{ Params : PrintWriter Returns : void} umlSettings{ Params : PrintWriter,double,String Returns : void} jsdkStubInstall{ Params :  Returns : void} doubleBackslashes{ Params : String Returns : String} generateCreationText{ Params : File Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,,,,File File File FileWriter PrintWriter FileWriter PrintWriter File FileWriter PrintWriter FileWriter PrintWriter File PrintingSettings File FileWriter PrintWriter File FileWriter PrintWriter File GregorianCalendar Date GregorianCalendar File File File StubPrompter StringBuffer FileWriter PrintWriter Date RefactoryInstaller 
JRefactory,org.acm.seguin.tools.international,StringListTraversal,1,0,0,0,0,false,DirectoryTreeTraversal ,0 ,0 ,,isTarget{ Params : File Returns : boolean} visit{ Params : File Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,,,,FileParserFactory StringListVisitor StringListTraversal StringListTraversal 
JRefactory,org.acm.seguin.tools.international,StringListVisitor,1,1,0,0,0,false,ChildrenVisitor ,0 ,0 ,,visit{ Params : ASTLiteral,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} ,,,,,,,,,
JRefactory,org.acm.seguin.tools.stub,StubFile,1,1,0,0,0,false,0 ,0 ,0 ,factory: ParserFactory out: OutputStream name: String outputFile: File creating: boolean ,setParserFactory{ Params : ParserFactory Returns : void} getParserFactory{ Params :  Returns : ParserFactory} apply{ Params : File Returns : void} apply{ Params : InputStream,String Returns : void} done{ Params :  Returns : void} getOutputStream{ Params : File Returns : OutputStream} getPrintData{ Params : File Returns : PrintData} apply{ Params :  Returns : void} waitForCreation{ Params :  Returns : void} resume{ Params :  Returns : void} ,,waitForCreation resume ,,,,,,,FileParserFactory InputStreamParserFactory File File FileOutputStream FileOutputStream PrintData StubPrintVisitor 
JRefactory,org.acm.seguin.tools.stub,StubGenerator,1,1,0,0,0,false,Thread ,0 ,0 ,filename: String key: String file: File ,run{ Params :  Returns : void} waitForLoaded{ Params :  Returns : void} main{ Params : String[] Returns : void} generateStubs{ Params : String,String Returns : void} ,,waitForLoaded main generateStubs ,,,,File ,,File ,File StubGenTraversal StubGenFromZip RefactoryInstaller StubGenerator 
JRefactory,org.acm.seguin.tools.stub,StubGenFromZip,1,0,0,0,0,false,0 ,0 ,0 ,filename: String sf: StubFile ,run{ Params :  Returns : void} applies{ Params : ZipEntry Returns : boolean} generateStub{ Params : InputStream,String Returns : void} ,,,,,,StubFile ,,StubFile ,StubFile ZipFile 
JRefactory,org.acm.seguin.tools.stub,StubGenTraversal,1,0,0,0,0,false,DirectoryTreeTraversal ,0 ,0 ,sf: StubFile ,run{ Params :  Returns : void} isTarget{ Params : File Returns : boolean} visit{ Params : File Returns : void} ,,,,,,StubFile ,,StubFile ,StubFile 
JRefactory,org.acm.seguin.tools.stub,StubPrintVisitor,1,1,0,0,0,false,0 ,JavaParserVisitor ,0 ,,visit{ Params : SimpleNode,Object Returns : Object} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBodyDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarationLookahead,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceBody,Object Returns : Object} visit{ Params : ASTInterfaceMemberDeclaration,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTVariableDeclarator,Object Returns : Object} visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} visit{ Params : ASTVariableInitializer,Object Returns : Object} visit{ Params : ASTArrayInitializer,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTFormalParameters,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTExplicitConstructorInvocation,Object Returns : Object} visit{ Params : ASTInitializer,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTPrimitiveType,Object Returns : Object} visit{ Params : ASTResultType,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} visit{ Params : ASTNameList,Object Returns : Object} visit{ Params : ASTExpression,Object Returns : Object} visit{ Params : ASTAssignmentOperator,Object Returns : Object} visit{ Params : ASTConditionalExpression,Object Returns : Object} visit{ Params : ASTConditionalOrExpression,Object Returns : Object} visit{ Params : ASTConditionalAndExpression,Object Returns : Object} visit{ Params : ASTInclusiveOrExpression,Object Returns : Object} visit{ Params : ASTExclusiveOrExpression,Object Returns : Object} visit{ Params : ASTAndExpression,Object Returns : Object} visit{ Params : ASTEqualityExpression,Object Returns : Object} visit{ Params : ASTInstanceOfExpression,Object Returns : Object} visit{ Params : ASTRelationalExpression,Object Returns : Object} visit{ Params : ASTShiftExpression,Object Returns : Object} visit{ Params : ASTAdditiveExpression,Object Returns : Object} visit{ Params : ASTMultiplicativeExpression,Object Returns : Object} visit{ Params : ASTUnaryExpression,Object Returns : Object} visit{ Params : ASTPreIncrementExpression,Object Returns : Object} visit{ Params : ASTPreDecrementExpression,Object Returns : Object} visit{ Params : ASTUnaryExpressionNotPlusMinus,Object Returns : Object} visit{ Params : ASTCastLookahead,Object Returns : Object} visit{ Params : ASTPostfixExpression,Object Returns : Object} visit{ Params : ASTCastExpression,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} visit{ Params : ASTBooleanLiteral,Object Returns : Object} visit{ Params : ASTNullLiteral,Object Returns : Object} visit{ Params : ASTArguments,Object Returns : Object} visit{ Params : ASTArgumentList,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} visit{ Params : ASTArrayDimsAndInits,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTLabeledStatement,Object Returns : Object} visit{ Params : ASTBlock,Object Returns : Object} visit{ Params : ASTBlockStatement,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTEmptyStatement,Object Returns : Object} visit{ Params : ASTStatementExpression,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTSwitchLabel,Object Returns : Object} visit{ Params : ASTIfStatement,Object Returns : Object} visit{ Params : ASTWhileStatement,Object Returns : Object} visit{ Params : ASTDoStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTForInit,Object Returns : Object} visit{ Params : ASTStatementExpressionList,Object Returns : Object} visit{ Params : ASTForUpdate,Object Returns : Object} visit{ Params : ASTBreakStatement,Object Returns : Object} visit{ Params : ASTContinueStatement,Object Returns : Object} visit{ Params : ASTReturnStatement,Object Returns : Object} visit{ Params : ASTThrowStatement,Object Returns : Object} visit{ Params : ASTSynchronizedStatement,Object Returns : Object} visit{ Params : ASTTryStatement,Object Returns : Object} ,,,,,JavaParserVisitor ,,,,
JRefactory,org.acm.seguin.tools.stub,StubPrompter,1,1,0,0,0,false,JDialog ,ActionListener ,0 ,filename: JTextArea result: File ,actionPerformed{ Params : ActionEvent Returns : void} main{ Params : String[] Returns : void} ,,main ,,,ActionListener ,File ,,File ,JLabel JLabel JLabel JLabel JLabel JTextArea JButton JButton File StubGenerator JFileChooser ExtensionFileFilter ExtensionFileFilter StubPrompter File 
JRefactory,org.acm.seguin.uml,ClassIcon,1,1,0,0,0,false,UMLIcon ,0 ,0 ,,paintIcon{ Params : Component,Graphics,int,int Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.uml,ConvertAdapter,1,1,0,0,0,false,0 ,ActionListener ,0 ,packagePanel: UMLPackage typePanel: UMLType fieldPanel: UMLField ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,UMLField ,,UMLField ,
JRefactory,org.acm.seguin.uml,InterfaceIcon,1,1,0,0,0,false,UMLIcon ,0 ,0 ,,paintIcon{ Params : Component,Graphics,int,int Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.uml,ISourceful,2,1,0,0,0,true,UMLIcon ,0 ,0 ,,getSourceSummary{ Params :  Returns : Summary} ,,,,,,,,,
JRefactory,org.acm.seguin.uml.jpg,Save,1,1,0,0,0,false,0 ,0 ,0 ,filename: String diagram: UMLPackage ,run{ Params :  Returns : void} ,,,,,,UMLPackage ,,UMLPackage ,BufferedImage BufferedOutputStream FileOutputStream 
JRefactory,org.acm.seguin.uml.jpg,SaveAdapter,1,1,0,0,0,false,0 ,ActionListener ,0 ,diagram: UMLPackage directory: File ,actionPerformed{ Params : ActionEvent Returns : void} getFilename{ Params :  Returns : String} ,,,,,ActionListener ,,,,Save JFileChooser ExtensionFileFilter File 
JRefactory,org.acm.seguin.uml.line,AssociationRelationship,1,1,0,0,0,false,SegmentedLine ,0 ,0 ,field: UMLField dead: boolean ,getField{ Params :  Returns : UMLField} paint{ Params : Graphics Returns : void} save{ Params : PrintWriter Returns : void} delete{ Params :  Returns : void} drawArrow{ Params : Graphics Returns : void} updateEnd{ Params :  Returns : void} ,,,,,,boolean ,,boolean ,
JRefactory,org.acm.seguin.uml.line,DragPanelAdapter,1,1,0,0,0,false,0 ,MouseListener MouseMotionListener ,0 ,panel: EndPointPanel parent: LinedPanel mouseStart: Point panelStart: Point ,mouseClicked{ Params : MouseEvent Returns : void} mouseEntered{ Params : MouseEvent Returns : void} mouseExited{ Params : MouseEvent Returns : void} mousePressed{ Params : MouseEvent Returns : void} mouseReleased{ Params : MouseEvent Returns : void} mouseDragged{ Params : MouseEvent Returns : void} mouseMoved{ Params : MouseEvent Returns : void} ,,,,,MouseListener MouseMotionListener ,Point ,,Point ,
JRefactory,org.acm.seguin.uml.line,EndPointPanel,1,1,1,0,0,false,ScalablePanel ,0 ,0 ,,setSelected{ Params : boolean Returns : void} isSelected{ Params :  Returns : boolean} getUnscaledLocation{ Params :  Returns : Point} ,,,,setSelected isSelected ,,,,,
JRefactory,org.acm.seguin.uml.line,ImplementsRelationship,1,1,0,0,0,false,SegmentedLine ,0 ,0 ,dashedStroke: Stroke ,paint{ Params : Graphics Returns : void} drawStartSegment{ Params : Graphics Returns : void} drawArrowHead{ Params : Graphics Returns : void} scale{ Params : double Returns : void} ,,,,,,Stroke ,,Stroke ,BasicStroke BasicStroke 
JRefactory,org.acm.seguin.uml.line,InheretenceRelationship,1,1,0,0,0,false,SegmentedLine ,0 ,0 ,,paint{ Params : Graphics Returns : void} drawArrow{ Params : Graphics Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.uml.line,LabelSizeComputation,1,1,0,0,0,false,0 ,0 ,0 ,g: Graphics singleton: LabelSizeComputation ,compute{ Params : String,Font Returns : TextInfo} computeHeight{ Params : String,Font Returns : int} get{ Params :  Returns : LabelSizeComputation} init{ Params :  Returns : void} ,,get init ,,,,,,,BufferedImage TextInfo LabelSizeComputation 
JRefactory,org.acm.seguin.uml.line,LinedPanel,1,1,1,0,0,false,JPanel ,0 ,0 ,endPoints: LinkedList lineList: LinkedList ,hit{ Params : Point Returns : void} drag{ Params : Point Returns : void} drop{ Params :  Returns : void} add{ Params : EndPointPanel Returns : void} add{ Params : SegmentedLine Returns : void} scale{ Params : double Returns : void} shift{ Params : int,int Returns : void} clear{ Params :  Returns : void} deselectAll{ Params :  Returns : void} getLines{ Params :  Returns : Iterator} getEndPoints{ Params :  Returns : Iterator} ,,,,hit drag drop ,,LinkedList ,,LinkedList ,LinkedList LinkedList LinkedList LinkedList LinkedList LinkedList LinkedList LinkedList 
JRefactory,org.acm.seguin.uml.line,LineMouseAdapter,1,1,0,0,0,false,0 ,MouseListener MouseMotionListener ,0 ,panel: LinedPanel ,mouseClicked{ Params : MouseEvent Returns : void} mouseEntered{ Params : MouseEvent Returns : void} mouseExited{ Params : MouseEvent Returns : void} mousePressed{ Params : MouseEvent Returns : void} mouseReleased{ Params : MouseEvent Returns : void} mouseDragged{ Params : MouseEvent Returns : void} mouseMoved{ Params : MouseEvent Returns : void} ,,,,,MouseListener MouseMotionListener ,LinedPanel ,,LinedPanel ,
JRefactory,org.acm.seguin.uml.line,ScalablePanel,1,0,1,0,0,false,JPanel ,0 ,0 ,scale: double inShapeChange: boolean absoluteWidth: int absoluteHeight: int inScaling: boolean absoluteX: int absoluteY: int ,setLocation{ Params : int,int Returns : void} setLocation{ Params : Point Returns : void} setSize{ Params : int,int Returns : void} setSize{ Params : Dimension Returns : void} setBounds{ Params : int,int,int,int Returns : void} setBounds{ Params : Rectangle Returns : void} shift{ Params : int,int Returns : void} scale{ Params : double Returns : void} move{ Params : int,int Returns : void} resize{ Params : int,int Returns : void} resize{ Params : Dimension Returns : void} reshape{ Params : int,int,int,int Returns : void} getScale{ Params :  Returns : double} scaleInteger{ Params : int Returns : int} getUnscaledBounds{ Params :  Returns : Rectangle} getCoordinate{ Params : int,int Returns : int} unscaleInteger{ Params : int Returns : int} init{ Params :  Returns : void} ,,,,,,int ,,int ,
JRefactory,org.acm.seguin.uml.line,Segment,1,0,0,0,0,false,0 ,0 ,0 ,A0: double A1: double B0: double B1: double m: double ,getPoint{ Params : double Returns : Point} getParamFromDistance{ Params : double Returns : double} reset{ Params : Rectangle,Rectangle Returns : void} reset{ Params : Point,Point Returns : void} reset{ Params : Rectangle,Point Returns : void} reset{ Params : Point,Rectangle Returns : void} intersect{ Params : Rectangle Returns : double} distanceToPoint{ Params : Point Returns : double} findFromEnd{ Params : double Returns : double} aboveLine{ Params : double,double Returns : Point} belowLine{ Params : double,double Returns : Point} inRectangle{ Params : double,Rectangle Returns : boolean} ,,,,,,double ,,double ,Point Point Point Point Point 
JRefactory,org.acm.seguin.uml.line,SegmentedLine,1,1,0,0,0,false,0 ,ComponentListener ,0 ,vertices: Vertex Xs: int Ys: int startPanel: EndPointPanel endPanel: EndPointPanel activeVertex: int workingSegment: Segment scalingFactor: double SHORT_BACK: double ,isBothEndsSelected{ Params :  Returns : boolean} paint{ Params : Graphics Returns : void} select{ Params : boolean Returns : void} hit{ Params : Point Returns : boolean} drag{ Params : Point Returns : void} drop{ Params :  Returns : void} componentHidden{ Params : ComponentEvent Returns : void} componentMoved{ Params : ComponentEvent Returns : void} componentResized{ Params : ComponentEvent Returns : void} componentShown{ Params : ComponentEvent Returns : void} save{ Params : PrintWriter Returns : void} match{ Params : EndPointPanel,EndPointPanel Returns : boolean} load{ Params : String Returns : void} shift{ Params : int,int Returns : void} scale{ Params : double Returns : void} getShortPoint{ Params :  Returns : Point} getArrowPointAbove{ Params :  Returns : Point} getArrowPointBelow{ Params :  Returns : Point} updateEnd{ Params :  Returns : void} drawSingleSegment{ Params : Graphics Returns : void} drawStartSegment{ Params : Graphics Returns : void} paintCentral{ Params : Graphics,int[],int[],int Returns : void} drawArrow{ Params : Graphics Returns : void} saveStartPanel{ Params : PrintWriter Returns : void} saveEndPanel{ Params : PrintWriter Returns : void} savePanel{ Params : PrintWriter,EndPointPanel Returns : void} saveVertices{ Params : PrintWriter Returns : void} initEndPoints{ Params :  Returns : void} updateStart{ Params :  Returns : void} insertAt{ Params : int,Vertex Returns : void} hitVertex{ Params : Point Returns : int} hitSegment{ Params : Point Returns : int} shouldDelete{ Params : int Returns : boolean} deleteVertex{ Params : int Returns : void} ,,,,,ComponentListener ,,,,Segment Vertex Point Vertex Point Vertex Point Vertex StringTokenizer StringTokenizer Vertex Point Vertex Point Vertex Vertex 
JRefactory,org.acm.seguin.uml.line,SizableLabel,1,1,0,0,0,false,ScalablePanel ,0 ,0 ,bufferCreated: boolean scaledImage: Image foreground: Color background: Color font: Font height: int width: int text: String align: int ascent: int defaultFont: Font defaultColor: Color ,setSLForeground{ Params : Color Returns : void} setSLFont{ Params : Font Returns : void} setText{ Params : String Returns : void} setSLHorizontalAlignment{ Params : int Returns : void} getText{ Params :  Returns : String} getPreferredSize{ Params :  Returns : Dimension} paint{ Params : Graphics Returns : void} print{ Params : Graphics,int,int Returns : void} scale{ Params : double Returns : void} getParentBackground{ Params :  Returns : Color} createBuffer{ Params :  Returns : void} determineSize{ Params :  Returns : void} debug{ Params :  Returns : void} init{ Params :  Returns : void} ,,init ,,,,,,,Dimension Dimension BufferedImage Font Color 
JRefactory,org.acm.seguin.uml.line,TextInfo,1,0,0,0,0,false,0 ,0 ,0 ,width: int height: int ascent: int ,,,,,,,,,,
JRefactory,org.acm.seguin.uml.line,Vertex,1,1,0,0,0,false,0 ,0 ,0 ,point: Point selected: boolean activated: boolean rescaled: boolean scale: double computed: Point near: double vertexSizeHalf: int vertexSize: int ,isSelected{ Params :  Returns : boolean} isActive{ Params :  Returns : boolean} paint{ Params : Graphics Returns : void} hit{ Params : Point Returns : boolean} move{ Params : Point Returns : void} save{ Params : PrintWriter Returns : void} shift{ Params : int,int Returns : void} scale{ Params : double Returns : void} getX{ Params :  Returns : int} getY{ Params :  Returns : int} getPoint{ Params :  Returns : Point} select{ Params : boolean Returns : void} active{ Params : boolean Returns : void} setNear{ Params : double Returns : void} setVertexSize{ Params : int Returns : void} ,,setNear setVertexSize ,,,,,,,Point 
JRefactory,org.acm.seguin.uml.loader,Reloader,2,1,0,0,0,true,0 ,0 ,0 ,,reload{ Params :  Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.uml.loader,ReloaderSingleton,1,1,0,0,0,false,0 ,0 ,0 ,isFirstTime: boolean singleton: Reloader ,reload{ Params :  Returns : void} register{ Params : Reloader Returns : void} ,,reload register ,,,,,,,
JRefactory,org.acm.seguin.uml,MethodMetricsListener,1,1,0,0,0,false,PopupMenuListener ,0 ,0 ,methodSummary: MethodSummary ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,,MethodSummary ,,MethodSummary ,MethodMetricsFrame 
JRefactory,org.acm.seguin.uml,PackageLoader,1,0,0,0,0,false,Thread ,0 ,0 ,packagePanel: UMLPackage defaultX: int defaultY: int loaded: boolean filename: String loadSummary: PackageSummary loadFile: File loadStream: InputStream ,run{ Params :  Returns : void} start{ Params : PackageSummary Returns : void} start{ Params : String Returns : void} start{ Params : InputStream Returns : void} getFile{ Params :  Returns : File} getUMLType{ Params : TypeDeclSummary Returns : UMLType} getLocation{ Params : UMLType,TypeSummary Returns : Point} load{ Params : PackageSummary Returns : void} load{ Params : File Returns : void} load{ Params : InputStream Returns : void} defaultPositions{ Params : PackageSummary Returns : void} addFile{ Params : FileSummary Returns : void} addType{ Params : TypeSummary,boolean Returns : UMLType} loadInheretence{ Params :  Returns : void} loadImplements{ Params :  Returns : void} loadPositions{ Params : File Returns : void} loadPositions{ Params : InputStream Returns : void} loadPositions{ Params : BufferedReader Returns : void} positionPanel{ Params : String Returns : void} positionLine{ Params : String Returns : void} positionAttribute{ Params : String Returns : void} loadVersion{ Params : String Returns : void} ,,,,,,InputStream ,,InputStream ,File File File File Point UMLType InheretenceRelationship InheretenceRelationship ImplementsRelationship FileReader BufferedReader InputStreamReader BufferedReader StringTokenizer StringTokenizer StringTokenizer StringTokenizer StringTokenizer StringTokenizer StringTokenizer 
JRefactory,org.acm.seguin.uml,PackageMetricsListener,1,1,0,0,0,false,PopupMenuListener ,0 ,0 ,packageSummary: PackageSummary ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,,PackageSummary ,,PackageSummary ,PackageMetricsFrame 
JRefactory,org.acm.seguin.uml,PackageSummaryListModel,1,1,0,0,0,false,AbstractListModel ,0 ,0 ,orderedMap: TreeMap array: PackageSummary ready: boolean ,getElementAt{ Params : int Returns : Object} getSize{ Params :  Returns : int} add{ Params : PackageSummary Returns : void} prepare{ Params :  Returns : void} ,,,,,,boolean ,,boolean ,TreeMap 
JRefactory,org.acm.seguin.uml,PopupMenuListener,1,1,0,0,0,false,MouseAdapter ,ActionListener ,0 ,menu: JPopupMenu menuItem: JMenuItem ,actionPerformed{ Params : ActionEvent Returns : void} mouseEntered{ Params : MouseEvent Returns : void} mouseExited{ Params : MouseEvent Returns : void} ,,,,,ActionListener ,JMenuItem ,,JMenuItem ,
JRefactory,org.acm.seguin.uml.print,PrintAdapter,1,1,0,0,0,false,0 ,ActionListener ,0 ,currentPackage: UMLPackage ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,UMLPackage ,,UMLPackage ,PrintingThread 
JRefactory,org.acm.seguin.uml.print,PrintingThread,1,1,0,0,0,false,Thread ,0 ,0 ,currentPackage: UMLPackage ,run{ Params :  Returns : void} ,,,,,,UMLPackage ,,UMLPackage ,Book UMLPagePrinter 
JRefactory,org.acm.seguin.uml.print,PrintSetupAdapter,1,1,0,0,0,false,0 ,ActionListener ,0 ,,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,,,,
JRefactory,org.acm.seguin.uml.print,UMLPagePrinter,1,1,0,0,0,false,PagePrinter ,0 ,0 ,currentPackage: UMLPackage ,calculatePageCount{ Params : PageFormat Returns : int} print{ Params : Graphics,PageFormat,int Returns : int} getPageFormat{ Params : boolean Returns : PageFormat} getPageHeight{ Params :  Returns : int} ,,getPageFormat getPageHeight ,,,,UMLPackage ,,UMLPackage ,
JRefactory,org.acm.seguin.uml,ProjectMetricsListener,1,1,0,0,0,false,PopupMenuListener ,0 ,0 ,,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,,,,,ProjectMetricsFrame 
JRefactory,org.acm.seguin.uml,ProtectionIcon,1,1,0,0,0,false,UMLIcon ,0 ,0 ,protection: int type: int CIRCLE: int LETTER: int ,setProtection{ Params : int Returns : void} paintIcon{ Params : Component,Graphics,int,int Returns : void} drawCircleIcon{ Params : Graphics,int,int Returns : void} drawLetterIcon{ Params : Graphics,int,int Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.uml.refactor,AddAbstractParentDialog,1,1,0,0,0,false,ClassNameDialog ,0 ,0 ,typeArray: TypeSummary ,getWindowTitle{ Params :  Returns : String} getLabelText{ Params :  Returns : String} createRefactoring{ Params :  Returns : Refactoring} ,,,,,,TypeSummary[] ,,TypeSummary[] ,
JRefactory,org.acm.seguin.uml.refactor,AddChildClassDialog,1,1,0,0,0,false,ClassNameDialog ,0 ,0 ,typeSummary: TypeSummary packageNameBox: JComboBox ,getWindowTitle{ Params :  Returns : String} getLabelText{ Params :  Returns : String} createRefactoring{ Params :  Returns : Refactoring} ,,,,,,JComboBox ,,JComboBox ,PackageList 
JRefactory,org.acm.seguin.uml.refactor,AddChildClassListener,1,1,0,0,0,false,DialogViewListener ,0 ,0 ,current: UMLPackage typeSummary: TypeSummary ,createDialog{ Params :  Returns : JDialog} ,,,,,,TypeSummary ,,TypeSummary ,AddChildClassDialog 
JRefactory,org.acm.seguin.uml.refactor,AddMoveClassListener,1,1,0,0,0,false,DialogViewListener ,0 ,0 ,typeArray: TypeSummary ,createDialog{ Params :  Returns : JDialog} ,,,,,,TypeSummary[] ,,TypeSummary[] ,NewPackageDialog 
JRefactory,org.acm.seguin.uml.refactor,AddParentClassListener,1,1,0,0,0,false,DialogViewListener ,0 ,0 ,current: UMLPackage typeArray: TypeSummary ,createDialog{ Params :  Returns : JDialog} ,,,,,,TypeSummary[] ,,TypeSummary[] ,AddAbstractParentDialog 
JRefactory,org.acm.seguin.uml.refactor,AddRenameClassListener,1,1,0,0,0,false,DialogViewListener ,0 ,0 ,current: UMLPackage typeSummary: TypeSummary ,createDialog{ Params :  Returns : JDialog} ,,,,,,TypeSummary ,,TypeSummary ,RenameClassDialog 
JRefactory,org.acm.seguin.uml.refactor,ChildClassCheckboxPanel,1,0,0,0,0,false,JPanel ,0 ,0 ,parentType: TypeSummary childrenCheckboxes: LinkedList ,getCheckboxes{ Params :  Returns : Iterator} ,,,,,,LinkedList ,,LinkedList ,LinkedList TypeCheckbox GridLayout 
JRefactory,org.acm.seguin.uml.refactor,ChildrenCheckboxDialog,1,0,1,0,0,false,RefactoringDialog ,0 ,0 ,children: ChildClassCheckboxPanel parentType: TypeSummary ,,,,,,,,,,BorderLayout ChildClassCheckboxPanel JButton JButton 
JRefactory,org.acm.seguin.uml.refactor,ClassNameDialog,1,1,1,0,0,false,RefactoringDialog ,0 ,0 ,newName: JTextField ,getWindowTitle{ Params :  Returns : String} getLabelText{ Params :  Returns : String} getClassName{ Params :  Returns : String} ,,,,getWindowTitle getLabelText ,,JTextField ,,JTextField ,GridBagLayout GridBagConstraints JLabel JTextField JButton JButton 
JRefactory,org.acm.seguin.uml.refactor,DialogViewListener,1,1,1,0,0,false,PopupMenuListener ,0 ,0 ,,actionPerformed{ Params : ActionEvent Returns : void} createDialog{ Params :  Returns : JDialog} ,,,,createDialog ,,,,,
JRefactory,org.acm.seguin.uml.refactor,ExtractInterfaceDialog,1,1,0,0,0,false,ClassNameDialog ,0 ,0 ,typeArray: TypeSummary packageNameBox: JComboBox ,getWindowTitle{ Params :  Returns : String} getLabelText{ Params :  Returns : String} createRefactoring{ Params :  Returns : Refactoring} ,,,,,,JComboBox ,,JComboBox ,PackageList 
JRefactory,org.acm.seguin.uml.refactor,ExtractInterfaceListener,1,1,0,0,0,false,DialogViewListener ,0 ,0 ,current: UMLPackage typeArray: TypeSummary ,createDialog{ Params :  Returns : JDialog} ,,,,,,TypeSummary[] ,,TypeSummary[] ,ExtractInterfaceDialog 
JRefactory,org.acm.seguin.uml.refactor,ExtractMethodDialog,1,1,1,0,0,false,RefactoringDialog ,0 ,0 ,newName: JTextField emr: ExtractMethodRefactoring list: OrderableList privateButton: JRadioButton packageButton: JRadioButton protectedButton: JRadioButton publicButton: JRadioButton returnList: JList returnTextField: JTextField signatureLabel: JLabel sua: SignatureUpdateAdapter sizer: JLabel originalSize: Dimension ,getWindowTitle{ Params :  Returns : String} getLabelText{ Params :  Returns : String} update{ Params :  Returns : void} setStringInIDE{ Params : String Returns : void} getStringFromIDE{ Params :  Returns : String} getSelectionFromIDE{ Params :  Returns : String} followup{ Params : Refactoring Returns : void} createRefactoring{ Params :  Returns : Refactoring} init{ Params :  Returns : void} initRadioButtons{ Params :  Returns : JPanel} ,,,,setStringInIDE getStringFromIDE getSelectionFromIDE ,,Dimension ,,Dimension ,SignatureUpdateAdapter GridBagLayout GridBagConstraints Insets JLabel Insets JTextField JLabel Insets OrderableList VariableListCellRenderer JLabel JLabel JLabel Insets Insets JList JTextField JLabel Insets JLabel Insets JButton JButton JLabel RefactoringException RefactoringException JPanel FlowLayout JLabel ButtonGroup JRadioButton JRadioButton JRadioButton JRadioButton 
JRefactory,org.acm.seguin.uml.refactor,MoveMethodDialog,1,0,0,0,0,false,RefactoringDialog ,0 ,0 ,params: ParameterPanel methodSummary: MethodSummary ,createRefactoring{ Params :  Returns : Refactoring} ,,,,,,MethodSummary ,,MethodSummary ,BorderLayout ParameterPanel JButton JButton 
JRefactory,org.acm.seguin.uml.refactor,MoveMethodListener,1,1,0,0,0,false,DialogViewListener ,0 ,0 ,current: UMLPackage typeSummary: TypeSummary methodSummary: MethodSummary ,createDialog{ Params :  Returns : JDialog} ,,,,,,MethodSummary ,,MethodSummary ,MoveMethodDialog 
JRefactory,org.acm.seguin.uml.refactor,NewPackageDialog,1,1,0,0,0,false,JDialog ,ActionListener ,0 ,packageName: JComboBox typeArray: TypeSummary ,actionPerformed{ Params : ActionEvent Returns : void} repackage{ Params : String Returns : void} addType{ Params : TypeSummary,MoveClass Returns : String} ,,,,,ActionListener ,TypeSummary[] ,,TypeSummary[] ,GridBagLayout PackageList JButton GridBagConstraints JButton GridBagConstraints JPanel Dimension File 
JRefactory,org.acm.seguin.uml.refactor,NoInputRefactoringListener,1,1,1,0,0,false,PopupMenuListener ,0 ,0 ,currentPackage: UMLPackage ,actionPerformed{ Params : ActionEvent Returns : void} createRefactoring{ Params :  Returns : Refactoring} updateSummaries{ Params :  Returns : void} runRefactoring{ Params :  Returns : void} ,,,,createRefactoring ,,UMLPackage ,,UMLPackage ,
JRefactory,org.acm.seguin.uml.refactor,PackageList,1,0,0,0,0,false,0 ,0 ,0 ,,add{ Params : JDialog Returns : JComboBox} addPackages{ Params : JComboBox Returns : void} ,,,,,,,,,GridBagConstraints JLabel JComboBox JPanel Dimension TreeSet 
JRefactory,org.acm.seguin.uml.refactor,ParameterPanel,1,0,0,0,0,false,JPanel ,0 ,0 ,methodSummary: MethodSummary children: LinkedList ,get{ Params :  Returns : ParameterSummary} ,,,,,,LinkedList ,,LinkedList ,LinkedList ButtonGroup ParameterRadioButton GridLayout 
JRefactory,org.acm.seguin.uml.refactor,ParameterRadioButton,1,0,0,0,0,false,JRadioButton ,0 ,0 ,summary: ParameterSummary ,getParameterSummary{ Params :  Returns : ParameterSummary} ,,,,,,ParameterSummary ,,ParameterSummary ,
JRefactory,org.acm.seguin.uml.refactor,PushDownFieldDialog,1,0,0,0,0,false,ChildrenCheckboxDialog ,0 ,0 ,field: String ,createRefactoring{ Params :  Returns : Refactoring} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.uml.refactor,PushDownFieldListener,1,1,0,0,0,false,DialogViewListener ,0 ,0 ,current: UMLPackage typeSummary: TypeSummary fieldName: String ,createDialog{ Params :  Returns : JDialog} ,,,,,,String ,,String ,PushDownFieldDialog 
JRefactory,org.acm.seguin.uml.refactor,PushDownMethodDialog,1,0,0,0,0,false,ChildrenCheckboxDialog ,0 ,0 ,methodSummary: MethodSummary ,createRefactoring{ Params :  Returns : Refactoring} ,,,,,,MethodSummary ,,MethodSummary ,
JRefactory,org.acm.seguin.uml.refactor,PushDownMethodListener,1,1,0,0,0,false,DialogViewListener ,0 ,0 ,current: UMLPackage typeSummary: TypeSummary methodSummary: MethodSummary ,createDialog{ Params :  Returns : JDialog} ,,,,,,MethodSummary ,,MethodSummary ,PushDownMethodDialog 
JRefactory,org.acm.seguin.uml.refactor,PushUpAbstractMethodListener,1,1,0,0,0,false,NoInputRefactoringListener ,0 ,0 ,methodSummary: MethodSummary ,createRefactoring{ Params :  Returns : Refactoring} ,,,,,,MethodSummary ,,MethodSummary ,
JRefactory,org.acm.seguin.uml.refactor,PushUpFieldListener,1,1,0,0,0,false,NoInputRefactoringListener ,0 ,0 ,typeSummary: TypeSummary name: String ,createRefactoring{ Params :  Returns : Refactoring} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.uml.refactor,PushUpMethodListener,1,1,0,0,0,false,NoInputRefactoringListener ,0 ,0 ,methodSummary: MethodSummary ,createRefactoring{ Params :  Returns : Refactoring} ,,,,,,MethodSummary ,,MethodSummary ,
JRefactory,org.acm.seguin.uml.refactor,RefactoringDialog,1,0,1,0,0,false,JDialog ,ActionListener ,0 ,currentPackage: UMLPackage ,actionPerformed{ Params : ActionEvent Returns : void} getUMLPackage{ Params :  Returns : UMLPackage} createRefactoring{ Params :  Returns : Refactoring} updateSummaries{ Params :  Returns : void} runRefactoring{ Params :  Returns : void} followup{ Params : Refactoring Returns : void} ,,,,createRefactoring ,ActionListener ,UMLPackage ,,UMLPackage ,
JRefactory,org.acm.seguin.uml.refactor,RemoveClassListener,1,1,0,0,0,false,NoInputRefactoringListener ,0 ,0 ,typeSummary: TypeSummary ,createRefactoring{ Params :  Returns : Refactoring} ,,,,,,TypeSummary ,,TypeSummary ,
JRefactory,org.acm.seguin.uml.refactor,RenameClassDialog,1,1,0,0,0,false,ClassNameDialog ,0 ,0 ,typeSummary: TypeSummary ,getWindowTitle{ Params :  Returns : String} getLabelText{ Params :  Returns : String} createRefactoring{ Params :  Returns : Refactoring} updateSummaries{ Params :  Returns : void} ,,,,,,TypeSummary ,,TypeSummary ,File 
JRefactory,org.acm.seguin.uml.refactor,RenameFieldDialog,1,1,0,0,0,false,ClassNameDialog ,0 ,0 ,fieldSummary: FieldSummary ,getWindowTitle{ Params :  Returns : String} getLabelText{ Params :  Returns : String} createRefactoring{ Params :  Returns : Refactoring} updateSummaries{ Params :  Returns : void} ,,,,,,FieldSummary ,,FieldSummary ,
JRefactory,org.acm.seguin.uml.refactor,RenameFieldListener,1,1,0,0,0,false,DialogViewListener ,0 ,0 ,current: UMLPackage fieldSummary: FieldSummary ,createDialog{ Params :  Returns : JDialog} ,,,,,,FieldSummary ,,FieldSummary ,RenameFieldDialog 
JRefactory,org.acm.seguin.uml.refactor,RenameParameterDialog,1,0,0,0,0,false,ClassNameDialog ,0 ,0 ,param: ParameterSummary method: MethodSummary parameterSelection: JComboBox ,getWindowTitle{ Params :  Returns : String} getLabelText{ Params :  Returns : String} createRefactoring{ Params :  Returns : Refactoring} ,,,,,,JComboBox ,,JComboBox ,GridBagConstraints JLabel JComboBox 
JRefactory,org.acm.seguin.uml.refactor,RenameParameterListener,1,1,0,0,0,false,DialogViewListener ,0 ,0 ,param: ParameterSummary method: MethodSummary packageDiagram: UMLPackage ,createDialog{ Params :  Returns : JDialog} ,,,,,,UMLPackage ,,UMLPackage ,RenameParameterDialog RenameParameterDialog 
JRefactory,org.acm.seguin.uml.refactor,SignatureUpdateAdapter,1,0,0,0,0,false,0 ,ListDataListener ActionListener FocusListener ListSelectionListener DocumentListener ,0 ,emd: ExtractMethodDialog ,intervalAdded{ Params : ListDataEvent Returns : void} intervalRemoved{ Params : ListDataEvent Returns : void} contentsChanged{ Params : ListDataEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} focusGained{ Params : FocusEvent Returns : void} focusLost{ Params : FocusEvent Returns : void} valueChanged{ Params : ListSelectionEvent Returns : void} insertUpdate{ Params : DocumentEvent Returns : void} removeUpdate{ Params : DocumentEvent Returns : void} changedUpdate{ Params : DocumentEvent Returns : void} ,,,,,ListDataListener ActionListener FocusListener ListSelectionListener DocumentListener ,ExtractMethodDialog ,,ExtractMethodDialog ,
JRefactory,org.acm.seguin.uml.refactor,TypeCheckbox,1,0,0,0,0,false,JCheckBox ,0 ,0 ,type: TypeSummary ,getTypeSummary{ Params :  Returns : TypeSummary} getFullName{ Params :  Returns : String} ,,,,,,TypeSummary ,,TypeSummary ,StringBuffer 
JRefactory,org.acm.seguin.uml.refactor,VariableListCellRenderer,1,0,0,0,0,false,JLabel ,ListCellRenderer ,0 ,,getListCellRendererComponent{ Params : JList,Object,int,boolean,boolean Returns : Component} ,,,,,ListCellRenderer ,,,,
JRefactory,org.acm.seguin.uml,RoleHolder,1,1,0,0,0,false,JPanel ,0 ,0 ,labels: LinkedList wide: int high: int popupMenuListener: UMLMouseAdapter panelDragAdapter: DragPanelAdapter ,getPreferredSize{ Params :  Returns : Dimension} getMinimumSize{ Params :  Returns : Dimension} add{ Params : String Returns : void} hasAny{ Params :  Returns : boolean} resetWidth{ Params : int Returns : void} print{ Params : Graphics,int,int Returns : void} scale{ Params : double Returns : void} ,,,,,,DragPanelAdapter ,,DragPanelAdapter ,LinkedList Dimension SizableLabel 
JRefactory,org.acm.seguin.uml,SaveMenuSelection,1,1,0,0,0,false,0 ,ActionListener ,0 ,panel: Saveable ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,ActionListener ,,,,
JRefactory,org.acm.seguin.uml,SelectedSummaryList,1,1,0,0,0,false,0 ,0 ,0 ,,list{ Params : UMLPackage,UMLType Returns : TypeSummary[]} getSelectedTypes{ Params : UMLPackage Returns : TypeSummary[]} ,,list getSelectedTypes ,,,,,,,
JRefactory,org.acm.seguin.uml,TypeMetricsListener,1,1,0,0,0,false,PopupMenuListener ,0 ,0 ,typeSummary: TypeSummary ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,,,TypeSummary ,,TypeSummary ,TypeMetricsFrame 
JRefactory,org.acm.seguin.uml,UMLField,1,1,0,0,0,false,UMLLine ,ISourceful ,0 ,summary: FieldSummary current: UMLPackage association: boolean parentDragAdapter: DragPanelAdapter fieldDragAdapter: DragPanelAdapter ,setAssociation{ Params : boolean Returns : void} getSummary{ Params :  Returns : FieldSummary} isAssociation{ Params :  Returns : boolean} isConvertable{ Params :  Returns : boolean} getType{ Params :  Returns : TypeSummary} getDefaultBackground{ Params :  Returns : Color} getSourceSummary{ Params :  Returns : org.acm.seguin.summary.Summary} ,,,,,ISourceful ,DragPanelAdapter ,,DragPanelAdapter ,DragPanelAdapter UMLMouseAdapter 
JRefactory,org.acm.seguin.uml,UMLIcon,1,1,1,0,0,false,0 ,Icon ,0 ,iconHeight: int iconWidth: int scale: double ,setScale{ Params : double Returns : void} getIconWidth{ Params :  Returns : int} getIconHeight{ Params :  Returns : int} paintIcon{ Params : Component,Graphics,int,int Returns : void} ,,,,paintIcon ,Icon ,,,,
JRefactory,org.acm.seguin.uml,UMLLine,1,1,0,0,0,false,EndPointPanel ,0 ,0 ,label: SizableLabel wide: int high: int icon: UMLIcon iconWidth: int iconHeight: int protection: int parent: UMLType font: Font PUBLIC: int PROTECTED_PRIVATE: int PROTECTED: int DEFAULT: int PRIVATE: int protectionColors: Color defaultFont: Font staticFont: Font abstractFont: Font titleFont: Font abstractTitleFont: Font iconMargin: int labelMargin: int ,setProtection{ Params : int Returns : void} setLabelText{ Params : String Returns : void} setLabelFont{ Params : Font Returns : void} setSelected{ Params : boolean Returns : void} getMinimumSize{ Params :  Returns : Dimension} getPreferredSize{ Params :  Returns : Dimension} getParentType{ Params :  Returns : UMLType} isSelected{ Params :  Returns : boolean} paint{ Params : Graphics Returns : void} print{ Params : Graphics,int,int Returns : void} addMouseListener{ Params : MouseListener Returns : void} removeMouseListener{ Params : MouseListener Returns : void} addMouseMotionListener{ Params : MouseMotionListener Returns : void} removeMouseMotionListener{ Params : MouseMotionListener Returns : void} scale{ Params : double Returns : void} getDefaultBackground{ Params :  Returns : Color} drawIcon{ Params : Graphics,int,int Returns : void} getProtectionCode{ Params : ModifierHolder Returns : int} getProtectionFont{ Params : boolean,ModifierHolder Returns : Font} getProtectionColor{ Params : int Returns : Color} initFonts{ Params :  Returns : void} ,,getProtectionCode getProtectionFont getProtectionColor initFonts ,,,,,,,SizableLabel ProtectionIcon Dimension Font Font Font Font Font 
JRefactory,org.acm.seguin.uml,UMLMethod,1,1,0,0,0,false,UMLLine ,ISourceful ,0 ,summary: MethodSummary current: UMLPackage ,getSummary{ Params :  Returns : MethodSummary} getSourceSummary{ Params :  Returns : org.acm.seguin.summary.Summary} ,,,,,ISourceful ,UMLPackage ,,UMLPackage ,UMLMouseAdapter 
JRefactory,org.acm.seguin.uml,UMLMouseAdapter,1,1,0,0,0,false,MouseAdapter ,0 ,0 ,current: UMLPackage type: UMLType child: JPanel ,mousePressed{ Params : MouseEvent Returns : void} ,,,,,,JPanel ,,JPanel ,UMLPopupMenu UMLPopupMenu 
JRefactory,org.acm.seguin.uml,UMLNestedType,1,1,0,0,0,false,UMLLine ,ISourceful ,0 ,summary: TypeSummary current: UMLPackage ,getSummary{ Params :  Returns : TypeSummary} getSourceSummary{ Params :  Returns : org.acm.seguin.summary.Summary} ,,,,,ISourceful ,UMLPackage ,,UMLPackage ,UMLMouseAdapter InterfaceIcon ClassIcon 
JRefactory,org.acm.seguin.uml,UMLPackage,1,1,0,0,0,false,LinedPanel ,Saveable ,0 ,summary: PackageSummary currentLine: SegmentedLine hasChanged: boolean packageName: String scrollPane: JScrollPane classListPanel: ClassListPanel first: boolean loading: boolean ,setDirty{ Params :  Returns : void} setScrollPane{ Params : JScrollPane Returns : void} setClassListPanel{ Params : ClassListPanel Returns : void} setLoading{ Params : boolean Returns : void} getPackageName{ Params :  Returns : String} getTypes{ Params :  Returns : UMLType[]} getMinimumSize{ Params :  Returns : Dimension} getPreferredSize{ Params :  Returns : Dimension} getSummary{ Params :  Returns : PackageSummary} getFile{ Params :  Returns : File} isDirty{ Params :  Returns : boolean} getTitle{ Params :  Returns : String} removeAssociation{ Params : UMLField Returns : void} paint{ Params : Graphics Returns : void} print{ Params : Graphics,int,int Returns : void} reload{ Params :  Returns : void} clear{ Params :  Returns : void} hit{ Params : Point Returns : void} drag{ Params : Point Returns : void} drop{ Params :  Returns : void} save{ Params :  Returns : void} jumpTo{ Params : TypeSummary Returns : void} findType{ Params : TypeSummary Returns : UMLType} find{ Params : String Returns : UMLType} find{ Params : String,String Returns : SegmentedLine} setSummary{ Params : PackageSummary Returns : void} updateClassListPanel{ Params :  Returns : void} defaultValues{ Params :  Returns : void} addMouseAdapter{ Params :  Returns : void} reset{ Params :  Returns : void} ,,,,,Saveable ,boolean ,,boolean ,PackageLoader PackageLoader PackageLoader Dimension PackageLoader PackageLoader File File File PrintWriter FileWriter LineMouseAdapter 
JRefactory,org.acm.seguin.uml,UMLPopupMenu,1,1,0,0,0,false,0 ,0 ,0 ,popupMenu: JPopupMenu activeComponent: JPanel current: UMLPackage ,getMenu{ Params :  Returns : JPopupMenu} getMetricsMenu{ Params : JPopupMenu Returns : JMenuItem} createPopupMenu{ Params :  Returns : JPopupMenu} addRefactorings{ Params : JPopupMenu Returns : void} getType{ Params :  Returns : UMLType} getTypeSummary{ Params :  Returns : TypeSummary} addFieldRefactorings{ Params : JPopupMenu Returns : void} addMethodRefactorings{ Params : JPopupMenu Returns : void} addTypeRefactorings{ Params : JPopupMenu Returns : void} ,,,,,,UMLPackage ,,UMLPackage ,JMenu JMenuItem ProjectMetricsListener JMenuItem PackageMetricsListener JMenuItem TypeMetricsListener JMenuItem MethodMetricsListener JPopupMenu JMenuItem JMenuItem PopupMenuListener ConvertAdapter JMenuItem SourceBrowserAdapter JMenu JMenuItem RenameFieldListener JMenuItem PushUpFieldListener JMenuItem PushDownFieldListener JMenu JMenuItem PopupMenuListener JMenuItem PushUpMethodListener JMenuItem PushUpAbstractMethodListener JMenuItem PushDownMethodListener JMenuItem MoveMethodListener JMenuItem JMenu JMenuItem RenameParameterListener JMenu JMenuItem AddRenameClassListener JMenuItem AddMoveClassListener JMenuItem AddParentClassListener JMenuItem AddChildClassListener JMenuItem RemoveClassListener JMenuItem ExtractInterfaceListener 
JRefactory,org.acm.seguin.uml,UMLType,1,1,0,0,0,false,EndPointPanel ,ISourceful ,0 ,borderWidth: int lineSize: int parent: UMLPackage nameLabel: SizableLabel roles: RoleHolder type: TypeSummary wide: int high: int titleHeight: int state: int defaultBG: Color selectedBG: Color foreignBG: Color selectedForeignBG: Color DEFAULT: int SELECTED: int FOREIGN: int TITLE_BORDER: int ,setSelected{ Params : boolean Returns : void} getSummary{ Params :  Returns : TypeSummary} getMinimumSize{ Params :  Returns : Dimension} getPreferredSize{ Params :  Returns : Dimension} getPackage{ Params :  Returns : UMLPackage} isSelected{ Params :  Returns : boolean} isForeign{ Params :  Returns : boolean} getBackgroundColor{ Params :  Returns : Color} getID{ Params :  Returns : String} getField{ Params : String Returns : UMLField} paint{ Params : Graphics Returns : void} print{ Params : Graphics,int,int Returns : void} resize{ Params :  Returns : void} select{ Params :  Returns : void} deselect{ Params :  Returns : void} toggleSelect{ Params :  Returns : void} save{ Params : PrintWriter Returns : void} load{ Params : String Returns : void} convertToAssociation{ Params : UMLPackage,UMLField Returns : AssociationRelationship} convertToAttribute{ Params : UMLPackage,UMLField Returns : void} scale{ Params : double Returns : void} getSourceSummary{ Params :  Returns : Summary} getPackageName{ Params :  Returns : String} getAttributeCount{ Params :  Returns : int} drawFrame{ Params : Graphics,int,int Returns : void} computeLineSize{ Params :  Returns : int} getFrameColor{ Params :  Returns : Color} initColors{ Params :  Returns : void} ,,getFrameColor initColors ,,,ISourceful ,,,,UMLMouseAdapter DragPanelAdapter SizableLabel RoleHolder UMLField UMLMethod UMLNestedType Dimension StringTokenizer UMLType AssociationRelationship Color Color Color 
JRefactory,org.acm.seguin.util,BackupTraversal,1,1,0,0,0,false,DirectoryTreeTraversal ,0 ,0 ,dest: String ,isTarget{ Params : File Returns : boolean} visit{ Params : File Returns : void} arriveAtDir{ Params : File Returns : void} getDestination{ Params : File Returns : String} main{ Params : String[] Returns : void} createDir{ Params : String Returns : void} deleteDir{ Params : String Returns : void} leaveDir{ Params : File Returns : void} ,,main ,,,,String ,,String ,File File FileCopy RefactoryInstaller BackupTraversal File File 
JRefactory,org.acm.seguin.util,Comparator,2,1,0,0,0,true,DirectoryTreeTraversal ,0 ,0 ,,compare{ Params : Object,Object Returns : int} ,,,,,,,,,
JRefactory,org.acm.seguin.util,FileSettings,1,1,0,0,0,false,0 ,Settings ,0 ,app: String type: String file: File lastModified: long props: Properties continuallyReload: boolean reloadNow: boolean parent: FileSettings map: Hashtable settingsRoot: File ,setContinuallyReload{ Params : boolean Returns : void} setReloadNow{ Params : boolean Returns : void} getKeys{ Params :  Returns : Enumeration} getString{ Params : String Returns : String} getInteger{ Params : String Returns : int} getDouble{ Params : String Returns : double} getBoolean{ Params : String Returns : boolean} setParent{ Params : FileSettings Returns : void} getSpecial{ Params : char Returns : char} isUpToDate{ Params :  Returns : boolean} load{ Params :  Returns : void} unescapeChars{ Params : String Returns : String} unicode{ Params : String,int Returns : char} octal{ Params : String,int Returns : char} setSettingsRoot{ Params : String Returns : void} setSettingsRoot{ Params : File Returns : void} getSettings{ Params : String,String Returns : FileSettings} getSettingsRoot{ Params :  Returns : String} main{ Params : String[] Returns : void} init{ Params :  Returns : void} initRootDir{ Params :  Returns : void} ,,setSettingsRoot setSettingsRoot getSettings getSettingsRoot main init initRootDir ,,,Settings ,,,,NoSettingsFileException File NoSettingsFileException File NoSettingsFileException SettingNotFoundException SettingNotFoundException Double SettingNotFoundException Boolean SettingNotFoundException Properties BufferedReader FileReader StringBuffer File FileSettings RefactoryInstaller FileSettings Hashtable File File File File File File 
JRefactory,org.acm.seguin.util,InsertionSortArray,1,1,0,0,0,false,0 ,0 ,0 ,,sort{ Params : Object[],Comparator Returns : void} insert{ Params : Object[],int,Comparator Returns : void} findSpot{ Params : Object[],int,Comparator Returns : int} insertAt{ Params : Object[],int,int Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.util,MissingSettingsException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,type: String app: String ,getType{ Params :  Returns : String} getApplication{ Params :  Returns : String} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.util,NoSettingsFileException,1,1,0,0,0,false,MissingSettingsException ,0 ,0 ,,getMessage{ Params :  Returns : String} ,,,,,,,,,
JRefactory,org.acm.seguin.util,SettingNotFoundException,1,1,0,0,0,false,MissingSettingsException ,0 ,0 ,key: String ,getMessage{ Params :  Returns : String} ,,,,,,String ,,String ,
JRefactory,org.acm.seguin.util,Settings,2,1,0,0,0,true,MissingSettingsException ,0 ,0 ,,getString{ Params : String Returns : String} getInteger{ Params : String Returns : int} getDouble{ Params : String Returns : double} getBoolean{ Params : String Returns : boolean} ,,,,,,,,,
JRefactory,org.acm.seguin.util,TextFormatter,1,1,0,0,0,false,0 ,0 ,0 ,,rightJustifyNumber{ Params : long,int Returns : String} ,,rightJustifyNumber ,,,,,,,StringBuffer 
JRefactory,org.acm.seguin.version,SourceSafe,1,1,0,0,0,false,0 ,VersionControl ,0 ,exeFile: String user: String ,contains{ Params : String Returns : boolean} add{ Params : String Returns : void} checkOut{ Params : String Returns : void} checkIn{ Params : String Returns : void} getProject{ Params : Runtime,String Returns : String} getFilename{ Params : String Returns : String} getPath{ Params : String Returns : String} changeProject{ Params : Runtime,String Returns : void} checkout{ Params : Runtime,String Returns : void} checkin{ Params : Runtime,String Returns : void} match{ Params : String,String Returns : int} compare{ Params : String,String Returns : boolean} isNotInSourceSafe{ Params : String Returns : boolean} executeLocate{ Params : Runtime,String Returns : BufferedReader} extractProjectName{ Params : String Returns : String} startSame{ Params : String,String Returns : boolean} main{ Params : String[] Returns : void} ,,main ,,,VersionControl ,String ,,String ,File File BufferedReader InputStreamReader SourceSafe 
JRefactory,org.acm.seguin.version,UserDirectedVersionControl,1,1,0,0,0,false,0 ,VersionControl ,0 ,,contains{ Params : String Returns : boolean} add{ Params : String Returns : void} checkIn{ Params : String Returns : void} checkOut{ Params : String Returns : void} ,,,,,VersionControl ,,,,
JRefactory,org.acm.seguin.version,VersionControl,2,1,0,0,0,true,0 ,VersionControl ,0 ,,contains{ Params : String Returns : boolean} add{ Params : String Returns : void} checkIn{ Params : String Returns : void} checkOut{ Params : String Returns : void} ,,,,,,,,,
JRefactory,org.acm.seguin.version,VersionControlCache,1,1,0,0,0,false,0 ,0 ,0 ,cache: Hashtable ADD: int CHECK_IN: int CHECK_OUT: int CHECK_IN_PROGRESS: int CHECK_OUT_PROGRESS: int ADD_PROGRESS: int ssc: VersionControlCache ,isInCache{ Params : String Returns : boolean} lookup{ Params : String Returns : int} add{ Params : String,int Returns : void} getCache{ Params :  Returns : VersionControlCache} init{ Params :  Returns : void} ,,getCache init ,,,,,,,Hashtable Integer VersionControlCache 
JRefactory,org.acm.seguin.version,VersionControlFactory,1,1,0,0,0,false,0 ,0 ,0 ,singleton: VersionControl ,get{ Params :  Returns : VersionControl} init{ Params :  Returns : void} ,,get init ,,,,,,,UserDirectedVersionControl 
JRefactory,org.apache.tools.ant.taskdefs.optional.javastyle,JavaStyle,1,1,0,0,0,false,MatchingTask ,0 ,0 ,file: File filesets: Vector verbosity: int quiet: boolean ,setFile{ Params : File Returns : void} setVerbose{ Params : boolean Returns : void} setQuiet{ Params : boolean Returns : void} addFileset{ Params : FileSet Returns : void} execute{ Params :  Returns : void} init{ Params :  Returns : void} styleFile{ Params : File Returns : void} styleFiles{ Params : File,String[] Returns : void} ,,,,,,boolean ,,boolean ,Vector BuildException RefactoryInstaller PrettyPrintFile File 
JRefactory,,PrettyPrinter,1,1,0,0,0,false,DirectoryTreeTraversal ,0 ,0 ,ppf: PrettyPrintFile ,main{ Params : String[] Returns : void} printHelpMessage{ Params :  Returns : void} prettyPrinter{ Params : String,boolean Returns : void} prettyPrinter{ Params : boolean Returns : void} isTarget{ Params : File Returns : boolean} visit{ Params : File Returns : void} ,,main printHelpMessage prettyPrinter prettyPrinter ,,,,PrettyPrintFile ,,PrettyPrintFile ,RefactoryInstaller PrettyPrinter JFileChooser ExtensionFileFilter AllFileFilter File PrettyPrinter PrettyPrintFile File 
JRefactory,,Refactory,1,1,0,0,0,false,0 ,0 ,0 ,,main{ Params : String[] Returns : void} selectionPanel{ Params : String Returns : void} elixir{ Params :  Returns : void} ,,main selectionPanel elixir ,,,,,,,RefactoryInstaller CommandLineSourceBrowser JFileChooser AllFileFilter File 
JRefactory,,RenameType,1,1,0,0,0,false,0 ,0 ,0 ,renameClass: RenameClassRefactoring ,run{ Params : String[] Returns : void} init{ Params : String[] Returns : boolean} printHelpMessage{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,RenameClassRefactoring ,,RenameClassRefactoring ,RefactoryInstaller RenameType 
JRefactory,,Repackage,1,1,0,0,0,false,0 ,0 ,0 ,moveClass: MoveClass setPackage: boolean atLeastOneClass: boolean ,run{ Params : String[] Returns : void} init{ Params : String[] Returns : boolean} printHelpMessage{ Params :  Returns : void} load{ Params : String Returns : void} main{ Params : String[] Returns : void} ,,main ,,,,boolean ,,boolean ,BufferedReader FileReader StringTokenizer RefactoryInstaller Repackage 
